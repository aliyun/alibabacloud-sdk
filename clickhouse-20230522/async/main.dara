/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'clickhouse';
  @version = '2023-05-22';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-2-pop' = 'clickhouse.aliyuncs.com',
    'ap-southeast-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-beijing-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'clickhouse.aliyuncs.com',
    'cn-edge-1' = 'clickhouse.aliyuncs.com',
    'cn-fujian' = 'clickhouse.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-finance' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-test-306' = 'clickhouse.aliyuncs.com',
    'cn-hongkong' = 'clickhouse.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-north-2-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-qingdao' = 'clickhouse.aliyuncs.com',
    'cn-qingdao-nebula' = 'clickhouse.aliyuncs.com',
    'cn-shanghai' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-inner' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-inner' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'clickhouse.aliyuncs.com',
    'cn-wuhan' = 'clickhouse.aliyuncs.com',
    'cn-yushanfang' = 'clickhouse.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'clickhouse.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'clickhouse.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'clickhouse.aliyuncs.com',
    'eu-west-1-oxs' = 'clickhouse.aliyuncs.com',
    'me-east-1' = 'clickhouse.aliyuncs.com',
    'rus-west-1-pop' = 'clickhouse.aliyuncs.com',
    'us-east-1' = 'clickhouse.aliyuncs.com',
    'us-west-1' = 'clickhouse.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='test1', position='Query'),
  accountType: string(name='AccountType', description='The type of the database account. Valid values:

*   **NormalAccount**: standard account
*   **SuperAccount**: privileged account

This parameter is required.', example='NormalAccount', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  description?: string(name='Description', position='Query'),
  dmlAuthSetting?: {
    allowDatabases?: [ string ](name='AllowDatabases', description='The databases on which you want to grant permissions. Separate multiple databases with commas (,).'),
    allowDictionaries?: [ string ](name='AllowDictionaries', description='The dictionaries on which you want to grant permissions. Separate multiple dictionaries with commas (,).'),
    ddlAuthority?: boolean(name='DdlAuthority', description='Specifies whether to grant the DDL permissions to the database account. Valid values:

*   **true**: The account has the permissions to execute DDL statements.
*   **false**: The account does not have the permissions to execute DDL statements.', example='true'),
    dmlAuthority?: int32(name='DmlAuthority', description='Specifies whether to grant the DML permissions to the database account. Valid values:

*   **0**: The account has the permissions to read data from the database, write data to the database, and modify the settings of the database.
*   **1**: The account only has the permissions to read data from the database.
*   **2**: The account only has the permissions to read data from the database and modify the settings of the database.', example='0'),
  }(name='DmlAuthSetting', description='The information about permissions.', shrink='json', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='a1b2c3d4@', position='Query'),
  product?: string(name='Product', description='The code of the cloud service.', example='clickhouse', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateAccountResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccount  CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBRequest {
  comment?: string(name='Comment', example='test', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  DBName: string(name='DBName', description='The name of the database. The name must meet the following requirements:

*   The name can contain lowercase letters, digits, underscores (_), and hyphens (-).
*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name can be up to 64 characters in length.

>  An underscore (_) is counted as two characters.

This parameter is required.', example='testdb001', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateDBResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    DBName?: string(name='DBName', example='testdb001'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='94F92113-FF63-5E57-8401-6FE123AD11DD'),
}

model CreateDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDB  CreateDBRequest
  * @return CreateDBResponse
 */
async function createDB(request: CreateDBRequest): CreateDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDB', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  backupSetId?: string(name='BackupSetId', position='Query'),
  clientToken?: string(name='ClientToken', example='AB', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', position='Query'),
  deploySchema?: string(name='DeploySchema', position='Query'),
  engine?: string(name='Engine', description='The engine type.', example='clickhouse', position='Query'),
  engineVersion?: string(name='EngineVersion', example='23.8', position='Query'),
  multiZone?: [ 
    {
      vSwitchIds?: [ string ](name='VSwitchIds'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='MultiZone', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  scaleMax?: string(name='ScaleMax', example='32', position='Query'),
  scaleMin?: string(name='ScaleMin', example='8', position='Query'),
  sourceDBInstanceId?: string(name='SourceDBInstanceId', position='Query'),
  vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-uf6xmupdn7v6ui9f****', position='Query'),
  vswitchId?: string(name='VswitchId', example='vsw-uf632qye9oqt4x4sr****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model CreateDBInstanceResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    orderId?: long(name='OrderId', example='21154955706****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDBInstance  CreateDBInstanceRequest
  * @return CreateDBInstanceResponse
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateEndpointRequest {
  connectionPrefix?: string(name='ConnectionPrefix', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  DBInstanceNetType?: string(name='DBInstanceNetType', description='The network type.', example='Public', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateEndpointResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEndpoint  CreateEndpointRequest
  * @return CreateEndpointResponse
 */
async function createEndpoint(request: CreateEndpointRequest): CreateEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='test', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  product?: string(name='Product', description='The code of the cloud service.', example='clickhouse', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteAccountResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='21D06907-CEA5-561D-B6B1-198BCCE99ED1'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccount  DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  DBName: string(name='DBName', description='The name of the database.

This parameter is required.', example='testdb001', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteDBResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    DBName?: string(name='DBName', example='testdb001'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='06798FEE-BEF2-5FAF-A30D-728973BBE97C'),
}

model DeleteDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDB  DeleteDBRequest
  * @return DeleteDBResponse
 */
async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DeleteDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDBInstance  DeleteDBInstanceRequest
  * @return DeleteDBInstanceResponse
 */
async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEndpointRequest {
  connectionString?: string(name='ConnectionString', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteEndpointResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DeleteEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEndpoint  DeleteEndpointRequest
  * @return DeleteEndpointResponse
 */
async function deleteEndpoint(request: DeleteEndpointRequest): DeleteEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountAuthorityRequest {
  account: string(name='Account', description='This parameter is required.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAccountAuthorityResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    allowDatabases?: [ string ](name='AllowDatabases'),
    allowDictionaries?: [ string ](name='AllowDictionaries'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    ddlAuthority?: boolean(name='DdlAuthority', example='true'),
    dmlAuthority?: int32(name='DmlAuthority', example='0'),
    totalDatabases?: [ string ](name='TotalDatabases'),
    totalDictionaries?: [ string ](name='TotalDictionaries'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountAuthorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccountAuthority  DescribeAccountAuthorityRequest
  * @return DescribeAccountAuthorityResponse
 */
async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='30', position='Query'),
  product?: string(name='Product', description='The code of the cloud service.', example='clickhouse', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeAccountsResponseBody = {
  data?: {
    accounts?: [ 
      {
        account?: string(name='Account', example='test'),
        accountType?: string(name='AccountType', example='NormalAccount'),
        description?: string(name='Description'),
        status?: string(name='Status', example='1'),
      }
    ](name='Accounts'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='30'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccounts  DescribeAccountsRequest
  * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', example='140692647406****'),
    bid?: string(name='Bid', example='PD39050615820269****'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    createTime?: string(name='CreateTime', example='2023-09-14T08:14:48Z'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    deletionProtection?: boolean(name='DeletionProtection', example='0/1'),
    description?: string(name='Description'),
    disabledPorts?: string(name='DisabledPorts'),
    engine?: string(name='Engine', example='clickhouse'),
    engineMinorVersion?: string(name='EngineMinorVersion', example='23.8.1.41495_6'),
    engineVersion?: string(name='EngineVersion', example='23.8'),
    expireTime?: string(name='ExpireTime', example='2024-04-17T08:14:48Z'),
    latestEngineMinorVersion?: string(name='LatestEngineMinorVersion', example='23.8.1.41495_6'),
    lockMode?: string(name='LockMode', example='0'),
    lockReason?: string(name='LockReason', example='nolock'),
    maintainEndTime?: string(name='MaintainEndTime', example='21:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='12:00'),
    nodes?: [ 
      {
        nodeStatus?: string(name='NodeStatus', example='active'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
      }
    ](name='Nodes'),
    objectStoreSize?: string(name='ObjectStoreSize', example='13'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzygvt54****'),
    scaleMax?: int32(name='ScaleMax', example='32'),
    scaleMin?: int32(name='ScaleMin', example='8'),
    status?: string(name='Status', example='active'),
    storageSize?: int32(name='StorageSize', example='12'),
    storageType?: string(name='StorageType', example='100'),
    tags?: [ 
      {
        key?: string(name='Key', example='id'),
        value?: string(name='Value', example='ck'),
      }
    ](name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-uf67ij56zm9x4uc6hmilg'),
    vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-wz9duj8xd6r1gzhsg*****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
  }(name='Data', description='The result returned.'),
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DescribeDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBInstanceAttribute  DescribeDBInstanceAttributeRequest
  * @return DescribeDBInstanceAttributeResponse
 */
async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceDataSourcesRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  DBName?: string(name='DBName', example='dbtest', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tableName?: string(name='TableName', example='tableTest', position='Query'),
}

model DescribeDBInstanceDataSourcesResponseBody = {
  data?: {
    columns?: [ 
      {
        columnName?: string(name='ColumnName', example='c31'),
        comment?: string(name='Comment'),
        DBName?: string(name='DBName', example='dbtest'),
        primaryKey?: string(name='PrimaryKey', example='false'),
        tableName?: string(name='TableName', example='tableTest'),
        type?: string(name='Type', example='UInt64'),
      }
    ](name='Columns'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    schemas?: string(name='Schemas', example='default'),
    tables?: [ string ](name='Tables'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F543E6CC-6868-523D-8D28-0E92CF977ED2'),
}

model DescribeDBInstanceDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBInstanceDataSources  DescribeDBInstanceDataSourcesRequest
  * @return DescribeDBInstanceDataSourcesResponse
 */
async function describeDBInstanceDataSources(request: DescribeDBInstanceDataSourcesRequest): DescribeDBInstanceDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceDataSources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  DBInstanceIds?: string(name='DBInstanceIds', example='cc-xxxxx,cx-xxxx', position='Query'),
  DBInstanceStatus?: string(name='DBInstanceStatus', example='active', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  data?: {
    DBInstances?: [ 
      {
        aliUid?: string(name='AliUid', example='1294****'),
        bid?: string(name='Bid', example='186681****'),
        chargeType?: string(name='ChargeType', example='PostPaid'),
        createTime?: string(name='CreateTime', example='2022-12-04 21:16:15'),
        DBInstanceId?: string(name='DBInstanceId', example='cc-xxxxxxx'),
        deletionProtection?: string(name='DeletionProtection', example='False'),
        description?: string(name='Description', example='test_desc'),
        engine?: string(name='Engine', example='clickhouse'),
        engineVersion?: string(name='EngineVersion', example='22.8'),
        expireTime?: string(name='ExpireTime', example='2024-02-16 11:51:06'),
        lockMode?: string(name='LockMode', example='0'),
        lockReason?: string(name='LockReason', example='null'),
        maintainEndTime?: string(name='MaintainEndTime', example='04:00:00Z'),
        maintainStartTime?: string(name='MaintainStartTime', example='00:00Z'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzy****'),
        scaleMax?: int32(name='ScaleMax', example='13'),
        scaleMin?: int32(name='ScaleMin', example='1'),
        status?: string(name='Status', example='active'),
        tags?: [ 
          {
            key?: string(name='Key', example='tag'),
            value?: string(name='Value', example='test'),
          }
        ](name='Tags'),
        vSwitchId?: string(name='VSwitchId', example='vsw-8vb5mw****'),
        vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-uf6kg****'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      }
    ](name='DBInstances'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='30'),
    totalCount?: string(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model DescribeDBInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBInstances  DescribeDBInstancesRequest
  * @return DescribeDBInstancesResponse
 */
async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointsRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeEndpointsResponseBody = {
  data?: {
    endpoints?: [ 
      {
        connectionString?: string(name='ConnectionString', example='cc-****-clickhouse.clickhouseserver.pre.rds.aliyuncs.com'),
        IPAddress?: string(name='IPAddress', example='172.30.XX.XX'),
        netType?: string(name='NetType', example='VPC'),
        ports?: [ 
          {
            port?: int32(name='Port', example='8123'),
            protocol?: string(name='Protocol', example='HttpPort'),
          }
        ](name='Ports'),
        status?: string(name='Status', example='active'),
        vSwitchId?: string(name='VSwitchId', example='vsw-0xi8829****'),
        vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-uf61z****'),
        vpcInstanceId?: string(name='VpcInstanceId', example='vpc-uf61z****'),
      }
    ](name='Endpoints'),
    instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model DescribeEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEndpoints  DescribeEndpointsRequest
  * @return DescribeEndpointsResponse
 */
async function describeEndpoints(request: DescribeEndpointsRequest): DescribeEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProcessListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-xxxxx', position='Query'),
  initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='1', position='Query'),
  initialUser?: string(name='InitialUser', description='The user who executes the query statement.', example='testuser', position='Query'),
  keyword?: string(name='Keyword', description='The keyword of the query statement.', example='SELECT', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30', position='Query'),
  queryDurationMs?: string(name='QueryDurationMs', description='The execution duration of slow SQL queries. Minimum value: 1000. Unit: milliseconds.', example='1000', position='Query'),
  queryOrder?: long(name='QueryOrder', description='Specifies the columns by which the query results are sorted in descending order.

*   0: The query results are sorted by the query_duration_ms column.
*   1: The query results are sorted by the query_duration_ms and query_start_time columns.
*   2: The query results are sorted by the query_duration_ms, query_start_time, and user columns.', example='id', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
}

model DescribeProcessListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', description='The cluster ID.', example='cc-xxxx'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', description='The address to which the query statement is sent.', example='0:0:0:0:0:ffff:1edd65ea'),
        initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='\\"79f7e40b-87e2-4ef4-b6df-21889a3a030e\\"'),
        initialUser?: string(name='InitialUser', description='The user who executes the query statement.', example='bany'),
        query?: string(name='Query', description='The query statement that is running.', example='select * from test'),
        queryDurationMs?: long(name='QueryDurationMs', description='The minimum query duration. Minimum value: **1000**. Unit: milliseconds.', example='1000'),
        queryStartTime?: string(name='QueryStartTime', description='The beginning of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-07-23T10:13:23Z'),
      }
    ](name='ResultSet', description='The result sets.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='xxx-xxx-xxx'),
}

model DescribeProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProcessListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeProcessList  DescribeProcessListRequest
  * @return DescribeProcessListResponse
 */
async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityIPListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeSecurityIPListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', description='The cluster ID.', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName', description='The name of the whitelist.', example='default'),
        groupTag?: string(name='GroupTag', description='The tag of the whitelist.', example='test'),
        securityIPList?: string(name='SecurityIPList', description='The IP addresses and CIDR blocks in the whitelist.', example='127.0.XX.XX'),
        securityIPType?: string(name='SecurityIPType', description='The IP address type.', example='ipv4'),
        whitelistNetType?: string(name='WhitelistNetType', description='The network type of the whitelist.', example='mix'),
      }
    ](name='GroupItems', description='The details about the whitelists.'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DescribeSecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityIPListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSecurityIPList  DescribeSecurityIPListRequest
  * @return DescribeSecurityIPListResponse
 */
async function describeSecurityIPList(request: DescribeSecurityIPListRequest): DescribeSecurityIPListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIPList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-dd hh:mm:ss format. The time must be in UTC.', example='2023-09-15 16:00:00', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   30 (default)
*   50
*   100', example='30', position='Query'),
  queryDurationMs?: string(name='QueryDurationMs', description='The execution duration of slow SQL queries. Minimum value: **1000**. Unit: milliseconds.', example='3000', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd hh:mm:ss format. The time must be in UTC.', example='2023-09-11 16:00:00', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', description='The cluster ID.', example='cc-bp100p4q1g9z32****'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', description='The address to which the query statement is sent.', example='0:0:0:0:0:ffff:1edd65ea'),
        initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='\\"ae915a3ad30e77e67a7215d05b658cc6\\"'),
        initialUser?: string(name='InitialUser', description='The user who executes the query statement.', example='bany'),
        memoryUsage?: long(name='MemoryUsage', description='The peak memory usage for the query. Unit: bytes.', example='4941696'),
        query?: string(name='Query', description='The query statement that is running.', example='select * from test'),
        queryDurationMs?: long(name='QueryDurationMs', description='The execution duration of slow SQL queries. Minimum value: **1000**. Unit: milliseconds.', example='3000'),
        queryStartTime?: string(name='QueryStartTime', description='The beginning of the time range to query. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2023-09-11 16:00:00'),
        readBytes?: long(name='ReadBytes', description='The size of the data that is scanned. Unit: bytes.', example='4507128020832'),
        readRows?: long(name='ReadRows', description='The number of read rows.', example='10'),
        resultBytes?: long(name='ResultBytes', description='The size of the result data. Unit: bytes.', example='10'),
        type?: string(name='Type', description='The type of the slow query logs.', example='ExceptionWhileProcessing'),
      }
    ](name='ResultSet', description='The result sets.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DF203CC8-5F68-5E3F-8050-3C77DD65731A'),
}

model DescribeSlowLogRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowLogRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlowLogRecords  DescribeSlowLogRecordsRequest
  * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogTrendRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  endTime?: string(name='EndTime', example='2023-06-07 10:03:00', position='Query'),
  product?: string(name='Product', description='The code of the cloud service.', example='clickhouse', position='Query'),
  queryDurationMs?: string(name='QueryDurationMs', example='3000', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', example='2023-04-13 17:48:00', position='Query'),
}

model DescribeSlowLogTrendResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    resultSet?: [ 
      {
        avgQueryDurationMs?: long(name='AvgQueryDurationMs', example='2000'),
        cnt?: long(name='Cnt', example='1'),
        maxQueryDurationMs?: long(name='MaxQueryDurationMs', example='3000'),
        minQueryDurationMs?: long(name='MinQueryDurationMs', example='1000'),
        queryStartTime?: string(name='QueryStartTime', example='2023-04-13 17:48:00'),
      }
    ](name='ResultSet'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7D3ECB0E-98CA-5E08-A9CA-F70C5A1E9BDF'),
}

model DescribeSlowLogTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowLogTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlowLogTrend  DescribeSlowLogTrendRequest
  * @return DescribeSlowLogTrendResponse
 */
async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogTrend', 'POST', '/', 'json', false, 'json', request);
}

model KillProcessRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-xxxxxxx', position='Query'),
  initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model KillProcessResponseBody = {
  data?: {
    count?: long(name='Count', description='The number of queries that are terminated.', example='1'),
    DBInstanceID?: int32(name='DBInstanceID', description='The cluster ID.', example='cc-xxxxxxx'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.', example='cc-xxxxxxx'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='xxx-xxx-xxx'),
}

model KillProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of KillProcess  KillProcessRequest
  * @return KillProcessResponse
 */
async function killProcess(request: KillProcessRequest): KillProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountAuthorityRequest {
  account: string(name='Account', description='The name of the database account.

This parameter is required.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  dmlAuthSetting: {
    allowDatabases?: [ string ](name='AllowDatabases', description='The databases on which you want to grant permissions. Separate multiple databases with commas (,).'),
    allowDictionaries?: [ string ](name='AllowDictionaries', description='The dictionaries on which you want to grant permissions. Separate multiple dictionaries with commas (,).'),
    ddlAuthority: boolean(name='DdlAuthority', description='Specifies whether to grant the DDL permissions to the database account. Valid values:

*   **true**: The account has the permissions to execute DDL statements.
*   **false**: The account does not have the permissions to execute DDL statements.

This parameter is required.', example='true'),
    dmlAuthority: int32(name='DmlAuthority', description='Specifies whether to grant the DML permissions to the database account. Valid values:

*   **0**: The account has the permissions to read data from the database, write data to the database, and modify the settings of the database.
*   **1**: The account only has the permissions to read data from the database.
*   **2**: The account only has the permissions to read data from the database and modify the settings of the database.

This parameter is required.', example='0'),
  }(name='DmlAuthSetting', description='The information about permissions.

This parameter is required.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyAccountAuthorityResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ModifyAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountAuthorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountAuthority  ModifyAccountAuthorityRequest
  * @return ModifyAccountAuthorityResponse
 */
async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  account: string(name='Account', description='The name of the account.

This parameter is required.', example='testuser', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-xxxxxxx', position='Query'),
  description: string(name='Description', description='The description of the account.

This parameter is required.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  data?: {
    account?: string(name='Account', example='testuser'),
    DBInstanceId?: string(name='DBInstanceId', description='The cluster ID.', example='cc-xxxxx'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='xxx-xxx-xxx'),
}

model ModifyAccountDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountDescription  ModifyAccountDescriptionRequest
  * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceAttributeRequest {
  attributeType: string(name='AttributeType', description='The configuration that you want to modify.

*   MaintainTime: the O\\&M time
*   DBInstanceDescription: the cluster name

This parameter is required.', example='DBInstanceDescription', position='Query'),
  attributeValue: string(name='AttributeValue', description='This parameter is required.', example='test', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx', position='Query'),
  product?: string(name='Product', description='The code of the cloud service.', example='clickhouse', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBInstanceAttribute  ModifyDBInstanceAttributeRequest
  * @return ModifyDBInstanceAttributeResponse
 */
async function modifyDBInstanceAttribute(request: ModifyDBInstanceAttributeRequest): ModifyDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceClassRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxxxx', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  scaleMax?: long(name='ScaleMax', example='32', position='Query'),
  scaleMin?: long(name='ScaleMin', description='The minimum capacity for auto scaling.', example='2', position='Query'),
}

model ModifyDBInstanceClassResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', example='cc-xxxxxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxxxxx'),
    scaleMax?: long(name='ScaleMax', example='32'),
    scaleMin?: long(name='ScaleMin', example='2'),
    taskId?: long(name='TaskId', example='10000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceClassResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBInstanceClass  ModifyDBInstanceClassRequest
  * @return ModifyDBInstanceClassResponse
 */
async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceClass', 'GET', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionString?: string(name='ConnectionString', description='The endpoint of the cluster.', example='cc-2ze34****-clickhouse..clickhouseserver.pre.rds.aliyuncs.com', position='Query'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the endpoint that is used to connect to the database.', example='cc-****-clickhouse', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-xxxxx', position='Query'),
  disablePorts?: string(name='DisablePorts', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', description='The endpoint of the cluster.', example='cc-2ze34****-clickhouse..clickhouseserver.pre.rds.aliyuncs.com'),
    DBInstanceID?: int32(name='DBInstanceID', description='The cluster ID.', example='cc-xxxxx'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.', example='cc-xxxxx'),
    disabledPorts?: string(name='DisabledPorts'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBInstanceConnectionString  ModifyDBInstanceConnectionStringRequest
  * @return ModifyDBInstanceConnectionStringResponse
 */
async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIPListRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx', position='Query'),
  groupName?: string(name='GroupName', example='test', position='Query'),
  modifyMode?: string(name='ModifyMode', example='0', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='192.168.0.0/24,172.16.0.0/24', position='Query'),
}

model ModifySecurityIPListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-xxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxx'),
    groupName?: string(name='GroupName', example='test'),
    groupTag?: string(name='GroupTag', example='test'),
    securityIPList?: string(name='SecurityIPList', example='192.168.0.0/24,172.16.0.0/24'),
    securityIPType?: string(name='SecurityIPType', example='ipv4'),
    taskId?: int32(name='TaskId', example='1'),
    whitelistNetType?: string(name='WhitelistNetType', example='mix'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifySecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityIPListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySecurityIPList  ModifySecurityIPListRequest
  * @return ModifySecurityIPListResponse
 */
async function modifySecurityIPList(request: ModifySecurityIPListRequest): ModifySecurityIPListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIPList', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  account: string(name='Account', description='This parameter is required.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='123456Aa', position='Query'),
  product?: string(name='Product', description='The name of the service.', example='clickhouse', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='5A6A077A-577C-536E-AC13-8E715D7A34C8'),
}

model ResetAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAccountPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetAccountPassword  ResetAccountPasswordRequest
  * @return ResetAccountPasswordResponse
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model RestartDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', description='The cluster ID.', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    taskId?: long(name='TaskId', description='The task ID.', example='100001080'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model RestartDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartDBInstance  RestartDBInstanceRequest
  * @return RestartDBInstanceResponse
 */
async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model StartDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', description='The cluster ID.', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    taskId?: long(name='TaskId', description='The task ID.', example='100000837'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F76'),
}

model StartDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDBInstance  StartDBInstanceRequest
  * @return StartDBInstanceResponse
 */
async function startDBInstance(request: StartDBInstanceRequest): StartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The cluster ID.

This parameter is required.', example='cc-bp100p4q1g9z3****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model StopDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', description='The cluster ID.', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName', description='The cluster name.'),
    taskId?: long(name='TaskId', description='The task ID.', example='100000785'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model StopDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDBInstance  StopDBInstanceRequest
  * @return StopDBInstanceResponse
 */
async function stopDBInstance(request: StopDBInstanceRequest): StopDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeMinorVersionRequest {
  DBInstanceId: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp1jyis8p15we****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  switchTime?: string(name='SwitchTime', example='2023-01-09T05:00:00Z', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', description='Specifies whether to update the minor engine version of the cluster immediately. Valid values:

*   **Immediate**: The system immediately performs the update.
*   **MaintainTime**: The system performs the update during the specified maintenance window.
*   **SpecifyTime**: The system performs the update at a specified time.', example='Immediate', position='Query'),
  targetMinorVersion?: string(name='TargetMinorVersion', example='23.8.1.41495_6', position='Query'),
}

model UpgradeMinorVersionResponseBody = {
  data?: {
    DBInstanceName?: string(name='DBInstanceName', example='cc-uf6x229yeq166****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FE242962-6DA3-5FC8-9691-37B62A3210F7'),
}

model UpgradeMinorVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeMinorVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeMinorVersion  UpgradeMinorVersionRequest
  * @return UpgradeMinorVersionResponse
 */
async function upgradeMinorVersion(request: UpgradeMinorVersionRequest): UpgradeMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

