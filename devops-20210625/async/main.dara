/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'devops';
  @version = '2021-06-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddGroupMemberRequest {
  groupId: long(name='groupId', example='22901', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  accessLevel: int32(name='accessLevel', example='30', position='Body'),
  aliyunPks: string(name='aliyunPks', example='18745637472884', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model AddGroupMemberResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', example='30'),
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
      email?: string(name='email', example='username@example.com'),
      id?: long(name='id', example='123456'),
      name?: string(name='name', example='codeup'),
      sourceId?: long(name='sourceId', example='223241'),
      state?: string(name='state', example='active'),
      username?: string(name='username', example='test-codeup'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model AddGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddGroupMemberResponseBody(name='body'),
}

async function addGroupMember(request: AddGroupMemberRequest): AddGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddGroupMember', 'POST', '/repository/groups/{groupId}/members/create', 'json', false, 'json', request);
}

model AddPipelineRelationsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='11', position='Path'),
  relObjectIds: string(name='relObjectIds', example='11,22', position='Query'),
  relObjectType: string(name='relObjectType', example='VARIABLE_GROUP', position='Query'),
}

model AddPipelineRelationsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model AddPipelineRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPipelineRelationsResponseBody(name='body'),
}

async function addPipelineRelations(request: AddPipelineRelationsRequest): AddPipelineRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddPipelineRelations', 'POST', '/organization/{organizationId}/{pipelineId}/pipelineRelations', 'json', false, 'json', request);
}

model AddRepositoryMemberRequest {
  repositoryId: long(name='repositoryId', example='2464454', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  accessLevel: int32(name='accessLevel', example='30', position='Body'),
  aliyunPks: string(name='aliyunPks', example='18745637472884', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model AddRepositoryMemberResponseBody = {
  errorCode?: string(name='errorCode', example='Invalid.IdNotFound'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='4D6AF7CC-B43B-5454-86AB-023D25E44868'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', example='40'),
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
      email?: string(name='email', example='username@example.com'),
      id?: long(name='id', example='123456'),
      state?: string(name='state', example='active'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model AddRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddRepositoryMemberResponseBody(name='body'),
}

async function addRepositoryMember(request: AddRepositoryMemberRequest): AddRepositoryMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddRepositoryMember', 'POST', '/repository/{repositoryId}/members', 'json', false, 'json', request);
}

model AddWebhookRequest {
  repositoryId: long(name='repositoryId', example='2835387', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  description?: string(name='description', position='Body'),
  enableSslVerification?: boolean(name='enableSslVerification', example='false', position='Body'),
  mergeRequestsEvents?: boolean(name='mergeRequestsEvents', example='true', position='Body'),
  noteEvents?: boolean(name='noteEvents', example='false', position='Body'),
  pushEvents?: boolean(name='pushEvents', example='true', position='Body'),
  secretToken?: string(name='secretToken', example='xxxx', position='Body'),
  tagPushEvents?: boolean(name='tagPushEvents', example='false', position='Body'),
  url: string(name='url', example='https://xxxxx', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model AddWebhookResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_NOT_FOUND_ERROR'),
  errorMessage?: string(name='errorMessage', example='“”'),
  requestId?: string(name='requestId', example='6177543A-8D54-5736-A93B-E0195A1512CB'),
  result?: {
    createdAt?: string(name='createdAt', example='2022-03-12 12:00:00'),
    description?: string(name='description'),
    enableSslVerification?: boolean(name='enableSslVerification', example='false'),
    id?: long(name='id', example='30815'),
    lastTestResult?: string(name='lastTestResult', example='ok'),
    mergeRequestsEvents?: boolean(name='mergeRequestsEvents', example='true'),
    noteEvents?: boolean(name='noteEvents', example='false'),
    pushEvents?: boolean(name='pushEvents', example='true'),
    repositoryId?: long(name='repositoryId', example='2835387'),
    secretToken?: string(name='secretToken', example='xxxx'),
    tagPushEvents?: boolean(name='tagPushEvents', example='true'),
    url?: string(name='url', example='https://xxxxx'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model AddWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: AddWebhookResponseBody(name='body'),
}

async function addWebhook(request: AddWebhookRequest): AddWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWebhook', 'POST', '/repository/{repositoryId}/webhooks/create', 'json', false, 'json', request);
}

model CreateBranchRequest {
  repositoryId: string(name='repositoryId', example='2334815', position='Path'),
  accessToken?: string(name='accessToken', example='0cf2c8458ac44d9481aab2dd6ec10596v3', position='Query'),
  branchName: string(name='branchName', example='createBranch', position='Body'),
  ref: string(name='ref', example='master', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateBranchResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    commit?: {
      authorEmail?: string(name='authorEmail', example='username@example.com'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate', example='2022-03-18 09:00:00'),
      committedDate?: string(name='committedDate', example='2022-03-18 10:00:00'),
      committerEmail?: string(name='committerEmail', example='username@example.com'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
      id?: string(name='id', example='ff4fb5ac6d1f44f452654336d2dba468ae6c8d04'),
      message?: string(name='message', example='create branch'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId', example='ff4fb5ac'),
      title?: string(name='title'),
    }(name='commit'),
    name?: string(name='name', example='createBranch'),
    protected?: boolean(name='protected', example='false'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateBranchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBranchResponseBody(name='body'),
}

async function createBranch(request: CreateBranchRequest): CreateBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBranch', 'POST', '/repository/{repositoryId}/branches', 'json', false, 'json', request);
}

model CreateDeployKeyRequest {
  repositoryId: long(name='repositoryId', example='2813489', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  key: string(name='key', example='""', position='Body'),
  title: string(name='title', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateDeployKeyResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    fingerprint?: string(name='fingerprint', example='xx:xx:xx:xx'),
    id?: long(name='id', example='502385'),
    key?: string(name='key', example='""'),
    title?: string(name='title'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateDeployKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeployKeyResponseBody(name='body'),
}

async function createDeployKey(request: CreateDeployKeyRequest): CreateDeployKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDeployKey', 'POST', '/repository/{repositoryId}/keys/create', 'json', false, 'json', request);
}

model CreateFileRequest {
  repositoryId: long(name='repositoryId', example='2080972', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  branchName: string(name='branchName', example='master', position='Body'),
  commitMessage: string(name='commitMessage', position='Body'),
  content: string(name='content', position='Body'),
  encoding?: string(name='encoding', example='text', position='Body'),
  filePath: string(name='filePath', example='/src/main/test.java', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateFileResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='F8053E32-9623-511F-8B46-F0E5FD206524'),
  result?: {
    branchName?: string(name='branchName', example='master'),
    filePath?: string(name='filePath', example='/src/main/test.java'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileResponseBody(name='body'),
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFile', 'POST', '/repository/{repositoryId}/files', 'json', false, 'json', request);
}

model CreateFlowTagRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  color: string(name='color', example='#1F9AEF', position='Query'),
  flowTagGroupId: long(name='flowTagGroupId', example='111', position='Query'),
  name: string(name='name', maxLength=20, position='Query'),
}

model CreateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  id?: long(name='id', example='111'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowTagResponseBody(name='body'),
}

async function createFlowTag(request: CreateFlowTagRequest): CreateFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFlowTag', 'POST', '/organization/{organizationId}/flow/tags', 'json', false, 'json', request);
}

model CreateFlowTagGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  name: string(name='name', maxLength=20, position='Query'),
}

model CreateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  id?: long(name='id', example='1223'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowTagGroupResponseBody(name='body'),
}

async function createFlowTagGroup(request: CreateFlowTagGroupRequest): CreateFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFlowTagGroup', 'POST', '/organization/{organizationId}/flow/tagGroups', 'json', false, 'json', request);
}

model CreateHostGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  aliyunRegion?: string(name='aliyunRegion', example='cn-beijing', position='Body'),
  ecsLabelKey?: string(name='ecsLabelKey', example='ecs', position='Body'),
  ecsLabelValue?: string(name='ecsLabelValue', example='ecs', position='Body'),
  ecsType?: string(name='ecsType', example='ECS_ALIYUN', position='Body'),
  envId?: string(name='envId', example='0', position='Body'),
  machineInfos?: string(name='machineInfos', example='[{"aliyunRegionId":"cn-beijing","machineSn":"i-sssssss","instanceName":"ceshi","ip":"120.0.0.0"}]', position='Body'),
  name: string(name='name', position='Body'),
  serviceConnectionId: long(name='serviceConnectionId', example='123', position='Body'),
  tagIds?: string(name='tagIds', example='12,234', position='Body'),
  type: string(name='type', example='ECS', position='Body'),
}

model CreateHostGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  hostGroupId?: long(name='hostGroupId', example='123'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroup(request: CreateHostGroupRequest): CreateHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHostGroup', 'POST', '/organization/{organizationId}/hostGroups', 'json', true, 'form', request);
}

model CreateOAuthTokenRequest {
  clientId: string(name='clientId', description='clientId', example='dc7e0b3c00a3e58f46', position='Body'),
  clientSecret: string(name='clientSecret', description='client_secret', example='a433294edea39cae7e7870', position='Body'),
  code?: string(name='code', example='86df532f74454e189740d100ac97f4b9', position='Body'),
  grantType: string(name='grantType', example='code', position='Body'),
  login?: string(name='login', example='username', position='Body'),
  scope: string(name='scope', example='read:repo', position='Body'),
}

model CreateOAuthTokenResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='C2F153F6-BB43-50C4-9F4F-40593203E19A'),
  result?: {
    accessToken?: string(name='accessToken', example='2aeb4cd012af879e54f0d37dfa526f51'),
    id?: string(name='id', description='id', example='30815'),
    scope?: string(name='scope', example='read:repo'),
    tokenType?: string(name='tokenType', example='code'),
  }(name='result'),
  success?: string(name='success', example='true'),
}

model CreateOAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOAuthTokenResponseBody(name='body'),
}

async function createOAuthToken(request: CreateOAuthTokenRequest): CreateOAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOAuthToken', 'POST', '/login/oauth/create', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  content: string(name='content', position='Body'),
  name: string(name='name', position='Body'),
}

model CreatePipelineResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelinId?: long(name='pipelinId', example='11XXX'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/organization/{organizationId}/pipelines', 'json', true, 'form', request);
}

model CreatePipelineGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  name: string(name='name', maxLength=40, position='Query'),
}

model CreatePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelineGroup?: {
    id?: long(name='id', example='111'),
    name?: string(name='name'),
  }(name='pipelineGroup'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreatePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineGroupResponseBody(name='body'),
}

async function createPipelineGroup(request: CreatePipelineGroupRequest): CreatePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineGroup', 'POST', '/organization/{organizationId}/pipelineGroups', 'json', false, 'json', request);
}

model CreateProjectRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  customCode: string(name='customCode', example='ABCD', position='Body'),
  name: string(name='name', example='name', position='Body'),
  scope: string(name='scope', example='public', position='Body'),
  templateIdentifier: string(name='templateIdentifier', example='704eaxxxx5efede61xxx5', position='Body'),
}

model CreateProjectResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  project?: {
    categoryIdentifier?: string(name='categoryIdentifier', example='Project'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    customCode?: string(name='customCode', example='OJAY'),
    description?: string(name='description', example='xxx'),
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1623916393000'),
    icon?: string(name='icon', example='https://xxxxxx.png'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name', example='demo示例项目'),
    organizationIdentifier?: string(name='organizationIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    scope?: string(name='scope', example='public'),
    statusIdentifier?: string(name='statusIdentifier', example='8a40xxxxxxxxxxxxx64'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='1'),
    typeIdentifier?: string(name='typeIdentifier', example='CustomProject'),
  }(name='project'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/organization/{organizationId}/projects/createProject', 'json', false, 'json', request);
}

model CreateProtectdBranchRequest {
  repositoryId: long(name='repositoryId', example='2813891', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  allowMergeRoles: [ int32 ](name='allowMergeRoles', position='Body'),
  allowMergeUserIds?: [ string ](name='allowMergeUserIds', position='Body'),
  allowPushRoles?: [ int32 ](name='allowPushRoles', position='Body'),
  allowPushUserIds?: [ string ](name='allowPushUserIds', position='Body'),
  branch: string(name='branch', example='protectBranch', position='Body'),
  id?: long(name='id', example='--', position='Body'),
  mergeRequestSetting?: {
    allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
    defaultAssignees?: [ string ](name='defaultAssignees'),
    isAllowSelfApproval?: boolean(name='isAllowSelfApproval', example='true'),
    isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed', example='true'),
    isRequired?: boolean(name='isRequired', example='true'),
    isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush', example='false'),
    minimumApproval?: int32(name='minimumApproval', example='1'),
    mrMode?: string(name='mrMode', example='general'),
    whiteList?: string(name='whiteList', example='**.java'),
  }(name='mergeRequestSetting', position='Body'),
  testSettingDTO?: {
    checkConfig?: {
      checkItems?: [ 
        {
          isRequired?: boolean(name='isRequired', example='false'),
          name?: string(name='name'),
        }
      ](name='checkItems'),
    }(name='checkConfig'),
    checkTaskQualityConfig?: {
      bizNo?: string(name='bizNo', example='123456'),
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_task_quality'),
      taskName?: string(name='taskName', example='bz-task-quality'),
    }(name='checkTaskQualityConfig'),
    codeGuidelinesDetection?: {
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_code_guide_lines'),
    }(name='codeGuidelinesDetection'),
    isRequired?: boolean(name='isRequired', example='false'),
    sensitiveInfoDetection?: {
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_code_sensitive_info'),
    }(name='sensitiveInfoDetection'),
  }(name='testSettingDTO', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateProtectdBranchResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='C2F153F6-BB43-50C4-9F4F-40593203E19A'),
  result?: {
    allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
    allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
    allowPushRoles?: [ int32 ](name='allowPushRoles'),
    allowPushUserIds?: [ long ](name='allowPushUserIds'),
    branch?: string(name='branch', example='protectBranch'),
    id?: long(name='id', example='5240'),
    mergeRequestSetting?: {
      allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
      defaultAssignees?: [ string ](name='defaultAssignees'),
      isAllowSelfApproval?: boolean(name='isAllowSelfApproval', example='true'),
      isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed', example='true'),
      isRequired?: boolean(name='isRequired', example='true'),
      isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush', example='false'),
      minimumApproval?: int32(name='minimumApproval', example='1'),
      mrMode?: string(name='mrMode', example='general'),
      whiteList?: string(name='whiteList', example='**.java'),
    }(name='mergeRequestSetting'),
    testSettingDTO?: {
      checkConfig?: {
        checkItems?: [ 
          {
            isRequired?: boolean(name='isRequired', example='false'),
            name?: string(name='name'),
          }
        ](name='checkItems'),
      }(name='checkConfig'),
      checkTaskQualityConfig?: {
        bizNo?: string(name='bizNo', example='123456'),
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_task_quality'),
        taskName?: string(name='taskName', example='biz-task-quality'),
      }(name='checkTaskQualityConfig'),
      codeGuidelinesDetection?: {
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_code_guide_lines'),
      }(name='codeGuidelinesDetection'),
      isRequired?: boolean(name='isRequired', example='false'),
      sensitiveInfoDetection?: {
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_code_sensitive_info'),
      }(name='sensitiveInfoDetection'),
    }(name='testSettingDTO'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateProtectdBranchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProtectdBranchResponseBody(name='body'),
}

async function createProtectdBranch(request: CreateProtectdBranchRequest): CreateProtectdBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProtectdBranch', 'POST', '/repository/{repositoryId}/protect_branches', 'json', false, 'json', request);
}

model CreateRepositoryRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100', position='Body'),
  description?: string(name='description', position='Body'),
  gitignoreType?: string(name='gitignoreType', example='Java', position='Body'),
  importAccount?: string(name='importAccount', example='codeup-test', position='Body'),
  importDemoProject?: boolean(name='importDemoProject', example='true', position='Body'),
  importRepoType?: string(name='importRepoType', example='GIT', position='Body'),
  importToken?: string(name='importToken', example='xxxxx', position='Body'),
  importTokenEncrypted?: string(name='importTokenEncrypted', example='text', position='Body'),
  importUrl?: string(name='importUrl', example='https://github.com/a/b.git', position='Body'),
  initStandardService?: boolean(name='initStandardService', example='true', position='Body'),
  isCryptoEnabled?: boolean(name='isCryptoEnabled', example='false', position='Body'),
  localImportUrl?: string(name='localImportUrl', example='""', position='Body'),
  name: string(name='name', position='Body'),
  namespaceId?: long(name='namespaceId', position='Body'),
  path?: string(name='path', position='Body'),
  readmeType?: string(name='readmeType', example='USER_GUIDE', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', example='0', position='Body'),
  createParentPath?: boolean(name='createParentPath', example='true', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  sync?: boolean(name='sync', example='false', position='Query'),
}

model CreateRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='401'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_UNAUTHORIZED_ERROR'),
  requestId?: string(name='requestId', example='F590C9D8-E908-5B6C-95AC-56B7E8011FFA'),
  result?: {
    importFromSvn?: boolean(name='Import_from_svn', example='false'),
    archived?: boolean(name='archived', example='false'),
    avatarUrl?: string(name='avatar_url', example='""'),
    createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
    creatorId?: long(name='creatorId', example='1233'),
    defaultBranch?: string(name='defaultBranch', example='master'),
    demoProject?: boolean(name='demoProject', example='false'),
    description?: string(name='description'),
    httpUrlToRepo?: string(name='httpUrlToRepo', example='""'),
    id?: long(name='id', description='id', example='2959'),
    lastActivityAt?: string(name='lastActivityAt', example='2022-01-14T21:08:26+08:00'),
    name?: string(name='name', example='codeupTest'),
    nameWithNamespace?: string(name='nameWithNamespace', example='codeup-test-org / test-codeup'),
    namespace?: {
      avatar?: string(name='avatar', example='""'),
      createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
      description?: string(name='description', example='codeup repo description'),
      id?: long(name='id', description='id', example='3194'),
      name?: string(name='name', example='codeup'),
      ownerId?: long(name='ownerId', example='123'),
      path?: string(name='path', example='codeup'),
      public?: boolean(name='public', example='true'),
      updatedAt?: string(name='updatedAt', example='2022-01-14T21:08:26+08:00'),
      visibilityLevel?: string(name='visibilityLevel', example='0'),
    }(name='namespace'),
    path?: string(name='path', example='test-codeup'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-codeup'),
    sshUrlToRepo?: string(name='sshUrlToRepo', example='""'),
    visibilityLevel?: string(name='visibilityLevel', example='0'),
    webUrl?: string(name='webUrl', description='web url', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepositoryResponseBody(name='body'),
}

async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepository', 'POST', '/repository/create', 'json', false, 'json', request);
}

model CreateRepositoryGroupRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100', position='Body'),
  description?: string(name='description', position='Body'),
  name: string(name='name', example='test-create-group', position='Body'),
  parentId: long(name='parentId', example='26842', position='Body'),
  path: string(name='path', example='test-create-group', position='Body'),
  visibilityLevel: int32(name='visibilityLevel', example='10', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateRepositoryGroupResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    description?: string(name='description'),
    id?: long(name='id', example='18685'),
    name?: string(name='name', example='test-create-group'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    ownerId?: long(name='ownerId', example='19230'),
    parentId?: long(name='parentId', example='26842'),
    path?: string(name='path', example='test-create-group'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-create-group'),
    type?: string(name='type', example='Group'),
    visibilityLevel?: int32(name='visibilityLevel', example='10'),
    webUrl?: string(name='webUrl', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateRepositoryGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepositoryGroupResponseBody(name='body'),
}

async function createRepositoryGroup(request: CreateRepositoryGroupRequest): CreateRepositoryGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepositoryGroup', 'POST', '/repository/groups/create', 'json', false, 'json', request);
}

model CreateResourceMemberRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  resourceType: string(name='resourceType', example='pipeline', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', example='123', position='Path'),
  accountId: string(name='accountId', example='1111111111111', position='Body'),
  roleName: string(name='roleName', example='admin', position='Body'),
}

model CreateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceMemberResponseBody(name='body'),
}

async function createResourceMember(request: CreateResourceMemberRequest): CreateResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceMember', 'POST', '/organization/{organizationId}/{resourceType}/{resourceId}/members', 'json', true, 'form', request);
}

model CreateServiceAuthRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  serviceAuthType: string(name='serviceAuthType', example='RAM', position='Query'),
}

model CreateServiceAuthResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='""'),
  id?: string(name='id', example='1223'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateServiceAuthResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceAuthResponseBody(name='body'),
}

async function createServiceAuth(request: CreateServiceAuthRequest): CreateServiceAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceAuth', 'POST', '/organization/{organizationId}/serviceAuths', 'json', false, 'json', request);
}

model CreateServiceConnectionRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  authType: string(name='authType', example='CREDENTIAL', position='Body'),
  connectionName: string(name='connectionName', position='Body'),
  connectionType: string(name='connectionType', example='ecs', position='Body'),
  scope: string(name='scope', example='PERSON', position='Body'),
  serviceAuthId: long(name='serviceAuthId', example='111', position='Body'),
}

model CreateServiceConnectionResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  id?: long(name='id', example='19224'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateServiceConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceConnectionResponseBody(name='body'),
}

async function createServiceConnection(request: CreateServiceConnectionRequest): CreateServiceConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceConnection', 'POST', '/organization/{organizationId}/createServiceConnection', 'json', false, 'json', request);
}

model CreateServiceCredentialRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  name: string(name='name', example='张三的Git证书', maxLength=100, position='Body'),
  password: string(name='password', example='zhangsan', position='Body'),
  scope?: string(name='scope', example='PERSON', position='Body'),
  type: string(name='type', example='USERNAME_PASSWORD', position='Body'),
  username: string(name='username', example='zhangsan', position='Body'),
}

model CreateServiceCredentialResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  id?: long(name='id', example='11222'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateServiceCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceCredentialResponseBody(name='body'),
}

async function createServiceCredential(request: CreateServiceCredentialRequest): CreateServiceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceCredential', 'POST', '/organization/{organizationId}/serviceCredentials', 'json', false, 'json', request);
}

model CreateSprintRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  endDate?: string(name='endDate', example='2021-12-02', position='Body'),
  name: string(name='name', example='xxx', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', example='asd345xxxxx9q9845xxxxx34', position='Body'),
  staffIds: [ string ](name='staffIds', position='Body'),
  startDate?: string(name='startDate', example='2021-12-01', position='Body'),
}

model CreateSprintResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  sprint?: {
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    description?: string(name='description', example='xxx'),
    endDate?: long(name='endDate', example='1623916393000'),
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1623916393000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name', example='demo示例项目'),
    scope?: string(name='scope', example='public'),
    spaceIdentifier?: string(name='spaceIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    startDate?: long(name='startDate', example='1638403200000'),
    status?: string(name='status', example='TODO'),
  }(name='sprint'),
  success?: boolean(name='success', example='true'),
}

model CreateSprintResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSprintResponseBody(name='body'),
}

async function createSprint(request: CreateSprintRequest): CreateSprintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSprint', 'POST', '/organization/{organizationId}/sprints/create', 'json', false, 'json', request);
}

model CreateSshKeyRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
}

model CreateSshKeyResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  sshKey?: {
    id?: long(name='id', example='123'),
    publicKey?: string(name='publicKey', example='assssssssssss'),
  }(name='sshKey'),
  success?: boolean(name='success', example='true'),
}

model CreateSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSshKeyResponseBody(name='body'),
}

async function createSshKey(request: CreateSshKeyRequest): CreateSshKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSshKey', 'POST', '/organization/{organizationId}/sshKey', 'json', false, 'json', request);
}

model CreateTagRequest {
  repositoryId: long(name='repositoryId', example='2080972', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  message?: string(name='message', position='Body'),
  ref: string(name='ref', example='master', position='Body'),
  tagName: string(name='tagName', example='v1.0', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model CreateTagResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    commit?: {
      authorEmail?: string(name='authorEmail', example='username@example.com'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate', example='2022-03-18 10:00:00'),
      committedDate?: string(name='committedDate', example='2022-03-18 09:00:00'),
      committerEmail?: string(name='committerEmail', example='username@example.com'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
      id?: string(name='id', example='e0297d8fb0393c833a8531e7cc8832739e3cba6d'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId', example='e0297d8f'),
      title?: string(name='title'),
    }(name='commit'),
    id?: string(name='id', example='0e3b6aa5eab2b086b59fde74766b28d4e5faab0d'),
    message?: string(name='message'),
    name?: string(name='name', example='v1.0'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResponseBody(name='body'),
}

async function createTag(request: CreateTagRequest): CreateTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTag', 'POST', '/repository/{repositoryId}/tags/create', 'json', false, 'json', request);
}

model CreateTestCaseRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  assignedTo: string(name='assignedTo', example='19xxxx31947xxxx', position='Body'),
  directoryIdentifier: string(name='directoryIdentifier', example='fdd395xxxxx9q9845xxxxx23', position='Body'),
  fieldValueList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', example='6aexxxxxa1d98c09c60xxxx16'),
      value?: string(name='value', example='77c7fb03c4186c8691d6...'),
    }
  ](name='fieldValueList', position='Body'),
  priority?: string(name='priority', example='ik3dexxxxxfdfds1xxxxx23', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', example='asd345xxxxx9q9845xxxxx34', position='Body'),
  subject: string(name='subject', position='Body'),
  tags?: [ string ](name='tags', position='Body'),
  testcaseStepContentInfo?: {
    precondition?: string(name='precondition'),
    stepResultList?: [ 
      {
        expected?: string(name='expected'),
        step?: string(name='step'),
      }
    ](name='stepResultList'),
    stepType: string(name='stepType', example='TEXT'),
  }(name='testcaseStepContentInfo', position='Body'),
}

model CreateTestCaseResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='18E50717-93A4-53BC-A30D-963F742A1CE6'),
  success?: boolean(name='success', example='true'),
  testcase?: {
    assignedTo?: {
      assignIdentifier?: string(name='assignIdentifier', example='134xxx343xxxxx'),
      name?: string(name='name'),
      tbRoleId?: string(name='tbRoleId', example='3c2253c22xxxxxxxx53a'),
    }(name='assignedTo'),
    categoryIdentifier?: string(name='categoryIdentifier', example='TestCase'),
    creator?: {
      createIdentifier?: string(name='createIdentifier', example='134xxx343xxxxx'),
      name?: string(name='name'),
    }(name='creator'),
    detailInfo?: {
      expectedResult?: {
        expectContent?: string(name='expectContent'),
        expectContentType?: string(name='expectContentType', example='RICHTEXT'),
        expectIdentifier?: string(name='expectIdentifier', example='59253164xxxxxxf2e98dbc7e27'),
      }(name='expectedResult'),
      precondition?: {
        preContent?: string(name='preContent'),
        preContentType?: string(name='preContentType', example='RICHTEXT'),
        preIdentifier?: string(name='preIdentifier', example='59253164xxxxxxf2e98dbc7e27'),
      }(name='precondition'),
      stepContent?: {
        stepContent?: string(name='stepContent'),
        stepContentType?: string(name='stepContentType', example='RICHTEXT'),
        stepIdentifier?: string(name='stepIdentifier', example='59253164xxxxxxf2e98dbc7e27'),
      }(name='stepContent'),
      stepType?: string(name='stepType', example='TEXT/TABLE'),
    }(name='detailInfo'),
    directory?: {
      childIdentifier?: string(name='childIdentifier', example='0bc1150dcxxxxxxxx04c'),
      directoryIdentifier?: string(name='directoryIdentifier', example='0bc1150dcxxxxxxxx04c'),
      name?: string(name='name'),
      pathName?: [ string ](name='pathName'),
    }(name='directory'),
    identifier?: string(name='identifier', example='5a73f81c834d013361d92bdcce'),
    modifier?: {
      modifyIdentifier?: string(name='modifyIdentifier', example='134xxx343xxxxx'),
      name?: string(name='name'),
    }(name='modifier'),
    spaceIdentifier?: string(name='spaceIdentifier', example='a18571eba8fe9267cd8375fc06'),
    spaceType?: string(name='spaceType', example='TestRepo'),
    subject?: string(name='subject'),
  }(name='testcase'),
}

model CreateTestCaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTestCaseResponseBody(name='body'),
}

async function createTestCase(request: CreateTestCaseRequest): CreateTestCaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTestCase', 'POST', '/organization/{organizationId}/testhub/testcase', 'json', false, 'json', request);
}

model CreateUserKeyRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  expireTime?: string(name='expireTime', example='2022-03-12 12:00:00', position='Body'),
  keyScope: string(name='keyScope', example='ALL', position='Body'),
  publicKey: string(name='publicKey', example='xxx', position='Body'),
  title: string(name='title', example='SSH Title', position='Body'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
}

model CreateUserKeyResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_UNKNOWN_ERROR'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    createdAt?: string(name='createdAt', example='2022-03-12 12:00:00'),
    expireTime?: string(name='expireTime', example='2022-03-12 12:00:00'),
    fingerPrint?: string(name='fingerPrint', example='xxx'),
    id?: long(name='id', example='11072'),
    keyScope?: string(name='keyScope', example='ALL'),
    lastUsedTime?: string(name='lastUsedTime', example='2022-03-12 12:00:00'),
    publicKey?: string(name='publicKey', example='xxx'),
    title?: string(name='title', example='My Title'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model CreateUserKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserKeyResponseBody(name='body'),
}

async function createUserKey(request: CreateUserKeyRequest): CreateUserKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUserKey', 'POST', '/api/v3/user/keys/create', 'json', false, 'json', request);
}

model CreateVariableGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  description?: string(name='description', example='变量组', position='Body'),
  name: string(name='name', example='变量组', position='Body'),
  variables: string(name='variables', example='[{"isEncrypted":true,"name":"name1","value":"vaue1"}]', position='Body'),
}

model CreateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  variableGroupId?: long(name='variableGroupId', example='1234'),
}

model CreateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVariableGroupResponseBody(name='body'),
}

async function createVariableGroup(request: CreateVariableGroupRequest): CreateVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVariableGroup', 'POST', '/organization/{organizationId}/variableGroups', 'json', true, 'form', request);
}

model CreateWorkitemRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  assignedTo: string(name='assignedTo', example='19xxxx31947xxxx', position='Body'),
  category: string(name='category', example='Req', position='Body'),
  description?: string(name='description', example='测试内容', position='Body'),
  descriptionFormat?: string(name='descriptionFormat', example='RICHTEXT', position='Body'),
  fieldValueList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', example='6aexxxxxa1d98c09c60xxxx16'),
      value?: string(name='value', example='77c7fb03c4186c8691d6...'),
      workitemIdentifier?: string(name='workitemIdentifier', example='null'),
    }
  ](name='fieldValueList', position='Body'),
  parent?: string(name='parent', example='3a0c9cdd24ae1e1995b8...', position='Body'),
  participant?: [ string ](name='participant', position='Body'),
  space: string(name='space', example='asd345xxxxx9q9845xxxxx34', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', example='asd345xxxxx9q9845xxxxx34', position='Body'),
  spaceType: string(name='spaceType', example='Project', position='Body'),
  sprint?: [ string ](name='sprint', position='Body'),
  subject: string(name='subject', example='测试工作项', position='Body'),
  tracker?: [ string ](name='tracker', position='Body'),
  verifier?: [ string ](name='verifier', position='Body'),
  workitemType: string(name='workitemType', example='9uyxxxxxre573f561dxxn40', position='Body'),
}

model CreateWorkitemResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitem?: {
    assignedTo?: string(name='assignedTo', example='19xx7043xxxxxxx914'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    document?: string(name='document', example='html格式'),
    gmtCreate?: long(name='gmtCreate', example='1640850318000'),
    gmtModified?: long(name='gmtModified', example='1640850318000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    parentIdentifier?: string(name='parentIdentifier', example='e8bxxxxxxxxxxxxxxxx24'),
    serialNumber?: string(name='serialNumber', example='ABCD-1'),
    spaceIdentifier?: string(name='spaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
    spaceName?: string(name='spaceName', example='需求项目'),
    spaceType?: string(name='spaceType', example='Project'),
    sprintIdentifier?: string(name='sprintIdentifier', example='75528f17703e92e5a568......'),
    status?: string(name='status', example='待处理'),
    statusIdentifier?: string(name='statusIdentifier', example='28'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='100005'),
    subject?: string(name='subject', example='测试工作项'),
    updateStatusAt?: long(name='updateStatusAt', example='1640850328000'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uxxxxxxre573f5xxxxxx0'),
  }(name='workitem'),
}

model CreateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemResponseBody(name='body'),
}

async function createWorkitem(request: CreateWorkitemRequest): CreateWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitem', 'POST', '/organization/{organizationId}/workitems/create', 'json', false, 'json', request);
}

model CreateWorkitemCommentRequest {
  organizationId: string(name='organizationId', example='60811b5eed6e867404f6xxxx', position='Path'),
  content: string(name='content', position='Body'),
  formatType: string(name='formatType', example='RICHTEXT/MARKDOWN', position='Body'),
  parentId?: string(name='parentId', example='26842', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', example='1e9903d8b3f12xxxxxf9286ef5', position='Body'),
}

model CreateWorkitemCommentResponseBody = {
  comment?: {
    id?: long(name='Id', example='26842'),
    content?: string(name='content'),
    createTime?: long(name='createTime', example='1667202662000'),
    formatType?: string(name='formatType', example='RICHTEXT/MARKDOWN'),
    isTop?: boolean(name='isTop', example='true/false'),
    modifiedTime?: long(name='modifiedTime', example='1637995553000'),
    parentId?: long(name='parentId', example='26842'),
    targetIdentifier?: string(name='targetIdentifier', example='79d523806bdxxxxx95612a5154'),
    targetType?: string(name='targetType', example='workitem'),
    topTime?: long(name='topTime', example='1667202662000'),
    user?: {
      account?: string(name='account', example='13164xxxxx41068'),
      avatar?: string(name='avatar', example='https://xxxxx/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200'),
      displayName?: string(name='displayName'),
      identifier?: string(name='identifier', example='1e9903d8bxxxxxxe9df9286ef5'),
      nickName?: string(name='nickName'),
      realName?: string(name='realName'),
      targetType?: string(name='targetType', example='workitem'),
    }(name='user'),
  }(name='Comment'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: string(name='success'),
}

model CreateWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemCommentResponseBody(name='body'),
}

async function createWorkitemComment(request: CreateWorkitemCommentRequest): CreateWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemComment', 'POST', '/organization/{organizationId}/workitems/comment', 'json', false, 'json', request);
}

model CreateWorkitemEstimateRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  description?: string(name='description', position='Body'),
  recordUserIdentifier: string(name='recordUserIdentifier', example='1316458xxxxx41068', position='Body'),
  spentTime: string(name='spentTime', example='21', position='Body'),
  type: string(name='type', example='9144ef6b72d8exxxxx9e61a4d0', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', example='1e9903d8b3f1xxxxxf9286ef5', position='Body'),
}

model CreateWorkitemEstimateResponseBody = {
  workitemTimeEstimate?: {
    description?: string(name='description'),
    identifier?: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd'),
    recordUser?: {
      account?: string(name='account', example='1316458xxxxx41068'),
      avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200'),
      dingTalkId?: string(name='dingTalkId', example='fdsad12xxx11'),
      displayName?: string(name='displayName'),
      displayNickName?: string(name='displayNickName', example='wangwu'),
      displayRealName?: string(name='displayRealName', example='wangwu'),
      email?: string(name='email', example='xxxxxxcc@xxx.com'),
      gender?: string(name='gender'),
      identifier?: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd'),
      isDisabled?: boolean(name='isDisabled', example='true/false'),
      mobile?: string(name='mobile'),
      nameEn?: string(name='nameEn', example='wangwu'),
      nickName?: string(name='nickName'),
      nickNamePinyin?: string(name='nickNamePinyin', example='wangwu'),
      realName?: string(name='realName'),
      realNamePinyin?: string(name='realNamePinyin', example='wangwu'),
      stamp?: string(name='stamp'),
      tbRoleId?: string(name='tbRoleId', example='9144ef6b72d8exxxxx9e61a4d0'),
    }(name='recordUser'),
    spentTime?: long(name='spentTime', example='11'),
    type?: string(name='type', example='9144ef6b72d8exxxxx9e61a4d0'),
    workitemIdentifier?: string(name='workitemIdentifier', example='1e9903d8b3f1xxxxxf9286ef5'),
  }(name='WorkitemTimeEstimate'),
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success'),
}

model CreateWorkitemEstimateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemEstimateResponseBody(name='body'),
}

async function createWorkitemEstimate(request: CreateWorkitemEstimateRequest): CreateWorkitemEstimateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemEstimate', 'POST', '/organization/{organizationId}/workitems/estimate', 'json', false, 'json', request);
}

model CreateWorkitemRecordRequest {
  organizationId: string(name='organizationId', example='1e9903d8b3f1xxxxxf9286ef5', position='Path'),
  actualTime: string(name='actualTime', example='12', position='Body'),
  description?: string(name='description', position='Body'),
  gmtEnd: string(name='gmtEnd', example='1646323200000', position='Body'),
  gmtStart: string(name='gmtStart', example='1667205617061', position='Body'),
  recordUserIdentifier: string(name='recordUserIdentifier', example='1316458xxxxx41068', position='Body'),
  type: string(name='type', example='deafe5f33xxxxx6a259d8dafd', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', example='9144ef6b72d8exxxxx9e61a4d0', position='Body'),
}

model CreateWorkitemRecordResponseBody = {
  workitemTime?: {
    actualTime?: long(name='actualTime', example='12'),
    description?: string(name='description'),
    gmtEnd?: long(name='gmtEnd', example='1667205617089'),
    gmtStart?: long(name='gmtStart', example='1667205617061'),
    identifier?: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd'),
    recordUser?: {
      account?: string(name='account', example='1316458xxxxx41068'),
      avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200'),
      dingTalkId?: string(name='dingTalkId', example='xx12322'),
      displayName?: string(name='displayName'),
      displayNickName?: string(name='displayNickName'),
      displayRealName?: string(name='displayRealName'),
      email?: string(name='email', example='xxx@xxx.com'),
      gender?: string(name='gender'),
      identifier?: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd'),
      isDisabled?: boolean(name='isDisabled', example='true/false'),
      mobile?: string(name='mobile'),
      nameEn?: string(name='nameEn', example='wangwu'),
      nickName?: string(name='nickName'),
      nickNamePinyin?: string(name='nickNamePinyin', example='wangwu'),
      realName?: string(name='realName'),
      realNamePinyin?: string(name='realNamePinyin', example='wangwu'),
      stamp?: string(name='stamp'),
      tbRoleId?: string(name='tbRoleId', example='1e9903d8b3f1xxxxxf9286ef5'),
    }(name='recordUser'),
    type?: string(name='type', example='deafe5f33xxxxx6a259d8dafd'),
    workitemIdentifier?: string(name='workitemIdentifier', example='9144ef6b72d8exxxxx9e61a4d0'),
  }(name='WorkitemTime'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model CreateWorkitemRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemRecordResponseBody(name='body'),
}

async function createWorkitemRecord(request: CreateWorkitemRecordRequest): CreateWorkitemRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemRecord', 'POST', '/organization/{organizationId}/workitems/record', 'json', false, 'json', request);
}

model CreateWorkitemV2Request {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  assignedTo: string(name='assignedTo', example='19xxxx31947xxxx', position='Body'),
  category: string(name='category', example='Req', position='Body'),
  description?: string(name='description', position='Body'),
  fieldValueList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', example='6aexxxxxa1d98c09c60xxxx16'),
      value?: string(name='value', example='10'),
    }
  ](name='fieldValueList', position='Body'),
  parentIdentifier?: string(name='parentIdentifier', example='11223331122', position='Body'),
  participants?: [ string ](name='participants', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', example='asd345xxxxx9q9845xxxxx34', position='Body'),
  sprintIdentifier?: string(name='sprintIdentifier', example='455532323455', position='Body'),
  subject: string(name='subject', position='Body'),
  tags?: [ string ](name='tags', position='Body'),
  trackers?: [ string ](name='trackers', position='Body'),
  verifier?: string(name='verifier', example='1561159309......', position='Body'),
  versions?: [ string ](name='versions', position='Body'),
  workitemTypeIdentifier: string(name='workitemTypeIdentifier', example='9uy29901re573f561d69jn40', position='Body'),
}

model CreateWorkitemV2ResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidTagGroup.IdNotFound'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_UNKNOWN_ERROR'),
  requestId?: string(name='requestId', example='EAE03103-5497-58D1-9169-E524DDE8604C'),
  success?: string(name='success', example='true'),
  workitemIdentifier?: string(name='workitemIdentifier', example='11234455454355'),
}

model CreateWorkitemV2Response = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemV2ResponseBody(name='body'),
}

async function createWorkitemV2(request: CreateWorkitemV2Request): CreateWorkitemV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemV2', 'POST', '/organization/{organizationId}/workitem', 'json', false, 'json', request);
}

model CreateWorkspaceRequest {
  codeUrl: string(name='codeUrl', example='git@codeup.aliyun.com:demo/Codeup-Demo.git', position='Body'),
  codeVersion: string(name='codeVersion', example='master', position='Body'),
  filePath?: string(name='filePath', example='src/Test.java', position='Body'),
  name?: string(name='name', example='Demo', position='Body'),
  requestFrom?: string(name='requestFrom', example='fc', position='Body'),
  resourceIdentifier?: string(name='resourceIdentifier', example='acs:fc:cn-shenzhen:XXX:services/demo.LATEST/functions/demo', position='Body'),
  reuse?: boolean(name='reuse', example='false', position='Body'),
  workspaceTemplate: string(name='workspaceTemplate', example='all-in-one', position='Body'),
}

model CreateWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', example='WorkspaceQuotaExceeded'),
  errorMessage?: string(name='errorMessage', example='The maximum number of workspace per user is exceeded.'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: boolean(name='success', example='true'),
  workspace?: {
    createTime?: string(name='createTime', example='1628564442000'),
    creator?: string(name='creator', example='1470227819xxxxxx'),
    id?: string(name='id', example='6ed82817-ab75-4563-865d-81e60dxxxxxx'),
    name?: string(name='name', example='Demo'),
    status?: string(name='status', example='SUCCESS'),
    template?: string(name='template', example='all-in-one'),
  }(name='workspace'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspace', 'POST', '/api/workspaces', 'json', true, 'form', request);
}

model DeleteBranchRequest {
  repositoryId: long(name='repositoryId', example='2185366', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  branchName: string(name='branchName', example='deleteBranch', position='Query'),
  organizationId: string(name='organizationId', example='619b80042f595dbd1b9b0de2', position='Query'),
}

model DeleteBranchResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='6177543A-8D54-5736-A93B-E0195A1512CB'),
  result?: {
    branchName?: string(name='branchName', example='deleteBranch'),
  }(name='result'),
  success?: string(name='success', example='true'),
}

model DeleteBranchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBranchResponseBody(name='body'),
}

async function deleteBranch(request: DeleteBranchRequest): DeleteBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBranch', 'DELETE', '/repository/{repositoryId}/branches/delete', 'json', false, 'json', request);
}

model DeleteFileRequest {
  repositoryId: long(name='repositoryId', example='2709413', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  branchName: string(name='branchName', example='master', position='Query'),
  commitMessage: string(name='commitMessage', position='Query'),
  filePath: string(name='filePath', example='src/main/test.java', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model DeleteFileResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='7EFAD5FB-2296-5D52-BC60-FCC992A40767'),
  result?: {
    branchName?: string(name='branchName', example='master'),
    filePath?: string(name='filePath', example='src/main/delete.java'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFile', 'DELETE', '/repository/{repositoryId}/files/delete', 'json', false, 'json', request);
}

model DeleteFlowTagRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: string(name='id', example='1111', position='Path'),
}

model DeleteFlowTagResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowTagResponseBody(name='body'),
}

async function deleteFlowTag(request: DeleteFlowTagRequest): DeleteFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFlowTag', 'DELETE', '/organization/{organizationId}/flow/tags/{id}', 'json', false, 'json', request);
}

model DeleteFlowTagGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: string(name='id', example='111', position='Path'),
}

model DeleteFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowTagGroupResponseBody(name='body'),
}

async function deleteFlowTagGroup(request: DeleteFlowTagGroupRequest): DeleteFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFlowTagGroup', 'DELETE', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model DeleteGroupMemberRequest {
  groupId: long(name='groupId', example='34410', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  aliyunPk: string(name='aliyunPk', example='1789095186553536', position='Query'),
  memberType: string(name='memberType', example='USERS', position='Body'),
  organizationId: string(name='organizationId', example='6082a9b0c7972588ac363793', position='Query'),
}

model DeleteGroupMemberResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_UNKNOWN_ERROR'),
  requestId?: string(name='requestId', example='4D6AF7CC-B43B-5454-86AB-023D25E44868'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='40'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    id?: long(name='id', example='524836'),
    memberType?: string(name='memberType', example='USERS'),
    name?: string(name='name', example='codeup'),
    sourceId?: long(name='sourceId', example='2080398'),
    state?: string(name='state', example='active'),
    username?: string(name='username', example='test-codeup'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupMemberResponseBody(name='body'),
}

async function deleteGroupMember(request: DeleteGroupMemberRequest): DeleteGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroupMember', 'DELETE', '/repository/groups/{groupId}/members/remove/aliyun_pk', 'json', false, 'json', request);
}

model DeleteHostGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='11222', position='Path'),
}

model DeleteHostGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroup(request: DeleteHostGroupRequest): DeleteHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHostGroup', 'DELETE', '/organization/{organizationId}/hostGroups/{id}', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='123', minimum=1, maximum=999999999999999, position='Path'),
}

model DeletePipelineResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipeline', 'DELETE', '/organization/{organizationId}/pipelines/{pipelineId}', 'json', false, 'json', request);
}

model DeletePipelineGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  groupId: long(name='groupId', example='111', position='Path'),
}

model DeletePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeletePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineGroupResponseBody(name='body'),
}

async function deletePipelineGroup(request: DeletePipelineGroupRequest): DeletePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineGroup', 'DELETE', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model DeletePipelineRelationsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='11', position='Path'),
  relObjectId: string(name='relObjectId', example='11', position='Query'),
  relObjectType: string(name='relObjectType', example='VARIABLE_GROUP', position='Query'),
}

model DeletePipelineRelationsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeletePipelineRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineRelationsResponseBody(name='body'),
}

async function deletePipelineRelations(request: DeletePipelineRelationsRequest): DeletePipelineRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineRelations', 'DELETE', '/organization/{organizationId}/{pipelineId}/pipelineRelations', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  identifier: string(name='identifier', example='7fb72727f32143574f7a...', position='Query'),
}

model DeleteProjectResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: boolean(name='result', example='true'),
  success?: boolean(name='success', example='true'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/organization/{organizationId}/projects/delete', 'json', false, 'json', request);
}

model DeleteProtectedBranchRequest {
  repositoryId: long(name='repositoryId', example='2813489', position='Path'),
  protectedBranchId: long(name='protectedBranchId', example='5326', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='611b75680fc7bf0dbe1dce55', position='Query'),
}

model DeleteProtectedBranchResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='1F4F342D-493A-5B2C-B133-BA78B30FF834'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteProtectedBranchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProtectedBranchResponseBody(name='body'),
}

async function deleteProtectedBranch(request: DeleteProtectedBranchRequest): DeleteProtectedBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProtectedBranch', 'DELETE', '/repository/{repositoryId}/protect_branches/{protectedBranchId}', 'json', false, 'json', request);
}

model DeleteRepositoryRequest {
  repositoryId: long(name='repositoryId', example='2464454', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  reason: string(name='reason', position='Body'),
  organizationId: string(name='organizationId', example='6082a9b0c7972588ac363793', position='Query'),
}

model DeleteRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='A7586FEB-E48D-5579-983F-74981FBFF627'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryResponseBody(name='body'),
}

async function deleteRepository(request: DeleteRepositoryRequest): DeleteRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepository', 'POST', '/repository/{repositoryId}/remove', 'json', false, 'json', request);
}

model DeleteRepositoryGroupRequest {
  groupId: long(name='groupId', example='22901', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  reason: string(name='reason', position='Body'),
  organizationId: string(name='organizationId', example='624666bd54d036291ae13a36', position='Query'),
}

model DeleteRepositoryGroupResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='30F2DA15-2877-5FC9-BC71-F7F394717907'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteRepositoryGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryGroupResponseBody(name='body'),
}

async function deleteRepositoryGroup(request: DeleteRepositoryGroupRequest): DeleteRepositoryGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepositoryGroup', 'POST', '/repository/groups/{groupId}/remove', 'json', false, 'json', request);
}

model DeleteRepositoryMemberRequest {
  repositoryId: long(name='repositoryId', example='2080398', position='Path'),
  aliyunPk: string(name='aliyunPk', example='1789095186553536', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  memberType?: string(name='memberType', example='USERS', position='Body'),
  organizationId: string(name='organizationId', example='632bbfdf419338aaa2b1360a', position='Query'),
}

model DeleteRepositoryMemberResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='0E1BCF81-51E6-59D4-8D55-FF945111127A'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='30'),
    createAt?: string(name='createAt', example='2022-03-12 12:00:00'),
    id?: long(name='id', example='30815'),
    sourceId?: long(name='sourceId', example='2080398'),
    sourceType?: string(name='sourceType', example='Project'),
    updateAt?: string(name='updateAt', example='2022-03-12 12:00:00'),
    userId?: long(name='userId', example='19280'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryMemberResponseBody(name='body'),
}

async function deleteRepositoryMember(request: DeleteRepositoryMemberRequest): DeleteRepositoryMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepositoryMember', 'POST', '/repository/{repositoryId}/members/delete/{aliyunPk}', 'json', false, 'json', request);
}

model DeleteRepositoryWebhookRequest {
  repositoryId: long(name='repositoryId', example='2369234', position='Path'),
  hookId: long(name='hookId', example='524836', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model DeleteRepositoryWebhookResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    buildEvents?: boolean(name='buildEvents', example='false'),
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    description?: string(name='description'),
    enableSslVerification?: boolean(name='enableSslVerification', example='false'),
    id?: long(name='id', example='524836'),
    issuesEvents?: boolean(name='issuesEvents', example='false'),
    lastTestResult?: string(name='lastTestResult', example='""'),
    mergeRequestsEvents?: boolean(name='mergeRequestsEvents', example='true'),
    noteEvents?: boolean(name='noteEvents', example='true'),
    projectId?: long(name='projectId', example='2369234'),
    pushEvents?: boolean(name='pushEvents', example='true'),
    secretToken?: string(name='secretToken', example='xxxx'),
    tagPushEvents?: boolean(name='tagPushEvents', example='true'),
    type?: string(name='type', example='ProjectHook'),
    url?: string(name='url', example='https://xxxxx'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteRepositoryWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryWebhookResponseBody(name='body'),
}

async function deleteRepositoryWebhook(request: DeleteRepositoryWebhookRequest): DeleteRepositoryWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepositoryWebhook', 'DELETE', '/repository/{repositoryId}/hooks/{hookId}', 'json', false, 'json', request);
}

model DeleteResourceMemberRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  resourceType: string(name='resourceType', example='pipeline', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', example='123', position='Path'),
  accountId: string(name='accountId', example='2211221', position='Path'),
}

model DeleteResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeleteResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceMemberResponseBody(name='body'),
}

async function deleteResourceMember(request: DeleteResourceMemberRequest): DeleteResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceMember', 'DELETE', '/organization/{organizationId}/{resourceType}/{resourceId}/members/{accountId}', 'json', false, 'json', request);
}

model DeleteTagRequest {
  repositoryId: long(name='repositoryId', example='2289464', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='609633ffd40eb063bac8165a', position='Query'),
  tagName: string(name='tagName', example='v1.0', position='Query'),
}

model DeleteTagResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='60945D4F-CF6D-5CFF-89ED-1D1F6657032C'),
  result?: {
    tagName?: string(name='tagName', example='v1.0'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResponseBody(name='body'),
}

async function deleteTag(request: DeleteTagRequest): DeleteTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTag', 'DELETE', '/repository/{repositoryId}/tags/delete', 'json', false, 'json', request);
}

model DeleteUserKeyRequest {
  keyId: long(name='keyId', example='50998', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
}

model DeleteUserKeyResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='SYSTEM_UNKNOWN_ERROR'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    context?: string(name='context', example='xxx'),
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    expireTime?: string(name='expireTime', example='2022-03-18 14:24:54'),
    fingerPrint?: string(name='fingerPrint', example='xxx'),
    id?: long(name='id', example='50998'),
    keyScope?: string(name='keyScope', example='ALL'),
    lastUsedTime?: string(name='lastUsedTime', example='2022-03-18 14:24:54'),
    publicKey?: string(name='publicKey', example='xxx'),
    shaContext?: string(name='shaContext', example='xxx'),
    title?: string(name='title'),
    updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model DeleteUserKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserKeyResponseBody(name='body'),
}

async function deleteUserKey(request: DeleteUserKeyRequest): DeleteUserKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUserKey', 'DELETE', '/api/v3/user/keys/{keyId}', 'json', false, 'json', request);
}

model DeleteVariableGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='123', position='Path'),
}

model DeleteVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model DeleteVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVariableGroupResponseBody(name='body'),
}

async function deleteVariableGroup(request: DeleteVariableGroupRequest): DeleteVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVariableGroup', 'DELETE', '/organization/{organizationId}/variableGroups/{id}', 'json', false, 'json', request);
}

model DeleteWorkitemRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  identifier: string(name='identifier', example='3ef2ef6018d254d660e65f87a6', position='Query'),
}

model DeleteWorkitemResponseBody = {
  deleteFlag?: boolean(name='deleteFlag', example='true/false'),
  errorCode?: string(name='errorCode', example='InvalidTagGroup.IdNotFound'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', description='true/false', example='true'),
}

model DeleteWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkitemResponseBody(name='body'),
}

async function deleteWorkitem(request: DeleteWorkitemRequest): DeleteWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkitem', 'DELETE', '/organization/{organizationId}/workitem/delete', 'json', false, 'json', request);
}

model DeleteWorkitemAllCommentRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  identifier: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd', position='Query'),
}

model DeleteWorkitemAllCommentResponseBody = {
  deleteFlag?: boolean(name='deleteFlag', example='true/false'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='A7586FEB-E48D-5579-983F-74981FBFF627'),
  success?: string(name='success', example='true'),
}

model DeleteWorkitemAllCommentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkitemAllCommentResponseBody(name='body'),
}

async function deleteWorkitemAllComment(request: DeleteWorkitemAllCommentRequest): DeleteWorkitemAllCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkitemAllComment', 'DELETE', '/organization/{organizationId}/workitems/deleteAllComment', 'json', false, 'json', request);
}

model DeleteWorkitemCommentRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  commentId: long(name='commentId', example='12xx34', position='Body'),
  identifier: string(name='identifier', example='e8b2xxxxxx2abdxxxxxxxx23', position='Body'),
}

model DeleteWorkitemCommentResponseBody = {
  deleteFlag?: boolean(name='deleteFlag', example='true/false'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: string(name='success', example='true'),
}

model DeleteWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkitemCommentResponseBody(name='body'),
}

async function deleteWorkitemComment(request: DeleteWorkitemCommentRequest): DeleteWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkitemComment', 'POST', '/organization/{organizationId}/workitems/deleteComent', 'json', false, 'json', request);
}

model EnableDeployKeyRequest {
  repositoryId: long(name='repositoryId', example='2709413', position='Path'),
  keyId: long(name='keyId', example='50998', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model EnableDeployKeyResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model EnableDeployKeyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeployKeyResponseBody(name='body'),
}

async function enableDeployKey(request: EnableDeployKeyRequest): EnableDeployKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableDeployKey', 'POST', '/repository/{repositoryId}/keys/{keyId}/enable', 'json', false, 'json', request);
}

model FrozenWorkspaceRequest {
  workspaceId: string(name='workspaceId', example='6ed82817-ab75-4563-865d-81e60dxxxxxx', position='Path'),
}

model FrozenWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidWorkspace.NotFound'),
  errorMessage?: string(name='errorMessage', example='The workspace is not found.'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: boolean(name='success', example='true'),
}

model FrozenWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: FrozenWorkspaceResponseBody(name='body'),
}

async function frozenWorkspace(request: FrozenWorkspaceRequest): FrozenWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FrozenWorkspace', 'PUT', '/api/workspaces/{workspaceId}/frozen', 'json', false, 'json', request);
}

model GetBranchInfoRequest {
  repositoryId: long(name='repositoryId', example='2334743', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  branchName: string(name='branchName', example='master', position='Query'),
  organizationId: string(name='organizationId', example='5fbe3118672533690be72b12', position='Query'),
}

model GetBranchInfoResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='6177543A-8D54-5736-A93B-E0195A1512CB'),
  result?: {
    commit?: {
      author?: {
        avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
        email?: string(name='email', example='username@example.com'),
        id?: long(name='id', example='28056'),
        name?: string(name='name', example='codeup-test'),
        state?: string(name='state', example='active'),
        username?: string(name='username', example='testtest'),
      }(name='author'),
      authorEmail?: string(name='authorEmail', example='username@example.com'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate', example='2022-03-18 08:00:00'),
      commentsCount?: long(name='commentsCount', example='0'),
      committedDate?: string(name='committedDate', example='2022-03-18 09:00:00'),
      committer?: {
        avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
        email?: string(name='email', example='username@example.com'),
        id?: long(name='id', example='5035'),
        name?: string(name='name', example='codeup-commit'),
        state?: string(name='state', example='active'),
        username?: string(name='username', example='commitcommit'),
      }(name='committer'),
      committerEmail?: string(name='committerEmail', example='username@example.com'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
      id?: string(name='id', example='e0297d8fb0393c833a8531e7cc8832739e3cba6d'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId', example='e0297d8f'),
      signature?: {
        gpgKeyId?: string(name='gpgKeyId', example='""'),
        verificationStatus?: string(name='verificationStatus', example='verified'),
      }(name='signature'),
      title?: string(name='title'),
    }(name='commit'),
    name?: string(name='name', example='master'),
    protected?: string(name='protected', example='false'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetBranchInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBranchInfoResponseBody(name='body'),
}

async function getBranchInfo(request: GetBranchInfoRequest): GetBranchInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBranchInfo', 'GET', '/repository/{repositoryId}/branches/detail', 'json', false, 'json', request);
}

model GetCodeupOrganizationRequest {
  identity: string(name='identity', example='60de7a6852743a5162b5f957', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
}

model GetCodeupOrganizationResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidTagGroup.IdNotFound'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    createdAt?: string(name='createdAt', example='2022-03-12 12:00:00'),
    id?: long(name='id', example='3624'),
    namespaceId?: long(name='namespaceId', example='100003'),
    organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
    path?: string(name='path', example='test-codeup'),
    updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
    userRole?: string(name='userRole', example='ORG_MEMBER'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetCodeupOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: GetCodeupOrganizationResponseBody(name='body'),
}

async function getCodeupOrganization(request: GetCodeupOrganizationRequest): GetCodeupOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeupOrganization', 'GET', '/api/organization/{identity}', 'json', false, 'json', request);
}

model GetCompareDetailRequest {
  repositoryId: long(name='repositoryId', example='2369234', position='Path'),
  from: string(name='from', example='c9fb781f3d66ef6ee60bdd5c414f5106454b1426', position='Query'),
  maxDiffByte?: int32(name='maxDiffByte', example='24 * 1024 * 1024', position='Query'),
  maxDiffFile?: int32(name='maxDiffFile', example='5000', position='Query'),
  mergeBase?: boolean(name='mergeBase', example='false', position='Query'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
  to: string(name='to', example='b8f6f28520b1936aafe2e638373e19ccafa42b02', position='Query'),
}

model GetCompareDetailResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    commits?: [ 
      {
        author?: {
          avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
          email?: string(name='email', example='username@example.com'),
          id?: long(name='id', example='21396'),
          name?: string(name='name'),
          state?: string(name='state', example='active'),
          username?: string(name='username', example='Codeup'),
        }(name='author'),
        authorEmail?: string(name='authorEmail', example='username@example.com'),
        authorName?: string(name='authorName'),
        authoredDate?: string(name='authoredDate', example='2023-01-03T15:41:26+08:00'),
        commentsCount?: long(name='commentsCount', example='1'),
        committedDate?: string(name='committedDate', example='2023-01-03T15:41:26+08:00'),
        committer?: {
          avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
          email?: string(name='email', example='username@example.com'),
          id?: long(name='id', example='43910'),
          name?: string(name='name'),
          state?: string(name='state', example='active'),
          username?: string(name='username', example='Codeup-commiter'),
        }(name='committer'),
        committerEmail?: string(name='committerEmail', example='username@example.com'),
        committerName?: string(name='committerName'),
        createdAt?: string(name='createdAt', example='2023-01-03T15:41:26+08:00'),
        id?: string(name='id', example='b8f6f28520b1936aafe2e638373e19ccafa42b02'),
        message?: string(name='message', example='""'),
        parentIds?: [ string ](name='parentIds'),
        shortId?: string(name='shortId', example='b8f6f285'),
        title?: string(name='title'),
      }
    ](name='commits'),
    diffs?: [ 
      {
        aMode?: string(name='aMode', example='100644'),
        bMode?: string(name='bMode', example='100644'),
        deletedFile?: boolean(name='deletedFile', example='false'),
        diff?: string(name='diff'),
        isBinary?: boolean(name='isBinary', example='false'),
        isNewLfs?: boolean(name='isNewLfs', example='false'),
        isOldLfs?: boolean(name='isOldLfs', example='false'),
        newFile?: boolean(name='newFile', example='false'),
        newId?: string(name='newId', example='cb75846da2df3d3d7f290c3569236fcf3dd17224'),
        newPath?: string(name='newPath', example='new_test.txt'),
        oldId?: string(name='oldId', example='6c268061a546378276559c713d0ad377d4dsjfh'),
        oldPath?: string(name='oldPath', example='test.txt'),
        renamedFile?: boolean(name='renamedFile', example='false'),
      }
    ](name='diffs'),
    messages?: [ string ](name='messages'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetCompareDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetCompareDetailResponseBody(name='body'),
}

async function getCompareDetail(request: GetCompareDetailRequest): GetCompareDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCompareDetail', 'GET', '/repository/{repositoryId}/commits/compare/detail', 'json', false, 'json', request);
}

model GetCustomFieldOptionRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  fieldId: string(name='fieldId', example='1019xxxxx5f5c33xxxxx9920d44', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', example='e8bxxxxxxxxxxxxxxxx23', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
  workitemTypeIdentifier: string(name='workitemTypeIdentifier', example='9uyxxxx1re573f561dxxxxx', position='Query'),
}

model GetCustomFieldOptionResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  fileds?: [ 
    {
      displayValue?: string(name='displayValue', example='223'),
      fieldIdentifier?: string(name='fieldIdentifier', example='e8bxxxxxxxxxxxxxxxx23'),
      identifier?: string(name='identifier', example='3345'),
      level?: long(name='level', example='1'),
      position?: long(name='position', example='1'),
      value?: string(name='value', example='223'),
      valueEn?: string(name='valueEn', example='223'),
    }
  ](name='fileds'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetCustomFieldOptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomFieldOptionResponseBody(name='body'),
}

async function getCustomFieldOption(request: GetCustomFieldOptionRequest): GetCustomFieldOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCustomFieldOption', 'GET', '/organization/{organizationId}/fields/{fieldId}/getCustomOption', 'json', false, 'json', request);
}

model GetFileBlobsRequest {
  repositoryId: long(name='repositoryId', example='2744800', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  filePath: string(name='filePath', example='src/Test.java', position='Query'),
  from?: long(name='from', example='10', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  ref: string(name='ref', example='master  / tag1.0 /  ecykhdd', position='Query'),
  to?: long(name='to', example='10', position='Query'),
}

model GetFileBlobsResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='F590C9D8-E908-5B6C-95AC-56B7E8011FFA'),
  result?: {
    content?: string(name='content', example='xxxx'),
    totalLines?: int32(name='totalLines', example='65535'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetFileBlobsResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileBlobsResponseBody(name='body'),
}

async function getFileBlobs(request: GetFileBlobsRequest): GetFileBlobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileBlobs', 'GET', '/repository/{repositoryId}/files/blobs', 'json', false, 'json', request);
}

model GetFileLastCommitRequest {
  repositoryId: long(name='repositoryId', example='2825387', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  filePath: string(name='filePath', example='src/main/test.java', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  sha: string(name='sha', example='master', position='Query'),
  showSignature?: boolean(name='showSignature', example='false', position='Query'),
}

model GetFileLastCommitResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    authorDate?: string(name='authorDate', example='2022-08-08 18:09:09'),
    authorEmail?: string(name='authorEmail', example='username@example.com'),
    authorName?: string(name='authorName', example='test-codeup'),
    committedDate?: string(name='committedDate', example='2022-03-18 15:00:02'),
    committerEmail?: string(name='committerEmail', example='username@example.com'),
    committerName?: string(name='committerName', example='committer-codeup'),
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    id?: string(name='id', example='ff4fb5ac6d1f44f452654336d2dba468ae6c8d04'),
    message?: string(name='message'),
    parentIds?: [ string ](name='parentIds'),
    shortId?: string(name='shortId', example='ff4fb5ac'),
    signature?: {
      gpgKeyId?: string(name='gpgKeyId', description='GPG密钥ID', example='34d2c47c7ce46a5c4639c5ffe208'),
      verificationStatus?: string(name='verificationStatus', example='verified'),
    }(name='signature'),
    title?: string(name='title'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetFileLastCommitResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileLastCommitResponseBody(name='body'),
}

async function getFileLastCommit(request: GetFileLastCommitRequest): GetFileLastCommitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileLastCommit', 'GET', '/repository/{repositoryId}/files/lastCommit', 'json', false, 'json', request);
}

model GetFlowTagGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: string(name='id', example='11', position='Path'),
}

model GetFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  flowTagGroup?: {
    creatorAccountId?: string(name='creatorAccountId', example='1111111111111'),
    flowTagList?: [ 
      {
        color?: string(name='color', example='#1F9AEF'),
        creatorAccountId?: string(name='creatorAccountId', example='1111111111111'),
        id?: long(name='id', example='111'),
        modiferAccountId?: string(name='modiferAccountId', example='1111111111111'),
        name?: string(name='name'),
      }
    ](name='flowTagList'),
    id?: long(name='id', example='1111'),
    modiferAccountId?: string(name='modiferAccountId', example='1111111111111'),
    name?: string(name='name'),
  }(name='flowTagGroup'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model GetFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetFlowTagGroupResponseBody(name='body'),
}

async function getFlowTagGroup(request: GetFlowTagGroupRequest): GetFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFlowTagGroup', 'GET', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model GetGroupDetailRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  groupId: long(name='groupId', example='36612', position='Query'),
  organizationId: string(name='organizationId', example='6218766746d4d2ca636d0497', position='Query'),
}

model GetGroupDetailResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='4CA06B0B-5867-5DE6-A0FA-9F39C97B524C'),
  result?: {
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    description?: string(name='description'),
    id?: long(name='id', example='36612'),
    name?: string(name='name', example='test-group-detail'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    ownerId?: long(name='ownerId', example='19230'),
    parentId?: long(name='parentId', example='26842'),
    path?: string(name='path', example='test-group-detail'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-group-detail'),
    type?: string(name='type', example='Group'),
    visibilityLevel?: int32(name='visibilityLevel', example='10'),
    webUrl?: string(name='webUrl', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupDetailResponseBody(name='body'),
}

async function getGroupDetail(request: GetGroupDetailRequest): GetGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroupDetail', 'GET', '/repository/groups/get_detail', 'json', false, 'json', request);
}

model GetHostGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='21221', position='Path'),
}

model GetHostGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  hostGroup?: {
    aliyunRegion?: string(name='aliyunRegion', example='cn-bejing'),
    createTime?: long(name='createTime', example='1586863220000'),
    creatorAccountId?: string(name='creatorAccountId', example='111111'),
    description?: string(name='description'),
    ecsLabelKey?: string(name='ecsLabelKey', example='ecs'),
    ecsLabelValue?: string(name='ecsLabelValue', example='ecs'),
    ecsType?: string(name='ecsType', example='ECS_ALIYUN'),
    hostInfos?: [ 
      {
        aliyunRegionId?: string(name='aliyunRegionId', example='cn-hangzhou'),
        createTime?: long(name='createTime', example='1586863220000'),
        creatorAccountId?: string(name='creatorAccountId', example='11111'),
        instanceName?: string(name='instanceName', example='ceshi'),
        ip?: string(name='ip', example='127.0.0.1'),
        machineSn?: string(name='machineSn', example='1ssasa'),
        modifierAccountId?: string(name='modifierAccountId', example='11111111111'),
        objectType?: string(name='objectType', example='MachineInfo'),
        updateTime?: long(name='updateTime', example='1586863220000'),
      }
    ](name='hostInfos'),
    hostNum?: long(name='hostNum', example='1'),
    id?: long(name='id', example='1234'),
    modifierAccountId?: string(name='modifierAccountId', example='11111'),
    name?: string(name='name'),
    serviceConnectionId?: long(name='serviceConnectionId', example='1234'),
    type?: string(name='type', example='ECS'),
    upateTIme?: long(name='upateTIme', example='1586863220000'),
  }(name='hostGroup'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroup(request: GetHostGroupRequest): GetHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHostGroup', 'GET', '/organization/{organizationId}/hostGroups/{id}', 'json', false, 'json', request);
}

model GetOrganizationMemberRequest {
  organizationId: string(name='organizationId', example='66c0c9fffeb86b450c199fcd', position='Path'),
  accountId: string(name='accountId', example='123456677888', position='Path'),
}

model GetOrganizationMemberResponseBody = {
  errorCode?: string(name='errorCode', example='null'),
  errorMessage?: string(name='errorMessage', example='error info'),
  member?: {
    accountId?: string(name='accountId', example='123456677888'),
    birthday?: long(name='birthday', example='1631845101798'),
    deptLists?: [ string ](name='deptLists'),
    email?: string(name='email', example='123@mail.com'),
    hiredDate?: long(name='hiredDate', example='1631845101798'),
    identities?: {
      externUid?: string(name='externUid', example='1236666'),
      provider?: string(name='provider', example='Dingtalk'),
    }(name='identities'),
    joinTime?: long(name='joinTime', example='1631845101798'),
    lastVisitTime?: long(name='lastVisitTime', example='1631845101798'),
    mobile?: string(name='mobile', example='1390000****'),
    organizationMemberName?: string(name='organizationMemberName'),
    organizationRoleId?: string(name='organizationRoleId', example='8fc0c9ff039711dd64acd000'),
    organizationRoleName?: string(name='organizationRoleName'),
    state?: string(name='state', example='normal'),
  }(name='member'),
  requestId?: string(name='requestId', example='HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F'),
  success?: boolean(name='success', example='true'),
}

model GetOrganizationMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrganizationMemberResponseBody(name='body'),
}

async function getOrganizationMember(request: GetOrganizationMemberRequest): GetOrganizationMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrganizationMember', 'GET', '/organization/{organizationId}/members/{accountId}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='234', position='Path'),
}

model GetPipelineResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipeline?: {
    createTime?: long(name='createTime', example='1586863220000'),
    creatorAccountId?: string(name='creatorAccountId', example='112222122'),
    envId?: int32(name='envId', example='0'),
    envName?: string(name='envName', example='日常环境'),
    groupId?: long(name='groupId', example='1111'),
    modifierAccountId?: string(name='modifierAccountId', example='112222122'),
    name?: string(name='name', example='流水线'),
    pipelineConfig?: {
      flow?: string(name='flow', example='schema: tb pipeline:   - name: 执行命令     stages:       - driven: AUTO         jobs:           - displayName: 执行命令             task: execution-component-production@10             identifier: \\"10_1626147407245\\"             templateType: task             templateSign: \\"\\"             templateBatchUpdate: \\"N\\"             extraInfo: \\"\\"             params:               version1: pre-jdk1.62               steps:                 - name: 执行命令                   stepType: exec-shell                   stepIdentifier: \\"10_1626147407245__11_1626147407249\\"                   command: |                     # input your command here                     echo hello,world!                   ARTIFACTS: \\"\\"                   JSONEncoding: true                   freeInTaskGroupModeFields:                     - ARTIFACTS                   source: 132504-sss_ddd_3mvJ               ENGINE_PIPELINE_NAME: \\"${INPUTS.ENGINE_PIPELINE_NAME}\\"               ENGINE_PIPELINE_ID: \\"${INPUTS.ENGINE_PIPELINE_ID}\\"               ENGINE_PIPELINE_INST_ID: \\"${INPUTS.ENGINE_PIPELINE_INST_ID}\\"               ENGINE_PIPELINE_INST_NUMBER: \\"${INPUTS.ENGINE_PIPELINE_INST_NUMBER}\\"               buildNodeGroup: K8S-4             plugins: []             output: []             freeInTaskGroupModeFields: []'),
      settings?: string(name='settings', example='{}'),
      sources?: [ 
        {
          data?: {
            branch?: string(name='branch', example='master'),
            cloneDepth?: long(name='cloneDepth', example='1'),
            credentialId?: long(name='credentialId', description='Credential Id', example='222'),
            credentialLabel?: string(name='credentialLabel', description='Credential Label', example='企业公钥'),
            credentialType?: string(name='credentialType', description='Credential Type', example='region-ssh'),
            events?: [ string ](name='events'),
            isBranchMode?: boolean(name='isBranchMode', example='false'),
            isCloneDepth?: boolean(name='isCloneDepth', example='true'),
            isSubmodule?: boolean(name='isSubmodule', example='false'),
            isTrigger?: boolean(name='isTrigger', example='true'),
            label?: string(name='label', example='cdup/ss'),
            namespace?: string(name='namespace', example='asasasas'),
            repo?: string(name='repo', example='https://codeup.aliyun.com/test.git'),
            serviceConnectionId?: long(name='serviceConnectionId', example='12'),
            triggerFilter?: string(name='triggerFilter', example='.*'),
            webhook?: string(name='webhook', example='https://flow.aliyun/webhook/asassasa'),
          }(name='data'),
          sign?: string(name='sign', example='xxsxsxs'),
          type?: string(name='type', example='Codeup'),
        }
      ](name='sources'),
    }(name='pipelineConfig'),
    tagList?: [ 
      {
        id?: long(name='id', example='22'),
        name?: string(name='name', example='标签1'),
      }
    ](name='tagList'),
    updateTime?: long(name='updateTime', example='1586863220000'),
  }(name='pipeline'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}', 'json', false, 'json', request);
}

model GetPipelineArtifactUrlRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  fileName: string(name='fileName', example='test.tgz', position='Query'),
  filePath: string(name='filePath', example='/test/test/test.tgz', maxLength=1000, position='Query'),
}

model GetPipelineArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  fileUrl?: string(name='fileUrl', example='http://aliyun.com/'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineArtifactUrlResponseBody(name='body'),
}

async function getPipelineArtifactUrl(request: GetPipelineArtifactUrlRequest): GetPipelineArtifactUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineArtifactUrl', 'POST', '/organization/{organizationId}/pipeline/getArtifactDownloadUrl', 'json', false, 'json', request);
}

model GetPipelineEmasArtifactUrlRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  emasJobInstanceId: string(name='emasJobInstanceId', example='Psaxsa', position='Path'),
  md5: string(name='md5', example='assasas', position='Path'),
  pipelineId: long(name='pipelineId', example='1111', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='1', position='Path'),
  serviceConnectionId: long(name='serviceConnectionId', example='122', position='Query'),
}

model GetPipelineEmasArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  fileUrl?: string(name='fileUrl', example='http://aliyun.com'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineEmasArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineEmasArtifactUrlResponseBody(name='body'),
}

async function getPipelineEmasArtifactUrl(request: GetPipelineEmasArtifactUrlRequest): GetPipelineEmasArtifactUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineEmasArtifactUrl', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/pipelineRun/{pipelineRunId}/emas/artifact/{emasJobInstanceId}/{md5}', 'json', false, 'json', request);
}

model GetPipelineGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  groupId: long(name='groupId', example='111', position='Path'),
}

model GetPipelineGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelineGroup?: {
    createTime?: long(name='createTime', example='1586863220000'),
    id?: long(name='id', example='111'),
    name?: string(name='name'),
  }(name='pipelineGroup'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetPipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineGroupResponseBody(name='body'),
}

async function getPipelineGroup(request: GetPipelineGroupRequest): GetPipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineGroup', 'GET', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model GetPipelineRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='12222', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='1', position='Path'),
}

model GetPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelineRun?: {
    createTime?: long(name='createTime', example='1586863220000'),
    creatorAccountId?: string(name='creatorAccountId', example='1111111111'),
    modifierAccountId?: string(name='modifierAccountId', example='11111111111'),
    pipelineId?: long(name='pipelineId', example='1234'),
    pipelineRunId?: long(name='pipelineRunId', example='1'),
    sources?: [ 
      {
        data?: {
          branch?: string(name='branch', example='master'),
          commint?: string(name='commint', example='{}'),
          repo?: string(name='repo', example='http://codeup.aliyun.com/a.git'),
        }(name='data'),
        sign?: string(name='sign', example='assaaaaaasasasa'),
        type?: string(name='type', example='Codeup'),
      }
    ](name='sources'),
    stageGroup?: [[ string ]    ](name='stageGroup'),
    stages?: [ 
      {
        name?: string(name='name', example='Java构建'),
        stageInfo?: {
          endTime?: long(name='endTime', example='1586863220000'),
          jobs?: [ 
            {
              actions?: [ 
                {
                  disable?: boolean(name='disable', example='true'),
                  params?: map[string]any(name='params', example='{}'),
                  type?: string(name='type', example='PassPipelineValidate'),
                }
              ](name='actions'),
              endTime?: long(name='endTime', example='1586863220000'),
              id?: long(name='id', example='21212'),
              name?: string(name='name', example='java构建'),
              params?: string(name='params', example='{}'),
              startTime?: long(name='startTime', example='1586863220000'),
              status?: string(name='status', example='RUNNING'),
            }
          ](name='jobs'),
          name?: string(name='name', example='Java构建'),
          startTime?: long(name='startTime', example='1586863220000'),
          status?: string(name='status', example='RUNNING'),
        }(name='stageInfo'),
      }
    ](name='stages'),
    status?: string(name='status', example='SUCCESS'),
    triggerMode?: int32(name='triggerMode', example='1'),
    updateTime?: long(name='updateTime', example='1586863220000'),
  }(name='pipelineRun'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(request: GetPipelineRunRequest): GetPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineRun', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}', 'json', false, 'json', request);
}

model GetPipelineScanReportUrlRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  reportPath: string(name='reportPath', example='/test/test/test.html', maxLength=1000, position='Body'),
}

model GetPipelineScanReportUrlResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  reportUrl?: string(name='reportUrl', example='http://aliyun.com'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineScanReportUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineScanReportUrlResponseBody(name='body'),
}

async function getPipelineScanReportUrl(request: GetPipelineScanReportUrlRequest): GetPipelineScanReportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineScanReportUrl', 'POST', '/organization/{organizationId}/pipeline/getPipelineScanReportUrl', 'json', true, 'form', request);
}

model GetProjectInfoRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  projectId: string(name='projectId', example='e8b2xxxxxxx09b07d23', position='Path'),
}

model GetProjectInfoResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='error'),
  project?: {
    category?: string(name='category', example='null'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Project'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    customCode?: string(name='customCode', example='OJAY'),
    description?: string(name='description', example='xxx'),
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1623916393000'),
    icon?: string(name='icon', example='https://xxxxxx.png'),
    iconBig?: string(name='iconBig', example='https://xxxxxx.png'),
    iconGroup?: string(name='iconGroup', example='{"small":"https://xxxxxx.png","big":"https://img.yyyyyy.png"}'),
    iconSmall?: string(name='iconSmall', example='https://img.yyyyyy.png'),
    id?: string(name='id', example='null'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    identifierPath?: string(name='identifierPath', example='e8b2xxxxxx2abdxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name'),
    organizationIdentifier?: string(name='organizationIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    parentIdentifier?: string(name='parentIdentifier', example='null'),
    scope?: string(name='scope', example='public'),
    statusIdentifier?: string(name='statusIdentifier', example='8a40xxxxxxxxxxxxx64'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='8a4058a71159b68254......'),
    subType?: string(name='subType', example='null'),
    typeIdentifier?: string(name='typeIdentifier', example='CustomProject'),
  }(name='project'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectInfoResponseBody(name='body'),
}

async function getProjectInfo(request: GetProjectInfoRequest): GetProjectInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectInfo', 'GET', '/organization/{organizationId}/project/{projectId}', 'json', false, 'json', request);
}

model GetProjectMemberRequest {
  repositoryId: long(name='repositoryId', example='1869702', position='Path'),
  aliyunPk: string(name='aliyunPk', example='1232456789123467', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='5eb53bb338076f00011bcfd5', position='Query'),
}

model GetProjectMemberResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='30C99C69-A340-5E2E-ACE4-8888FF50CF52'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='30'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100'),
    id?: long(name='id', example='2959'),
    name?: string(name='name', example='codeup'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectMemberResponseBody(name='body'),
}

async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectMember', 'GET', '/repository/{repositoryId}/members/get/{aliyunPk}', 'json', false, 'json', request);
}

model GetRepositoryRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  identity: string(name='identity', example='100', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model GetRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  repository?: {
    archive?: boolean(name='archive', example='false'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    createdAt?: string(name='createdAt', example='2020-06-19T04:02:00.744Z'),
    creatorId?: long(name='creatorId', example='19258'),
    defaultBranch?: string(name='defaultBranch', example='master'),
    demoProjectStatus?: boolean(name='demoProjectStatus', example='false'),
    description?: string(name='description', example='repo desc'),
    httpUrlToRepository?: string(name='httpUrlToRepository', example='https://codeup.aliyun.com/xxx/test/test.git'),
    id?: long(name='id', example='100'),
    lastActivityAt?: string(name='lastActivityAt', example='2020-06-19T04:02:00.744Z'),
    name?: string(name='name', example='test'),
    nameWithNamespace?: string(name='nameWithNamespace', example='test / test'),
    namespace?: {
      avatar?: string(name='avatar', example='https://xxx.jpg'),
      createdAt?: string(name='createdAt', example='2020-06-19T04:02:00.744Z'),
      description?: string(name='description', example='repo desc'),
      id?: long(name='id', description='id', example='100'),
      name?: string(name='name', example='xxx'),
      ownerId?: long(name='ownerId', example='100'),
      path?: string(name='path', example='test'),
      updatedAt?: string(name='updatedAt', example='2020-06-19T04:02:00.744Z'),
      visibilityLevel?: int32(name='visibilityLevel', example='0'),
    }(name='namespace'),
    path?: string(name='path', example='test'),
    pathWithNamespace?: string(name='pathWithNamespace', example='test/test'),
    sshUrlToRepository?: string(name='sshUrlToRepository', example='git@codeup.aliyun.com:xxx/test/test.git'),
    visibilityLevel?: int32(name='visibilityLevel', example='0'),
    webUrl?: string(name='webUrl', example='https://codeup.aliyun.com/xxx/test/test'),
  }(name='repository'),
  requestId?: string(name='requestId', example='37294673-00CA-5B8B-914F-A8B35511E90A'),
  success?: boolean(name='success', example='true'),
}

model GetRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryResponseBody(name='body'),
}

async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepository', 'GET', '/repository/get', 'json', false, 'json', request);
}

model GetRepositoryCommitRequest {
  repositoryId: long(name='repositoryId', example='2464454', position='Path'),
  sha: string(name='sha', example='master', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  showSignature?: boolean(name='showSignature', example='false', position='Query'),
}

model GetRepositoryCommitResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='A7586FEB-E48D-5579-983F-74981FBFF627'),
  result?: {
    author?: {
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100'),
      email?: string(name='email', example='username@example.com'),
      id?: long(name='id', example='19927'),
      name?: string(name='name', example='test-codeup'),
      state?: string(name='state', example='active'),
      username?: string(name='username', example='test-nickname'),
      websiteUrl?: string(name='websiteUrl', example='""'),
    }(name='author'),
    authorEmail?: string(name='authorEmail', example='username@example.com'),
    authorName?: string(name='authorName', example='test-codeup'),
    authoredDate?: string(name='authoredDate', example='2022-03-18 15:00:00'),
    commentsCount?: long(name='commentsCount', example='1'),
    committedDate?: string(name='committedDate', example='2022-03-18 15:00:02'),
    committer?: {
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100'),
      email?: string(name='email', example='username@example.com'),
      id?: long(name='id', example='24661'),
      name?: string(name='name', example='committer-codeup'),
      state?: string(name='state', example='active'),
      username?: string(name='username', example='nickname'),
      websiteUrl?: string(name='websiteUrl', example='""'),
    }(name='committer'),
    committerEmail?: string(name='committerEmail', example='username@example.com'),
    committerName?: string(name='committerName', example='committer-codeup'),
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    id?: string(name='id', example='ff4fb5ac6d1f44f452654336d2dba468ae6c8d04'),
    message?: string(name='message'),
    parentIds?: [ string ](name='parentIds'),
    shortId?: string(name='shortId', example='ff4fb5ac'),
    signature?: {
      gpgKeyId?: string(name='gpgKeyId', example='34d2c47c7ce46a5c4639c5ffe208'),
      verificationStatus?: string(name='verificationStatus', example='verified'),
    }(name='signature'),
    title?: string(name='title'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetRepositoryCommitResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryCommitResponseBody(name='body'),
}

async function getRepositoryCommit(request: GetRepositoryCommitRequest): GetRepositoryCommitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepositoryCommit', 'GET', '/repository/{repositoryId}/commits/{sha}', 'json', false, 'json', request);
}

model GetRepositoryTagRequest {
  repositoryId: long(name='repositoryId', example='2369234', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  tagName: string(name='tagName', example='tag v1.0', position='Query'),
}

model GetRepositoryTagResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='CE7353E3-F989-56A9-B97C-897ABBDB9A01'),
  result?: {
    commit?: {
      authorEmail?: string(name='authorEmail', example='username@example.com'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate', example='2022-03-18 08:00:00'),
      committedDate?: string(name='committedDate', example='2022-03-18 09:00:00'),
      committerEmail?: string(name='committerEmail', example='username@example.com'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
      id?: string(name='id', example='e0297d8fb0393c833a8531e7cc8832739e3cba6d'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId', example='e0297d8f'),
      signature?: {
        gpgKeyId?: string(name='gpgKeyId', example='""'),
        verificationStatus?: string(name='verificationStatus', example='verified'),
      }(name='signature'),
      title?: string(name='title'),
    }(name='commit'),
    id?: string(name='id', example='9a494e7b88ca35cde00579af2df4ab46136c022e'),
    message?: string(name='message'),
    name?: string(name='name', example='tag v1.0'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetRepositoryTagResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryTagResponseBody(name='body'),
}

async function getRepositoryTag(request: GetRepositoryTagRequest): GetRepositoryTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepositoryTag', 'GET', '/repository/{repositoryId}/tag/info', 'json', false, 'json', request);
}

model GetSearchCodePreviewRequest {
  docId: string(name='docId', example='60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb', position='Query'),
  isDsl?: boolean(name='isDsl', example='false', position='Query'),
  keyword: string(name='keyword', example='test', position='Query'),
  organizationId: string(name='organizationId', example='627475075b46541dd2ff01bc', position='Query'),
}

model GetSearchCodePreviewResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='A7586FEB-E48D-5579-983F-74981FBFF627'),
  result?: {
    docId?: string(name='docId', example='xxx'),
    highlightTextMap?: {
      clob?: string(name='clob', example='xxx'),
      fileName?: string(name='fileName', example='test.rb'),
      organizationId?: string(name='organizationId', example='5ffd468b1e45db3c1cc26ad6'),
    }(name='highlightTextMap'),
    source?: {
      branch?: string(name='branch', example='master'),
      checkinDate?: string(name='checkinDate', example='2022-12-12 12:12:12'),
      fileName?: string(name='fileName', example='test.rb'),
      filePath?: string(name='filePath', example='config/environments/test.rb'),
      language?: string(name='language', example='Ruby'),
      organizationId?: string(name='organizationId', example='5f9f9f6122a8c7ff3934f99a'),
      repoPath?: string(name='repoPath', example='codeup/test-repo'),
    }(name='source'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetSearchCodePreviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetSearchCodePreviewResponseBody(name='body'),
}

async function getSearchCodePreview(request: GetSearchCodePreviewRequest): GetSearchCodePreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSearchCodePreview', 'GET', '/search/code_preview', 'json', false, 'json', request);
}

model GetSprintInfoRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  sprintId: string(name='sprintId', example='d061ca90d47a0b7cd4d2...', position='Path'),
}

model GetSprintInfoResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  sprint?: {
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    description?: string(name='description', example='xxx'),
    endDate?: long(name='endDate', example='1623916393000'),
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1623916393000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name', example='demo示例项目'),
    owners?: [ string ](name='owners'),
    scope?: string(name='scope', example='public'),
    spaceIdentifier?: string(name='spaceIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    startDate?: long(name='startDate', example='1638403200000'),
    status?: string(name='status', example='Todo'),
  }(name='sprint'),
  success?: boolean(name='success', example='true'),
}

model GetSprintInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetSprintInfoResponseBody(name='body'),
}

async function getSprintInfo(request: GetSprintInfoRequest): GetSprintInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSprintInfo', 'GET', '/organization/{organizationId}/sprints/{sprintId}/getSprintinfo', 'json', false, 'json', request);
}

model GetTestResultListRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  testPlanIdentifier: string(name='testPlanIdentifier', position='Path'),
  conditions?: string(name='conditions', example='{\\"conditionGroups\\": [[{\\"fieldIdentifier\\": \\"gmtModified\\", \\"operator\\": \\"MORE_THAN_AND_EQUAL\\", \\"value\\": [\\"2023-04-20 18:03:12.442140\\"], \\"className\\": \\"dateTime\\", \\"format\\": \\"input\\"}]]}', position='Body'),
  directoryIdentifier: string(name='directoryIdentifier', example='e27b8eace6501ce51cf5d56784', position='Body'),
}

model GetTestResultListResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  testResult?: [ 
    {
      assignedTo?: {
        assignedToIdenttifier?: string(name='assignedToIdenttifier'),
        name?: string(name='name'),
      }(name='assignedTo'),
      bugCount?: long(name='bugCount', example='8'),
      categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
      customFields?: [ 
        {
          fieldClassName?: string(name='fieldClassName'),
          fieldFormat?: string(name='fieldFormat'),
          fieldIdentifier?: string(name='fieldIdentifier'),
          value?: string(name='value'),
        }
      ](name='customFields'),
      gmtCreate?: long(name='gmtCreate'),
      spaceIdentifier?: string(name='spaceIdentifier'),
      subject?: string(name='subject', example='测试工作项'),
      testResultExecutor?: {
        executorIdentifier?: string(name='executorIdentifier'),
        name?: string(name='name'),
      }(name='testResultExecutor'),
      testResultGmtCreate?: long(name='testResultGmtCreate'),
      testResultIdentifier?: string(name='testResultIdentifier', example='a8bxxxxxxxxxxxxxxxx54'),
      testResultStatus?: string(name='testResultStatus', example='TO DO'),
      testcaseIdentifier?: string(name='testcaseIdentifier'),
    }
  ](name='testResult'),
}

model GetTestResultListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTestResultListResponseBody(name='body'),
}

async function getTestResultList(request: GetTestResultListRequest): GetTestResultListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTestResultList', 'POST', '/organization/{organizationId}/testhub/testplan/{testPlanIdentifier}/testresults', 'json', false, 'json', request);
}

model GetTestcaseListRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  conditions?: string(name='conditions', example='{\\"conditionGroups\\":[[{\\"fieldIdentifier\\":\\"status\\",\\"operator\\":\\"CONTAINS\\",\\"value\\":[\\"cc961a18adf770c6e423ccc5\\"],\\"toValue\\":null,,\\"className\\":\\"status\\",\\"format\\":\\"list\\"}]]}', position='Body'),
  directoryIdentifier?: string(name='directoryIdentifier', example='e27b8eace6501ce51cf5d56784', position='Body'),
  maxResult?: string(name='maxResult', example='20', position='Body'),
  nextToken?: string(name='nextToken', example='2591861102250c4522380b33a6', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', example='6d5984c7d92b23fa53d4743c37', position='Body'),
}

model GetTestcaseListResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  testcase?: [ 
    {
      assignedTo?: {
        assignedToIdenttifier?: string(name='assignedToIdenttifier', example='12xxxxx456'),
        name?: string(name='name'),
      }(name='assignedTo'),
      categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
      customFields?: [ 
        {
          fieldClassName?: string(name='fieldClassName', example='User'),
          fieldFormat?: string(name='fieldFormat', example='Input'),
          fieldIdentifier?: string(name='fieldIdentifier', example='85702b33f14bfa82cb458173ba'),
          value?: string(name='value', example='d7f112f9d023e2108fa1b0d8'),
        }
      ](name='customFields'),
      gmtCreate?: long(name='gmtCreate', example='1621578648000'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      space?: {
        spaceIdentifier?: string(name='spaceIdentifier', example='22c32972b853cd703dbf0efe4c'),
        type?: string(name='type', example='TestRepo'),
      }(name='space'),
      subject?: string(name='subject', example='测试工作项'),
      tags?: [ 
        {
          name?: string(name='name'),
          tagIdentifier?: string(name='tagIdentifier', example='85702b33f14bxxxxxx58173ba'),
        }
      ](name='tags'),
    }
  ](name='testcase'),
  totalCount?: long(name='totalCount', example='10'),
}

model GetTestcaseListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTestcaseListResponseBody(name='body'),
}

async function getTestcaseList(request: GetTestcaseListRequest): GetTestcaseListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTestcaseList', 'POST', '/organization/{organizationId}/testhub/testcases', 'json', false, 'json', request);
}

model GetUserInfoRequest {
  organizationId?: string(name='organizationId', example='61e54b0e0bb300d827e1ae27', position='Query'),
}

model GetUserInfoResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: {
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    email?: string(name='email', example='username@example.com'),
    id?: long(name='id', example='4205'),
    name?: string(name='name'),
    username?: string(name='username'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model GetUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserInfoResponseBody(name='body'),
}

async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserInfo', 'GET', '/users/current', 'json', false, 'json', request);
}

model GetVMDeployOrderRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1222', position='Path'),
  deployOrderId: long(name='deployOrderId', example='11111', position='Path'),
}

model GetVMDeployOrderResponseBody = {
  deployOrder?: {
    actions?: [ 
      {
        disable?: boolean(name='disable', example='true'),
        params?: any(name='params', example='{}'),
        type?: string(name='type', example='StopVMDeployOrder'),
      }
    ](name='actions'),
    createTime?: long(name='createTime', example='111111111111'),
    creator?: string(name='creator', example='ssaassa'),
    currentBatch?: int32(name='currentBatch', example='2'),
    deployMachineInfo?: {
      batchNum?: int32(name='batchNum', example='11'),
      deployMachines?: [ 
        {
          actions?: [ 
            {
              disable?: boolean(name='disable', example='true'),
              params?: any(name='params', example='{}'),
              type?: string(name='type', example='RetryVMDeployMachine'),
            }
          ](name='actions'),
          batchNum?: int32(name='batchNum', example='22'),
          clientStatus?: string(name='clientStatus', example='ok'),
          createTime?: long(name='createTime', example='1111111111'),
          ip?: string(name='ip', example='127.0.0.1'),
          machineSn?: string(name='machineSn', example='sasssasa'),
          status?: string(name='status', example='Success'),
          updateTime?: long(name='updateTime', example='11111111'),
        }
      ](name='deployMachines'),
      hostGroupId?: long(name='hostGroupId', example='1111'),
    }(name='deployMachineInfo'),
    deployOrderId?: string(name='deployOrderId', example='11111'),
    exceptionCode?: string(name='exceptionCode'),
    status?: string(name='status', example='Success'),
    totalBatch?: int32(name='totalBatch', example='3'),
    updateTime?: long(name='updateTime', example='11111111111'),
  }(name='deployOrder'),
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model GetVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetVMDeployOrderResponseBody(name='body'),
}

async function getVMDeployOrder(request: GetVMDeployOrderRequest): GetVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVMDeployOrder', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}', 'json', false, 'json', request);
}

model GetVariableGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='123', position='Path'),
}

model GetVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  variableGroup?: {
    ccreatorAccountId?: string(name='ccreatorAccountId', example='13232343434343'),
    createTime?: long(name='createTime', example='1586863220000'),
    description?: string(name='description', example='变量组'),
    id?: long(name='id', example='12234'),
    modifierAccountId?: string(name='modifierAccountId', example='13232343434343'),
    name?: string(name='name', example='变量组'),
    relatedPipelines?: [ 
      {
        id?: long(name='id', example='1234'),
        name?: string(name='name', example='流水线'),
      }
    ](name='relatedPipelines'),
    updateTime?: long(name='updateTime', example='1586863220000'),
    variables?: [ 
      {
        isEncrypted?: boolean(name='isEncrypted', example='true'),
        name?: string(name='name', example='name1'),
        value?: string(name='value', example='value1'),
      }
    ](name='variables'),
  }(name='variableGroup'),
}

model GetVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetVariableGroupResponseBody(name='body'),
}

async function getVariableGroup(request: GetVariableGroupRequest): GetVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVariableGroup', 'GET', '/organization/{organizationId}/variableGroups/{id}', 'json', false, 'json', request);
}

model GetWorkItemActivityRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId: string(name='workitemId', example='e8bxxxxxxxxxxxxxxxx23', position='Path'),
}

model GetWorkItemActivityResponseBody = {
  activities?: [ 
    {
      actionType?: string(name='actionType', example='update'),
      eventId?: long(name='eventId', example='3201131'),
      eventTime?: long(name='eventTime', example='1640867079624'),
      eventType?: string(name='eventType', example='workitem.updated'),
      newValue?: [ 
        {
          displayValue?: string(name='displayValue', example='Sprint-221124'),
          plainValue?: string(name='plainValue', example='bed1cca179badeb501a72d1194'),
          resourceType?: string(name='resourceType', example='Sprint'),
        }
      ](name='newValue'),
      oldValue?: [ 
        {
          displayValue?: string(name='displayValue', example='Sprint-221124'),
          plainValue?: string(name='plainValue', example='bed1cca179badeb501a72d1194'),
          resourceType?: string(name='resourceType', example='Sprint'),
        }
      ](name='oldValue'),
      operator?: string(name='operator', example='19xx7043xxxxxxx914'),
      parentEventId?: long(name='parentEventId', example='3201132'),
      property?: {
        displayName?: string(name='displayName', example='标题'),
        propertyIdentifier?: string(name='propertyIdentifier', example='subject'),
        propertyName?: string(name='propertyName', example='subject'),
        propertyType?: string(name='propertyType', example='null'),
      }(name='property', example='public'),
      resourceIdentifier?: string(name='resourceIdentifier', example='e8bxxxxxxxxxxxxxxxx23'),
    }
  ](name='activities'),
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetWorkItemActivityResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemActivityResponseBody(name='body'),
}

async function getWorkItemActivity(request: GetWorkItemActivityRequest): GetWorkItemActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemActivity', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getActivity', 'json', false, 'json', request);
}

model GetWorkItemInfoRequest {
  organizationId: string(name='organizationId', example='5e706xxxxxx01xxx96', position='Path'),
  workitemId: string(name='workitemId', example='ce2xxxx21580baxxxx633f13', position='Path'),
}

model GetWorkItemInfoResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitem?: {
    assignedTo?: string(name='assignedTo', example='19xx7043xxxxxxx914'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    customFields?: [ 
      {
        fieldClassName?: string(name='fieldClassName', example='例如：date'),
        fieldFormat?: string(name='fieldFormat', example='例：input'),
        fieldIdentifier?: string(name='fieldIdentifier', example='例：80'),
        level?: long(name='level', example='1'),
        objectValue?: string(name='objectValue', example='null'),
        position?: long(name='position', example='1'),
        value?: string(name='value', example='例：2022-01-06 00:00:00'),
        valueList?: [ 
          {
            displayValue?: string(name='displayValue', example='2022-02-01 00:00:00'),
            identifier?: string(name='identifier', example='2022-02-01 00:00:00'),
            level?: long(name='level', example='1'),
            value?: string(name='value', example='2022-02-01 00:00:00'),
            valueEn?: string(name='valueEn', example='null'),
          }
        ](name='valueList'),
        workitemIdentifier?: string(name='workitemIdentifier', example='5daa9a15c7fd55523996......'),
      }
    ](name='customFields'),
    document?: string(name='document', example='html格式'),
    gmtCreate?: long(name='gmtCreate', example='1640850318000'),
    gmtModified?: long(name='gmtModified', example='1640850318000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    parentIdentifier?: string(name='parentIdentifier', example='e8bxxxxxxxxxxxxxxxx24'),
    participant?: [ string ](name='participant'),
    serialNumber?: string(name='serialNumber', example='ABCD-1'),
    spaceIdentifier?: string(name='spaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
    spaceName?: string(name='spaceName', example='需求项目'),
    spaceType?: string(name='spaceType', example='Project'),
    sprint?: [ string ](name='sprint'),
    status?: string(name='status', example='待处理'),
    statusIdentifier?: string(name='statusIdentifier', example='例：100005'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='1'),
    subject?: string(name='subject', example='测试工作项'),
    tag?: [ string ](name='tag'),
    tracker?: [ string ](name='tracker'),
    updateStatusAt?: long(name='updateStatusAt', example='1640850328000'),
    verifier?: [ string ](name='verifier'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uxxxxxxre573f5xxxxxx0'),
  }(name='workitem'),
}

model GetWorkItemInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemInfoResponseBody(name='body'),
}

async function getWorkItemInfo(request: GetWorkItemInfoRequest): GetWorkItemInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemInfo', 'GET', '/organization/{organizationId}/workitems/{workitemId}', 'json', false, 'json', request);
}

model GetWorkItemWorkFlowInfoRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId?: string(name='workitemId', example='fd0xxxxx00d355b05df60xxxx', position='Path'),
  configurationId?: string(name='configurationId', example='711d33c738b9171c45fa......', position='Query'),
}

model GetWorkItemWorkFlowInfoResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workflow?: {
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    defaultStatusIdentifier?: string(name='defaultStatusIdentifier', example='100005'),
    description?: string(name='description', example='工作流的描述'),
    gmtCreate?: long(name='gmtCreate', example='1640850318000'),
    gmtModified?: long(name='gmtModified', example='1640850318000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name', example='名称'),
    ownerSpaceIdentifier?: string(name='ownerSpaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
    ownerSpaceType?: string(name='ownerSpaceType', example='null'),
    resourceType?: string(name='resourceType', example='Project'),
    source?: string(name='source', example='system'),
    statusOrder?: string(name='statusOrder', example='null'),
    statuses?: [ 
      {
        creator?: string(name='creator', example='19xx7043xxxxxxx914'),
        description?: string(name='description', example='xxx'),
        gmtCreate?: long(name='gmtCreate', example='1613805843000'),
        gmtModified?: long(name='gmtModified', example='1613805843000'),
        identifier?: string(name='identifier', example='156603'),
        modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
        name?: string(name='name', example='待处理'),
        resourceType?: string(name='resourceType', example='Workitem'),
        source?: string(name='source', example='system'),
        workflowStageIdentifier?: string(name='workflowStageIdentifier', example='1'),
        workflowStageName?: string(name='workflowStageName', example='确认阶段'),
      }
    ](name='statuses'),
    workflowActions?: [ 
      {
        id?: long(name='id', example='16274887'),
        name?: string(name='name', example='xxx'),
        nextWorkflowStatusIdentifier?: string(name='nextWorkflowStatusIdentifier', example='100011'),
        workflowIdentifier?: string(name='workflowIdentifier', example='fd0xxxxxd00d355b05dxxxx26'),
        workflowStatusIdentifier?: string(name='workflowStatusIdentifier', example='100005'),
      }
    ](name='workflowActions'),
  }(name='workflow'),
}

model GetWorkItemWorkFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemWorkFlowInfoResponseBody(name='body'),
}

async function getWorkItemWorkFlowInfo(request: GetWorkItemWorkFlowInfoRequest): GetWorkItemWorkFlowInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemWorkFlowInfo', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getWorkflowInfo', 'json', false, 'json', request);
}

model GetWorkitemAttachmentCreatemetaRequest {
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Path'),
  workitemIdentifier: string(name='workitemIdentifier', example='11234455454355', position='Path'),
  fileName: string(name='fileName', example='application.jar', position='Query'),
}

model GetWorkitemAttachmentCreatemetaResponseBody = {
  errorCode?: string(name='errorCode', example='Invalid.IdNotFound'),
  errorMessage?: string(name='errorMessage', example='Forbidden.UserNotInCurrentOrganization'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: string(name='success', example='true'),
  uploadInfo?: {
    accessid?: string(name='accessid', example='xxxxxxx'),
    dir?: string(name='dir', example='ddd/dddd'),
    host?: string(name='host', example='xxxxx'),
    policy?: string(name='policy', example='xxxxxxx'),
    signature?: string(name='signature', example='xdWcrl/yTmIUA0kE7a3B0Ox4Vu8='),
  }(name='uploadInfo'),
}

model GetWorkitemAttachmentCreatemetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemAttachmentCreatemetaResponseBody(name='body'),
}

async function getWorkitemAttachmentCreatemeta(request: GetWorkitemAttachmentCreatemetaRequest): GetWorkitemAttachmentCreatemetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemAttachmentCreatemeta', 'GET', '/organization/{organizationId}/workitem/{workitemIdentifier}/attachment/createmeta', 'json', false, 'json', request);
}

model GetWorkitemCommentListRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId: string(name='workitemId', example='ce2xxxx21580baxxxx633f13', position='Path'),
}

model GetWorkitemCommentListResponseBody = {
  commentList?: [ 
    {
      content?: string(name='content', example='066961'),
      createTime?: long(name='createTime', example='1667205617061'),
      formatType?: string(name='formatType', example='RICHTEXT/MARKDOWN'),
      id?: long(name='id', example='6573'),
      isTop?: boolean(name='isTop', example='true/false'),
      modifiedTime?: long(name='modifiedTime', example='1646323200000'),
      parentId?: long(name='parentId', example='1013131897677566'),
      targetIdentifier?: string(name='targetIdentifier', example='9144ef6b72d8exxxxx9e61a4d0'),
      targetType?: string(name='targetType', example='workitem'),
      topTime?: long(name='topTime', example='1667205617089'),
      user?: {
        account?: string(name='account'),
        avatar?: string(name='avatar'),
        identifier?: string(name='identifier'),
        nickName?: string(name='nickName'),
        realName?: string(name='realName'),
      }(name='user'),
    }
  ](name='commentList'),
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: string(name='success'),
}

model GetWorkitemCommentListResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemCommentListResponseBody(name='body'),
}

async function getWorkitemCommentList(request: GetWorkitemCommentListRequest): GetWorkitemCommentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemCommentList', 'GET', '/organization/{organizationId}/workitems/{workitemId}/commentList', 'json', false, 'json', request);
}

model GetWorkitemRelationsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId: string(name='workitemId', example='8876ad01xxxxx65d9710b2631', position='Path'),
  relationType: string(name='relationType', position='Query'),
}

model GetWorkitemRelationsResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidGroup.IdNotFound'),
  errorMsg?: string(name='errorMsg', example='error'),
  relationList?: [ 
    {
      assignedTo?: string(name='assignedTo', example='aliyun_1384605'),
      categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
      gmtCreate?: string(name='gmtCreate', example='1667205617061'),
      gmtModified?: string(name='gmtModified', example='1667205617089'),
      identifier?: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd'),
      spaceIdentifier?: string(name='spaceIdentifier', example='2b856dxxxxxxb61d93676255ba'),
      subject?: string(name='subject'),
      workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uy29901re573f561d69jn40'),
    }
  ](name='relationList'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model GetWorkitemRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemRelationsResponseBody(name='body'),
}

async function getWorkitemRelations(request: GetWorkitemRelationsRequest): GetWorkitemRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemRelations', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getRelations', 'json', false, 'json', request);
}

model GetWorkitemTimeTypeListRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
}

model GetWorkitemTimeTypeListResponseBody = {
  errorCode?: string(name='errorCode', example='Invalid.IdNotFound'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F'),
  success?: string(name='success', example='true'),
  timeType?: [ 
    {
      description?: string(name='description'),
      displayName?: string(name='displayName', example='deploy'),
      identifier?: string(name='identifier', example='67fb001005aac8d3d2a3372416'),
      name?: string(name='name'),
      position?: long(name='position', example='1'),
    }
  ](name='timeType'),
}

model GetWorkitemTimeTypeListResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemTimeTypeListResponseBody(name='body'),
}

async function getWorkitemTimeTypeList(request: GetWorkitemTimeTypeListRequest): GetWorkitemTimeTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemTimeTypeList', 'GET', '/organization/{organizationId}/workitems/type/list', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  workspaceId: string(name='workspaceId', example='6ed82817-ab75-4563-865d-81e60dxxxxxx', position='Path'),
}

model GetWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', example='InvalidWorkspace.NotFound'),
  errorMessage?: string(name='errorMessage', example='The workspace is not found.'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: boolean(name='success', example='true'),
  workspace?: {
    codeUrl?: string(name='codeUrl', example='https://codeup.aliyun.com/demo/group/Codeup-Demo.git'),
    codeVersion?: string(name='codeVersion', example='master'),
    createTime?: string(name='createTime', example='1628564442000'),
    id?: string(name='id', example='6ed82817-ab75-4563-865d-81e60dxxxxxx'),
    name?: string(name='name', example='Demo'),
    spec?: string(name='spec', example='2::4::60'),
    status?: string(name='status', example='SUCCESS'),
    template?: string(name='template', example='all-in-one'),
    userId?: string(name='userId', example='1470227819xxxxxx'),
  }(name='workspace'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspace', 'GET', '/api/workspaces/{workspaceId}', 'json', false, 'json', request);
}

model JoinPipelineGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  groupId: long(name='groupId', example='11', position='Query'),
  pipelineIds: string(name='pipelineIds', example='122,122', position='Query'),
}

model JoinPipelineGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model JoinPipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinPipelineGroupResponseBody(name='body'),
}

async function joinPipelineGroup(request: JoinPipelineGroupRequest): JoinPipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'JoinPipelineGroup', 'POST', '/organization/{organizationId}/pipelineGroups/join', 'json', false, 'json', request);
}

model ListFlowTagGroupsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
}

model ListFlowTagGroupsResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  flowTagGroups?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', example='111111111'),
      id?: long(name='id', example='111'),
      modiferAccountId?: string(name='modiferAccountId', example='11111111'),
      name?: string(name='name', example='标签名称'),
    }
  ](name='flowTagGroups'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model ListFlowTagGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowTagGroupsResponseBody(name='body'),
}

async function listFlowTagGroups(request: ListFlowTagGroupsRequest): ListFlowTagGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowTagGroups', 'GET', '/organization/{organizationId}/flow/tagGroups', 'json', false, 'json', request);
}

model ListGroupMemberRequest {
  groupId: long(name='groupId', example='22901', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='632bbfdf419338aaa2b1360a', position='Query'),
}

model ListGroupMemberResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='C8F8B434-B006-59FB-8B9C-0382CF3D5680'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', example='30'),
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
      email?: string(name='email', example='username@example.com'),
      id?: long(name='id', example='123456'),
      memberType?: string(name='memberType', example='USERS'),
      name?: string(name='name', example='test-codeup'),
      sourceId?: long(name='sourceId', example='223241'),
      state?: string(name='state', example='active'),
      username?: string(name='username', example='test-codeup-nickname'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model ListGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupMemberResponseBody(name='body'),
}

async function listGroupMember(request: ListGroupMemberRequest): ListGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroupMember', 'GET', '/repository/groups/{groupId}/list', 'json', false, 'json', request);
}

model ListGroupRepositoriesRequest {
  groupId: string(name='groupId', example='35117', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60ee8a814690c27532d412f8', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  search?: string(name='search', example='Demo', position='Query'),
}

model ListGroupRepositoriesResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='9293CBDA-B5BC-5AD6-A8F4-C7873AC7A3DF'),
  result?: [ 
    {
      archived?: boolean(name='archived', example='false'),
      commitCount?: long(name='commitCount', example='10'),
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      creatorId?: long(name='creatorId', example='19238'),
      description?: string(name='description'),
      httpUrl?: string(name='httpUrl', example='https://xxx/test/test'),
      id?: long(name='id', example='89616'),
      importUrl?: string(name='importUrl', example='http://xxx/x'),
      isStared?: boolean(name='isStared', example='true'),
      issuesEnabled?: boolean(name='issuesEnabled', example='true'),
      lastActivityAt?: string(name='lastActivityAt', example='2022-03-18 14:24:54'),
      mergeRequestsEnabled?: boolean(name='mergeRequestsEnabled', example='true'),
      name?: string(name='name', example='test-group-repo'),
      nameWithNamespace?: string(name='nameWithNamespace'),
      namespaceId?: boolean(name='namespaceId', example='100003'),
      path?: string(name='path', example='test-group-repo'),
      pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-group-repo'),
      privateFlag?: boolean(name='privateFlag', example='true'),
      snippetsEnabled?: boolean(name='snippetsEnabled', example='false'),
      sshUrl?: string(name='sshUrl', example='git@xxx:xxx/test/test.git'),
      starCount?: int32(name='starCount', example='0'),
      updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
      visibilityLevel?: int32(name='visibilityLevel', example='0'),
      webUrl?: string(name='webUrl', example='""'),
      wikiEnabled?: boolean(name='wikiEnabled', example='true'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='2'),
}

model ListGroupRepositoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupRepositoriesResponseBody(name='body'),
}

async function listGroupRepositories(request: ListGroupRepositoriesRequest): ListGroupRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroupRepositories', 'GET', '/repository/groups/{groupId}/projects', 'json', false, 'json', request);
}

model ListHostGroupsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  createEndTime?: long(name='createEndTime', example='1586863220000', position='Query'),
  createStartTime?: long(name='createStartTime', example='1586863220000', position='Query'),
  creatorAccountIds?: string(name='creatorAccountIds', example='1112122121,3223332', position='Query'),
  ids?: string(name='ids', example='121,1212121232', position='Query'),
  maxResults?: long(name='maxResults', example='30', position='Query'),
  name?: string(name='name', example='主机组', position='Query'),
  nextToken?: string(name='nextToken', example='221212221', position='Query'),
  pageOrder?: string(name='pageOrder', example='DESC', position='Query'),
  pageSort?: string(name='pageSort', example='ID', position='Query'),
}

model ListHostGroupsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  hostGroups?: [ 
    {
      aliyunRegion?: string(name='aliyunRegion', example='cn-beijing'),
      createTime?: long(name='createTime', example='1586863220000'),
      creatorAccountId?: string(name='creatorAccountId', example='2222222222222'),
      description?: string(name='description', example='主机组'),
      ecsLabelKey?: string(name='ecsLabelKey', example='ecs'),
      ecsLabelValue?: string(name='ecsLabelValue', example='value'),
      ecsType?: string(name='ecsType', example='ECS_ALIYUN'),
      hostNum?: long(name='hostNum', example='3'),
      id?: long(name='id', description='323232', example='部署组Id'),
      modifierAccountId?: string(name='modifierAccountId', example='211111111'),
      name?: string(name='name', example='部署组'),
      serviceConnectionId?: long(name='serviceConnectionId', example='1212122'),
      type?: string(name='type', example='ECS'),
      updateTime?: long(name='updateTime', example='1586863220000'),
    }
  ](name='hostGroups'),
  nextToken?: string(name='nextToken', example='asassasassa'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='50'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroups(request: ListHostGroupsRequest): ListHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHostGroups', 'GET', '/organization/{organizationId}/hostGroups', 'json', false, 'json', request);
}

model ListOrganizationMembersRequest {
  organizationId: string(name='organizationId', example='66c0c9fffeb86b450c199fcd', position='Path'),
  containsExternInfo?: boolean(name='containsExternInfo', description='返回信息中是否包含第三方信息，默认不包含。', position='Query'),
  externUid?: string(name='externUid', example='1236666', position='Query'),
  joinTimeFrom?: long(name='joinTimeFrom', example='1631845101798', position='Query'),
  joinTimeTo?: long(name='joinTimeTo', example='1631845101798', position='Query'),
  maxResults?: long(name='maxResults', example='20', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='nextToken', example='""', position='Query'),
  organizationMemberName?: string(name='organizationMemberName', position='Query'),
  provider?: string(name='provider', example='Dingtalk', position='Query'),
  state?: string(name='state', example='normal', position='Query'),
}

model ListOrganizationMembersResponseBody = {
  errorCode?: string(name='errorCode', example='null'),
  errorMessage?: string(name='errorMessage', example='error info'),
  members?: [ 
    {
      accountId?: string(name='accountId', example='123456677888'),
      birthday?: long(name='birthday', example='1631845101798'),
      deptLists?: [ string ](name='deptLists'),
      email?: string(name='email', example='123@mail.com'),
      hiredDate?: long(name='hiredDate', example='1631845101798'),
      identities?: {
        externUid?: string(name='externUid', example='1236666'),
        provider?: string(name='provider', example='Dingtalk'),
      }(name='identities'),
      joinTime?: long(name='joinTime', example='1631845101798'),
      lastVisitTime?: long(name='lastVisitTime', example='1631845101798'),
      mobile?: string(name='mobile', example='1390000****'),
      organizationMemberName?: string(name='organizationMemberName'),
      organizationRoleId?: string(name='organizationRoleId', example='8fc0c9ff039711dd64acd000'),
      organizationRoleName?: string(name='organizationRoleName'),
      state?: string(name='state', example='normal'),
    }
  ](name='members'),
  nextToken?: string(name='nextToken', example='""'),
  requestId?: string(name='requestId', example='FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='15'),
}

model ListOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationMembersResponseBody(name='body'),
}

async function listOrganizationMembers(request: ListOrganizationMembersRequest): ListOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationMembers', 'GET', '/organization/{organizationId}/members', 'json', false, 'json', request);
}

model ListOrganizationsRequest {
  accessLevel?: int32(name='accessLevel', example='5', position='Query'),
  minAccessLevel?: int32(name='minAccessLevel', example='60', position='Query'),
}

model ListOrganizationsResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='95FE5953-FF5B-5F80-94AD-FFF97D990FE0'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', example='60'),
      id?: long(name='id', example='5240'),
      organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
      organizationName?: string(name='organizationName'),
      organizationRole?: string(name='organizationRole', example='ORG_ADMIN'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='2'),
}

model ListOrganizationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationsResponseBody(name='body'),
}

async function listOrganizations(request: ListOrganizationsRequest): ListOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizations', 'GET', '/organizations/list', 'json', false, 'json', request);
}

model ListPipelineGroupPipelinesRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  groupId: long(name='groupId', example='111', position='Path'),
  createEndTime?: long(name='createEndTime', example='1586863220000', position='Query'),
  createStartTime?: long(name='createStartTime', example='1586863220000', position='Query'),
  executeEndTime?: long(name='executeEndTime', example='1586863220000', position='Query'),
  executeStartTime?: long(name='executeStartTime', example='1586863220000', position='Query'),
  maxResults?: long(name='maxResults', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', example='aaaa', position='Query'),
  pipelineName?: string(name='pipelineName', position='Query'),
  resultStatusList?: string(name='resultStatusList', example='RUNNING,SUCCESS', position='Query'),
}

model ListPipelineGroupPipelinesResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  nextToken?: string(name='nextToken', example='aaaa'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime', example='1586863220000'),
      pipelineId?: long(name='pipelineId', example='1111'),
      pipelineName?: string(name='pipelineName'),
    }
  ](name='pipelines'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: int32(name='totalCount', example='20'),
}

model ListPipelineGroupPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineGroupPipelinesResponseBody(name='body'),
}

async function listPipelineGroupPipelines(request: ListPipelineGroupPipelinesRequest): ListPipelineGroupPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineGroupPipelines', 'GET', '/organization/{organizationId}/pipelineGroups/{groupId}/pipelines', 'json', false, 'json', request);
}

model ListPipelineGroupsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  maxResults?: long(name='maxResults', example='20', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', example='aaaaaaaaaa', position='Query'),
}

model ListPipelineGroupsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  nextToken?: string(name='nextToken', example='ssaassasass'),
  pipelineGroups?: [ 
    {
      createTime?: long(name='createTime', example='1586863220000'),
      id?: long(name='id', example='111'),
      name?: string(name='name'),
    }
  ](name='pipelineGroups'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: int32(name='totalCount', example='50'),
}

model ListPipelineGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineGroupsResponseBody(name='body'),
}

async function listPipelineGroups(request: ListPipelineGroupsRequest): ListPipelineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineGroups', 'GET', '/organization/{organizationId}/pipelineGroups', 'json', false, 'json', request);
}

model ListPipelineJobHistorysRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: string(name='pipelineId', example='123', maxLength=1000, position='Path'),
  category: string(name='category', example='DEPLOY', position='Query'),
  identifier: string(name='identifier', example='10_ssasasa', position='Query'),
  maxResults: long(name='maxResults', example='10', maximum=50, position='Query'),
  nextToken?: string(name='nextToken', example='xsaxsa', position='Query'),
}

model ListPipelineJobHistorysResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  jobs?: [ 
    {
      executeNumber?: int32(name='executeNumber', example='1'),
      identifier?: string(name='identifier', example='10_xaxxsxa'),
      jobId?: long(name='jobId', example='123'),
      jobName?: string(name='jobName'),
      operatorAccountId?: string(name='operatorAccountId', example='ssaasssa'),
      pipelineId?: long(name='pipelineId', example='123'),
      pipelineRunId?: long(name='pipelineRunId', example='123'),
      sources?: string(name='sources', example='{}'),
      status?: string(name='status', example='SUCCESS'),
    }
  ](name='jobs'),
  nextToken?: string(name='nextToken', example='xsxxs'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
  totalCount?: int32(name='totalCount', example='20'),
}

model ListPipelineJobHistorysResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineJobHistorysResponseBody(name='body'),
}

async function listPipelineJobHistorys(request: ListPipelineJobHistorysRequest): ListPipelineJobHistorysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineJobHistorys', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/job/historys', 'json', false, 'json', request);
}

model ListPipelineJobsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: string(name='pipelineId', example='1111', maxLength=1000, position='Path'),
  category: string(name='category', example='DEPLOY', position='Query'),
}

model ListPipelineJobsResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  jobs?: [ 
    {
      identifier?: string(name='identifier', example='ss_saxsxsxs'),
      jobName?: string(name='jobName'),
      lastJobId?: long(name='lastJobId', example='123'),
      lastJobParams?: string(name='lastJobParams', example='{}'),
    }
  ](name='jobs'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model ListPipelineJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineJobsResponseBody(name='body'),
}

async function listPipelineJobs(request: ListPipelineJobsRequest): ListPipelineJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineJobs', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/jobs', 'json', false, 'json', request);
}

model ListPipelineRelationsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId?: long(name='pipelineId', example='11', position='Path'),
  relObjectType: string(name='relObjectType', example='VARIABLE_GROUP', position='Query'),
}

model ListPipelineRelationsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelineRelations?: [ 
    {
      refObjectId?: long(name='refObjectId', example='12234'),
    }
  ](name='pipelineRelations'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model ListPipelineRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineRelationsResponseBody(name='body'),
}

async function listPipelineRelations(request: ListPipelineRelationsRequest): ListPipelineRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRelations', 'GET', '/organization/{organizationId}/{pipelineId}/pipelineRelations', 'json', false, 'json', request);
}

model ListPipelineRunsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1233', position='Path'),
  endTime?: long(name='endTime', example='1586863220000', position='Query'),
  maxResults?: long(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='aaaaaa', position='Query'),
  startTime?: long(name='startTime', example='1586863220000', position='Query'),
  status?: string(name='status', example='RUNNING', position='Query'),
  triggerMode?: int32(name='triggerMode', example='1', position='Query'),
}

model ListPipelineRunsResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  nextToken?: string(name='nextToken', example='xzxsasasaas'),
  pipelineRuns?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', example='1222222222'),
      endTime?: long(name='endTime', example='1586863220000'),
      pipelineId?: long(name='pipelineId', example='1234'),
      pipelineRunId?: long(name='pipelineRunId', example='11'),
      startTime?: long(name='startTime', example='1586863220000'),
      status?: string(name='status', example='状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
      triggerMode?: long(name='triggerMode', example='1'),
    }
  ](name='pipelineRuns'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='50'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRuns', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  createEndTime?: long(name='createEndTime', example='1586863220000', position='Query'),
  createStartTime?: long(name='createStartTime', example='1586863220000', position='Query'),
  creatorAccountIds?: string(name='creatorAccountIds', example='112122121', position='Query'),
  executeAccountIds?: string(name='executeAccountIds', example='1111111', position='Query'),
  executeEndTime?: long(name='executeEndTime', example='1586863220000', position='Query'),
  executeStartTime?: long(name='executeStartTime', example='1586863220000', position='Query'),
  maxResults?: long(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='aaaaaaaaaa', position='Query'),
  pipelineName?: string(name='pipelineName', example='流水线', position='Query'),
  statusList?: string(name='statusList', example='RUNNING,SUCCESS', position='Query'),
}

model ListPipelinesResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  nextToken?: string(name='nextToken', example='ssaassasass'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime', example='1586863220000'),
      creatorAccountId?: string(name='creatorAccountId', example='22121222'),
      groupId?: long(name='groupId'),
      pipelineId?: long(name='pipelineId', example='124'),
      pipelineName?: string(name='pipelineName', example='流水线'),
    }
  ](name='pipelines'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='50'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/organization/{organizationId}/pipelines', 'json', false, 'json', request);
}

model ListProjectMembersRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  projectId: string(name='projectId', example='e8bxxxxx2abd6e76aa209b07d23', position='Path'),
  targetType: string(name='targetType', example='Space', position='Query'),
}

model ListProjectMembersResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  members?: [ 
    {
      account?: string(name='account', example='null'),
      avatar?: string(name='avatar', example='https://xxxxxx.png'),
      dingTalkId?: string(name='dingTalkId', example='null'),
      displayName?: string(name='displayName', example='名称'),
      displayNickName?: string(name='displayNickName', example='mingcheng'),
      displayRealName?: string(name='displayRealName', example='名称'),
      division?: {
        identifier?: string(name='identifier', example='1345xxxxxxx947xxxx'),
      }(name='division'),
      email?: string(name='email', example='accountsxxxx@mail.com'),
      gender?: string(name='gender', example='null'),
      identifier?: string(name='identifier', example='19xxxx31947xxxx'),
      mobile?: string(name='mobile', example='135xxxxxxxxx'),
      nameEn?: string(name='nameEn', example='name'),
      nickName?: string(name='nickName', example='昵称'),
      nickNamePinyin?: string(name='nickNamePinyin', example='nicheng'),
      organizationUserInfo?: {
        organizationIdentifier?: string(name='organizationIdentifier', example='5e7xxxxb3cd3711dd6xxx2c'),
      }(name='organizationUserInfo'),
      realName?: string(name='realName', example='xxx'),
      realNamePinyin?: string(name='realNamePinyin', example='xxx'),
      roleName?: string(name='roleName', description='角色名称'),
      stamp?: string(name='stamp', example='User'),
      tbRoleId?: string(name='tbRoleId', example='null'),
    }
  ](name='members'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectMembers', 'GET', '/organization/{organizationId}/projects/{projectId}/listMembers', 'json', false, 'json', request);
}

model ListProjectTemplatesRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  category: string(name='category', example='Project', position='Query'),
}

model ListProjectTemplatesResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  templates?: [ 
    {
      copyFrom?: string(name='copyFrom', example='null'),
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      description?: string(name='description', example='迭代的具体信息'),
      gmtCreate?: long(name='gmtCreate', example='1623916393000'),
      gmtModified?: long(name='gmtModified', example='1623916393000'),
      icon?: string(name='icon', example='https://img.xxxx.png'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
      name?: string(name='name', example='专用模板'),
      nameEn?: string(name='nameEn', example='Test Template'),
      resourceCategory?: string(name='resourceCategory', example='Project'),
      resourceType?: string(name='resourceType', example='null'),
      spaceIdentifier?: string(name='spaceIdentifier', example='null'),
      spaceType?: string(name='spaceType', example='null'),
      type?: long(name='type', example='4'),
    }
  ](name='templates'),
}

model ListProjectTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectTemplatesResponseBody(name='body'),
}

async function listProjectTemplates(request: ListProjectTemplatesRequest): ListProjectTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectTemplates', 'GET', '/organization/{organizationId}/projects/listTemplates', 'json', false, 'json', request);
}

model ListProjectWorkitemTypesRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  projectId: string(name='projectId', example='asd345xxxxx9q9845xxxxx34', position='Path'),
  category: string(name='category', example='Req', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
}

model ListProjectWorkitemTypesResponseBody = {
  errorCode?: string(name='errorCode', example='例：Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='errormessage'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true或者false'),
  workitemTypes?: [ 
    {
      addUser?: string(name='addUser', example='用户阿里云pk，例如19xxxx31947xxxx'),
      categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
      creator?: string(name='creator', example='用户阿里云pk，例如19xxxx31947xxxx'),
      defaultType?: boolean(name='defaultType', example='true或者false'),
      description?: string(name='description', example='该类型的具体信息'),
      enable?: boolean(name='enable', example='true或者false'),
      gmtAdd?: long(name='gmtAdd', example='1641870287000'),
      gmtCreate?: long(name='gmtCreate', example='1620455467000'),
      identifier?: string(name='identifier', example='dfexxxxxf4fee18xxxxx36'),
      name?: string(name='name', example='例：业务类需求'),
      nameEn?: string(name='nameEn', example='例：Business Requirement'),
      systemDefault?: boolean(name='systemDefault', example='true'),
    }
  ](name='workitemTypes'),
}

model ListProjectWorkitemTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectWorkitemTypesResponseBody(name='body'),
}

async function listProjectWorkitemTypes(request: ListProjectWorkitemTypesRequest): ListProjectWorkitemTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectWorkitemTypes', 'GET', '/organization/{organizationId}/projects/{projectId}/getWorkitemType', 'json', false, 'json', request);
}

model ListProjectsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  category: string(name='category', example='Project', position='Query'),
  conditions?: string(name='conditions', description='{"conditionGroups":[[]]}', position='Query'),
  extraConditions?: string(name='extraConditions', position='Query'),
  maxResults?: long(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='""', position='Query'),
  scope?: string(name='scope', example='public', position='Query'),
}

model ListProjectsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='""'),
  projects?: [ 
    {
      categoryIdentifier?: string(name='categoryIdentifier', example='Project'),
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      customCode?: string(name='customCode', example='OJAY'),
      deleteTime?: long(name='deleteTime', example='null'),
      description?: string(name='description', example='xxx'),
      gmtCreate?: long(name='gmtCreate', example='1640778694000'),
      icon?: string(name='icon', example='https://xxxxxx.png'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      logicalStatus?: string(name='logicalStatus', example='null'),
      name?: string(name='name', example='xxxx'),
      scope?: string(name='scope', example='public'),
      statusStageIdentifier?: string(name='statusStageIdentifier', example='null'),
      typeIdentifier?: string(name='typeIdentifier', example='null'),
    }
  ](name='projects'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='10'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/organization/{organizationId}/listProjects', 'json', false, 'json', request);
}

model ListProtectedBranchesRequest {
  repositoryId: long(name='repositoryId', example='2813489', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model ListProtectedBranchesResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='313A1BF6-63B7-52D4-A098-952221A65254'),
  result?: [ 
    {
      allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
      allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
      allowMergeUsers?: [ 
        {
          avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
          email?: string(name='email', example='username@example.com'),
          id?: long(name='id', example='19238'),
          name?: string(name='name'),
          username?: string(name='username', example='codeup-test'),
        }
      ](name='allowMergeUsers'),
      allowPushRoles?: [ int32 ](name='allowPushRoles'),
      allowPushUserIds?: [ long ](name='allowPushUserIds'),
      allowPushUsers?: [ 
        {
          avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
          email?: string(name='email', example='username@example.com'),
          id?: long(name='id', example='19238'),
          name?: string(name='name'),
          username?: string(name='username', example='codeup-test'),
        }
      ](name='allowPushUsers'),
      branch?: string(name='branch', example='protectedBranch'),
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      id?: long(name='id', example='19285'),
      matches?: [ string ](name='matches'),
      mergeRequestSetting?: {
        allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
        defaultAssignees?: [ 
          {
            avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
            email?: string(name='email', example='username@example.com'),
            id?: long(name='id', example='19238'),
            name?: string(name='name'),
            username?: string(name='username', example='codeup-test'),
          }
        ](name='defaultAssignees'),
        isAllowSelfApproval?: boolean(name='isAllowSelfApproval', example='true'),
        isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed', example='true'),
        isRequired?: boolean(name='isRequired', example='true'),
        isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush', example='false'),
        minimumApproval?: int32(name='minimumApproval', example='1'),
        mrMode?: string(name='mrMode', example='general'),
        whiteList?: string(name='whiteList', example='**.java'),
      }(name='mergeRequestSetting'),
      testSettingDTO?: {
        checkConfig?: {
          checkItems?: [ 
            {
              isRequired?: boolean(name='isRequired', example='false'),
              name?: string(name='name'),
            }
          ](name='checkItems'),
        }(name='checkConfig'),
        checkTaskQualityConfig?: {
          bizNo?: string(name='bizNo', example='123456'),
          enabled?: boolean(name='enabled', example='false'),
          message?: string(name='message', example='test_task_quality'),
          taskName?: string(name='taskName', example='biz-task-quality'),
        }(name='checkTaskQualityConfig'),
        codeGuidelinesDetection?: {
          enabled?: boolean(name='enabled', example='false'),
          message?: string(name='message', example='test_code_guide_lines'),
        }(name='codeGuidelinesDetection'),
        isRequired?: boolean(name='isRequired', example='false'),
        sensitiveInfoDetection?: {
          enabled?: boolean(name='enabled', example='false'),
          message?: string(name='message', example='test_code_sensitive_info'),
        }(name='sensitiveInfoDetection'),
      }(name='testSettingDTO'),
      updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model ListProtectedBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProtectedBranchesResponseBody(name='body'),
}

async function listProtectedBranches(request: ListProtectedBranchesRequest): ListProtectedBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProtectedBranches', 'GET', '/repository/{repositoryId}/protect_branches', 'json', false, 'json', request);
}

model ListRepositoriesRequest {
  accessToken?: string(name='accessToken', position='Query'),
  archived?: boolean(name='archived', example='false', position='Query'),
  orderBy?: string(name='orderBy', example='created_at', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
  page?: long(name='page', example='2', position='Query'),
  perPage?: long(name='perPage', example='20', position='Query'),
  search?: string(name='search', example='Demo', position='Query'),
  sort?: string(name='sort', example='desc', position='Query'),
}

model ListRepositoriesResponseBody = {
  errorCode?: int32(name='errorCode'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='4D6AF7CC-B43B-5454-86AB-023D25E44868'),
  result?: [ 
    {
      id?: long(name='Id', example='1'),
      accessLevel?: int32(name='accessLevel', example='40'),
      archive?: boolean(name='archive', example='false'),
      avatarUrl?: string(name='avatarUrl'),
      createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
      description?: string(name='description'),
      importStatus?: string(name='importStatus'),
      lastActivityAt?: string(name='lastActivityAt', example='2022-01-14T21:08:26+08:00'),
      name?: string(name='name', example='codeupTest'),
      nameWithNamespace?: string(name='nameWithNamespace'),
      namespaceId?: long(name='namespaceId', example='745'),
      path?: string(name='path', example='test-codeup'),
      pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-codeup'),
      star?: boolean(name='star', example='false'),
      starCount?: long(name='starCount', example='0'),
      updatedAt?: string(name='updatedAt', example='2022-01-14T21:08:26+08:00'),
      visibilityLevel?: string(name='visibilityLevel', example='0'),
      webUrl?: string(name='webUrl', example='""'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='149'),
}

model ListRepositoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoriesResponseBody(name='body'),
}

async function listRepositories(request: ListRepositoriesRequest): ListRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositories', 'GET', '/repository/list', 'json', false, 'json', request);
}

model ListRepositoryBranchesRequest {
  repositoryId: long(name='repositoryId', example='2709413', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='20', position='Query'),
  search?: string(name='search', example='Demo', position='Query'),
  sort?: string(name='sort', example='desc', position='Query'),
}

model ListRepositoryBranchesResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='1F4F342D-493A-5B2C-B133-BA78B30FF834'),
  result?: [ 
    {
      commit?: {
        authorEmail?: string(name='authorEmail', example='username@example.com'),
        authorName?: string(name='authorName', example='test-codeup'),
        authoredDate?: string(name='authoredDate', example='2022-03-18 10:00:00'),
        committedDate?: string(name='committedDate', example='2022-03-18 11:00:00'),
        committerEmail?: string(name='committerEmail', example='username@example.com'),
        committerName?: string(name='committerName', example='commit-codeup'),
        createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
        id?: string(name='id', example='de02b625ba8488f92eb204bcb3773a40c1b4ddac'),
        message?: string(name='message'),
        parentIds?: [ string ](name='parentIds'),
        shortId?: string(name='shortId', example='e0297d8f'),
        title?: string(name='title'),
      }(name='commit'),
      name?: string(name='name', example='testBranch'),
      protected?: string(name='protected', example='false'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='100'),
}

model ListRepositoryBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryBranchesResponseBody(name='body'),
}

async function listRepositoryBranches(request: ListRepositoryBranchesRequest): ListRepositoryBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryBranches', 'GET', '/repository/{repositoryId}/branches', 'json', false, 'json', request);
}

model ListRepositoryCommitDiffRequest {
  repositoryId: long(name='repositoryId', example='2464454', position='Path'),
  sha: string(name='sha', example='master', position='Path'),
  accessToken?: string(name='accessToken', description='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  contextLine?: int32(name='contextLine', example='3', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model ListRepositoryCommitDiffResponseBody = {
  errorCode?: string(name='errorCode', example='success'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', description='Id of the request', example='0EE38A4E-8991-532A-8E8B-5C22B5D2E058'),
  result?: [ 
    {
      aMode?: string(name='aMode', example='100644'),
      bMode?: string(name='bMode', example='100755'),
      deletedFile?: boolean(name='deletedFile'),
      diff?: string(name='diff', example='--- /dev/null\\n+++ b/src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java\\n@@ -0,0 +1,13 @@\\n+package com.aliyun.codeupdemo;\\n+\\n+import org.junit.jupiter.api.Test;\\n+import org.springframework.boot.test.context.SpringBootTest;\\n+\\n+@SpringBootTest\\n+class CodeupDemoApplicationTest {\\n+\\n+ @Test\\n+ void contextLoads() {\\n+ }\\n+\\n+}\\n'),
      isBinary?: boolean(name='isBinary'),
      isNewLfs?: boolean(name='isNewLfs'),
      isOldLfs?: boolean(name='isOldLfs'),
      newFile?: boolean(name='newFile'),
      newId?: string(name='newId', example='6c268061a546378276559c713d0ad377d4xxxxxx'),
      newPath?: string(name='newPath', example='src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java'),
      oldId?: string(name='oldId', example='0000000000000000000000000000000000000000'),
      oldPath?: string(name='oldPath', example='src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java'),
      renamedFile?: boolean(name='renamedFile'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model ListRepositoryCommitDiffResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryCommitDiffResponseBody(name='body'),
}

async function listRepositoryCommitDiff(request: ListRepositoryCommitDiffRequest): ListRepositoryCommitDiffResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryCommitDiff', 'GET', '/repository/{repositoryId}/commits/{sha}/diff', 'json', false, 'json', request);
}

model ListRepositoryCommitsRequest {
  repositoryId: long(name='repositoryId', example='2334743', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  end?: string(name='end', example='2022-08-18 08:00:00', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='20', position='Query'),
  path?: string(name='path', example='src/cpp/main.cpp', position='Query'),
  refName: string(name='refName', position='Query'),
  search?: string(name='search', example='search', position='Query'),
  showCommentsCount?: boolean(name='showCommentsCount', example='false', position='Query'),
  showSignature?: boolean(name='showSignature', example='false', position='Query'),
  start?: string(name='start', example='2022-03-18 08:00:00', position='Query'),
}

model ListRepositoryCommitsResponseBody = {
  errorCode?: string(name='errorCode', example='OpenApi.error'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F1138237-CF7F-56BF-95D4-9AA937CCE8E5'),
  result?: [ 
    {
      author?: {
        avatarUrl?: string(name='avatarUrl'),
        email?: string(name='email', example='username@example.com'),
        id?: long(name='id', example='7914'),
        name?: string(name='name'),
        state?: string(name='state', example='active'),
        username?: string(name='username', example='nickname'),
        websiteUrl?: string(name='websiteUrl', example='""'),
      }(name='author'),
      authorEmail?: string(name='authorEmail', example='username@example.com'),
      authorName?: string(name='authorName', example='test-codeup'),
      authoredDate?: string(name='authoredDate', example='2022-03-18 15:00:00'),
      commentsCount?: long(name='commentsCount', example='1'),
      committedDate?: string(name='committedDate', example='2022-03-18 16:00:00'),
      committer?: {
        avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
        email?: string(name='email', example='username@example.com'),
        id?: long(name='id', example='41031'),
        name?: string(name='name', example='committer-codeup'),
        state?: string(name='state', example='active'),
        username?: string(name='username', example='nickname'),
        websiteUrl?: string(name='websiteUrl', example='""'),
      }(name='committer'),
      committerEmail?: string(name='committerEmail', example='username@example.com'),
      committerName?: string(name='committerName', example='committer-codeup'),
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      id?: string(name='id', example='de02b625ba8488f92eb204bcb3773a40c1b4ddac'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId', example='de02b625'),
      signature?: {
        gpgKeyId?: string(name='gpgKeyId', example='”“'),
        verificationStatus?: string(name='verificationStatus', example='verified'),
      }(name='signature'),
      title?: string(name='title'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='145'),
}

model ListRepositoryCommitsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryCommitsResponseBody(name='body'),
}

async function listRepositoryCommits(request: ListRepositoryCommitsRequest): ListRepositoryCommitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryCommits', 'GET', '/repository/{repositoryId}/commits', 'json', false, 'json', request);
}

model ListRepositoryGroupsRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  includePersonal?: boolean(name='includePersonal', example='false', position='Query'),
  orderBy?: string(name='orderBy', example='updated_at', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  parentId: long(name='parentId', example='26842', position='Query'),
  search?: string(name='search', example='Demo', position='Query'),
  sort?: string(name='sort', example='desc', position='Query'),
}

model ListRepositoryGroupsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', example='40'),
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      description?: string(name='description'),
      groupCount?: long(name='groupCount', example='10'),
      id?: long(name='id', example='19285'),
      name?: string(name='name', example='test-codeup'),
      nameWithNamespace?: string(name='nameWithNamespace'),
      ownerId?: long(name='ownerId', example='19230'),
      parentId?: long(name='parentId', example='26842'),
      path?: string(name='path', example='test-codeup'),
      pathWithNamespace?: string(name='pathWithNamespace', example='60de7a6852743a5162b5f957/test-codeup'),
      projectCount?: long(name='projectCount', example='10'),
      type?: string(name='type', example='Group'),
      updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
      visibilityLevel?: int32(name='visibilityLevel', example='0'),
      webUrl?: string(name='webUrl', example='""'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='100'),
}

model ListRepositoryGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryGroupsResponseBody(name='body'),
}

async function listRepositoryGroups(request: ListRepositoryGroupsRequest): ListRepositoryGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryGroups', 'GET', '/repository/groups/get/all', 'json', false, 'json', request);
}

model ListRepositoryMemberWithInheritedRequest {
  repositoryId: long(name='repositoryId', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
}

model ListRepositoryMemberWithInheritedResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel'),
      avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
      email?: string(name='email'),
      id?: long(name='id'),
      inherited?: {
        id?: long(name='id', description='id'),
        name?: string(name='name', example='codeup'),
        nameWithNamespace?: string(name='nameWithNamespace'),
        path?: string(name='path', example='codeup'),
        pathWithNamespace?: string(name='pathWithNamespace'),
        type?: string(name='type'),
        visibilityLevel?: string(name='visibilityLevel', example='0'),
      }(name='inherited'),
      name?: string(name='name', example='codeup'),
      state?: string(name='state', example='active'),
      username?: string(name='username', example='yunxiao'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListRepositoryMemberWithInheritedResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryMemberWithInheritedResponseBody(name='body'),
}

async function listRepositoryMemberWithInherited(request: ListRepositoryMemberWithInheritedRequest): ListRepositoryMemberWithInheritedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryMemberWithInherited', 'GET', '/repository/{repositoryId}/members/list', 'json', false, 'json', request);
}

model ListRepositoryTagsRequest {
  repositoryId: long(name='repositoryId', example='2709413', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='611b75680fc7bf0dbe1dce55', position='Query'),
  page?: long(name='page', example='2', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  search?: string(name='search', example='Demo', position='Query'),
  sort?: string(name='sort', example='updated_desc', position='Query'),
}

model ListRepositoryTagsResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: [ 
    {
      commit?: {
        authorEmail?: string(name='authorEmail', example='username@example.com'),
        authorName?: string(name='authorName'),
        authoredDate?: string(name='authoredDate', example='2022-03-18 10:00:00'),
        committedDate?: string(name='committedDate', example='2022-03-18 09:00:00'),
        committerEmail?: string(name='committerEmail', example='username@example.com'),
        committerName?: string(name='committerName'),
        createdAt?: string(name='createdAt', example='2022-03-18 10:00:00'),
        id?: string(name='id', example='de02b625ba8488f92eb204bcb3773a40c1b4ddac'),
        message?: string(name='message'),
        parentIds?: [ string ](name='parentIds'),
        shortId?: string(name='shortId', example='de02b625'),
        signature?: {
          gpgKeyId?: string(name='gpgKeyId', example='""'),
          verificationStatus?: string(name='verificationStatus', example='verified'),
        }(name='signature'),
        title?: string(name='title'),
      }(name='commit'),
      id?: string(name='id', example='9a494e7b88ca35cde00579af2df4ab46136c022e'),
      message?: string(name='message'),
      name?: string(name='name', example='tag v1.0'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='30'),
}

model ListRepositoryTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryTagsResponseBody(name='body'),
}

async function listRepositoryTags(request: ListRepositoryTagsRequest): ListRepositoryTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryTags', 'GET', '/repository/{repositoryId}/tag/list', 'json', false, 'json', request);
}

model ListRepositoryTreeRequest {
  repositoryId: long(name='repositoryId', example='2851516', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='624666bd54d036291ae13a36', position='Query'),
  path?: string(name='path', example='module', position='Query'),
  refName?: string(name='refName', example='master / tag1.0 / sjjfssa', position='Query'),
  type?: string(name='type', example='RECURSIVE', position='Query'),
}

model ListRepositoryTreeResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='6557983C-FB08-51A9-AC5A-A7A0D0950A07'),
  result?: [ 
    {
      id?: string(name='id', example='76c3f251f414ac31f2e01faf6f2008a9d756a437'),
      isLFS?: boolean(name='isLFS', example='false'),
      mode?: string(name='mode', example='100644'),
      name?: string(name='name', example='test-codeup'),
      path?: string(name='path', example='test-codeup'),
      type?: string(name='type', example='blob'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model ListRepositoryTreeResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryTreeResponseBody(name='body'),
}

async function listRepositoryTree(request: ListRepositoryTreeRequest): ListRepositoryTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryTree', 'GET', '/repository/{repositoryId}/files/tree', 'json', false, 'json', request);
}

model ListRepositoryWebhookRequest {
  repositoryId: long(name='repositoryId', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
  page?: long(name='page', example='1', minimum=0, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='pageSize', example='10', minimum=0, maximum=100, position='Query'),
}

model ListRepositoryWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F'),
  result?: [ 
    {
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      description?: string(name='description'),
      enableSslVerification?: boolean(name='enableSslVerification', example='false'),
      id?: long(name='id', example='16776'),
      lastTestResult?: string(name='lastTestResult'),
      mergeRequestsEvents?: boolean(name='mergeRequestsEvents', example='true'),
      noteEvents?: boolean(name='noteEvents', example='false'),
      projectId?: long(name='projectId'),
      pushEvents?: boolean(name='pushEvents', example='false'),
      secretToken?: string(name='secretToken', example='xxxx'),
      tagPushEvents?: boolean(name='tagPushEvents', example='false'),
      url?: string(name='url', example='https://xxxx'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='100'),
}

model ListRepositoryWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryWebhookResponseBody(name='body'),
}

async function listRepositoryWebhook(request: ListRepositoryWebhookRequest): ListRepositoryWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryWebhook', 'GET', '/repository/{repositoryId}/webhooks/list', 'json', false, 'json', request);
}

model ListResourceMembersRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  resourceType: string(name='resourceType', example='pipeline', position='Path'),
  resourceId?: long(name='resourceId', example='122', position='Path'),
}

model ListResourceMembersResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  resourceMembers?: [ 
    {
      accountId?: string(name='accountId', example='22212212'),
      roleName?: string(name='roleName', example='admin'),
      username?: string(name='username', example='张三'),
    }
  ](name='resourceMembers'),
  success?: boolean(name='success', example='true'),
}

model ListResourceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceMembersResponseBody(name='body'),
}

async function listResourceMembers(request: ListResourceMembersRequest): ListResourceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceMembers', 'GET', '/organization/{organizationId}/{resourceType}/{resourceId}/members', 'json', false, 'json', request);
}

model ListSearchCommitRequest {
  keyword: string(name='keyword', example='test', position='Body'),
  order?: string(name='order', example='default', position='Body'),
  page?: int32(name='page', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  repoPath?: {
    matchType?: string(name='matchType', example='term'),
    operatorType?: string(name='operatorType', example='equal'),
    value?: string(name='value', example='orgId/test-group/spring-boot-demo'),
  }(name='repoPath', position='Body'),
  scope?: string(name='scope', example='all', position='Body'),
  sort?: string(name='sort', example='desc', position='Body'),
  organizationId: string(name='organizationId', example='60d54f3daccf2bbd6659f3ad', position='Query'),
}

model ListSearchCommitResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: [ 
    {
      docId?: string(name='docId', example='60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb'),
      highlightTextMap?: {
        commitId?: string(name='commitId', example='df1b701cb0f3f7ca92320d49d31995821f2d045c'),
        commitMessage?: string(name='commitMessage'),
        organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
        title?: string(name='title'),
      }(name='highlightTextMap'),
      source?: {
        author?: {
          email?: string(name='email', example='username@example.com'),
          name?: string(name='name'),
        }(name='author'),
        authorTime?: string(name='authorTime', example='2022-11-11 11:11:11'),
        commitId?: string(name='commitId', example='a748f5ecb17a93900d4808944bfcc96dc158ee2d'),
        commitMessage?: string(name='commitMessage'),
        organizationId?: string(name='organizationId', example='61133b011bd96aa110f1b500'),
        repoPath?: string(name='repoPath', example='codeup/test-repo'),
        title?: string(name='title'),
      }(name='source'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='10'),
}

model ListSearchCommitResponse = {
  headers: map[string]string(name='headers'),
  body: ListSearchCommitResponseBody(name='body'),
}

async function listSearchCommit(request: ListSearchCommitRequest): ListSearchCommitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSearchCommit', 'POST', '/search/commit', 'json', false, 'json', request);
}

model ListSearchRepositoryRequest {
  aliyunPk?: string(name='aliyunPk', example='1840004904455497', position='Body'),
  keyword: string(name='keyword', example='test', position='Body'),
  order?: string(name='order', example='default', position='Body'),
  page?: int32(name='page', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  repoPath?: {
    matchType?: string(name='matchType', example='term'),
    operatorType?: string(name='operatorType', example='equal'),
    value?: string(name='value', example='orgId/test-group/spring-boot-demo'),
  }(name='repoPath', position='Body'),
  scope?: string(name='scope', example='all', position='Body'),
  sort?: string(name='sort', example='desc', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', example='0', position='Body'),
  organizationId: string(name='organizationId', example='61e54b0e0bb300d827e1ae27', position='Query'),
}

model ListSearchRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: [ 
    {
      docId?: string(name='docId', example='60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb'),
      highlightTextMap?: {
        creatorUserId?: string(name='creatorUserId', example='xxx'),
        description?: string(name='description'),
        organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
        readMe?: string(name='readMe', example='xx'),
        repoNameWithNamespace?: string(name='repoNameWithNamespace', example='codeup/test-repo'),
        repoPath?: string(name='repoPath', example='codeup/test-repo'),
      }(name='highlightTextMap'),
      source?: {
        createTime?: string(name='createTime', example='2022-10-10 10:10:10'),
        description?: string(name='description'),
        lastActivityTime?: string(name='lastActivityTime', example='2022-11-11 11:11:11'),
        organizationId?: string(name='organizationId', example='62a94a8611fc0f0c9e2a7bc1'),
        readMe?: string(name='readMe', example='xxx'),
        repoName?: string(name='repoName', example='test-repo'),
        repoPath?: string(name='repoPath', example='codeup/test-repo'),
        visibilityLevel?: int32(name='visibilityLevel', example='0'),
      }(name='source'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='30'),
}

model ListSearchRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListSearchRepositoryResponseBody(name='body'),
}

async function listSearchRepository(request: ListSearchRepositoryRequest): ListSearchRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSearchRepository', 'POST', '/search/repo', 'json', false, 'json', request);
}

model ListSearchSourceCodeRequest {
  filePath?: {
    matchType?: string(name='matchType', example='term'),
    operatorType?: string(name='operatorType', example='equal'),
    value?: string(name='value', example='orgId/test-group/spring-boot-demo/test.java'),
  }(name='filePath', position='Body'),
  isCodeBlock?: boolean(name='isCodeBlock', example='false', position='Body'),
  keyword: string(name='keyword', example='test', position='Body'),
  language?: string(name='language', example='Java', position='Body'),
  order?: string(name='order', example='default', position='Body'),
  page?: int32(name='page', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='20', position='Body'),
  repoPath?: {
    matchType?: string(name='matchType', example='term'),
    operatorType?: string(name='operatorType', example='equal'),
    value?: string(name='value', example='xxx'),
  }(name='repoPath', position='Body'),
  scope?: string(name='scope', example='all', position='Body'),
  sort?: string(name='sort', example='desc', position='Body'),
  organizationId: string(name='organizationId', example='66c0c9fffeb86b450c199fcd', position='Query'),
}

model ListSearchSourceCodeResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: [ 
    {
      docId?: string(name='docId', example='60d54f3daccf2bbd6659f3ad/gitlabhq/master/spec/frontend/snippets/test_utils.js'),
      highlightTextMap?: {
        clob?: string(name='clob', example='xxx'),
        fileName?: string(name='fileName', example='test.java'),
        language?: string(name='language', example='java'),
        organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
      }(name='highlightTextMap'),
      source?: {
        branch?: string(name='branch', example='master'),
        checkinDate?: string(name='checkinDate', example='2022-10-10 10:00:00'),
        fileName?: string(name='fileName', example='test_utils.js'),
        filePath?: string(name='filePath', example='spec/frontend/snippets/test_utils.js'),
        language?: string(name='language', example='JavaScript'),
        organizationId?: string(name='organizationId', example='60de7a6852743a5162b5f957'),
        repoPath?: string(name='repoPath', example='codeup/test-repo'),
      }(name='source'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='2'),
}

model ListSearchSourceCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ListSearchSourceCodeResponseBody(name='body'),
}

async function listSearchSourceCode(request: ListSearchSourceCodeRequest): ListSearchSourceCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSearchSourceCode', 'POST', '/search/code', 'json', false, 'json', request);
}

model ListServiceAuthsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  serviceAuthType: string(name='serviceAuthType', example='RAM', position='Query'),
}

model ListServiceAuthsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  serviceAuths?: [ 
    {
      id?: long(name='id', example='123'),
      ownerName?: string(name='ownerName', example='张三'),
      ownerStaffId?: string(name='ownerStaffId', example='123456789'),
      type?: string(name='type', example='Codeup'),
    }
  ](name='serviceAuths'),
  success?: boolean(name='success', example='true'),
}

model ListServiceAuthsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceAuthsResponseBody(name='body'),
}

async function listServiceAuths(request: ListServiceAuthsRequest): ListServiceAuthsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceAuths', 'GET', '/organization/{organizationId}/serviceAuths', 'json', false, 'json', request);
}

model ListServiceConnectionsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  sericeConnectionType: string(name='sericeConnectionType', example='codeup', position='Query'),
}

model ListServiceConnectionsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  serviceConnections?: [ 
    {
      createTime?: long(name='createTime', example='1586863220000'),
      id?: long(name='id', example='123'),
      name?: string(name='name', example='张三的oss服务连接'),
      ownerAccountId?: long(name='ownerAccountId', example='1212123212121212'),
      type?: string(name='type', example='oss'),
    }
  ](name='serviceConnections'),
  success?: boolean(name='success', example='true'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceConnections', 'GET', '/organization/{organizationId}/serviceConnections', 'json', false, 'json', request);
}

model ListServiceCredentialsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  serviceCredentialType: string(name='serviceCredentialType', example='username_password', position='Query'),
}

model ListServiceCredentialsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  serviceCredentials?: [ 
    {
      id?: long(name='id', example='123'),
      ownerName?: string(name='ownerName', example='张三'),
      ownerStaffId?: string(name='ownerStaffId', example='123456789'),
      type?: string(name='type', example='Codeup'),
    }
  ](name='serviceCredentials'),
  success?: boolean(name='success', example='true'),
}

model ListServiceCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceCredentialsResponseBody(name='body'),
}

async function listServiceCredentials(request: ListServiceCredentialsRequest): ListServiceCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceCredentials', 'GET', '/organization/{organizationId}/serviceCredentials', 'json', false, 'json', request);
}

model ListSprintsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  maxResults?: long(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='""', position='Query'),
  spaceIdentifier: string(name='spaceIdentifier', example='e8bxxxxxxxxxxxxxxxx23', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
}

model ListSprintsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  sprints?: [ 
    {
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      description?: string(name='description', example='xxx'),
      endDate?: long(name='endDate', example='1623916393000'),
      gmtCreate?: long(name='gmtCreate', example='1623916393000'),
      gmtModified?: long(name='gmtModified', example='1623916393000'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
      name?: string(name='name', example='demo示例项目'),
      scope?: string(name='scope', example='public'),
      spaceIdentifier?: string(name='spaceIdentifier', example='5e70xxxxxxcd000xxxxe96'),
      startDate?: long(name='startDate', example='1638403200000'),
      status?: string(name='status', example='TODO'),
    }
  ](name='sprints'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='10'),
}

model ListSprintsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSprintsResponseBody(name='body'),
}

async function listSprints(request: ListSprintsRequest): ListSprintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSprints', 'GET', '/organization/{organizationId}/sprints/list', 'json', false, 'json', request);
}

model ListTestCaseFieldsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', example='e8bxxxxxxxxxxxxxxxx23', position='Query'),
}

model ListTestCaseFieldsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  fields?: [ 
    {
      className?: string(name='className', example='例：date'),
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      defaultValue?: string(name='defaultValue', example='123'),
      description?: string(name='description', example='字段的具体信息'),
      format?: string(name='format', example='list'),
      gmtCreate?: long(name='gmtCreate', example='1623916393000'),
      gmtModified?: long(name='gmtModified', example='1623916393000'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      isRequired?: boolean(name='isRequired', example='false'),
      isShowWhenCreate?: boolean(name='isShowWhenCreate', example='false'),
      isSystemRequired?: boolean(name='isSystemRequired', example='false'),
      linkWithService?: string(name='linkWithService', example='null'),
      modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
      name?: string(name='name', example='负责人'),
      options?: [ 
        {
          displayValue?: string(name='displayValue', example='重复的缺陷'),
          fieldIdentifier?: string(name='fieldIdentifier', example='e8bxxxxxxxxxxxxxxxx23'),
          identifier?: string(name='identifier', example='重复的缺陷'),
          level?: long(name='level', example='1'),
          position?: long(name='position', example='null'),
          value?: string(name='value', example='重复的缺陷'),
          valueEn?: string(name='valueEn', example='null'),
        }
      ](name='options'),
      resourceType?: string(name='resourceType', example='例：Workitem'),
      type?: string(name='type', example='NativeField'),
    }
  ](name='fields'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model ListTestCaseFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTestCaseFieldsResponseBody(name='body'),
}

async function listTestCaseFields(request: ListTestCaseFieldsRequest): ListTestCaseFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTestCaseFields', 'GET', '/organization/{organizationId}/testhub/testcase/fields', 'json', false, 'json', request);
}

model ListUserKeysRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  orderBy?: string(name='orderBy', example='created_at', position='Query'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  sort?: string(name='sort', example='desc', position='Query'),
}

model ListUserKeysResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='Openapi.RequestError'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  result?: [ 
    {
      createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
      expireTime?: string(name='expireTime', example='2022-03-18 14:24:54'),
      fingerPrint?: string(name='fingerPrint', example='xxx'),
      id?: long(name='id', example='5240'),
      keyScope?: string(name='keyScope', example='ALL'),
      lastUsedTime?: string(name='lastUsedTime', example='2022-03-18 14:24:54'),
      publicKey?: string(name='publicKey', example='xxx'),
      tittle?: string(name='tittle'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
}

model ListUserKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserKeysResponseBody(name='body'),
}

async function listUserKeys(request: ListUserKeysRequest): ListUserKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserKeys', 'GET', '/api/v3/user/keys', 'json', false, 'json', request);
}

model ListUserResourcesRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
  page?: long(name='page', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  userIds?: string(name='userIds', example='1,2,3', position='Query'),
}

model ListUserResourcesResponseBody = {
  errorCode?: string(name='errorCode', example='success'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='A35869D5-BB29-5F84-A4DD-B09985EA2AFA'),
  result?: [ 
    {
      groupInfos?: [ 
        {
          groupInfo?: {
            createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
            description?: string(name='description', example='test-group'),
            id?: long(name='id', example='35268'),
            name?: string(name='name', example='test-group'),
            nameWithNamespace?: string(name='nameWithNamespace'),
            ownerId?: long(name='ownerId', example='1234'),
            parentId?: long(name='parentId', example='1183319'),
            path?: string(name='path', example='test-group'),
            pathWithNamespace?: string(name='pathWithNamespace', example='test-org/test-group'),
            updatedAt?: string(name='updatedAt', example='2022-01-14T21:08:26+08:00'),
            visibilityLevel?: int32(name='visibilityLevel', example='0'),
          }(name='groupInfo'),
          groupRole?: {
            accessLevel?: int32(name='accessLevel', example='40'),
            cnRoleName?: string(name='cnRoleName'),
            enRoleName?: string(name='enRoleName', example='Admin'),
            sourceId?: long(name='sourceId', example='35268'),
            sourceType?: string(name='sourceType', example='Namespace'),
          }(name='groupRole'),
        }
      ](name='groupInfos'),
      repositoryInfos?: [ 
        {
          repositoryInfo?: {
            accessLevel?: int32(name='accessLevel', example='40'),
            archived?: boolean(name='archived', example='false'),
            createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
            creatorId?: long(name='creatorId', example='12679'),
            description?: string(name='description'),
            encrypted?: boolean(name='encrypted', example='false'),
            id?: long(name='id', example='37229'),
            lastActivityAt?: string(name='lastActivityAt', example='2022-01-14T21:08:26+08:00'),
            name?: string(name='name', example='test-repo'),
            nameWithNamespace?: string(name='nameWithNamespace'),
            namespaceId?: long(name='namespaceId', example='600002'),
            path?: string(name='path', example='test-repo'),
            pathWithNamespace?: string(name='pathWithNamespace', example='test-org/test-group/test-repo'),
            updatedAt?: string(name='updatedAt', example='2022-01-14T21:08:26+08:00'),
            visibilityLevel?: int32(name='visibilityLevel', example='0'),
          }(name='repositoryInfo'),
          repositoryRole?: {
            accessLevel?: int32(name='accessLevel', example='40'),
            cnRoleName?: string(name='cnRoleName'),
            enRoleName?: string(name='enRoleName', example='Admin'),
            sourceId?: long(name='sourceId', example='37229'),
            sourceType?: string(name='sourceType', example='Project'),
          }(name='repositoryRole'),
        }
      ](name='repositoryInfos'),
      userInfo?: {
        avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
        email?: string(name='email', example='username@example.com'),
        id?: long(name='id', example='19230'),
        name?: string(name='name', example='test-codeup'),
        state?: string(name='state', example='active'),
        username?: string(name='username', example='test-codeup'),
      }(name='userInfo'),
    }
  ](name='result'),
  success?: boolean(name='success', example='true'),
  total?: long(name='total', example='2'),
}

model ListUserResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserResourcesResponseBody(name='body'),
}

async function listUserResources(request: ListUserResourcesRequest): ListUserResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserResources', 'GET', '/api/v4/user/vision/user_resources', 'json', false, 'json', request);
}

model ListVariableGroupsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='aaaaaa', position='Query'),
  pageOrder?: string(name='pageOrder', example='DESC', position='Query'),
  pageSort?: string(name='pageSort', example='ID', position='Query'),
}

model ListVariableGroupsResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  nextToken?: string(name='nextToken', example='assassa'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='30'),
  variableGroups?: [ 
    {
      createTime?: long(name='createTime', example='1586863220000'),
      creatorAccountId?: string(name='creatorAccountId', example='13232343434343'),
      description?: string(name='description', example='变量组'),
      id?: long(name='id', example='12234'),
      modifierAccountId?: string(name='modifierAccountId', example='13232343434343'),
      name?: string(name='name', example='变量组'),
      relatedPipelines?: [ 
        {
          id?: long(name='id', example='1234'),
          name?: string(name='name', example='流水线'),
        }
      ](name='relatedPipelines'),
      updateTime?: long(name='updateTime', example='1586863220000'),
      variables?: [ 
        {
          isEncrypted?: boolean(name='isEncrypted', example='true'),
          name?: string(name='name', example='name1'),
          value?: string(name='value', example='value1'),
        }
      ](name='variables'),
    }
  ](name='variableGroups'),
}

model ListVariableGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVariableGroupsResponseBody(name='body'),
}

async function listVariableGroups(request: ListVariableGroupsRequest): ListVariableGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVariableGroups', 'GET', '/organization/{organizationId}/variableGroups', 'json', false, 'json', request);
}

model ListWorkItemAllFieldsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', example='e8bxxxxxxxxxxxxxxxx23', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
  workitemTypeIdentifier: string(name='workitemTypeIdentifier', example='dfexxxxxf4fee18xxxxx36', position='Query'),
}

model ListWorkItemAllFieldsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  fields?: [ 
    {
      className?: string(name='className', example='例：date'),
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      defaultValue?: string(name='defaultValue', example='123'),
      description?: string(name='description', example='字段的具体信息'),
      format?: string(name='format', example='list'),
      gmtCreate?: long(name='gmtCreate', example='1623916393000'),
      gmtModified?: long(name='gmtModified', example='1623916393000'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      isRequired?: boolean(name='isRequired', example='false'),
      isShowWhenCreate?: boolean(name='isShowWhenCreate', example='false'),
      isSystemRequired?: boolean(name='isSystemRequired', example='false'),
      linkWithService?: string(name='linkWithService', example='null'),
      modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
      name?: string(name='name', example='负责人'),
      options?: [ 
        {
          displayValue?: string(name='displayValue', example='重复的缺陷'),
          fieldIdentifier?: string(name='fieldIdentifier', example='e8bxxxxxxxxxxxxxxxx23'),
          identifier?: string(name='identifier', example='重复的缺陷'),
          level?: long(name='level', example='1'),
          position?: long(name='position', example='1'),
          value?: string(name='value', example='重复的缺陷'),
          valueEn?: string(name='valueEn', example='null'),
        }
      ](name='options'),
      resourceType?: string(name='resourceType', example='例：Workitem'),
      type?: string(name='type', example='NativeField'),
    }
  ](name='fields'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model ListWorkItemAllFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkItemAllFieldsResponseBody(name='body'),
}

async function listWorkItemAllFields(request: ListWorkItemAllFieldsRequest): ListWorkItemAllFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkItemAllFields', 'GET', '/organization/{organizationId}/workitems/fields/listAll', 'json', false, 'json', request);
}

model ListWorkItemWorkFlowStatusRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', example='例：5e70xxxxxxcd000xxxxe96', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
  workitemCategoryIdentifier: string(name='workitemCategoryIdentifier', example='Req', position='Query'),
  workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='例：5e7xxxxb3cd3711dd6xxx2c', position='Query'),
}

model ListWorkItemWorkFlowStatusResponseBody = {
  errorCode?: string(name='errorCode', example='例：Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='errormessage'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  statuses?: [ 
    {
      creator?: string(name='creator', example='用户阿里云pk，例如19xxxx31947xxxx'),
      description?: string(name='description', example='该状态的具体信息'),
      gmtCreate?: long(name='gmtCreate', example='1620455467000'),
      gmtModified?: long(name='gmtModified', example='1641870287000'),
      identifier?: string(name='identifier', example='dfexxxxxf4fee18xxxxx36'),
      modifier?: string(name='modifier', example='用户阿里云pk，例如19xxxx31947xxxx'),
      name?: string(name='name', example='例：待处理'),
      resourceType?: string(name='resourceType', example='Workitem'),
      source?: string(name='source', example='system'),
      workflowStageIdentifier?: string(name='workflowStageIdentifier', example='例如：1'),
      workflowStageName?: string(name='workflowStageName', example='例：确认阶段'),
    }
  ](name='statuses'),
  success?: boolean(name='success', example='true或者false'),
}

model ListWorkItemWorkFlowStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkItemWorkFlowStatusResponseBody(name='body'),
}

async function listWorkItemWorkFlowStatus(request: ListWorkItemWorkFlowStatusRequest): ListWorkItemWorkFlowStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkItemWorkFlowStatus', 'GET', '/organization/{organizationId}/workitems/workflow/listWorkflowStatus', 'json', false, 'json', request);
}

model ListWorkitemEstimateRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId: string(name='workitemId', example='5daa9a15c7fd55523996......', position='Path'),
}

model ListWorkitemEstimateResponseBody = {
  code?: long(name='code', example='200'),
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitemTimeEstimate?: [ 
    {
      description?: string(name='description', example='开发代码等'),
      gmtCreate?: long(name='gmtCreate', example='1653235200000'),
      gmtEnd?: long(name='gmtEnd', example='1653235200000'),
      gmtModified?: long(name='gmtModified', example='1653235200000'),
      gmtStart?: long(name='gmtStart', example='1653235200000'),
      identifier?: string(name='identifier', example='a4ac3a81e90217db32b7......'),
      recordUser?: {
        identifier?: string(name='identifier', example='132xxxx123'),
        name?: string(name='name'),
      }(name='recordUser'),
      spentTime?: float(name='spentTime', example='8'),
      type?: string(name='type', example='研发'),
      workitemIdentifier?: string(name='workitemIdentifier', example='5daa9a15c7fd55523996......'),
    }
  ](name='workitemTimeEstimate'),
}

model ListWorkitemEstimateResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkitemEstimateResponseBody(name='body'),
}

async function listWorkitemEstimate(request: ListWorkitemEstimateRequest): ListWorkitemEstimateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkitemEstimate', 'GET', '/organization/{organizationId}/workitems/{workitemId}/estimate/list', 'json', false, 'json', request);
}

model ListWorkitemTimeRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemId: string(name='workitemId', example='5daa9a15c7fd55523996......', position='Path'),
}

model ListWorkitemTimeResponseBody = {
  code?: long(name='code', example='200'),
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitemTime?: [ 
    {
      actualTime?: float(name='actualTime', example='1'),
      description?: string(name='description', example='开发代码等'),
      gmtCreate?: long(name='gmtCreate', example='1653235200000'),
      gmtEnd?: long(name='gmtEnd', example='1653235200000'),
      gmtModified?: long(name='gmtModified', example='1653235200000'),
      gmtStart?: long(name='gmtStart', example='1653235200000'),
      identifier?: string(name='identifier', example='a4ac3a81e90217db32b7......'),
      recordUser?: string(name='recordUser', example='1967043931......'),
      type?: string(name='type', example='研发'),
      workitemIdentifier?: string(name='workitemIdentifier', example='5daa9a15c7fd55523996......'),
    }
  ](name='workitemTime'),
}

model ListWorkitemTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkitemTimeResponseBody(name='body'),
}

async function listWorkitemTime(request: ListWorkitemTimeRequest): ListWorkitemTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkitemTime', 'GET', '/organization/{organizationId}/workitems/{workitemId}/time/list', 'json', false, 'json', request);
}

model ListWorkitemsRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  category: string(name='category', example='Req', position='Query'),
  conditions?: string(name='conditions', example='{"conditionGroups":[]}', position='Query'),
  extraConditions?: string(name='extraConditions', example='{"conditionGroups":[]}', position='Query'),
  groupCondition?: string(name='groupCondition', example='{"fieldIdentifier":"tag","className":"tag","format":"multiList","value":["c76e0e4bf64801cfad73......"],"operator":"EQUALS"}', position='Query'),
  maxResults?: string(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='""', position='Query'),
  orderBy?: string(name='orderBy', example='{"fieldIdentifier":"status","format":"list","order":"desc","className":"status"}', position='Query'),
  searchType?: string(name='searchType', example='LIST', position='Query'),
  spaceIdentifier: string(name='spaceIdentifier', example='8fb83debd69a6c7c6626......', position='Query'),
  spaceType: string(name='spaceType', example='Project', position='Query'),
}

model ListWorkitemsResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  totalCount?: long(name='totalCount', example='10'),
  workitems?: [ 
    {
      assignedTo?: string(name='assignedTo', example='19xx7043xxxxxxx914'),
      categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
      creator?: string(name='creator', example='19xx7043xxxxxxx914'),
      document?: string(name='document', example='html格式'),
      gmtCreate?: long(name='gmtCreate', example='1640850318000'),
      gmtModified?: long(name='gmtModified', example='1640850318000'),
      identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
      logicalStatus?: string(name='logicalStatus', example='NORMAL'),
      modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
      parentIdentifier?: string(name='parentIdentifier', example='e8bxxxxxxxxxxxxxxxx24'),
      serialNumber?: string(name='serialNumber', example='ABCD-1'),
      spaceIdentifier?: string(name='spaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
      spaceName?: string(name='spaceName', example='需求项目'),
      spaceType?: string(name='spaceType', example='Project'),
      sprintIdentifier?: string(name='sprintIdentifier', example='75528f17703e92e5a568......'),
      status?: string(name='status', example='待处理'),
      statusIdentifier?: string(name='statusIdentifier', example='100005'),
      statusStageIdentifier?: string(name='statusStageIdentifier', example='1'),
      subject?: string(name='subject', example='测试工作项'),
      updateStatusAt?: long(name='updateStatusAt', example='1640850328000'),
      workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uxxxxxxre573f5xxxxxx0'),
    }
  ](name='workitems'),
}

model ListWorkitemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkitemsResponseBody(name='body'),
}

async function listWorkitems(request: ListWorkitemsRequest): ListWorkitemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkitems', 'GET', '/organization/{organizationId}/listWorkitems', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='beb1eff55bf03a13cf321a395dxxxxxx', position='Query'),
  statusList?: [ string ](name='statusList', shrink='simple', position='Query'),
  workspaceTemplateList?: [ string ](name='workspaceTemplateList', shrink='simple', position='Query'),
}

model ListWorkspacesResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  maxResults?: int32(name='maxResults', example='10'),
  nextToken: string(name='nextToken', example='beb1eff55bf03a13cf321a395dxxxxxx'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: boolean(name='success', example='true'),
  totalCount?: int32(name='totalCount', example='100'),
  workspaces?: [ 
    {
      codeUrl?: string(name='codeUrl', example='https://codeup.aliyun.com/demo/group/Codeup-Demo.git'),
      codeVersion?: string(name='codeVersion', example='master'),
      createTime?: string(name='createTime', example='1628564442000'),
      id?: string(name='id', example='6ed82817-ab75-4563-865d-81e60dxxxxxx'),
      name?: string(name='name', example='Demo'),
      spec?: string(name='spec', example='2::4::60'),
      status?: string(name='status', example='SUCCESS'),
      template?: string(name='template', example='all-in-one'),
      userId?: string(name='userId', example='1470227819xxxxxx'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/api/workspaces', 'json', false, 'json', request);
}

model LogPipelineJobRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='12222', position='Path'),
  jobId: long(name='jobId', example='12', position='Path'),
  pipelineRunId?: long(name='pipelineRunId', example='12', position='Path'),
}

model LogPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  log?: {
    content?: string(name='content', example='success'),
    more?: boolean(name='more', example='true'),
  }(name='log'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model LogPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: LogPipelineJobRunResponseBody(name='body'),
}

async function logPipelineJobRun(request: LogPipelineJobRunRequest): LogPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogPipelineJobRun', 'GET', '/organization/{organizationId}/pipeline/{pipelineId}/pipelineRun/{pipelineRunId}/job/{jobId}/logs', 'json', false, 'json', request);
}

model LogVMDeployMachineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1111', position='Path'),
  deployOrderId: long(name='deployOrderId', example='1111', position='Path'),
  machineSn: string(name='machineSn', example='sasassasa', position='Path'),
}

model LogVMDeployMachineResponseBody = {
  deployMachineLog?: {
    aliyunRegion?: string(name='aliyunRegion', example='cn-hangzhou'),
    deployBeginTime?: long(name='deployBeginTime', example='11111111111'),
    deployEndTime?: long(name='deployEndTime', example='12222222'),
    deployLog?: string(name='deployLog', example='success'),
    deployLogPath?: string(name='deployLogPath', example='/tmp/log'),
  }(name='deployMachineLog'),
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model LogVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: LogVMDeployMachineResponseBody(name='body'),
}

async function logVMDeployMachine(request: LogVMDeployMachineRequest): LogVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogVMDeployMachine', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/log', 'json', false, 'json', request);
}

model PassPipelineValidateRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='11222', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='1111', position='Path'),
  jobId: string(name='jobId', example='111', position='Path'),
}

model PassPipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model PassPipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: PassPipelineValidateResponseBody(name='body'),
}

async function passPipelineValidate(request: PassPipelineValidateRequest): PassPipelineValidateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PassPipelineValidate', 'POST', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/pass', 'json', false, 'json', request);
}

model RefusePipelineValidateRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', example='流水线ID，可在流水线链接中获取，如https://flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='流水线运行实例id', position='Path'),
  jobId: string(name='jobId', example='1111', position='Path'),
}

model RefusePipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model RefusePipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: RefusePipelineValidateResponseBody(name='body'),
}

async function refusePipelineValidate(request: RefusePipelineValidateRequest): RefusePipelineValidateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefusePipelineValidate', 'POST', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/refuse', 'json', false, 'json', request);
}

model ReleaseWorkspaceRequest {
  workspaceId: string(name='workspaceId', example='6ed82817-ab75-4563-865d-81e60dxxxxxx', position='Path'),
}

model ReleaseWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', example='Forbidden.AccessDenied'),
  errorMessage?: string(name='errorMessage', example='The user is not authorized to perform the operation.'),
  requestId?: string(name='requestId', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: boolean(name='success', example='true'),
}

model ReleaseWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseWorkspaceResponseBody(name='body'),
}

async function releaseWorkspace(request: ReleaseWorkspaceRequest): ReleaseWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseWorkspace', 'DELETE', '/api/workspaces/{workspaceId}/release', 'json', false, 'json', request);
}

model ResetSshKeyRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
}

model ResetSshKeyResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  sshKey?: {
    id?: long(name='id', example='1212'),
    publicKey?: string(name='publicKey', example='saaaaaaaaaaaaaaaa'),
  }(name='sshKey'),
  success?: boolean(name='success', example='true'),
}

model ResetSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSshKeyResponseBody(name='body'),
}

async function resetSshKey(request: ResetSshKeyRequest): ResetSshKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResetSshKey', 'PUT', '/organization/{organizationId}/sshKey', 'json', false, 'json', request);
}

model ResumeVMDeployOrderRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='111111', position='Path'),
  deployOrderId: long(name='deployOrderId', example='11111', position='Path'),
}

model ResumeVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model ResumeVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeVMDeployOrderResponseBody(name='body'),
}

async function resumeVMDeployOrder(request: ResumeVMDeployOrderRequest): ResumeVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeVMDeployOrder', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/resume', 'json', false, 'json', request);
}

model RetryPipelineJobRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='1', position='Path'),
  jobId: long(name='jobId', example='1', position='Path'),
}

model RetryPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model RetryPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: RetryPipelineJobRunResponseBody(name='body'),
}

async function retryPipelineJobRun(request: RetryPipelineJobRunRequest): RetryPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}', 'json', false, 'json', request);
}

model RetryVMDeployMachineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1111', position='Path'),
  deployOrderId: long(name='deployOrderId', example='11111111', position='Path'),
  machineSn: string(name='machineSn', example='assssssss', position='Path'),
}

model RetryVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model RetryVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: RetryVMDeployMachineResponseBody(name='body'),
}

async function retryVMDeployMachine(request: RetryVMDeployMachineRequest): RetryVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryVMDeployMachine', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/retry', 'json', false, 'json', request);
}

model SkipPipelineJobRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='1', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='1', position='Path'),
  jobId: long(name='jobId', example='1', position='Path'),
}

model SkipPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model SkipPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPipelineJobRunResponseBody(name='body'),
}

async function skipPipelineJobRun(request: SkipPipelineJobRunRequest): SkipPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SkipPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/skip', 'json', false, 'json', request);
}

model SkipVMDeployMachineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='111111111', position='Path'),
  deployOrderId: long(name='deployOrderId', example='111111111', position='Path'),
  machineSn: string(name='machineSn', example='asssssssxsx', position='Path'),
}

model SkipVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model SkipVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: SkipVMDeployMachineResponseBody(name='body'),
}

async function skipVMDeployMachine(request: SkipVMDeployMachineRequest): SkipVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SkipVMDeployMachine', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/skip', 'json', false, 'json', request);
}

model StartPipelineRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='123', position='Path'),
  params?: string(name='params', example='{     "branchModeBranchs":[         "branch1",         "branch2"     ],     "envs":{         "k1":"v1",         "k2":"v2",         "k3":"v3"     },     "runningBranchs":{         "https://codeup.aliyun.com/60c1abb32c5969c370c5fcd0/Codeup-Demo.git":"master1"     },     "runningTags":{         "https://codeup.aliyun.com/60c1abb32c5969c370c5fcd0/Codeup-Demo.git":"1.0"     } }', position='Body'),
}

model StartPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  pipelineRunId?: long(name='pipelineRunId', example='1'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(request: StartPipelineRunRequest): StartPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipelineRun', 'POST', '/organizations/{organizationId}/pipelines/{pipelineId}/run', 'json', true, 'form', request);
}

model StopPipelineJobRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='123', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='3', position='Path'),
  jobId: long(name='jobId', example='2324334', position='Path'),
}

model StopPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='"\\"'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model StopPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineJobRunResponseBody(name='body'),
}

async function stopPipelineJobRun(request: StopPipelineJobRunRequest): StopPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/stop', 'json', false, 'json', request);
}

model StopPipelineRunRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='12', position='Path'),
  pipelineRunId: long(name='pipelineRunId', example='223', position='Path'),
}

model StopPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model StopPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineRunResponseBody(name='body'),
}

async function stopPipelineRun(request: StopPipelineRunRequest): StopPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopPipelineRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/stop', 'json', false, 'json', request);
}

model StopVMDeployOrderRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId: long(name='pipelineId', example='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', example='1111', position='Path'),
}

model StopVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model StopVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: StopVMDeployOrderResponseBody(name='body'),
}

async function stopVMDeployOrder(request: StopVMDeployOrderRequest): StopVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopVMDeployOrder', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/stop', 'json', false, 'json', request);
}

model TransferRepositoryRequest {
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  groupId: string(name='groupId', position='Query'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
  repositoryId: string(name='repositoryId', position='Query'),
}

model TransferRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='30'),
    archived?: boolean(name='archived', example='false'),
    createdAt?: string(name='createdAt', example='2022-01-14T21:08:26+08:00'),
    creatorId?: long(name='creatorId', example='19238'),
    demoProject?: boolean(name='demoProject', example='false'),
    description?: string(name='description'),
    encrypted?: boolean(name='encrypted', example='false'),
    id?: long(name='id', example='19285'),
    lastActivityAt?: string(name='lastActivityAt', example='2022-01-14T21:08:26+08:00'),
    name?: string(name='name', example='test-repo'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    namespaceId?: long(name='namespaceId', example='100003'),
    path?: string(name='path', example='test-repo'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-create-codeup'),
    starCount?: long(name='starCount', example='0'),
    starred?: boolean(name='starred', example='true'),
    updatedAt?: string(name='updatedAt', example='2022-01-14T21:08:26+08:00'),
    visibilityLevel?: int32(name='visibilityLevel', example='0'),
    webUrl?: string(name='webUrl', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model TransferRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: TransferRepositoryResponseBody(name='body'),
}

async function transferRepository(request: TransferRepositoryRequest): TransferRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TransferRepository', 'POST', '/api/v4/projects/repository/transfer', 'json', false, 'json', request);
}

model TriggerRepositoryMirrorSyncRequest {
  repositoryId: long(name='repositoryId', example='100', minimum=1, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  account?: string(name='account', example='test-account', position='Query'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
  token?: string(name='token', example='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', position='Query'),
}

model TriggerRepositoryMirrorSyncResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_ILLEGAL_ARGUMENT_ERROR'),
  errorMessage?: string(name='errorMessage', example='企业不存在'),
  requestId?: string(name='requestId', example='37294673-00CA-5B8B-914F-A8B35511E90A'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model TriggerRepositoryMirrorSyncResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerRepositoryMirrorSyncResponseBody(name='body'),
}

async function triggerRepositoryMirrorSync(request: TriggerRepositoryMirrorSyncRequest): TriggerRepositoryMirrorSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TriggerRepositoryMirrorSync', 'POST', '/repository/{repositoryId}/mirror', 'json', false, 'json', request);
}

model UpdateFileRequest {
  repositoryId: string(name='repositoryId', example='2813489', position='Path'),
  accessToken?: string(name='accessToken', example='0cf2c8458ac44d9481aab2dd6ec10596v3', position='Query'),
  branchName: string(name='branchName', example='master', position='Body'),
  commitMessage: string(name='commitMessage', position='Body'),
  content: string(name='content', position='Body'),
  encoding?: string(name='encoding', example='text', position='Body'),
  newPath: string(name='newPath', example='src/main/update.txt', position='Body'),
  oldPath: string(name='oldPath', example='src/main/update.txt', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='C2F153F6-BB43-50C4-9F4F-40593203E19A'),
  result?: {
    branchName?: string(name='branchName', example='master'),
    filePath?: string(name='filePath', example='src/main/update.txt'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFileResponseBody(name='body'),
}

async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFile', 'PUT', '/repository/{repositoryId}/files/update', 'json', false, 'json', request);
}

model UpdateFlowTagRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='1111', position='Path'),
  color: string(name='color', example='#1F9AEF', position='Query'),
  flowTagGroupId: long(name='flowTagGroupId', example='11', position='Query'),
  name: string(name='name', maxLength=20, position='Query'),
}

model UpdateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowTagResponseBody(name='body'),
}

async function updateFlowTag(request: UpdateFlowTagRequest): UpdateFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFlowTag', 'PUT', '/organization/{organizationId}/flow/tags/{id}', 'json', false, 'json', request);
}

model UpdateFlowTagGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: string(name='id', example='111', position='Path'),
  name: string(name='name', maxLength=20, position='Query'),
}

model UpdateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowTagGroupResponseBody(name='body'),
}

async function updateFlowTagGroup(request: UpdateFlowTagGroupRequest): UpdateFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFlowTagGroup', 'PUT', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  accessToken?: string(name='accessToken', example='f0b1e61dxxxxxxx975a93f9129d2513', position='Query'),
  avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100', position='Body'),
  description?: string(name='description', position='Body'),
  name: string(name='name', example='codeup_group', position='Body'),
  path: string(name='path', example='codeup_group', position='Body'),
  pathWithNamespace: string(name='pathWithNamespace', example='org/group/subgroup/here', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', example='10', position='Body'),
  organizationId: string(name='organizationId', example='1e9903d8b3f1xxxxxf9286ef5', position='Query'),
}

model UpdateGroupResponseBody = {
  errorCode?: string(name='errorCode', example='success'),
  errorMessage?: string(name='errorMessage', example='InvalidParam.NoPermission'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100'),
    description?: string(name='description'),
    id?: long(name='id', example='30815'),
    name?: string(name='name', example='codeup'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    ownerId?: long(name='ownerId', example='19230'),
    parentId?: long(name='parentId', example='26842'),
    path?: string(name='path', example='test-codeup'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org/test-codeup'),
    type?: string(name='type', example='Group'),
    visibilityLevel?: int32(name='visibilityLevel', example='10'),
    webUrl?: string(name='webUrl', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupResponseBody(name='body'),
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGroup', 'PUT', '/groups/modify', 'json', false, 'json', request);
}

model UpdateGroupMemberRequest {
  groupId: long(name='groupId', example='22901', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  aliyunPk: string(name='aliyunPk', example='1789095186553536', position='Query'),
  accessLevel: int32(name='accessLevel', example='30', position='Body'),
  memberType?: string(name='memberType', example='USERS', position='Body'),
  organizationId: string(name='organizationId', example='632bbfdf419338aaa2b1360a', position='Query'),
}

model UpdateGroupMemberResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='30'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    email?: string(name='email', example='username@example.com'),
    id?: long(name='id', example='24661'),
    memberType?: string(name='memberType', example='USERS'),
    name?: string(name='name', example='codeup'),
    sourceId?: long(name='sourceId', example='223241'),
    state?: string(name='state', example='active'),
    username?: string(name='username', example='test-codeup'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGroupMemberResponseBody(name='body'),
}

async function updateGroupMember(request: UpdateGroupMemberRequest): UpdateGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGroupMember', 'PUT', '/repository/groups/{groupId}/members/update/aliyun_pk', 'json', false, 'json', request);
}

model UpdateHostGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='123', position='Path'),
  aliyunRegion?: string(name='aliyunRegion', example='cn-hangzhou', position='Body'),
  ecsLabelKey?: string(name='ecsLabelKey', example='ecs', position='Body'),
  ecsLabelValue?: string(name='ecsLabelValue', example='ecs', position='Body'),
  ecsType?: string(name='ecsType', example='ECS_ALIYUN', position='Body'),
  envId?: string(name='envId', example='0', position='Body'),
  machineInfos?: string(name='machineInfos', example='[{"aliyunRegionId":"cn-beijing","machineSn":"i-sssssss","instanceName":"ceshi","ip":"120.0.0.0"}]', position='Body'),
  name: string(name='name', position='Body'),
  serviceConnectionId: long(name='serviceConnectionId', example='123', position='Body'),
  tagIds?: string(name='tagIds', example='12,23', position='Body'),
  type: string(name='type', example='ECS', position='Body'),
}

model UpdateHostGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHostGroupResponseBody(name='body'),
}

async function updateHostGroup(request: UpdateHostGroupRequest): UpdateHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHostGroup', 'PUT', '/organization/{organizationId}/hostGroups/{id}', 'json', true, 'form', request);
}

model UpdatePipelineRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  content: string(name='content', position='Body'),
  name: string(name='name', position='Body'),
  pipelineId: string(name='pipelineId', example='111xxx', position='Body'),
}

model UpdatePipelineResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipeline', 'POST', '/organization/{organizationId}/pipelines/update', 'json', true, 'form', request);
}

model UpdatePipelineBaseInfoRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  pipelineId?: string(name='pipelineId', example='12', position='Path'),
  envId?: long(name='envId', example='0', position='Query'),
  pipelineName: string(name='pipelineName', position='Query'),
  tagList?: string(name='tagList', example='"11,222,33"', position='Query'),
}

model UpdatePipelineBaseInfoResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true 接口调用成功，false 接口调用失败'),
}

model UpdatePipelineBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineBaseInfoResponseBody(name='body'),
}

async function updatePipelineBaseInfo(request: UpdatePipelineBaseInfoRequest): UpdatePipelineBaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineBaseInfo', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/baseInfo', 'json', false, 'json', request);
}

model UpdatePipelineGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  groupId: long(name='groupId', example='111', position='Path'),
  name: string(name='name', maxLength=40, position='Query'),
}

model UpdatePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdatePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineGroupResponseBody(name='body'),
}

async function updatePipelineGroup(request: UpdatePipelineGroupRequest): UpdatePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineGroup', 'PUT', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model UpdateProjectFieldRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  identifier: string(name='identifier', example='deafe5f33xxxxx6a259d8dafd', position='Path'),
  statusIdentifier?: string(name='statusIdentifier', example='fdsaadsfasxxxxdddd', position='Body'),
  updateBasicFieldRequestList?: [ 
    {
      propertyKey?: string(name='propertyKey', example='name'),
      propertyValue?: string(name='propertyValue'),
    }
  ](name='updateBasicFieldRequestList', position='Body'),
  updateForOpenApiList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', example='c4fd21xxxxxxxx9oj8jk'),
      value?: string(name='value'),
    }
  ](name='updateForOpenApiList', position='Body'),
}

model UpdateProjectFieldResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='errormessage'),
  project?: {
    category?: string(name='category', example='Project'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Project'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    customCode?: string(name='customCode', example='OJAY'),
    description?: string(name='description'),
    fieldList?: [ 
      {
        displayName?: string(name='displayName'),
        identifier?: string(name='identifier', example='b787ff504c0b36f8b71d15a4fd'),
        value?: string(name='value', example='ace3wxxxxxxx7rff3ee'),
        valueType?: string(name='valueType', example='user'),
      }
    ](name='fieldList'),
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1684134690000'),
    icon?: string(name='icon', example='https://xxxxxx.png'),
    iconBig?: string(name='iconBig', example='https://xxxxxx.png'),
    iconGroup?: string(name='iconGroup', example='{"small":"https://xxxxxx.png","big":"https://img.yyyyyy.png"}'),
    iconSmall?: string(name='iconSmall', example='https://img.yyyyyy.png'),
    id?: string(name='id', example='66893'),
    identifier?: string(name='identifier', example='1e2ea73d24652d5874d001b351'),
    identifierPath?: string(name='identifierPath', example='e8b2xxxxxx2abdxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    name?: string(name='name'),
    organizationIdentifier?: string(name='organizationIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    parentIdentifier?: string(name='parentIdentifier', example='null'),
    scope?: string(name='scope', example='public'),
    statusIdentifier?: string(name='statusIdentifier', example='8a40xxxxxxxxxxxxx64'),
    statusName?: string(name='statusName'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='8a4058a71159b68254......'),
    subType?: string(name='subType', example='null'),
    typeIdentifier?: string(name='typeIdentifier', example='CustomProject'),
  }(name='project'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', description='true/false', example='True'),
}

model UpdateProjectFieldResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectFieldResponseBody(name='body'),
}

async function updateProjectField(request: UpdateProjectFieldRequest): UpdateProjectFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectField', 'POST', '/organization/{organizationId}/project/{identifier}', 'json', false, 'json', request);
}

model UpdateProjectMemberRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  projectId: string(name='projectId', example='5e70xxxxxxcd000xxxxe96', position='Path'),
  roleIdentifier: string(name='roleIdentifier', example='project.admin', position='Body'),
  targetIdentifier: string(name='targetIdentifier', example='5e70xxxxxxcd000xxxxe96', position='Body'),
  targetType: string(name='targetType', example='Space', position='Body'),
  userIdentifier: string(name='userIdentifier', example='19xx7043xxxxxxx914', position='Body'),
  userType: string(name='userType', example='user', position='Body'),
}

model UpdateProjectMemberResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  member?: {
    gmtCreate?: long(name='gmtCreate', example='1623916393000'),
    gmtModified?: long(name='gmtModified', example='1623916393000'),
    id?: string(name='id', example='1124382'),
    roleIdentifier?: string(name='roleIdentifier', example='project.admin'),
    targetIdentifier?: string(name='targetIdentifier', example='5e70xxxxxxcd000xxxxe96'),
    targetType?: string(name='targetType', example='Space'),
    userIdentifier?: string(name='userIdentifier', example='19xx7043xxxxxxx914'),
    userType?: string(name='userType', example='user'),
  }(name='member'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectMemberResponseBody(name='body'),
}

async function updateProjectMember(request: UpdateProjectMemberRequest): UpdateProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectMember', 'POST', '/organization/{organizationId}/projects/{projectId}/updateMember', 'json', false, 'json', request);
}

model UpdateProtectedBranchesRequest {
  repositoryId: long(name='repositoryId', example='2835387', position='Path'),
  id: long(name='id', example='19224', position='Path,Body'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  allowMergeRoles?: [ int32 ](name='allowMergeRoles', position='Body'),
  allowMergeUserIds?: [ string ](name='allowMergeUserIds', position='Body'),
  allowPushRoles?: [ int32 ](name='allowPushRoles', position='Body'),
  allowPushUserIds?: [ string ](name='allowPushUserIds', position='Body'),
  branch?: string(name='branch', example='master', position='Body'),
  mergeRequestSetting?: {
    allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
    defaultAssignees?: [ string ](name='defaultAssignees'),
    isAllowSelfApproval?: boolean(name='isAllowSelfApproval', example='true'),
    isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed', example='true'),
    isRequired?: boolean(name='isRequired', example='true'),
    isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush', example='false'),
    minimumApproval?: int32(name='minimumApproval', example='1'),
    mrMode?: string(name='mrMode', example='general'),
    whiteList?: string(name='whiteList', example='**.java'),
  }(name='mergeRequestSetting', position='Body'),
  testSettingDTO?: {
    checkConfig?: {
      checkItems?: [ 
        {
          isRequired?: boolean(name='isRequired', example='false'),
          name?: string(name='name'),
        }
      ](name='checkItems'),
    }(name='checkConfig'),
    checkTaskQualityConfig?: {
      bizNo?: string(name='bizNo', example='123456'),
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_task_quality'),
      taskName?: string(name='taskName', example='bz-task-quality'),
    }(name='checkTaskQualityConfig'),
    codeGuidelinesDetection?: {
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_code_guide_lines'),
    }(name='codeGuidelinesDetection'),
    isRequired?: boolean(name='isRequired', example='false'),
    sensitiveInfoDetection?: {
      enabled?: boolean(name='enabled', example='false'),
      message?: string(name='message', example='test_code_sensitive_info'),
    }(name='sensitiveInfoDetection'),
  }(name='testSettingDTO', position='Body'),
  organizationId?: string(name='organizationId', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
}

model UpdateProtectedBranchesResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='A35869D5-BB29-5F84-A4DD-B09985EA2AFA'),
  result?: {
    allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
    allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
    allowPushRoles?: [ int32 ](name='allowPushRoles'),
    allowPushUserIds?: [ long ](name='allowPushUserIds'),
    branch?: string(name='branch', example='master'),
    id?: long(name='id', example='123456'),
    mergeRequestSetting?: {
      allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
      defaultAssignees?: [ string ](name='defaultAssignees'),
      isAllowSelfApproval?: boolean(name='isAllowSelfApproval', example='true'),
      isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed', example='true'),
      isRequired?: boolean(name='isRequired', example='true'),
      isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush', example='false'),
      minimumApproval?: int32(name='minimumApproval', example='1'),
      mrMode?: string(name='mrMode', example='general'),
      whiteList?: string(name='whiteList', example='**.java'),
    }(name='mergeRequestSetting'),
    testSettingDTO?: {
      checkConfig?: {
        checkItems?: [ 
          {
            isRequired?: boolean(name='isRequired', example='false'),
            name?: string(name='name'),
          }
        ](name='checkItems'),
      }(name='checkConfig'),
      checkTaskQualityConfig?: {
        bizNo?: string(name='bizNo', example='123456'),
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_task_quality'),
        taskName?: string(name='taskName', example='biz-task-quality'),
      }(name='checkTaskQualityConfig'),
      codeGuidelinesDetection?: {
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_code_guide_lines'),
      }(name='codeGuidelinesDetection'),
      isRequired?: boolean(name='isRequired', example='false'),
      sensitiveInfoDetection?: {
        enabled?: boolean(name='enabled', example='false'),
        message?: string(name='message', example='test_code_sensitive_info'),
      }(name='sensitiveInfoDetection'),
    }(name='testSettingDTO'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateProtectedBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProtectedBranchesResponseBody(name='body'),
}

async function updateProtectedBranches(request: UpdateProtectedBranchesRequest): UpdateProtectedBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProtectedBranches', 'PUT', '/{repositoryId}/protect_branches/{id}', 'json', false, 'json', request);
}

model UpdatePushReviewOnOffRequest {
  repositoryId: long(name='repositoryId', example='2813489', position='Path'),
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Query'),
  trunkMode: boolean(name='trunkMode', example='true', position='Query'),
}

model UpdatePushReviewOnOffResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='6177543A-8D54-5736-A93B-E0195A1512CB'),
  result?: {
    result?: boolean(name='result', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdatePushReviewOnOffResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePushReviewOnOffResponseBody(name='body'),
}

async function updatePushReviewOnOff(request: UpdatePushReviewOnOffRequest): UpdatePushReviewOnOffResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePushReviewOnOff', 'POST', '/repository/{repositoryId}/settings/trunk_mode', 'json', false, 'json', request);
}

model UpdateRepositoryRequest {
  repositoryId: long(name='repositoryId', example='2080398', position='Path'),
  accessToken?: string(name='accessToken', example='c3c09f1230187a879678da43c973d069', position='Query'),
  adminSettingLanguage?: string(name='adminSettingLanguage', example='Java', position='Body'),
  avatar?: string(name='avatar', example='https://xxxx', position='Body'),
  buildsEnabled?: boolean(name='buildsEnabled', example='true', position='Body'),
  checkEmail?: boolean(name='checkEmail', example='true', position='Body'),
  defaultBranch?: string(name='defaultBranch', example='master', position='Body'),
  description?: string(name='description', position='Body'),
  id?: long(name='id', example='2080398', position='Body'),
  issuesEnabled?: boolean(name='issuesEnabled', example='true', position='Body'),
  mergeRequestsEnabled?: boolean(name='mergeRequestsEnabled', example='true', position='Body'),
  name?: string(name='name', example='codeup', position='Body'),
  openCloneDownloadControl?: boolean(name='openCloneDownloadControl', example='false', position='Body'),
  path?: string(name='path', position='Body'),
  projectCloneDownloadMethodList?: [ 
    {
      allowed?: boolean(name='allowed', example='true'),
      permissionCode?: string(name='permissionCode', example='project:download'),
    }
  ](name='projectCloneDownloadMethodList', position='Body'),
  projectCloneDownloadRoleList?: [ 
    {
      allowed?: boolean(name='allowed', example='true'),
      roleCode?: int32(name='roleCode', example='15'),
    }
  ](name='projectCloneDownloadRoleList', position='Body'),
  snippetsEnabled?: boolean(name='snippetsEnabled', example='false', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', example='0', position='Body'),
  wikiEnabled?: boolean(name='wikiEnabled', example='true', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model UpdateRepositoryResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='“”'),
  requestId?: string(name='requestId', example='EAE03103-5497-58D1-9169-E524DDE8604C'),
  result?: {
    archived?: boolean(name='archived', example='false'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    buildsEnabled?: boolean(name='buildsEnabled', example='false'),
    createdAt?: string(name='createdAt', example='2022-03-18 14:24:54'),
    creatorId?: long(name='creatorId', example='19238'),
    defaultBranch?: string(name='defaultBranch', example='master'),
    description?: string(name='description'),
    httpUrlToRepo?: string(name='httpUrlToRepo', example='https://codeup.aliyun.com/xxx/test/test.git'),
    id?: long(name='id', example='2825387'),
    issuesEnabled?: boolean(name='issuesEnabled', example='true'),
    lastActivityAt?: string(name='lastActivityAt', example='2022-03-20 14:24:54'),
    mergeRequestsEnabled?: boolean(name='mergeRequestsEnabled', example='true'),
    name?: string(name='name', example='codeup'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    namespace?: {
      avatar?: string(name='avatar', example='https://xxx'),
      createdAt?: string(name='createdAt', example='2022-02-18 14:24:54'),
      description?: string(name='description'),
      id?: long(name='id', example='29322'),
      name?: string(name='name', example='codeup'),
      ownerId?: long(name='ownerId', example='19238'),
      path?: string(name='path'),
      updatedAt?: string(name='updatedAt', example='2022-03-18 14:24:54'),
      visibilityLevel?: int32(name='visibilityLevel', example='0'),
    }(name='namespace'),
    path?: string(name='path', example='codeup'),
    pathWithNamespace?: string(name='pathWithNamespace', example='codeup-test-org / codeup'),
    snippetsEnabled?: boolean(name='snippetsEnabled', example='false'),
    sshUrlToRepo?: string(name='sshUrlToRepo', example='git@codeup.aliyun.com:xxx/test/test.git'),
    visibilityLevel?: int32(name='visibilityLevel', example='0'),
    webUrl?: string(name='webUrl', example='https://codeup.aliyun.com/xxx/test/test'),
    wikiEnabled?: boolean(name='wikiEnabled', example='true'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepositoryResponseBody(name='body'),
}

async function updateRepository(request: UpdateRepositoryRequest): UpdateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepository', 'PUT', '/repository/{repositoryId}', 'json', false, 'json', request);
}

model UpdateRepositoryMemberRequest {
  repositoryId: long(name='repositoryId', example='889910', position='Path'),
  aliyunPk: string(name='aliyunPk', example='1232456789123467', position='Path'),
  accessToken?: string(name='accessToken', example='f0b1e61db5961df5975a93f9129d2513', position='Query'),
  accessLevel?: int32(name='accessLevel', example='30', position='Body'),
  expireAt?: string(name='expireAt', example='2020-08-08 08:08:08', position='Body'),
  memberType?: string(name='memberType', example='USERS', position='Body'),
  relatedId?: string(name='relatedId', example='10010', position='Body'),
  relatedInfos?: [ 
    {
      relatedId?: string(name='relatedId', example='10011'),
      sourceId?: long(name='sourceId', example='24790'),
      sourceType?: string(name='sourceType', example='Project'),
    }
  ](name='relatedInfos', position='Body'),
  organizationId: string(name='organizationId', example='60de7a6852743a5162b5f957', position='Query'),
}

model UpdateRepositoryMemberResponseBody = {
  errorCode?: string(name='errorCode', example='success'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='F590C9D8-E908-5B6C-95AC-56B7E8011FFA'),
  result?: {
    accessLevel?: int32(name='accessLevel', example='40'),
    avatarUrl?: string(name='avatarUrl', example='https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100'),
    email?: string(name='email', example='test@alibaba.com'),
    expireAt?: string(name='expireAt', example='2020-08-08 08:08:08'),
    id?: long(name='id', example='30815'),
    memberName?: string(name='memberName', example='test_memeber_name'),
    memberType?: string(name='memberType', example='USERS'),
    name?: string(name='name', example='codeup'),
    sourceId?: long(name='sourceId', example='223241'),
    sourceType?: string(name='sourceType', example='Project'),
    state?: string(name='state', example='normal'),
    username?: string(name='username', example='codeup-test'),
    webUrl?: string(name='webUrl', description='web url', example='""'),
  }(name='result'),
  success?: boolean(name='success', example='true'),
}

model UpdateRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepositoryMemberResponseBody(name='body'),
}

async function updateRepositoryMember(request: UpdateRepositoryMemberRequest): UpdateRepositoryMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepositoryMember', 'PUT', '/repository/{repositoryId}/members/{aliyunPk}', 'json', false, 'json', request);
}

model UpdateResourceMemberRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  resourceType: string(name='resourceType', example='pipeline', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', example='111111', position='Path'),
  accountId?: string(name='accountId', example='11111', position='Path'),
  roleName: string(name='roleName', example='admin', position='Body'),
}

model UpdateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', example='""'),
  errorMessage?: string(name='errorMessage', example='""'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceMemberResponseBody(name='body'),
}

async function updateResourceMember(request: UpdateResourceMemberRequest): UpdateResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceMember', 'PUT', '/organization/{organizationId}/{resourceType}/{resourceId}/members/{accountId}', 'json', true, 'form', request);
}

model UpdateTestCaseRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  testcaseIdentifier: string(name='testcaseIdentifier', example='4e22xxxxxxxxc64c16037fe76', position='Path'),
  updateWorkitemPropertyRequest: [ 
    {
      fieldIdentifier: string(name='fieldIdentifier', example='tc.type'),
      fieldValue: string(name='fieldValue', example='0a032xx28107xxxx53e87a9'),
    }
  ](name='updateWorkitemPropertyRequest', position='Body'),
}

model UpdateTestCaseResponseBody = {
  testcase?: {
    assignedTo?: {
      assignIdentifier?: string(name='assignIdentifier', example='1316xxxxxx8624xxx'),
      name?: string(name='name'),
      tbRoleId?: string(name='tbRoleId', example='xxxxxxxewdds12xxx'),
    }(name='assignedTo'),
    categoryIdentifier?: string(name='categoryIdentifier', example='TestCase'),
    creator?: {
      createIdentifier?: string(name='createIdentifier', example='1316xxxxxx8624xxx'),
      name?: string(name='name', example='xxxxxxx'),
    }(name='creator'),
    detailInfo?: {
      expectedResult?: {
        expectContent?: string(name='expectContent'),
        expectContentType?: string(name='expectContentType', example='MARKDOWN'),
        expectIdentifier?: string(name='expectIdentifier', example='685340d13127b01185335bd360'),
      }(name='expectedResult'),
      precondition?: {
        preContent?: string(name='preContent'),
        preContentType?: string(name='preContentType', example='MARKDOWN'),
        preIdentifier?: string(name='preIdentifier', example='3354596c7b3004480b635acf95'),
      }(name='precondition'),
      stepContent?: {
        stepContent?: string(name='stepContent'),
        stepContentType?: string(name='stepContentType', example='RICHTEXT'),
        stepIdentifier?: string(name='stepIdentifier', example='ad504e6cdcd2165b28eb1e1b9f'),
      }(name='stepContent'),
      stepType?: string(name='stepType', example='TEXT/TABLE'),
    }(name='detailInfo'),
    directory?: {
      childIdentifier?: string(name='childIdentifier', example='2973f597c14c6f533fffdcd05c'),
      directoryIdentifier?: string(name='directoryIdentifier', example='e27b8eace6501ce51cf5d56784'),
      name?: string(name='name'),
      pathName?: [ string ](name='pathName'),
    }(name='directory'),
    identifier?: string(name='identifier', example='c7f7033b021ead52cc42721382'),
    modifier?: {
      modifyIdentifier?: string(name='modifyIdentifier', example='1316xxxxxx8624xxx'),
      name?: string(name='name', example='xxxxxxx'),
    }(name='modifier'),
    spaceIdentifier?: string(name='spaceIdentifier', example='1e7d7a412b91a2144ec4aa8411'),
    spaceType?: string(name='spaceType', example='TestRepo'),
    subject?: string(name='subject'),
  }(name='Testcase'),
  errorCode?: string(name='errorCode', example='""'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateTestCaseResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTestCaseResponseBody(name='body'),
}

async function updateTestCase(request: UpdateTestCaseRequest): UpdateTestCaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTestCase', 'PUT', '/organization/{organizationId}/testhub/testcase/{testcaseIdentifier}', 'json', false, 'json', request);
}

model UpdateTestResultRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  testPlanIdentifier: string(name='testPlanIdentifier', position='Path'),
  testcaseIdentifier: string(name='testcaseIdentifier', position='Path'),
  executor?: string(name='executor', example='131xxx38624xxxx68', position='Body'),
  status?: string(name='status', example='TO DO', position='Body'),
}

model UpdateTestResultResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateTestResultResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTestResultResponseBody(name='body'),
}

async function updateTestResult(request: UpdateTestResultRequest): UpdateTestResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTestResult', 'PUT', '/organization/{organizationId}/testhub/testplan/{testPlanIdentifier}/testresult/{testcaseIdentifier}', 'json', false, 'json', request);
}

model UpdateVariableGroupRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  id: long(name='id', example='123', position='Path'),
  description?: string(name='description', example='变量组', position='Body'),
  name: string(name='name', example='变量组', position='Body'),
  variables: string(name='variables', example='[{"isEncrypted":true,"name":"name1","value":"vaue1"}]', position='Body'),
}

model UpdateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', example='”“'),
  errorMessage?: string(name='errorMessage', example='”“'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
}

model UpdateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVariableGroupResponseBody(name='body'),
}

async function updateVariableGroup(request: UpdateVariableGroupRequest): UpdateVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVariableGroup', 'PUT', '/organization/{organizationId}/variableGroups/{id}', 'json', true, 'form', request);
}

model UpdateWorkItemRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  fieldType: string(name='fieldType', example='subject', position='Body'),
  identifier: string(name='identifier', example='e8b2xxxxxx2abdxxxxxxxx23', position='Body'),
  propertyKey: string(name='propertyKey', example='subject', position='Body'),
  propertyValue: string(name='propertyValue', example='newValue', position='Body'),
}

model UpdateWorkItemResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMessage?: string(name='errorMessage', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitem?: {
    assignedTo?: string(name='assignedTo', example='19xx7043xxxxxxx914'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    document?: string(name='document', example='html格式'),
    gmtCreate?: long(name='gmtCreate', example='1640850318000'),
    gmtModified?: long(name='gmtModified', example='1640850318000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    parentIdentifier?: string(name='parentIdentifier', example='e8bxxxxxxxxxxxxxxxx24'),
    serialNumber?: string(name='serialNumber', example='ACFS-1'),
    spaceIdentifier?: string(name='spaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
    spaceName?: string(name='spaceName', example='需求项目'),
    spaceType?: string(name='spaceType', example='Project'),
    sprintIdentifier?: string(name='sprintIdentifier', example='75528f17703e92e5a568......'),
    status?: string(name='status', example='待处理'),
    statusIdentifier?: string(name='statusIdentifier', example='111000'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='1'),
    subject?: string(name='subject', example='测试工作项'),
    updateStatusAt?: long(name='updateStatusAt', example='1640850328000'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uxxxxxxre573f5xxxxxx0'),
  }(name='workitem'),
}

model UpdateWorkItemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkItemResponseBody(name='body'),
}

async function updateWorkItem(request: UpdateWorkItemRequest): UpdateWorkItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkItem', 'POST', '/organization/{organizationId}/workitems/update', 'json', false, 'json', request);
}

model UpdateWorkitemCommentRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  commentId: long(name='commentId', example='1964584', position='Body'),
  content: string(name='content', position='Body'),
  formatType: string(name='formatType', example='MARKDOWN/RICHTEXT', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', example='9144ef6b72d8exxxxx9e61a4d0', position='Body'),
}

model UpdateWorkitemCommentResponseBody = {
  comment?: {
    content?: string(name='content'),
    createTime?: long(name='createTime', example='1667205617061'),
    formatType?: string(name='formatType', example='MARKDOWN/RICHTEXT'),
    id?: string(name='id', example='1964584'),
    isTop?: boolean(name='isTop', example='true/false'),
    modifiedTime?: long(name='modifiedTime', example='1646323200000'),
    parentId?: long(name='parentId', example='2684432'),
    targetIdentifier?: string(name='targetIdentifier', example='deafe5f33xxxxx6a259d8dafd'),
    targetType?: string(name='targetType', example='workitem'),
    topTime?: long(name='topTime', example='1667205617089'),
    user?: {
      account?: string(name='account', example='1316458xxxxx41068'),
      avatar?: string(name='avatar', example='https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200'),
      displayName?: string(name='displayName'),
      identifier?: string(name='identifier', example='9144ef6b72d8exxxxx9e61a4d0'),
      nickName?: string(name='nickName'),
      realName?: string(name='realName'),
    }(name='user'),
  }(name='comment'),
  errorCode?: string(name='errorCode', example='InvalidParam.NotFound'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='F7B85D1B-D1C2-140F-A039-341859F130B9'),
  success?: string(name='success', example='true'),
}

model UpdateWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkitemCommentResponseBody(name='body'),
}

async function updateWorkitemComment(request: UpdateWorkitemCommentRequest): UpdateWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkitemComment', 'POST', '/organization/{organizationId}/workitems/commentUpdate', 'json', false, 'json', request);
}

model UpdateWorkitemFieldRequest {
  organizationId: string(name='organizationId', example='60ee8a814690c27532d412f8', position='Path'),
  updateWorkitemPropertyRequest: [ 
    {
      fieldIdentifier: string(name='fieldIdentifier', example='tag'),
      fieldValue: string(name='fieldValue'),
    }
  ](name='updateWorkitemPropertyRequest', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', example='9144ef6b72d8exxxxx9e61a4d0', position='Body'),
}

model UpdateWorkitemFieldResponseBody = {
  errorCode?: string(name='errorCode', example='Openapi.RequestError'),
  errorMsg?: string(name='errorMsg', example='error'),
  requestId?: string(name='requestId', example='ASSDS-ASSASX-XSAXSA-XSAXSAXS'),
  success?: boolean(name='success', example='true'),
  workitem?: {
    assignedTo?: string(name='assignedTo', example='19xx7043xxxxxxx914'),
    categoryIdentifier?: string(name='categoryIdentifier', example='Req'),
    creator?: string(name='creator', example='19xx7043xxxxxxx914'),
    document?: string(name='document', example='html格式'),
    gmtCreate?: long(name='gmtCreate', example='1640850318000'),
    gmtModified?: long(name='gmtModified', example='1640850318000'),
    identifier?: string(name='identifier', example='e8bxxxxxxxxxxxxxxxx23'),
    logicalStatus?: string(name='logicalStatus', example='NORMAL'),
    modifier?: string(name='modifier', example='19xx7043xxxxxxx914'),
    parentIdentifier?: string(name='parentIdentifier', example='e8bxxxxxxxxxxxxxxxx24'),
    serialNumber?: string(name='serialNumber', example='1'),
    spaceIdentifier?: string(name='spaceIdentifier', example='e8b26xxxxx6e76aa20xxxxx23'),
    spaceName?: string(name='spaceName', example='需求项目'),
    spaceType?: string(name='spaceType', example='Project'),
    sprintIdentifier?: string(name='sprintIdentifier', example='75528f17703e92e5a568......'),
    status?: string(name='status', example='待处理'),
    statusIdentifier?: string(name='statusIdentifier', example='28'),
    statusStageIdentifier?: string(name='statusStageIdentifier', example='1'),
    subject?: string(name='subject', example='测试工作项'),
    updateStatusAt?: long(name='updateStatusAt', example='1640850328000'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', example='9uxxxxxxre573f5xxxxxx0'),
  }(name='workitem'),
}

model UpdateWorkitemFieldResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkitemFieldResponseBody(name='body'),
}

async function updateWorkitemField(request: UpdateWorkitemFieldRequest): UpdateWorkitemFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkitemField', 'POST', '/organization/{organizationId}/workitems/updateWorkitemField', 'json', false, 'json', request);
}

model WorkitemAttachmentCreateRequest {
  organizationId: string(name='organizationId', example='5ebbc0228123212b59xxxxx', position='Path'),
  workitemIdentifier: string(name='workitemIdentifier', example='11234455454355', position='Path'),
  fileKey: string(name='fileKey', example='1106473328927498/1106473328927498/5ec071g0e5ij85fche8cddchje.xlsx', position='Body'),
  originalFilename: string(name='originalFilename', example='xxx.tgz', position='Body'),
}

model WorkitemAttachmentCreateResponseBody = {
  errorCode?: string(name='errorCode', example='SYSTEM_UNKNOWN_ERROR'),
  errorMessage?: string(name='errorMessage', example='InvalidTagGroup.IdNotFoundntraceId: 2137844496.4337.16624448853053831'),
  requestId?: string(name='requestId', example='F590C9D8-E908-5B6C-95AC-56B7E8011FFA'),
  success?: string(name='success', example='true'),
}

model WorkitemAttachmentCreateResponse = {
  headers: map[string]string(name='headers'),
  body: WorkitemAttachmentCreateResponseBody(name='body'),
}

async function workitemAttachmentCreate(request: WorkitemAttachmentCreateRequest): WorkitemAttachmentCreateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WorkitemAttachmentCreate', 'POST', '/organization/{organizationId}/workitem/{workitemIdentifier}/attachment', 'json', false, 'json', request);
}

