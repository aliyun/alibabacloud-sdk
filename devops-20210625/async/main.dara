/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'devops';
  @version = '2021-06-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddRepositoryMemberRequest {
  repositoryId: long(name='repositoryId', description='代码库ID', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', description='Codeup访问令牌，使用AK/SK方式访问可以不用填AccessToken', position='Query'),
  accessLevel: int32(name='accessLevel', description='成员权限', position='Body'),
  aliyunPks: string(name='aliyunPks', description='需要添加为代码库成员的用户阿里云ID。支持多个，以","分割', position='Body'),
  organizationId: string(name='organizationId', description='企业ID', position='Query'),
}

model AddRepositoryMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel', description='权限类型'),
      avatarUrl?: string(name='avatarUrl', description='头像地址'),
      email?: string(name='email', description='邮箱'),
      externUserId?: string(name='externUserId', description='云效用户ID'),
      id?: long(name='id', description='Codeup用户Id'),
      state?: string(name='state', description='状态'),
    }
  ](name='result', description='返回结果'),
  success?: boolean(name='success', description='请求状态'),
}

model AddRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AddRepositoryMemberResponseBody(name='body'),
}

async function addRepositoryMember(request: AddRepositoryMemberRequest): AddRepositoryMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddRepositoryMember', 'POST', '/repository/{repositoryId}/members', 'json', false, 'json', request);
}

model AddWebhookRequest {
  repositoryId: long(name='repositoryId', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  description?: string(name='description', description='webhook描述', position='Body'),
  enableSslVerification?: boolean(name='enableSslVerification', description='使用ssl认证', position='Body'),
  mergeRequestsEvents?: boolean(name='mergeRequestsEvents', description='合并请求事件', position='Body'),
  noteEvents?: boolean(name='noteEvents', description='评论事件', position='Body'),
  pushEvents?: boolean(name='pushEvents', description='分支推送事件', position='Body'),
  secretToken?: string(name='secretToken', position='Body'),
  tagPushEvents?: boolean(name='tagPushEvents', description='标签推送事件', position='Body'),
  url: string(name='url', description='hook url', position='Body'),
  organizationId: string(name='organizationId', position='Query'),
}

model AddWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    createdAt?: string(name='createdAt'),
    description?: string(name='description'),
    enableSslVerification?: boolean(name='enableSslVerification'),
    id?: long(name='id'),
    lastTestResult?: string(name='lastTestResult'),
    mergeRequestsEvents?: boolean(name='mergeRequestsEvents'),
    noteEvents?: boolean(name='noteEvents'),
    pushEvents?: boolean(name='pushEvents'),
    repositoryId?: long(name='repositoryId'),
    secretToken?: string(name='secretToken'),
    tagPushEvents?: boolean(name='tagPushEvents'),
    url?: string(name='url'),
  }(name='result'),
  success?: boolean(name='success'),
}

model AddWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: AddWebhookResponseBody(name='body'),
}

async function addWebhook(request: AddWebhookRequest): AddWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddWebhook', 'POST', '/repository/{repositoryId}/webhooks/create', 'json', false, 'json', request);
}

model CreateBranchRequest {
  repositoryId: string(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Body'),
  ref: string(name='ref', position='Body'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model CreateBranchResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    commit?: {
      authorEmail?: string(name='authorEmail'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate'),
      committedDate?: string(name='committedDate'),
      committerEmail?: string(name='committerEmail'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt'),
      id?: string(name='id'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId'),
      title?: string(name='title'),
    }(name='commit'),
    name?: string(name='name'),
    protected?: boolean(name='protected'),
  }(name='result'),
  success?: boolean(name='success'),
}

model CreateBranchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBranchResponseBody(name='body'),
}

async function createBranch(request: CreateBranchRequest): CreateBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBranch', 'POST', '/repository/{repositoryId}/branches', 'json', false, 'json', request);
}

model CreateFileRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Body'),
  commitMessage: string(name='commitMessage', position='Body'),
  content: string(name='content', position='Body'),
  encoding?: string(name='encoding', position='Body'),
  filePath: string(name='filePath', position='Body'),
  organizationId: string(name='organizationId', position='Query'),
}

model CreateFileResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    branchName?: string(name='branchName'),
    filePath?: string(name='filePath'),
  }(name='result'),
  success?: boolean(name='success'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileResponseBody(name='body'),
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFile', 'POST', '/repository/{repositoryId}/files', 'json', false, 'json', request);
}

model CreateFlowTagRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  color: string(name='color', position='Query'),
  flowTagGroupId: long(name='flowTagGroupId', position='Query'),
  name: string(name='name', maxLength=20, position='Query'),
}

model CreateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  id?: long(name='id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowTagResponseBody(name='body'),
}

async function createFlowTag(request: CreateFlowTagRequest): CreateFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFlowTag', 'POST', '/organization/{organizationId}/flow/tags', 'json', false, 'json', request);
}

model CreateFlowTagGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  name: string(name='name', maxLength=20, position='Query'),
}

model CreateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  id?: long(name='id', description='标签分类'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowTagGroupResponseBody(name='body'),
}

async function createFlowTagGroup(request: CreateFlowTagGroupRequest): CreateFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFlowTagGroup', 'POST', '/organization/{organizationId}/flow/tagGroups', 'json', false, 'json', request);
}

model CreateHostGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  aliyunRegion?: string(name='aliyunRegion', position='Body'),
  ecsLabelKey?: string(name='ecsLabelKey', position='Body'),
  ecsLabelValue?: string(name='ecsLabelValue', position='Body'),
  ecsType?: string(name='ecsType', position='Body'),
  envId?: string(name='envId', position='Body'),
  machineInfos?: string(name='machineInfos', position='Body'),
  name: string(name='name', position='Body'),
  serviceConnectionId: long(name='serviceConnectionId', position='Body'),
  tagIds?: string(name='tagIds', position='Body'),
  type: string(name='type', position='Body'),
}

model CreateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  hostGroupId?: long(name='hostGroupId'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroup(request: CreateHostGroupRequest): CreateHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHostGroup', 'POST', '/organization/{organizationId}/hostGroups', 'json', true, 'form', request);
}

model CreateOAuthTokenRequest {
  clientId: string(name='clientId', description='clientId
', position='Body'),
  clientSecret: string(name='clientSecret', description='client_secret', position='Body'),
  code?: string(name='code', description='当前grantType=code时必传', position='Body'),
  grantType: string(name='grantType', description='授权类型：code，token', position='Body'),
  login?: string(name='login', description='code = token时必传', position='Body'),
  scope: string(name='scope', description='授权范围.例如：read:repo,write:repo', position='Body'),
}

model CreateOAuthTokenResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage', description='Id of the request'),
  requestId?: string(name='requestId'),
  result?: {
    accessToken?: string(name='accessToken'),
    id?: string(name='id'),
    scope?: string(name='scope'),
    tokenType?: string(name='tokenType'),
  }(name='result'),
  success?: string(name='success'),
}

model CreateOAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOAuthTokenResponseBody(name='body'),
}

async function createOAuthToken(request: CreateOAuthTokenRequest): CreateOAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOAuthToken', 'POST', '/login/oauth/create', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  organizationId: string(name='organizationId', position='Path'),
  basicInfo: {
    envId?: long(name='envId', description='流水线环境配置：0日常环境、1预发环境、2正式环境'),
    groupId?: long(name='groupId', description='流水线分组id'),
    name: string(name='name', description='流水线名称'),
    tagIds?: string(name='tagIds', description='标签id，多个标签以逗号隔开'),
  }(name='basicInfo', description='流水线基础信息', position='Body'),
  pipelineYaml: string(name='pipelineYaml', description='流水线yaml配置', position='Body'),
  settings?: {
    caches?: [ 
      {
        desc?: string(name='desc', description='缓存描述'),
        directory?: string(name='directory', description='缓存目录'),
        disable?: boolean(name='disable', description='是否开启'),
      }
    ](name='caches', description='缓存目录配置'),
    globalParams?: [ 
      {
        key?: string(name='key', description='变量key'),
        mask?: boolean(name='mask', description='是否私密模式'),
        runningConfig?: boolean(name='runningConfig', description='是否开启运行时配置'),
        value?: string(name='value', description='变量值'),
      }
    ](name='globalParams', description='变量配置'),
    runnerCacheMode?: string(name='runnerCacheMode', description='私有构建集群缓存配置;local本地、cloud、云端'),
  }(name='settings', description='缓存和变量配置', position='Body'),
  triggerInfo?: {
    scheduled?: {
      daysOfWeek?: string(name='daysOfWeek', description='周期触发日期选择,多个用逗号隔开；
1周日、2周一、3周二、4周三、5周四、6周五、7周日；不填默认选择全部'),
      fixedTime?: string(name='fixedTime', description='单次触发触发时间'),
      from?: string(name='from', description='周期触发开始时间'),
      interval?: int32(name='interval', description='周期触发间隔时间'),
      onlySourceChange?: boolean(name='onlySourceChange', description='代码变更时定时器触发'),
      to?: string(name='to', description='周期触发结束时间'),
      type?: string(name='type', description='触发类型；PERIO周期触发、FIXED固定触发'),
    }(name='scheduled', description='定时触发配置'),
    webhookEnable?: boolean(name='webhookEnable', description='流水线webhook开关'),
  }(name='triggerInfo', description='流水线触发设置', position='Body'),
}

model CreatePipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  object?: long(name='object', description='流水线id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/organization/{organizationId}/pipelines', 'json', false, 'json', request);
}

model CreatePipelineGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  name: string(name='name', maxLength=40, position='Query'),
}

model CreatePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  pipelineGroup?: {
    id?: long(name='id'),
    name?: string(name='name'),
  }(name='pipelineGroup'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreatePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineGroupResponseBody(name='body'),
}

async function createPipelineGroup(request: CreatePipelineGroupRequest): CreatePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineGroup', 'POST', '/organization/{organizationId}/pipelineGroups', 'json', false, 'json', request);
}

model CreateProjectRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  customCode: string(name='customCode', position='Body'),
  name: string(name='name', position='Body'),
  scope: string(name='scope', position='Body'),
  templateIdentifier: string(name='templateIdentifier', position='Body'),
}

model CreateProjectResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  project?: {
    categoryIdentifier?: string(name='categoryIdentifier', description='空间大类id'),
    creator?: string(name='creator', description='创建人id'),
    customCode?: string(name='customCode', description='自定义编号'),
    description?: string(name='description', description='描述信息'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    icon?: string(name='icon', description='图标'),
    identifier?: string(name='identifier', description='项目唯一标识符'),
    logicalStatus?: string(name='logicalStatus', description='项目状态'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='项目名称'),
    organizationIdentifier?: string(name='organizationIdentifier', description='企业id'),
    scope?: string(name='scope', description='可见范围'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段'),
    typeIdentifier?: string(name='typeIdentifier', description='空间小类id'),
  }(name='project', description='项目信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/organization/{organizationId}/projects/createProject', 'json', false, 'json', request);
}

model CreateProtectdBranchRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  allowMergeRoles: [ int32 ](name='allowMergeRoles', position='Body'),
  allowMergeUserIds: [ string ](name='allowMergeUserIds', position='Body'),
  allowPushRoles: [ int32 ](name='allowPushRoles', position='Body'),
  allowPushUserIds: [ string ](name='allowPushUserIds', position='Body'),
  branch: string(name='branch', position='Body'),
  id?: long(name='id', position='Body'),
  mergeRequestSetting?: {
    allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
    defaultAssignees?: [ string ](name='defaultAssignees'),
    isAllowSelfApproval?: boolean(name='isAllowSelfApproval'),
    isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed'),
    isRequired?: boolean(name='isRequired'),
    isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush'),
    minimumApproval?: int32(name='minimumApproval'),
    mrMode?: string(name='mrMode'),
    whiteList?: string(name='whiteList'),
  }(name='mergeRequestSetting', position='Body'),
  testSettingDTO?: {
    checkConfig?: {
      checkItems?: [ 
        {
          isRequired?: boolean(name='isRequired'),
          name?: string(name='name'),
        }
      ](name='checkItems'),
    }(name='checkConfig'),
    checkTaskQualityConfig?: {
      bizNo?: string(name='bizNo'),
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
      taskName?: string(name='taskName'),
    }(name='checkTaskQualityConfig'),
    codeGuidelinesDetection?: {
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
    }(name='codeGuidelinesDetection'),
    isRequired?: boolean(name='isRequired'),
    sensitiveInfoDetection?: {
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
    }(name='sensitiveInfoDetection'),
  }(name='testSettingDTO', position='Body'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model CreateProtectdBranchResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
    allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
    allowPushRoles?: [ int32 ](name='allowPushRoles'),
    allowPushUserIds?: [ long ](name='allowPushUserIds'),
    branch?: string(name='branch'),
    id?: long(name='id'),
    mergeRequestSetting?: {
      allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
      defaultAssignees?: [ string ](name='defaultAssignees'),
      isAllowSelfApproval?: boolean(name='isAllowSelfApproval'),
      isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed'),
      isRequired?: boolean(name='isRequired'),
      isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush'),
      minimumApproval?: int32(name='minimumApproval'),
      mrMode?: string(name='mrMode'),
      whiteList?: string(name='whiteList'),
    }(name='mergeRequestSetting'),
    testSettingDTO?: {
      checkConfig?: {
        checkItems?: [ 
          {
            isRequired?: boolean(name='isRequired'),
            name?: string(name='name'),
          }
        ](name='checkItems'),
      }(name='checkConfig'),
      checkTaskQualityConfig?: {
        bizNo?: string(name='bizNo'),
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
        taskName?: string(name='taskName'),
      }(name='checkTaskQualityConfig'),
      codeGuidelinesDetection?: {
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
      }(name='codeGuidelinesDetection'),
      isRequired?: boolean(name='isRequired'),
      sensitiveInfoDetection?: {
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
      }(name='sensitiveInfoDetection'),
    }(name='testSettingDTO'),
  }(name='result'),
  success?: boolean(name='success'),
}

model CreateProtectdBranchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProtectdBranchResponseBody(name='body'),
}

async function createProtectdBranch(request: CreateProtectdBranchRequest): CreateProtectdBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProtectdBranch', 'POST', '/repository/{repositoryId}/protect_branches', 'json', false, 'json', request);
}

model CreateRepositoryRequest {
  accessToken?: string(name='accessToken', position='Query'),
  avatarUrl?: string(name='avatarUrl', description='代码库头像地址', position='Body'),
  description?: string(name='description', description='代码库描述', position='Body'),
  gitignoreType?: string(name='gitignoreType', description='gitignore模板类型', position='Body'),
  importAccount?: string(name='importAccount', description='导入时使用的账号', position='Body'),
  importDemoProject?: boolean(name='importDemoProject', description='使用使用demo库内容进行初始化', position='Body'),
  importRepoType?: string(name='importRepoType', description='导入代码库类型 (GIT: Git库, SVN: SVN库)', position='Body'),
  importToken?: string(name='importToken', description='导入时账号的token', position='Body'),
  importTokenEncrypted?: string(name='importTokenEncrypted', description='import_token字段的传输格式，使用明文或rsa加密', position='Body'),
  importUrl?: string(name='importUrl', description='导入地址（http协议地址）', position='Body'),
  initStandardService?: boolean(name='initStandardService', description='初始化标准智能化服务', position='Body'),
  isCryptoEnabled?: boolean(name='isCryptoEnabled', description='是否启用加密', position='Body'),
  localImportUrl?: string(name='localImportUrl', description='本地导入代码库的远程地址', position='Body'),
  name: string(name='name', description='代码库名称', position='Body'),
  namespaceId?: long(name='namespaceId', description='代码库父路径id', position='Body'),
  path?: string(name='path', description='代码库路径', position='Body'),
  readmeType?: string(name='readmeType', description='自动创建readme类型 (EMPTY: 仅创建README.md, USER_GUIDE: 包含新手引导)', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', position='Body'),
  createParentPath?: boolean(name='createParentPath', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
  sync?: boolean(name='sync', position='Query'),
}

model CreateRepositoryResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: {
    importFromSvn?: boolean(name='Import_from_svn', description='从SVN导入'),
    archived?: boolean(name='archived', description='归档标识'),
    avatarUrl?: string(name='avatar_url', description='代码库头像地址'),
    createdAt?: string(name='createdAt', description='创建时间'),
    creatorId?: long(name='creatorId', description='创建者id'),
    defaultBranch?: string(name='defaultBranch', description='默认分支'),
    demoProject?: boolean(name='demoProject', description='demo库标识'),
    description?: string(name='description', description='描述'),
    httpUrlToRepo?: string(name='httpUrlToRepo', description='http地址'),
    id?: long(name='id', description='id'),
    lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
    name?: string(name='name', description='名称'),
    nameWithNamespace?: string(name='nameWithNamespace', description='名称（含父路径）'),
    namespace?: {
      avatar?: string(name='avatar', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='描述'),
      id?: long(name='id', description='id'),
      name?: string(name='name', description='名称'),
      ownerId?: long(name='ownerId', description='归属者id'),
      path?: string(name='path', description='路径'),
      public?: boolean(name='public', description='公开性'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: string(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    }(name='namespace', description='父路径信息'),
    path?: string(name='path', description='路径'),
    pathWithNamespace?: string(name='pathWithNamespace', description='路径（含父路径）'),
    sshUrlToRepo?: string(name='sshUrlToRepo', description='ssh地址'),
    visibilityLevel?: string(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    webUrl?: string(name='webUrl', description='web url'),
  }(name='result'),
  success?: boolean(name='success', description='调用是否成功'),
}

model CreateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRepositoryResponseBody(name='body'),
}

async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepository', 'POST', '/repository/create', 'json', false, 'json', request);
}

model CreateResourceMemberRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  resourceType: string(name='resourceType', description='资源id', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', description='资源类型 流水线 pipeline 部署组 deployGroup', position='Path'),
  accountId: string(name='accountId', description='用户id', position='Body'),
  roleName: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限 流水线 pipeline   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限', position='Body'),
}

model CreateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceMemberResponseBody(name='body'),
}

async function createResourceMember(request: CreateResourceMemberRequest): CreateResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceMember', 'POST', '/organization/{organizationId}/{resourceType}/{resourceId}/members', 'json', true, 'form', request);
}

model CreateSprintRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  endDate?: string(name='endDate', description='结束时间', position='Body'),
  name: string(name='name', description='迭代名', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Body'),
  staffIds: [ string ](name='staffIds', description='负责人列表', position='Body'),
  startDate?: string(name='startDate', description='开始时间', position='Body'),
}

model CreateSprintResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sprint?: {
    creator?: string(name='creator', description='创建人id'),
    description?: string(name='description', description='描述信息'),
    endDate?: long(name='endDate', description='结束时间'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='迭代唯一标识符'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='迭代名称'),
    scope?: string(name='scope', description='可见范围'),
    spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
    startDate?: long(name='startDate', description='开始时间'),
    status?: string(name='status', description='状态'),
  }(name='sprint', description='迭代信息'),
  success?: boolean(name='success', description='true或者false'),
}

model CreateSprintResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSprintResponseBody(name='body'),
}

async function createSprint(request: CreateSprintRequest): CreateSprintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSprint', 'POST', '/organization/{organizationId}/sprints/create', 'json', false, 'json', request);
}

model CreateSshKeyRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
}

model CreateSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSshKeyResponseBody(name='body'),
}

async function createSshKey(request: CreateSshKeyRequest): CreateSshKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSshKey', 'POST', '/organization/{organizationId}/sshKey', 'json', false, 'json', request);
}

model CreateVariableGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  description?: string(name='description', description='变量组描述', position='Body'),
  name: string(name='name', description='变量组名称', position='Body'),
  variables: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值', position='Body'),
}

model CreateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroupId?: long(name='variableGroupId', description='新建的变量组id'),
}

model CreateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVariableGroupResponseBody(name='body'),
}

async function createVariableGroup(request: CreateVariableGroupRequest): CreateVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVariableGroup', 'POST', '/organization/{organizationId}/variableGroups', 'json', true, 'form', request);
}

model CreateWorkitemRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  assignedTo: string(name='assignedTo', description='工作项负责人的account id，或者企业中的用户名', position='Body'),
  category: string(name='category', description='工作项的类型id，比如：Bug、Task对应id', position='Body'),
  description?: string(name='description', description='工作项内容', position='Body'),
  descriptionFormat?: string(name='descriptionFormat', description='内容格式', position='Body'),
  fieldValueList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
      value?: string(name='value', description='字段值，写入时使用'),
      workitemIdentifier?: string(name='workitemIdentifier', description='工作项的唯一标识'),
    }
  ](name='fieldValueList', description='自定义字段', position='Body'),
  parent?: string(name='parent', description='所属父工作项的唯一标识', position='Body'),
  participant?: [ string ](name='participant', description='参与人account id列表，或者企业名称列表', position='Body'),
  space: string(name='space', description='项目id', position='Body'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Body'),
  spaceType: string(name='spaceType', description='资源类型', position='Body'),
  sprint?: [ string ](name='sprint', description='要关联迭代', position='Body'),
  subject: string(name='subject', description='标题', position='Body'),
  tracker?: [ string ](name='tracker', description='抄送人account id列表', position='Body'),
  verifier?: [ string ](name='verifier', description='验证者account id列表，或者企业名称列表', position='Body'),
  workitemType: string(name='workitemType', description='工作项小类型id', position='Body'),
}

model CreateWorkitemResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprintIdentifier?: string(name='sprintIdentifier', description='迭代的id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态唯一标识id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model CreateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemResponseBody(name='body'),
}

async function createWorkitem(request: CreateWorkitemRequest): CreateWorkitemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitem', 'POST', '/organization/{organizationId}/workitems/create', 'json', false, 'json', request);
}

model CreateWorkitemCommentRequest {
  organizationId: string(name='organizationId', position='Path'),
  content: string(name='content', description='评论内容', position='Body'),
  formatType: string(name='formatType', description='目前支持RICHTEXT/MARKDOWN 二选一', position='Body'),
  parentId?: string(name='parentId', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', position='Body'),
}

model CreateWorkitemCommentResponseBody = {
  comment?: {
    id?: long(name='Id', description='唯一标识'),
    content?: string(name='content', description='内容'),
    createTime?: long(name='createTime'),
    formatType?: string(name='formatType', description='评论类型'),
    isTop?: boolean(name='isTop', description='是否置顶'),
    modifiedTime?: long(name='modifiedTime'),
    parentId?: long(name='parentId'),
    targetIdentifier?: string(name='targetIdentifier'),
    targetType?: string(name='targetType'),
    topTime?: long(name='topTime', description='置顶时间'),
    user?: {
      account?: string(name='account'),
      avatar?: string(name='avatar'),
      displayName?: string(name='displayName'),
      identifier?: string(name='identifier'),
      nickName?: string(name='nickName'),
      realName?: string(name='realName'),
      targetType?: string(name='targetType'),
    }(name='user'),
  }(name='Comment'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model CreateWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemCommentResponseBody(name='body'),
}

async function createWorkitemComment(request: CreateWorkitemCommentRequest): CreateWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemComment', 'POST', '/organization/{organizationId}/workitems/comment', 'json', false, 'json', request);
}

model CreateWorkitemEstimateRequest {
  organizationId: string(name='organizationId', position='Path'),
  description?: string(name='description', description='描述', position='Body'),
  recordUserIdentifier: string(name='recordUserIdentifier', description='登记人,为用户的aliyunPk', position='Body'),
  spentTime: string(name='spentTime', description='花费工时，最大为9999', position='Body'),
  type: string(name='type', description='类型', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', description='工作项id', position='Body'),
}

model CreateWorkitemEstimateResponseBody = {
  workitemTimeEstimate?: {
    description?: string(name='description'),
    identifier?: string(name='identifier', description='工时唯一标识'),
    recordUser?: {
      account?: string(name='account'),
      avatar?: string(name='avatar'),
      dingTalkId?: string(name='dingTalkId'),
      displayName?: string(name='displayName'),
      displayNickName?: string(name='displayNickName'),
      displayRealName?: string(name='displayRealName'),
      email?: string(name='email'),
      gender?: string(name='gender'),
      identifier?: string(name='identifier'),
      isDisabled?: boolean(name='isDisabled'),
      mobile?: string(name='mobile'),
      nameEn?: string(name='nameEn'),
      nickName?: string(name='nickName'),
      nickNamePinyin?: string(name='nickNamePinyin'),
      realName?: string(name='realName'),
      realNamePinyin?: string(name='realNamePinyin'),
      stamp?: string(name='stamp'),
      tbRoleId?: string(name='tbRoleId'),
    }(name='recordUser'),
    spentTime?: long(name='spentTime'),
    type?: string(name='type'),
    workitemIdentifier?: string(name='workitemIdentifier'),
  }(name='WorkitemTimeEstimate'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreateWorkitemEstimateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemEstimateResponseBody(name='body'),
}

async function createWorkitemEstimate(request: CreateWorkitemEstimateRequest): CreateWorkitemEstimateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemEstimate', 'POST', '/organization/{organizationId}/workitems/estimate', 'json', false, 'json', request);
}

model CreateWorkitemRecordRequest {
  organizationId: string(name='organizationId', position='Path'),
  actualTime: string(name='actualTime', description='花费工时，最大为9999', position='Body'),
  description?: string(name='description', description='描述', position='Body'),
  gmtEnd: string(name='gmtEnd', description='结束时间，开始时间不能大于结束时间', position='Body'),
  gmtStart: string(name='gmtStart', description='开始时间', position='Body'),
  recordUserIdentifier: string(name='recordUserIdentifier', description='登记人,为用户的aliyunPk', position='Body'),
  type: string(name='type', description='类型，从获取工时类型接口获取', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', description='工作项id', position='Body'),
}

model CreateWorkitemRecordResponseBody = {
  workitemTime?: {
    actualTime?: long(name='actualTime'),
    description?: string(name='description'),
    gmtEnd?: long(name='gmtEnd'),
    gmtStart?: long(name='gmtStart'),
    identifier?: string(name='identifier', description='工时唯一标识'),
    recordUser?: {
      account?: string(name='account'),
      avatar?: string(name='avatar'),
      dingTalkId?: string(name='dingTalkId'),
      displayName?: string(name='displayName'),
      displayNickName?: string(name='displayNickName'),
      displayRealName?: string(name='displayRealName'),
      email?: string(name='email'),
      gender?: string(name='gender'),
      identifier?: string(name='identifier'),
      isDisabled?: boolean(name='isDisabled'),
      mobile?: string(name='mobile'),
      nameEn?: string(name='nameEn'),
      nickName?: string(name='nickName'),
      nickNamePinyin?: string(name='nickNamePinyin'),
      realName?: string(name='realName'),
      realNamePinyin?: string(name='realNamePinyin'),
      stamp?: string(name='stamp'),
      tbRoleId?: string(name='tbRoleId'),
    }(name='recordUser'),
    type?: string(name='type'),
    workitemIdentifier?: string(name='workitemIdentifier', description='工作项id'),
  }(name='WorkitemTime'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreateWorkitemRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkitemRecordResponseBody(name='body'),
}

async function createWorkitemRecord(request: CreateWorkitemRecordRequest): CreateWorkitemRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkitemRecord', 'POST', '/organization/{organizationId}/workitems/record', 'json', false, 'json', request);
}

model CreateWorkspaceRequest {
  codeUrl: string(name='codeUrl', description='代码来源URL（当前仅支持云效 Codeup 来源）', position='Body'),
  codeVersion: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签', position='Body'),
  filePath?: string(name='filePath', description='打开空间默认打开的文件相对路径', position='Body'),
  name?: string(name='name', description='工作空间名称', position='Body'),
  requestFrom?: string(name='requestFrom', description='请求来源（用于统计，云产品集成时需要传入）', position='Body'),
  resourceIdentifier?: string(name='resourceIdentifier', description='资源标识，提供给非标代码源作为空间复用的唯一标识', position='Body'),
  reuse?: boolean(name='reuse', description='工作空间复用标识，按照"用户+技术栈+代码地址+版本"进行复用 true - 复用 false - 不复用，每次均为新创建', position='Body'),
  workspaceTemplate: string(name='workspaceTemplate', description='技术栈', position='Body'),
}

model CreateWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    createTime?: string(name='createTime', description='创建时间戳'),
    creator?: string(name='creator', description='创建者，阿里云PK'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
  }(name='workspace', description='工作空间信息'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspace', 'POST', '/api/workspaces', 'json', true, 'form', request);
}

model DeleteBranchRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model DeleteBranchResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    branchName?: string(name='branchName'),
  }(name='result'),
  success?: string(name='success'),
}

model DeleteBranchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBranchResponseBody(name='body'),
}

async function deleteBranch(request: DeleteBranchRequest): DeleteBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBranch', 'DELETE', '/repository/{repositoryId}/branches/delete', 'json', false, 'json', request);
}

model DeleteFileRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Query'),
  commitMessage: string(name='commitMessage', position='Query'),
  filePath: string(name='filePath', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
}

model DeleteFileResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    branchName?: string(name='branchName'),
    filePath?: string(name='filePath'),
  }(name='result'),
  success?: boolean(name='success'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFile', 'DELETE', '/repository/{repositoryId}/files/delete', 'json', false, 'json', request);
}

model DeleteFlowTagRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  id: string(name='id', position='Path'),
}

model DeleteFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowTagResponseBody(name='body'),
}

async function deleteFlowTag(request: DeleteFlowTagRequest): DeleteFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFlowTag', 'DELETE', '/organization/{organizationId}/flow/tags/{id}', 'json', false, 'json', request);
}

model DeleteFlowTagGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  id: string(name='id', position='Path'),
}

model DeleteFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowTagGroupResponseBody(name='body'),
}

async function deleteFlowTagGroup(request: DeleteFlowTagGroupRequest): DeleteFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFlowTagGroup', 'DELETE', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model DeleteHostGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  id: long(name='id', description='部署组Id', position='Path'),
}

model DeleteHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroup(request: DeleteHostGroupRequest): DeleteHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHostGroup', 'DELETE', '/organization/{organizationId}/hostGroups/{id}', 'json', false, 'json', request);
}

model DeletePipelineRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如  https:// flow.aliyun.com/pipelines/【PipelineId】/current', minimum=1, maximum=999999999999999, position='Path'),
}

model DeletePipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(request: DeletePipelineRequest): DeletePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipeline', 'DELETE', '/organization/{organizationId}/pipelines/{pipelineId}', 'json', false, 'json', request);
}

model DeletePipelineGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  groupId: long(name='groupId', position='Path'),
}

model DeletePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model DeletePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineGroupResponseBody(name='body'),
}

async function deletePipelineGroup(request: DeletePipelineGroupRequest): DeletePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineGroup', 'DELETE', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  identifier: string(name='identifier', position='Query'),
}

model DeleteProjectResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  result?: boolean(name='result', description='true或者false'),
  success?: boolean(name='success', description='true或者false'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/organization/{organizationId}/projects/delete', 'json', false, 'json', request);
}

model DeleteProtectedBranchRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  protectedBranchId: long(name='protectedBranchId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model DeleteProtectedBranchResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    result?: boolean(name='result'),
  }(name='result'),
  success?: boolean(name='success'),
}

model DeleteProtectedBranchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProtectedBranchResponseBody(name='body'),
}

async function deleteProtectedBranch(request: DeleteProtectedBranchRequest): DeleteProtectedBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProtectedBranch', 'DELETE', '/repository/{repositoryId}/protect_branches/{protectedBranchId}', 'json', false, 'json', request);
}

model DeleteRepositoryRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  reason: string(name='reason', position='Body'),
  organizationId: string(name='organizationId', position='Query'),
}

model DeleteRepositoryResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    result?: boolean(name='result'),
  }(name='result'),
  success?: boolean(name='success'),
}

model DeleteRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryResponseBody(name='body'),
}

async function deleteRepository(request: DeleteRepositoryRequest): DeleteRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepository', 'POST', '/repository/{repositoryId}/remove', 'json', false, 'json', request);
}

model DeleteRepositoryWebhookRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  hookId: long(name='hookId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
}

model DeleteRepositoryWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    buildEvents?: boolean(name='buildEvents'),
    createdAt?: string(name='createdAt'),
    description?: string(name='description'),
    enableSslVerification?: boolean(name='enableSslVerification'),
    id?: long(name='id'),
    issuesEvents?: boolean(name='issuesEvents'),
    lastTestResult?: string(name='lastTestResult'),
    mergeRequestsEvents?: boolean(name='mergeRequestsEvents'),
    noteEvents?: boolean(name='noteEvents'),
    projectId?: long(name='projectId'),
    pushEvents?: boolean(name='pushEvents'),
    secretToken?: string(name='secretToken'),
    tagPushEvents?: boolean(name='tagPushEvents'),
    type?: string(name='type'),
    url?: string(name='url'),
  }(name='result'),
  success?: boolean(name='success'),
}

model DeleteRepositoryWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRepositoryWebhookResponseBody(name='body'),
}

async function deleteRepositoryWebhook(request: DeleteRepositoryWebhookRequest): DeleteRepositoryWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepositoryWebhook', 'DELETE', '/repository/{repositoryId}/hooks/{hookId}', 'json', false, 'json', request);
}

model DeleteResourceMemberRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  resourceType: string(name='resourceType', description='资源id', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', description='资源类型流水线 pipeline 部署组 deployGroup', position='Path'),
  accountId: string(name='accountId', position='Path'),
}

model DeleteResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceMemberResponseBody(name='body'),
}

async function deleteResourceMember(request: DeleteResourceMemberRequest): DeleteResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceMember', 'DELETE', '/organization/{organizationId}/{resourceType}/{resourceId}/members/{accountId}', 'json', false, 'json', request);
}

model DeleteVariableGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  id: long(name='id', description='变量组id', position='Path'),
}

model DeleteVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVariableGroupResponseBody(name='body'),
}

async function deleteVariableGroup(request: DeleteVariableGroupRequest): DeleteVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVariableGroup', 'DELETE', '/organization/{organizationId}/variableGroups/{id}', 'json', false, 'json', request);
}

model DeleteWorkitemAllCommentRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  identifier: string(name='identifier', description='工作项id', position='Query'),
}

model DeleteWorkitemAllCommentResponseBody = {
  deleteFlag?: boolean(name='deleteFlag'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model DeleteWorkitemAllCommentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkitemAllCommentResponseBody(name='body'),
}

async function deleteWorkitemAllComment(request: DeleteWorkitemAllCommentRequest): DeleteWorkitemAllCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkitemAllComment', 'DELETE', '/organization/{organizationId}/workitems/deleteAllComment', 'json', false, 'json', request);
}

model DeleteWorkitemCommentRequest {
  organizationId: string(name='organizationId', position='Path'),
  commentId: long(name='commentId', position='Body'),
  identifier: string(name='identifier', position='Body'),
}

model DeleteWorkitemCommentResponseBody = {
  deleteFlag?: boolean(name='deleteFlag', description='是否删除成功'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model DeleteWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkitemCommentResponseBody(name='body'),
}

async function deleteWorkitemComment(request: DeleteWorkitemCommentRequest): DeleteWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkitemComment', 'POST', '/organization/{organizationId}/workitems/deleteComent', 'json', false, 'json', request);
}

model FrozenWorkspaceRequest {
  workspaceId: string(name='workspaceId', description='工作空间唯一标识', position='Path'),
}

model FrozenWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model FrozenWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: FrozenWorkspaceResponseBody(name='body'),
}

async function frozenWorkspace(request: FrozenWorkspaceRequest): FrozenWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FrozenWorkspace', 'PUT', '/api/workspaces/{workspaceId}/frozen', 'json', false, 'json', request);
}

model GetBranchInfoRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model GetBranchInfoResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    commit?: {
      author?: {
        avatarUrl?: string(name='avatarUrl'),
        email?: string(name='email'),
        externUid?: string(name='externUid'),
        id?: long(name='id'),
        name?: string(name='name'),
        state?: string(name='state'),
        tbUserId?: string(name='tbUserId'),
        username?: string(name='username'),
      }(name='author'),
      authorEmail?: string(name='authorEmail'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate'),
      commentsCount?: long(name='commentsCount'),
      committedDate?: string(name='committedDate'),
      committer?: {
        avatarUrl?: string(name='avatarUrl'),
        email?: string(name='email'),
        externUid?: string(name='externUid'),
        id?: long(name='id'),
        name?: string(name='name'),
        state?: string(name='state'),
        tbUserId?: string(name='tbUserId'),
        username?: string(name='username'),
      }(name='committer'),
      committerEmail?: string(name='committerEmail'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt'),
      id?: string(name='id'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId'),
      signature?: {
        gpgKeyId?: string(name='gpgKeyId'),
        verificationStatus?: string(name='verificationStatus'),
      }(name='signature'),
      title?: string(name='title'),
    }(name='commit'),
    name?: string(name='name'),
    protected?: string(name='protected'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetBranchInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetBranchInfoResponseBody(name='body'),
}

async function getBranchInfo(request: GetBranchInfoRequest): GetBranchInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBranchInfo', 'GET', '/repository/{repositoryId}/branches/detail', 'json', false, 'json', request);
}

model GetCodeupOrganizationRequest {
  identity: string(name='identity', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
}

model GetCodeupOrganizationResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    createdAt?: string(name='createdAt'),
    id?: long(name='id'),
    namespaceId?: long(name='namespaceId'),
    organizationId?: string(name='organizationId'),
    path?: string(name='path'),
    updatedAt?: string(name='updatedAt'),
    userRole?: string(name='userRole'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetCodeupOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: GetCodeupOrganizationResponseBody(name='body'),
}

async function getCodeupOrganization(request: GetCodeupOrganizationRequest): GetCodeupOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeupOrganization', 'GET', '/api/organization/{identity}', 'json', false, 'json', request);
}

model GetCustomFieldOptionRequest {
  organizationId: string(name='organizationId', position='Path'),
  fieldId: string(name='fieldId', description='字段id', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Query'),
  spaceType: string(name='spaceType', description='类型', position='Query'),
  workitemTypeIdentifier: string(name='workitemTypeIdentifier', description='工作项类型id', position='Query'),
}

model GetCustomFieldOptionResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  fileds?: [ 
    {
      displayValue?: string(name='displayValue', description='展示的值'),
      fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
      identifier?: string(name='identifier', description='迭代唯一标识符'),
      level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅'),
      position?: long(name='position', description='待选值顺序'),
      value?: string(name='value', description='字段中文名称'),
      valueEn?: string(name='valueEn', description='字段英文名称'),
    }
  ](name='fileds', description='字段值信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model GetCustomFieldOptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomFieldOptionResponseBody(name='body'),
}

async function getCustomFieldOption(request: GetCustomFieldOptionRequest): GetCustomFieldOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCustomFieldOption', 'GET', '/organization/{organizationId}/fields/{fieldId}/getCustomOption', 'json', false, 'json', request);
}

model GetFileBlobsRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  filePath: string(name='filePath', position='Query'),
  from?: long(name='from', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
  ref: string(name='ref', position='Query'),
  to?: long(name='to', position='Query'),
}

model GetFileBlobsResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    content?: string(name='content'),
    totalLines?: int32(name='totalLines'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetFileBlobsResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileBlobsResponseBody(name='body'),
}

async function getFileBlobs(request: GetFileBlobsRequest): GetFileBlobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileBlobs', 'GET', '/repository/{repositoryId}/files/blobs', 'json', false, 'json', request);
}

model GetFileLastCommitRequest {
  repositoryId: long(name='repositoryId', description='代码库ID', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', description='个人访问令牌', position='Query'),
  filePath: string(name='filePath', description='文件路径', position='Query'),
  organizationId: string(name='organizationId', description='云效企业ID', position='Query'),
  sha: string(name='sha', description='分支名称、标签名称或Commit ID', position='Query'),
  showSignature?: boolean(name='showSignature', position='Query'),
}

model GetFileLastCommitResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: {
    authorDate?: string(name='authorDate', description='作者提交时间'),
    authorEmail?: string(name='authorEmail', description='提交者邮箱'),
    authorName?: string(name='authorName', description='作者姓名'),
    committedDate?: string(name='committedDate', description='提交者提交时间'),
    committerEmail?: string(name='committerEmail', description='提交者邮箱'),
    committerName?: string(name='committerName', description='提交者姓名'),
    createdAt?: string(name='createdAt', description='创建时间'),
    id?: string(name='id', description='Commit ID'),
    message?: string(name='message', description='提交内容'),
    parentIds?: [ string ](name='parentIds', description='父提交ID'),
    shortId?: string(name='shortId', description='Commit短ID'),
    signature?: {
      gpgKeyId?: string(name='GpgKeyId', description='GPG密钥ID'),
      verificationStatus?: string(name='VerificationStatus', description='验证状态'),
    }(name='signature', description='签名'),
    title?: string(name='title', description='标题，提交的第一行内容'),
  }(name='result', description='响应结果'),
  success?: boolean(name='success', description='请求结果'),
}

model GetFileLastCommitResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileLastCommitResponseBody(name='body'),
}

async function getFileLastCommit(request: GetFileLastCommitRequest): GetFileLastCommitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFileLastCommit', 'GET', '/repository/{repositoryId}/files/lastCommit', 'json', false, 'json', request);
}

model GetFlowTagGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  id: string(name='id', position='Path'),
}

model GetFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  flowTagGroup?: {
    creatorAccountId?: string(name='creatorAccountId'),
    flowTagList?: [ 
      {
        color?: string(name='color'),
        creatorAccountId?: string(name='creatorAccountId'),
        id?: long(name='id'),
        modiferAccountId?: string(name='modiferAccountId'),
        name?: string(name='name'),
      }
    ](name='flowTagList'),
    id?: long(name='id'),
    modiferAccountId?: string(name='modiferAccountId'),
    name?: string(name='name'),
  }(name='flowTagGroup'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetFlowTagGroupResponseBody(name='body'),
}

async function getFlowTagGroup(request: GetFlowTagGroupRequest): GetFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFlowTagGroup', 'GET', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model GetHostGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  id: long(name='id', description='主机组id', position='Path'),
}

model GetHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroup?: {
    aliyunRegion?: string(name='aliyunRegion'),
    createTime?: long(name='createTime'),
    creatorAccountId?: string(name='creatorAccountId'),
    description?: string(name='description'),
    ecsLabelKey?: string(name='ecsLabelKey'),
    ecsLabelValue?: string(name='ecsLabelValue'),
    ecsType?: string(name='ecsType'),
    hostInfos?: [ 
      {
        aliyunRegionId?: string(name='aliyunRegionId'),
        createTime?: long(name='createTime'),
        creatorAccountId?: string(name='creatorAccountId'),
        instanceName?: string(name='instanceName'),
        ip?: string(name='ip'),
        machineSn?: string(name='machineSn'),
        modifierAccountId?: string(name='modifierAccountId'),
        objectType?: string(name='objectType'),
        updateTime?: long(name='updateTime'),
      }
    ](name='hostInfos'),
    hostNum?: long(name='hostNum'),
    id?: long(name='id'),
    modifierAccountId?: string(name='modifierAccountId'),
    name?: string(name='name'),
    serviceConnectionId?: long(name='serviceConnectionId'),
    type?: string(name='type'),
    upateTIme?: long(name='upateTIme'),
  }(name='hostGroup'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroup(request: GetHostGroupRequest): GetHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHostGroup', 'GET', '/organization/{organizationId}/hostGroups/{id}', 'json', false, 'json', request);
}

model GetOrganizationMemberRequest {
  organizationId: string(name='organizationId', position='Path'),
  accountId: string(name='accountId', position='Path'),
}

model GetOrganizationMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  member?: {
    accountId?: string(name='accountId', description='阿里云用户PK'),
    birthday?: long(name='birthday', description='生日'),
    deptLists?: [ string ](name='deptLists', description='部门名称列表'),
    email?: string(name='email', description='邮箱'),
    hiredDate?: long(name='hiredDate', description='入职时间'),
    identities?: {
      externUid?: string(name='externUid', description='第三方系统的用户 id'),
      provider?: string(name='provider', description='第三方系统'),
    }(name='identities', description='第三方信息'),
    joinTime?: long(name='joinTime', description='加入云效企业时间'),
    lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
    mobile?: string(name='mobile', description='手机号'),
    organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
    organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
    organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
    state?: string(name='state', description='用户状态'),
  }(name='member', description='成员'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetOrganizationMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrganizationMemberResponseBody(name='body'),
}

async function getOrganizationMember(request: GetOrganizationMemberRequest): GetOrganizationMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrganizationMember', 'GET', '/organization/{organizationId}/members/{accountId}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如  https:// flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
}

model GetPipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipeline?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    envId?: int32(name='envId', description='环境id 0 日常环境  1预发环境 2正式环境'),
    envName?: string(name='envName', description='环境名称'),
    groupId?: long(name='groupId', description='流水线分组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='流水线名称'),
    pipelineConfig?: {
      flow?: string(name='flow', description='流水线配置信息'),
      settings?: string(name='settings', description='流水线环境变量等'),
      sources?: [ 
        {
          data?: {
            branch?: string(name='branch', description='分支'),
            cloneDepth?: long(name='cloneDepth', description='克隆深度'),
            credentialId?: long(name='credentialId', description='Credential Id'),
            credentialLabel?: string(name='credentialLabel', description='Credential Label'),
            credentialType?: string(name='credentialType', description='Credential Type'),
            events?: [ string ](name='events', description='触发事件'),
            isBranchMode?: boolean(name='isBranchMode', description='是否分支模式'),
            isCloneDepth?: boolean(name='isCloneDepth', description='是否设置clone深度'),
            isSubmodule?: boolean(name='isSubmodule', description='是否子模块'),
            isTrigger?: boolean(name='isTrigger', description='是否提交触发'),
            label?: string(name='label', description='代码源显示标签'),
            namespace?: string(name='namespace', description='github命名空间'),
            repo?: string(name='repo', description='代码库地址'),
            serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
            triggerFilter?: string(name='triggerFilter', description='触发过滤条件'),
            webhook?: string(name='webhook', description='webhhook地址'),
          }(name='data', description='代码数据'),
          sign?: string(name='sign', description='代码源唯一标识'),
          type?: string(name='type', description='代码源类型aliyunGit 阿里云代码库 customGitlab  自建git giteeGit 码云 codeup Codeup git 通用git gitlab gitlab bitbucket bitbucket githubOAuth github'),
        }
      ](name='sources', description='代码源'),
    }(name='pipelineConfig', description='流水线配置'),
    tagList?: [ 
      {
        id?: long(name='id', description='标签id'),
        name?: string(name='name', description='标签名称'),
      }
    ](name='tagList', description='标签'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipeline', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}', 'json', false, 'json', request);
}

model GetPipelineArtifactUrlRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  fileName: string(name='fileName', position='Query'),
  filePath: string(name='filePath', maxLength=1000, position='Query'),
}

model GetPipelineArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  fileUrl?: string(name='fileUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineArtifactUrlResponseBody(name='body'),
}

async function getPipelineArtifactUrl(request: GetPipelineArtifactUrlRequest): GetPipelineArtifactUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineArtifactUrl', 'POST', '/organization/{organizationId}/pipeline/getArtifactDownloadUrl', 'json', false, 'json', request);
}

model GetPipelineEmasArtifactUrlRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  emasJobInstanceId: string(name='emasJobInstanceId', position='Path'),
  md5: string(name='md5', position='Path'),
  pipelineId: long(name='pipelineId', position='Path'),
  pipelineRunId: long(name='pipelineRunId', position='Path'),
  serviceConnectionId: long(name='serviceConnectionId', position='Query'),
}

model GetPipelineEmasArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  fileUrl?: string(name='fileUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineEmasArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineEmasArtifactUrlResponseBody(name='body'),
}

async function getPipelineEmasArtifactUrl(request: GetPipelineEmasArtifactUrlRequest): GetPipelineEmasArtifactUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineEmasArtifactUrl', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/pipelineRun/{pipelineRunId}/emas/artifact/{emasJobInstanceId}/{md5}', 'json', false, 'json', request);
}

model GetPipelineGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  groupId: long(name='groupId', position='Path'),
}

model GetPipelineGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  pipelineGroup?: {
    createTime?: long(name='createTime'),
    id?: long(name='id'),
    name?: string(name='name'),
  }(name='pipelineGroup'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model GetPipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineGroupResponseBody(name='body'),
}

async function getPipelineGroup(request: GetPipelineGroupRequest): GetPipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineGroup', 'GET', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model GetPipelineRunRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线id', position='Path'),
  pipelineRunId: long(name='pipelineRunId', description='流水线运行实例id', position='Path'),
}

model GetPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRun?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    pipelineId?: long(name='pipelineId', description='流水线Id'),
    pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
    sources?: [ 
      {
        data?: {
          branch?: string(name='branch', description='分支'),
          commint?: string(name='commint', description='提交信息 json数据'),
          repo?: string(name='repo', description='代码库地址'),
        }(name='data', description='代码源信息'),
        sign?: string(name='sign', description='代码源唯一标识'),
        type?: string(name='type', description='代码库类型'),
      }
    ](name='sources', description='代码源'),
    stageGroup?: [[ string ]    ](name='stageGroup', description='阶段拓扑信息'),
    stages?: [ 
      {
        name?: string(name='name', description='阶段名称'),
        stageInfo?: {
          endTime?: long(name='endTime', description='结束时间'),
          jobs?: [ 
            {
              actions?: [ 
                {
                  disable?: boolean(name='disable', description='是否可用'),
                  params?: map[string]any(name='params'),
                  type?: string(name='type', description='API名称'),
                }
              ](name='actions', description='后续操作'),
              endTime?: long(name='endTime', description='结束时间'),
              id?: long(name='id', description='任务Id'),
              name?: string(name='name', description='任务名称'),
              params?: string(name='params', description='触发参数'),
              startTime?: long(name='startTime', description='开始时间'),
              status?: string(name='status', description='状态'),
            }
          ](name='jobs', description='任务'),
          name?: string(name='name', description='阶段名称'),
          startTime?: long(name='startTime', description='开始时间'),
          status?: string(name='status', description='状态'),
        }(name='stageInfo', description='阶段详情'),
      }
    ](name='stages', description='阶段信息'),
    status?: string(name='status', description='状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
    triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipelineRun', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(request: GetPipelineRunRequest): GetPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineRun', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}', 'json', false, 'json', request);
}

model GetPipelineScanReportUrlRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  reportPath: string(name='reportPath', maxLength=1000, position='Body'),
}

model GetPipelineScanReportUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  reportUrl?: string(name='reportUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineScanReportUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineScanReportUrlResponseBody(name='body'),
}

async function getPipelineScanReportUrl(request: GetPipelineScanReportUrlRequest): GetPipelineScanReportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineScanReportUrl', 'POST', '/organization/{organizationId}/pipeline/getPipelineScanReportUrl', 'json', true, 'form', request);
}

model GetProjectInfoRequest {
  organizationId: string(name='organizationId', position='Path'),
  projectId: string(name='projectId', description='项目id', position='Path'),
}

model GetProjectInfoResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  project?: {
    category?: string(name='category'),
    categoryIdentifier?: string(name='categoryIdentifier'),
    creator?: string(name='creator'),
    customCode?: string(name='customCode'),
    description?: string(name='description'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    icon?: string(name='icon'),
    iconBig?: string(name='iconBig'),
    iconGroup?: string(name='iconGroup'),
    iconSmall?: string(name='iconSmall'),
    id?: string(name='id'),
    identifier?: string(name='identifier'),
    identifierPath?: string(name='identifierPath'),
    logicalStatus?: string(name='logicalStatus'),
    modifier?: string(name='modifier'),
    name?: string(name='name'),
    organizationIdentifier?: string(name='organizationIdentifier'),
    parentIdentifier?: string(name='parentIdentifier'),
    scope?: string(name='scope'),
    statusIdentifier?: string(name='statusIdentifier'),
    statusStageIdentifier?: string(name='statusStageIdentifier'),
    subType?: string(name='subType'),
    typeIdentifier?: string(name='typeIdentifier'),
  }(name='project', description='项目信息'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectInfoResponseBody(name='body'),
}

async function getProjectInfo(request: GetProjectInfoRequest): GetProjectInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectInfo', 'GET', '/organization/{organizationId}/project/{projectId}', 'json', false, 'json', request);
}

model GetProjectMemberRequest {
  repositoryId: long(name='repositoryId', description='代码仓库Id', position='Path'),
  aliyunPk: string(name='aliyunPk', description='用户阿里云PK', position='Path'),
  accessToken?: string(name='accessToken', description='accessToken（选填），使用AK方式调用时无需填accessToken', position='Query'),
  organizationId: string(name='organizationId', description='企业ID', position='Query'),
}

model GetProjectMemberResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    accessLevel?: int32(name='accessLevel'),
    avatarUrl?: string(name='avatarUrl'),
    externUserId?: string(name='externUserId'),
    id?: long(name='id'),
    name?: string(name='name'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectMemberResponseBody(name='body'),
}

async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectMember', 'GET', '/repository/{repositoryId}/members/get/{aliyunPk}', 'json', false, 'json', request);
}

model GetRepositoryRequest {
  accessToken?: string(name='accessToken', description='个人访问令牌', position='Query'),
  identity: string(name='identity', description='代码库ID或路径', position='Query'),
  organizationId: string(name='organizationId', description='企业ID', position='Query'),
}

model GetRepositoryResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  repository?: {
    archive?: boolean(name='archive', description='归档标识'),
    avatarUrl?: string(name='avatarUrl', description='代码库头像地址'),
    createdAt?: string(name='createdAt', description='创建时间'),
    creatorId?: long(name='creatorId', description='创建者ID'),
    defaultBranch?: string(name='defaultBranch', description='默认分支'),
    demoProjectStatus?: boolean(name='demoProjectStatus', description='DEMO库标识'),
    description?: string(name='description', description='描述'),
    httpUrlToRepository?: string(name='httpUrlToRepository', description='HTTP克隆地址'),
    id?: long(name='id', description='代码库ID'),
    lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
    name?: string(name='name', description='名称'),
    nameWithNamespace?: string(name='nameWithNamespace', description='名称（含父名称）'),
    namespace?: {
      avatar?: string(name='avatar', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='描述'),
      id?: long(name='id', description='id'),
      name?: string(name='name', description='名称'),
      ownerId?: long(name='ownerId', description='归属者ID'),
      path?: string(name='path', description='路径'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: int32(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    }(name='namespace', description='父空间'),
    path?: string(name='path', description='路径'),
    pathWithNamespace?: string(name='pathWithNamespace', description='路径（含父路径）'),
    sshUrlToRepository?: string(name='sshUrlToRepository', description='SSH克隆地址'),
    visibilityLevel?: int32(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    webUrl?: string(name='webUrl', description='页面访问地址'),
  }(name='repository', description='代码库信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model GetRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryResponseBody(name='body'),
}

async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepository', 'GET', '/repository/get', 'json', false, 'json', request);
}

model GetRepositoryCommitRequest {
  repositoryId: long(name='repositoryId', description='The ID of a project', position='Path'),
  sha: string(name='sha', description='The commit hash or name of a repository branch or tag', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
  showSignature?: boolean(name='showSignature', description='展示签名', position='Query'),
}

model GetRepositoryCommitResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    author?: {
      avatarUrl?: string(name='avatarUrl'),
      email?: string(name='email'),
      externUid?: string(name='externUid'),
      id?: long(name='id'),
      name?: string(name='name'),
      state?: string(name='state'),
      tbUserId?: string(name='tbUserId'),
      username?: string(name='username'),
      websiteUrl?: string(name='websiteUrl'),
    }(name='author'),
    authorEmail?: string(name='authorEmail'),
    authorName?: string(name='authorName'),
    authoredDate?: string(name='authoredDate'),
    commentsCount?: long(name='commentsCount'),
    committedDate?: string(name='committedDate'),
    committer?: {
      avatarUrl?: string(name='avatarUrl'),
      email?: string(name='email'),
      externUid?: string(name='externUid'),
      id?: long(name='id'),
      name?: string(name='name'),
      state?: string(name='state'),
      tbUserId?: string(name='tbUserId'),
      username?: string(name='username'),
      websiteUrl?: string(name='websiteUrl'),
    }(name='committer'),
    committerEmail?: string(name='committerEmail'),
    committerName?: string(name='committerName'),
    createdAt?: string(name='createdAt'),
    id?: string(name='id'),
    message?: string(name='message'),
    parentIds?: [ string ](name='parentIds'),
    shortId?: string(name='shortId'),
    signature?: {
      gpgKeyId?: string(name='gpgKeyId'),
      verificationStatus?: string(name='verificationStatus'),
    }(name='signature'),
    title?: string(name='title'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetRepositoryCommitResponse = {
  headers: map[string]string(name='headers'),
  body: GetRepositoryCommitResponseBody(name='body'),
}

async function getRepositoryCommit(request: GetRepositoryCommitRequest): GetRepositoryCommitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepositoryCommit', 'GET', '/repository/{repositoryId}/commits/{sha}', 'json', false, 'json', request);
}

model GetSprintInfoRequest {
  organizationId: string(name='organizationId', position='Path'),
  sprintId: string(name='sprintId', description='迭代id', position='Path'),
}

model GetSprintInfoResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  sprint?: {
    creator?: string(name='creator', description='创建人id'),
    description?: string(name='description', description='描述信息'),
    endDate?: long(name='endDate', description='结束时间'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='迭代唯一标识符'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='迭代名称'),
    scope?: string(name='scope', description='可见范围'),
    spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
    startDate?: long(name='startDate', description='开始时间'),
    status?: string(name='status', description='状态'),
  }(name='sprint', description='迭代信息'),
  success?: boolean(name='success'),
}

model GetSprintInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetSprintInfoResponseBody(name='body'),
}

async function getSprintInfo(request: GetSprintInfoRequest): GetSprintInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSprintInfo', 'GET', '/organization/{organizationId}/sprints/{sprintId}/getSprintinfo', 'json', false, 'json', request);
}

model GetVMDeployOrderRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
}

model GetVMDeployOrderResponseBody = {
  deployOrder?: {
    actions?: [ 
      {
        disable?: boolean(name='disable', description='是否可用'),
        params?: any(name='params'),
        type?: string(name='type', description='Action'),
      }
    ](name='actions', description='后续action'),
    createTime?: long(name='createTime', description='创建时时间'),
    creator?: string(name='creator', description='创建人'),
    currentBatch?: int32(name='currentBatch', description='当前发布批次'),
    deployMachineInfo?: {
      batchNum?: int32(name='batchNum', description='发布批次'),
      deployMachines?: [ 
        {
          actions?: [ 
            {
              disable?: boolean(name='disable', description='是否可用'),
              params?: any(name='params'),
              type?: string(name='type', description='Action'),
            }
          ](name='actions', description='后续action'),
          batchNum?: int32(name='batchNum', description='部署批次'),
          clientStatus?: string(name='clientStatus', description='机器状态'),
          createTime?: long(name='createTime', description='开始时间'),
          ip?: string(name='ip', description='机器IP'),
          machineSn?: string(name='machineSn', description='机器sn'),
          status?: string(name='status', description='部署状态'),
          updateTime?: long(name='updateTime', description='修改时间'),
        }
      ](name='deployMachines', description='部署机器列表'),
      hostGroupId?: long(name='hostGroupId', description='主机组ID'),
    }(name='deployMachineInfo', description='部署机器信息'),
    deployOrderId?: string(name='deployOrderId', description='部署单ID'),
    exceptionCode?: string(name='exceptionCode', description='错误码'),
    status?: string(name='status', description='发布状态'),
    totalBatch?: int32(name='totalBatch', description='总发布批次'),
    updateTime?: long(name='updateTime', description='修改时间'),
  }(name='deployOrder', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetVMDeployOrderResponseBody(name='body'),
}

async function getVMDeployOrder(request: GetVMDeployOrderRequest): GetVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVMDeployOrder', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}', 'json', false, 'json', request);
}

model GetVariableGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  id: long(name='id', description='变量组id', position='Path'),
}

model GetVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroup?: {
    ccreatorAccountId?: string(name='ccreatorAccountId', description='创建人阿里云账号id'),
    createTime?: long(name='createTime', description='创建时间'),
    description?: string(name='description', description='变量组描述'),
    id?: long(name='id', description='变量组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='变量组名称'),
    relatedPipelines?: [ 
      {
        id?: long(name='id', description='关联的流水线Id'),
        name?: string(name='name', description='关联的流水线名称'),
      }
    ](name='relatedPipelines', description='关联的流水线'),
    updateTime?: long(name='updateTime', description='更新时间'),
    variables?: [ 
      {
        isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
        name?: string(name='name', description='变量名'),
        value?: string(name='value', description='变量值'),
      }
    ](name='variables', description='变量'),
  }(name='variableGroup', description='变量组'),
}

model GetVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetVariableGroupResponseBody(name='body'),
}

async function getVariableGroup(request: GetVariableGroupRequest): GetVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetVariableGroup', 'GET', '/organization/{organizationId}/variableGroups/{id}', 'json', false, 'json', request);
}

model GetWorkItemActivityRequest {
  organizationId: string(name='organizationId', position='Path'),
  workitemId: string(name='workitemId', description='工作项id', position='Path'),
}

model GetWorkItemActivityResponseBody = {
  activities?: [ 
    {
      actionType?: string(name='actionType', description='动作类型'),
      eventId?: long(name='eventId', description='事件id'),
      eventTime?: long(name='eventTime', description='事件时间'),
      eventType?: string(name='eventType', description='事件类型'),
      newValue?: [ 
        {
          displayValue?: string(name='displayValue'),
          plainValue?: string(name='plainValue'),
          resourceType?: string(name='resourceType'),
        }
      ](name='newValue'),
      oldValue?: [ 
        {
          displayValue?: string(name='displayValue'),
          plainValue?: string(name='plainValue'),
          resourceType?: string(name='resourceType'),
        }
      ](name='oldValue'),
      operator?: string(name='operator', description='操作者'),
      parentEventId?: long(name='parentEventId', description='父事件id'),
      property?: {
        displayName?: string(name='displayName', description='属性的展示名'),
        propertyIdentifier?: string(name='propertyIdentifier', description='资源id'),
        propertyName?: string(name='propertyName', description='属性key'),
        propertyType?: string(name='propertyType', description='类型'),
      }(name='property', description='修改属性'),
      resourceIdentifier?: string(name='resourceIdentifier', description='操作对象'),
    }
  ](name='activities', description='动态信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model GetWorkItemActivityResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemActivityResponseBody(name='body'),
}

async function getWorkItemActivity(request: GetWorkItemActivityRequest): GetWorkItemActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemActivity', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getActivity', 'json', false, 'json', request);
}

model GetWorkItemInfoRequest {
  organizationId: string(name='organizationId', position='Path'),
  workitemId: string(name='workitemId', description='工作项id', position='Path'),
}

model GetWorkItemInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    customFields?: [ 
      {
        fieldClassName?: string(name='fieldClassName', description='字段的className，便于数据查询'),
        fieldFormat?: string(name='fieldFormat', description='字段格式，便于查询数据'),
        fieldIdentifier?: string(name='fieldIdentifier', description='字段的唯一标识'),
        level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
        objectValue?: string(name='objectValue', description='值对象列表'),
        position?: long(name='position', description='自定义字段值的position'),
        value?: string(name='value', description='字段值，写入时使用'),
        valueList?: [ 
          {
            displayValue?: string(name='displayValue', description='根据语言环境获取当前展示的值'),
            identifier?: string(name='identifier', description='字段值为对象类型时，值所对应的对象的唯一标识 例如：option表中的id'),
            level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
            value?: string(name='value', description='字段值'),
            valueEn?: string(name='valueEn', description='字段英文值，目前只有列表类有英文值'),
          }
        ](name='valueList', description='值对象列表，查询时使用'),
        workitemIdentifier?: string(name='workitemIdentifier', description='工作项的唯一标识'),
      }
    ](name='customFields', description='自定义字段列表'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    participant?: [ string ](name='participant', description='参与人account id列表'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprint?: [ string ](name='sprint', description='关联的迭代id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    tag?: [ string ](name='tag', description='标签id列表'),
    tracker?: [ string ](name='tracker', description='抄送人的account id列表'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    verifier?: [ string ](name='verifier', description='验证者的account id列表'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model GetWorkItemInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemInfoResponseBody(name='body'),
}

async function getWorkItemInfo(request: GetWorkItemInfoRequest): GetWorkItemInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemInfo', 'GET', '/organization/{organizationId}/workitems/{workitemId}', 'json', false, 'json', request);
}

model GetWorkItemWorkFlowInfoRequest {
  organizationId: string(name='organizationId', position='Path'),
  workitemId?: string(name='workitemId', description='工作项id', position='Path'),
  configurationId?: string(name='configurationId', description='项目id', position='Query'),
}

model GetWorkItemWorkFlowInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workflow?: {
    creator?: string(name='creator', description='创建人'),
    defaultStatusIdentifier?: string(name='defaultStatusIdentifier', description='工作流的默认状态'),
    description?: string(name='description', description='工作流的描述'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作流唯一标识'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='工作流名称'),
    ownerSpaceIdentifier?: string(name='ownerSpaceIdentifier', description='工作流所属的团队空间或项目的identifier'),
    ownerSpaceType?: string(name='ownerSpaceType', description='工作流所属的团队项目类型'),
    resourceType?: string(name='resourceType', description='资源类型'),
    source?: string(name='source', description='工作流来源'),
    statusOrder?: string(name='statusOrder', description='工作流的状态顺序'),
    statuses?: [ 
      {
        creator?: string(name='creator', description='创建人'),
        description?: string(name='description', description='描述信息'),
        gmtCreate?: long(name='gmtCreate', description='创建时间'),
        gmtModified?: long(name='gmtModified', description='修改时间'),
        identifier?: string(name='identifier', description='状态唯一标识'),
        modifier?: string(name='modifier', description='修改人'),
        name?: string(name='name', description='状态名'),
        resourceType?: string(name='resourceType', description='资源来源'),
        source?: string(name='source', description='状态来源'),
        workflowStageIdentifier?: string(name='workflowStageIdentifier', description='阶段信息-阶段的唯一标识'),
        workflowStageName?: string(name='workflowStageName', description='阶段信息-名称'),
      }
    ](name='statuses', description='状态列表'),
    workflowActions?: [ 
      {
        id?: long(name='id', description='流转步骤的id'),
        name?: string(name='name', description='action的名称'),
        nextWorkflowStatusIdentifier?: string(name='nextWorkflowStatusIdentifier', description='action对应的下个状态的信息id'),
        workflowIdentifier?: string(name='workflowIdentifier', description='action对应的工作流'),
        workflowStatusIdentifier?: string(name='workflowStatusIdentifier', description='action对应的当前状态id'),
      }
    ](name='workflowActions', description='工作流的流转步骤'),
  }(name='workflow', description='工作项信息'),
}

model GetWorkItemWorkFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkItemWorkFlowInfoResponseBody(name='body'),
}

async function getWorkItemWorkFlowInfo(request: GetWorkItemWorkFlowInfoRequest): GetWorkItemWorkFlowInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkItemWorkFlowInfo', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getWorkflowInfo', 'json', false, 'json', request);
}

model GetWorkitemCommentListRequest {
  organizationId: string(name='organizationId', description='企业号', position='Path'),
  workitemId: string(name='workitemId', description='工作项id
', position='Path'),
}

model GetWorkitemCommentListResponseBody = {
  commentList?: [ 
    {
      content?: string(name='content'),
      createTime?: long(name='createTime'),
      formatType?: string(name='formatType'),
      id?: long(name='id'),
      isTop?: boolean(name='isTop'),
      modifiedTime?: long(name='modifiedTime'),
      parentId?: long(name='parentId'),
      targetIdentifier?: string(name='targetIdentifier'),
      targetType?: string(name='targetType'),
      topTime?: long(name='topTime'),
    }
  ](name='commentList'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model GetWorkitemCommentListResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemCommentListResponseBody(name='body'),
}

async function getWorkitemCommentList(request: GetWorkitemCommentListRequest): GetWorkitemCommentListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemCommentList', 'GET', '/organization/{organizationId}/workitems/{workitemId}/commentList', 'json', false, 'json', request);
}

model GetWorkitemRelationsRequest {
  organizationId: string(name='organizationId', description='企业id
', position='Path'),
  workitemId: string(name='workitemId', description='工作项id', position='Path'),
  relationType: string(name='relationType', description='一共有BLOCKING，BLOCKED，ASSOCIATED， DUPLICATED，SUB， PARENT，一共6个待选值，只会获得工作项类型的关系项', position='Query'),
}

model GetWorkitemRelationsResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  relationList?: [ 
    {
      assignedTo?: string(name='assignedTo'),
      categoryIdentifier?: string(name='categoryIdentifier'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      identifier?: string(name='identifier'),
      spaceIdentifier?: string(name='spaceIdentifier'),
      subject?: string(name='subject'),
      workitemTypeIdentifier?: string(name='workitemTypeIdentifier'),
    }
  ](name='relationList'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model GetWorkitemRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemRelationsResponseBody(name='body'),
}

async function getWorkitemRelations(request: GetWorkitemRelationsRequest): GetWorkitemRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemRelations', 'GET', '/organization/{organizationId}/workitems/{workitemId}/getRelations', 'json', false, 'json', request);
}

model GetWorkitemTimeTypeListRequest {
  organizationId: string(name='organizationId', position='Path'),
}

model GetWorkitemTimeTypeListResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
  timeType?: [ 
    {
      description?: string(name='description'),
      displayName?: string(name='displayName'),
      identifier?: string(name='identifier'),
      name?: string(name='name'),
      position?: long(name='position'),
    }
  ](name='timeType'),
}

model GetWorkitemTimeTypeListResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkitemTimeTypeListResponseBody(name='body'),
}

async function getWorkitemTimeTypeList(request: GetWorkitemTimeTypeListRequest): GetWorkitemTimeTypeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkitemTimeTypeList', 'GET', '/organization/{organizationId}/workitems/type/list', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  workspaceId: string(name='workspaceId', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取', position='Path'),
}

model GetWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    codeUrl?: string(name='codeUrl', description='代码来源URL'),
    codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
    createTime?: string(name='createTime', description='创建时间戳'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    spec?: string(name='spec', description='机器规格'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
    userId?: string(name='userId', description='用户阿里云PK'),
  }(name='workspace', description='工作空间信息'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspace', 'GET', '/api/workspaces/{workspaceId}', 'json', false, 'json', request);
}

model JoinPipelineGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  groupId: long(name='groupId', position='Query'),
  pipelineIds: string(name='pipelineIds', position='Query'),
}

model JoinPipelineGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model JoinPipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinPipelineGroupResponseBody(name='body'),
}

async function joinPipelineGroup(request: JoinPipelineGroupRequest): JoinPipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'JoinPipelineGroup', 'POST', '/organization/{organizationId}/pipelineGroups/join', 'json', false, 'json', request);
}

model ListFlowTagGroupsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
}

model ListFlowTagGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  flowTagGroups?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='创建人'),
      id?: long(name='id', description='标签分类id'),
      modiferAccountId?: string(name='modiferAccountId', description='修改人'),
      name?: string(name='name', description='标签分类名称'),
    }
  ](name='flowTagGroups', description='标签分类'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListFlowTagGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowTagGroupsResponseBody(name='body'),
}

async function listFlowTagGroups(request: ListFlowTagGroupsRequest): ListFlowTagGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFlowTagGroups', 'GET', '/organization/{organizationId}/flow/tagGroups', 'json', false, 'json', request);
}

model ListHostGroupsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  createEndTime?: long(name='createEndTime', description='主机组结束时间', position='Query'),
  createStartTime?: long(name='createStartTime', description='主机组创建时间', position='Query'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建阿里云账号id，多个逗号分割', position='Query'),
  ids?: string(name='ids', description='主机组id，多个逗号分割', position='Query'),
  maxResults?: long(name='maxResults', description='结果返回个数', position='Query'),
  name?: string(name='name', description='主机组名称', position='Query'),
  nextToken?: string(name='nextToken', description='分页token', position='Query'),
  pageOrder?: string(name='pageOrder', description='排序顺序', position='Query'),
  pageSort?: string(name='pageSort', description='排序条件ID', position='Query'),
}

model ListHostGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroups?: [ 
    {
      aliyunRegion?: string(name='aliyunRegion', description='阿里云区域'),
      createTime?: long(name='createTime', description='主机时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='描述'),
      ecsLabelKey?: string(name='ecsLabelKey', description='ecs标签Key'),
      ecsLabelValue?: string(name='ecsLabelValue', description='Ecs标签值'),
      ecsType?: string(name='ecsType', description='主机类型'),
      hostNum?: long(name='hostNum', description='主机个数'),
      id?: long(name='id', description='323232'),
      modifierAccountId?: string(name='modifierAccountId', description='修改人阿里云账号id'),
      name?: string(name='name', description='部署组名称'),
      serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
      type?: string(name='type', description='类型'),
      updateTime?: long(name='updateTime', description='更新时间'),
    }
  ](name='hostGroups', description='主机组'),
  nextToken?: string(name='nextToken', description='分页token,空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroups(request: ListHostGroupsRequest): ListHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHostGroups', 'GET', '/organization/{organizationId}/hostGroups', 'json', false, 'json', request);
}

model ListOrganizationMembersRequest {
  organizationId: string(name='organizationId', position='Path'),
  externUid?: string(name='externUid', position='Query'),
  joinTimeFrom?: long(name='joinTimeFrom', position='Query'),
  joinTimeTo?: long(name='joinTimeTo', position='Query'),
  maxResults?: long(name='maxResults', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='nextToken', position='Query'),
  organizationMemberName?: string(name='organizationMemberName', position='Query'),
  provider?: string(name='provider', position='Query'),
  state?: string(name='state', position='Query'),
}

model ListOrganizationMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  members?: [ 
    {
      accountId?: string(name='accountId', description='阿里云用户ID'),
      birthday?: long(name='birthday', description='生日'),
      deptLists?: [ string ](name='deptLists', description='部门名称列表'),
      email?: string(name='email', description='邮箱'),
      hiredDate?: long(name='hiredDate', description='入职时间'),
      identities?: {
        externUid?: string(name='externUid', description='第三方系统的用户Id'),
        provider?: string(name='provider', description='第三方系统'),
      }(name='identities', description='第三方信息'),
      joinTime?: long(name='joinTime', description='加入云效企业时间'),
      lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
      mobile?: string(name='mobile', description='手机号'),
      organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
      organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
      organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
      state?: string(name='state', description='用户状态'),
    }
  ](name='members', description='成员列表'),
  nextToken?: string(name='nextToken', description='分页Token'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationMembersResponseBody(name='body'),
}

async function listOrganizationMembers(request: ListOrganizationMembersRequest): ListOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationMembers', 'GET', '/organization/{organizationId}/members', 'json', false, 'json', request);
}

model ListPipelineGroupPipelinesRequest {
  organizationId: string(name='organizationId', position='Path'),
  groupId: long(name='groupId', position='Path'),
  createEndTime?: long(name='createEndTime', position='Query'),
  createStartTime?: long(name='createStartTime', position='Query'),
  executeEndTime?: long(name='executeEndTime', position='Query'),
  executeStartTime?: long(name='executeStartTime', position='Query'),
  maxResults?: long(name='maxResults', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', position='Query'),
  pipelineName?: string(name='pipelineName', position='Query'),
  resultStatusList?: string(name='resultStatusList', position='Query'),
}

model ListPipelineGroupPipelinesResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  nextToken?: string(name='nextToken'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime'),
      pipelineId?: long(name='pipelineId'),
      pipelineName?: string(name='pipelineName'),
    }
  ](name='pipelines'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
  totalCount?: int32(name='totalCount'),
}

model ListPipelineGroupPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineGroupPipelinesResponseBody(name='body'),
}

async function listPipelineGroupPipelines(request: ListPipelineGroupPipelinesRequest): ListPipelineGroupPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineGroupPipelines', 'GET', '/organization/{organizationId}/pipelineGroups/{groupId}/pipelines', 'json', false, 'json', request);
}

model ListPipelineGroupsRequest {
  organizationId: string(name='organizationId', position='Path'),
  maxResults?: long(name='maxResults', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='nextToken', position='Query'),
}

model ListPipelineGroupsResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  nextToken?: string(name='nextToken'),
  pipelineGroups?: [ 
    {
      createTime?: long(name='createTime'),
      id?: long(name='id'),
      name?: string(name='name'),
    }
  ](name='pipelineGroups'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
  totalCount?: int32(name='totalCount'),
}

model ListPipelineGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineGroupsResponseBody(name='body'),
}

async function listPipelineGroups(request: ListPipelineGroupsRequest): ListPipelineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineGroups', 'GET', '/organization/{organizationId}/pipelineGroups', 'json', false, 'json', request);
}

model ListPipelineJobHistorysRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: string(name='pipelineId', maxLength=1000, position='Path'),
  category: string(name='category', position='Query'),
  identifier: string(name='identifier', position='Query'),
  maxResults: long(name='maxResults', maximum=50, position='Query'),
  nextToken?: string(name='nextToken', position='Query'),
}

model ListPipelineJobHistorysResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  jobs?: [ 
    {
      executeNumber?: int32(name='executeNumber'),
      identifier?: string(name='identifier'),
      jobId?: long(name='jobId'),
      jobName?: string(name='jobName'),
      operatorAccountId?: string(name='operatorAccountId'),
      pipelineId?: long(name='pipelineId'),
      pipelineRunId?: long(name='pipelineRunId'),
      sources?: string(name='sources'),
      status?: string(name='status'),
    }
  ](name='jobs'),
  nextToken?: string(name='nextToken'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: int32(name='totalCount'),
}

model ListPipelineJobHistorysResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineJobHistorysResponseBody(name='body'),
}

async function listPipelineJobHistorys(request: ListPipelineJobHistorysRequest): ListPipelineJobHistorysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineJobHistorys', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/job/historys', 'json', false, 'json', request);
}

model ListPipelineJobsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: string(name='pipelineId', maxLength=1000, position='Path'),
  category: string(name='category', position='Query'),
}

model ListPipelineJobsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  jobs?: [ 
    {
      identifier?: string(name='identifier'),
      jobName?: string(name='jobName'),
      lastJobId?: long(name='lastJobId'),
      lastJobParams?: string(name='lastJobParams'),
    }
  ](name='jobs'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListPipelineJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineJobsResponseBody(name='body'),
}

async function listPipelineJobs(request: ListPipelineJobsRequest): ListPipelineJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineJobs', 'POST', '/organization/{organizationId}/pipeline/{pipelineId}/jobs', 'json', false, 'json', request);
}

model ListPipelineRunsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线id', position='Path'),
  endTime?: long(name='endTime', description='结束时间', position='Query'),
  maxResults?: long(name='maxResults', description='最大返回数量', position='Query'),
  nextToken?: string(name='nextToken', description='分页Token', position='Query'),
  startTime?: long(name='startTime', description='开始时间', position='Query'),
  status?: string(name='status', description='状态 状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中', position='Query'),
  triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发', position='Query'),
}

model ListPipelineRunsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一个分页token，为空时，表示没有下一页'),
  pipelineRuns?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='运行人阿里云账号id'),
      endTime?: long(name='endTime', description='结束时间'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineRunId?: long(name='pipelineRunId', description='流水线实例id'),
      startTime?: long(name='startTime', description='开始时间'),
      status?: string(name='status', description='运行状态'),
      triggerMode?: long(name='triggerMode', description='触发模式'),
    }
  ](name='pipelineRuns', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineRuns', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  createEndTime?: long(name='createEndTime', description='创建结束时间', position='Query'),
  createStartTime?: long(name='createStartTime', description='创建开始时间', position='Query'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建人阿里云账号Id', position='Query'),
  executeAccountIds?: string(name='executeAccountIds', description='执行人阿里云账号id', position='Query'),
  executeEndTime?: long(name='executeEndTime', description='执行结束时间', position='Query'),
  executeStartTime?: long(name='executeStartTime', description='执行开始时间', position='Query'),
  maxResults?: long(name='maxResults', description='返回的总数', position='Query'),
  nextToken?: string(name='nextToken', description='分页Token', position='Query'),
  pipelineName?: string(name='pipelineName', description='流水线名称', position='Query'),
  statusList?: string(name='statusList', description='状态列表，多个逗号分割', position='Query'),
}

model ListPipelinesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      groupId?: long(name='groupId'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineName?: string(name='pipelineName', description='流水线名称'),
    }
  ](name='pipelines', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/organization/{organizationId}/pipelines', 'json', false, 'json', request);
}

model ListProjectMembersRequest {
  organizationId: string(name='organizationId', position='Path'),
  projectId: string(name='projectId', description='项目id', position='Path'),
  targetType: string(name='targetType', position='Query'),
}

model ListProjectMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  members?: [ 
    {
      account?: string(name='account', description='登陆账号'),
      avatar?: string(name='avatar', description='用户头像'),
      dingTalkId?: string(name='dingTalkId', description='钉钉id'),
      displayName?: string(name='displayName', description='展示名'),
      displayNickName?: string(name='displayNickName', description='展示昵称'),
      displayRealName?: string(name='displayRealName', description='展示真名'),
      division?: {
        identifier?: string(name='identifier', description='部门唯一标识'),
      }(name='division', description='部门信息'),
      email?: string(name='email', description='邮箱'),
      gender?: string(name='gender', description='性别'),
      identifier?: string(name='identifier', description='用户唯一 标识符'),
      mobile?: string(name='mobile', description='手机号'),
      nameEn?: string(name='nameEn', description='英文名'),
      nickName?: string(name='nickName', description='昵称'),
      nickNamePinyin?: string(name='nickNamePinyin', description='昵称拼音'),
      organizationUserInfo?: {
        organizationIdentifier?: string(name='organizationIdentifier', description='企业唯一标识符'),
      }(name='organizationUserInfo', description='企业信息'),
      realName?: string(name='realName', description='真名'),
      realNamePinyin?: string(name='realNamePinyin', description='真名拼音'),
      stamp?: string(name='stamp', description='用户类型'),
      tbRoleId?: string(name='tbRoleId', description='角色id'),
    }
  ](name='members', description='member信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectMembers', 'GET', '/organization/{organizationId}/projects/{projectId}/listMembers', 'json', false, 'json', request);
}

model ListProjectTemplatesRequest {
  organizationId: string(name='organizationId', position='Path'),
  category: string(name='category', description='模板类型', position='Query'),
}

model ListProjectTemplatesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  templates?: [ 
    {
      copyFrom?: string(name='copyFrom'),
      creator?: string(name='creator', description='创建人id'),
      description?: string(name='description', description='描述信息'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      icon?: string(name='icon', description='模板封面'),
      identifier?: string(name='identifier', description='模板唯一标识符'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='模板名称'),
      nameEn?: string(name='nameEn', description='模板英文名称'),
      resourceCategory?: string(name='resourceCategory', description='所属资源类型'),
      resourceType?: string(name='resourceType'),
      spaceIdentifier?: string(name='spaceIdentifier'),
      spaceType?: string(name='spaceType'),
      type?: long(name='type', description='模板类型 0-system/4-custom/16-instance'),
    }
  ](name='templates', description='项目模板信息'),
}

model ListProjectTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectTemplatesResponseBody(name='body'),
}

async function listProjectTemplates(request: ListProjectTemplatesRequest): ListProjectTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectTemplates', 'GET', '/organization/{organizationId}/projects/listTemplates', 'json', false, 'json', request);
}

model ListProjectWorkitemTypesRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id', position='Path'),
  projectId: string(name='projectId', description='项目id', position='Path'),
  category: string(name='category', description='工作项类型', position='Query'),
  spaceType: string(name='spaceType', description='空间类型', position='Query'),
}

model ListProjectWorkitemTypesResponseBody = {
  errorCode?: string(name='errorCode', description='错误返回码'),
  errorMessage?: string(name='errorMessage', description='错误返回信息'),
  requestId?: string(name='requestId', description='openapi平台的request id'),
  success?: boolean(name='success', description='接口是否正常返回'),
  workitemTypes?: [ 
    {
      addUser?: string(name='addUser', description='添加到项目中的添加人'),
      categoryIdentifier?: string(name='categoryIdentifier', description='工作项类型'),
      creator?: string(name='creator', description='工作项类型创建人'),
      defaultType?: boolean(name='defaultType', description='在项目中是否为默认类型'),
      description?: string(name='description', description='描述'),
      enable?: boolean(name='enable', description='是否启用'),
      gmtAdd?: long(name='gmtAdd', description='添加到项目中的时间'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      identifier?: string(name='identifier', description='工作项类型id'),
      name?: string(name='name', description='工作项类型的名称'),
      nameEn?: string(name='nameEn', description='工作项类型的英文名称'),
      systemDefault?: boolean(name='systemDefault', description='是否系统默认'),
    }
  ](name='workitemTypes', description='工作项类型'),
}

model ListProjectWorkitemTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectWorkitemTypesResponseBody(name='body'),
}

async function listProjectWorkitemTypes(request: ListProjectWorkitemTypesRequest): ListProjectWorkitemTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectWorkitemTypes', 'GET', '/organization/{organizationId}/projects/{projectId}/getWorkitemType', 'json', false, 'json', request);
}

model ListProjectsRequest {
  organizationId: string(name='organizationId', position='Path'),
  category: string(name='category', description='项目类型', position='Query'),
  conditions?: string(name='conditions', position='Query'),
  extraConditions?: string(name='extraConditions', position='Query'),
  maxResults?: long(name='maxResults', description='每页最大返回数量，0-200，默认值20', position='Query'),
  nextToken?: string(name='nextToken', description='分页中的起始序列', position='Query'),
  scope?: string(name='scope', description='公开类型', position='Query'),
}

model ListProjectsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  projects?: [ 
    {
      categoryIdentifier?: string(name='categoryIdentifier', description='类型'),
      creator?: string(name='creator', description='创建人'),
      customCode?: string(name='customCode', description='自定义编号'),
      deleteTime?: long(name='deleteTime', description='删除时间'),
      description?: string(name='description', description='描述信息'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      icon?: string(name='icon', description='项目封面'),
      identifier?: string(name='identifier', description='项目唯一标识符'),
      logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
      name?: string(name='name', description='项目名称'),
      scope?: string(name='scope', description='公开还是私有'),
      statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段'),
      typeIdentifier?: string(name='typeIdentifier', description='类型id'),
    }
  ](name='projects', description='项目信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/organization/{organizationId}/listProjects', 'json', false, 'json', request);
}

model ListProtectedBranchesRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model ListProtectedBranchesResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
      allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
      allowMergeUsers?: [ 
        {
          avatar?: string(name='avatar'),
          email?: string(name='email'),
          id?: long(name='id'),
          name?: string(name='name'),
          tbUserId?: string(name='tbUserId'),
          username?: string(name='username'),
        }
      ](name='allowMergeUsers'),
      allowPushRoles?: [ int32 ](name='allowPushRoles'),
      allowPushUserIds?: [ long ](name='allowPushUserIds'),
      allowPushUsers?: [ 
        {
          avatar?: string(name='avatar'),
          email?: string(name='email'),
          id?: long(name='id'),
          name?: string(name='name'),
          tbUserId?: string(name='tbUserId'),
          username?: string(name='username'),
        }
      ](name='allowPushUsers'),
      branch?: string(name='branch'),
      createdAt?: string(name='createdAt'),
      id?: long(name='id'),
      matches?: [ string ](name='matches'),
      mergeRequestSetting?: {
        allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
        defaultAssignees?: [ 
          {
            avatar?: string(name='avatar'),
            email?: string(name='email'),
            id?: long(name='id'),
            name?: string(name='name'),
            tbUserId?: string(name='tbUserId'),
            username?: string(name='username'),
          }
        ](name='defaultAssignees'),
        isAllowSelfApproval?: boolean(name='isAllowSelfApproval'),
        isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed'),
        isRequired?: boolean(name='isRequired'),
        isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush'),
        minimumApproval?: int32(name='minimumApproval'),
        mrMode?: string(name='mrMode'),
        whiteList?: string(name='whiteList'),
      }(name='mergeRequestSetting'),
      testSettingDTO?: {
        checkConfig?: {
          checkItems?: [ 
            {
              isRequired?: boolean(name='isRequired'),
              name?: string(name='name'),
            }
          ](name='checkItems'),
        }(name='checkConfig'),
        checkTaskQualityConfig?: {
          bizNo?: string(name='bizNo'),
          enabled?: boolean(name='enabled'),
          message?: string(name='message'),
          taskName?: string(name='taskName'),
        }(name='checkTaskQualityConfig'),
        codeGuidelinesDetection?: {
          enabled?: boolean(name='enabled'),
          message?: string(name='message'),
        }(name='codeGuidelinesDetection'),
        isRequired?: boolean(name='isRequired'),
        sensitiveInfoDetection?: {
          enabled?: boolean(name='enabled'),
          message?: string(name='message'),
        }(name='sensitiveInfoDetection'),
      }(name='testSettingDTO'),
      updatedAt?: string(name='updatedAt'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListProtectedBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProtectedBranchesResponseBody(name='body'),
}

async function listProtectedBranches(request: ListProtectedBranchesRequest): ListProtectedBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProtectedBranches', 'GET', '/repository/{repositoryId}/protect_branches', 'json', false, 'json', request);
}

model ListRepositoriesRequest {
  accessToken?: string(name='accessToken', description='accessToken', position='Query'),
  archived?: boolean(name='archived', description='是否列出归档项目', position='Query'),
  orderBy?: string(name='orderBy', description='排序字段', position='Query'),
  organizationId: string(name='organizationId', description='企业ID', position='Query'),
  page?: long(name='page', description='页码', position='Query'),
  perPage?: long(name='perPage', description='每页大小', position='Query'),
  search?: string(name='search', description='搜索关键字', position='Query'),
  sort?: string(name='sort', description='排序方式 (desc: 降序, asc: 升序)', position='Query'),
}

model ListRepositoriesResponseBody = {
  errorCode?: int32(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求requestId'),
  result?: [ 
    {
      id?: long(name='Id', description='代码库Id'),
      accessLevel?: int32(name='accessLevel', description='当前用户在该代码库上的权限类型'),
      archive?: boolean(name='archive', description='代码库是否归档'),
      avatarUrl?: string(name='avatarUrl', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='代码库描述'),
      importStatus?: string(name='importStatus', description='代码库导入状态'),
      lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
      name?: string(name='name', description='代码库名称'),
      nameWithNamespace?: string(name='nameWithNamespace', description='代码库完整名称（含完整组名称）'),
      namespaceId?: long(name='namespaceId', description='上级路径的id'),
      path?: string(name='path', description='代码库路径'),
      pathWithNamespace?: string(name='pathWithNamespace', description='代码库完整路径（含完整组路径）'),
      star?: boolean(name='star', description='是否被收藏'),
      starCount?: long(name='starCount', description='被收藏的数量'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: string(name='visibilityLevel', description='可见性;0标识私有的/10标识企业内公开'),
      webUrl?: string(name='webUrl', description='页面访问时的URL'),
    }
  ](name='result'),
  success?: boolean(name='success', description='调用是否成功'),
  total?: long(name='total', description='总数量'),
}

model ListRepositoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoriesResponseBody(name='body'),
}

async function listRepositories(request: ListRepositoriesRequest): ListRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositories', 'GET', '/repository/list', 'json', false, 'json', request);
}

model ListRepositoryBranchesRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
  page?: long(name='page', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  search?: string(name='search', position='Query'),
  sort?: string(name='sort', position='Query'),
}

model ListRepositoryBranchesResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      commit?: {
        authorEmail?: string(name='authorEmail'),
        authorName?: string(name='authorName'),
        authoredDate?: string(name='authoredDate'),
        committedDate?: string(name='committedDate'),
        committerEmail?: string(name='committerEmail'),
        committerName?: string(name='committerName'),
        createdAt?: string(name='createdAt'),
        id?: string(name='id'),
        message?: string(name='message'),
        parentIds?: [ string ](name='parentIds'),
        shortId?: string(name='shortId'),
        title?: string(name='title'),
      }(name='commit'),
      name?: string(name='name'),
      protected?: string(name='protected'),
    }
  ](name='result'),
  success?: boolean(name='success'),
  total?: long(name='total'),
}

model ListRepositoryBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryBranchesResponseBody(name='body'),
}

async function listRepositoryBranches(request: ListRepositoryBranchesRequest): ListRepositoryBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryBranches', 'GET', '/repository/{repositoryId}/branches', 'json', false, 'json', request);
}

model ListRepositoryCommitDiffRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  sha: string(name='sha', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  contextLine?: int32(name='contextLine', position='Query'),
  organizationId: string(name='organizationId', position='Query'),
}

model ListRepositoryCommitDiffResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      aMode?: string(name='aMode'),
      bMode?: string(name='bMode'),
      deletedFile?: boolean(name='deletedFile'),
      diff?: string(name='diff'),
      isBinary?: boolean(name='isBinary'),
      isNewLfs?: boolean(name='isNewLfs'),
      isOldLfs?: boolean(name='isOldLfs'),
      newFile?: boolean(name='newFile'),
      newId?: string(name='newId'),
      newPath?: string(name='newPath'),
      oldId?: string(name='oldId'),
      oldPath?: string(name='oldPath'),
      renamedFile?: boolean(name='renamedFile'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListRepositoryCommitDiffResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryCommitDiffResponseBody(name='body'),
}

async function listRepositoryCommitDiff(request: ListRepositoryCommitDiffRequest): ListRepositoryCommitDiffResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryCommitDiff', 'GET', '/repository/{repositoryId}/commits/{sha}/diff', 'json', false, 'json', request);
}

model ListRepositoryCommitsRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  end?: string(name='end', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
  page?: long(name='page', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  path?: string(name='path', position='Query'),
  refName: string(name='refName', position='Query'),
  search?: string(name='search', position='Query'),
  showCommentsCount?: boolean(name='showCommentsCount', position='Query'),
  showSignature?: boolean(name='showSignature', position='Query'),
  start?: string(name='start', position='Query'),
}

model ListRepositoryCommitsResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      author?: {
        avatarUrl?: string(name='avatarUrl'),
        email?: string(name='email'),
        externUid?: string(name='externUid'),
        id?: long(name='id'),
        name?: string(name='name'),
        state?: string(name='state'),
        tbUserId?: string(name='tbUserId'),
        username?: string(name='username'),
        websiteUrl?: string(name='websiteUrl'),
      }(name='author'),
      authorEmail?: string(name='authorEmail'),
      authorName?: string(name='authorName'),
      authoredDate?: string(name='authoredDate'),
      commentsCount?: long(name='commentsCount'),
      committedDate?: string(name='committedDate'),
      committer?: {
        avatarUrl?: string(name='avatarUrl'),
        email?: string(name='email'),
        externUid?: string(name='externUid'),
        id?: long(name='id'),
        name?: string(name='name'),
        state?: string(name='state'),
        tbUserId?: string(name='tbUserId'),
        username?: string(name='username'),
        websiteUrl?: string(name='websiteUrl'),
      }(name='committer'),
      committerEmail?: string(name='committerEmail'),
      committerName?: string(name='committerName'),
      createdAt?: string(name='createdAt'),
      id?: string(name='id'),
      message?: string(name='message'),
      parentIds?: [ string ](name='parentIds'),
      shortId?: string(name='shortId'),
      signature?: {
        gpgKeyId?: string(name='gpgKeyId'),
        verificationStatus?: string(name='verificationStatus'),
      }(name='signature'),
      title?: string(name='title'),
    }
  ](name='result'),
  success?: boolean(name='success'),
  total?: long(name='total'),
}

model ListRepositoryCommitsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryCommitsResponseBody(name='body'),
}

async function listRepositoryCommits(request: ListRepositoryCommitsRequest): ListRepositoryCommitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryCommits', 'GET', '/repository/{repositoryId}/commits', 'json', false, 'json', request);
}

model ListRepositoryMemberWithInheritedRequest {
  repositoryId: long(name='repositoryId', description='仓库Id', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', description='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='企业Id', position='Query'),
}

model ListRepositoryMemberWithInheritedResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel'),
      avatarUrl?: string(name='avatarUrl'),
      email?: string(name='email'),
      externUserId?: string(name='externUserId'),
      id?: long(name='id'),
      inherited?: {
        id?: long(name='id'),
        name?: string(name='name'),
        nameWithNamespace?: string(name='nameWithNamespace'),
        path?: string(name='path'),
        pathWithNamespace?: string(name='pathWithNamespace'),
        type?: string(name='type'),
        visibilityLevel?: string(name='visibilityLevel'),
      }(name='inherited'),
      name?: string(name='name'),
      state?: string(name='state'),
      username?: string(name='username'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListRepositoryMemberWithInheritedResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryMemberWithInheritedResponseBody(name='body'),
}

async function listRepositoryMemberWithInherited(request: ListRepositoryMemberWithInheritedRequest): ListRepositoryMemberWithInheritedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryMemberWithInherited', 'GET', '/repository/{repositoryId}/members/list', 'json', false, 'json', request);
}

model ListRepositoryTreeRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
  path?: string(name='path', position='Query'),
  refName?: string(name='refName', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListRepositoryTreeResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      id?: string(name='id'),
      isLFS?: boolean(name='isLFS'),
      mode?: string(name='mode'),
      name?: string(name='name'),
      path?: string(name='path'),
      type?: string(name='type'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListRepositoryTreeResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryTreeResponseBody(name='body'),
}

async function listRepositoryTree(request: ListRepositoryTreeRequest): ListRepositoryTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryTree', 'GET', '/repository/{repositoryId}/files/tree', 'json', false, 'json', request);
}

model ListRepositoryWebhookRequest {
  repositoryId: long(name='repositoryId', description='代码仓库Id', minimum=0, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', description='accessToken', position='Query'),
  organizationId: string(name='organizationId', description='企业Id', position='Query'),
  page?: long(name='page', description='页码', minimum=0, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='pageSize', description='每页数据量', minimum=0, maximum=100, position='Query'),
}

model ListRepositoryWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createdAt?: string(name='createdAt'),
      description?: string(name='description'),
      enableSslVerification?: boolean(name='enableSslVerification'),
      id?: long(name='id'),
      lastTestResult?: string(name='lastTestResult'),
      mergeRequestsEvents?: boolean(name='mergeRequestsEvents'),
      noteEvents?: boolean(name='noteEvents'),
      projectId?: long(name='projectId'),
      pushEvents?: boolean(name='pushEvents'),
      secretToken?: string(name='secretToken'),
      tagPushEvents?: boolean(name='tagPushEvents'),
      url?: string(name='url'),
    }
  ](name='result'),
  success?: boolean(name='success'),
  total?: long(name='total'),
}

model ListRepositoryWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: ListRepositoryWebhookResponseBody(name='body'),
}

async function listRepositoryWebhook(request: ListRepositoryWebhookRequest): ListRepositoryWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositoryWebhook', 'GET', '/repository/{repositoryId}/webhooks/list', 'json', false, 'json', request);
}

model ListResourceMembersRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  resourceType: string(name='resourceType', description='资源类型流水线 pipeline 部署组 deployGroup', position='Path'),
  resourceId?: long(name='resourceId', position='Path'),
}

model ListResourceMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  resourceMembers?: [ 
    {
      accountId?: string(name='accountId', description='账号id'),
      roleName?: string(name='roleName', description='角色'),
      username?: string(name='username', description='用户名称'),
    }
  ](name='resourceMembers', description='成员'),
  success?: boolean(name='success', description='请求id，每次请求都是唯一值，便于后续排查问题'),
}

model ListResourceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceMembersResponseBody(name='body'),
}

async function listResourceMembers(request: ListResourceMembersRequest): ListResourceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceMembers', 'GET', '/organization/{organizationId}/{resourceType}/{resourceId}/members', 'json', false, 'json', request);
}

model ListServiceConnectionsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  sericeConnectionType: string(name='sericeConnectionType', description='aliyun_code  阿里云代码 Codeup       Codeup  Gitee        码云 github       Github ack       容器服务Kubernetes(ACK) docker_register_aliyun    容器镜像服务(ACR) ecs          对象存储(OSS) edas          企业级分布式应用(EDAS) emas         移动研发平台(EMAS) fc            阿里云函数计算(FC) kubernetes     自建k8s集群 oss            对象存储(OSS) PACKAGES       制品仓库 ros   资源编排服务(ROS) sae       Serverless应用引擎(SAE)', position='Query'),
}

model ListServiceConnectionsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  serviceConnections?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      id?: long(name='id', description='服务连接Id'),
      name?: string(name='name', description='服务连接名称'),
      ownerAccountId?: long(name='ownerAccountId', description='拥有者阿里云账号id'),
      type?: string(name='type', description='服务连接类型'),
    }
  ](name='serviceConnections', description='服务连接'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceConnections', 'GET', '/organization/{organizationId}/serviceConnections', 'json', false, 'json', request);
}

model ListSprintsRequest {
  organizationId: string(name='organizationId', position='Path'),
  maxResults?: long(name='maxResults', description='每页最大返回数量，0-200，默认值20', position='Query'),
  nextToken?: string(name='nextToken', description='分页中的起始序列', position='Query'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Query'),
  spaceType: string(name='spaceType', description='类型', position='Query'),
}

model ListSprintsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sprints?: [ 
    {
      creator?: string(name='creator', description='创建人id'),
      description?: string(name='description', description='描述信息'),
      endDate?: long(name='endDate', description='结束时间'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='迭代唯一标识符'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='迭代名称'),
      scope?: string(name='scope', description='可见范围'),
      spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
      startDate?: long(name='startDate', description='开始时间'),
      status?: string(name='status', description='状态，未开始:Todo, 进行中:Doing, 已完成:Done'),
    }
  ](name='sprints', description='迭代信息'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListSprintsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSprintsResponseBody(name='body'),
}

async function listSprints(request: ListSprintsRequest): ListSprintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSprints', 'GET', '/organization/{organizationId}/sprints/list', 'json', false, 'json', request);
}

model ListVariableGroupsRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  maxResults?: int32(name='maxResults', description='最大返回数，默认30', position='Query'),
  nextToken?: string(name='nextToken', description='分页token，上一次请求的出参nextToken', position='Query'),
  pageOrder?: string(name='pageOrder', description='排序顺序', position='Query'),
  pageSort?: string(name='pageSort', description='排序条件', position='Query'),
}

model ListVariableGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一次查询的token，为空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='变量组总数'),
  variableGroups?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='变量组描述'),
      id?: long(name='id', description='变量组id'),
      modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
      name?: string(name='name', description='变量组名称'),
      relatedPipelines?: [ 
        {
          id?: long(name='id', description='关联的流水线Id'),
          name?: string(name='name', description='关联的流水线名称'),
        }
      ](name='relatedPipelines', description='关联的流水线'),
      updateTime?: long(name='updateTime', description='更新时间'),
      variables?: [ 
        {
          isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
          name?: string(name='name', description='变量名'),
          value?: string(name='value', description='变量值'),
        }
      ](name='variables', description='变量'),
    }
  ](name='variableGroups', description='变量组'),
}

model ListVariableGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVariableGroupsResponseBody(name='body'),
}

async function listVariableGroups(request: ListVariableGroupsRequest): ListVariableGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVariableGroups', 'GET', '/organization/{organizationId}/variableGroups', 'json', false, 'json', request);
}

model ListWorkItemAllFieldsRequest {
  organizationId: string(name='organizationId', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Query'),
  spaceType: string(name='spaceType', description='资源类型', position='Query'),
  workitemTypeIdentifier: string(name='workitemTypeIdentifier', description='工作项类型id，工作项类型的列表和id可以从ListProjectWorkitemType中获取', position='Query'),
}

model ListWorkItemAllFieldsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  fields?: [ 
    {
      className?: string(name='className', description='字段类型'),
      creator?: string(name='creator', description='创建人id'),
      defaultValue?: string(name='defaultValue', description='默认值'),
      description?: string(name='description', description='描述信息'),
      format?: string(name='format', description='字段格式'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='字段唯一标识符'),
      isRequired?: boolean(name='isRequired', description='是否必填'),
      isShowWhenCreate?: boolean(name='isShowWhenCreate', description='创建时是否展示'),
      isSystemRequired?: boolean(name='isSystemRequired', description='是否是系统必须字段，比如：负责人、状态等。'),
      linkWithService?: string(name='linkWithService', description='联动的服务，比如：迭代 迭代服务开启/关闭，这个字段字段加进/剔除出对应的模板； 字段模板里，这类字段不能手动添加或删除'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='字段名称'),
      options?: [ 
        {
          displayValue?: string(name='displayValue', description='根据语言环境获取当前展示的值'),
          fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
          identifier?: string(name='identifier', description='待选值的唯一标识'),
          level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
          position?: long(name='position', description='待选值顺序'),
          value?: string(name='value', description='待选值中文名称'),
          valueEn?: string(name='valueEn', description='待选值英文名称'),
        }
      ](name='options', description='待选值'),
      resourceType?: string(name='resourceType', description='区分不同的适用对象'),
      type?: string(name='type', description='区分不同的类型，如系统字段、用户自定义字段'),
    }
  ](name='fields', description='字段信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model ListWorkItemAllFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkItemAllFieldsResponseBody(name='body'),
}

async function listWorkItemAllFields(request: ListWorkItemAllFieldsRequest): ListWorkItemAllFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkItemAllFields', 'GET', '/organization/{organizationId}/workitems/fields/listAll', 'json', false, 'json', request);
}

model ListWorkItemWorkFlowStatusRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id', position='Path'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Query'),
  spaceType: string(name='spaceType', description='空间类型', position='Query'),
  workitemCategoryIdentifier: string(name='workitemCategoryIdentifier', description='工作项大类型', position='Query'),
  workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项小类型id', position='Query'),
}

model ListWorkItemWorkFlowStatusResponseBody = {
  errorCode?: string(name='errorCode', description='错误返回码'),
  errorMessage?: string(name='errorMessage', description='错误返回信息'),
  requestId?: string(name='requestId', description='openapi平台的request id'),
  statuses?: [ 
    {
      creator?: string(name='creator', description='状态的创建人'),
      description?: string(name='description', description='描述'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='更新时间'),
      identifier?: string(name='identifier', description='工作流状态id'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='工作流状态名称'),
      resourceType?: string(name='resourceType', description='状态作用的资源类型'),
      source?: string(name='source', description='状态来源'),
      workflowStageIdentifier?: string(name='workflowStageIdentifier', description='阶段信息-阶段的唯一标识'),
      workflowStageName?: string(name='workflowStageName', description='阶段信息-名称'),
    }
  ](name='statuses', description='工作流状态'),
  success?: boolean(name='success', description='接口是否正常返回'),
}

model ListWorkItemWorkFlowStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkItemWorkFlowStatusResponseBody(name='body'),
}

async function listWorkItemWorkFlowStatus(request: ListWorkItemWorkFlowStatusRequest): ListWorkItemWorkFlowStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkItemWorkFlowStatus', 'GET', '/organization/{organizationId}/workitems/workflow/listWorkflowStatus', 'json', false, 'json', request);
}

model ListWorkitemTimeRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  workitemId: string(name='workitemId', description='工作项唯一标识', position='Path'),
}

model ListWorkitemTimeResponseBody = {
  code?: long(name='code', description='接口返回code'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitemTime?: [ 
    {
      actualTime?: long(name='actualTime', description='实际工时，小时为单位'),
      description?: string(name='description', description='工时描述信息'),
      gmtCreate?: long(name='gmtCreate', description='工时记录的创建时间'),
      gmtEnd?: long(name='gmtEnd', description='结束时间'),
      gmtModified?: long(name='gmtModified', description='工时记录的修改时间'),
      gmtStart?: long(name='gmtStart', description='开始时间'),
      identifier?: string(name='identifier', description='工时唯一标识'),
      recordUser?: string(name='recordUser', description='登记人的account Id'),
      type?: string(name='type', description='工时类型'),
      workitemIdentifier?: string(name='workitemIdentifier', description='工作项id，唯一标识'),
    }
  ](name='workitemTime', description='工时信息'),
}

model ListWorkitemTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkitemTimeResponseBody(name='body'),
}

async function listWorkitemTime(request: ListWorkitemTimeRequest): ListWorkitemTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkitemTime', 'GET', '/organization/{organizationId}/workitems/{workitemId}/time/list', 'json', false, 'json', request);
}

model ListWorkitemsRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  category: string(name='category', description='工作项类型，需求为Req，缺陷为Bug，任务为Task，风险为Risk', position='Query'),
  conditions?: string(name='conditions', description='过滤条件', position='Query'),
  extraConditions?: string(name='extraConditions', description='额外条件', position='Query'),
  groupCondition?: string(name='groupCondition', description='分组条件', position='Query'),
  maxResults?: string(name='maxResults', description='每页最大返回数量，0-200，默认值20', position='Query'),
  nextToken?: string(name='nextToken', description='分页中的起始序列', position='Query'),
  orderBy?: string(name='orderBy', description='排序顺序', position='Query'),
  searchType?: string(name='searchType', description='查询类型', position='Query'),
  spaceIdentifier: string(name='spaceIdentifier', description='项目id', position='Query'),
  spaceType: string(name='spaceType', description='项目类型', position='Query'),
}

model ListWorkitemsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
  workitems?: [ 
    {
      assignedTo?: string(name='assignedTo', description='负责人aliyunPk'),
      categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
      creator?: string(name='creator', description='创建人aliyunPK'),
      document?: string(name='document', description='工作项内容'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='工作项唯一标识'),
      logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
      modifier?: string(name='modifier', description='修改人aliyunPK'),
      parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
      serialNumber?: string(name='serialNumber', description='编号'),
      spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
      spaceName?: string(name='spaceName', description='所属项目名称'),
      spaceType?: string(name='spaceType', description='项目类型'),
      sprintIdentifier?: string(name='sprintIdentifier', description='迭代id'),
      status?: string(name='status', description='状态名称'),
      statusIdentifier?: string(name='statusIdentifier', description='状态唯一标识'),
      statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
      subject?: string(name='subject', description='工作项标题'),
      updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
      workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
    }
  ](name='workitems', description='工作项信息'),
}

model ListWorkitemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkitemsResponseBody(name='body'),
}

async function listWorkitems(request: ListWorkitemsRequest): ListWorkitemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkitems', 'GET', '/organization/{organizationId}/listWorkitems', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量，默认10，最大100', position='Query'),
  nextToken?: string(name='nextToken', description='用来标记当前开始读取的位置，置空表示从头开始', position='Query'),
  statusList?: [ string ](name='statusList', description='枚举值：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中', shrink='simple', position='Query'),
  workspaceTemplateList?: [ string ](name='workspaceTemplateList', description='空间模板列表', shrink='simple', position='Query'),
}

model ListWorkspacesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  maxResults?: int32(name='maxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  totalCount?: int32(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  workspaces?: [ 
    {
      codeUrl?: string(name='codeUrl', description='代码来源URL'),
      codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
      createTime?: string(name='createTime', description='创建时间戳'),
      id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
      name?: string(name='name', description='工作空间名称'),
      spec?: string(name='spec', description='机器规格'),
      status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
      template?: string(name='template', description='工作空间模板'),
      userId?: string(name='userId', description='用户阿里云PK'),
    }
  ](name='workspaces', description='工作空间列表'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/api/workspaces', 'json', false, 'json', request);
}

model LogPipelineJobRunRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如https://flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  jobId: long(name='jobId', position='Path'),
  pipelineRunId?: long(name='pipelineRunId', position='Path'),
}

model LogPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  log?: {
    content?: string(name='content'),
    more?: boolean(name='more'),
  }(name='log'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model LogPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: LogPipelineJobRunResponseBody(name='body'),
}

async function logPipelineJobRun(request: LogPipelineJobRunRequest): LogPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogPipelineJobRun', 'GET', '/organization/{organizationId}/pipeline/{pipelineId}/pipelineRun/{pipelineRunId}/job/{jobId}/logs', 'json', false, 'json', request);
}

model LogVMDeployMachineRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
  machineSn: string(name='machineSn', description='机器SN', position='Path'),
}

model LogVMDeployMachineResponseBody = {
  deployMachineLog?: {
    aliyunRegion?: string(name='aliyunRegion', description='部署地域'),
    deployBeginTime?: long(name='deployBeginTime', description='部署开始时间'),
    deployEndTime?: long(name='deployEndTime', description='部署结束时间'),
    deployLog?: string(name='deployLog', description='部署日志'),
    deployLogPath?: string(name='deployLogPath', description='部署日志路径'),
  }(name='deployMachineLog', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model LogVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: LogVMDeployMachineResponseBody(name='body'),
}

async function logVMDeployMachine(request: LogVMDeployMachineRequest): LogVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogVMDeployMachine', 'GET', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/log', 'json', false, 'json', request);
}

model PassPipelineValidateRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如https://flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  pipelineRunId: long(name='pipelineRunId', description='流水线运行实例id', position='Path'),
  jobId: string(name='jobId', description='1111', position='Path'),
}

model PassPipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model PassPipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: PassPipelineValidateResponseBody(name='body'),
}

async function passPipelineValidate(request: PassPipelineValidateRequest): PassPipelineValidateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PassPipelineValidate', 'POST', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/pass', 'json', false, 'json', request);
}

model RefusePipelineValidateRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  pipelineRunId: long(name='pipelineRunId', description='1', position='Path'),
  jobId: string(name='jobId', description='11111', position='Path'),
}

model RefusePipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RefusePipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: RefusePipelineValidateResponseBody(name='body'),
}

async function refusePipelineValidate(request: RefusePipelineValidateRequest): RefusePipelineValidateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefusePipelineValidate', 'POST', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/refuse', 'json', false, 'json', request);
}

model ReleaseWorkspaceRequest {
  workspaceId: string(name='workspaceId', description='工作空间唯一标识', position='Path'),
}

model ReleaseWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model ReleaseWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseWorkspaceResponseBody(name='body'),
}

async function releaseWorkspace(request: ReleaseWorkspaceRequest): ReleaseWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseWorkspace', 'DELETE', '/api/workspaces/{workspaceId}/release', 'json', false, 'json', request);
}

model ResetSshKeyRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
}

model ResetSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResetSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSshKeyResponseBody(name='body'),
}

async function resetSshKey(request: ResetSshKeyRequest): ResetSshKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResetSshKey', 'PUT', '/organization/{organizationId}/sshKey', 'json', false, 'json', request);
}

model ResumeVMDeployOrderRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
}

model ResumeVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResumeVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeVMDeployOrderResponseBody(name='body'),
}

async function resumeVMDeployOrder(request: ResumeVMDeployOrderRequest): ResumeVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeVMDeployOrder', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/resume', 'json', false, 'json', request);
}

model RetryPipelineJobRunRequest {
  organizationId: string(name='organizationId', position='Path'),
  pipelineId: long(name='pipelineId', position='Path'),
  pipelineRunId: long(name='pipelineRunId', position='Path'),
  jobId: long(name='jobId', position='Path'),
}

model RetryPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model RetryPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: RetryPipelineJobRunResponseBody(name='body'),
}

async function retryPipelineJobRun(request: RetryPipelineJobRunRequest): RetryPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}', 'json', false, 'json', request);
}

model RetryVMDeployMachineRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
  machineSn: string(name='machineSn', description='机器SN', position='Path'),
}

model RetryVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RetryVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: RetryVMDeployMachineResponseBody(name='body'),
}

async function retryVMDeployMachine(request: RetryVMDeployMachineRequest): RetryVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryVMDeployMachine', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/retry', 'json', false, 'json', request);
}

model SkipPipelineJobRunRequest {
  organizationId: string(name='organizationId', position='Path'),
  pipelineId: long(name='pipelineId', position='Path'),
  pipelineRunId: long(name='pipelineRunId', position='Path'),
  jobId: long(name='jobId', position='Path'),
}

model SkipPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model SkipPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPipelineJobRunResponseBody(name='body'),
}

async function skipPipelineJobRun(request: SkipPipelineJobRunRequest): SkipPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SkipPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/skip', 'json', false, 'json', request);
}

model SkipVMDeployMachineRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
  machineSn: string(name='machineSn', description='机器SN', position='Path'),
}

model SkipVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model SkipVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: SkipVMDeployMachineResponseBody(name='body'),
}

async function skipVMDeployMachine(request: SkipVMDeployMachineRequest): SkipVMDeployMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SkipVMDeployMachine', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/skip', 'json', false, 'json', request);
}

model StartPipelineRunRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如  https:// flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  params?: string(name='params', description='流水线运行参数,json字符串 branchModeBranchs  分支模式运行的分支 envs  环境变量 runningBranchs 运行分支 runningTags  运行代码tag comment  运行备注', position='Body'),
}

model StartPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(request: StartPipelineRunRequest): StartPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipelineRun', 'POST', '/organizations/{organizationId}/pipelines/{pipelineId}/run', 'json', true, 'form', request);
}

model StopPipelineJobRunRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如 https:// flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  pipelineRunId: long(name='pipelineRunId', description='流水线运行实例id', position='Path'),
  jobId: long(name='jobId', description='流水线运行任务Id', position='Path'),
}

model StopPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineJobRunResponseBody(name='body'),
}

async function stopPipelineJobRun(request: StopPipelineJobRunRequest): StopPipelineJobRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopPipelineJobRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/stop', 'json', false, 'json', request);
}

model StopPipelineRunRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  pipelineId: long(name='pipelineId', description='流水线ID，可在流水线链接中获取，如  https:// flow.aliyun.com/pipelines/【PipelineId】/current', position='Path'),
  pipelineRunId: long(name='pipelineRunId', description='流水线运行实例id', position='Path'),
}

model StopPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineRunResponseBody(name='body'),
}

async function stopPipelineRun(request: StopPipelineRunRequest): StopPipelineRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopPipelineRun', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/stop', 'json', false, 'json', request);
}

model StopVMDeployOrderRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId: long(name='pipelineId', description='12222', position='Path'),
  deployOrderId: long(name='deployOrderId', description='部署单ID', position='Path'),
}

model StopVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: StopVMDeployOrderResponseBody(name='body'),
}

async function stopVMDeployOrder(request: StopVMDeployOrderRequest): StopVMDeployOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopVMDeployOrder', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/stop', 'json', false, 'json', request);
}

model TriggerRepositoryMirrorSyncRequest {
  repositoryId: long(name='repositoryId', description='代码库ID', minimum=1, maximum=9223372036854775807, position='Path'),
  accessToken?: string(name='accessToken', description='个人访问令牌。 使用阿里云AK+SK或使用STS临时授权方式不需要传该字段', position='Query'),
  account?: string(name='account', description='远程同步库克隆账号', position='Query'),
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https://devops.aliyun.com/organization/', position='Query'),
  token?: string(name='token', description='远程同步库克隆令牌', position='Query'),
}

model TriggerRepositoryMirrorSyncResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: {
    result?: boolean(name='result', description='仓库同步触发结果'),
  }(name='result', description='响应结果'),
  success?: boolean(name='success', description='请求结果'),
}

model TriggerRepositoryMirrorSyncResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerRepositoryMirrorSyncResponseBody(name='body'),
}

async function triggerRepositoryMirrorSync(request: TriggerRepositoryMirrorSyncRequest): TriggerRepositoryMirrorSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TriggerRepositoryMirrorSync', 'POST', '/repository/{repositoryId}/mirror', 'json', false, 'json', request);
}

model UpdateFileRequest {
  repositoryId: string(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  branchName: string(name='branchName', position='Body'),
  commitMessage: string(name='commitMessage', position='Body'),
  content: string(name='content', position='Body'),
  encoding?: string(name='encoding', position='Body'),
  newPath: string(name='newPath', position='Body'),
  oldPath: string(name='oldPath', position='Body'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    branchName?: string(name='branchName'),
    filePath?: string(name='filePath'),
  }(name='result'),
  success?: boolean(name='success'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFileResponseBody(name='body'),
}

async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFile', 'PUT', '/repository/{repositoryId}/files/update', 'json', false, 'json', request);
}

model UpdateFlowTagRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  id: long(name='id', position='Path'),
  color: string(name='color', position='Query'),
  flowTagGroupId: long(name='flowTagGroupId', position='Query'),
  name: string(name='name', maxLength=20, position='Query'),
}

model UpdateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowTagResponseBody(name='body'),
}

async function updateFlowTag(request: UpdateFlowTagRequest): UpdateFlowTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFlowTag', 'PUT', '/organization/{organizationId}/flow/tags/{id}', 'json', false, 'json', request);
}

model UpdateFlowTagGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  id: string(name='id', position='Path'),
  name: string(name='name', maxLength=20, position='Query'),
}

model UpdateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowTagGroupResponseBody(name='body'),
}

async function updateFlowTagGroup(request: UpdateFlowTagGroupRequest): UpdateFlowTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFlowTagGroup', 'PUT', '/organization/{organizationId}/flow/tagGroups/{id}', 'json', false, 'json', request);
}

model UpdateHostGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  id: long(name='id', position='Path'),
  aliyunRegion?: string(name='aliyunRegion', position='Body'),
  ecsLabelKey?: string(name='ecsLabelKey', position='Body'),
  ecsLabelValue?: string(name='ecsLabelValue', position='Body'),
  ecsType?: string(name='ecsType', position='Body'),
  envId?: string(name='envId', position='Body'),
  machineInfos?: string(name='machineInfos', position='Body'),
  name: string(name='name', position='Body'),
  serviceConnectionId: long(name='serviceConnectionId', position='Body'),
  tagIds?: string(name='tagIds', position='Body'),
  type: string(name='type', position='Body'),
}

model UpdateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model UpdateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHostGroupResponseBody(name='body'),
}

async function updateHostGroup(request: UpdateHostGroupRequest): UpdateHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHostGroup', 'PUT', '/organization/{organizationId}/hostGroups/{id}', 'json', true, 'form', request);
}

model UpdatePipelineRequest {
  organizationId: string(name='organizationId', position='Path'),
  basicInfo: {
    envId?: long(name='envId'),
    groupId?: long(name='groupId'),
    name: string(name='name'),
    pipelineId: long(name='pipelineId'),
    tagIds?: string(name='tagIds'),
  }(name='basicInfo', position='Body'),
  pipelineYaml: string(name='pipelineYaml', position='Body'),
  settings?: {
    caches?: [ 
      {
        desc?: string(name='desc'),
        directory?: string(name='directory'),
        disable?: boolean(name='disable'),
      }
    ](name='caches'),
    globalParams?: [ 
      {
        key?: string(name='key'),
        mask?: boolean(name='mask'),
        runningConfig?: boolean(name='runningConfig'),
        value?: string(name='value'),
      }
    ](name='globalParams'),
    runnerCacheMode?: string(name='runnerCacheMode'),
  }(name='settings', position='Body'),
  triggerInfo?: {
    scheduled?: {
      daysOfWeek?: string(name='daysOfWeek'),
      fixedTime?: string(name='fixedTime'),
      from?: string(name='from'),
      interval?: int32(name='interval'),
      onlySourceChange?: boolean(name='onlySourceChange'),
      to?: string(name='to'),
      type?: string(name='type'),
    }(name='scheduled'),
    webhookEnable?: boolean(name='webhookEnable'),
  }(name='triggerInfo', position='Body'),
}

model UpdatePipelineResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  object?: long(name='object'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model UpdatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineResponseBody(name='body'),
}

async function updatePipeline(request: UpdatePipelineRequest): UpdatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipeline', 'PUT', '/organization/{organizationId}/pipelines', 'json', false, 'json', request);
}

model UpdatePipelineBaseInfoRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如https://devops.aliyun.com/organization/【OrganizationId】', position='Path'),
  pipelineId?: string(name='pipelineId', position='Path'),
  envId?: long(name='envId', position='Query'),
  pipelineName: string(name='pipelineName', position='Query'),
  tagList?: string(name='tagList', position='Query'),
}

model UpdatePipelineBaseInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdatePipelineBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineBaseInfoResponseBody(name='body'),
}

async function updatePipelineBaseInfo(request: UpdatePipelineBaseInfoRequest): UpdatePipelineBaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineBaseInfo', 'PUT', '/organization/{organizationId}/pipelines/{pipelineId}/baseInfo', 'json', false, 'json', request);
}

model UpdatePipelineGroupRequest {
  organizationId: string(name='organizationId', position='Path'),
  groupId: long(name='groupId', position='Path'),
  name: string(name='name', maxLength=40, position='Query'),
}

model UpdatePipelineGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model UpdatePipelineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineGroupResponseBody(name='body'),
}

async function updatePipelineGroup(request: UpdatePipelineGroupRequest): UpdatePipelineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineGroup', 'PUT', '/organization/{organizationId}/pipelineGroups/{groupId}', 'json', false, 'json', request);
}

model UpdateProjectMemberRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  projectId: string(name='projectId', description='项目id', position='Path'),
  roleIdentifier: string(name='roleIdentifier', description='角色id', position='Body'),
  targetIdentifier: string(name='targetIdentifier', description='资源id，也就是项目id', position='Body'),
  targetType: string(name='targetType', description='资源类型', position='Body'),
  userIdentifier: string(name='userIdentifier', description='用户id', position='Body'),
  userType: string(name='userType', description='用户类型', position='Body'),
}

model UpdateProjectMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  member?: {
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    id?: string(name='id', description='id'),
    roleIdentifier?: string(name='roleIdentifier', description='角色id'),
    targetIdentifier?: string(name='targetIdentifier', description='资源id，也就是项目id'),
    targetType?: string(name='targetType', description='资源类型'),
    userIdentifier?: string(name='userIdentifier', description='用户id'),
    userType?: string(name='userType', description='用户类型'),
  }(name='member', description='成员信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model UpdateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectMemberResponseBody(name='body'),
}

async function updateProjectMember(request: UpdateProjectMemberRequest): UpdateProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectMember', 'POST', '/organization/{organizationId}/projects/{projectId}/updateMember', 'json', false, 'json', request);
}

model UpdateProtectedBranchesRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  id: long(name='id', position='Path,Body'),
  accessToken?: string(name='accessToken', description='accessToken（选填），使用AK方式调用时无需填accessToken', position='Query'),
  allowMergeRoles?: [ int32 ](name='allowMergeRoles', position='Body'),
  allowMergeUserIds?: [ string ](name='allowMergeUserIds', position='Body'),
  allowPushRoles?: [ int32 ](name='allowPushRoles', position='Body'),
  allowPushUserIds?: [ string ](name='allowPushUserIds', position='Body'),
  branch?: string(name='branch', position='Body'),
  mergeRequestSetting?: {
    allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
    defaultAssignees?: [ string ](name='defaultAssignees'),
    isAllowSelfApproval?: boolean(name='isAllowSelfApproval'),
    isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed'),
    isRequired?: boolean(name='isRequired'),
    isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush'),
    minimumApproval?: int32(name='minimumApproval'),
    mrMode?: string(name='mrMode'),
    whiteList?: string(name='whiteList'),
  }(name='mergeRequestSetting', position='Body'),
  testSettingDTO?: {
    checkConfig?: {
      checkItems?: [ 
        {
          isRequired?: boolean(name='isRequired'),
          name?: string(name='name'),
        }
      ](name='checkItems'),
    }(name='checkConfig'),
    checkTaskQualityConfig?: {
      bizNo?: string(name='bizNo'),
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
      taskName?: string(name='taskName'),
    }(name='checkTaskQualityConfig'),
    codeGuidelinesDetection?: {
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
    }(name='codeGuidelinesDetection'),
    isRequired?: boolean(name='isRequired'),
    sensitiveInfoDetection?: {
      enabled?: boolean(name='enabled'),
      message?: string(name='message'),
    }(name='sensitiveInfoDetection'),
  }(name='testSettingDTO', position='Body'),
  organizationId?: string(name='organizationId', position='Query'),
}

model UpdateProtectedBranchesResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    allowMergeRoles?: [ int32 ](name='allowMergeRoles'),
    allowMergeUserIds?: [ long ](name='allowMergeUserIds'),
    allowPushRoles?: [ int32 ](name='allowPushRoles'),
    allowPushUserIds?: [ long ](name='allowPushUserIds'),
    branch?: string(name='branch'),
    id?: long(name='id'),
    mergeRequestSetting?: {
      allowMergeRequestRoles?: [ int32 ](name='allowMergeRequestRoles'),
      defaultAssignees?: [ string ](name='defaultAssignees'),
      isAllowSelfApproval?: boolean(name='isAllowSelfApproval'),
      isRequireDiscussionProcessed?: boolean(name='isRequireDiscussionProcessed'),
      isRequired?: boolean(name='isRequired'),
      isResetApprovalWhenNewPush?: boolean(name='isResetApprovalWhenNewPush'),
      minimumApproval?: int32(name='minimumApproval'),
      mrMode?: string(name='mrMode'),
      whiteList?: string(name='whiteList'),
    }(name='mergeRequestSetting'),
    testSettingDTO?: {
      checkConfig?: {
        checkItems?: [ 
          {
            isRequired?: boolean(name='isRequired'),
            name?: string(name='name'),
          }
        ](name='checkItems'),
      }(name='checkConfig'),
      checkTaskQualityConfig?: {
        bizNo?: string(name='bizNo'),
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
        taskName?: string(name='taskName'),
      }(name='checkTaskQualityConfig'),
      codeGuidelinesDetection?: {
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
      }(name='codeGuidelinesDetection'),
      isRequired?: boolean(name='isRequired'),
      sensitiveInfoDetection?: {
        enabled?: boolean(name='enabled'),
        message?: string(name='message'),
      }(name='sensitiveInfoDetection'),
    }(name='testSettingDTO'),
  }(name='result'),
  success?: boolean(name='success'),
}

model UpdateProtectedBranchesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProtectedBranchesResponseBody(name='body'),
}

async function updateProtectedBranches(request: UpdateProtectedBranchesRequest): UpdateProtectedBranchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProtectedBranches', 'PUT', '/{repositoryId}/protect_branches/{id}', 'json', false, 'json', request);
}

model UpdateRepositoryRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  adminSettingLanguage?: string(name='adminSettingLanguage', position='Body'),
  avatar?: string(name='avatar', position='Body'),
  buildsEnabled?: boolean(name='buildsEnabled', position='Body'),
  checkEmail?: boolean(name='checkEmail', position='Body'),
  defaultBranch?: string(name='defaultBranch', position='Body'),
  description?: string(name='description', position='Body'),
  id?: long(name='id', position='Body'),
  issuesEnabled?: boolean(name='issuesEnabled', position='Body'),
  mergeRequestsEnabled?: boolean(name='mergeRequestsEnabled', position='Body'),
  name?: string(name='name', position='Body'),
  openCloneDownloadControl?: boolean(name='openCloneDownloadControl', position='Body'),
  path?: string(name='path', position='Body'),
  projectCloneDownloadMethodList?: [ 
    {
      allowed?: boolean(name='allowed'),
      permissionCode?: string(name='permissionCode'),
    }
  ](name='projectCloneDownloadMethodList', position='Body'),
  projectCloneDownloadRoleList?: [ 
    {
      allowed?: boolean(name='allowed'),
      roleCode?: int32(name='roleCode'),
    }
  ](name='projectCloneDownloadRoleList', position='Body'),
  snippetsEnabled?: boolean(name='snippetsEnabled', position='Body'),
  visibilityLevel?: int32(name='visibilityLevel', position='Body'),
  wikiEnabled?: boolean(name='wikiEnabled', position='Body'),
  organizationId: string(name='organizationId', description='A short description of struct', position='Query'),
}

model UpdateRepositoryResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    archived?: boolean(name='archived'),
    avatarUrl?: string(name='avatarUrl'),
    buildsEnabled?: boolean(name='buildsEnabled'),
    createdAt?: string(name='createdAt'),
    creatorId?: long(name='creatorId'),
    defaultBranch?: string(name='defaultBranch'),
    description?: string(name='description'),
    httpUrlToRepo?: string(name='httpUrlToRepo'),
    id?: long(name='id'),
    issuesEnabled?: boolean(name='issuesEnabled'),
    lastActivityAt?: string(name='lastActivityAt'),
    mergeRequestsEnabled?: boolean(name='mergeRequestsEnabled'),
    name?: string(name='name'),
    nameWithNamespace?: string(name='nameWithNamespace'),
    namespace?: {
      avatar?: string(name='avatar'),
      createdAt?: string(name='createdAt'),
      description?: string(name='description'),
      id?: long(name='id'),
      name?: string(name='name'),
      ownerId?: long(name='ownerId'),
      path?: string(name='path'),
      updatedAt?: string(name='updatedAt'),
      visibilityLevel?: int32(name='visibilityLevel'),
    }(name='namespace'),
    path?: string(name='path'),
    pathWithNamespace?: string(name='pathWithNamespace'),
    snippetsEnabled?: boolean(name='snippetsEnabled'),
    sshUrlToRepo?: string(name='sshUrlToRepo'),
    visibilityLevel?: int32(name='visibilityLevel'),
    webUrl?: string(name='webUrl'),
    wikiEnabled?: boolean(name='wikiEnabled'),
  }(name='result'),
  success?: boolean(name='success'),
}

model UpdateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepositoryResponseBody(name='body'),
}

async function updateRepository(request: UpdateRepositoryRequest): UpdateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepository', 'PUT', '/repository/{repositoryId}', 'json', false, 'json', request);
}

model UpdateRepositoryMemberRequest {
  repositoryId: long(name='repositoryId', position='Path'),
  aliyunPk: string(name='aliyunPk', position='Path'),
  accessToken?: string(name='accessToken', position='Query'),
  accessLevel?: int32(name='accessLevel', position='Body'),
  expireAt?: string(name='expireAt', position='Body'),
  memberType?: string(name='memberType', position='Body'),
  relatedId?: string(name='relatedId', position='Body'),
  relatedInfos?: [ 
    {
      relatedId?: string(name='relatedId'),
      sourceId?: long(name='sourceId'),
      sourceType?: string(name='sourceType'),
    }
  ](name='relatedInfos', position='Body'),
  organizationId: string(name='organizationId', position='Query'),
}

model UpdateRepositoryMemberResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    accessLevel?: int32(name='accessLevel'),
    avatarUrl?: string(name='avatarUrl'),
    email?: string(name='email'),
    expireAt?: string(name='expireAt'),
    externUid?: string(name='externUid'),
    id?: long(name='id'),
    memberName?: string(name='memberName'),
    memberType?: string(name='memberType'),
    name?: string(name='name'),
    sourceId?: long(name='sourceId'),
    sourceType?: string(name='sourceType'),
    state?: string(name='state'),
    tbUserId?: string(name='tbUserId'),
    username?: string(name='username'),
    webUrl?: string(name='webUrl'),
  }(name='result'),
  success?: boolean(name='success'),
}

model UpdateRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRepositoryMemberResponseBody(name='body'),
}

async function updateRepositoryMember(request: UpdateRepositoryMemberRequest): UpdateRepositoryMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRepositoryMember', 'PUT', '/repository/{repositoryId}/members/{aliyunPk}', 'json', false, 'json', request);
}

model UpdateResourceMemberRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  resourceType: string(name='resourceType', description='资源Id', minimum=1, maximum=999999999999999, position='Path'),
  resourceId: long(name='resourceId', description='资源类型 流水线 pipeline 部署组 deployGroup', position='Path'),
  accountId?: string(name='accountId', position='Path'),
  roleName: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限   owner 拥有者，所有权限 流水线 pipeline   owner 拥有者，所有权限   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限', position='Body'),
}

model UpdateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceMemberResponseBody(name='body'),
}

async function updateResourceMember(request: UpdateResourceMemberRequest): UpdateResourceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceMember', 'PUT', '/organization/{organizationId}/{resourceType}/{resourceId}/members/{accountId}', 'json', true, 'form', request);
}

model UpdateVariableGroupRequest {
  organizationId: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如  https:// devops.aliyun.com/organization/【OrgId】', position='Path'),
  id: long(name='id', description='变量组id', position='Path'),
  description?: string(name='description', description='变量组描述', position='Body'),
  name: string(name='name', description='变量组名称', position='Body'),
  variables: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值', position='Body'),
}

model UpdateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVariableGroupResponseBody(name='body'),
}

async function updateVariableGroup(request: UpdateVariableGroupRequest): UpdateVariableGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVariableGroup', 'PUT', '/organization/{organizationId}/variableGroups/{id}', 'json', true, 'form', request);
}

model UpdateWorkItemRequest {
  organizationId: string(name='organizationId', description='企业id', position='Path'),
  fieldType: string(name='fieldType', description='更新字段的类型，标题：subject/自定义字段：customField/状态：status/描述：document/基本字段：basic(包括负责人、迭代、参与人等)', position='Body'),
  identifier: string(name='identifier', description='工作项唯一标识id', position='Body'),
  propertyKey: string(name='propertyKey', description='更新的字段名', position='Body'),
  propertyValue: string(name='propertyValue', description='更新后的值', position='Body'),
}

model UpdateWorkItemResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprintIdentifier?: string(name='sprintIdentifier', description='迭代id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model UpdateWorkItemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkItemResponseBody(name='body'),
}

async function updateWorkItem(request: UpdateWorkItemRequest): UpdateWorkItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkItem', 'POST', '/organization/{organizationId}/workitems/update', 'json', false, 'json', request);
}

model UpdateWorkitemCommentRequest {
  organizationId: string(name='organizationId', position='Path'),
  commentId: long(name='commentId', description='工作项id
', position='Body'),
  content: string(name='content', description='工作项内容', position='Body'),
  formatType: string(name='formatType', description='内容格式 目前支持MARKDOWN/RICHTEXT', position='Body'),
  workitemIdentifier: string(name='workitemIdentifier', description='工作项id
', position='Body'),
}

model UpdateWorkitemCommentResponseBody = {
  comment?: {
    content?: string(name='content'),
    createTime?: long(name='createTime'),
    formatType?: string(name='formatType'),
    id?: string(name='id', description='评论唯一id
'),
    isTop?: boolean(name='isTop'),
    modifiedTime?: long(name='modifiedTime'),
    parentId?: long(name='parentId'),
    targetIdentifier?: string(name='targetIdentifier'),
    targetType?: string(name='targetType'),
    topTime?: long(name='topTime'),
    user?: {
      account?: string(name='account'),
      avatar?: string(name='avatar'),
      displayName?: string(name='displayName'),
      identifier?: string(name='identifier'),
      nickName?: string(name='nickName'),
      realName?: string(name='realName'),
    }(name='user'),
  }(name='comment'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model UpdateWorkitemCommentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkitemCommentResponseBody(name='body'),
}

async function updateWorkitemComment(request: UpdateWorkitemCommentRequest): UpdateWorkitemCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkitemComment', 'POST', '/organization/{organizationId}/workitems/commentUpdate', 'json', false, 'json', request);
}

