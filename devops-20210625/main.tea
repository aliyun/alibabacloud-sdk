/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('devops', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddRepositoryMemberRequest {
  accessToken?: string(name='AccessToken', description='Codeup访问令牌，使用AK/SK方式访问可以不用填AccessToken'),
  accessLevel?: int32(name='accessLevel', description='成员权限'),
  aliyunPks?: string(name='aliyunPks', description='需要添加为代码库成员的用户阿里云ID。支持多个，以","分割'),
  organizationId?: string(name='organizationId', description='企业ID'),
}

model AddRepositoryMemberResponseBody = {
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMessage?: string(name='ErrorMessage', description='错误信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  result?: [ 
    {
      accessLevel?: int32(name='AccessLevel', description='权限类型'),
      avatarUrl?: string(name='AvatarUrl', description='头像地址'),
      email?: string(name='Email', description='邮箱'),
      externUserId?: string(name='ExternUserId', description='云效用户ID'),
      id?: long(name='Id', description='Codeup用户Id'),
      state?: string(name='State', description='状态'),
    }
  ](name='Result', description='返回结果'),
  success?: boolean(name='Success', description='请求状态'),
}

model AddRepositoryMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddRepositoryMemberResponseBody(name='body'),
}

async function addRepositoryMember(repositoryId: string, request: AddRepositoryMemberRequest): AddRepositoryMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addRepositoryMemberWithOptions(repositoryId, request, headers, runtime);
}

async function addRepositoryMemberWithOptions(repositoryId: string, request: AddRepositoryMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddRepositoryMemberResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.accessLevel)) {
    body['accessLevel'] = request.accessLevel;
  }
  if (!Util.isUnset(request.aliyunPks)) {
    body['aliyunPks'] = request.aliyunPks;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddRepositoryMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddWebhookRequest {
  accessToken?: string(name='AccessToken'),
  organizationId?: string(name='OrganizationId'),
  description?: string(name='description', description='webhook描述'),
  enableSslVerification?: boolean(name='enableSslVerification', description='使用ssl认证'),
  mergeRequestsEvents?: boolean(name='mergeRequestsEvents', description='合并请求事件'),
  noteEvents?: boolean(name='noteEvents', description='评论事件'),
  pushEvents?: boolean(name='pushEvents', description='分支推送事件'),
  secretToken?: string(name='secretToken'),
  tagPushEvents?: boolean(name='tagPushEvents', description='标签推送事件'),
  url?: string(name='url', description='hook url'),
}

model AddWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    createdAt?: string(name='createdAt'),
    description?: string(name='description'),
    enableSslVerification?: boolean(name='enableSslVerification'),
    id?: long(name='id'),
    lastTestResult?: string(name='lastTestResult'),
    mergeRequestsEvents?: boolean(name='mergeRequestsEvents'),
    noteEvents?: boolean(name='noteEvents'),
    pushEvents?: boolean(name='pushEvents'),
    repositoryId?: long(name='repositoryId'),
    secretToken?: string(name='secretToken'),
    tagPushEvents?: boolean(name='tagPushEvents'),
    url?: string(name='url'),
  }(name='result'),
  success?: boolean(name='success'),
}

model AddWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWebhookResponseBody(name='body'),
}

async function addWebhook(repositoryId: string, request: AddWebhookRequest): AddWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addWebhookWithOptions(repositoryId, request, headers, runtime);
}

async function addWebhookWithOptions(repositoryId: string, request: AddWebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddWebhookResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.enableSslVerification)) {
    body['enableSslVerification'] = request.enableSslVerification;
  }
  if (!Util.isUnset(request.mergeRequestsEvents)) {
    body['mergeRequestsEvents'] = request.mergeRequestsEvents;
  }
  if (!Util.isUnset(request.noteEvents)) {
    body['noteEvents'] = request.noteEvents;
  }
  if (!Util.isUnset(request.pushEvents)) {
    body['pushEvents'] = request.pushEvents;
  }
  if (!Util.isUnset(request.secretToken)) {
    body['secretToken'] = request.secretToken;
  }
  if (!Util.isUnset(request.tagPushEvents)) {
    body['tagPushEvents'] = request.tagPushEvents;
  }
  if (!Util.isUnset(request.url)) {
    body['url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWebhook',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/webhooks/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateFlowTagRequest {
  color?: string(name='color'),
  flowTagGroupId?: long(name='flowTagGroupId'),
  name?: string(name='name'),
}

model CreateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  id?: long(name='id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowTagResponseBody(name='body'),
}

async function createFlowTag(organizationId: string, request: CreateFlowTagRequest): CreateFlowTagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFlowTagWithOptions(organizationId, request, headers, runtime);
}

async function createFlowTagWithOptions(organizationId: string, request: CreateFlowTagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowTagResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.color)) {
    query['color'] = request.color;
  }
  if (!Util.isUnset(request.flowTagGroupId)) {
    query['flowTagGroupId'] = request.flowTagGroupId;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowTag',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateFlowTagGroupRequest {
  name?: string(name='name'),
}

model CreateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  id?: long(name='id', description='标签分类'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowTagGroupResponseBody(name='body'),
}

async function createFlowTagGroup(organizationId: string, request: CreateFlowTagGroupRequest): CreateFlowTagGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFlowTagGroupWithOptions(organizationId, request, headers, runtime);
}

async function createFlowTagGroupWithOptions(organizationId: string, request: CreateFlowTagGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowTagGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowTagGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tagGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateHostGroupRequest {
  aliyunRegion?: string(name='aliyunRegion'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  ecsType?: string(name='ecsType'),
  envId?: string(name='envId'),
  machineInfos?: string(name='machineInfos'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  type?: string(name='type'),
}

model CreateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  hostGroupId?: long(name='hostGroupId'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroup(organizationId: string, request: CreateHostGroupRequest): CreateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHostGroupWithOptions(organizationId, request, headers, runtime);
}

async function createHostGroupWithOptions(organizationId: string, request: CreateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHostGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunRegion)) {
    body['aliyunRegion'] = request.aliyunRegion;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body['ecsLabelKey'] = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body['ecsLabelValue'] = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.ecsType)) {
    body['ecsType'] = request.ecsType;
  }
  if (!Util.isUnset(request.envId)) {
    body['envId'] = request.envId;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body['machineInfos'] = request.machineInfos;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body['serviceConnectionId'] = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body['tagIds'] = request.tagIds;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateProjectRequest {
  customCode?: string(name='customCode'),
  name?: string(name='name'),
  scope?: string(name='scope'),
  templateIdentifier?: string(name='templateIdentifier'),
}

model CreateProjectResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  project?: {
    categoryIdentifier?: string(name='categoryIdentifier', description='空间大类id'),
    creator?: string(name='creator', description='创建人id'),
    customCode?: string(name='customCode', description='自定义编号'),
    description?: string(name='description', description='描述信息'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    icon?: string(name='icon', description='图标'),
    identifier?: string(name='identifier', description='项目唯一标识符'),
    logicalStatus?: string(name='logicalStatus', description='项目状态'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='项目名称'),
    organizationIdentifier?: string(name='organizationIdentifier', description='企业id'),
    scope?: string(name='scope', description='可见范围'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段'),
    typeIdentifier?: string(name='typeIdentifier', description='空间小类id'),
  }(name='project', description='项目信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(organizationId: string, request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(organizationId, request, headers, runtime);
}

async function createProjectWithOptions(organizationId: string, request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.customCode)) {
    body['customCode'] = request.customCode;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.templateIdentifier)) {
    body['templateIdentifier'] = request.templateIdentifier;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/createProject`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateRepositoryRequest {
  accessToken?: string(name='accessToken'),
  avatarUrl?: string(name='avatarUrl', description='代码库头像地址'),
  description?: string(name='description', description='代码库描述'),
  gitignoreType?: string(name='gitignoreType', description='gitignore模板类型'),
  importAccount?: string(name='importAccount', description='导入时使用的账号'),
  importDemoProject?: boolean(name='importDemoProject', description='使用使用demo库内容进行初始化'),
  importRepoType?: string(name='importRepoType', description='导入代码库类型 (GIT: Git库, SVN: SVN库)'),
  importToken?: string(name='importToken', description='导入时账号的token'),
  importTokenEncrypted?: string(name='importTokenEncrypted', description='import_token字段的传输格式，使用明文或rsa加密'),
  importUrl?: string(name='importUrl', description='导入地址（http协议地址）'),
  initStandardService?: boolean(name='initStandardService', description='初始化标准智能化服务'),
  isCryptoEnabled?: boolean(name='isCryptoEnabled', description='是否启用加密'),
  localImportUrl?: string(name='localImportUrl', description='本地导入代码库的远程地址'),
  name?: string(name='name', description='代码库名称'),
  namespaceId?: long(name='namespaceId', description='代码库父路径id'),
  path?: string(name='path', description='代码库路径'),
  readmeType?: string(name='readmeType', description='自动创建readme类型 (EMPTY: 仅创建README.md, USER_GUIDE: 包含新手引导)'),
  visibilityLevel?: int32(name='visibilityLevel'),
  createParentPath?: boolean(name='createParentPath'),
  organizationId?: string(name='organizationId'),
  sync?: boolean(name='sync'),
}

model CreateRepositoryResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: {
    importFromSvn?: boolean(name='Import_from_svn', description='从SVN导入'),
    archived?: boolean(name='archived', description='归档标识'),
    avatarUrl?: string(name='avatar_url', description='代码库头像地址'),
    createdAt?: string(name='createdAt', description='创建时间'),
    creatorId?: long(name='creatorId', description='创建者id'),
    defaultBranch?: string(name='defaultBranch', description='默认分支'),
    demoProject?: boolean(name='demoProject', description='demo库标识'),
    description?: string(name='description', description='描述'),
    httpUrlToRepo?: string(name='httpUrlToRepo', description='http地址'),
    id?: long(name='id', description='id'),
    lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
    name?: string(name='name', description='名称'),
    nameWithNamespace?: string(name='nameWithNamespace', description='名称（含父路径）'),
    namespace?: {
      avatar?: string(name='avatar', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='描述'),
      id?: long(name='id', description='id'),
      name?: string(name='name', description='名称'),
      ownerId?: long(name='ownerId', description='归属者id'),
      path?: string(name='path', description='路径'),
      public?: boolean(name='public', description='公开性'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: string(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    }(name='namespace', description='父路径信息'),
    path?: string(name='path', description='路径'),
    pathWithNamespace?: string(name='pathWithNamespace', description='路径（含父路径）'),
    sshUrlToRepo?: string(name='sshUrlToRepo', description='ssh地址'),
    visibilityLevel?: string(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    webUrl?: string(name='webUrl', description='web url'),
  }(name='result'),
  success?: boolean(name='success', description='调用是否成功'),
}

model CreateRepositoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRepositoryResponseBody(name='body'),
}

async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRepositoryWithOptions(request, headers, runtime);
}

async function createRepositoryWithOptions(request: CreateRepositoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRepositoryResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.createParentPath)) {
    query['createParentPath'] = request.createParentPath;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.sync)) {
    query['sync'] = request.sync;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.avatarUrl)) {
    body['avatarUrl'] = request.avatarUrl;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.gitignoreType)) {
    body['gitignoreType'] = request.gitignoreType;
  }
  if (!Util.isUnset(request.importAccount)) {
    body['importAccount'] = request.importAccount;
  }
  if (!Util.isUnset(request.importDemoProject)) {
    body['importDemoProject'] = request.importDemoProject;
  }
  if (!Util.isUnset(request.importRepoType)) {
    body['importRepoType'] = request.importRepoType;
  }
  if (!Util.isUnset(request.importToken)) {
    body['importToken'] = request.importToken;
  }
  if (!Util.isUnset(request.importTokenEncrypted)) {
    body['importTokenEncrypted'] = request.importTokenEncrypted;
  }
  if (!Util.isUnset(request.importUrl)) {
    body['importUrl'] = request.importUrl;
  }
  if (!Util.isUnset(request.initStandardService)) {
    body['initStandardService'] = request.initStandardService;
  }
  if (!Util.isUnset(request.isCryptoEnabled)) {
    body['isCryptoEnabled'] = request.isCryptoEnabled;
  }
  if (!Util.isUnset(request.localImportUrl)) {
    body['localImportUrl'] = request.localImportUrl;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.namespaceId)) {
    body['namespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.path)) {
    body['path'] = request.path;
  }
  if (!Util.isUnset(request.readmeType)) {
    body['readmeType'] = request.readmeType;
  }
  if (!Util.isUnset(request.visibilityLevel)) {
    body['visibilityLevel'] = request.visibilityLevel;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRepository',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateResourceMemberRequest {
  accountId?: string(name='accountId', description='用户id'),
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限 流水线 pipeline   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model CreateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceMemberResponseBody(name='body'),
}

async function createResourceMember(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest): CreateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceMemberWithOptions(organizationId, resourceType, resourceId, request, headers, runtime);
}

async function createResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceMemberResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountId)) {
    body['accountId'] = request.accountId;
  }
  if (!Util.isUnset(request.roleName)) {
    body['roleName'] = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/${resourceType}/${resourceId}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSprintRequest {
  endDate?: string(name='endDate', description='结束时间'),
  name?: string(name='name', description='迭代名'),
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  staffIds?: [ string ](name='staffIds', description='负责人列表'),
  startDate?: string(name='startDate', description='开始时间'),
}

model CreateSprintResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sprint?: {
    creator?: string(name='creator', description='创建人id'),
    description?: string(name='description', description='描述信息'),
    endDate?: long(name='endDate', description='结束时间'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='迭代唯一标识符'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='迭代名称'),
    scope?: string(name='scope', description='可见范围'),
    spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
    startDate?: long(name='startDate', description='开始时间'),
    status?: string(name='status', description='状态'),
  }(name='sprint', description='迭代信息'),
  success?: boolean(name='success', description='true或者false'),
}

model CreateSprintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSprintResponseBody(name='body'),
}

async function createSprint(organizationId: string, request: CreateSprintRequest): CreateSprintResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSprintWithOptions(organizationId, request, headers, runtime);
}

async function createSprintWithOptions(organizationId: string, request: CreateSprintRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSprintResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.endDate)) {
    body['endDate'] = request.endDate;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.spaceIdentifier)) {
    body['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.staffIds)) {
    body['staffIds'] = request.staffIds;
  }
  if (!Util.isUnset(request.startDate)) {
    body['startDate'] = request.startDate;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSprint',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sprints/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateSshKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSshKeyResponseBody(name='body'),
}

async function createSshKey(organizationId: string): CreateSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSshKeyWithOptions(organizationId, headers, runtime);
}

async function createSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSshKeyResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateSshKey',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sshKey`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateVariableGroupRequest {
  description?: string(name='description', description='变量组描述'),
  name?: string(name='name', description='变量组名称'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model CreateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroupId?: long(name='variableGroupId', description='新建的变量组id'),
}

model CreateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVariableGroupResponseBody(name='body'),
}

async function createVariableGroup(organizationId: string, request: CreateVariableGroupRequest): CreateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createVariableGroupWithOptions(organizationId, request, headers, runtime);
}

async function createVariableGroupWithOptions(organizationId: string, request: CreateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVariableGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.variables)) {
    body['variables'] = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkitemRequest {
  assignedTo?: string(name='assignedTo', description='工作项负责人的account id，或者企业中的用户名'),
  category?: string(name='category', description='工作项的类型id，比如：Bug、Task对应id'),
  description?: string(name='description', description='工作项内容'),
  descriptionFormat?: string(name='descriptionFormat', description='内容格式'),
  fieldValueList?: [ 
    {
      fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
      value?: string(name='value', description='字段值，写入时使用'),
      workitemIdentifier?: string(name='workitemIdentifier', description='工作项的唯一标识'),
    }
  ](name='fieldValueList', description='自定义字段'),
  parent?: string(name='parent', description='所属父工作项的唯一标识'),
  participant?: [ string ](name='participant', description='参与人account id列表，或者企业名称列表'),
  space?: string(name='space', description='项目id'),
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='资源类型'),
  sprint?: [ string ](name='sprint', description='要关联迭代'),
  subject?: string(name='subject', description='标题'),
  tracker?: [ string ](name='tracker', description='抄送人account id列表'),
  verifier?: [ string ](name='verifier', description='验证者account id列表，或者企业名称列表'),
  workitemType?: string(name='workitemType', description='工作项小类型id'),
}

model CreateWorkitemResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprintIdentifier?: string(name='sprintIdentifier', description='迭代的id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态唯一标识id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model CreateWorkitemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkitemResponseBody(name='body'),
}

async function createWorkitem(organizationId: string, request: CreateWorkitemRequest): CreateWorkitemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkitemWithOptions(organizationId, request, headers, runtime);
}

async function createWorkitemWithOptions(organizationId: string, request: CreateWorkitemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkitemResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assignedTo)) {
    body['assignedTo'] = request.assignedTo;
  }
  if (!Util.isUnset(request.category)) {
    body['category'] = request.category;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.descriptionFormat)) {
    body['descriptionFormat'] = request.descriptionFormat;
  }
  if (!Util.isUnset(request.fieldValueList)) {
    body['fieldValueList'] = request.fieldValueList;
  }
  if (!Util.isUnset(request.parent)) {
    body['parent'] = request.parent;
  }
  if (!Util.isUnset(request.participant)) {
    body['participant'] = request.participant;
  }
  if (!Util.isUnset(request.space)) {
    body['space'] = request.space;
  }
  if (!Util.isUnset(request.spaceIdentifier)) {
    body['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    body['spaceType'] = request.spaceType;
  }
  if (!Util.isUnset(request.sprint)) {
    body['sprint'] = request.sprint;
  }
  if (!Util.isUnset(request.subject)) {
    body['subject'] = request.subject;
  }
  if (!Util.isUnset(request.tracker)) {
    body['tracker'] = request.tracker;
  }
  if (!Util.isUnset(request.verifier)) {
    body['verifier'] = request.verifier;
  }
  if (!Util.isUnset(request.workitemType)) {
    body['workitemType'] = request.workitemType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkitem',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceRequest {
  codeUrl?: string(name='codeUrl', description='代码来源URL（当前仅支持云效 Codeup 来源）'),
  codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
  filePath?: string(name='filePath', description='打开空间默认打开的文件相对路径'),
  name?: string(name='name', description='工作空间名称'),
  requestFrom?: string(name='requestFrom', description='请求来源（用于统计，云产品集成时需要传入）'),
  resourceIdentifier?: string(name='resourceIdentifier', description='资源标识，提供给非标代码源作为空间复用的唯一标识'),
  reuse?: boolean(name='reuse', description='工作空间复用标识，按照"用户+技术栈+代码地址+版本"进行复用 true - 复用 false - 不复用，每次均为新创建'),
  workspaceTemplate?: string(name='workspaceTemplate', description='技术栈'),
}

model CreateWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    createTime?: string(name='createTime', description='创建时间戳'),
    creator?: string(name='creator', description='创建者，阿里云PK'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
  }(name='workspace', description='工作空间信息'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeUrl)) {
    body['codeUrl'] = request.codeUrl;
  }
  if (!Util.isUnset(request.codeVersion)) {
    body['codeVersion'] = request.codeVersion;
  }
  if (!Util.isUnset(request.filePath)) {
    body['filePath'] = request.filePath;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.requestFrom)) {
    body['requestFrom'] = request.requestFrom;
  }
  if (!Util.isUnset(request.resourceIdentifier)) {
    body['resourceIdentifier'] = request.resourceIdentifier;
  }
  if (!Util.isUnset(request.reuse)) {
    body['reuse'] = request.reuse;
  }
  if (!Util.isUnset(request.workspaceTemplate)) {
    body['workspaceTemplate'] = request.workspaceTemplate;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowTagResponseBody(name='body'),
}

async function deleteFlowTag(organizationId: string, id: string): DeleteFlowTagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFlowTagWithOptions(organizationId, id, headers, runtime);
}

async function deleteFlowTagWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowTagResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowTag',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tags/${id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowTagGroupResponseBody(name='body'),
}

async function deleteFlowTagGroup(organizationId: string, id: string): DeleteFlowTagGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFlowTagGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteFlowTagGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowTagGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowTagGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tagGroups/${id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroup(organizationId: string, id: string): DeleteHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHostGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/${id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(organizationId: string, pipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function deletePipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipeline',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteProjectRequest {
  identifier?: string(name='identifier'),
}

model DeleteProjectResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  result?: boolean(name='result', description='true或者false'),
  success?: boolean(name='success', description='true或者false'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(organizationId: string, request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectWithOptions(organizationId, request, headers, runtime);
}

async function deleteProjectWithOptions(organizationId: string, request: DeleteProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.identifier)) {
    query['identifier'] = request.identifier;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/delete`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceMemberResponseBody(name='body'),
}

async function deleteResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string): DeleteResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, headers, runtime);
}

async function deleteResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceMemberResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/${resourceType}/${resourceId}/members/${accountId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVariableGroupResponseBody(name='body'),
}

async function deleteVariableGroup(organizationId: string, id: string): DeleteVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVariableGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/${id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FrozenWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model FrozenWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FrozenWorkspaceResponseBody(name='body'),
}

async function frozenWorkspace(workspaceId: string): FrozenWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return frozenWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function frozenWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): FrozenWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'FrozenWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}/frozen`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCodeupOrganizationRequest {
  accessToken?: string(name='AccessToken'),
}

model GetCodeupOrganizationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  result?: {
    createdAt?: string(name='CreatedAt'),
    id?: long(name='Id'),
    namespaceId?: long(name='NamespaceId'),
    organizationId?: string(name='OrganizationId'),
    path?: string(name='Path'),
    updatedAt?: string(name='UpdatedAt'),
    userRole?: string(name='UserRole'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model GetCodeupOrganizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCodeupOrganizationResponseBody(name='body'),
}

async function getCodeupOrganization(identity: string, request: GetCodeupOrganizationRequest): GetCodeupOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeupOrganizationWithOptions(identity, request, headers, runtime);
}

async function getCodeupOrganizationWithOptions(identity: string, request: GetCodeupOrganizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeupOrganizationResponse {
  Util.validateModel(request);
  identity = OpenApiUtil.getEncodeParam(identity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCodeupOrganization',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/organization/${identity}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCustomFieldOptionRequest {
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='类型'),
  workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
}

model GetCustomFieldOptionResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  fileds?: [ 
    {
      displayValue?: string(name='displayValue', description='展示的值'),
      fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
      identifier?: string(name='identifier', description='迭代唯一标识符'),
      level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅'),
      position?: long(name='position', description='待选值顺序'),
      value?: string(name='value', description='字段中文名称'),
      valueEn?: string(name='valueEn', description='字段英文名称'),
    }
  ](name='fileds', description='字段值信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model GetCustomFieldOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomFieldOptionResponseBody(name='body'),
}

async function getCustomFieldOption(organizationId: string, fieldId: string, request: GetCustomFieldOptionRequest): GetCustomFieldOptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCustomFieldOptionWithOptions(organizationId, fieldId, request, headers, runtime);
}

async function getCustomFieldOptionWithOptions(organizationId: string, fieldId: string, request: GetCustomFieldOptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCustomFieldOptionResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  fieldId = OpenApiUtil.getEncodeParam(fieldId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.spaceIdentifier)) {
    query['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }
  if (!Util.isUnset(request.workitemTypeIdentifier)) {
    query['workitemTypeIdentifier'] = request.workitemTypeIdentifier;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomFieldOption',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/fields/${fieldId}/getCustomOption`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFileLastCommitRequest {
  accessToken?: string(name='accessToken', description='个人访问令牌'),
  filepath?: string(name='filepath', description='文件路径'),
  organizationId?: string(name='organizationId', description='云效企业ID'),
  sha?: string(name='sha', description='分支名称、标签名称或Commit ID'),
}

model GetFileLastCommitResponseBody = {
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMessage?: string(name='ErrorMessage', description='错误信息'),
  requestId?: string(name='RequestId', description='请求ID'),
  result?: {
    authorDate?: string(name='AuthorDate', description='作者提交时间'),
    authorEmail?: string(name='AuthorEmail', description='提交者邮箱'),
    authorName?: string(name='AuthorName', description='作者姓名'),
    committedDate?: string(name='CommittedDate', description='提交者提交时间'),
    committerEmail?: string(name='CommitterEmail', description='提交者邮箱'),
    committerName?: string(name='CommitterName', description='提交者姓名'),
    createdAt?: string(name='CreatedAt', description='创建时间'),
    id?: string(name='Id', description='Commit ID'),
    message?: string(name='Message', description='提交内容'),
    parentIds?: [ string ](name='ParentIds', description='父提交ID'),
    shortId?: string(name='ShortId', description='Commit短ID'),
    signature?: {
      gpgKeyId?: string(name='GpgKeyId', description='GPG密钥ID'),
      verificationStatus?: string(name='VerificationStatus', description='验证状态'),
    }(name='Signature', description='签名'),
    title?: string(name='Title', description='标题，提交的第一行内容'),
  }(name='Result', description='响应结果'),
  success?: boolean(name='Success', description='请求结果'),
}

model GetFileLastCommitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileLastCommitResponseBody(name='body'),
}

async function getFileLastCommit(repositoryId: string, request: GetFileLastCommitRequest): GetFileLastCommitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFileLastCommitWithOptions(repositoryId, request, headers, runtime);
}

async function getFileLastCommitWithOptions(repositoryId: string, request: GetFileLastCommitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFileLastCommitResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.filepath)) {
    query['filepath'] = request.filepath;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.sha)) {
    query['sha'] = request.sha;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileLastCommit',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/files/lastCommit`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  flowTagGroup?: {
    creatorAccountId?: string(name='creatorAccountId'),
    flowTagList?: [ 
      {
        color?: string(name='color'),
        creatorAccountId?: string(name='creatorAccountId'),
        id?: long(name='id'),
        modiferAccountId?: string(name='modiferAccountId'),
        name?: string(name='name'),
      }
    ](name='flowTagList'),
    id?: long(name='id'),
    modiferAccountId?: string(name='modiferAccountId'),
    name?: string(name='name'),
  }(name='flowTagGroup'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFlowTagGroupResponseBody(name='body'),
}

async function getFlowTagGroup(organizationId: string, id: string): GetFlowTagGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFlowTagGroupWithOptions(organizationId, id, headers, runtime);
}

async function getFlowTagGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFlowTagGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFlowTagGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tagGroups/${id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroup?: {
    aliyunRegion?: string(name='aliyunRegion'),
    createTime?: long(name='createTime'),
    creatorAccountId?: string(name='creatorAccountId'),
    description?: string(name='description'),
    ecsLabelKey?: string(name='ecsLabelKey'),
    ecsLabelValue?: string(name='ecsLabelValue'),
    ecsType?: string(name='ecsType'),
    hostInfos?: [ 
      {
        aliyunRegionId?: string(name='aliyunRegionId'),
        createTime?: long(name='createTime'),
        creatorAccountId?: string(name='creatorAccountId'),
        instanceName?: string(name='instanceName'),
        ip?: string(name='ip'),
        machineSn?: string(name='machineSn'),
        modifierAccountId?: string(name='modifierAccountId'),
        objectType?: string(name='objectType'),
        updateTime?: long(name='updateTime'),
      }
    ](name='hostInfos'),
    hostNum?: long(name='hostNum'),
    id?: long(name='id'),
    modifierAccountId?: string(name='modifierAccountId'),
    name?: string(name='name'),
    serviceConnectionId?: long(name='serviceConnectionId'),
    type?: string(name='type'),
    upateTIme?: long(name='upateTIme'),
  }(name='hostGroup'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroup(organizationId: string, id: string): GetHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function getHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHostGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/${id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  member?: {
    accountId?: string(name='accountId', description='阿里云用户PK'),
    birthday?: long(name='birthday', description='生日'),
    deptLists?: [ string ](name='deptLists', description='部门名称列表'),
    email?: string(name='email', description='邮箱'),
    hiredDate?: long(name='hiredDate', description='入职时间'),
    identities?: {
      externUid?: string(name='externUid', description='第三方系统的用户 id'),
      provider?: string(name='provider', description='第三方系统'),
    }(name='identities', description='第三方信息'),
    joinTime?: long(name='joinTime', description='加入云效企业时间'),
    lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
    mobile?: string(name='mobile', description='手机号'),
    organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
    organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
    organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
    state?: string(name='state', description='用户状态'),
  }(name='member', description='成员'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetOrganizationMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationMemberResponseBody(name='body'),
}

async function getOrganizationMember(organizationId: string, accountId: string): GetOrganizationMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOrganizationMemberWithOptions(organizationId, accountId, headers, runtime);
}

async function getOrganizationMemberWithOptions(organizationId: string, accountId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetOrganizationMemberResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/members/${accountId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipeline?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    envId?: int32(name='envId', description='环境id 0 日常环境  1预发环境 2正式环境'),
    envName?: string(name='envName', description='环境名称'),
    groupId?: long(name='groupId', description='流水线分组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='流水线名称'),
    pipelineConfig?: {
      flow?: string(name='flow', description='流水线配置信息'),
      settings?: string(name='settings', description='流水线环境变量等'),
      sources?: [ 
        {
          data?: {
            branch?: string(name='branch', description='分支'),
            cloneDepth?: long(name='cloneDepth', description='克隆深度'),
            credentialId?: long(name='credentialId', description='Credential Id'),
            credentialLabel?: string(name='credentialLabel', description='Credential Label'),
            credentialType?: string(name='credentialType', description='Credential Type'),
            events?: [ string ](name='events', description='触发事件'),
            isBranchMode?: boolean(name='isBranchMode', description='是否分支模式'),
            isCloneDepth?: boolean(name='isCloneDepth', description='是否设置clone深度'),
            isSubmodule?: boolean(name='isSubmodule', description='是否子模块'),
            isTrigger?: boolean(name='isTrigger', description='是否提交触发'),
            label?: string(name='label', description='代码源显示标签'),
            namespace?: string(name='namespace', description='github命名空间'),
            repo?: string(name='repo', description='代码库地址'),
            serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
            triggerFilter?: string(name='triggerFilter', description='触发过滤条件'),
            webhook?: string(name='webhook', description='webhhook地址'),
          }(name='data', description='代码数据'),
          sign?: string(name='sign', description='代码源唯一标识'),
          type?: string(name='type', description='代码源类型aliyunGit 阿里云代码库 customGitlab  自建git giteeGit 码云 codeup Codeup git 通用git gitlab gitlab bitbucket bitbucket githubOAuth github'),
        }
      ](name='sources', description='代码源'),
    }(name='pipelineConfig', description='流水线配置'),
    tagList?: [ 
      {
        id?: long(name='id', description='标签id'),
        name?: string(name='name', description='标签名称'),
      }
    ](name='tagList', description='标签'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipeline', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(organizationId: string, pipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function getPipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineArtifactUrlRequest {
  fileName?: string(name='fileName'),
  filePath?: string(name='filePath'),
}

model GetPipelineArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  fileUrl?: string(name='fileUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineArtifactUrlResponseBody(name='body'),
}

async function getPipelineArtifactUrl(organizationId: string, request: GetPipelineArtifactUrlRequest): GetPipelineArtifactUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineArtifactUrlWithOptions(organizationId, request, headers, runtime);
}

async function getPipelineArtifactUrlWithOptions(organizationId: string, request: GetPipelineArtifactUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineArtifactUrlResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }
  if (!Util.isUnset(request.filePath)) {
    query['filePath'] = request.filePath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineArtifactUrl',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/getArtifactDownloadUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineEmasArtifactUrlRequest {
  serviceConnectionId?: long(name='serviceConnectionId'),
}

model GetPipelineEmasArtifactUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  fileUrl?: string(name='fileUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineEmasArtifactUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineEmasArtifactUrlResponseBody(name='body'),
}

async function getPipelineEmasArtifactUrl(organizationId: string, emasJobInstanceId: string, md5: string, pipelineId: string, pipelineRunId: string, request: GetPipelineEmasArtifactUrlRequest): GetPipelineEmasArtifactUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineEmasArtifactUrlWithOptions(organizationId, emasJobInstanceId, md5, pipelineId, pipelineRunId, request, headers, runtime);
}

async function getPipelineEmasArtifactUrlWithOptions(organizationId: string, emasJobInstanceId: string, md5: string, pipelineId: string, pipelineRunId: string, request: GetPipelineEmasArtifactUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineEmasArtifactUrlResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  emasJobInstanceId = OpenApiUtil.getEncodeParam(emasJobInstanceId);
  md5 = OpenApiUtil.getEncodeParam(md5);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.serviceConnectionId)) {
    query['serviceConnectionId'] = request.serviceConnectionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineEmasArtifactUrl',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/${pipelineId}/pipelineRun/${pipelineRunId}/emas/artifact/${emasJobInstanceId}/${md5}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRun?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    pipelineId?: long(name='pipelineId', description='流水线Id'),
    pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
    sources?: [ 
      {
        data?: {
          branch?: string(name='branch', description='分支'),
          commint?: string(name='commint', description='提交信息 json数据'),
          repo?: string(name='repo', description='代码库地址'),
        }(name='data', description='代码源信息'),
        sign?: string(name='sign', description='代码源唯一标识'),
        type?: string(name='type', description='代码库类型'),
      }
    ](name='sources', description='代码源'),
    stageGroup?: [[ string ]    ](name='stageGroup', description='阶段拓扑信息'),
    stages?: [ 
      {
        name?: string(name='name', description='阶段名称'),
        stageInfo?: {
          endTime?: long(name='endTime', description='结束时间'),
          jobs?: [ 
            {
              actions?: [ 
                {
                  disable?: boolean(name='disable', description='是否可用'),
                  params?: map[string]any(name='params', description='API参数'),
                  type?: string(name='type', description='API名称'),
                }
              ](name='actions', description='后续操作'),
              endTime?: long(name='endTime', description='结束时间'),
              id?: long(name='id', description='任务Id'),
              name?: string(name='name', description='任务名称'),
              params?: string(name='params', description='触发参数'),
              startTime?: long(name='startTime', description='开始时间'),
              status?: string(name='status', description='状态'),
            }
          ](name='jobs', description='任务'),
          name?: string(name='name', description='阶段名称'),
          startTime?: long(name='startTime', description='开始时间'),
          status?: string(name='status', description='状态'),
        }(name='stageInfo', description='阶段详情'),
      }
    ](name='stages', description='阶段信息'),
    status?: string(name='status', description='状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
    triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipelineRun', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): GetPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function getPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineScanReportUrlRequest {
  reportPath?: string(name='reportPath'),
}

model GetPipelineScanReportUrlResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  reportUrl?: string(name='reportUrl'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineScanReportUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPipelineScanReportUrlResponseBody(name='body'),
}

async function getPipelineScanReportUrl(organizationId: string, request: GetPipelineScanReportUrlRequest): GetPipelineScanReportUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineScanReportUrlWithOptions(organizationId, request, headers, runtime);
}

async function getPipelineScanReportUrlWithOptions(organizationId: string, request: GetPipelineScanReportUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineScanReportUrlResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.reportPath)) {
    body['reportPath'] = request.reportPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineScanReportUrl',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/getPipelineScanReportUrl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetProjectInfoResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  project?: {
    category?: string(name='category'),
    categoryIdentifier?: string(name='categoryIdentifier'),
    creator?: string(name='creator'),
    customCode?: string(name='customCode'),
    description?: string(name='description'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    icon?: string(name='icon'),
    iconBig?: string(name='iconBig'),
    iconGroup?: string(name='iconGroup'),
    iconSmall?: string(name='iconSmall'),
    id?: string(name='id'),
    identifier?: string(name='identifier'),
    identifierPath?: string(name='identifierPath'),
    logicalStatus?: string(name='logicalStatus'),
    modifier?: string(name='modifier'),
    name?: string(name='name'),
    organizationIdentifier?: string(name='organizationIdentifier'),
    parentIdentifier?: string(name='parentIdentifier'),
    scope?: string(name='scope'),
    statusIdentifier?: string(name='statusIdentifier'),
    statusStageIdentifier?: string(name='statusStageIdentifier'),
    subType?: string(name='subType'),
    typeIdentifier?: string(name='typeIdentifier'),
  }(name='project', description='项目信息'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectInfoResponseBody(name='body'),
}

async function getProjectInfo(organizationId: string, projectId: string): GetProjectInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectInfoWithOptions(organizationId, projectId, headers, runtime);
}

async function getProjectInfoWithOptions(organizationId: string, projectId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectInfoResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  projectId = OpenApiUtil.getEncodeParam(projectId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetProjectInfo',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/project/${projectId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetProjectMemberRequest {
  accessToken?: string(name='AccessToken', description='accessToken（选填），使用AK方式调用时无需填accessToken'),
  organizationId?: string(name='OrganizationId', description='企业ID'),
  repositoryId?: long(name='repositoryId', description='代码仓库Id'),
  userAliyunPk?: string(name='userAliyunPk', description='用户阿里云PK'),
}

model GetProjectMemberResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: {
    accessLevel?: int32(name='accessLevel'),
    avatarUrl?: string(name='avatarUrl'),
    externUserId?: string(name='externUserId'),
    id?: long(name='id'),
    name?: string(name='name'),
  }(name='result'),
  success?: boolean(name='success'),
}

model GetProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectMemberResponseBody(name='body'),
}

async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectMemberWithOptions(request, headers, runtime);
}

async function getProjectMemberWithOptions(request: GetProjectMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectMemberResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['OrganizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.repositoryId)) {
    query['repositoryId'] = request.repositoryId;
  }
  if (!Util.isUnset(request.userAliyunPk)) {
    query['userAliyunPk'] = request.userAliyunPk;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/member/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetRepositoryRequest {
  accessToken?: string(name='accessToken', description='个人访问令牌'),
  identity?: string(name='identity', description='代码库ID或路径'),
  organizationId?: string(name='organizationId', description='企业ID'),
}

model GetRepositoryResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  repository?: {
    archive?: boolean(name='archive', description='归档标识'),
    avatarUrl?: string(name='avatarUrl', description='代码库头像地址'),
    createdAt?: string(name='createdAt', description='创建时间'),
    creatorId?: long(name='creatorId', description='创建者ID'),
    defaultBranch?: string(name='defaultBranch', description='默认分支'),
    demoProjectStatus?: boolean(name='demoProjectStatus', description='DEMO库标识'),
    description?: string(name='description', description='描述'),
    httpUrlToRepository?: string(name='httpUrlToRepository', description='HTTP克隆地址'),
    id?: long(name='id', description='代码库ID'),
    lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
    name?: string(name='name', description='名称'),
    nameWithNamespace?: string(name='nameWithNamespace', description='名称（含父名称）'),
    namespace?: {
      avatar?: string(name='avatar', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='描述'),
      id?: long(name='id', description='id'),
      name?: string(name='name', description='名称'),
      ownerId?: long(name='ownerId', description='归属者ID'),
      path?: string(name='path', description='路径'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: int32(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    }(name='namespace', description='父空间'),
    path?: string(name='path', description='路径'),
    pathWithNamespace?: string(name='pathWithNamespace', description='路径（含父路径）'),
    sshUrlToRepository?: string(name='sshUrlToRepository', description='SSH克隆地址'),
    visibilityLevel?: int32(name='visibilityLevel', description='可见性。0：私有，10：内部公开'),
    webUrl?: string(name='webUrl', description='页面访问地址'),
  }(name='repository', description='代码库信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model GetRepositoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRepositoryResponseBody(name='body'),
}

async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRepositoryWithOptions(request, headers, runtime);
}

async function getRepositoryWithOptions(request: GetRepositoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRepositoryResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.identity)) {
    query['identity'] = request.identity;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRepository',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSprintInfoResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  sprint?: {
    creator?: string(name='creator', description='创建人id'),
    description?: string(name='description', description='描述信息'),
    endDate?: long(name='endDate', description='结束时间'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='迭代唯一标识符'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='迭代名称'),
    scope?: string(name='scope', description='可见范围'),
    spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
    startDate?: long(name='startDate', description='开始时间'),
    status?: string(name='status', description='状态'),
  }(name='sprint', description='迭代信息'),
  success?: boolean(name='success'),
}

model GetSprintInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSprintInfoResponseBody(name='body'),
}

async function getSprintInfo(organizationId: string, sprintId: string): GetSprintInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSprintInfoWithOptions(organizationId, sprintId, headers, runtime);
}

async function getSprintInfoWithOptions(organizationId: string, sprintId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSprintInfoResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  sprintId = OpenApiUtil.getEncodeParam(sprintId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSprintInfo',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sprints/${sprintId}/getSprintinfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetVMDeployOrderResponseBody = {
  deployOrder?: {
    actions?: [ 
      {
        disable?: boolean(name='disable', description='是否可用'),
        params?: map[string]any(name='params', description='参数'),
        type?: string(name='type', description='Action'),
      }
    ](name='actions', description='后续action'),
    createTime?: long(name='createTime', description='创建时时间'),
    creator?: string(name='creator', description='创建人'),
    currentBatch?: int32(name='currentBatch', description='当前发布批次'),
    deployMachineInfo?: {
      batchNum?: int32(name='batchNum', description='发布批次'),
      deployMachines?: [ 
        {
          actions?: [ 
            {
              disable?: boolean(name='disable', description='是否可用'),
              params?: map[string]any(name='params', description='参数'),
              type?: string(name='type', description='Action'),
            }
          ](name='actions', description='后续action'),
          batchNum?: int32(name='batchNum', description='部署批次'),
          clientStatus?: string(name='clientStatus', description='机器状态'),
          createTime?: long(name='createTime', description='开始时间'),
          ip?: string(name='ip', description='机器IP'),
          machineSn?: string(name='machineSn', description='机器sn'),
          status?: string(name='status', description='部署状态'),
          updateTime?: long(name='updateTime', description='修改时间'),
        }
      ](name='deployMachines', description='部署机器列表'),
      hostGroupId?: long(name='hostGroupId', description='主机组ID'),
    }(name='deployMachineInfo', description='部署机器信息'),
    deployOrderId?: string(name='deployOrderId', description='部署单ID'),
    exceptionCode?: string(name='exceptionCode', description='错误码'),
    status?: string(name='status', description='发布状态'),
    totalBatch?: int32(name='totalBatch', description='总发布批次'),
    updateTime?: long(name='updateTime', description='修改时间'),
  }(name='deployOrder', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVMDeployOrderResponseBody(name='body'),
}

async function getVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): GetVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function getVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroup?: {
    ccreatorAccountId?: string(name='ccreatorAccountId', description='创建人阿里云账号id'),
    createTime?: long(name='createTime', description='创建时间'),
    description?: string(name='description', description='变量组描述'),
    id?: long(name='id', description='变量组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='变量组名称'),
    relatedPipelines?: [ 
      {
        id?: long(name='id', description='关联的流水线Id'),
        name?: string(name='name', description='关联的流水线名称'),
      }
    ](name='relatedPipelines', description='关联的流水线'),
    updateTime?: long(name='updateTime', description='更新时间'),
    variables?: [ 
      {
        isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
        name?: string(name='name', description='变量名'),
        value?: string(name='value', description='变量值'),
      }
    ](name='variables', description='变量'),
  }(name='variableGroup', description='变量组'),
}

model GetVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVariableGroupResponseBody(name='body'),
}

async function getVariableGroup(organizationId: string, id: string): GetVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function getVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVariableGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/${id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkItemActivityResponseBody = {
  activities?: [ 
    {
      actionType?: string(name='actionType', description='动作类型'),
      eventId?: long(name='eventId', description='事件id'),
      eventTime?: long(name='eventTime', description='事件时间'),
      eventType?: string(name='eventType', description='事件类型'),
      operator?: string(name='operator', description='操作者'),
      parentEventId?: long(name='parentEventId', description='父事件id'),
      property?: {
        displayName?: string(name='displayName', description='属性的展示名'),
        propertyIdentifier?: string(name='propertyIdentifier', description='资源id'),
        propertyName?: string(name='propertyName', description='属性key'),
        propertyType?: string(name='propertyType', description='类型'),
      }(name='property', description='修改属性'),
      resourceIdentifier?: string(name='resourceIdentifier', description='操作对象'),
    }
  ](name='activities', description='动态信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model GetWorkItemActivityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkItemActivityResponseBody(name='body'),
}

async function getWorkItemActivity(organizationId: string, workitemId: string): GetWorkItemActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkItemActivityWithOptions(organizationId, workitemId, headers, runtime);
}

async function getWorkItemActivityWithOptions(organizationId: string, workitemId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkItemActivityResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  workitemId = OpenApiUtil.getEncodeParam(workitemId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetWorkItemActivity',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/${workitemId}/getActivity`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkItemInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    customFields?: [ 
      {
        fieldClassName?: string(name='fieldClassName', description='字段的className，便于数据查询'),
        fieldFormat?: string(name='fieldFormat', description='字段格式，便于查询数据'),
        fieldIdentifier?: string(name='fieldIdentifier', description='字段的唯一标识'),
        level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
        objectValue?: string(name='objectValue', description='值对象列表'),
        position?: long(name='position', description='自定义字段值的position'),
        value?: string(name='value', description='字段值，写入时使用'),
        valueList?: [ 
          {
            displayValue?: string(name='displayValue', description='根据语言环境获取当前展示的值'),
            identifier?: string(name='identifier', description='字段值为对象类型时，值所对应的对象的唯一标识 例如：option表中的id'),
            level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
            value?: string(name='value', description='字段值'),
            valueEn?: string(name='valueEn', description='字段英文值，目前只有列表类有英文值'),
          }
        ](name='valueList', description='值对象列表，查询时使用'),
        workitemIdentifier?: string(name='workitemIdentifier', description='工作项的唯一标识'),
      }
    ](name='customFields', description='自定义字段列表'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    participant?: [ string ](name='participant', description='参与人account id列表'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprint?: [ string ](name='sprint', description='关联的迭代id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    tag?: [ string ](name='tag', description='标签id列表'),
    tracker?: [ string ](name='tracker', description='抄送人的account id列表'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    verifier?: [ string ](name='verifier', description='验证者的account id列表'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model GetWorkItemInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkItemInfoResponseBody(name='body'),
}

async function getWorkItemInfo(organizationId: string, workitemId: string): GetWorkItemInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkItemInfoWithOptions(organizationId, workitemId, headers, runtime);
}

async function getWorkItemInfoWithOptions(organizationId: string, workitemId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkItemInfoResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  workitemId = OpenApiUtil.getEncodeParam(workitemId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetWorkItemInfo',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/${workitemId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkItemWorkFlowInfoRequest {
  configurationId?: string(name='configurationId', description='项目id'),
}

model GetWorkItemWorkFlowInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workflow?: {
    creator?: string(name='creator', description='创建人'),
    defaultStatusIdentifier?: string(name='defaultStatusIdentifier', description='工作流的默认状态'),
    description?: string(name='description', description='工作流的描述'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作流唯一标识'),
    modifier?: string(name='modifier', description='修改人'),
    name?: string(name='name', description='工作流名称'),
    ownerSpaceIdentifier?: string(name='ownerSpaceIdentifier', description='工作流所属的团队空间或项目的identifier'),
    ownerSpaceType?: string(name='ownerSpaceType', description='工作流所属的团队项目类型'),
    resourceType?: string(name='resourceType', description='资源类型'),
    source?: string(name='source', description='工作流来源'),
    statusOrder?: string(name='statusOrder', description='工作流的状态顺序'),
    statuses?: [ 
      {
        creator?: string(name='creator', description='创建人'),
        description?: string(name='description', description='描述信息'),
        gmtCreate?: long(name='gmtCreate', description='创建时间'),
        gmtModified?: long(name='gmtModified', description='修改时间'),
        identifier?: string(name='identifier', description='状态唯一标识'),
        modifier?: string(name='modifier', description='修改人'),
        name?: string(name='name', description='状态名'),
        resourceType?: string(name='resourceType', description='资源来源'),
        source?: string(name='source', description='状态来源'),
        workflowStageIdentifier?: string(name='workflowStageIdentifier', description='阶段信息-阶段的唯一标识'),
        workflowStageName?: string(name='workflowStageName', description='阶段信息-名称'),
      }
    ](name='statuses', description='状态列表'),
    workflowActions?: [ 
      {
        id?: long(name='id', description='流转步骤的id'),
        name?: string(name='name', description='action的名称'),
        nextWorkflowStatusIdentifier?: string(name='nextWorkflowStatusIdentifier', description='action对应的下个状态的信息id'),
        workflowIdentifier?: string(name='workflowIdentifier', description='action对应的工作流'),
        workflowStatusIdentifier?: string(name='workflowStatusIdentifier', description='action对应的当前状态id'),
      }
    ](name='workflowActions', description='工作流的流转步骤'),
  }(name='workflow', description='工作项信息'),
}

model GetWorkItemWorkFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkItemWorkFlowInfoResponseBody(name='body'),
}

async function getWorkItemWorkFlowInfo(organizationId: string, workitemId: string, request: GetWorkItemWorkFlowInfoRequest): GetWorkItemWorkFlowInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkItemWorkFlowInfoWithOptions(organizationId, workitemId, request, headers, runtime);
}

async function getWorkItemWorkFlowInfoWithOptions(organizationId: string, workitemId: string, request: GetWorkItemWorkFlowInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkItemWorkFlowInfoResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  workitemId = OpenApiUtil.getEncodeParam(workitemId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.configurationId)) {
    query['configurationId'] = request.configurationId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkItemWorkFlowInfo',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/${workitemId}/getWorkflowInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    codeUrl?: string(name='codeUrl', description='代码来源URL'),
    codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
    createTime?: string(name='createTime', description='创建时间戳'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    spec?: string(name='spec', description='机器规格'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
    userId?: string(name='userId', description='用户阿里云PK'),
  }(name='workspace', description='工作空间信息'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(workspaceId: string): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function getWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListFlowTagGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  flowTagGroups?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='创建人'),
      id?: long(name='id', description='标签分类id'),
      modiferAccountId?: string(name='modiferAccountId', description='修改人'),
      name?: string(name='name', description='标签分类名称'),
    }
  ](name='flowTagGroups', description='标签分类'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListFlowTagGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFlowTagGroupsResponseBody(name='body'),
}

async function listFlowTagGroups(organizationId: string): ListFlowTagGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFlowTagGroupsWithOptions(organizationId, headers, runtime);
}

async function listFlowTagGroupsWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListFlowTagGroupsResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListFlowTagGroups',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tagGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHostGroupsRequest {
  createEndTime?: long(name='createEndTime', description='主机组结束时间'),
  createStartTime?: long(name='createStartTime', description='主机组创建时间'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建阿里云账号id，多个逗号分割'),
  ids?: string(name='ids', description='主机组id，多个逗号分割'),
  maxResults?: long(name='maxResults', description='结果返回个数'),
  name?: string(name='name', description='主机组名称'),
  nextToken?: string(name='nextToken', description='分页token'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
  pageSort?: string(name='pageSort', description='排序条件ID'),
}

model ListHostGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroups?: [ 
    {
      aliyunRegion?: string(name='aliyunRegion', description='阿里云区域'),
      createTime?: long(name='createTime', description='主机时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='描述'),
      ecsLabelKey?: string(name='ecsLabelKey', description='ecs标签Key'),
      ecsLabelValue?: string(name='ecsLabelValue', description='Ecs标签值'),
      ecsType?: string(name='ecsType', description='主机类型'),
      hostNum?: long(name='hostNum', description='主机个数'),
      id?: long(name='id', description='323232'),
      modifierAccountId?: string(name='modifierAccountId', description='修改人阿里云账号id'),
      name?: string(name='name', description='部署组名称'),
      serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
      type?: string(name='type', description='类型'),
      updateTime?: long(name='updateTime', description='更新时间'),
    }
  ](name='hostGroups', description='主机组'),
  nextToken?: string(name='nextToken', description='分页token,空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroups(organizationId: string, request: ListHostGroupsRequest): ListHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHostGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listHostGroupsWithOptions(organizationId: string, request: ListHostGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHostGroupsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.createEndTime)) {
    query['createEndTime'] = request.createEndTime;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query['createStartTime'] = request.createStartTime;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query['creatorAccountIds'] = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.ids)) {
    query['ids'] = request.ids;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query['pageOrder'] = request.pageOrder;
  }
  if (!Util.isUnset(request.pageSort)) {
    query['pageSort'] = request.pageSort;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHostGroups',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationMembersRequest {
  externUid?: string(name='externUid'),
  joinTimeFrom?: long(name='joinTimeFrom'),
  joinTimeTo?: long(name='joinTimeTo'),
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  organizationMemberName?: string(name='organizationMemberName'),
  provider?: string(name='provider'),
  state?: string(name='state'),
}

model ListOrganizationMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  members?: [ 
    {
      accountId?: string(name='accountId', description='阿里云用户ID'),
      birthday?: long(name='birthday', description='生日'),
      deptLists?: [ string ](name='deptLists', description='部门名称列表'),
      email?: string(name='email', description='邮箱'),
      hiredDate?: long(name='hiredDate', description='入职时间'),
      identities?: {
        externUid?: string(name='externUid', description='第三方系统的用户Id'),
        provider?: string(name='provider', description='第三方系统'),
      }(name='identities', description='第三方信息'),
      joinTime?: long(name='joinTime', description='加入云效企业时间'),
      lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
      mobile?: string(name='mobile', description='手机号'),
      organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
      organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
      organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
      state?: string(name='state', description='用户状态'),
    }
  ](name='members', description='成员列表'),
  nextToken?: string(name='nextToken', description='分页Token'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationMembersResponseBody(name='body'),
}

async function listOrganizationMembers(organizationId: string, request: ListOrganizationMembersRequest): ListOrganizationMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listOrganizationMembersWithOptions(organizationId, request, headers, runtime);
}

async function listOrganizationMembersWithOptions(organizationId: string, request: ListOrganizationMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOrganizationMembersResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.externUid)) {
    query['externUid'] = request.externUid;
  }
  if (!Util.isUnset(request.joinTimeFrom)) {
    query['joinTimeFrom'] = request.joinTimeFrom;
  }
  if (!Util.isUnset(request.joinTimeTo)) {
    query['joinTimeTo'] = request.joinTimeTo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.organizationMemberName)) {
    query['organizationMemberName'] = request.organizationMemberName;
  }
  if (!Util.isUnset(request.provider)) {
    query['provider'] = request.provider;
  }
  if (!Util.isUnset(request.state)) {
    query['state'] = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationMembers',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineJobHistorysRequest {
  category?: string(name='category'),
  identifier?: string(name='identifier'),
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
}

model ListPipelineJobHistorysResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  jobs?: [ 
    {
      executeNumber?: int32(name='executeNumber'),
      identifier?: string(name='identifier'),
      jobId?: long(name='jobId'),
      jobName?: string(name='jobName'),
      operatorAccountId?: string(name='operatorAccountId'),
      pipelineId?: long(name='pipelineId'),
      pipelineRunId?: long(name='pipelineRunId'),
      sources?: string(name='sources'),
      status?: string(name='status'),
    }
  ](name='jobs'),
  nextToken?: string(name='nextToken'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: int32(name='totalCount'),
}

model ListPipelineJobHistorysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineJobHistorysResponseBody(name='body'),
}

async function listPipelineJobHistorys(organizationId: string, pipelineId: string, request: ListPipelineJobHistorysRequest): ListPipelineJobHistorysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineJobHistorysWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function listPipelineJobHistorysWithOptions(organizationId: string, pipelineId: string, request: ListPipelineJobHistorysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineJobHistorysResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.identifier)) {
    query['identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineJobHistorys',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/${pipelineId}/job/historys`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineJobsRequest {
  category?: string(name='category'),
}

model ListPipelineJobsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  jobs?: [ 
    {
      identifier?: string(name='identifier'),
      jobName?: string(name='jobName'),
      lastJobId?: long(name='lastJobId'),
      lastJobParams?: string(name='lastJobParams'),
    }
  ](name='jobs'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListPipelineJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineJobsResponseBody(name='body'),
}

async function listPipelineJobs(organizationId: string, pipelineId: string, request: ListPipelineJobsRequest): ListPipelineJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineJobsWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function listPipelineJobsWithOptions(organizationId: string, pipelineId: string, request: ListPipelineJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineJobsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineJobs',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/${pipelineId}/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunsRequest {
  endTime?: long(name='endTime', description='结束时间'),
  maxResults?: long(name='maxResults', description='最大返回数量'),
  nextToken?: string(name='nextToken', description='分页Token'),
  startTime?: long(name='startTime', description='开始时间'),
  status?: string(name='status', description='状态 状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
  triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
}

model ListPipelineRunsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一个分页token，为空时，表示没有下一页'),
  pipelineRuns?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='运行人阿里云账号id'),
      endTime?: long(name='endTime', description='结束时间'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineRunId?: long(name='pipelineRunId', description='流水线实例id'),
      startTime?: long(name='startTime', description='开始时间'),
      status?: string(name='status', description='运行状态'),
      triggerMode?: long(name='triggerMode', description='触发模式'),
    }
  ](name='pipelineRuns', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunsWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function listPipelineRunsWithOptions(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.triggerMode)) {
    query['triggerMode'] = request.triggerMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRuns',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelinesRequest {
  createEndTime?: long(name='createEndTime', description='创建结束时间'),
  createStartTime?: long(name='createStartTime', description='创建开始时间'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建人阿里云账号Id'),
  executeAccountIds?: string(name='executeAccountIds', description='执行人阿里云账号id'),
  executeEndTime?: long(name='executeEndTime', description='执行结束时间'),
  executeStartTime?: long(name='executeStartTime', description='执行开始时间'),
  maxResults?: long(name='maxResults', description='返回的总数'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelineName?: string(name='pipelineName', description='流水线名称'),
  statusList?: string(name='statusList', description='状态列表，多个逗号分割'),
}

model ListPipelinesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineName?: string(name='pipelineName', description='流水线名称'),
    }
  ](name='pipelines', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(organizationId: string, request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(organizationId, request, headers, runtime);
}

async function listPipelinesWithOptions(organizationId: string, request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.createEndTime)) {
    query['createEndTime'] = request.createEndTime;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query['createStartTime'] = request.createStartTime;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query['creatorAccountIds'] = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.executeAccountIds)) {
    query['executeAccountIds'] = request.executeAccountIds;
  }
  if (!Util.isUnset(request.executeEndTime)) {
    query['executeEndTime'] = request.executeEndTime;
  }
  if (!Util.isUnset(request.executeStartTime)) {
    query['executeStartTime'] = request.executeStartTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pipelineName)) {
    query['pipelineName'] = request.pipelineName;
  }
  if (!Util.isUnset(request.statusList)) {
    query['statusList'] = request.statusList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProjectMembersRequest {
  targetType?: string(name='targetType'),
}

model ListProjectMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  members?: [ 
    {
      account?: string(name='account', description='登陆账号'),
      avatar?: string(name='avatar', description='用户头像'),
      dingTalkId?: string(name='dingTalkId', description='钉钉id'),
      displayName?: string(name='displayName', description='展示名'),
      displayNickName?: string(name='displayNickName', description='展示昵称'),
      displayRealName?: string(name='displayRealName', description='展示真名'),
      division?: {
        identifier?: string(name='identifier', description='部门唯一标识'),
      }(name='division', description='部门信息'),
      email?: string(name='email', description='邮箱'),
      gender?: string(name='gender', description='性别'),
      identifier?: string(name='identifier', description='用户唯一 标识符'),
      mobile?: string(name='mobile', description='手机号'),
      nameEn?: string(name='nameEn', description='英文名'),
      nickName?: string(name='nickName', description='昵称'),
      nickNamePinyin?: string(name='nickNamePinyin', description='昵称拼音'),
      organizationUserInfo?: {
        organizationIdentifier?: string(name='organizationIdentifier', description='企业唯一标识符'),
      }(name='organizationUserInfo', description='企业信息'),
      realName?: string(name='realName', description='真名'),
      realNamePinyin?: string(name='realNamePinyin', description='真名拼音'),
      stamp?: string(name='stamp', description='用户类型'),
      tbRoleId?: string(name='tbRoleId', description='角色id'),
    }
  ](name='members', description='member信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembers(organizationId: string, projectId: string, request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectMembersWithOptions(organizationId, projectId, request, headers, runtime);
}

async function listProjectMembersWithOptions(organizationId: string, projectId: string, request: ListProjectMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  projectId = OpenApiUtil.getEncodeParam(projectId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.targetType)) {
    query['targetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/${projectId}/listMembers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProjectTemplatesRequest {
  category?: string(name='category', description='模板类型'),
}

model ListProjectTemplatesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  templates?: [ 
    {
      copyFrom?: string(name='copyFrom'),
      creator?: string(name='creator', description='创建人id'),
      description?: string(name='description', description='描述信息'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      icon?: string(name='icon', description='模板封面'),
      identifier?: string(name='identifier', description='模板唯一标识符'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='模板名称'),
      nameEn?: string(name='nameEn', description='模板英文名称'),
      resourceCategory?: string(name='resourceCategory', description='所属资源类型'),
      resourceType?: string(name='resourceType'),
      spaceIdentifier?: string(name='spaceIdentifier'),
      spaceType?: string(name='spaceType'),
      type?: long(name='type', description='模板类型 0-system/4-custom/16-instance'),
    }
  ](name='templates', description='项目模板信息'),
}

model ListProjectTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectTemplatesResponseBody(name='body'),
}

async function listProjectTemplates(organizationId: string, request: ListProjectTemplatesRequest): ListProjectTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectTemplatesWithOptions(organizationId, request, headers, runtime);
}

async function listProjectTemplatesWithOptions(organizationId: string, request: ListProjectTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectTemplatesResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectTemplates',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/listTemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProjectWorkitemTypesRequest {
  category?: string(name='category', description='工作项类型'),
  spaceType?: string(name='spaceType', description='空间类型'),
}

model ListProjectWorkitemTypesResponseBody = {
  errorCode?: string(name='errorCode', description='错误返回码'),
  errorMessage?: string(name='errorMessage', description='错误返回信息'),
  requestId?: string(name='requestId', description='openapi平台的request id'),
  success?: boolean(name='success', description='接口是否正常返回'),
  workitemTypes?: [ 
    {
      addUser?: string(name='addUser', description='添加到项目中的添加人'),
      categoryIdentifier?: string(name='categoryIdentifier', description='工作项类型'),
      creator?: string(name='creator', description='工作项类型创建人'),
      defaultType?: boolean(name='defaultType', description='在项目中是否为默认类型'),
      description?: string(name='description', description='描述'),
      enable?: boolean(name='enable', description='是否启用'),
      gmtAdd?: long(name='gmtAdd', description='添加到项目中的时间'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      identifier?: string(name='identifier', description='工作项类型id'),
      name?: string(name='name', description='工作项类型的名称'),
      nameEn?: string(name='nameEn', description='工作项类型的英文名称'),
      systemDefault?: boolean(name='systemDefault', description='是否系统默认'),
    }
  ](name='workitemTypes', description='工作项类型'),
}

model ListProjectWorkitemTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectWorkitemTypesResponseBody(name='body'),
}

async function listProjectWorkitemTypes(organizationId: string, projectId: string, request: ListProjectWorkitemTypesRequest): ListProjectWorkitemTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectWorkitemTypesWithOptions(organizationId, projectId, request, headers, runtime);
}

async function listProjectWorkitemTypesWithOptions(organizationId: string, projectId: string, request: ListProjectWorkitemTypesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectWorkitemTypesResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  projectId = OpenApiUtil.getEncodeParam(projectId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectWorkitemTypes',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/${projectId}/getWorkitemType`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProjectsRequest {
  category?: string(name='category', description='项目类型'),
  conditions?: string(name='conditions'),
  extraConditions?: string(name='extraConditions'),
  maxResults?: long(name='maxResults', description='每页最大返回数量，0-200，默认值20'),
  nextToken?: string(name='nextToken', description='分页中的起始序列'),
  scope?: string(name='scope', description='公开类型'),
}

model ListProjectsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  projects?: [ 
    {
      categoryIdentifier?: string(name='categoryIdentifier', description='类型'),
      creator?: string(name='creator', description='创建人'),
      customCode?: string(name='customCode', description='自定义编号'),
      deleteTime?: long(name='deleteTime', description='删除时间'),
      description?: string(name='description', description='描述信息'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      icon?: string(name='icon', description='项目封面'),
      identifier?: string(name='identifier', description='项目唯一标识符'),
      logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
      name?: string(name='name', description='项目名称'),
      scope?: string(name='scope', description='公开还是私有'),
      statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段'),
      typeIdentifier?: string(name='typeIdentifier', description='类型id'),
    }
  ](name='projects', description='项目信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(organizationId: string, request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectsWithOptions(organizationId, request, headers, runtime);
}

async function listProjectsWithOptions(organizationId: string, request: ListProjectsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.conditions)) {
    query['conditions'] = request.conditions;
  }
  if (!Util.isUnset(request.extraConditions)) {
    query['extraConditions'] = request.extraConditions;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/listProjects`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRepositoriesRequest {
  accessToken?: string(name='accessToken', description='accessToken'),
  archived?: boolean(name='archived', description='是否列出归档项目'),
  orderBy?: string(name='orderBy', description='排序字段'),
  organizationId?: string(name='organizationId', description='企业ID'),
  page?: long(name='page', description='页码'),
  perPage?: long(name='perPage', description='每页大小'),
  search?: string(name='search', description='搜索关键字'),
  sort?: string(name='sort', description='排序方式 (desc: 降序, asc: 升序)'),
}

model ListRepositoriesResponseBody = {
  errorCode?: int32(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求requestId'),
  result?: [ 
    {
      id?: long(name='Id', description='代码库Id'),
      accessLevel?: int32(name='accessLevel', description='当前用户在该代码库上的权限类型'),
      archive?: boolean(name='archive', description='代码库是否归档'),
      avatarUrl?: string(name='avatarUrl', description='头像地址'),
      createdAt?: string(name='createdAt', description='创建时间'),
      description?: string(name='description', description='代码库描述'),
      importStatus?: string(name='importStatus', description='代码库导入状态'),
      lastActivityAt?: string(name='lastActivityAt', description='最后活跃时间'),
      name?: string(name='name', description='代码库名称'),
      nameWithNamespace?: string(name='nameWithNamespace', description='代码库完整名称（含完整组名称）'),
      namespaceId?: long(name='namespaceId', description='上级路径的id'),
      path?: string(name='path', description='代码库路径'),
      pathWithNamespace?: string(name='pathWithNamespace', description='代码库完整路径（含完整组路径）'),
      star?: boolean(name='star', description='是否被收藏'),
      starCount?: long(name='starCount', description='被收藏的数量'),
      updatedAt?: string(name='updatedAt', description='更新时间'),
      visibilityLevel?: string(name='visibilityLevel', description='可见性;0标识私有的/10标识企业内公开'),
      webUrl?: string(name='webUrl', description='页面访问时的URL'),
    }
  ](name='result'),
  success?: boolean(name='success', description='调用是否成功'),
  total?: long(name='total', description='总数量'),
}

model ListRepositoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRepositoriesResponseBody(name='body'),
}

async function listRepositories(request: ListRepositoriesRequest): ListRepositoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRepositoriesWithOptions(request, headers, runtime);
}

async function listRepositoriesWithOptions(request: ListRepositoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRepositoriesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.archived)) {
    query['archived'] = request.archived;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['orderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.perPage)) {
    query['perPage'] = request.perPage;
  }
  if (!Util.isUnset(request.search)) {
    query['search'] = request.search;
  }
  if (!Util.isUnset(request.sort)) {
    query['sort'] = request.sort;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRepositories',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRepositoryMemberWithInheritedRequest {
  accessToken?: string(name='accessToken', description='accessToken'),
  organizationId?: string(name='organizationId', description='企业Id'),
}

model ListRepositoryMemberWithInheritedResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      accessLevel?: int32(name='accessLevel'),
      avatarUrl?: string(name='avatarUrl'),
      email?: string(name='email'),
      externUserId?: string(name='externUserId'),
      id?: long(name='id'),
      inherited?: {
        id?: long(name='id'),
        name?: string(name='name'),
        nameWithNamespace?: string(name='nameWithNamespace'),
        path?: string(name='path'),
        pathWithNamespace?: string(name='pathWithNamespace'),
        type?: string(name='type'),
        visibilityLevel?: string(name='visibilityLevel'),
      }(name='inherited'),
      name?: string(name='name'),
      state?: string(name='state'),
      username?: string(name='username'),
    }
  ](name='result'),
  success?: boolean(name='success'),
}

model ListRepositoryMemberWithInheritedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRepositoryMemberWithInheritedResponseBody(name='body'),
}

async function listRepositoryMemberWithInherited(repositoryId: string, request: ListRepositoryMemberWithInheritedRequest): ListRepositoryMemberWithInheritedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRepositoryMemberWithInheritedWithOptions(repositoryId, request, headers, runtime);
}

async function listRepositoryMemberWithInheritedWithOptions(repositoryId: string, request: ListRepositoryMemberWithInheritedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRepositoryMemberWithInheritedResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRepositoryMemberWithInherited',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/members/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRepositoryWebhookRequest {
  accessToken?: string(name='accessToken', description='accessToken'),
  organizationId?: string(name='organizationId', description='企业Id'),
  page?: long(name='page', description='页码'),
  pageSize?: long(name='pageSize', description='每页数据量'),
}

model ListRepositoryWebhookResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createdAt?: string(name='createdAt'),
      description?: string(name='description'),
      enableSslVerification?: boolean(name='enableSslVerification'),
      id?: long(name='id'),
      lastTestResult?: string(name='lastTestResult'),
      mergeRequestsEvents?: boolean(name='mergeRequestsEvents'),
      noteEvents?: boolean(name='noteEvents'),
      projectId?: long(name='projectId'),
      pushEvents?: boolean(name='pushEvents'),
      secretToken?: string(name='secretToken'),
      tagPushEvents?: boolean(name='tagPushEvents'),
      url?: string(name='url'),
    }
  ](name='result'),
  success?: boolean(name='success'),
  total?: long(name='total'),
}

model ListRepositoryWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRepositoryWebhookResponseBody(name='body'),
}

async function listRepositoryWebhook(repositoryId: string, request: ListRepositoryWebhookRequest): ListRepositoryWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRepositoryWebhookWithOptions(repositoryId, request, headers, runtime);
}

async function listRepositoryWebhookWithOptions(repositoryId: string, request: ListRepositoryWebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRepositoryWebhookResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRepositoryWebhook',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/webhooks/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourceMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  resourceMembers?: [ 
    {
      accountId?: string(name='accountId', description='账号id'),
      roleName?: string(name='roleName', description='角色'),
      username?: string(name='username', description='用户名称'),
    }
  ](name='resourceMembers', description='成员'),
  success?: boolean(name='success', description='请求id，每次请求都是唯一值，便于后续排查问题'),
}

model ListResourceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceMembersResponseBody(name='body'),
}

async function listResourceMembers(organizationId: string, resourceType: string, resourceId: string): ListResourceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourceMembersWithOptions(organizationId, resourceType, resourceId, headers, runtime);
}

async function listResourceMembersWithOptions(organizationId: string, resourceType: string, resourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceMembersResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListResourceMembers',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/${resourceType}/${resourceId}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListServiceConnectionsRequest {
  sericeConnectionType?: string(name='sericeConnectionType', description='aliyun_code  阿里云代码 Codeup       Codeup  Gitee        码云 github       Github ack       容器服务Kubernetes(ACK) docker_register_aliyun    容器镜像服务(ACR) ecs          对象存储(OSS) edas          企业级分布式应用(EDAS) emas         移动研发平台(EMAS) fc            阿里云函数计算(FC) kubernetes     自建k8s集群 oss            对象存储(OSS) PACKAGES       制品仓库 ros   资源编排服务(ROS) sae       Serverless应用引擎(SAE)'),
}

model ListServiceConnectionsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  serviceConnections?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      id?: long(name='id', description='服务连接Id'),
      name?: string(name='name', description='服务连接名称'),
      ownerAccountId?: long(name='ownerAccountId', description='拥有者阿里云账号id'),
      type?: string(name='type', description='服务连接类型'),
    }
  ](name='serviceConnections', description='服务连接'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(organizationId: string, request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceConnectionsWithOptions(organizationId, request, headers, runtime);
}

async function listServiceConnectionsWithOptions(organizationId: string, request: ListServiceConnectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceConnectionsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.sericeConnectionType)) {
    query['sericeConnectionType'] = request.sericeConnectionType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceConnections',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/serviceConnections`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSprintsRequest {
  maxResults?: long(name='maxResults', description='每页最大返回数量，0-200，默认值20'),
  nextToken?: string(name='nextToken', description='分页中的起始序列'),
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='类型'),
}

model ListSprintsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sprints?: [ 
    {
      creator?: string(name='creator', description='创建人id'),
      description?: string(name='description', description='描述信息'),
      endDate?: long(name='endDate', description='结束时间'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='迭代唯一标识符'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='迭代名称'),
      scope?: string(name='scope', description='可见范围'),
      spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
      startDate?: long(name='startDate', description='开始时间'),
      status?: string(name='status', description='状态，未开始:Todo, 进行中:Doing, 已完成:Done'),
    }
  ](name='sprints', description='迭代信息'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListSprintsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSprintsResponseBody(name='body'),
}

async function listSprints(organizationId: string, request: ListSprintsRequest): ListSprintsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSprintsWithOptions(organizationId, request, headers, runtime);
}

async function listSprintsWithOptions(organizationId: string, request: ListSprintsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSprintsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.spaceIdentifier)) {
    query['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSprints',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sprints/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListVariableGroupsRequest {
  maxResults?: int32(name='maxResults', description='最大返回数，默认30'),
  nextToken?: string(name='nextToken', description='分页token，上一次请求的出参nextToken'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
  pageSort?: string(name='pageSort', description='排序条件'),
}

model ListVariableGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一次查询的token，为空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='变量组总数'),
  variableGroups?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='变量组描述'),
      id?: long(name='id', description='变量组id'),
      modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
      name?: string(name='name', description='变量组名称'),
      relatedPipelines?: [ 
        {
          id?: long(name='id', description='关联的流水线Id'),
          name?: string(name='name', description='关联的流水线名称'),
        }
      ](name='relatedPipelines', description='关联的流水线'),
      updateTime?: long(name='updateTime', description='更新时间'),
      variables?: [ 
        {
          isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
          name?: string(name='name', description='变量名'),
          value?: string(name='value', description='变量值'),
        }
      ](name='variables', description='变量'),
    }
  ](name='variableGroups', description='变量组'),
}

model ListVariableGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVariableGroupsResponseBody(name='body'),
}

async function listVariableGroups(organizationId: string, request: ListVariableGroupsRequest): ListVariableGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVariableGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listVariableGroupsWithOptions(organizationId: string, request: ListVariableGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVariableGroupsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query['pageOrder'] = request.pageOrder;
  }
  if (!Util.isUnset(request.pageSort)) {
    query['pageSort'] = request.pageSort;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVariableGroups',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkItemAllFieldsRequest {
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='资源类型'),
  workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id，工作项类型的列表和id可以从ListProjectWorkitemType中获取'),
}

model ListWorkItemAllFieldsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  fields?: [ 
    {
      className?: string(name='className', description='字段类型'),
      creator?: string(name='creator', description='创建人id'),
      defaultValue?: string(name='defaultValue', description='默认值'),
      description?: string(name='description', description='描述信息'),
      format?: string(name='format', description='字段格式'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='字段唯一标识符'),
      isRequired?: boolean(name='isRequired', description='是否必填'),
      isShowWhenCreate?: boolean(name='isShowWhenCreate', description='创建时是否展示'),
      isSystemRequired?: boolean(name='isSystemRequired', description='是否是系统必须字段，比如：负责人、状态等。'),
      linkWithService?: string(name='linkWithService', description='联动的服务，比如：迭代 迭代服务开启/关闭，这个字段字段加进/剔除出对应的模板； 字段模板里，这类字段不能手动添加或删除'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='字段名称'),
      options?: [ 
        {
          displayValue?: string(name='displayValue', description='根据语言环境获取当前展示的值'),
          fieldIdentifier?: string(name='fieldIdentifier', description='字段唯一标识'),
          identifier?: string(name='identifier', description='待选值的唯一标识'),
          level?: long(name='level', description='展示级别，数字范围1~9，数字越大，颜色越浅。'),
          position?: long(name='position', description='待选值顺序'),
          value?: string(name='value', description='待选值中文名称'),
          valueEn?: string(name='valueEn', description='待选值英文名称'),
        }
      ](name='options', description='待选值'),
      resourceType?: string(name='resourceType', description='区分不同的适用对象'),
      type?: string(name='type', description='区分不同的类型，如系统字段、用户自定义字段'),
    }
  ](name='fields', description='字段信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model ListWorkItemAllFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkItemAllFieldsResponseBody(name='body'),
}

async function listWorkItemAllFields(organizationId: string, request: ListWorkItemAllFieldsRequest): ListWorkItemAllFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkItemAllFieldsWithOptions(organizationId, request, headers, runtime);
}

async function listWorkItemAllFieldsWithOptions(organizationId: string, request: ListWorkItemAllFieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkItemAllFieldsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.spaceIdentifier)) {
    query['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }
  if (!Util.isUnset(request.workitemTypeIdentifier)) {
    query['workitemTypeIdentifier'] = request.workitemTypeIdentifier;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkItemAllFields',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/fields/listAll`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkItemWorkFlowStatusRequest {
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='空间类型'),
  workitemCategoryIdentifier?: string(name='workitemCategoryIdentifier', description='工作项大类型'),
  workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项小类型id'),
}

model ListWorkItemWorkFlowStatusResponseBody = {
  errorCode?: string(name='errorCode', description='错误返回码'),
  errorMessage?: string(name='errorMessage', description='错误返回信息'),
  requestId?: string(name='requestId', description='openapi平台的request id'),
  statuses?: [ 
    {
      creator?: string(name='creator', description='状态的创建人'),
      description?: string(name='description', description='描述'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='更新时间'),
      identifier?: string(name='identifier', description='工作流状态id'),
      modifier?: string(name='modifier', description='修改人'),
      name?: string(name='name', description='工作流状态名称'),
      resourceType?: string(name='resourceType', description='状态作用的资源类型'),
      source?: string(name='source', description='状态来源'),
      workflowStageIdentifier?: string(name='workflowStageIdentifier', description='阶段信息-阶段的唯一标识'),
      workflowStageName?: string(name='workflowStageName', description='阶段信息-名称'),
    }
  ](name='statuses', description='工作流状态'),
  success?: boolean(name='success', description='接口是否正常返回'),
}

model ListWorkItemWorkFlowStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkItemWorkFlowStatusResponseBody(name='body'),
}

async function listWorkItemWorkFlowStatus(organizationId: string, request: ListWorkItemWorkFlowStatusRequest): ListWorkItemWorkFlowStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkItemWorkFlowStatusWithOptions(organizationId, request, headers, runtime);
}

async function listWorkItemWorkFlowStatusWithOptions(organizationId: string, request: ListWorkItemWorkFlowStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkItemWorkFlowStatusResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.spaceIdentifier)) {
    query['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }
  if (!Util.isUnset(request.workitemCategoryIdentifier)) {
    query['workitemCategoryIdentifier'] = request.workitemCategoryIdentifier;
  }
  if (!Util.isUnset(request.workitemTypeIdentifier)) {
    query['workitemTypeIdentifier'] = request.workitemTypeIdentifier;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkItemWorkFlowStatus',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/workflow/listWorkflowStatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkitemTimeResponseBody = {
  code?: long(name='code', description='接口返回code'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitemTime?: [ 
    {
      actualTime?: long(name='actualTime', description='实际工时，小时为单位'),
      description?: string(name='description', description='工时描述信息'),
      gmtCreate?: long(name='gmtCreate', description='工时记录的创建时间'),
      gmtEnd?: long(name='gmtEnd', description='结束时间'),
      gmtModified?: long(name='gmtModified', description='工时记录的修改时间'),
      gmtStart?: long(name='gmtStart', description='开始时间'),
      identifier?: string(name='identifier', description='工时唯一标识'),
      recordUser?: string(name='recordUser', description='登记人的account Id'),
      type?: string(name='type', description='工时类型'),
      workitemIdentifier?: string(name='workitemIdentifier', description='工作项id，唯一标识'),
    }
  ](name='workitemTime', description='工时信息'),
}

model ListWorkitemTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkitemTimeResponseBody(name='body'),
}

async function listWorkitemTime(organizationId: string, workitemId: string): ListWorkitemTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkitemTimeWithOptions(organizationId, workitemId, headers, runtime);
}

async function listWorkitemTimeWithOptions(organizationId: string, workitemId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkitemTimeResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  workitemId = OpenApiUtil.getEncodeParam(workitemId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListWorkitemTime',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/${workitemId}/time/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkitemsRequest {
  category?: string(name='category', description='工作项类型，需求为Req，缺陷为Bug，任务为Task，风险为Risk'),
  conditions?: string(name='conditions', description='过滤条件'),
  extraConditions?: string(name='extraConditions', description='额外条件'),
  groupCondition?: string(name='groupCondition', description='分组条件'),
  maxResults?: string(name='maxResults', description='每页最大返回数量，0-200，默认值20'),
  nextToken?: string(name='nextToken', description='分页中的起始序列'),
  orderBy?: string(name='orderBy', description='排序顺序'),
  searchType?: string(name='searchType', description='查询类型'),
  spaceIdentifier?: string(name='spaceIdentifier', description='项目id'),
  spaceType?: string(name='spaceType', description='项目类型'),
}

model ListWorkitemsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  maxResults?: long(name='maxResults', description='每页数量'),
  nextToken?: string(name='nextToken', description='分页Token，没有下一页则为空'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  totalCount?: long(name='totalCount', description='总数'),
  workitems?: [ 
    {
      assignedTo?: string(name='assignedTo', description='负责人aliyunPk'),
      categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
      creator?: string(name='creator', description='创建人aliyunPK'),
      document?: string(name='document', description='工作项内容'),
      gmtCreate?: long(name='gmtCreate', description='创建时间'),
      gmtModified?: long(name='gmtModified', description='修改时间'),
      identifier?: string(name='identifier', description='工作项唯一标识'),
      logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
      modifier?: string(name='modifier', description='修改人aliyunPK'),
      parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
      serialNumber?: string(name='serialNumber', description='编号'),
      spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
      spaceName?: string(name='spaceName', description='所属项目名称'),
      spaceType?: string(name='spaceType', description='项目类型'),
      sprintIdentifier?: string(name='sprintIdentifier', description='迭代id'),
      status?: string(name='status', description='状态名称'),
      statusIdentifier?: string(name='statusIdentifier', description='状态唯一标识'),
      statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
      subject?: string(name='subject', description='工作项标题'),
      updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
      workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
    }
  ](name='workitems', description='工作项信息'),
}

model ListWorkitemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkitemsResponseBody(name='body'),
}

async function listWorkitems(organizationId: string, request: ListWorkitemsRequest): ListWorkitemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkitemsWithOptions(organizationId, request, headers, runtime);
}

async function listWorkitemsWithOptions(organizationId: string, request: ListWorkitemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkitemsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.conditions)) {
    query['conditions'] = request.conditions;
  }
  if (!Util.isUnset(request.extraConditions)) {
    query['extraConditions'] = request.extraConditions;
  }
  if (!Util.isUnset(request.groupCondition)) {
    query['groupCondition'] = request.groupCondition;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['orderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.searchType)) {
    query['searchType'] = request.searchType;
  }
  if (!Util.isUnset(request.spaceIdentifier)) {
    query['spaceIdentifier'] = request.spaceIdentifier;
  }
  if (!Util.isUnset(request.spaceType)) {
    query['spaceType'] = request.spaceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkitems',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/listWorkitems`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量，默认10，最大100'),
  nextToken?: string(name='nextToken', description='用来标记当前开始读取的位置，置空表示从头开始'),
  statusList?: [ string ](name='statusList', description='枚举值：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
  workspaceTemplateList?: [ string ](name='workspaceTemplateList', description='空间模板列表'),
}

model ListWorkspacesShrinkRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量，默认10，最大100'),
  nextToken?: string(name='nextToken', description='用来标记当前开始读取的位置，置空表示从头开始'),
  statusListShrink?: string(name='statusList', description='枚举值：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
  workspaceTemplateListShrink?: string(name='workspaceTemplateList', description='空间模板列表'),
}

model ListWorkspacesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  maxResults?: int32(name='maxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  totalCount?: int32(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  workspaces?: [ 
    {
      codeUrl?: string(name='codeUrl', description='代码来源URL'),
      codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
      createTime?: string(name='createTime', description='创建时间戳'),
      id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
      name?: string(name='name', description='工作空间名称'),
      spec?: string(name='spec', description='机器规格'),
      status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
      template?: string(name='template', description='工作空间模板'),
      userId?: string(name='userId', description='用户阿里云PK'),
    }
  ](name='workspaces', description='工作空间列表'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

async function listWorkspacesWithOptions(tmpReq: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.statusList)) {
    request.statusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statusList, 'statusList', 'simple');
  }
  if (!Util.isUnset(tmpReq.workspaceTemplateList)) {
    request.workspaceTemplateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.workspaceTemplateList, 'workspaceTemplateList', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.statusListShrink)) {
    query['statusList'] = request.statusListShrink;
  }
  if (!Util.isUnset(request.workspaceTemplateListShrink)) {
    query['workspaceTemplateList'] = request.workspaceTemplateListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model LogPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  log?: {
    content?: string(name='content'),
    more?: boolean(name='more'),
  }(name='log'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model LogPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogPipelineJobRunResponseBody(name='body'),
}

async function logPipelineJobRun(organizationId: string, pipelineId: string, jobId: string, pipelineRunId: string): LogPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return logPipelineJobRunWithOptions(organizationId, pipelineId, jobId, pipelineRunId, headers, runtime);
}

async function logPipelineJobRunWithOptions(organizationId: string, pipelineId: string, jobId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): LogPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'LogPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/${pipelineId}/pipelineRun/${pipelineRunId}/job/${jobId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model LogVMDeployMachineResponseBody = {
  deployMachineLog?: {
    aliyunRegion?: string(name='aliyunRegion', description='部署地域'),
    deployBeginTime?: long(name='deployBeginTime', description='部署开始时间'),
    deployEndTime?: long(name='deployEndTime', description='部署结束时间'),
    deployLog?: string(name='deployLog', description='部署日志'),
    deployLogPath?: string(name='deployLogPath', description='部署日志路径'),
  }(name='deployMachineLog', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model LogVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogVMDeployMachineResponseBody(name='body'),
}

async function logVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): LogVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return logVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function logVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): LogVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'LogVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}/machine/${machineSn}/log`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PassPipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model PassPipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PassPipelineValidateResponseBody(name='body'),
}

async function passPipelineValidate(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): PassPipelineValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return passPipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function passPipelineValidateWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PassPipelineValidateResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PassPipelineValidate',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/pass`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RefusePipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RefusePipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefusePipelineValidateResponseBody(name='body'),
}

async function refusePipelineValidate(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): RefusePipelineValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return refusePipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function refusePipelineValidateWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RefusePipelineValidateResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RefusePipelineValidate',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/refuse`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReleaseWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model ReleaseWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseWorkspaceResponseBody(name='body'),
}

async function releaseWorkspace(workspaceId: string): ReleaseWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return releaseWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function releaseWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ReleaseWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}/release`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResetSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResetSshKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSshKeyResponseBody(name='body'),
}

async function resetSshKey(organizationId: string): ResetSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resetSshKeyWithOptions(organizationId, headers, runtime);
}

async function resetSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResetSshKeyResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResetSshKey',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sshKey`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResumeVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResumeVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeVMDeployOrderResponseBody(name='body'),
}

async function resumeVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): ResumeVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function resumeVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}/resume`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RetryPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model RetryPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryPipelineJobRunResponseBody(name='body'),
}

async function retryPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): RetryPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function retryPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RetryPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RetryVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RetryVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryVMDeployMachineResponseBody(name='body'),
}

async function retryVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): RetryVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function retryVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RetryVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}/machine/${machineSn}/retry`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SkipPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model SkipPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SkipPipelineJobRunResponseBody(name='body'),
}

async function skipPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): SkipPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return skipPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function skipPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): SkipPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SkipPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/skip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SkipVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model SkipVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SkipVMDeployMachineResponseBody(name='body'),
}

async function skipVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): SkipVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return skipVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function skipVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): SkipVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SkipVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}/machine/${machineSn}/skip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartPipelineRunRequest {
  params?: string(name='params', description='流水线运行参数,json字符串 branchModeBranchs  分支模式运行的分支 envs  环境变量 runningBranchs 运行分支 runningTags  运行代码tag comment  运行备注'),
}

model StartPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(organizationId: string, pipelineId: string, request: StartPipelineRunRequest): StartPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineRunWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function startPipelineRunWithOptions(organizationId: string, pipelineId: string, request: StartPipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineRunResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.params)) {
    body['params'] = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organizations/${organizationId}/pipelines/${pipelineId}/run`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopPipelineJobRunResponseBody(name='body'),
}

async function stopPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): StopPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function stopPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopPipelineRunResponseBody(name='body'),
}

async function stopPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): StopPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function stopPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopVMDeployOrderResponseBody(name='body'),
}

async function stopVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): StopVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function stopVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/deploy/${deployOrderId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TriggerRepositoryMirrorSyncRequest {
  accessToken?: string(name='accessToken', description='个人访问令牌。 使用阿里云AK+SK或使用STS临时授权方式不需要传该字段'),
  account?: string(name='account', description='远程同步库克隆账号'),
  organizationId?: string(name='organizationId', description='企业标识，也称企业id，字符串形式，可在云效访问链接中获取，如 https://devops.aliyun.com/organization/'),
  token?: string(name='token', description='远程同步库克隆令牌'),
}

model TriggerRepositoryMirrorSyncResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  result?: {
    result?: boolean(name='result', description='仓库同步触发结果'),
  }(name='result', description='响应结果'),
  success?: boolean(name='success', description='请求结果'),
}

model TriggerRepositoryMirrorSyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerRepositoryMirrorSyncResponseBody(name='body'),
}

async function triggerRepositoryMirrorSync(repositoryId: string, request: TriggerRepositoryMirrorSyncRequest): TriggerRepositoryMirrorSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return triggerRepositoryMirrorSyncWithOptions(repositoryId, request, headers, runtime);
}

async function triggerRepositoryMirrorSyncWithOptions(repositoryId: string, request: TriggerRepositoryMirrorSyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TriggerRepositoryMirrorSyncResponse {
  Util.validateModel(request);
  repositoryId = OpenApiUtil.getEncodeParam(repositoryId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessToken)) {
    query['accessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.account)) {
    query['account'] = request.account;
  }
  if (!Util.isUnset(request.organizationId)) {
    query['organizationId'] = request.organizationId;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerRepositoryMirrorSync',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/repository/${repositoryId}/mirror`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateFlowTagRequest {
  color?: string(name='color'),
  flowTagGroupId?: long(name='flowTagGroupId'),
  name?: string(name='name'),
}

model UpdateFlowTagResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFlowTagResponseBody(name='body'),
}

async function updateFlowTag(organizationId: string, id: string, request: UpdateFlowTagRequest): UpdateFlowTagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFlowTagWithOptions(organizationId, id, request, headers, runtime);
}

async function updateFlowTagWithOptions(organizationId: string, id: string, request: UpdateFlowTagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowTagResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var query : map[string]any= {};
  if (!Util.isUnset(request.color)) {
    query['color'] = request.color;
  }
  if (!Util.isUnset(request.flowTagGroupId)) {
    query['flowTagGroupId'] = request.flowTagGroupId;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFlowTag',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tags/${id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateFlowTagGroupRequest {
  name?: string(name='name'),
}

model UpdateFlowTagGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateFlowTagGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFlowTagGroupResponseBody(name='body'),
}

async function updateFlowTagGroup(organizationId: string, id: string, request: UpdateFlowTagGroupRequest): UpdateFlowTagGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFlowTagGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateFlowTagGroupWithOptions(organizationId: string, id: string, request: UpdateFlowTagGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowTagGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var query : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFlowTagGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/flow/tagGroups/${id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHostGroupRequest {
  aliyunRegion?: string(name='aliyunRegion'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  ecsType?: string(name='ecsType'),
  envId?: string(name='envId'),
  machineInfos?: string(name='machineInfos'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  type?: string(name='type'),
}

model UpdateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model UpdateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHostGroupResponseBody(name='body'),
}

async function updateHostGroup(organizationId: string, id: string, request: UpdateHostGroupRequest): UpdateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHostGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateHostGroupWithOptions(organizationId: string, id: string, request: UpdateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHostGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunRegion)) {
    body['aliyunRegion'] = request.aliyunRegion;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body['ecsLabelKey'] = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body['ecsLabelValue'] = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.ecsType)) {
    body['ecsType'] = request.ecsType;
  }
  if (!Util.isUnset(request.envId)) {
    body['envId'] = request.envId;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body['machineInfos'] = request.machineInfos;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body['serviceConnectionId'] = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body['tagIds'] = request.tagIds;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/${id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdatePipelineBaseInfoRequest {
  envId?: long(name='envId'),
  pipelineName?: string(name='pipelineName'),
  tagList?: string(name='tagList'),
}

model UpdatePipelineBaseInfoResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdatePipelineBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePipelineBaseInfoResponseBody(name='body'),
}

async function updatePipelineBaseInfo(organizationId: string, pipelineId: string, request: UpdatePipelineBaseInfoRequest): UpdatePipelineBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineBaseInfoWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function updatePipelineBaseInfoWithOptions(organizationId: string, pipelineId: string, request: UpdatePipelineBaseInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineBaseInfoResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query['envId'] = request.envId;
  }
  if (!Util.isUnset(request.pipelineName)) {
    query['pipelineName'] = request.pipelineName;
  }
  if (!Util.isUnset(request.tagList)) {
    query['tagList'] = request.tagList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipelineBaseInfo',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/${pipelineId}/baseInfo`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateProjectMemberRequest {
  roleIdentifier?: string(name='roleIdentifier', description='角色id'),
  targetIdentifier?: string(name='targetIdentifier', description='资源id，也就是项目id'),
  targetType?: string(name='targetType', description='资源类型'),
  userIdentifier?: string(name='userIdentifier', description='用户id'),
  userType?: string(name='userType', description='用户类型'),
}

model UpdateProjectMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMsg?: string(name='errorMsg', description='错误信息'),
  member?: {
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    id?: string(name='id', description='id'),
    roleIdentifier?: string(name='roleIdentifier', description='角色id'),
    targetIdentifier?: string(name='targetIdentifier', description='资源id，也就是项目id'),
    targetType?: string(name='targetType', description='资源类型'),
    userIdentifier?: string(name='userIdentifier', description='用户id'),
    userType?: string(name='userType', description='用户类型'),
  }(name='member', description='成员信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
}

model UpdateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProjectMemberResponseBody(name='body'),
}

async function updateProjectMember(organizationId: string, projectId: string, request: UpdateProjectMemberRequest): UpdateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectMemberWithOptions(organizationId, projectId, request, headers, runtime);
}

async function updateProjectMemberWithOptions(organizationId: string, projectId: string, request: UpdateProjectMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectMemberResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  projectId = OpenApiUtil.getEncodeParam(projectId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.roleIdentifier)) {
    body['roleIdentifier'] = request.roleIdentifier;
  }
  if (!Util.isUnset(request.targetIdentifier)) {
    body['targetIdentifier'] = request.targetIdentifier;
  }
  if (!Util.isUnset(request.targetType)) {
    body['targetType'] = request.targetType;
  }
  if (!Util.isUnset(request.userIdentifier)) {
    body['userIdentifier'] = request.userIdentifier;
  }
  if (!Util.isUnset(request.userType)) {
    body['userType'] = request.userType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProjectMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/projects/${projectId}/updateMember`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateResourceMemberRequest {
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限   owner 拥有者，所有权限 流水线 pipeline   owner 拥有者，所有权限   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model UpdateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceMemberResponseBody(name='body'),
}

async function updateResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest): UpdateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, request, headers, runtime);
}

async function updateResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateResourceMemberResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.roleName)) {
    body['roleName'] = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/${resourceType}/${resourceId}/members/${accountId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateVariableGroupRequest {
  description?: string(name='description', description='变量组描述'),
  name?: string(name='name', description='变量组名称'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model UpdateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVariableGroupResponseBody(name='body'),
}

async function updateVariableGroup(organizationId: string, id: string, request: UpdateVariableGroupRequest): UpdateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateVariableGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateVariableGroupWithOptions(organizationId: string, id: string, request: UpdateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVariableGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.variables)) {
    body['variables'] = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/${id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateWorkItemRequest {
  fieldType?: string(name='fieldType', description='更新字段的类型，标题：subject/自定义字段：customField/状态：status/描述：document/基本字段：basic(包括负责人、迭代、参与人等)'),
  identifier?: string(name='identifier', description='工作项唯一标识id'),
  propertyKey?: string(name='propertyKey', description='更新的字段名'),
  propertyValue?: string(name='propertyValue', description='更新后的值'),
}

model UpdateWorkItemResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true或者false'),
  workitem?: {
    assignedTo?: string(name='assignedTo', description='负责人'),
    categoryIdentifier?: string(name='categoryIdentifier', description='工作项的类型id'),
    creator?: string(name='creator', description='创建人'),
    document?: string(name='document', description='工作项内容'),
    gmtCreate?: long(name='gmtCreate', description='创建时间'),
    gmtModified?: long(name='gmtModified', description='修改时间'),
    identifier?: string(name='identifier', description='工作项唯一标识'),
    logicalStatus?: string(name='logicalStatus', description='逻辑状态'),
    modifier?: string(name='modifier', description='修改人'),
    parentIdentifier?: string(name='parentIdentifier', description='父工作项id'),
    serialNumber?: string(name='serialNumber', description='编号'),
    spaceIdentifier?: string(name='spaceIdentifier', description='所属项目id'),
    spaceName?: string(name='spaceName', description='所属项目名称'),
    spaceType?: string(name='spaceType', description='项目类型'),
    sprintIdentifier?: string(name='sprintIdentifier', description='迭代id'),
    status?: string(name='status', description='状态名称'),
    statusIdentifier?: string(name='statusIdentifier', description='状态id'),
    statusStageIdentifier?: string(name='statusStageIdentifier', description='状态阶段id'),
    subject?: string(name='subject', description='工作项标题'),
    updateStatusAt?: long(name='updateStatusAt', description='状态更新时间'),
    workitemTypeIdentifier?: string(name='workitemTypeIdentifier', description='工作项类型id'),
  }(name='workitem', description='工作项信息'),
}

model UpdateWorkItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkItemResponseBody(name='body'),
}

async function updateWorkItem(organizationId: string, request: UpdateWorkItemRequest): UpdateWorkItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkItemWithOptions(organizationId, request, headers, runtime);
}

async function updateWorkItemWithOptions(organizationId: string, request: UpdateWorkItemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkItemResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fieldType)) {
    body['fieldType'] = request.fieldType;
  }
  if (!Util.isUnset(request.identifier)) {
    body['identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.propertyKey)) {
    body['propertyKey'] = request.propertyKey;
  }
  if (!Util.isUnset(request.propertyValue)) {
    body['propertyValue'] = request.propertyValue;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkItem',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/workitems/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

