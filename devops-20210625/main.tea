/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('devops', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model RetryPipelineJobRunResponseBody = {
  requestId?: string(name='requestId'),
  errorMessage?: string(name='errorMessage'),
  errorCode?: string(name='errorCode'),
  success?: boolean(name='success'),
}

model RetryPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: RetryPipelineJobRunResponseBody(name='body'),
}

async function retryPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): RetryPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function retryPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryPipelineJobRunResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RetryPipelineJobRun', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}`, 'json', req, runtime);
}

model ListResourceMembersResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  resourceMembers?: [ 
    {
      accountId?: string(name='accountId', description='账号id'),
      roleName?: string(name='roleName', description='角色'),
      username?: string(name='username', description='用户名称'),
    }
  ](name='resourceMembers', description='成员'),
}

model ListResourceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceMembersResponseBody(name='body'),
}

async function listResourceMembers(organizationId: string, resourceType: string, resourceId: string): ListResourceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourceMembersWithOptions(organizationId, resourceType, resourceId, headers, runtime);
}

async function listResourceMembersWithOptions(organizationId: string, resourceType: string, resourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceMembersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListResourceMembers', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/${resourceType}/${resourceId}/members`, 'json', req, runtime);
}

model GetHostGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  hostGroup?: {
    creatorAccountId?: string(name='creatorAccountId'),
    upateTIme?: long(name='upateTIme'),
    hostNum?: long(name='hostNum'),
    modifierAccountId?: string(name='modifierAccountId'),
    description?: string(name='description'),
    type?: string(name='type'),
    createTime?: long(name='createTime'),
    ecsType?: string(name='ecsType'),
    aliyunRegion?: string(name='aliyunRegion'),
    ecsLabelKey?: string(name='ecsLabelKey'),
    id?: long(name='id'),
    name?: string(name='name'),
    serviceConnectionId?: long(name='serviceConnectionId'),
    hostInfos?: [ 
      {
        updateTime?: long(name='updateTime'),
        creatorAccountId?: string(name='creatorAccountId'),
        instanceName?: string(name='instanceName'),
        modifierAccountId?: string(name='modifierAccountId'),
        ip?: string(name='ip'),
        createTime?: long(name='createTime'),
        objectType?: string(name='objectType'),
        aliyunRegionId?: string(name='aliyunRegionId'),
        machineSn?: string(name='machineSn'),
      }
    ](name='hostInfos'),
    ecsLabelValue?: string(name='ecsLabelValue'),
  }(name='hostGroup'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroup(organizationId: string, id: string): GetHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function getHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHostGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetHostGroup', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/hostGroups/${id}`, 'json', req, runtime);
}

model GetVariableGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroup?: {
    ccreatorAccountId?: string(name='ccreatorAccountId', description='创建人阿里云账号id'),
    description?: string(name='description', description='变量组描述'),
    updateTime?: long(name='updateTime', description='更新时间'),
    id?: long(name='id', description='变量组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='变量组名称'),
    relatedPipelines?: [ 
      {
        id?: long(name='id', description='关联的流水线Id'),
        name?: string(name='name', description='关联的流水线名称'),
      }
    ](name='relatedPipelines', description='关联的流水线'),
    variables?: [ 
      {
        value?: string(name='value', description='变量值'),
        name?: string(name='name', description='变量名'),
        isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
      }
    ](name='variables', description='变量'),
    createTime?: long(name='createTime', description='创建时间'),
  }(name='variableGroup', description='变量组'),
}

model GetVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetVariableGroupResponseBody(name='body'),
}

async function getVariableGroup(organizationId: string, id: string): GetVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function getVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVariableGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetVariableGroup', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/variableGroups/${id}`, 'json', req, runtime);
}

model ListPipelinesRequest {
  pipelineName?: string(name='pipelineName', description='流水线名称'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建人阿里云账号Id'),
  executeAccountIds?: string(name='executeAccountIds', description='执行人阿里云账号id'),
  statusList?: string(name='statusList', description='状态列表，多个逗号分割'),
  createStartTime?: long(name='createStartTime', description='创建开始时间'),
  createEndTime?: long(name='createEndTime', description='创建结束时间'),
  executeStartTime?: long(name='executeStartTime', description='执行开始时间'),
  executeEndTime?: long(name='executeEndTime', description='执行结束时间'),
  maxResults?: long(name='maxResults', description='返回的总数'),
  nextToken?: string(name='nextToken', description='分页Token'),
}

model ListPipelinesResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelines?: [ 
    {
      pipelineName?: string(name='pipelineName', description='流水线名称'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
    }
  ](name='pipelines', description='流水线'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(organizationId: string, request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(organizationId, request, headers, runtime);
}

async function listPipelinesWithOptions(organizationId: string, request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pipelineName)) {
    query.pipelineName = request.pipelineName;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query.creatorAccountIds = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.executeAccountIds)) {
    query.executeAccountIds = request.executeAccountIds;
  }
  if (!Util.isUnset(request.statusList)) {
    query.statusList = request.statusList;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query.createStartTime = request.createStartTime;
  }
  if (!Util.isUnset(request.createEndTime)) {
    query.createEndTime = request.createEndTime;
  }
  if (!Util.isUnset(request.executeStartTime)) {
    query.executeStartTime = request.executeStartTime;
  }
  if (!Util.isUnset(request.executeEndTime)) {
    query.executeEndTime = request.executeEndTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListPipelines', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/pipelines`, 'json', req, runtime);
}

model UpdateResourceMemberRequest {
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限   owner 拥有者，所有权限 流水线 pipeline   owner 拥有者，所有权限   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model UpdateResourceMemberResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceMemberResponseBody(name='body'),
}

async function updateResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest): UpdateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, request, headers, runtime);
}

async function updateResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateResourceMemberResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.roleName)) {
    body.roleName = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateResourceMember', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/${resourceType}/${resourceId}/members/${accountId}`, 'json', req, runtime);
}

model UpdateVariableGroupRequest {
  name?: string(name='name', description='变量组名称'),
  description?: string(name='description', description='变量组描述'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model UpdateVariableGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVariableGroupResponseBody(name='body'),
}

async function updateVariableGroup(organizationId: string, id: string, request: UpdateVariableGroupRequest): UpdateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateVariableGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateVariableGroupWithOptions(organizationId: string, id: string, request: UpdateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVariableGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.variables)) {
    body.variables = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateVariableGroup', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/variableGroups/${id}`, 'json', req, runtime);
}

model DeleteResourceMemberResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceMemberResponseBody(name='body'),
}

async function deleteResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string): DeleteResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, headers, runtime);
}

async function deleteResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceMemberResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteResourceMember', '2021-06-25', 'HTTPS', 'DELETE', 'AK', `/organization/${organizationId}/${resourceType}/${resourceId}/members/${accountId}`, 'json', req, runtime);
}

model ListHostGroupsRequest {
  ids?: string(name='ids', description='主机组id，多个逗号分割'),
  createStartTime?: long(name='createStartTime', description='主机组创建时间'),
  createEndTime?: long(name='createEndTime', description='主机组结束时间'),
  name?: string(name='name', description='主机组名称'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建阿里云账号id，多个逗号分割'),
  nextToken?: string(name='nextToken', description='分页token'),
  maxResults?: long(name='maxResults', description='结果返回个数'),
  pageSort?: string(name='pageSort', description='排序条件ID'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
}

model ListHostGroupsResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  hostGroups?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      updateTime?: long(name='updateTime', description='更新时间'),
      hostNum?: long(name='hostNum', description='主机个数'),
      modifierAccountId?: string(name='modifierAccountId', description='修改人阿里云账号id'),
      description?: string(name='description', description='描述'),
      type?: string(name='type', description='类型'),
      createTime?: long(name='createTime', description='主机时间'),
      ecsType?: string(name='ecsType', description='主机类型'),
      aliyunRegion?: string(name='aliyunRegion', description='阿里云区域'),
      ecsLabelKey?: string(name='ecsLabelKey', description='ecs标签Key'),
      name?: string(name='name', description='部署组名称'),
      id?: long(name='id', description='323232'),
      serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
      ecsLabelValue?: string(name='ecsLabelValue', description='Ecs标签值'),
    }
  ](name='hostGroups', description='主机组'),
  totalCount?: long(name='totalCount', description='总数'),
  nextToken?: string(name='nextToken', description='分页token,空表示最后一页'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroups(organizationId: string, request: ListHostGroupsRequest): ListHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHostGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listHostGroupsWithOptions(organizationId: string, request: ListHostGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHostGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.ids)) {
    query.ids = request.ids;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query.createStartTime = request.createStartTime;
  }
  if (!Util.isUnset(request.createEndTime)) {
    query.createEndTime = request.createEndTime;
  }
  if (!Util.isUnset(request.name)) {
    query.name = request.name;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query.creatorAccountIds = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.pageSort)) {
    query.pageSort = request.pageSort;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query.pageOrder = request.pageOrder;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListHostGroups', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/hostGroups`, 'json', req, runtime);
}

model ResetSshKeyResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  sshKey?: {
    publicKey?: string(name='publicKey', description='企业公钥'),
    id?: long(name='id', description='企业公钥id'),
  }(name='sshKey', description='企业公钥'),
}

model ResetSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSshKeyResponseBody(name='body'),
}

async function resetSshKey(organizationId: string): ResetSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resetSshKeyWithOptions(organizationId, headers, runtime);
}

async function resetSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResetSshKeyResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ResetSshKey', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/sshKey`, 'json', req, runtime);
}

model ListServiceConnectionsRequest {
  sericeConnectionType?: string(name='sericeConnectionType', description='aliyun_code  阿里云代码 Codeup       Codeup  Gitee        码云 github       Github ack       容器服务Kubernetes(ACK) docker_register_aliyun    容器镜像服务(ACR) ecs          对象存储(OSS) edas          企业级分布式应用(EDAS) emas         移动研发平台(EMAS) fc            阿里云函数计算(FC) kubernetes     自建k8s集群 oss            对象存储(OSS) PACKAGES       制品仓库 ros   资源编排服务(ROS) sae       Serverless应用引擎(SAE)'),
}

model ListServiceConnectionsResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  serviceConnections?: [ 
    {
      ownerAccountId?: long(name='ownerAccountId', description='拥有者阿里云账号id'),
      name?: string(name='name', description='服务连接名称'),
      id?: long(name='id', description='服务连接Id'),
      type?: string(name='type', description='服务连接类型'),
      createTime?: long(name='createTime', description='创建时间'),
    }
  ](name='serviceConnections', description='服务连接'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(organizationId: string, request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceConnectionsWithOptions(organizationId, request, headers, runtime);
}

async function listServiceConnectionsWithOptions(organizationId: string, request: ListServiceConnectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceConnectionsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.sericeConnectionType)) {
    query.sericeConnectionType = request.sericeConnectionType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListServiceConnections', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/serviceConnections`, 'json', req, runtime);
}

model CreateHostGroupRequest {
  type?: string(name='type'),
  envId?: string(name='envId'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  ecsType?: string(name='ecsType'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  aliyunRegion?: string(name='aliyunRegion'),
  machineInfos?: string(name='machineInfos'),
}

model CreateHostGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  errorMessage?: string(name='errorMessage'),
  errorCode?: string(name='errorCode'),
  success?: boolean(name='success'),
  hostGroupId?: long(name='hostGroupId'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroup(organizationId: string, request: CreateHostGroupRequest): CreateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHostGroupWithOptions(organizationId, request, headers, runtime);
}

async function createHostGroupWithOptions(organizationId: string, request: CreateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHostGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }
  if (!Util.isUnset(request.envId)) {
    body.envId = request.envId;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body.serviceConnectionId = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body.tagIds = request.tagIds;
  }
  if (!Util.isUnset(request.ecsType)) {
    body.ecsType = request.ecsType;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body.ecsLabelKey = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body.ecsLabelValue = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.aliyunRegion)) {
    body.aliyunRegion = request.aliyunRegion;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body.machineInfos = request.machineInfos;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateHostGroup', '2021-06-25', 'HTTPS', 'POST', 'AK', `/organization/${organizationId}/hostGroups`, 'json', req, runtime);
}

model StopPipelineRunResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineRunResponseBody(name='body'),
}

async function stopPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): StopPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function stopPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineRunResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('StopPipelineRun', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/stop`, 'json', req, runtime);
}

model UpdateHostGroupRequest {
  type?: string(name='type'),
  envId?: string(name='envId'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  ecsType?: string(name='ecsType'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  aliyunRegion?: string(name='aliyunRegion'),
  machineInfos?: string(name='machineInfos'),
}

model UpdateHostGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  errorMessage?: string(name='errorMessage'),
  errorCode?: string(name='errorCode'),
  success?: boolean(name='success'),
}

model UpdateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHostGroupResponseBody(name='body'),
}

async function updateHostGroup(organizationId: string, id: string, request: UpdateHostGroupRequest): UpdateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHostGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateHostGroupWithOptions(organizationId: string, id: string, request: UpdateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHostGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }
  if (!Util.isUnset(request.envId)) {
    body.envId = request.envId;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body.serviceConnectionId = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body.tagIds = request.tagIds;
  }
  if (!Util.isUnset(request.ecsType)) {
    body.ecsType = request.ecsType;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body.ecsLabelKey = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body.ecsLabelValue = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.aliyunRegion)) {
    body.aliyunRegion = request.aliyunRegion;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body.machineInfos = request.machineInfos;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateHostGroup', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/hostGroups/${id}`, 'json', req, runtime);
}

model CreateResourceMemberRequest {
  accountId?: string(name='accountId', description='用户id'),
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限 流水线 pipeline   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model CreateResourceMemberResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceMemberResponseBody(name='body'),
}

async function createResourceMember(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest): CreateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceMemberWithOptions(organizationId, resourceType, resourceId, request, headers, runtime);
}

async function createResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceMemberResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountId)) {
    body.accountId = request.accountId;
  }
  if (!Util.isUnset(request.roleName)) {
    body.roleName = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateResourceMember', '2021-06-25', 'HTTPS', 'POST', 'AK', `/organization/${organizationId}/${resourceType}/${resourceId}/members`, 'json', req, runtime);
}

model SkipPipelineJobRunResponseBody = {
  requestId?: string(name='requestId'),
  errorMessage?: string(name='errorMessage'),
  errorCode?: string(name='errorCode'),
  success?: boolean(name='success'),
}

model SkipPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPipelineJobRunResponseBody(name='body'),
}

async function skipPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): SkipPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return skipPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function skipPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): SkipPipelineJobRunResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('SkipPipelineJobRun', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/skip`, 'json', req, runtime);
}

model StopPipelineJobRunResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineJobRunResponseBody(name='body'),
}

async function stopPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): StopPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function stopPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineJobRunResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('StopPipelineJobRun', '2021-06-25', 'HTTPS', 'PUT', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}/jobs/${jobId}/stop`, 'json', req, runtime);
}

model StartPipelineRunRequest {
  params?: string(name='params', description='流水线运行参数,json字符串 branchModeBranchs  分支模式运行的分支 envs  环境变量 runningBranchs 运行分支 runningTags  运行代码tag comment  运行备注'),
}

model StartPipelineRunResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  errorCode?: string(name='errorCode', description='错误码'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(organizationId: string, pipelineId: string, request: StartPipelineRunRequest): StartPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineRunWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function startPipelineRunWithOptions(organizationId: string, pipelineId: string, request: StartPipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineRunResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.params)) {
    body.params = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('StartPipelineRun', '2021-06-25', 'HTTPS', 'POST', 'AK', `/organizations/${organizationId}/pipelines/${pipelineId}/run`, 'json', req, runtime);
}

model GetPipelineRunResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRun?: {
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    createTime?: long(name='createTime', description='创建时间'),
    updateTime?: long(name='updateTime', description='更新时间'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    pipelineId?: long(name='pipelineId', description='流水线Id'),
    pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
    status?: string(name='status', description='状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
    triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
    stageGroup?: [[ string ]    ](name='stageGroup', description='阶段拓扑信息'),
    sources?: [ 
      {
        sign?: string(name='sign', description='代码源唯一标识'),
        type?: string(name='type', description='代码库类型'),
        data?: {
          branch?: string(name='branch', description='分支'),
          commint?: string(name='commint', description='提交信息 json数据'),
          repo?: string(name='repo', description='代码库地址'),
        }(name='data', description='代码源信息'),
      }
    ](name='sources', description='代码源'),
    stages?: [ 
      {
        name?: string(name='name', description='阶段名称'),
        stageInfo?: {
          endTime?: long(name='endTime', description='结束时间'),
          startTime?: long(name='startTime', description='开始时间'),
          name?: string(name='name', description='阶段名称'),
          status?: string(name='status', description='状态'),
          jobs?: [ 
            {
              endTime?: long(name='endTime', description='结束时间'),
              id?: long(name='id', description='任务Id'),
              name?: string(name='name', description='任务名称'),
              params?: string(name='params', description='触发参数'),
              status?: string(name='status', description='状态'),
              startTime?: long(name='startTime', description='开始时间'),
            }
          ](name='jobs', description='任务'),
        }(name='stageInfo', description='阶段详情'),
      }
    ](name='stages', description='阶段信息'),
  }(name='pipelineRun', description='流水线运行实例'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  errorCode?: boolean(name='errorCode', description='错误码'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): GetPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function getPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineRunResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetPipelineRun', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns/${pipelineRunId}`, 'json', req, runtime);
}

model GetPipelineResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipeline?: {
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    envId?: int32(name='envId', description='环境id 0 日常环境  1预发环境 2正式环境'),
    envName?: string(name='envName', description='环境名称'),
    createTime?: long(name='createTime', description='创建时间'),
    updateTime?: long(name='updateTime', description='更新时间'),
    groupId?: long(name='groupId', description='流水线分组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='流水线名称'),
    tagList?: [ 
      {
        id?: long(name='id', description='标签id'),
        name?: string(name='name', description='标签名称'),
      }
    ](name='tagList', description='标签'),
    pipelineConfig?: {
      flow?: string(name='flow', description='流水线配置信息'),
      settings?: string(name='settings', description='流水线环境变量等'),
      sources?: [ 
        {
          sign?: string(name='sign', description='代码源唯一标识'),
          type?: string(name='type', description='代码源类型aliyunGit 阿里云代码库 customGitlab  自建git giteeGit 码云 codeup Codeup git 通用git gitlab gitlab bitbucket bitbucket githubOAuth github'),
          data?: {
            branch?: string(name='branch', description='分支'),
            serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
            label?: string(name='label', description='代码源显示标签'),
            isTrigger?: boolean(name='isTrigger', description='是否提交触发'),
            repo?: string(name='repo', description='代码库地址'),
            triggerFilter?: string(name='triggerFilter', description='触发过滤条件'),
            webhook?: string(name='webhook', description='webhhook地址'),
            events?: [ string ](name='events', description='触发事件'),
            isBranchMode?: boolean(name='isBranchMode', description='是否分支模式'),
            isSubmodule?: boolean(name='isSubmodule', description='是否子模块'),
            isCloneDepth?: boolean(name='isCloneDepth', description='是否设置clone深度'),
            cloneDepth?: long(name='cloneDepth', description='克隆深度'),
            credentialId?: long(name='credentialId', description='Credential Id'),
            credentialType?: string(name='credentialType', description='Credential Type'),
            credentialLabel?: string(name='credentialLabel', description='Credential Label'),
            namespace?: string(name='namespace', description='github命名空间'),
          }(name='data', description='代码数据'),
        }
      ](name='sources', description='代码源'),
    }(name='pipelineConfig', description='流水线配置'),
  }(name='pipeline', description='流水线'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  errorCode?: string(name='errorCode', description='错误码'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(organizationId: string, pipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function getPipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetPipeline', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}`, 'json', req, runtime);
}

model CreateVariableGroupRequest {
  name?: string(name='name', description='变量组名称'),
  description?: string(name='description', description='变量组描述'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model CreateVariableGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroupId?: long(name='variableGroupId', description='新建的变量组id'),
}

model CreateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVariableGroupResponseBody(name='body'),
}

async function createVariableGroup(organizationId: string, request: CreateVariableGroupRequest): CreateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createVariableGroupWithOptions(organizationId, request, headers, runtime);
}

async function createVariableGroupWithOptions(organizationId: string, request: CreateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVariableGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.variables)) {
    body.variables = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateVariableGroup', '2021-06-25', 'HTTPS', 'POST', 'AK', `/organization/${organizationId}/variableGroups`, 'json', req, runtime);
}

model DeleteVariableGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVariableGroupResponseBody(name='body'),
}

async function deleteVariableGroup(organizationId: string, id: string): DeleteVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVariableGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteVariableGroup', '2021-06-25', 'HTTPS', 'DELETE', 'AK', `/organization/${organizationId}/variableGroups/${id}`, 'json', req, runtime);
}

model CreateSshKeyResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  sshKey?: {
    publicKey?: string(name='publicKey', description='企业公钥'),
    id?: long(name='id', description='企业公钥id'),
  }(name='sshKey', description='企业公钥'),
}

model CreateSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSshKeyResponseBody(name='body'),
}

async function createSshKey(organizationId: string): CreateSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSshKeyWithOptions(organizationId, headers, runtime);
}

async function createSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSshKeyResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateSshKey', '2021-06-25', 'HTTPS', 'POST', 'AK', `/organization/${organizationId}/sshKey`, 'json', req, runtime);
}

model DeleteHostGroupResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroup(organizationId: string, id: string): DeleteHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHostGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteHostGroup', '2021-06-25', 'HTTPS', 'DELETE', 'AK', `/organization/${organizationId}/hostGroups/${id}`, 'json', req, runtime);
}

model ListVariableGroupsRequest {
  pageSort?: string(name='pageSort', description='排序条件'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
  nextToken?: string(name='nextToken', description='分页token，上一次请求的出参nextToken'),
  maxResults?: int32(name='maxResults', description='最大返回数，默认30'),
}

model ListVariableGroupsResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroups?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      updateTime?: long(name='updateTime', description='更新时间'),
      modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
      description?: string(name='description', description='变量组描述'),
      name?: string(name='name', description='变量组名称'),
      id?: long(name='id', description='变量组id'),
      relatedPipelines?: [ 
        {
          id?: long(name='id', description='关联的流水线Id'),
          name?: string(name='name', description='关联的流水线名称'),
        }
      ](name='relatedPipelines', description='关联的流水线'),
      variables?: [ 
        {
          value?: string(name='value', description='变量值'),
          name?: string(name='name', description='变量名'),
          isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
        }
      ](name='variables', description='变量'),
      createTime?: long(name='createTime', description='创建时间'),
    }
  ](name='variableGroups', description='变量组'),
  totalCount?: long(name='totalCount', description='变量组总数'),
  nextToken?: string(name='nextToken', description='下一次查询的token，为空表示最后一页'),
}

model ListVariableGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVariableGroupsResponseBody(name='body'),
}

async function listVariableGroups(organizationId: string, request: ListVariableGroupsRequest): ListVariableGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVariableGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listVariableGroupsWithOptions(organizationId: string, request: ListVariableGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVariableGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageSort)) {
    query.pageSort = request.pageSort;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query.pageOrder = request.pageOrder;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListVariableGroups', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/variableGroups`, 'json', req, runtime);
}

model DeletePipelineResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(organizationId: string, pipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function deletePipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeletePipeline', '2021-06-25', 'HTTPS', 'DELETE', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}`, 'json', req, runtime);
}

model ListPipelineRunsRequest {
  startTime?: long(name='startTime', description='开始时间'),
  endTime?: long(name='endTime', description='结束时间'),
  status?: string(name='status', description='状态 状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
  maxResults?: long(name='maxResults', description='最大返回数量'),
  nextToken?: string(name='nextToken', description='分页Token'),
  triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
}

model ListPipelineRunsResponseBody = {
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  errorCode?: string(name='errorCode', description='错误码'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
  nextToken?: string(name='nextToken', description='下一个分页token，为空时，表示没有下一页'),
  pipelineRuns?: [ 
    {
      pipelineId?: long(name='pipelineId', description='流水线id'),
      startTime?: long(name='startTime', description='开始时间'),
      creatorAccountId?: string(name='creatorAccountId', description='运行人阿里云账号id'),
      endTime?: long(name='endTime', description='结束时间'),
      pipelineRunId?: long(name='pipelineRunId', description='流水线实例id'),
      triggerMode?: long(name='triggerMode', description='触发模式'),
      status?: string(name='status', description='运行状态'),
    }
  ](name='pipelineRuns', description='流水线运行实例'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunsWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function listPipelineRunsWithOptions(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query.endTime = request.endTime;
  }
  if (!Util.isUnset(request.status)) {
    query.status = request.status;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.triggerMode)) {
    query.triggerMode = request.triggerMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListPipelineRuns', '2021-06-25', 'HTTPS', 'GET', 'AK', `/organization/${organizationId}/pipelines/${pipelineId}/pipelineRuns`, 'json', req, runtime);
}

