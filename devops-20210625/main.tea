/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('devops', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateHostGroupRequest {
  aliyunRegion?: string(name='aliyunRegion'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  ecsType?: string(name='ecsType'),
  envId?: string(name='envId'),
  machineInfos?: string(name='machineInfos'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  type?: string(name='type'),
}

model CreateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  hostGroupId?: long(name='hostGroupId'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroup(organizationId: string, request: CreateHostGroupRequest): CreateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHostGroupWithOptions(organizationId, request, headers, runtime);
}

async function createHostGroupWithOptions(organizationId: string, request: CreateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHostGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunRegion)) {
    body.aliyunRegion = request.aliyunRegion;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body.ecsLabelKey = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body.ecsLabelValue = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.ecsType)) {
    body.ecsType = request.ecsType;
  }
  if (!Util.isUnset(request.envId)) {
    body.envId = request.envId;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body.machineInfos = request.machineInfos;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body.serviceConnectionId = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body.tagIds = request.tagIds;
  }
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateResourceMemberRequest {
  accountId?: string(name='accountId', description='用户id'),
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限 流水线 pipeline   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model CreateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceMemberResponseBody(name='body'),
}

async function createResourceMember(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest): CreateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createResourceMemberWithOptions(organizationId, resourceType, resourceId, request, headers, runtime);
}

async function createResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, request: CreateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceMemberResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountId)) {
    body.accountId = request.accountId;
  }
  if (!Util.isUnset(request.roleName)) {
    body.roleName = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/{resourceType}/{resourceId}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model CreateSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSshKeyResponseBody(name='body'),
}

async function createSshKey(organizationId: string): CreateSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSshKeyWithOptions(organizationId, headers, runtime);
}

async function createSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSshKeyResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateSshKey',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sshKey`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateVariableGroupRequest {
  description?: string(name='description', description='变量组描述'),
  name?: string(name='name', description='变量组名称'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model CreateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroupId?: long(name='variableGroupId', description='新建的变量组id'),
}

model CreateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVariableGroupResponseBody(name='body'),
}

async function createVariableGroup(organizationId: string, request: CreateVariableGroupRequest): CreateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createVariableGroupWithOptions(organizationId, request, headers, runtime);
}

async function createVariableGroupWithOptions(organizationId: string, request: CreateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVariableGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.variables)) {
    body.variables = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceRequest {
  codeUrl?: string(name='codeUrl', description='代码来源URL（当前仅支持云效 Codeup 来源）'),
  codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
  filePath?: string(name='filePath', description='打开空间默认打开的文件相对路径'),
  name?: string(name='name', description='工作空间名称'),
  requestFrom?: string(name='requestFrom', description='请求来源（用于统计，云产品集成时需要传入）'),
  resourceIdentifier?: string(name='resourceIdentifier', description='资源标识，提供给非标代码源作为空间复用的唯一标识'),
  reuse?: boolean(name='reuse', description='工作空间复用标识，按照"用户+技术栈+代码地址+版本"进行复用 true - 复用 false - 不复用，每次均为新创建'),
  workspaceTemplate?: string(name='workspaceTemplate', description='技术栈'),
}

model CreateWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    createTime?: string(name='createTime', description='创建时间戳'),
    creator?: string(name='creator', description='创建者，阿里云PK'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
  }(name='workspace', description='工作空间信息'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeUrl)) {
    body.codeUrl = request.codeUrl;
  }
  if (!Util.isUnset(request.codeVersion)) {
    body.codeVersion = request.codeVersion;
  }
  if (!Util.isUnset(request.filePath)) {
    body.filePath = request.filePath;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.requestFrom)) {
    body.requestFrom = request.requestFrom;
  }
  if (!Util.isUnset(request.resourceIdentifier)) {
    body.resourceIdentifier = request.resourceIdentifier;
  }
  if (!Util.isUnset(request.reuse)) {
    body.reuse = request.reuse;
  }
  if (!Util.isUnset(request.workspaceTemplate)) {
    body.workspaceTemplate = request.workspaceTemplate;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroup(organizationId: string, id: string): DeleteHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHostGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/{id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeletePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineResponseBody(name='body'),
}

async function deletePipeline(organizationId: string, pipelineId: string): DeletePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function deletePipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipeline',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceMemberResponseBody(name='body'),
}

async function deleteResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string): DeleteResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, headers, runtime);
}

async function deleteResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceMemberResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/{resourceType}/{resourceId}/members/{accountId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model DeleteVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVariableGroupResponseBody(name='body'),
}

async function deleteVariableGroup(organizationId: string, id: string): DeleteVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function deleteVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVariableGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/{id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FrozenWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model FrozenWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: FrozenWorkspaceResponseBody(name='body'),
}

async function frozenWorkspace(workspaceId: string): FrozenWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return frozenWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function frozenWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): FrozenWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'FrozenWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}/frozen`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHostGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroup?: {
    aliyunRegion?: string(name='aliyunRegion'),
    createTime?: long(name='createTime'),
    creatorAccountId?: string(name='creatorAccountId'),
    description?: string(name='description'),
    ecsLabelKey?: string(name='ecsLabelKey'),
    ecsLabelValue?: string(name='ecsLabelValue'),
    ecsType?: string(name='ecsType'),
    hostInfos?: [ 
      {
        aliyunRegionId?: string(name='aliyunRegionId'),
        createTime?: long(name='createTime'),
        creatorAccountId?: string(name='creatorAccountId'),
        instanceName?: string(name='instanceName'),
        ip?: string(name='ip'),
        machineSn?: string(name='machineSn'),
        modifierAccountId?: string(name='modifierAccountId'),
        objectType?: string(name='objectType'),
        updateTime?: long(name='updateTime'),
      }
    ](name='hostInfos'),
    hostNum?: long(name='hostNum'),
    id?: long(name='id'),
    modifierAccountId?: string(name='modifierAccountId'),
    name?: string(name='name'),
    serviceConnectionId?: long(name='serviceConnectionId'),
    type?: string(name='type'),
    upateTIme?: long(name='upateTIme'),
  }(name='hostGroup'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroup(organizationId: string, id: string): GetHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHostGroupWithOptions(organizationId, id, headers, runtime);
}

async function getHostGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHostGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/{id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  member?: {
    accountId?: string(name='accountId', description='阿里云用户PK'),
    birthday?: long(name='birthday', description='生日'),
    deptLists?: [ string ](name='deptLists', description='部门名称列表'),
    email?: string(name='email', description='邮箱'),
    hiredDate?: long(name='hiredDate', description='入职时间'),
    identities?: {
      externUid?: string(name='externUid', description='第三方系统的用户 id'),
      provider?: string(name='provider', description='第三方系统'),
    }(name='identities', description='第三方信息'),
    joinTime?: long(name='joinTime', description='加入云效企业时间'),
    lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
    mobile?: string(name='mobile', description='手机号'),
    organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
    organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
    organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
    state?: string(name='state', description='用户状态'),
  }(name='member', description='成员'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetOrganizationMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrganizationMemberResponseBody(name='body'),
}

async function getOrganizationMember(organizationId: string, accountId: string): GetOrganizationMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getOrganizationMemberWithOptions(organizationId, accountId, headers, runtime);
}

async function getOrganizationMemberWithOptions(organizationId: string, accountId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetOrganizationMemberResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/members/{accountId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipeline?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    envId?: int32(name='envId', description='环境id 0 日常环境  1预发环境 2正式环境'),
    envName?: string(name='envName', description='环境名称'),
    groupId?: long(name='groupId', description='流水线分组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='流水线名称'),
    pipelineConfig?: {
      flow?: string(name='flow', description='流水线配置信息'),
      settings?: string(name='settings', description='流水线环境变量等'),
      sources?: [ 
        {
          data?: {
            branch?: string(name='branch', description='分支'),
            cloneDepth?: long(name='cloneDepth', description='克隆深度'),
            credentialId?: long(name='credentialId', description='Credential Id'),
            credentialLabel?: string(name='credentialLabel', description='Credential Label'),
            credentialType?: string(name='credentialType', description='Credential Type'),
            events?: [ string ](name='events', description='触发事件'),
            isBranchMode?: boolean(name='isBranchMode', description='是否分支模式'),
            isCloneDepth?: boolean(name='isCloneDepth', description='是否设置clone深度'),
            isSubmodule?: boolean(name='isSubmodule', description='是否子模块'),
            isTrigger?: boolean(name='isTrigger', description='是否提交触发'),
            label?: string(name='label', description='代码源显示标签'),
            namespace?: string(name='namespace', description='github命名空间'),
            repo?: string(name='repo', description='代码库地址'),
            serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
            triggerFilter?: string(name='triggerFilter', description='触发过滤条件'),
            webhook?: string(name='webhook', description='webhhook地址'),
          }(name='data', description='代码数据'),
          sign?: string(name='sign', description='代码源唯一标识'),
          type?: string(name='type', description='代码源类型aliyunGit 阿里云代码库 customGitlab  自建git giteeGit 码云 codeup Codeup git 通用git gitlab gitlab bitbucket bitbucket githubOAuth github'),
        }
      ](name='sources', description='代码源'),
    }(name='pipelineConfig', description='流水线配置'),
    tagList?: [ 
      {
        id?: long(name='id', description='标签id'),
        name?: string(name='name', description='标签名称'),
      }
    ](name='tagList', description='标签'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipeline', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineResponseBody(name='body'),
}

async function getPipeline(organizationId: string, pipelineId: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(organizationId, pipelineId, headers, runtime);
}

async function getPipelineWithOptions(organizationId: string, pipelineId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRun?: {
    createTime?: long(name='createTime', description='创建时间'),
    creatorAccountId?: string(name='creatorAccountId', description='创建者阿里云账号id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    pipelineId?: long(name='pipelineId', description='流水线Id'),
    pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
    sources?: [ 
      {
        data?: {
          branch?: string(name='branch', description='分支'),
          commint?: string(name='commint', description='提交信息 json数据'),
          repo?: string(name='repo', description='代码库地址'),
        }(name='data', description='代码源信息'),
        sign?: string(name='sign', description='代码源唯一标识'),
        type?: string(name='type', description='代码库类型'),
      }
    ](name='sources', description='代码源'),
    stageGroup?: [[ string ]    ](name='stageGroup', description='阶段拓扑信息'),
    stages?: [ 
      {
        name?: string(name='name', description='阶段名称'),
        stageInfo?: {
          endTime?: long(name='endTime', description='结束时间'),
          jobs?: [ 
            {
              actions?: [ 
                {
                  disable?: boolean(name='disable', description='是否可用'),
                  params?: map[string]any(name='params', description='API参数'),
                  type?: string(name='type', description='API名称'),
                }
              ](name='actions', description='后续操作'),
              endTime?: long(name='endTime', description='结束时间'),
              id?: long(name='id', description='任务Id'),
              name?: string(name='name', description='任务名称'),
              params?: string(name='params', description='触发参数'),
              startTime?: long(name='startTime', description='开始时间'),
              status?: string(name='status', description='状态'),
            }
          ](name='jobs', description='任务'),
          name?: string(name='name', description='阶段名称'),
          startTime?: long(name='startTime', description='开始时间'),
          status?: string(name='status', description='状态'),
        }(name='stageInfo', description='阶段详情'),
      }
    ](name='stages', description='阶段信息'),
    status?: string(name='status', description='状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
    triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
    updateTime?: long(name='updateTime', description='更新时间'),
  }(name='pipelineRun', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineRunResponseBody(name='body'),
}

async function getPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): GetPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function getPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetVMDeployOrderResponseBody = {
  deployOrder?: {
    actions?: [ 
      {
        disable?: boolean(name='disable', description='是否可用'),
        params?: map[string]any(name='params', description='参数'),
        type?: string(name='type', description='Action'),
      }
    ](name='actions', description='后续action'),
    createTime?: long(name='createTime', description='创建时时间'),
    creator?: string(name='creator', description='创建人'),
    currentBatch?: int32(name='currentBatch', description='当前发布批次'),
    deployMachineInfo?: {
      batchNum?: int32(name='batchNum', description='发布批次'),
      deployMachines?: [ 
        {
          actions?: [ 
            {
              disable?: boolean(name='disable', description='是否可用'),
              params?: map[string]any(name='params', description='参数'),
              type?: string(name='type', description='Action'),
            }
          ](name='actions', description='后续action'),
          batchNum?: int32(name='batchNum', description='部署批次'),
          clientStatus?: string(name='clientStatus', description='机器状态'),
          createTime?: long(name='createTime', description='开始时间'),
          ip?: string(name='ip', description='机器IP'),
          machineSn?: string(name='machineSn', description='机器sn'),
          status?: string(name='status', description='部署状态'),
          updateTime?: long(name='updateTime', description='修改时间'),
        }
      ](name='deployMachines', description='部署机器列表'),
      hostGroupId?: long(name='hostGroupId', description='主机组ID'),
    }(name='deployMachineInfo', description='部署机器信息'),
    deployOrderId?: string(name='deployOrderId', description='部署单ID'),
    exceptionCode?: string(name='exceptionCode', description='错误码'),
    status?: string(name='status', description='发布状态'),
    totalBatch?: int32(name='totalBatch', description='总发布批次'),
    updateTime?: long(name='updateTime', description='修改时间'),
  }(name='deployOrder', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model GetVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetVMDeployOrderResponseBody(name='body'),
}

async function getVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): GetVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function getVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  variableGroup?: {
    ccreatorAccountId?: string(name='ccreatorAccountId', description='创建人阿里云账号id'),
    createTime?: long(name='createTime', description='创建时间'),
    description?: string(name='description', description='变量组描述'),
    id?: long(name='id', description='变量组id'),
    modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
    name?: string(name='name', description='变量组名称'),
    relatedPipelines?: [ 
      {
        id?: long(name='id', description='关联的流水线Id'),
        name?: string(name='name', description='关联的流水线名称'),
      }
    ](name='relatedPipelines', description='关联的流水线'),
    updateTime?: long(name='updateTime', description='更新时间'),
    variables?: [ 
      {
        isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
        name?: string(name='name', description='变量名'),
        value?: string(name='value', description='变量值'),
      }
    ](name='variables', description='变量'),
  }(name='variableGroup', description='变量组'),
}

model GetVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetVariableGroupResponseBody(name='body'),
}

async function getVariableGroup(organizationId: string, id: string): GetVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVariableGroupWithOptions(organizationId, id, headers, runtime);
}

async function getVariableGroupWithOptions(organizationId: string, id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVariableGroupResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/{id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  workspace?: {
    codeUrl?: string(name='codeUrl', description='代码来源URL'),
    codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
    createTime?: string(name='createTime', description='创建时间戳'),
    id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
    name?: string(name='name', description='工作空间名称'),
    spec?: string(name='spec', description='机器规格'),
    status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
    template?: string(name='template', description='工作空间模板'),
    userId?: string(name='userId', description='用户阿里云PK'),
  }(name='workspace', description='工作空间信息'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(workspaceId: string): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function getWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHostGroupsRequest {
  createEndTime?: long(name='createEndTime', description='主机组结束时间'),
  createStartTime?: long(name='createStartTime', description='主机组创建时间'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建阿里云账号id，多个逗号分割'),
  ids?: string(name='ids', description='主机组id，多个逗号分割'),
  maxResults?: long(name='maxResults', description='结果返回个数'),
  name?: string(name='name', description='主机组名称'),
  nextToken?: string(name='nextToken', description='分页token'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
  pageSort?: string(name='pageSort', description='排序条件ID'),
}

model ListHostGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  hostGroups?: [ 
    {
      aliyunRegion?: string(name='aliyunRegion', description='阿里云区域'),
      createTime?: long(name='createTime', description='主机时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='描述'),
      ecsLabelKey?: string(name='ecsLabelKey', description='ecs标签Key'),
      ecsLabelValue?: string(name='ecsLabelValue', description='Ecs标签值'),
      ecsType?: string(name='ecsType', description='主机类型'),
      hostNum?: long(name='hostNum', description='主机个数'),
      id?: long(name='id', description='323232'),
      modifierAccountId?: string(name='modifierAccountId', description='修改人阿里云账号id'),
      name?: string(name='name', description='部署组名称'),
      serviceConnectionId?: long(name='serviceConnectionId', description='服务连接Id'),
      type?: string(name='type', description='类型'),
      updateTime?: long(name='updateTime', description='更新时间'),
    }
  ](name='hostGroups', description='主机组'),
  nextToken?: string(name='nextToken', description='分页token,空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroups(organizationId: string, request: ListHostGroupsRequest): ListHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHostGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listHostGroupsWithOptions(organizationId: string, request: ListHostGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHostGroupsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.createEndTime)) {
    query.createEndTime = request.createEndTime;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query.createStartTime = request.createStartTime;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query.creatorAccountIds = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.ids)) {
    query.ids = request.ids;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query.name = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query.pageOrder = request.pageOrder;
  }
  if (!Util.isUnset(request.pageSort)) {
    query.pageSort = request.pageSort;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHostGroups',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationMembersRequest {
  externUid?: string(name='externUid'),
  joinTimeFrom?: long(name='joinTimeFrom'),
  joinTimeTo?: long(name='joinTimeTo'),
  maxResults?: long(name='maxResults'),
  nextToken?: string(name='nextToken'),
  organizationMemberName?: string(name='organizationMemberName'),
  provider?: string(name='provider'),
  state?: string(name='state'),
}

model ListOrganizationMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  members?: [ 
    {
      accountId?: string(name='accountId', description='阿里云用户ID'),
      birthday?: long(name='birthday', description='生日'),
      deptLists?: [ string ](name='deptLists', description='部门名称列表'),
      email?: string(name='email', description='邮箱'),
      hiredDate?: long(name='hiredDate', description='入职时间'),
      identities?: {
        externUid?: string(name='externUid', description='第三方系统的用户Id'),
        provider?: string(name='provider', description='第三方系统'),
      }(name='identities', description='第三方信息'),
      joinTime?: long(name='joinTime', description='加入云效企业时间'),
      lastVisitTime?: long(name='lastVisitTime', description='最近一次访问时间'),
      mobile?: string(name='mobile', description='手机号'),
      organizationMemberName?: string(name='organizationMemberName', description='企业成员名'),
      organizationRoleId?: string(name='organizationRoleId', description='企业角色Id'),
      organizationRoleName?: string(name='organizationRoleName', description='企业角色名字'),
      state?: string(name='state', description='用户状态'),
    }
  ](name='members', description='成员列表'),
  nextToken?: string(name='nextToken', description='分页Token'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationMembersResponseBody(name='body'),
}

async function listOrganizationMembers(organizationId: string, request: ListOrganizationMembersRequest): ListOrganizationMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listOrganizationMembersWithOptions(organizationId, request, headers, runtime);
}

async function listOrganizationMembersWithOptions(organizationId: string, request: ListOrganizationMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOrganizationMembersResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.externUid)) {
    query.externUid = request.externUid;
  }
  if (!Util.isUnset(request.joinTimeFrom)) {
    query.joinTimeFrom = request.joinTimeFrom;
  }
  if (!Util.isUnset(request.joinTimeTo)) {
    query.joinTimeTo = request.joinTimeTo;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.organizationMemberName)) {
    query.organizationMemberName = request.organizationMemberName;
  }
  if (!Util.isUnset(request.provider)) {
    query.provider = request.provider;
  }
  if (!Util.isUnset(request.state)) {
    query.state = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationMembers',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelineRunsRequest {
  endTime?: long(name='endTime', description='结束时间'),
  maxResults?: long(name='maxResults', description='最大返回数量'),
  nextToken?: string(name='nextToken', description='分页Token'),
  startTime?: long(name='startTime', description='开始时间'),
  status?: string(name='status', description='状态 状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中'),
  triggerMode?: int32(name='triggerMode', description='触发模式 1人工触发 2定时触发 3代码提交触发'),
}

model ListPipelineRunsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一个分页token，为空时，表示没有下一页'),
  pipelineRuns?: [ 
    {
      creatorAccountId?: string(name='creatorAccountId', description='运行人阿里云账号id'),
      endTime?: long(name='endTime', description='结束时间'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineRunId?: long(name='pipelineRunId', description='流水线实例id'),
      startTime?: long(name='startTime', description='开始时间'),
      status?: string(name='status', description='运行状态'),
      triggerMode?: long(name='triggerMode', description='触发模式'),
    }
  ](name='pipelineRuns', description='流水线运行实例'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelineRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineRunsResponseBody(name='body'),
}

async function listPipelineRuns(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineRunsWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function listPipelineRunsWithOptions(organizationId: string, pipelineId: string, request: ListPipelineRunsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineRunsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query.endTime = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query.status = request.status;
  }
  if (!Util.isUnset(request.triggerMode)) {
    query.triggerMode = request.triggerMode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRuns',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPipelinesRequest {
  createEndTime?: long(name='createEndTime', description='创建结束时间'),
  createStartTime?: long(name='createStartTime', description='创建开始时间'),
  creatorAccountIds?: string(name='creatorAccountIds', description='创建人阿里云账号Id'),
  executeAccountIds?: string(name='executeAccountIds', description='执行人阿里云账号id'),
  executeEndTime?: long(name='executeEndTime', description='执行结束时间'),
  executeStartTime?: long(name='executeStartTime', description='执行开始时间'),
  maxResults?: long(name='maxResults', description='返回的总数'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelineName?: string(name='pipelineName', description='流水线名称'),
  statusList?: string(name='statusList', description='状态列表，多个逗号分割'),
}

model ListPipelinesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='分页Token'),
  pipelines?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      pipelineId?: long(name='pipelineId', description='流水线id'),
      pipelineName?: string(name='pipelineName', description='流水线名称'),
    }
  ](name='pipelines', description='流水线'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(organizationId: string, request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(organizationId, request, headers, runtime);
}

async function listPipelinesWithOptions(organizationId: string, request: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.createEndTime)) {
    query.createEndTime = request.createEndTime;
  }
  if (!Util.isUnset(request.createStartTime)) {
    query.createStartTime = request.createStartTime;
  }
  if (!Util.isUnset(request.creatorAccountIds)) {
    query.creatorAccountIds = request.creatorAccountIds;
  }
  if (!Util.isUnset(request.executeAccountIds)) {
    query.executeAccountIds = request.executeAccountIds;
  }
  if (!Util.isUnset(request.executeEndTime)) {
    query.executeEndTime = request.executeEndTime;
  }
  if (!Util.isUnset(request.executeStartTime)) {
    query.executeStartTime = request.executeStartTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.pipelineName)) {
    query.pipelineName = request.pipelineName;
  }
  if (!Util.isUnset(request.statusList)) {
    query.statusList = request.statusList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourceMembersResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  resourceMembers?: [ 
    {
      accountId?: string(name='accountId', description='账号id'),
      roleName?: string(name='roleName', description='角色'),
      username?: string(name='username', description='用户名称'),
    }
  ](name='resourceMembers', description='成员'),
  success?: boolean(name='success', description='请求id，每次请求都是唯一值，便于后续排查问题'),
}

model ListResourceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceMembersResponseBody(name='body'),
}

async function listResourceMembers(organizationId: string, resourceType: string, resourceId: string): ListResourceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourceMembersWithOptions(organizationId, resourceType, resourceId, headers, runtime);
}

async function listResourceMembersWithOptions(organizationId: string, resourceType: string, resourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceMembersResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListResourceMembers',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/{resourceType}/{resourceId}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListServiceConnectionsRequest {
  sericeConnectionType?: string(name='sericeConnectionType', description='aliyun_code  阿里云代码 Codeup       Codeup  Gitee        码云 github       Github ack       容器服务Kubernetes(ACK) docker_register_aliyun    容器镜像服务(ACR) ecs          对象存储(OSS) edas          企业级分布式应用(EDAS) emas         移动研发平台(EMAS) fc            阿里云函数计算(FC) kubernetes     自建k8s集群 oss            对象存储(OSS) PACKAGES       制品仓库 ros   资源编排服务(ROS) sae       Serverless应用引擎(SAE)'),
}

model ListServiceConnectionsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  serviceConnections?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      id?: long(name='id', description='服务连接Id'),
      name?: string(name='name', description='服务连接名称'),
      ownerAccountId?: long(name='ownerAccountId', description='拥有者阿里云账号id'),
      type?: string(name='type', description='服务连接类型'),
    }
  ](name='serviceConnections', description='服务连接'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(organizationId: string, request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceConnectionsWithOptions(organizationId, request, headers, runtime);
}

async function listServiceConnectionsWithOptions(organizationId: string, request: ListServiceConnectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceConnectionsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.sericeConnectionType)) {
    query.sericeConnectionType = request.sericeConnectionType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceConnections',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/serviceConnections`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListVariableGroupsRequest {
  maxResults?: int32(name='maxResults', description='最大返回数，默认30'),
  nextToken?: string(name='nextToken', description='分页token，上一次请求的出参nextToken'),
  pageOrder?: string(name='pageOrder', description='排序顺序'),
  pageSort?: string(name='pageSort', description='排序条件'),
}

model ListVariableGroupsResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  nextToken?: string(name='nextToken', description='下一次查询的token，为空表示最后一页'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
  totalCount?: long(name='totalCount', description='变量组总数'),
  variableGroups?: [ 
    {
      createTime?: long(name='createTime', description='创建时间'),
      creatorAccountId?: string(name='creatorAccountId', description='创建人阿里云账号id'),
      description?: string(name='description', description='变量组描述'),
      id?: long(name='id', description='变量组id'),
      modifierAccountId?: string(name='modifierAccountId', description='更新人阿里云账号id'),
      name?: string(name='name', description='变量组名称'),
      relatedPipelines?: [ 
        {
          id?: long(name='id', description='关联的流水线Id'),
          name?: string(name='name', description='关联的流水线名称'),
        }
      ](name='relatedPipelines', description='关联的流水线'),
      updateTime?: long(name='updateTime', description='更新时间'),
      variables?: [ 
        {
          isEncrypted?: boolean(name='isEncrypted', description='是否加密'),
          name?: string(name='name', description='变量名'),
          value?: string(name='value', description='变量值'),
        }
      ](name='variables', description='变量'),
    }
  ](name='variableGroups', description='变量组'),
}

model ListVariableGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVariableGroupsResponseBody(name='body'),
}

async function listVariableGroups(organizationId: string, request: ListVariableGroupsRequest): ListVariableGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVariableGroupsWithOptions(organizationId, request, headers, runtime);
}

async function listVariableGroupsWithOptions(organizationId: string, request: ListVariableGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVariableGroupsResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.pageOrder)) {
    query.pageOrder = request.pageOrder;
  }
  if (!Util.isUnset(request.pageSort)) {
    query.pageSort = request.pageSort;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVariableGroups',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量，默认10，最大100'),
  nextToken?: string(name='nextToken', description='用来标记当前开始读取的位置，置空表示从头开始'),
  statusList?: [ string ](name='statusList', description='枚举值：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
  workspaceTemplateList?: [ string ](name='workspaceTemplateList', description='空间模板列表'),
}

model ListWorkspacesShrinkRequest {
  maxResults?: int32(name='maxResults', description='本次读取的最大数据记录数量，默认10，最大100'),
  nextToken?: string(name='nextToken', description='用来标记当前开始读取的位置，置空表示从头开始'),
  statusListShrink?: string(name='statusList', description='枚举值：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
  workspaceTemplateListShrink?: string(name='workspaceTemplateList', description='空间模板列表'),
}

model ListWorkspacesResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  maxResults?: int32(name='maxResults', description='MaxResults本次请求所返回的最大记录条数'),
  nextToken?: string(name='nextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
  totalCount?: int32(name='totalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回'),
  workspaces?: [ 
    {
      codeUrl?: string(name='codeUrl', description='代码来源URL'),
      codeVersion?: string(name='codeVersion', description='代码版本，支持 commitSHA、分支、标签'),
      createTime?: string(name='createTime', description='创建时间戳'),
      id?: string(name='id', description='工作空间唯一标识，字符串形式，可在云效DevStudio访问空间链接中获取'),
      name?: string(name='name', description='工作空间名称'),
      spec?: string(name='spec', description='机器规格'),
      status?: string(name='status', description='空间状态，枚举：CREATING-创建中, SUCCESS-运行中, FROZEN-冻结中, RECOVERING-恢复中'),
      template?: string(name='template', description='工作空间模板'),
      userId?: string(name='userId', description='用户阿里云PK'),
    }
  ](name='workspaces', description='工作空间列表'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

async function listWorkspacesWithOptions(tmpReq: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.statusList)) {
    request.statusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statusList, 'statusList', 'simple');
  }
  if (!Util.isUnset(tmpReq.workspaceTemplateList)) {
    request.workspaceTemplateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.workspaceTemplateList, 'workspaceTemplateList', 'simple');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxResults)) {
    query.maxResults = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query.nextToken = request.nextToken;
  }
  if (!Util.isUnset(request.statusListShrink)) {
    query.statusList = request.statusListShrink;
  }
  if (!Util.isUnset(request.workspaceTemplateListShrink)) {
    query.workspaceTemplateList = request.workspaceTemplateListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model LogPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  log?: {
    content?: string(name='content'),
    more?: boolean(name='more'),
  }(name='log'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model LogPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: LogPipelineJobRunResponseBody(name='body'),
}

async function logPipelineJobRun(organizationId: string, pipelineId: string, jobId: string, pipelineRunId: string): LogPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return logPipelineJobRunWithOptions(organizationId, pipelineId, jobId, pipelineRunId, headers, runtime);
}

async function logPipelineJobRunWithOptions(organizationId: string, pipelineId: string, jobId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): LogPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'LogPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipeline/{pipelineId}/pipelineRun/{pipelineRunId}/job/{jobId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model LogVMDeployMachineResponseBody = {
  deployMachineLog?: {
    aliyunRegion?: string(name='aliyunRegion', description='部署地域'),
    deployBeginTime?: long(name='deployBeginTime', description='部署开始时间'),
    deployEndTime?: long(name='deployEndTime', description='部署结束时间'),
    deployLog?: string(name='deployLog', description='部署日志'),
    deployLogPath?: string(name='deployLogPath', description='部署日志路径'),
  }(name='deployMachineLog', description='部署单'),
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model LogVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: LogVMDeployMachineResponseBody(name='body'),
}

async function logVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): LogVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return logVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function logVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): LogVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'LogVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/log`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PassPipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model PassPipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: PassPipelineValidateResponseBody(name='body'),
}

async function passPipelineValidate(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): PassPipelineValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return passPipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function passPipelineValidateWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PassPipelineValidateResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PassPipelineValidate',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/pass`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RefusePipelineValidateResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RefusePipelineValidateResponse = {
  headers: map[string]string(name='headers'),
  body: RefusePipelineValidateResponseBody(name='body'),
}

async function refusePipelineValidate(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): RefusePipelineValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return refusePipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function refusePipelineValidateWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RefusePipelineValidateResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RefusePipelineValidate',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/refuse`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReleaseWorkspaceResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求ID'),
  success?: boolean(name='success', description='请求是否成功'),
}

model ReleaseWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseWorkspaceResponseBody(name='body'),
}

async function releaseWorkspace(workspaceId: string): ReleaseWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return releaseWorkspaceWithOptions(workspaceId, headers, runtime);
}

async function releaseWorkspaceWithOptions(workspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseWorkspaceResponse {
  workspaceId = OpenApiUtil.getEncodeParam(workspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ReleaseWorkspace',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/api/workspaces/${workspaceId}/release`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResetSshKeyResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  sshKey?: {
    id?: long(name='id', description='企业公钥id'),
    publicKey?: string(name='publicKey', description='企业公钥'),
  }(name='sshKey', description='企业公钥'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResetSshKeyResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSshKeyResponseBody(name='body'),
}

async function resetSshKey(organizationId: string): ResetSshKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resetSshKeyWithOptions(organizationId, headers, runtime);
}

async function resetSshKeyWithOptions(organizationId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResetSshKeyResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResetSshKey',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/sshKey`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResumeVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model ResumeVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeVMDeployOrderResponseBody(name='body'),
}

async function resumeVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): ResumeVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function resumeVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/resume`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RetryPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model RetryPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: RetryPipelineJobRunResponseBody(name='body'),
}

async function retryPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): RetryPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function retryPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RetryPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RetryVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model RetryVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: RetryVMDeployMachineResponseBody(name='body'),
}

async function retryVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): RetryVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function retryVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RetryVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/retry`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SkipPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model SkipPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPipelineJobRunResponseBody(name='body'),
}

async function skipPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): SkipPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return skipPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function skipPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): SkipPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SkipPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/skip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SkipVMDeployMachineResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model SkipVMDeployMachineResponse = {
  headers: map[string]string(name='headers'),
  body: SkipVMDeployMachineResponseBody(name='body'),
}

async function skipVMDeployMachine(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string): SkipVMDeployMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return skipVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime);
}

async function skipVMDeployMachineWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, machineSn: string, headers: map[string]string, runtime: Util.RuntimeOptions): SkipVMDeployMachineResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  machineSn = OpenApiUtil.getEncodeParam(machineSn);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SkipVMDeployMachine',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/machine/{machineSn}/skip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartPipelineRunRequest {
  params?: string(name='params', description='流水线运行参数,json字符串 branchModeBranchs  分支模式运行的分支 envs  环境变量 runningBranchs 运行分支 runningTags  运行代码tag comment  运行备注'),
}

model StartPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  pipelineRunId?: long(name='pipelineRunId', description='流水线运行实例id'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StartPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StartPipelineRunResponseBody(name='body'),
}

async function startPipelineRun(organizationId: string, pipelineId: string, request: StartPipelineRunRequest): StartPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineRunWithOptions(organizationId, pipelineId, request, headers, runtime);
}

async function startPipelineRunWithOptions(organizationId: string, pipelineId: string, request: StartPipelineRunRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineRunResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.params)) {
    body.params = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organizations/${organizationId}/pipelines/{pipelineId}/run`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopPipelineJobRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineJobRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineJobRunResponseBody(name='body'),
}

async function stopPipelineJobRun(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string): StopPipelineJobRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime);
}

async function stopPipelineJobRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, jobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineJobRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  jobId = OpenApiUtil.getEncodeParam(jobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopPipelineJobRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/jobs/{jobId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopPipelineRunResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopPipelineRunResponse = {
  headers: map[string]string(name='headers'),
  body: StopPipelineRunResponseBody(name='body'),
}

async function stopPipelineRun(organizationId: string, pipelineId: string, pipelineRunId: string): StopPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime);
}

async function stopPipelineRunWithOptions(organizationId: string, pipelineId: string, pipelineRunId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopPipelineRunResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  pipelineRunId = OpenApiUtil.getEncodeParam(pipelineRunId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopPipelineRun',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/pipelineRuns/{pipelineRunId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopVMDeployOrderResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model StopVMDeployOrderResponse = {
  headers: map[string]string(name='headers'),
  body: StopVMDeployOrderResponseBody(name='body'),
}

async function stopVMDeployOrder(organizationId: string, pipelineId: string, deployOrderId: string): StopVMDeployOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime);
}

async function stopVMDeployOrderWithOptions(organizationId: string, pipelineId: string, deployOrderId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopVMDeployOrderResponse {
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  pipelineId = OpenApiUtil.getEncodeParam(pipelineId);
  deployOrderId = OpenApiUtil.getEncodeParam(deployOrderId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopVMDeployOrder',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/pipelines/{pipelineId}/deploy/{deployOrderId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHostGroupRequest {
  aliyunRegion?: string(name='aliyunRegion'),
  ecsLabelKey?: string(name='ecsLabelKey'),
  ecsLabelValue?: string(name='ecsLabelValue'),
  ecsType?: string(name='ecsType'),
  envId?: string(name='envId'),
  machineInfos?: string(name='machineInfos'),
  name?: string(name='name'),
  serviceConnectionId?: long(name='serviceConnectionId'),
  tagIds?: string(name='tagIds'),
  type?: string(name='type'),
}

model UpdateHostGroupResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
}

model UpdateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHostGroupResponseBody(name='body'),
}

async function updateHostGroup(organizationId: string, id: string, request: UpdateHostGroupRequest): UpdateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHostGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateHostGroupWithOptions(organizationId: string, id: string, request: UpdateHostGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHostGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunRegion)) {
    body.aliyunRegion = request.aliyunRegion;
  }
  if (!Util.isUnset(request.ecsLabelKey)) {
    body.ecsLabelKey = request.ecsLabelKey;
  }
  if (!Util.isUnset(request.ecsLabelValue)) {
    body.ecsLabelValue = request.ecsLabelValue;
  }
  if (!Util.isUnset(request.ecsType)) {
    body.ecsType = request.ecsType;
  }
  if (!Util.isUnset(request.envId)) {
    body.envId = request.envId;
  }
  if (!Util.isUnset(request.machineInfos)) {
    body.machineInfos = request.machineInfos;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.serviceConnectionId)) {
    body.serviceConnectionId = request.serviceConnectionId;
  }
  if (!Util.isUnset(request.tagIds)) {
    body.tagIds = request.tagIds;
  }
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHostGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/hostGroups/{id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateResourceMemberRequest {
  roleName?: string(name='roleName', description='角色部署组 deployGroup   user  成员，使用权限   admin 管理员，使用编辑权限   owner 拥有者，所有权限 流水线 pipeline   owner 拥有者，所有权限   admin 查看、运行、编辑权限   member  运行权限   viewer 查看权限'),
}

model UpdateResourceMemberResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateResourceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceMemberResponseBody(name='body'),
}

async function updateResourceMember(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest): UpdateResourceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, request, headers, runtime);
}

async function updateResourceMemberWithOptions(organizationId: string, resourceType: string, resourceId: string, accountId: string, request: UpdateResourceMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateResourceMemberResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  resourceType = OpenApiUtil.getEncodeParam(resourceType);
  resourceId = OpenApiUtil.getEncodeParam(resourceId);
  accountId = OpenApiUtil.getEncodeParam(accountId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.roleName)) {
    body.roleName = request.roleName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResourceMember',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/{resourceType}/{resourceId}/members/{accountId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateVariableGroupRequest {
  description?: string(name='description', description='变量组描述'),
  name?: string(name='name', description='变量组名称'),
  variables?: string(name='variables', description='变量信息json字符串 isEncrypted 是否加密 name 变量名称 value 变量值'),
}

model UpdateVariableGroupResponseBody = {
  errorCode?: string(name='errorCode', description='错误码'),
  errorMessage?: string(name='errorMessage', description='错误信息'),
  requestId?: string(name='requestId', description='请求id，每次请求都是唯一值，便于后续排查问题'),
  success?: boolean(name='success', description='true 接口调用成功，false 接口调用失败'),
}

model UpdateVariableGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVariableGroupResponseBody(name='body'),
}

async function updateVariableGroup(organizationId: string, id: string, request: UpdateVariableGroupRequest): UpdateVariableGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateVariableGroupWithOptions(organizationId, id, request, headers, runtime);
}

async function updateVariableGroupWithOptions(organizationId: string, id: string, request: UpdateVariableGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVariableGroupResponse {
  Util.validateModel(request);
  organizationId = OpenApiUtil.getEncodeParam(organizationId);
  id = OpenApiUtil.getEncodeParam(id);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body.name = request.name;
  }
  if (!Util.isUnset(request.variables)) {
    body.variables = request.variables;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVariableGroup',
    version = '2021-06-25',
    protocol = 'HTTPS',
    pathname = `/organization/${organizationId}/variableGroups/{id}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

