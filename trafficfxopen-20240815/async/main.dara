/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'TrafficFxOpen';
  @version = '2024-08-15';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetTokenRequest {
  appKey: string(name='appKey', position='Query'),
  appSecret: string(name='appSecret', position='Query'),
}

model GetTokenResponseBody = {
  data?: {
    expireTime?: string(name='expireTime', example='7200'),
    generateTime?: string(name='generateTime', example='1724130275'),
    token?: string(name='token', description='token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6ImRpc3RyaWJ1dGlvbl9rZXlpZCJ9.eyJqdGkiOiI2cDQwZDctSDQ0dUJicEJkYTZadzdBIiwiaWF0IjoxNzI0MzE2MzM1LCJleHAiOjE3MjQzMjM1MzUsIm5iZiI6MTcyNDMxNjI3NSwiYXBwS2V5IjoiNjE3NzgxZDQxM2FmNGRlZGFiNzkifQ.XtjSM7qVbESvt7n31RtD5Pp6854IVyGMEco4aEruMDMkrXHkcdZejyecKFx3RdsCldZPgvowc5EOl44c3JJfm6DENH4M6BRBSc90eqXYcD_xVJ9FhDWzK9O6OnkvR7HX1t-qqMdikLviM1w1G0DGMLaasvZ8MPMewL8k6NnvOSGePwUhb-m5IZ14VYv7BPO2dp8Jh00qNSJQrmNiWWzJUtK_xllNr3LKQ7cIVtPgFUckvRDw9Hal5oACXSRdkZFOAGlFSjpB_BbTpe5vc-AJ8K89nRD53sIy9YyVQClV_HH7PrXxFFJgReGvNsnP1h9gf55q86IzOQBkj9vGm2zXdw'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='success'),
  errorData?: {
    rawErrorCode?: string(name='rawErrorCode', example='1001'),
    rawErrorMsg?: string(name='rawErrorMsg'),
  }(name='errorData'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request', example='6BD708D6-1A8C-5CF9-85B8-D620F314F1F0'),
  status?: int32(name='status', example='confirmed'),
  success?: boolean(name='success', example='True'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'GET', '/v1/distribution/trade/getToken', 'json', false, 'json', request);
}

model SearchRequest {
  scene?: string(name='scene', position='Body'),
  searchParam: string(name='searchParam', example='{
  "cabinClass": "ALL_CABIN",
  "passengerTypeQuantity": {
    "ADT": 1,
    "INFANT": 0,
    "CHD": 0
  },
  "searchMode": 0,
  "searchOdInfoList": [
    {
      "arrCityCode": "BJS",
      "depCityCode": "JNG",
      "depDate": "2024-08-14 00:00:00"
    }
  ],
  "searchSource": "gd",
  "tripType": 1
}', position='Body'),
  source: string(name='source', example='“1”', position='Body'),
  terminal: string(name='terminal', example='“1”', position='Body'),
  userId: string(name='userId', example='“121343”', position='Body'),
  xAcsAirticketAccessToken: string(name='xAcsAirticketAccessToken', description='token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6ImRpc3RyaWJ1dGlvbl9rZXlpZCJ9.eyJqdGkiOiI2cDQwZDctSDQ0dUJicEJkYTZadzdBIiwiaWF0IjoxNzI0MzE2MzM1LCJleHAiOjE3MjQzMjM1MzUsIm5iZiI6MTcyNDMxNjI3NSwiYXBwS2V5IjoiNjE3NzgxZDQxM2FmNGRlZGFiNzkifQ.XtjSM7qVbESvt7n31RtD5Pp6854IVyGMEco4aEruMDMkrXHkcdZejyecKFx3RdsCldZPgvowc5EOl44c3JJfm6DENH4M6BRBSc90eqXYcD_xVJ9FhDWzK9O6OnkvR7HX1t-qqMdikLviM1w1G0DGMLaasvZ8MPMewL8k6NnvOSGePwUhb-m5IZ14VYv7BPO2dp8Jh00qNSJQrmNiWWzJUtK_xllNr3LKQ7cIVtPgFUckvRDw9Hal5oACXSRdkZFOAGlFSjpB_BbTpe5vc-AJ8K89nRD53sIy9YyVQClV_HH7PrXxFFJgReGvNsnP1h9gf55q86IzOQBkj9vGm2zXdw', position='Header'),
  xAcsAirticketLanguage?: string(name='xAcsAirticketLanguage', example='en_US', position='Header'),
}

model SearchResponseBody = {
  data: string(name='data'),
  errorCode?: string(name='errorCode', example='success'),
  errorData?: {
    rawErrorCode?: string(name='rawErrorCode', example='1001'),
    rawErrorMsg?: string(name='rawErrorMsg'),
  }(name='errorData'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='requestId', description='Id of the request', example='71ad3e90-53f8-445b-be9d-df91039cba47'),
  success?: boolean(name='success', example='true'),
}

model SearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchResponseBody(name='body'),
}

async function search(request: SearchRequest): SearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Search', 'POST', '/v1/distribution/trade/search', 'json', true, 'form', request);
}

