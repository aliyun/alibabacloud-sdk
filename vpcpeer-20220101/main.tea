/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('vpcpeer', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AcceptVpcPeerConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  dryRun?: boolean(name='DryRun', example='false'),
  instanceId?: string(name='InstanceId', example='pcc-guzvyqlj0n6e10****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model AcceptVpcPeerConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AcceptVpcPeerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcceptVpcPeerConnectionResponseBody(name='body'),
}

async function acceptVpcPeerConnectionWithOptions(request: AcceptVpcPeerConnectionRequest, runtime: Util.RuntimeOptions): AcceptVpcPeerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    body['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AcceptVpcPeerConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptVpcPeerConnection(request: AcceptVpcPeerConnectionRequest): AcceptVpcPeerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptVpcPeerConnectionWithOptions(request, runtime);
}

model CreateVpcPeerConnectionRequest {
  acceptingAliUid?: long(name='AcceptingAliUid', example='1210123456123456'),
  acceptingRegionId?: string(name='AcceptingRegionId', example='cn-hangzhou'),
  acceptingVpcId?: string(name='AcceptingVpcId', example='vpc-bp1vzjkp2q1xgnind****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  description?: string(name='Description', example='description'),
  dryRun?: boolean(name='DryRun', example='false'),
  name?: string(name='Name', example='vpcpeer'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpcId?: string(name='VpcId', example='vpc-bp1gsk7h12ew7oegk****'),
}

model CreateVpcPeerConnectionResponseBody = {
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model CreateVpcPeerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcPeerConnectionResponseBody(name='body'),
}

async function createVpcPeerConnectionWithOptions(request: CreateVpcPeerConnectionRequest, runtime: Util.RuntimeOptions): CreateVpcPeerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptingAliUid)) {
    body['AcceptingAliUid'] = request.acceptingAliUid;
  }
  if (!Util.isUnset(request.acceptingRegionId)) {
    body['AcceptingRegionId'] = request.acceptingRegionId;
  }
  if (!Util.isUnset(request.acceptingVpcId)) {
    body['AcceptingVpcId'] = request.acceptingVpcId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcPeerConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpcPeerConnection(request: CreateVpcPeerConnectionRequest): CreateVpcPeerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcPeerConnectionWithOptions(request, runtime);
}

model DeleteVpcPeerConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  dryRun?: boolean(name='DryRun', example='false'),
  force?: boolean(name='Force', example='false'),
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
}

model DeleteVpcPeerConnectionResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteVpcPeerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcPeerConnectionResponseBody(name='body'),
}

async function deleteVpcPeerConnectionWithOptions(request: DeleteVpcPeerConnectionRequest, runtime: Util.RuntimeOptions): DeleteVpcPeerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.force)) {
    body['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcPeerConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcPeerConnection(request: DeleteVpcPeerConnectionRequest): DeleteVpcPeerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcPeerConnectionWithOptions(request, runtime);
}

model GetVpcPeerConnectionAttributeRequest {
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model GetVpcPeerConnectionAttributeResponseBody = {
  acceptingOwnerUid?: long(name='AcceptingOwnerUid', example='283117732402483989'),
  acceptingRegionId?: string(name='AcceptingRegionId', example='cn-hangzhou'),
  acceptingVpc?: {
    ipv4Cidrs?: [ string ](name='Ipv4Cidrs'),
    ipv6Cidrs?: [ string ](name='Ipv6Cidrs'),
    vpcId?: string(name='VpcId', example='vpc-bp1vzjkp2q1xgnind****'),
  }(name='AcceptingVpc'),
  bandwidth?: int32(name='Bandwidth', example='1024'),
  bizStatus?: string(name='BizStatus', example='Normal'),
  description?: string(name='Description', example='test'),
  gmtCreate?: string(name='GmtCreate', example='2022-04-24T09:02:36Z'),
  gmtExpired?: string(name='GmtExpired', example='2022-05-01T09:02:36Z'),
  gmtModified?: string(name='GmtModified', example='2022-04-24T19:20:45Z'),
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  name?: string(name='Name', example='vpcpeer'),
  ownerId?: long(name='OwnerId', example='253460731706911258'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3AC0DE3C83E'),
  status?: string(name='Status', example='Activated'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  vpc?: {
    ipv4Cidrs?: [ string ](name='Ipv4Cidrs'),
    ipv6Cidrs?: [ string ](name='Ipv6Cidrs'),
    vpcId?: string(name='VpcId', example='vpc-bp1gsk7h12ew7oegk****'),
  }(name='Vpc'),
}

model GetVpcPeerConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpcPeerConnectionAttributeResponseBody(name='body'),
}

async function getVpcPeerConnectionAttributeWithOptions(request: GetVpcPeerConnectionAttributeRequest, runtime: Util.RuntimeOptions): GetVpcPeerConnectionAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    body['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVpcPeerConnectionAttribute',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpcPeerConnectionAttribute(request: GetVpcPeerConnectionAttributeRequest): GetVpcPeerConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcPeerConnectionAttributeWithOptions(request, runtime);
}

model ListVpcPeerConnectionsRequest {
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  maxResults?: int32(name='MaxResults', example='20'),
  name?: string(name='Name', example='vpcpeer'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  vpcId?: [ string ](name='VpcId'),
}

model ListVpcPeerConnectionsShrinkRequest {
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  maxResults?: int32(name='MaxResults', example='20'),
  name?: string(name='Name', example='vpcpeer'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  vpcIdShrink?: string(name='VpcId'),
}

model ListVpcPeerConnectionsResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED39DCAC0'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpcPeerConnects?: [ 
    {
      acceptingOwnerUid?: int32(name='AcceptingOwnerUid', example='253460731706911258'),
      acceptingRegionId?: string(name='AcceptingRegionId', example='cn-hangzhou'),
      acceptingVpc?: {
        ipv4Cidrs?: [ string ](name='Ipv4Cidrs'),
        ipv6Cidrs?: [ string ](name='Ipv6Cidrs'),
        vpcId?: string(name='VpcId', example='vpc-bp1vzjkp2q1xgnind****'),
      }(name='AcceptingVpc'),
      bandwidth?: int32(name='Bandwidth', example='1024'),
      bizStatus?: string(name='BizStatus', example='Normal'),
      description?: string(name='Description', example='test'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-24T09:02:36Z'),
      gmtExpired?: string(name='GmtExpired', example='2022-05-01T09:02:36Z'),
      gmtModified?: string(name='GmtModified', example='2022-04-24T19:20:45Z'),
      instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
      name?: string(name='Name', example='vpcpeer'),
      ownerId?: int32(name='OwnerId', example='253460731706911258'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Activated'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      vpc?: {
        ipv4Cidrs?: [ string ](name='Ipv4Cidrs'),
        ipv6Cidrs?: [ string ](name='Ipv6Cidrs'),
        vpcId?: string(name='VpcId', example='vpc-bp1gsk7h12ew7oegk****'),
      }(name='Vpc'),
    }
  ](name='VpcPeerConnects'),
}

model ListVpcPeerConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcPeerConnectionsResponseBody(name='body'),
}

async function listVpcPeerConnectionsWithOptions(tmpReq: ListVpcPeerConnectionsRequest, runtime: Util.RuntimeOptions): ListVpcPeerConnectionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListVpcPeerConnectionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.vpcId)) {
    request.vpcIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vpcId, 'VpcId', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpcIdShrink)) {
    body['VpcId'] = request.vpcIdShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVpcPeerConnections',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpcPeerConnections(request: ListVpcPeerConnectionsRequest): ListVpcPeerConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcPeerConnectionsWithOptions(request, runtime);
}

model ModifyVpcPeerConnectionRequest {
  bandwidth?: int32(name='Bandwidth', example='100'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', example='newdescription'),
  dryRun?: boolean(name='DryRun', example='false'),
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm****'),
  name?: string(name='Name', example='vpcpeername'),
}

model ModifyVpcPeerConnectionResponseBody = {
  requestId?: string(name='RequestId', example='880C99E1-449B-524A-B81F-1EC53D2A7EAC'),
}

model ModifyVpcPeerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcPeerConnectionResponseBody(name='body'),
}

async function modifyVpcPeerConnectionWithOptions(request: ModifyVpcPeerConnectionRequest, runtime: Util.RuntimeOptions): ModifyVpcPeerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bandwidth)) {
    body['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcPeerConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcPeerConnection(request: ModifyVpcPeerConnectionRequest): ModifyVpcPeerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcPeerConnectionWithOptions(request, runtime);
}

model RejectVpcPeerConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  instanceId?: string(name='InstanceId', example='pcc-lnk0m24khwvtkm0****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model RejectVpcPeerConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD2E-403F3EE64CAF'),
}

model RejectVpcPeerConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RejectVpcPeerConnectionResponseBody(name='body'),
}

async function rejectVpcPeerConnectionWithOptions(request: RejectVpcPeerConnectionRequest, runtime: Util.RuntimeOptions): RejectVpcPeerConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    body['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RejectVpcPeerConnection',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rejectVpcPeerConnection(request: RejectVpcPeerConnectionRequest): RejectVpcPeerConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return rejectVpcPeerConnectionWithOptions(request, runtime);
}

