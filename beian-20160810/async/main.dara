/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Beian';
  @version = '2016-08-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeleteUnbeianIpCheckTypeRequest {
  caller: string(name='Caller', position='Query'),
  checkType: int32(name='CheckType', position='Query'),
  ip: string(name='Ip', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model DeleteUnbeianIpCheckTypeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  huntressIpCheckTypeResultDO?: {
    msg?: string(name='Msg'),
    success?: boolean(name='Success'),
  }(name='HuntressIpCheckTypeResultDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUnbeianIpCheckTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUnbeianIpCheckTypeResponseBody(name='body'),
}

async function deleteUnbeianIpCheckType(request: DeleteUnbeianIpCheckTypeRequest): DeleteUnbeianIpCheckTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUnbeianIpCheckType', 'POST', '/', 'json', false, 'json', request);
}

model GetMainDomainRequest {
  domain?: string(name='Domain', position='Query'),
}

model GetMainDomainResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMainDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMainDomainResponseBody(name='body'),
}

async function getMainDomain(request: GetMainDomainRequest): GetMainDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMainDomain', 'POST', '/', 'json', false, 'json', request);
}

model InsertUnbeianIpCheckTypeRequest {
  caller: string(name='Caller', position='Query'),
  checkType: int32(name='CheckType', position='Query'),
  ip: string(name='Ip', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model InsertUnbeianIpCheckTypeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  huntressIpCheckTypeResultDO?: {
    msg?: string(name='Msg'),
    success?: boolean(name='Success'),
  }(name='HuntressIpCheckTypeResultDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertUnbeianIpCheckTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertUnbeianIpCheckTypeResponseBody(name='body'),
}

async function insertUnbeianIpCheckType(request: InsertUnbeianIpCheckTypeRequest): InsertUnbeianIpCheckTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertUnbeianIpCheckType', 'POST', '/', 'json', false, 'json', request);
}

model ListUnbeianIpCheckTypeRequest {
  caller: string(name='Caller', position='Query'),
  checkType?: int32(name='CheckType', position='Query'),
  ip?: string(name='Ip', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  page?: int32(name='Page', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ListUnbeianIpCheckTypeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  huntressIpCheckTypeResultDO?: {
    list?: [ 
      {
        aliuid?: long(name='Aliuid'),
        caller?: string(name='Caller'),
        checkType?: int32(name='CheckType'),
        ip?: string(name='Ip'),
        remark?: string(name='Remark'),
      }
    ](name='List'),
    msg?: string(name='Msg'),
    success?: boolean(name='Success'),
  }(name='HuntressIpCheckTypeResultDO'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListUnbeianIpCheckTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUnbeianIpCheckTypeResponseBody(name='body'),
}

async function listUnbeianIpCheckType(request: ListUnbeianIpCheckTypeRequest): ListUnbeianIpCheckTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUnbeianIpCheckType', 'POST', '/', 'json', false, 'json', request);
}

model ManageAccessorDomainRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  operation: string(name='Operation', position='Query'),
}

model ManageAccessorDomainResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ManageAccessorDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageAccessorDomainResponseBody(name='body'),
}

async function manageAccessorDomain(request: ManageAccessorDomainRequest): ManageAccessorDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageAccessorDomain', 'POST', '/', 'json', false, 'json', request);
}

model ManageAccessorDomainWhiteListRequest {
  caller: string(name='Caller', position='Query'),
  domains: [ string ](name='Domains', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  operation: string(name='Operation', position='Query'),
  remark?: string(name='Remark', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model ManageAccessorDomainWhiteListResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ManageAccessorDomainWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageAccessorDomainWhiteListResponseBody(name='body'),
}

async function manageAccessorDomainWhiteList(request: ManageAccessorDomainWhiteListRequest): ManageAccessorDomainWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageAccessorDomainWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ManageAccessorIpRequest {
  caller: string(name='Caller', position='Query'),
  ip: string(name='Ip', position='Query'),
  ipVersion: int32(name='IpVersion', position='Query'),
  operation: string(name='Operation', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ManageAccessorIpResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ManageAccessorIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageAccessorIpResponseBody(name='body'),
}

async function manageAccessorIp(request: ManageAccessorIpRequest): ManageAccessorIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageAccessorIp', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorDomainRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
}

model QueryAccessorDomainResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorDomainResponseBody(name='body'),
}

async function queryAccessorDomain(request: QueryAccessorDomainRequest): QueryAccessorDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorDomain', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorDomainListRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryAccessorDomainListResponseBody = {
  code?: int32(name='Code'),
  data?: {
    domains?: [ string ](name='Domains'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorDomainListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorDomainListResponseBody(name='body'),
}

async function queryAccessorDomainList(request: QueryAccessorDomainListRequest): QueryAccessorDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorDomainList', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorDomainStatusRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
}

model QueryAccessorDomainStatusResponseBody = {
  code?: int32(name='Code'),
  data?: {
    domain?: string(name='Domain'),
    reason?: string(name='Reason'),
    reasonCode?: int32(name='ReasonCode'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorDomainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorDomainStatusResponseBody(name='body'),
}

async function queryAccessorDomainStatus(request: QueryAccessorDomainStatusRequest): QueryAccessorDomainStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorDomainStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorDomainWhiteListRequest {
  caller: string(name='Caller', position='Query'),
  domain: string(name='Domain', position='Query'),
}

model QueryAccessorDomainWhiteListResponseBody = {
  code?: int32(name='Code'),
  data?: {
    items?: [ 
      {
        createTime?: string(name='CreateTime'),
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        type?: string(name='Type'),
        valid?: boolean(name='Valid'),
      }
    ](name='Items'),
    white?: boolean(name='White'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorDomainWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorDomainWhiteListResponseBody(name='body'),
}

async function queryAccessorDomainWhiteList(request: QueryAccessorDomainWhiteListRequest): QueryAccessorDomainWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorDomainWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorDomainsStatusRequest {
  caller: string(name='Caller', position='Query'),
  domains: [ string ](name='Domains', position='Query'),
}

model QueryAccessorDomainsStatusResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      domain?: string(name='Domain'),
      reason?: string(name='Reason'),
      reasonCode?: int32(name='ReasonCode'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorDomainsStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorDomainsStatusResponseBody(name='body'),
}

async function queryAccessorDomainsStatus(request: QueryAccessorDomainsStatusRequest): QueryAccessorDomainsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorDomainsStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccessorIpRequest {
  caller: string(name='Caller', position='Query'),
  ip: string(name='Ip', position='Query'),
}

model QueryAccessorIpResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAccessorIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAccessorIpResponseBody(name='body'),
}

async function queryAccessorIp(request: QueryAccessorIpRequest): QueryAccessorIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccessorIp', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAccessorFullDomainsOssListRequest {
  caller: string(name='Caller', position='Query'),
  ossList: [ string ](name='OssList', position='Query'),
}

model SubmitAccessorFullDomainsOssListResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitAccessorFullDomainsOssListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAccessorFullDomainsOssListResponseBody(name='body'),
}

async function submitAccessorFullDomainsOssList(request: SubmitAccessorFullDomainsOssListRequest): SubmitAccessorFullDomainsOssListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAccessorFullDomainsOssList', 'POST', '/', 'json', false, 'json', request);
}

