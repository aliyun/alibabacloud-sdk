/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AIPodcast';
  @version = '2025-02-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model PodcastTaskResultQueryRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='63c4e0eaab3b4c0db208ecafa990e8d1', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-ep8ba0dr6seiddri', position='Body'),
}

model PodcastTaskResultQueryResponseBody = {
  code?: string(name='code', example='"success"'),
  data?: {
    resultUrl?: any(name='resultUrl', example='{
            "audio": "http://note-ai-file.oss-cn-beijing.aliyuncs.com/202503241702148295/audio.mp3?OSSAccessKeyId=LTAI5tPLWJfJHNkZbfnQv245&Expires=1742810788&Signature=b5p83nh443Gr7foqdvgrI4%2FKZVM%3D",
            "script": "http://note-ai-file.oss-cn-beijing.aliyuncs.com/202503241702148295/script.txt?OSSAccessKeyId=LTAI5tPLWJfJHNkZbfnQv245&Expires=1742810622&Signature=TBBdikHzOWW3YqDw3sNMTXiMo6A%3D"
}'),
    script?: string(name='script'),
    taskId?: string(name='taskId', example='63c4e0eaab3b4c0db208ecafa990e8d1'),
    taskStatus?: string(name='taskStatus', example='SUCCEEDED'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='"success"'),
  requestId?: string(name='requestId', example='C38F034D-7F36-531C-95AC-0C752F80E840'),
  success?: boolean(name='success', example='True'),
}

model PodcastTaskResultQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PodcastTaskResultQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PodcastTaskResultQuery  PodcastTaskResultQueryRequest
  * @return PodcastTaskResultQueryResponse
 */
async function podcastTaskResultQuery(request: PodcastTaskResultQueryRequest): PodcastTaskResultQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PodcastTaskResultQuery', 'POST', '/podcast/task', 'json', true, 'form', request);
}

model PodcastTaskSubmitRequest {
  counts?: int32(name='counts', example='2', position='Body'),
  fileUrls?: [ string ](name='fileUrls', shrink='json', position='Body'),
  text?: string(name='text', position='Body'),
  topic?: string(name='topic', position='Body'),
  voices?: [ string ](name='voices', shrink='json', position='Body'),
  workspaceId: string(name='workspaceId', description='This parameter is required.', example='llm-ep8ba0dr6seiddxx', position='Body'),
}

model PodcastTaskSubmitResponseBody = {
  code?: string(name='code', example='"success"'),
  data?: {
    taskId?: string(name='taskId', example='63c4e0eaab3b4c0db208ecafa990e8d1'),
    taskStatus?: string(name='taskStatus', example='SUCCEEDED'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='"success"'),
  requestId?: string(name='requestId', example='9CE5B91A-6E6B-55FB-A1AF-037DF01C84B3'),
  success?: boolean(name='success', example='True'),
}

model PodcastTaskSubmitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PodcastTaskSubmitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PodcastTaskSubmit  PodcastTaskSubmitRequest
  * @return PodcastTaskSubmitResponse
 */
async function podcastTaskSubmit(request: PodcastTaskSubmitRequest): PodcastTaskSubmitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PodcastTaskSubmit', 'POST', '/podcast/task/submit', 'json', true, 'form', request);
}

