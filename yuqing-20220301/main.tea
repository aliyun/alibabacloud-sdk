/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('yuqing', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ProductInstance {
  appCode?: string(name='appCode', description='应用码'),
  buyerName?: string(name='buyerName', description='购买者名称'),
  buyerUid?: string(name='buyerUid', description='购买者账号uid'),
  channel?: string(name='channel', description='商业化渠道码'),
  config?: string(name='config', description='购买配置信息'),
  end?: long(name='end', description='生效结束时间'),
  instanceId?: string(name='instanceId', description='实例id'),
  orderNo?: string(name='orderNo', description='订单号，幂等使用'),
  productCode?: string(name='productCode', description='产品码'),
  productSpecCode?: string(name='productSpecCode', description='规格码'),
  start?: long(name='start', description='生效开始时间'),
  tenantName?: string(name='tenantName', description='租户名称'),
  tenantUid?: string(name='tenantUid', description='租户uid'),
}

model CloseProductRequest {
  productInstance?: ProductInstance(name='productInstance'),
}

model CloseProductResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CloseProductResponse = {
  headers: map[string]string(name='headers'),
  body: CloseProductResponseBody(name='body'),
}

async function closeProduct(request: CloseProductRequest): CloseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return closeProductWithOptions(request, headers, runtime);
}

async function closeProductWithOptions(request: CloseProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseProductResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.productInstance)) {
    query['productInstance'] = request.productInstance;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseProduct',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/closeProduct.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ConsoleProxyRequest {
  appCode?: string(name='appCode'),
  interfaceName?: string(name='interfaceName'),
  paramJson?: string(name='paramJson'),
}

model ConsoleProxyResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  resultJson?: string(name='resultJson'),
}

model ConsoleProxyResponse = {
  headers: map[string]string(name='headers'),
  body: ConsoleProxyResponseBody(name='body'),
}

async function consoleProxy(request: ConsoleProxyRequest): ConsoleProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return consoleProxyWithOptions(request, headers, runtime);
}

async function consoleProxyWithOptions(request: ConsoleProxyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConsoleProxyResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appCode)) {
    query['appCode'] = request.appCode;
  }
  if (!Util.isUnset(request.interfaceName)) {
    query['interfaceName'] = request.interfaceName;
  }
  if (!Util.isUnset(request.paramJson)) {
    query['paramJson'] = request.paramJson;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConsoleProxy',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/consoleProxy.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model OpenProductRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  productInstance?: ProductInstance(name='productInstance'),
}

model OpenProductResponseBody = {
  id?: long(name='id'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model OpenProductResponse = {
  headers: map[string]string(name='headers'),
  body: OpenProductResponseBody(name='body'),
}

async function openProduct(request: OpenProductRequest): OpenProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return openProductWithOptions(request, headers, runtime);
}

async function openProductWithOptions(request: OpenProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenProductResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.productInstance)) {
    query['productInstance'] = request.productInstance;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenProduct',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/openProduct.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SayHelloRequest {
  word?: string(name='word'),
}

model SayHelloResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: string(name='result'),
}

model SayHelloResponse = {
  headers: map[string]string(name='headers'),
  body: SayHelloResponseBody(name='body'),
}

async function sayHello(request: SayHelloRequest): SayHelloResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return sayHelloWithOptions(request, headers, runtime);
}

async function sayHelloWithOptions(request: SayHelloRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SayHelloResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.word)) {
    query['word'] = request.word;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SayHello',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/sayHello.json`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

