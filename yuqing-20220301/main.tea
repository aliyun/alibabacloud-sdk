/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('yuqing', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConsoleBody {
  appCode?: string(name='appCode'),
  interfaceName?: string(name='interfaceName'),
  paramJson?: string(name='paramJson'),
  requestId?: string(name='requestId'),
  teamHashId?: string(name='teamHashId'),
}

model FieldCondition {
  fieldName?: string(name='fieldName'),
  nestFieldPath?: string(name='nestFieldPath'),
  nestFieldValue?: [ long ](name='nestFieldValue'),
  operateType?: string(name='operateType'),
  value?: string(name='value'),
}

model ProductInstance {
  appCode?: string(name='appCode'),
  buyerName?: string(name='buyerName'),
  buyerUid?: string(name='buyerUid'),
  channel?: string(name='channel'),
  config?: string(name='config'),
  end?: long(name='end'),
  instanceId?: string(name='instanceId'),
  orderNo?: string(name='orderNo'),
  productCode?: string(name='productCode'),
  productSpecCode?: string(name='productSpecCode'),
  start?: long(name='start'),
  tenantName?: string(name='tenantName'),
  tenantUid?: string(name='tenantUid'),
}

model SearchCondition {
  assKeywordList?: [ string ](name='assKeywordList'),
  atAuthorNameList?: [ string ](name='atAuthorNameList'),
  authorNameList?: [ string ](name='authorNameList'),
  commentsLevel?: int32(name='commentsLevel'),
  contentLenLevel?: int32(name='contentLenLevel'),
  createTimeEnd?: long(name='createTimeEnd'),
  createTimeStart?: long(name='createTimeStart'),
  docContentSign?: string(name='docContentSign'),
  docIdList?: [ string ](name='docIdList'),
  duplicateRemoval?: boolean(name='duplicateRemoval'),
  emotionType?: int32(name='emotionType'),
  enableKeywordHighlight?: boolean(name='enableKeywordHighlight'),
  excludeAtAuthorNameList?: [ string ](name='excludeAtAuthorNameList'),
  excludeAuthorNameList?: [ string ](name='excludeAuthorNameList'),
  excludeHostNameList?: [ string ](name='excludeHostNameList'),
  excludeKeywordList?: [ string ](name='excludeKeywordList'),
  excludeKeywordListInTitle?: [ string ](name='excludeKeywordListInTitle'),
  excludeKeywordTagIds?: [ long ](name='excludeKeywordTagIds'),
  excludeMaterialTagList?: [ string ](name='excludeMaterialTagList'),
  excludeMediaLibraryIdList?: [ string ](name='excludeMediaLibraryIdList'),
  excludeMediaNameList?: [ string ](name='excludeMediaNameList'),
  excludeMediaTypeList?: [ string ](name='excludeMediaTypeList'),
  excludeMessageTypeList?: [ string ](name='excludeMessageTypeList'),
  fieldConditions?: [
    FieldCondition
  ](name='fieldConditions'),
  filterId?: long(name='filterId'),
  hasAudio?: boolean(name='hasAudio'),
  hasImage?: boolean(name='hasImage'),
  hasVideo?: boolean(name='hasVideo'),
  hostNameList?: [ string ](name='hostNameList'),
  influenceLevel?: long(name='influenceLevel'),
  keywordTagIds?: [ long ](name='keywordTagIds'),
  likesLevel?: int32(name='likesLevel'),
  materialTagList?: [ string ](name='materialTagList'),
  mediaLibraryIdList?: [ string ](name='mediaLibraryIdList'),
  mediaNameList?: [ string ](name='mediaNameList'),
  mediaTypeList?: [ string ](name='mediaTypeList'),
  messageTypeList?: [ string ](name='messageTypeList'),
  pageNow?: int32(name='pageNow'),
  pageSize?: int32(name='pageSize'),
  parentDocId?: string(name='parentDocId'),
  posKeywordList?: [ string ](name='posKeywordList'),
  posKeywordListInTitle?: [ string ](name='posKeywordListInTitle'),
  projectId?: long(name='projectId'),
  propagationLevel?: long(name='propagationLevel'),
  publishTimeEnd?: long(name='publishTimeEnd'),
  publishTimeStart?: long(name='publishTimeStart'),
  readsLevel?: int32(name='readsLevel'),
  relevanceLevel?: int32(name='relevanceLevel'),
  repostLevel?: int32(name='repostLevel'),
  sortBy?: string(name='sortBy'),
  sortByDirection?: string(name='sortByDirection'),
  topicList?: [ string ](name='topicList'),
  updateTimeEnd?: long(name='updateTimeEnd'),
  updateTimeStart?: long(name='updateTimeStart'),
}

model YuqingMessage {
  appName?: string(name='appName'),
  appScore?: long(name='appScore'),
  appStoreName?: string(name='appStoreName'),
  atAuthorNames?: [ string ](name='atAuthorNames'),
  audioCount?: int32(name='audioCount'),
  authorAvatarUrl?: string(name='authorAvatarUrl'),
  authorFollowersCount?: long(name='authorFollowersCount'),
  authorFriendsCount?: long(name='authorFriendsCount'),
  authorGender?: string(name='authorGender'),
  authorId?: string(name='authorId'),
  authorLikesCount?: long(name='authorLikesCount'),
  authorName?: string(name='authorName'),
  authorProfileUrl?: string(name='authorProfileUrl'),
  authorStatusesCount?: long(name='authorStatusesCount'),
  authorVerified?: boolean(name='authorVerified'),
  authorVerifyType?: int32(name='authorVerifyType'),
  contentAudioText?: string(name='contentAudioText'),
  contentAudioUrls?: string(name='contentAudioUrls'),
  contentImageText?: string(name='contentImageText'),
  contentImageUrls?: string(name='contentImageUrls'),
  contentLang?: string(name='contentLang'),
  contentLen?: long(name='contentLen'),
  contentVideoText?: string(name='contentVideoText'),
  contentVideoUrls?: string(name='contentVideoUrls'),
  createTime?: long(name='createTime'),
  docAnswersCount?: long(name='docAnswersCount'),
  docAreas?: [ string ](name='docAreas'),
  docCoinCount?: long(name='docCoinCount'),
  docCommentsCount?: long(name='docCommentsCount'),
  docContent?: string(name='docContent'),
  docContentBrief?: string(name='docContentBrief'),
  docContentSign?: string(name='docContentSign'),
  docId?: string(name='docId'),
  docLikesCount?: long(name='docLikesCount'),
  docPlayCount?: long(name='docPlayCount'),
  docReadingCount?: long(name='docReadingCount'),
  docReadsCount?: long(name='docReadsCount'),
  docRepostsCount?: long(name='docRepostsCount'),
  docReprintName?: string(name='docReprintName'),
  docSelfContentSign?: string(name='docSelfContentSign'),
  docTitle?: string(name='docTitle'),
  docUrl?: string(name='docUrl'),
  emotionScore?: double(name='emotionScore'),
  emotionType?: int32(name='emotionType'),
  extInfo?: map[string]string(name='extInfo'),
  finEventCount?: int32(name='finEventCount'),
  highlightKeywords?: [ string ](name='highlightKeywords'),
  imageCount?: int32(name='imageCount'),
  influenceScore?: double(name='influenceScore'),
  mediaHosts?: [ string ](name='mediaHosts'),
  mediaInfluenceLevel?: int32(name='mediaInfluenceLevel'),
  mediaName?: string(name='mediaName'),
  mediaPropagationLevel?: int32(name='mediaPropagationLevel'),
  mediaType?: string(name='mediaType'),
  messageType?: string(name='messageType'),
  parentDocId?: string(name='parentDocId'),
  propagationScore?: double(name='propagationScore'),
  publishTime?: long(name='publishTime'),
  relevanceScore?: double(name='relevanceScore'),
  repostList?: [ string ](name='repostList'),
  similarNumber?: int32(name='similarNumber'),
  topics?: [ string ](name='topics'),
  videoCount?: int32(name='videoCount'),
  weiboCommentId?: string(name='weiboCommentId'),
  weiboMid?: string(name='weiboMid'),
}

model CloseProductRequest {
  productInstance?: ProductInstance(name='productInstance'),
  requestId?: string(name='requestId'),
}

model CloseProductResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId'),
}

model CloseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseProductResponseBody(name='body'),
}

async function closeProduct(request: CloseProductRequest): CloseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return closeProductWithOptions(request, headers, runtime);
}

async function closeProductWithOptions(request: CloseProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseProductResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.productInstance)) {
    body['productInstance'] = request.productInstance;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseProduct',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/closeProduct.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ConsoleApiProxyRequest {
  body?: ConsoleBody(name='body'),
}

model ConsoleApiProxyResponseBody = {
  requestId?: string(name='requestId'),
  resultJson?: string(name='resultJson'),
}

model ConsoleApiProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConsoleApiProxyResponseBody(name='body'),
}

async function consoleApiProxy(request: ConsoleApiProxyRequest): ConsoleApiProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return consoleApiProxyWithOptions(request, headers, runtime);
}

async function consoleApiProxyWithOptions(request: ConsoleApiProxyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConsoleApiProxyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ConsoleApiProxy',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/consoleApiProxy.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ConsoleProxyRequest {
  appCode?: string(name='appCode'),
  interfaceName?: string(name='interfaceName'),
  paramJson?: string(name='paramJson'),
  requestId?: string(name='requestId'),
  teamHashId?: string(name='teamHashId'),
}

model ConsoleProxyResponseBody = {
  requestId?: string(name='requestId'),
  resultJson?: string(name='resultJson'),
}

model ConsoleProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConsoleProxyResponseBody(name='body'),
}

async function consoleProxy(request: ConsoleProxyRequest): ConsoleProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return consoleProxyWithOptions(request, headers, runtime);
}

async function consoleProxyWithOptions(request: ConsoleProxyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConsoleProxyResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.appCode)) {
    body['appCode'] = request.appCode;
  }
  if (!Util.isUnset(request.interfaceName)) {
    body['interfaceName'] = request.interfaceName;
  }
  if (!Util.isUnset(request.paramJson)) {
    body['paramJson'] = request.paramJson;
  }
  if (!Util.isUnset(request.teamHashId)) {
    body['teamHashId'] = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConsoleProxy',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/consoleProxy.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAnalysisTaskResultRequest {
  analysisId?: long(name='analysisId'),
  requestId?: string(name='requestId'),
  teamHashId?: string(name='teamHashId'),
}

model GetAnalysisTaskResultResponseBody = {
  analysisId?: long(name='analysisId'),
  requestId?: string(name='requestId'),
  resultJson?: string(name='resultJson'),
}

model GetAnalysisTaskResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAnalysisTaskResultResponseBody(name='body'),
}

async function getAnalysisTaskResult(request: GetAnalysisTaskResultRequest): GetAnalysisTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAnalysisTaskResultWithOptions(request, headers, runtime);
}

async function getAnalysisTaskResultWithOptions(request: GetAnalysisTaskResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAnalysisTaskResultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.analysisId)) {
    query['analysisId'] = request.analysisId;
  }
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }
  if (!Util.isUnset(request.teamHashId)) {
    query['teamHashId'] = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAnalysisTaskResult',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/getAnalysisComponentResult.json`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model OpenProductRequest {
  clientToken?: string(name='ClientToken'),
  productInstance?: ProductInstance(name='productInstance'),
  requestId?: string(name='requestId'),
}

model OpenProductResponseBody = {
  id?: long(name='id'),
  requestId?: string(name='requestId'),
}

model OpenProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenProductResponseBody(name='body'),
}

async function openProduct(request: OpenProductRequest): OpenProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return openProductWithOptions(request, headers, runtime);
}

async function openProductWithOptions(request: OpenProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenProductResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.productInstance)) {
    body['productInstance'] = request.productInstance;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OpenProduct',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/openProduct.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryProductInstanceListRequest {
  appCode?: string(name='appCode'),
  fromTime?: long(name='fromTime'),
  requestId?: string(name='requestId'),
  tenantUid?: string(name='tenantUid'),
  toTime?: long(name='toTime'),
}

model QueryProductInstanceListResponseBody = {
  instanceList?: [
    ProductInstance
  ](name='instanceList'),
  requestId?: string(name='requestId'),
}

model QueryProductInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductInstanceListResponseBody(name='body'),
}

async function queryProductInstanceList(request: QueryProductInstanceListRequest): QueryProductInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryProductInstanceListWithOptions(request, headers, runtime);
}

async function queryProductInstanceListWithOptions(request: QueryProductInstanceListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProductInstanceListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appCode)) {
    query['appCode'] = request.appCode;
  }
  if (!Util.isUnset(request.fromTime)) {
    query['fromTime'] = request.fromTime;
  }
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }
  if (!Util.isUnset(request.tenantUid)) {
    query['tenantUid'] = request.tenantUid;
  }
  if (!Util.isUnset(request.toTime)) {
    query['toTime'] = request.toTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductInstanceList',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/queryProductInstanceList.json`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryYuqingMessageRequest {
  requestId?: string(name='requestId'),
  searchCondition?: SearchCondition(name='searchCondition'),
  teamHashId?: string(name='teamHashId'),
}

model QueryYuqingMessageResponseBody = {
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
  yuqingMessages?: [
    YuqingMessage
  ](name='yuqingMessages'),
}

model QueryYuqingMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryYuqingMessageResponseBody(name='body'),
}

async function queryYuqingMessage(request: QueryYuqingMessageRequest): QueryYuqingMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryYuqingMessageWithOptions(request, headers, runtime);
}

async function queryYuqingMessageWithOptions(request: QueryYuqingMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryYuqingMessageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.searchCondition)) {
    body['searchCondition'] = request.searchCondition;
  }
  if (!Util.isUnset(request.teamHashId)) {
    body['teamHashId'] = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryYuqingMessage',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/queryYuqingMessage.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitAnalysisTaskRequest {
  analyseType?: string(name='analyseType'),
  requestId?: string(name='requestId'),
  searchCondition?: SearchCondition(name='searchCondition'),
  teamHashId?: string(name='teamHashId'),
}

model SubmitAnalysisTaskResponseBody = {
  analysisId?: long(name='analysisId'),
  requestId?: string(name='requestId'),
  resultJson?: string(name='resultJson'),
}

model SubmitAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitAnalysisTaskResponseBody(name='body'),
}

async function submitAnalysisTask(request: SubmitAnalysisTaskRequest): SubmitAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitAnalysisTaskWithOptions(request, headers, runtime);
}

async function submitAnalysisTaskWithOptions(request: SubmitAnalysisTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAnalysisTaskResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.requestId)) {
    query['requestId'] = request.requestId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.analyseType)) {
    body['analyseType'] = request.analyseType;
  }
  if (!Util.isUnset(request.searchCondition)) {
    body['searchCondition'] = request.searchCondition;
  }
  if (!Util.isUnset(request.teamHashId)) {
    body['teamHashId'] = request.teamHashId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAnalysisTask',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/openapi/aliyun/submitAnalysisComponent.json`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

