/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dt-oc-info';
  @version = '2022-08-29';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetOcCompetitorsRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcCompetitorsResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      competitionBrandIntroduction?: string(name='CompetitionBrandIntroduction', description='品牌介绍'),
      competitionEntAddress?: string(name='CompetitionEntAddress', description='竞品公司地址'),
      competitionEntEsDate?: string(name='CompetitionEntEsDate', description='竞品公司成立日期', example='2007-06-08'),
      competitionEntFinTurn?: string(name='CompetitionEntFinTurn', description='竞品公司最新融资轮次'),
      competitionEntName?: string(name='CompetitionEntName', description='竞品公司名称'),
      competitionIntroduction?: string(name='CompetitionIntroduction', description='竞品简介'),
      competitionLogoUrl?: string(name='CompetitionLogoUrl', description='竞品logo链接', example='https://pic.jingdata.com/com_logo_v3/logo_off_69997171.jpg'),
      competitionProductName?: string(name='CompetitionProductName', description='竞品名称'),
      competitionTag?: string(name='CompetitionTag', description='竞品标签'),
      competitionWebsite?: string(name='CompetitionWebsite', description='竞品官网', example='http://www.chinarsgeo.com/'),
      entName?: string(name='EntName', description='企业名称'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88b016639000336733978dc0a3'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcCompetitorsResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcCompetitorsResponseBody(name='body'),
}

async function getOcCompetitors(request: GetOcCompetitorsRequest): GetOcCompetitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcCompetitors', 'POST', '/', 'json', true, 'form', request);
}

model GetOcCoreTeamsRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcCoreTeamsResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='企业名称'),
      memberIntroduction?: string(name='MemberIntroduction', description='简介'),
      memberName?: string(name='MemberName', description='人名'),
      memberPosition?: string(name='MemberPosition', description='职位'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88b016639000336733978dc0a3'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcCoreTeamsResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcCoreTeamsResponseBody(name='body'),
}

async function getOcCoreTeams(request: GetOcCoreTeamsRequest): GetOcCoreTeamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcCoreTeams', 'POST', '/', 'json', true, 'form', request);
}

model GetOcFinancingRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcFinancingResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='企业名称'),
      finAmount?: string(name='FinAmount', description='融资金额'),
      finDate?: string(name='FinDate', description='融资日期', example='2016-10-28'),
      finTurn?: string(name='FinTurn', description='融资轮次'),
      investors?: string(name='Investors', description='投资方'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e849316699636879325009d7676'),
  success?: boolean(name='Success', example='true'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcFinancingResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcFinancingResponseBody(name='body'),
}

async function getOcFinancing(request: GetOcFinancingRequest): GetOcFinancingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcFinancing', 'POST', '/', 'json', true, 'form', request);
}

model GetOcFuzzSearchRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetOcFuzzSearchResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07e116699472150851563d66ee'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='3'),
}

model GetOcFuzzSearchResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcFuzzSearchResponseBody(name='body'),
}

async function getOcFuzzSearch(request: GetOcFuzzSearchRequest): GetOcFuzzSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcFuzzSearch', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcAbnormalOperationRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcAbnormalOperationResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      inDate?: string(name='InDate', description='列入日期', example='2017-11-02'),
      inDepartment?: string(name='InDepartment', description='列入决定机关'),
      inReason?: string(name='InReason', description='列入原因'),
      outDate?: string(name='OutDate', description='移出日期', example='2018-08-15'),
      outDepartment?: string(name='OutDepartment', description='移出决定机关'),
      outReason?: string(name='OutReason', description='移出原因'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e842416657190876491853d9147'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='28'),
}

model GetOcIcAbnormalOperationResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcAbnormalOperationResponseBody(name='body'),
}

async function getOcIcAbnormalOperation(request: GetOcIcAbnormalOperationRequest): GetOcIcAbnormalOperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcAbnormalOperation', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcAdminLicenseRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcAdminLicenseResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      content?: string(name='Content', description='许可内容'),
      department?: string(name='Department', description='许可机关'),
      endDate?: string(name='EndDate', description='有效期至', example='2022-08-08'),
      licenseName?: string(name='LicenseName', description='许可文件名称'),
      licenseNo?: string(name='LicenseNo', description='许可文件编号'),
      startDate?: string(name='StartDate', description='有效期自', example='2021-06-11'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994436747462d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='445'),
}

model GetOcIcAdminLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcAdminLicenseResponseBody(name='body'),
}

async function getOcIcAdminLicense(request: GetOcIcAdminLicenseRequest): GetOcIcAdminLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcAdminLicense', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcBasicRequest {
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcBasicResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: {
    checkDate?: string(name='CheckDate', description='核准日期', example='2019-11-05'),
    entAddress?: string(name='EntAddress', description='企业地址'),
    entBrief?: string(name='EntBrief', description='公司简介'),
    entName?: string(name='EntName', description='企业名称'),
    entNameEng?: string(name='EntNameEng', description='英文名称', example='Alibaba(China)Co.,Ltd.'),
    entStatus?: string(name='EntStatus', description='经营状态'),
    entType?: string(name='EntType', description='企业类型'),
    esDate?: string(name='EsDate', description='成立日期', example='2019-01-01'),
    formerNames?: string(name='FormerNames', description='曾用名'),
    industryNameLv1?: string(name='IndustryNameLv1', description='国民经济行业门类名称'),
    industryNameLv2?: string(name='IndustryNameLv2', description='国民经济行业大类名称'),
    insuredNum?: string(name='InsuredNum', description='参保人数', example='1833'),
    legalName?: string(name='LegalName', description='法定代表人'),
    licenseNumber?: string(name='LicenseNumber', description='工商注册号', example='330100400013364'),
    opFrom?: string(name='OpFrom', description='经营期限自', example='2007-03-26'),
    opScope?: string(name='OpScope', description='经营范围'),
    opTo?: string(name='OpTo', description='经营期限至', example='2037-03-25'),
    orgNo?: string(name='OrgNo', description='组织机构代码', example='FRCSZ1459'),
    recCap?: string(name='RecCap', description='实收注册资本'),
    regCap?: string(name='RegCap', description='注册资本'),
    regOrg?: string(name='RegOrg', description='登记机关'),
    regOrgCity?: string(name='RegOrgCity', description='注册地址所在城市'),
    regOrgDistrict?: string(name='RegOrgDistrict', description='注册地址所在区县'),
    regOrgProvince?: string(name='RegOrgProvince', description='注册地址所在省'),
    socialCreditCode?: string(name='SocialCreditCode', description='统一社会信用代码', example='91330100799655058B'),
    staffNum?: string(name='StaffNum', description='人员规模', example='1833'),
    taxNum?: string(name='TaxNum', description='纳税人识别号', example='91330100799655058B'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f078f16659784453422252dcdbb'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcIcBasicResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcBasicResponseBody(name='body'),
}

async function getOcIcBasic(request: GetOcIcBasicRequest): GetOcIcBasicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcBasic', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcBranchRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcBranchResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='分支机构名称'),
      entStatus?: string(name='EntStatus', description='经营状态'),
      esDate?: string(name='EsDate', description='成立日期', example='2019-01-01'),
      operName?: string(name='OperName', description='负责人'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994514582084d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcIcBranchResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcBranchResponseBody(name='body'),
}

async function getOcIcBranch(request: GetOcIcBranchRequest): GetOcIcBranchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcBranch', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcChangeRecordRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcChangeRecordResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      afterContent?: string(name='AfterContent', description='变更后'),
      beforeContent?: string(name='BeforeContent', description='变更前'),
      changeDate?: string(name='ChangeDate', description='变更日期', example='2002-12-11'),
      type?: string(name='Type', description='变更事项'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994402826438d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='13'),
}

model GetOcIcChangeRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcChangeRecordResponseBody(name='body'),
}

async function getOcIcChangeRecord(request: GetOcIcChangeRecordRequest): GetOcIcChangeRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcChangeRecord', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcCheckupRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcCheckupResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      date?: string(name='Date', description='日期'),
      department?: string(name='Department', description='检查实施机关'),
      result?: string(name='Result', description='结果'),
      type?: string(name='Type', description='类型状态', example='2021-05-25'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e849816684798333566155dffea'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcIcCheckupResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcCheckupResponseBody(name='body'),
}

async function getOcIcCheckup(request: GetOcIcCheckupRequest): GetOcIcCheckupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcCheckup', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcClearAccountRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcClearAccountResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      leader?: string(name='Leader', description='清算组负责人'),
      member?: string(name='Member', description='清算组成员'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcIcClearAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcClearAccountResponseBody(name='body'),
}

async function getOcIcClearAccount(request: GetOcIcClearAccountRequest): GetOcIcClearAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcClearAccount', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcDoubleCheckupRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcDoubleCheckupResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      inspectDate?: string(name='InspectDate', description='抽查完成时间', example='2021-05-27'),
      inspectDepartment?: string(name='InspectDepartment', description='抽查机关'),
      inspectItem?: string(name='InspectItem', description='检查事项'),
      inspectPlanId?: string(name='InspectPlanId', description='抽查计划编号', example='32081320211032'),
      inspectPlanName?: string(name='InspectPlanName', description='抽查计划名称'),
      inspectResult?: string(name='InspectResult', description='检查结果'),
      inspectTaskId?: string(name='InspectTaskId', description='抽查任务编号', example='320813202104271001'),
      inspectTaskName?: string(name='InspectTaskName', description='抽查任务名称'),
      inspectTypeName?: string(name='InspectTypeName', description='抽查类型'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88a516684802848847536d0cdf'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIcDoubleCheckupResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcDoubleCheckupResponseBody(name='body'),
}

async function getOcIcDoubleCheckup(request: GetOcIcDoubleCheckupRequest): GetOcIcDoubleCheckupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcDoubleCheckup', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcEmployeeRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  requestId?: string(name='RequestId', description='系统参数，requestId', example='210e842416657190633852480d9147', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcEmployeeResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      jobTitle?: string(name='JobTitle', description='职位'),
      name?: string(name='Name', description='人员姓名'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcIcEmployeeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcEmployeeResponseBody(name='body'),
}

async function getOcIcEmployee(request: GetOcIcEmployeeRequest): GetOcIcEmployeeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcEmployee', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcEquityFrozenRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcEquityFrozenResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      freezeAmount?: string(name='FreezeAmount', description='数额'),
      freezeCardNum?: string(name='FreezeCardNum', description='被执行人证件号码', example='913302827369845089'),
      freezeCardType?: string(name='FreezeCardType', description='被执行人证件种类'),
      freezeCourt?: string(name='FreezeCourt', description='执行法院'),
      freezeEndDate?: string(name='FreezeEndDate', description='冻结截止日期', example='2022-11-12'),
      freezeExecItem?: string(name='FreezeExecItem', description='执行事项'),
      freezeExecPerson?: string(name='FreezeExecPerson', description='被执行人'),
      freezeNoticeNum?: string(name='FreezeNoticeNum', description='执行通知书文号'),
      freezePublishDate?: string(name='FreezePublishDate', description='公示日期', example='2021-10-11'),
      freezeStartDate?: string(name='FreezeStartDate', description='冻结起始日期', example='2019-11-13'),
      status?: string(name='Status', description='状态'),
      unfreezeAdjustNum?: string(name='UnfreezeAdjustNum', description='解冻文号'),
      unfreezeCourt?: string(name='UnfreezeCourt', description='解冻机关'),
      unfreezeDate?: string(name='UnfreezeDate', description='解冻日期'),
      unfreezeReason?: string(name='UnfreezeReason', description='解冻说明'),
    }
  ](name='Data'),
  message?: string(name='Message', example='keyword is empty'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88b016639000841033945dc0a3'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='111'),
}

model GetOcIcEquityFrozenResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcEquityFrozenResponseBody(name='body'),
}

async function getOcIcEquityFrozen(request: GetOcIcEquityFrozenRequest): GetOcIcEquityFrozenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcEquityFrozen', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcEquityPledgeRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIcEquityPledgeResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      number?: string(name='Number', description='登记编号', example='110108017579881_0002'),
      pawnee?: string(name='Pawnee', description='质权人'),
      pawneeIdentifyNo?: string(name='PawneeIdentifyNo', description='质权人证件号码', example='91440300746612636Q'),
      pledgor?: string(name='Pledgor', description='出质人'),
      pledgorAmount?: string(name='PledgorAmount', description='出质股权数', example='27.78'),
      pledgorIdentifyNo?: string(name='PledgorIdentifyNo', description='出质人证照/证件号码', example='91310104087946746N'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2015-01-14'),
      regDate?: string(name='RegDate', description='登记日期', example='2018-11-20'),
      relatedComp?: string(name='RelatedComp', description='标的方'),
      status?: string(name='Status', description='状态'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e87ed16659791084703858dba39'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2468'),
}

model GetOcIcEquityPledgeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcEquityPledgeResponseBody(name='body'),
}

async function getOcIcEquityPledge(request: GetOcIcEquityPledgeRequest): GetOcIcEquityPledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcEquityPledge', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcInvestmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcInvestmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='企业名称'),
      investCreditCode?: string(name='InvestCreditCode', description='社会信用代码', example='915203285993854016'),
      investEsDate?: string(name='InvestEsDate', description='企业成立日期', example='2012-07-01'),
      investLegalName?: string(name='InvestLegalName', description='企业法定年龄代表人'),
      investLicenseNo?: string(name='InvestLicenseNo', description='企业注册号', example='520328000148889'),
      investName?: string(name='InvestName', description='被投资企业名称'),
      investRegCap?: string(name='InvestRegCap', description='企业注册资本'),
      investStatus?: string(name='InvestStatus', description='企业经营状态'),
      shouldCap?: string(name='ShouldCap', description='投资数额'),
      stockPercentage?: string(name='StockPercentage', description='投资比例', example='49.0%'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88b016639000336733978dc0a3'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='4'),
}

model GetOcIcInvestmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcInvestmentResponseBody(name='body'),
}

async function getOcIcInvestment(request: GetOcIcInvestmentRequest): GetOcIcInvestmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcInvestment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcKnowledgePropertyPledgeRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  requestId?: string(name='RequestId', description='系统参数，requestId', example='210f078f16659784453422252dcdbb', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetOcIcKnowledgePropertyPledgeResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      name?: string(name='Name', description='公司名称'),
      number?: string(name='Number', description='登记证号', example='13311865'),
      pawnee?: string(name='Pawnee', description='质权人名称'),
      period?: string(name='Period', description='质权登记期限'),
      pledgor?: string(name='Pledgor', description='出质人名称'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2016-06-02'),
      status?: string(name='Status', description='状态'),
      type?: string(name='Type', description='种类'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994514582084d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='40'),
}

model GetOcIcKnowledgePropertyPledgeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcKnowledgePropertyPledgeResponseBody(name='body'),
}

async function getOcIcKnowledgePropertyPledge(request: GetOcIcKnowledgePropertyPledgeRequest): GetOcIcKnowledgePropertyPledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcKnowledgePropertyPledge', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcMortgageRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcMortgageResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      debitAmount?: string(name='DebitAmount', description='数额'),
      debitPeriod?: string(name='DebitPeriod', description='债务履行期限'),
      debitScope?: string(name='DebitScope', description='担保范围'),
      debitType?: string(name='DebitType', description='种类'),
      department?: string(name='Department', description='登记机关'),
      guarantees?: string(name='Guarantees', description='抵押物'),
      identifyNo?: string(name='IdentifyNo', description='证件号码', example='911301007302786537'),
      identifyType?: string(name='IdentifyType', description='抵押权人证照'),
      mortgageesName?: string(name='MortgageesName', description='抵押权人名称'),
      number?: string(name='Number', description='登记编号', example='11012019000986'),
      onecompId?: string(name='OnecompId', description='ocid', example='1180716024506545226'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2016-06-02'),
      regDate?: string(name='RegDate', description='登记日期', example='2018-11-20'),
      status?: string(name='Status', description='状态'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16632257131545979d8a79'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2468'),
}

model GetOcIcMortgageResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcMortgageResponseBody(name='body'),
}

async function getOcIcMortgage(request: GetOcIcMortgageRequest): GetOcIcMortgageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcMortgage', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcSeriousOffenseRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcSeriousOffenseResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='企业名称'),
      inDate?: string(name='InDate', description='列入日期，yyyy-mm-dd', example='2017-11-02'),
      inDepartment?: string(name='InDepartment', description='移入决定机关'),
      inReason?: string(name='InReason', description='列入严重违法名录原因'),
      outDate?: string(name='OutDate', description='移出日期，yyyy-mm-dd', example='2018-08-15'),
      outDepartment?: string(name='OutDepartment', description='移出决定机关'),
      outReason?: string(name='OutReason', description='移出严重违法名录原因'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e842416657190981275317d9147'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1514'),
}

model GetOcIcSeriousOffenseResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcSeriousOffenseResponseBody(name='body'),
}

async function getOcIcSeriousOffense(request: GetOcIcSeriousOffenseRequest): GetOcIcSeriousOffenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcSeriousOffense', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcShareholderRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcShareholderResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      shouldCap?: string(name='ShouldCap', description='认缴出资额', example='90'),
      shouldCapTime?: string(name='ShouldCapTime', description='认缴日期', example='2025-01-29'),
      stockName?: string(name='StockName', description='股东名称'),
      stockPercent?: string(name='StockPercent', description='持股比例', example='90.00%'),
      stockType?: string(name='StockType', description='股东类型'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e87ed16659790825224546dba39'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcIcShareholderResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcShareholderResponseBody(name='body'),
}

async function getOcIcShareholder(request: GetOcIcShareholderRequest): GetOcIcShareholderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcShareholder', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIcSimpleCancelRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcIcSimpleCancelResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='登记机关'),
      entName?: string(name='EntName', description='企业名称'),
      noticePeriod?: string(name='NoticePeriod', description='公告期'),
      scaContent?: string(name='ScaContent', description='异议内容'),
      scaDate?: string(name='ScaDate', description='异议时间', example='2022-08-22'),
      scaProposer?: string(name='ScaProposer', description='异议申请人'),
      scaResult?: string(name='ScaResult', description='简易注销结果'),
      scaResultDate?: string(name='ScaResultDate', description='公告申请日期', example='2022-08-30'),
      socialCreditCode?: string(name='SocialCreditCode', description='企业统一信用代码', example='911302026610804662'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e849c16639169757322283dcabe'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIcSimpleCancelResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIcSimpleCancelResponseBody(name='body'),
}

async function getOcIcSimpleCancel(request: GetOcIcSimpleCancelRequest): GetOcIcSimpleCancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIcSimpleCancel', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpCertificateRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpCertificateResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      authorizeDate?: string(name='AuthorizeDate', description='授权日期', example='2019-05-14'),
      authorizeDepartment?: string(name='AuthorizeDepartment', description='授权部门'),
      certNum?: string(name='CertNum', description='证书认证编号', example='JY11107112389646'),
      certScope?: string(name='CertScope', description='认证范围'),
      certType?: string(name='CertType', description='证书类型'),
      entName?: string(name='EntName', description='企业名称'),
      province?: string(name='Province', description='省份', example='“”'),
      pubDate?: string(name='PubDate', description='公示日期', example='“”'),
      validEndDate?: string(name='ValidEndDate', description='有效期截止日期', example='2024-05-13'),
      validStartDate?: string(name='ValidStartDate', description='有效期开始日期', example='2019-05-14'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e843c16644202319613241d1f89'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcIpCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpCertificateResponseBody(name='body'),
}

async function getOcIpCertificate(request: GetOcIpCertificateRequest): GetOcIpCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpCertificate', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpDomainRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpDomainResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      checkDate?: string(name='CheckDate', description='备案日期', example='2020-10-12'),
      domain?: string(name='Domain', description='域名', example='chinanonwovens.com'),
      entName?: string(name='EntName', description='企业名称'),
      homeUrl?: string(name='HomeUrl', description='网站首页链接', example='www.chinanonwovens.com'),
      number?: string(name='Number', description='备案号'),
      siteName?: string(name='SiteName', description='网站名称'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e88aa16589931835648642dc0ff'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIpDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpDomainResponseBody(name='body'),
}

async function getOcIpDomain(request: GetOcIpDomainRequest): GetOcIpDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpDomain', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpPatentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpPatentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      agency?: string(name='Agency', description='专利代理机构', example='“”'),
      agent?: string(name='Agent', description='代理人', example='“”'),
      brief?: string(name='Brief', description='简要说明'),
      cateNum?: string(name='CateNum', description='分类号', example='6(2006.01)I'),
      entName?: string(name='EntName', description='企业名称'),
      inventorList?: string(name='InventorList', description='发明人'),
      mainClaim?: string(name='MainClaim', description='主权项', example='“”'),
      patentName?: string(name='PatentName', description='专利名'),
      patentStatus?: string(name='PatentStatus', description='专利状态'),
      patentType?: string(name='PatentType', description='专利类型'),
      patenteeList?: string(name='PatenteeList', description='专利权人'),
      prioDate?: string(name='PrioDate', description='优先权日', example='“”'),
      prioNum?: string(name='PrioNum', description='优先权号', example='“”'),
      publicDate?: string(name='PublicDate', description='公开（公告）日', example='2020-09-22'),
      publicNum?: string(name='PublicNum', description='公开（公告）号', example='CN111684990A'),
      requestDate?: string(name='RequestDate', description='申请日', example='2019-03-13'),
      requestNum?: string(name='RequestNum', description='申请号', example='CN201910186714.9'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e847116626051242854054d8b16'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIpPatentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpPatentResponseBody(name='body'),
}

async function getOcIpPatent(request: GetOcIpPatentRequest): GetOcIpPatentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpPatent', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpSoftwareCopyrightRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpSoftwareCopyrightResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      approvalDate?: string(name='ApprovalDate', description='登记批准日期', example='2019-09-12'),
      copyName?: string(name='CopyName', description='作品全称'),
      copyNum?: string(name='CopyNum', description='登记号', example='2019SR0950125'),
      entName?: string(name='EntName', description='企业名称'),
      firstDate?: string(name='FirstDate', description='首次发表日期', example='2019-02-15'),
      shortName?: string(name='ShortName', description='作品简称', example='“”'),
      successDate?: string(name='SuccessDate', description='创作完成时间', example='2019-02-15'),
      typeNum?: string(name='TypeNum', description='分类号', example='30200-0000'),
      version?: string(name='Version', description='版本号', example='V1.0'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcIpSoftwareCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpSoftwareCopyrightResponseBody(name='body'),
}

async function getOcIpSoftwareCopyright(request: GetOcIpSoftwareCopyrightRequest): GetOcIpSoftwareCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpSoftwareCopyright', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpTrademarkRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpTrademarkResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      agent?: string(name='Agent', description='代理人名称'),
      applyDate?: string(name='ApplyDate', description='申请日期', example='2005-04-30'),
      entName?: string(name='EntName', description='企业名称'),
      firstPubDate?: string(name='FirstPubDate', description='初审公告日期', example='2008-09-27'),
      firstPubNo?: string(name='FirstPubNo', description='初审公告', example='1137'),
      imageUrl?: string(name='ImageUrl', description='图片链接', example='https://qxb-img-osscache.qixin.com/official_trademark/af62332c79813d1283541b11a3da50da.jpg'),
      period?: string(name='Period', description='专用权期限'),
      regNum?: string(name='RegNum', description='商标注册号', example='4636939'),
      regPubDate?: string(name='RegPubDate', description='注册公告日期', example='2008-12-28'),
      regPubNo?: string(name='RegPubNo', description='注册公告', example='1149'),
      trademarkForm?: string(name='TrademarkForm', description='商标形式'),
      trademarkName?: string(name='TrademarkName', description='商标名称', example='CTTA'),
      trademarkStatus?: string(name='TrademarkStatus', description='商标状态'),
      trademarkType?: string(name='TrademarkType', description='商标类型'),
      typeName?: string(name='TypeName', description='商标类型名'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e843c16644202319613241d1f89'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIpTrademarkResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpTrademarkResponseBody(name='body'),
}

async function getOcIpTrademark(request: GetOcIpTrademarkRequest): GetOcIpTrademarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpTrademark', 'POST', '/', 'json', true, 'form', request);
}

model GetOcIpWorksCopyrightRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcIpWorksCopyrightResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      approvalDate?: string(name='ApprovalDate', description='登记批准日期', example='2017-07-19'),
      copyName?: string(name='CopyName', description='作品名称'),
      copyNum?: string(name='CopyNum', description='登记号'),
      entName?: string(name='EntName', description='企业名称'),
      firstDate?: string(name='FirstDate', description='首次发表时间', example='2017-01-03'),
      successDate?: string(name='SuccessDate', description='创作完成日期', example='2016-09-13'),
      typeName?: string(name='TypeName', description='作品类别'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f078f16659784453422252dcdbb'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcIpWorksCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcIpWorksCopyrightResponseBody(name='body'),
}

async function getOcIpWorksCopyright(request: GetOcIpWorksCopyrightRequest): GetOcIpWorksCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcIpWorksCopyright', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeAuctionRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcJusticeAuctionResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      auctionDate?: string(name='AuctionDate', description='拍卖时间'),
      auctionName?: string(name='AuctionName', description='拍卖标的名称'),
      basis?: string(name='Basis', description='权利来源'),
      certificate?: string(name='Certificate', description='证明文件'),
      court?: string(name='Court', description='委托法院'),
      description?: string(name='Description', description='拍品介绍'),
      document?: string(name='Document', description='法律文书'),
      entName?: string(name='EntName', description='公司名称'),
      estPrice?: string(name='EstPrice', description='拍品评估价(万元)'),
      owner?: string(name='Owner', description='标的所有人'),
      restrict?: string(name='Restrict', description='权利限制情况'),
      startPrice?: string(name='StartPrice', description='起拍价'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07bc16659785110232611d506e'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='40'),
}

model GetOcJusticeAuctionResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeAuctionResponseBody(name='body'),
}

async function getOcJusticeAuction(request: GetOcJusticeAuctionRequest): GetOcJusticeAuctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeAuction', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeCaseFilingRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcJusticeCaseFilingResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      assistant?: string(name='Assistant', description='法官助理'),
      caseNum?: string(name='CaseNum', description='案号'),
      caseStatus?: string(name='CaseStatus', description='案件状态'),
      causeAction?: string(name='CauseAction', description='案由'),
      endDate?: string(name='EndDate', description='结束时间', example='2022-01-07'),
      filingDate?: string(name='FilingDate', description='立案时间', example='2013-02-16'),
      hearingDate?: string(name='HearingDate', description='开庭时间'),
      judge?: string(name='Judge', description='承办法官'),
      party?: string(name='Party', description='当事人'),
      role?: string(name='Role', description='身份'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994177416146d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2461'),
}

model GetOcJusticeCaseFilingResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeCaseFilingResponseBody(name='body'),
}

async function getOcJusticeCaseFiling(request: GetOcJusticeCaseFilingRequest): GetOcJusticeCaseFilingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeCaseFiling', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeCourtAnnouncementRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcJusticeCourtAnnouncementResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      caseNum?: string(name='CaseNum', description='案号'),
      causeAction?: string(name='CauseAction', description='案由'),
      court?: string(name='Court', description='法院'),
      department?: string(name='Department', description='承办部门'),
      hearingDate?: string(name='HearingDate', description='开庭日期', example='2021-07-14 11:11:00'),
      judge?: string(name='Judge', description='审判长'),
      party?: string(name='Party', description='当事人'),
      title?: string(name='Title', description='标题'),
      tribunal?: string(name='Tribunal', description='法庭'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e842416657191086991309d9147'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1514'),
}

model GetOcJusticeCourtAnnouncementResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeCourtAnnouncementResponseBody(name='body'),
}

async function getOcJusticeCourtAnnouncement(request: GetOcJusticeCourtAnnouncementRequest): GetOcJusticeCourtAnnouncementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeCourtAnnouncement', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeCourtNoticeRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  requestId?: string(name='RequestId', description='系统参数，requestId', example='210e843416644201952421098d665b', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcJusticeCourtNoticeResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      content?: string(name='Content', description='公告内容'),
      court?: string(name='Court', description='公告人'),
      party?: string(name='Party', description='当事人'),
      publicDate?: string(name='PublicDate', description='公告时间', example='2021-04-25'),
      type?: string(name='Type', description='公告类型'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e843416644201952421098d665b'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcJusticeCourtNoticeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeCourtNoticeResponseBody(name='body'),
}

async function getOcJusticeCourtNotice(request: GetOcJusticeCourtNoticeRequest): GetOcJusticeCourtNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeCourtNotice', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeDishonestyRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcJusticeDishonestyResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      amount?: string(name='Amount', description='标的', example='160000.0'),
      caseNum?: string(name='CaseNum', description='案号'),
      court?: string(name='Court', description='执行法院'),
      entName?: string(name='EntName', description='被执行人'),
      executeDepartment?: string(name='ExecuteDepartment', description='做出执行依据单位'),
      executionDesc?: string(name='ExecutionDesc', description='失信被执行人行为具体情形'),
      executionStatus?: string(name='ExecutionStatus', description='被执行人履行情况'),
      filingDate?: string(name='FilingDate', description='立案时间', example='2015-08-03'),
      finalDuty?: string(name='FinalDuty', description='生效法律文书确定的义务'),
      fromCaseNum?: string(name='FromCaseNum', description='执行依据文号'),
      legalName?: string(name='LegalName', description='法定代表人'),
      province?: string(name='Province', description='省份'),
      publishDate?: string(name='PublishDate', description='发布时间', example='2015-11-11'),
      socialCreditCode?: string(name='SocialCreditCode', description='企业统一信用代码', example='914403006700460677'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07d816659791482017228dbf2c'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='28'),
}

model GetOcJusticeDishonestyResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeDishonestyResponseBody(name='body'),
}

async function getOcJusticeDishonesty(request: GetOcJusticeDishonestyRequest): GetOcJusticeDishonestyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeDishonesty', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeExecutedRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  requestId?: string(name='RequestId', example='210f07bc16659785171694435d506e', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcJusticeExecutedResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      amount?: string(name='Amount', description='执行标的', example='1387500.0'),
      caseNum?: string(name='CaseNum', description='案号'),
      court?: string(name='Court', description='执行法院'),
      filingDate?: string(name='FilingDate', description='立案时间', example='2022-09-21'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e849816657191257693178da7ea'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='5'),
}

model GetOcJusticeExecutedResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeExecutedResponseBody(name='body'),
}

async function getOcJusticeExecuted(request: GetOcJusticeExecutedRequest): GetOcJusticeExecutedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeExecuted', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeJudgementDocRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数', position='Body'),
}

model GetOcJusticeJudgementDocResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      caseFlow?: string(name='CaseFlow', description='案件流程'),
      caseNum?: string(name='CaseNum', description='案号'),
      caseType?: string(name='CaseType', description='案件类型'),
      causeAction?: string(name='CauseAction', description='案由'),
      court?: string(name='Court', description='法庭'),
      defendant?: string(name='Defendant', description='被告', example='-'),
      judgeDate?: string(name='JudgeDate', description='判决日期', example='2022-01-29'),
      judgeResult?: string(name='JudgeResult', description='判决结果'),
      judgeType?: string(name='JudgeType', description='裁判类型', example='-'),
      party?: string(name='Party', description='当事人'),
      plaintiff?: string(name='Plaintiff', description='原告', example='-'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2016-06-02'),
      role?: string(name='Role', description='身份'),
      subAmount?: string(name='SubAmount', description='涉案金额', example='-'),
      title?: string(name='Title', description='标题'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e843416644201828875969d665b'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='10'),
}

model GetOcJusticeJudgementDocResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeJudgementDocResponseBody(name='body'),
}

async function getOcJusticeJudgementDoc(request: GetOcJusticeJudgementDocRequest): GetOcJusticeJudgementDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeJudgementDoc', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeLimitHighConsumeRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  requestId?: string(name='RequestId', example='210e843316661640469071015dbd28', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcJusticeLimitHighConsumeResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      caseNum?: string(name='CaseNum', description='案号'),
      causeAction?: string(name='CauseAction', description='案由'),
      companyName?: string(name='CompanyName', description='关联企业'),
      court?: string(name='Court', description='执行法院'),
      executionApplicant?: string(name='ExecutionApplicant', description='申请执行人'),
      filingDate?: string(name='FilingDate', description='立案时间', example='2022-06-14'),
      name?: string(name='Name', description='限消法人/组织名称'),
      publishDate?: string(name='PublishDate', description='限制令发布时间', example='2022-10-27'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994120204184d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='135'),
}

model GetOcJusticeLimitHighConsumeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeLimitHighConsumeResponseBody(name='body'),
}

async function getOcJusticeLimitHighConsume(request: GetOcJusticeLimitHighConsumeRequest): GetOcJusticeLimitHighConsumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeLimitHighConsume', 'POST', '/', 'json', true, 'form', request);
}

model GetOcJusticeTerminalCaseRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcJusticeTerminalCaseResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      caseNum?: string(name='CaseNum', description='立案案号'),
      court?: string(name='Court', description='执行法院'),
      entName?: string(name='EntName', description='企业名称'),
      execAmount?: string(name='ExecAmount', description='执行标的', example='2141166.0'),
      failPerformAmount?: string(name='FailPerformAmount', description='未履行金额', example='2141166.0'),
      filingDate?: string(name='FilingDate', description='立案时间', example='2022-03-05'),
      name?: string(name='Name', description='被执行人'),
      terminalNum?: string(name='TerminalNum', description='终本案号'),
      terminateDate?: string(name='TerminateDate', description='终本时间', example='2022-07-27'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e849816657191320625369da7ea'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='161'),
}

model GetOcJusticeTerminalCaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcJusticeTerminalCaseResponseBody(name='body'),
}

async function getOcJusticeTerminalCase(request: GetOcJusticeTerminalCaseRequest): GetOcJusticeTerminalCaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcJusticeTerminalCase', 'POST', '/', 'json', true, 'form', request);
}

model GetOcListedCompanyRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetOcListedCompanyResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      circulationMarketValue?: string(name='CirculationMarketValue', description='股票流通市值', example='140.68'),
      entName?: string(name='EntName', description='企业名称'),
      entNameEng?: string(name='EntNameEng', description='企业英文名称', example='Chengdu CORPRO Technology Co.,Ltd.'),
      listDate?: string(name='ListDate', description='上市日期', example='2010-08-06'),
      securitiesCode?: string(name='SecuritiesCode', description='证劵代码', example='300101'),
      securitiesMarket?: string(name='SecuritiesMarket', description='交易所'),
      securitiesName?: string(name='SecuritiesName', description='证劵名称'),
      totalFlowShares?: string(name='TotalFlowShares', description='总流通股本（单位：万股）', example='55721'),
      totalShares?: string(name='TotalShares', description='总股本（单位：万股）', example='56007'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e848716425594711335674da0a1'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcListedCompanyResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcListedCompanyResponseBody(name='body'),
}

async function getOcListedCompany(request: GetOcListedCompanyRequest): GetOcListedCompanyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcListedCompany', 'POST', '/', 'json', true, 'form', request);
}

model GetOcNegativeAdminPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcNegativeAdminPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='处罚机关'),
      entName?: string(name='EntName', description='企业名称'),
      illegalType?: string(name='IllegalType', description='违法类型'),
      lawBasis?: string(name='LawBasis', description='法律依据'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2016-01-15'),
      punishDate?: string(name='PunishDate', description='处罚决定日期', example='2016-01-15'),
      punishNum?: string(name='PunishNum', description='处罚编号'),
      punishResult?: string(name='PunishResult', description='处罚结果'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07ff16403976324112713d273d'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='13'),
}

model GetOcNegativeAdminPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcNegativeAdminPunishmentResponseBody(name='body'),
}

async function getOcNegativeAdminPunishment(request: GetOcNegativeAdminPunishmentRequest): GetOcNegativeAdminPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcNegativeAdminPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcNegativeCustomsPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcNegativeCustomsPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      basis?: string(name='Basis', description='依据', example='""'),
      caseNo?: string(name='CaseNo', description='处罚决定书文号', example='""'),
      customs?: string(name='Customs', description='海关名称', example='""'),
      customsNo?: string(name='CustomsNo', description='海关注册编码', example='""'),
      legalName?: string(name='LegalName', description='法定代表人', example='""'),
      punishDate?: string(name='PunishDate', description='业务时间'),
      punishType?: string(name='PunishType', description='处罚类别/案件性质', example='""'),
      title?: string(name='Title', description='标题'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994514582084d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcNegativeCustomsPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcNegativeCustomsPunishmentResponseBody(name='body'),
}

async function getOcNegativeCustomsPunishment(request: GetOcNegativeCustomsPunishmentRequest): GetOcNegativeCustomsPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcNegativeCustomsPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcNegativeEnvironmentPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcNegativeEnvironmentPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='处罚单位'),
      entName?: string(name='EntName', description='企业名称'),
      execStatus?: string(name='ExecStatus', description='执行情况'),
      punishBasis?: string(name='PunishBasis', description='处罚依据'),
      punishContent?: string(name='PunishContent', description='处罚事由'),
      punishDate?: string(name='PunishDate', description='处罚日期', example='2017-08-11'),
      punishLaw?: string(name='PunishLaw', description='违反法律'),
      punishNum?: string(name='PunishNum', description='决定文书号'),
      punishRes?: string(name='PunishRes', description='处罚结果'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f078f16659784453422252dcdbb'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='10'),
}

model GetOcNegativeEnvironmentPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcNegativeEnvironmentPunishmentResponseBody(name='body'),
}

async function getOcNegativeEnvironmentPunishment(request: GetOcNegativeEnvironmentPunishmentRequest): GetOcNegativeEnvironmentPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcNegativeEnvironmentPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcNegativeFoodDrugPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcNegativeFoodDrugPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='处罚机关'),
      entName?: string(name='EntName', description='企业名称'),
      illegalType?: string(name='IllegalType', description='违法类型'),
      lawBasis?: string(name='LawBasis', description='处罚依据'),
      publicDate?: string(name='PublicDate', description='公示日期', example='2017-04-26'),
      punishDate?: string(name='PunishDate', description='决定日期', example='2017-04-26'),
      punishNum?: string(name='PunishNum', description='处罚编号'),
      punishResult?: string(name='PunishResult', description='处罚结果'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f44c216557954247657883d1827'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcNegativeFoodDrugPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcNegativeFoodDrugPunishmentResponseBody(name='body'),
}

async function getOcNegativeFoodDrugPunishment(request: GetOcNegativeFoodDrugPunishmentRequest): GetOcNegativeFoodDrugPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcNegativeFoodDrugPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcNegativeQualityPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcNegativeQualityPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='管理机关', example='-'),
      entName?: string(name='EntName', description='被查企业'),
      eventDate?: string(name='EventDate', description='事件日期', example='-'),
      eventResult?: string(name='EventResult', description='事件结果', example='-'),
      pubDate?: string(name='PubDate', description='发布时间', example='-'),
      title?: string(name='Title', description='标题'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e843416644200898391578d665b'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcNegativeQualityPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcNegativeQualityPunishmentResponseBody(name='body'),
}

async function getOcNegativeQualityPunishment(request: GetOcNegativeQualityPunishmentRequest): GetOcNegativeQualityPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcNegativeQualityPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcOperationBiddingRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcOperationBiddingResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      agentEntName?: string(name='AgentEntName', description='代理企业'),
      bidIndustry?: string(name='BidIndustry', description='标的所属行业'),
      bidTitle?: string(name='BidTitle', description='标文标题'),
      bidType?: string(name='BidType', description='招标方式'),
      content?: string(name='Content', description='正文'),
      entName?: string(name='EntName', description='企业名称'),
      infoType?: string(name='InfoType', description='标文类型'),
      openingTime?: string(name='OpeningTime', description='开标时间', example='“”'),
      projectAmount?: string(name='ProjectAmount', description='项目金额', example='“”'),
      projectName?: string(name='ProjectName', description='项目名称', example='“”'),
      projectNum?: string(name='ProjectNum', description='项目编号', example='91130983MA08JE8318\\t91130983398899748J\\t91130983MA08GQLM67'),
      publicDate?: string(name='PublicDate', description='发布时间', example='2021-05-19'),
      regionName?: string(name='RegionName', description='地区'),
      subType?: string(name='SubType', description='子类型'),
      tenderEntName?: string(name='TenderEntName', description='招标企业'),
      winnerEntName?: string(name='WinnerEntName', description='中标企业'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e842416657191086991309d9147'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcOperationBiddingResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcOperationBiddingResponseBody(name='body'),
}

async function getOcOperationBidding(request: GetOcOperationBiddingRequest): GetOcOperationBiddingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcOperationBidding', 'POST', '/', 'json', true, 'form', request);
}

model GetOcOperationCustomsRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcOperationCustomsResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      adminRegionName?: string(name='AdminRegionName', description='行政区划'),
      annualReport?: string(name='AnnualReport', description='年报情况'),
      businessCate?: string(name='BusinessCate', description='经营类别'),
      cancelFlag?: string(name='CancelFlag', description='海关注销标志'),
      creditLevelsNew?: string(name='CreditLevelsNew', description='信用等级（新）'),
      customsNum?: string(name='CustomsNum', description='海关注册编码', example='4422960996'),
      customsReg?: string(name='CustomsReg', description='注册海关'),
      ecoRegionName?: string(name='EcoRegionName', description='经济区划'),
      electType?: string(name='ElectType', description='跨境贸易电子商务类型', example='“”'),
      entName?: string(name='EntName', description='企业名称'),
      identCode?: string(name='IdentCode', description='认证证书编码', example='“”'),
      identDate?: string(name='IdentDate', description='认证证书编码', example='2008-03-26'),
      industryType?: string(name='IndustryType', description='行业种类'),
      regDate?: string(name='RegDate', description='海关进出口信用注册日期', example='2008-03-26'),
      specialArea?: string(name='SpecialArea', description='特殊贸易区域'),
      validDate?: string(name='ValidDate', description='报关有效期', example='2015-07-31'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876a16661631626916171d4d19'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcOperationCustomsResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcOperationCustomsResponseBody(name='body'),
}

async function getOcOperationCustoms(request: GetOcOperationCustomsRequest): GetOcOperationCustomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcOperationCustoms', 'POST', '/', 'json', true, 'form', request);
}

model GetOcOperationPurchaseLandRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcOperationPurchaseLandResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      area?: string(name='Area', description='面积（公顷）', example='1.0148'),
      department?: string(name='Department', description='批准单位'),
      electronicNo?: string(name='ElectronicNo', description='电子监管号', example='3708322017B00230'),
      entName?: string(name='EntName', description='企业名称'),
      industry?: string(name='Industry', description='行业分类'),
      landLevel?: string(name='LandLevel', description='土地级别'),
      landSource?: string(name='LandSource', description='土地来源'),
      landUse?: string(name='LandUse', description='土地用途'),
      location?: string(name='Location', description='项目位置'),
      price?: string(name='Price', description='标准化成交价格（数值+单位+币种）', example='1964.0'),
      projectName?: string(name='ProjectName', description='项目名称'),
      promiseDeliveryDate?: string(name='PromiseDeliveryDate', description='约定交地日期', example='2017-04-26'),
      promiseEndDate?: string(name='PromiseEndDate', description='约定竣工日期', example='2020-10-11'),
      promiseStartDate?: string(name='PromiseStartDate', description='约定开发日期', example='2017-10-11'),
      regionName?: string(name='RegionName', description='所在行政区'),
      releaseDate?: string(name='ReleaseDate', description='合同签订时间', example='2017-04-11'),
      signingMode?: string(name='SigningMode', description='供地方式'),
      useYear?: string(name='UseYear', description='使用年限'),
      volumeFractionLowerBound?: string(name='VolumeFractionLowerBound', description='约定容积率：下限', example='2.5'),
      volumeFractionUpperBound?: string(name='VolumeFractionUpperBound', description='约定容积率：上限', example='2.87'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model GetOcOperationPurchaseLandResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcOperationPurchaseLandResponseBody(name='body'),
}

async function getOcOperationPurchaseLand(request: GetOcOperationPurchaseLandRequest): GetOcOperationPurchaseLandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcOperationPurchaseLand', 'POST', '/', 'json', true, 'form', request);
}

model GetOcOperationRecruitmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='查询参数：企业名称/注册号/统一社会信用编码', position='Body'),
}

model GetOcOperationRecruitmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      benefitList?: string(name='BenefitList', description='福利'),
      description?: string(name='Description', description='描述'),
      education?: string(name='Education', description='学历'),
      endDate?: string(name='EndDate', description='招聘截止日期', example='2019-03-12'),
      entName?: string(name='EntName', description='企业名称'),
      experience?: string(name='Experience', description='工作经验'),
      pageUrl?: string(name='PageUrl', description='数据源链接', example='https://jobs.zhaopin.com/CZ446399310J00101222109.htm'),
      publishDate?: string(name='PublishDate', description='发布日期', example='2019-02-12'),
      recruitingAddress?: string(name='RecruitingAddress', description='公司地点'),
      recruitingName?: string(name='RecruitingName', description='职位'),
      salary?: string(name='Salary', description='薪资', example='3500.0-7000.0'),
      startDate?: string(name='StartDate', description='招聘开始日期', example='2019-02-12'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e846e16638994402826438d27a7'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcOperationRecruitmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcOperationRecruitmentResponseBody(name='body'),
}

async function getOcOperationRecruitment(request: GetOcOperationRecruitmentRequest): GetOcOperationRecruitmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcOperationRecruitment', 'POST', '/', 'json', true, 'form', request);
}

model GetOcProductBandRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcProductBandResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      brandIntroduction?: string(name='BrandIntroduction', description='品牌介绍--产品所属品牌介绍'),
      device?: string(name='Device', description='支持设备', example='android,ios'),
      entName?: string(name='EntName', description='产品所属企业名称'),
      productIntroduction?: string(name='ProductIntroduction', description='产品简介'),
      productLogo?: string(name='ProductLogo', description='产品logo链接', example='http://oss.cyzone.cn/2016/1028/20161028040354529.png'),
      productName?: string(name='ProductName', description='产品名称'),
      productTag?: string(name='ProductTag', description='产品标签'),
      productWebsite?: string(name='ProductWebsite', description='产品官网', example='http://bluevr.cn'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='2'),
}

model GetOcProductBandResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcProductBandResponseBody(name='body'),
}

async function getOcProductBand(request: GetOcProductBandRequest): GetOcProductBandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcProductBand', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxAbnormalRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxAbnormalResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      cardNum?: string(name='CardNum', description='法人证件号', example='120102******142'),
      cardType?: string(name='CardType', description='证件类型'),
      entName?: string(name='EntName', description='企业名称'),
      judgeDate?: string(name='JudgeDate', description='认定日期', example='2019-11-18'),
      judgeDepartment?: string(name='JudgeDepartment', description='认定单位'),
      judgeReason?: string(name='JudgeReason', description='认定原因'),
      legalName?: string(name='LegalName', description='法人姓名'),
      overdueAmount?: string(name='OverdueAmount', description='欠税金额', example='45034.56'),
      overdueType?: string(name='OverdueType', description='欠税税务种类', example='-'),
      status?: string(name='Status', description='异常状态'),
      taxpayerNum?: string(name='TaxpayerNum', description='纳税人识别号', example='110222802498998'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07c316396500746015095d3afb'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='10'),
}

model GetOcTaxAbnormalResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxAbnormalResponseBody(name='body'),
}

async function getOcTaxAbnormal(request: GetOcTaxAbnormalRequest): GetOcTaxAbnormalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxAbnormal', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxClassARequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxClassAResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      entName?: string(name='EntName', description='企业名称'),
      taxLevel?: string(name='TaxLevel', description='纳税信用等级', example='A'),
      taxpayerNum?: string(name='TaxpayerNum', description='纳税人识别号', example='911101073272861276'),
      year?: string(name='Year', description='评价年份', example='2018'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e842416657191086991309d9147'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='28'),
}

model GetOcTaxClassAResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxClassAResponseBody(name='body'),
}

async function getOcTaxClassA(request: GetOcTaxClassARequest): GetOcTaxClassAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxClassA', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxGeneralTaxpayerRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxGeneralTaxpayerResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='主营税务机关'),
      endDate?: string(name='EndDate', description='有效日期止', example='2022-08-08'),
      entName?: string(name='EntName', description='企业名称'),
      judgeDate?: string(name='JudgeDate', description='认定日期', example='1999-01-01'),
      qualification?: string(name='Qualification', description='纳税人资格'),
      startDate?: string(name='StartDate', description='有效日期起', example='2021-06-11'),
      taxpayerNum?: string(name='TaxpayerNum', description='纳税人识别号', example='91120110328591094E'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210e876f16684793977147683dc6e6'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='40'),
}

model GetOcTaxGeneralTaxpayerResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxGeneralTaxpayerResponseBody(name='body'),
}

async function getOcTaxGeneralTaxpayer(request: GetOcTaxGeneralTaxpayerRequest): GetOcTaxGeneralTaxpayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxGeneralTaxpayer', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxIllegalRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxIllegalResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      agencyCardNum?: string(name='AgencyCardNum', description='直接中介人证件号', example='140424********2022'),
      agencyCardType?: string(name='AgencyCardType', description='直接中介人证件类型'),
      agencyEnt?: string(name='AgencyEnt', description='直接中介机构公司名称'),
      agencyName?: string(name='AgencyName', description='直接中介人名称'),
      agencySex?: string(name='AgencySex', description='直接中介人性别'),
      caseType?: string(name='CaseType', description='案件性质'),
      department?: string(name='Department', description='所属税务机关'),
      entAddress?: string(name='EntAddress', description='公司注册地址'),
      entName?: string(name='EntName', description='企业名称'),
      financialCardNum?: string(name='FinancialCardNum', description='财务人员证件号', example='140424********2014'),
      financialCardType?: string(name='FinancialCardType', description='财务人员证件类型'),
      financialName?: string(name='FinancialName', description='财务人员姓名'),
      financialSex?: string(name='FinancialSex', description='财务人员性别'),
      illegalTruth?: string(name='IllegalTruth', description='主要违法事实、相关法律依据及税务处理处罚情况'),
      lawBasis?: string(name='LawBasis', description='法律处罚'),
      legalCardNum?: string(name='LegalCardNum', description='法人证件号', example='410527********4211'),
      legalCardType?: string(name='LegalCardType', description='法人证件类型'),
      legalName?: string(name='LegalName', description='法定代表人姓名'),
      legalSex?: string(name='LegalSex', description='法人性别'),
      orgCode?: string(name='OrgCode', description='组织机构代码', example='MA28T91P1'),
      publishDate?: string(name='PublishDate', description='发布日期', example='2020-03-04'),
      taxpayerNum?: string(name='TaxpayerNum', description='纳税人税号', example='91330104MA28T91P12'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07d816659791482017228dbf2c'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='135'),
}

model GetOcTaxIllegalResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxIllegalResponseBody(name='body'),
}

async function getOcTaxIllegal(request: GetOcTaxIllegalRequest): GetOcTaxIllegalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxIllegal', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxOverdueRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxOverdueResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      currOverdueAmount?: string(name='CurrOverdueAmount', description='当前新发生的欠税余额', example='2434.56'),
      department?: string(name='Department', description='所属税务机关'),
      entAddress?: string(name='EntAddress', description='公司经营地点'),
      entName?: string(name='EntName', description='企业名称'),
      legalName?: string(name='LegalName', description='负责人姓名'),
      overdueAmount?: string(name='OverdueAmount', description='合计欠税余额', example='2434.56'),
      overdueType?: string(name='OverdueType', description='欠税税种'),
      publishDate?: string(name='PublishDate', description='公示日期', example='2022-10-31'),
      taxpayerNum?: string(name='TaxpayerNum', description='纳税人识别号', example='91310117MA7DKB2J92'),
      taxpayerType?: string(name='TaxpayerType', description='纳税人类型', example='-'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f44a216685643011392991dd6da'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='4'),
}

model GetOcTaxOverdueResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxOverdueResponseBody(name='body'),
}

async function getOcTaxOverdue(request: GetOcTaxOverdueRequest): GetOcTaxOverdueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxOverdue', 'POST', '/', 'json', true, 'form', request);
}

model GetOcTaxPunishmentRequest {
  pageNo?: int32(name='PageNo', description='页码', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', example='10', position='Body'),
  searchKey?: string(name='SearchKey', description='企业名称/社会统一信用代码/工商注册号', position='Body'),
}

model GetOcTaxPunishmentResponseBody = {
  code?: string(name='Code', example='000000'),
  data?: [ 
    {
      department?: string(name='Department', description='税务局'),
      entName?: string(name='EntName', description='企业名称'),
      eventName?: string(name='EventName', description='事件名称', example='-'),
      eventType?: string(name='EventType', description='事件类型', example='-'),
      legalName?: string(name='LegalName', description='法人代表姓名'),
      punishDate?: string(name='PunishDate', description='处罚时间', example='2011-10-01'),
      taxpayerNum?: string(name='TaxpayerNum', description='识别号', example='91310117MA7DKB2J92'),
      title?: string(name='Title', description='标题'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageNum?: int32(name='PageNum', example='10'),
  requestId?: string(name='RequestId', example='210f07ee16394533371005776dbb6e'),
  success?: boolean(name='Success', example='True'),
  totalNum?: int32(name='TotalNum', example='13'),
}

model GetOcTaxPunishmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOcTaxPunishmentResponseBody(name='body'),
}

async function getOcTaxPunishment(request: GetOcTaxPunishmentRequest): GetOcTaxPunishmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOcTaxPunishment', 'POST', '/', 'json', true, 'form', request);
}

model GetQccCertificationDetailByIdRequest {
  certId?: string(name='CertId', description='证书主键', position='Body'),
}

model GetQccCertificationDetailByIdResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageIndex?: int32(name='PageIndex'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalNum?: int32(name='TotalNum'),
}

model GetQccCertificationDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetQccCertificationDetailByIdResponseBody(name='body'),
}

async function getQccCertificationDetailById(request: GetQccCertificationDetailByIdRequest): GetQccCertificationDetailByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQccCertificationDetailById', 'POST', '/', 'json', true, 'form', request);
}

model GetQccSearchCertificationRequest {
  certCategory?: string(name='CertCategory', description='证书类型', position='Body'),
  entName?: string(name='EntName', description='企业名称', position='Body'),
  pageNo?: int32(name='PageNo', description='页码', position='Body'),
  pageSize?: int32(name='PageSize', description='每页条数', position='Body'),
}

model GetQccSearchCertificationResponseBody = {
  code?: string(name='Code'),
  data?: [ map[string]any ](name='Data'),
  message?: string(name='Message'),
  pageIndex?: int32(name='PageIndex'),
  pageNum?: int32(name='PageNum'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalNum?: int32(name='TotalNum'),
}

model GetQccSearchCertificationResponse = {
  headers: map[string]string(name='headers'),
  body: GetQccSearchCertificationResponseBody(name='body'),
}

async function getQccSearchCertification(request: GetQccSearchCertificationRequest): GetQccSearchCertificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQccSearchCertification', 'POST', '/', 'json', true, 'form', request);
}

