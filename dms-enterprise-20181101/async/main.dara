/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dms-enterprise';
  @version = '2018-11-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AsyncTaskVO {
  datasetId?: string(name='DatasetId'),
  id?: long(name='Id'),
  remark?: string(name='Remark'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus'),
  taskType?: int32(name='TaskType'),
  userId?: long(name='UserId'),
}

model ColumnKnowledgeInfo {
  assetDescription?: string(name='AssetDescription'),
  assetModifiedGmt?: string(name='AssetModifiedGmt'),
  columnName?: string(name='ColumnName'),
  columnType?: string(name='ColumnType'),
  description?: string(name='Description'),
  position?: int32(name='Position'),
}

model DLCatalog {
  description?: string(name='Description'),
  location?: string(name='Location'),
  name?: string(name='Name'),
}

model DLColumn {
  comment?: string(name='Comment'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model DLDatabase {
  catalogName?: string(name='CatalogName'),
  dbId?: long(name='DbId'),
  description?: string(name='Description'),
  location?: string(name='Location'),
  name?: string(name='Name'),
  parameters?: map[string]any(name='Parameters'),
}

model DLFunction {
  catalogName?: string(name='CatalogName'),
  className?: string(name='ClassName'),
  createTime?: int32(name='CreateTime'),
  creatorId?: long(name='CreatorId'),
  dbName?: string(name='DbName'),
  functionName?: string(name='FunctionName'),
  functionType?: string(name='FunctionType'),
  modifierId?: long(name='ModifierId'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  resourceUris?: [
    DLResourceUri
  ](name='ResourceUris'),
}

model DLFunctionInput {
  className?: string(name='ClassName'),
  createTime?: int32(name='CreateTime'),
  creatorId?: long(name='CreatorId'),
  functionName?: string(name='FunctionName'),
  functionType?: string(name='FunctionType'),
  modifierId?: long(name='ModifierId'),
  ownerName?: string(name='OwnerName'),
  ownerType?: string(name='OwnerType'),
  resourceUris?: [
    DLResourceUri
  ](name='ResourceUris'),
}

model DLOrder {
  col?: string(name='Col'),
  order?: int32(name='Order'),
}

model DLPartition {
  catalogName?: string(name='CatalogName'),
  createTime?: int32(name='CreateTime'),
  dbName?: string(name='DbName'),
  lastAccessTime?: int32(name='LastAccessTime'),
  parameters?: map[string]string(name='Parameters'),
  sd?: DLStorageDescriptor(name='Sd'),
  tableName?: string(name='TableName'),
  values?: [ string ](name='Values'),
}

model DLPartitionInput {
  createTime?: int32(name='CreateTime'),
  lastAccessTime?: int32(name='LastAccessTime'),
  parameters?: map[string]string(name='Parameters'),
  storageDescriptor?: DLStorageDescriptor(name='StorageDescriptor'),
  values?: [ string ](name='Values'),
}

model DLResourceUri {
  resourceType?: string(name='ResourceType'),
  uri?: string(name='Uri'),
}

model DLSerdeInfo {
  description?: string(name='Description'),
  deserializerClass?: string(name='DeserializerClass'),
  name?: string(name='Name'),
  parameters?: map[string]any(name='Parameters'),
  serdeType?: int32(name='SerdeType'),
  serializationLib?: string(name='SerializationLib'),
  serializerClass?: string(name='SerializerClass'),
}

model DLSkewedInfo {
  skewedColNames?: [ string ](name='SkewedColNames'),
  skewedColValueLocationMaps?: map[string]any(name='SkewedColValueLocationMaps'),
  skewedColValues?: [[ string ]  ](name='SkewedColValues'),
}

model DLStorageDescriptor {
  bucketCols?: [ string ](name='BucketCols'),
  columns?: [
    DLColumn
  ](name='Columns'),
  inputFormat?: string(name='InputFormat'),
  isCompressed?: boolean(name='IsCompressed'),
  location?: string(name='Location'),
  numBuckets?: int32(name='NumBuckets'),
  originalColumns?: [
    DLColumn
  ](name='OriginalColumns'),
  outputFormat?: string(name='OutputFormat'),
  parameters?: map[string]any(name='Parameters'),
  serdeInfo?: DLSerdeInfo(name='SerdeInfo'),
  skewedInfo?: DLSkewedInfo(name='SkewedInfo'),
  sortCols?: [
    DLOrder
  ](name='SortCols'),
}

model DLTable {
  catalogName?: string(name='CatalogName'),
  createTime?: int32(name='CreateTime'),
  creatorId?: long(name='CreatorId'),
  dbId?: long(name='DbId'),
  dbName?: string(name='DbName'),
  description?: string(name='Description'),
  lastAccessTime?: int32(name='LastAccessTime'),
  location?: string(name='Location'),
  modifierId?: long(name='ModifierId'),
  name?: string(name='Name'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]any(name='Parameters'),
  partitionKeys?: [
    DLColumn
  ](name='PartitionKeys'),
  retention?: int32(name='Retention'),
  storageDescriptor?: DLStorageDescriptor(name='StorageDescriptor'),
  tableType?: string(name='TableType'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model DLTablebaseInfo {
  catalogName?: string(name='CatalogName'),
  createTime?: int32(name='CreateTime'),
  creatorId?: long(name='CreatorId'),
  dbId?: long(name='DbId'),
  dbName?: string(name='DbName'),
  description?: string(name='Description'),
  lastAccessTime?: int32(name='LastAccessTime'),
  location?: string(name='Location'),
  modifierId?: long(name='ModifierId'),
  name?: string(name='Name'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]any(name='Parameters'),
  partitionKeys?: [
    DLColumn
  ](name='PartitionKeys'),
  retention?: int32(name='Retention'),
  tableType?: string(name='TableType'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model DatasetItemVO {
  asyncTaskList?: [
    AsyncTaskVO
  ](name='AsyncTaskList'),
  datasetStatus?: int32(name='DatasetStatus'),
  datasetType?: int32(name='DatasetType'),
  digest?: string(name='Digest'),
  fileSystem?: string(name='FileSystem'),
  id?: string(name='Id'),
  keyName?: string(name='KeyName'),
  moreInfo?: string(name='MoreInfo'),
  path?: string(name='Path'),
  projectsLinked?: [
    ProjectDetailsLiteVO
  ](name='ProjectsLinked'),
  recentTaskStatus?: int32(name='RecentTaskStatus'),
  remark?: string(name='Remark'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
  url?: string(name='Url'),
}

model GetTableDataKeyVO {
  colName?: string(name='ColName'),
  dbName?: string(name='DbName'),
  mekId?: long(name='MekId'),
  schemaName?: string(name='SchemaName'),
  tblName?: string(name='TblName'),
  userName?: string(name='UserName'),
}

model ImportMasterKeyVO {
  encryptMekDataBase64?: string(name='EncryptMekDataBase64'),
  mekId?: long(name='MekId'),
  projectId?: [ long ](name='ProjectId'),
}

model MetaCategory {
  categoryId?: long(name='CategoryId'),
  createTime?: string(name='CreateTime'),
  depth?: int32(name='Depth'),
  name?: string(name='Name'),
  parentCategoryId?: long(name='ParentCategoryId'),
}

model MetaCategoryTableEntity {
  catalogName?: string(name='CatalogName'),
  categoryId?: long(name='CategoryId'),
  databaseSearchName?: string(name='DatabaseSearchName'),
  dbId?: int32(name='DbId'),
  dbType?: string(name='DbType'),
  description?: string(name='Description'),
  instanceId?: int32(name='InstanceId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  tableSchemaName?: string(name='TableSchemaName'),
}

model PartitionError {
  errorDetail?: string(name='ErrorDetail'),
  values?: [ string ](name='Values'),
}

model ProjectDetailsLiteVO {
  id?: long(name='Id'),
  projectName?: string(name='ProjectName'),
}

model StsApplyVO {
  aliyunId?: string(name='AliyunId'),
  duration?: long(name='Duration'),
}

model StsTokenVO {
  accessKeyId?: string(name='AccessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret'),
  expiration?: string(name='Expiration'),
  securityToken?: string(name='SecurityToken'),
}

model TableKnowledgeInfo {
  assetDescription?: string(name='AssetDescription'),
  assetModifiedGmt?: string(name='AssetModifiedGmt'),
  columnList?: [
    ColumnKnowledgeInfo
  ](name='ColumnList'),
  description?: string(name='Description'),
  summary?: string(name='Summary'),
  tableName?: string(name='TableName'),
}

model TeeEvidenceVO {
  cipherSuite?: string(name='CipherSuite'),
  enclaveData?: string(name='EnclaveData'),
  encryptPublicKeyPem?: string(name='EncryptPublicKeyPem'),
  encryptPublicKeyType?: string(name='EncryptPublicKeyType'),
  modifiedDate?: string(name='ModifiedDate'),
  publicKey?: string(name='PublicKey'),
  publicKeyRaBase64?: string(name='PublicKeyRaBase64'),
  publicKeyRaType?: string(name='PublicKeyRaType'),
  quoteReport?: string(name='QuoteReport'),
  signPublicKeyPem?: string(name='SignPublicKeyPem'),
  signPublicKeyType?: string(name='SignPublicKeyType'),
  trustedMrEnclave?: [ string ](name='TrustedMrEnclave'),
}

model UsersDetailsVO {
  approvalSignatureBase64?: string(name='ApprovalSignatureBase64'),
  approvalSqlTemplate?: string(name='ApprovalSqlTemplate'),
  approvalStatus?: string(name='ApprovalStatus'),
  creator?: int32(name='Creator'),
  dataReady?: int32(name='DataReady'),
  id?: long(name='Id'),
  mekid?: long(name='Mekid'),
  pathPrefix?: string(name='PathPrefix'),
  resultParty?: int32(name='ResultParty'),
  uid?: string(name='Uid'),
  userConfirmed?: int32(name='UserConfirmed'),
  userName?: string(name='UserName'),
  userPublicKeyPem?: string(name='UserPublicKeyPem'),
}

model OpenStructDLTableInput {
  createTime?: int32(name='CreateTime'),
  creatorId?: long(name='CreatorId'),
  description?: string(name='Description'),
  lastAccessTime?: int32(name='LastAccessTime'),
  location?: string(name='Location'),
  modifierId?: long(name='ModifierId'),
  name?: string(name='Name'),
  owner?: string(name='Owner'),
  ownerType?: string(name='OwnerType'),
  parameters?: map[string]string(name='Parameters'),
  partitionKeys?: [
    DLColumn
  ](name='PartitionKeys'),
  retention?: int32(name='Retention'),
  storageDescriptor?: DLStorageDescriptor(name='StorageDescriptor'),
  tableType?: string(name='TableType'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
}

model AddAuthorityTemplateItemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  items: [ 
    {
      dbId?: int32(name='DbId', example='2478****'),
      instanceId?: int32(name='InstanceId', example='237****'),
      permissionTypes?: [ string ](name='PermissionTypes'),
      resourceType: string(name='ResourceType', description='This parameter is required.', example='INSTANCE'),
      tableName?: string(name='TableName', example='test_table'),
    }
  ](name='Items', description='This parameter is required.', shrink='json', position='Query'),
  templateId: long(name='TemplateId', description='This parameter is required.', example='15***', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model AddAuthorityTemplateItemsResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='3D3FB827-E667-50DB-AD59-C83F8237FECB'),
  success?: boolean(name='Success', example='true'),
}

model AddAuthorityTemplateItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAuthorityTemplateItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddAuthorityTemplateItems  AddAuthorityTemplateItemsRequest
  * @return AddAuthorityTemplateItemsResponse
 */
async function addAuthorityTemplateItems(request: AddAuthorityTemplateItemsRequest): AddAuthorityTemplateItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAuthorityTemplateItems', 'POST', '/', 'json', false, 'json', request);
}

model AddDesensitizationRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  functionParams?: [ map[string]string ](name='FunctionParams', description='The parameters of the algorithm.', position='Body'),
  functionType: string(name='FunctionType', description='The type of the masking algorithm.

Valid values:

*   FIX_POS : masks characters in the specified position.
*   DATE_ROUNDING: rounds the date.
*   PLAINTEXT: does not mask data.
*   SHA1: masks characters by using the secure hash algorithm 1 (SHA-1)
*   HMAC: masks characters by using the hash-based message authentication code (HMAC).
*   STRING_TRANSFORM: shift characters.
*   NUMBER_ROUNDING: rounds numbers.
*   AES: masks characters by using the advanced encryption standard (AES) algorithm.
*   SHA256: masks characters by using SHA-256 algorithm.
*   DES: masks characters by using the data encryption standard (DES) algorithm.
*   MAP_REPLACE: masks the mapped data.
*   FIX_CHAR: masks fixed characters.
*   DEFAULT: masks all characters.
*   RANDOM_REPLACE: randomly replaces characters.
*   MD5: masks characters by using the MD5 algorithm.

This parameter is required.', example='MD5', position='Query'),
  ruleDescription?: string(name='RuleDescription', description='The description of the rule.', example='hash algorithm', position='Query'),
  ruleName: string(name='RuleName', description='The name of the rule.

This parameter is required.', example='desensitization algorithm test', position='Query'),
  ruleType: string(name='RuleType', description='The masking algorithm.

Valid values:

*   PLAINTEXT

    <!-- -->

    <!-- -->

    <!-- -->

*   TRANSFORM

    <!-- -->

    <!-- -->

    <!-- -->

*   ENCRYPT

    <!-- -->

    <!-- -->

    <!-- -->

*   REPLACE

    <!-- -->

    <!-- -->

    <!-- -->

*   HASH

    <!-- -->

    <!-- -->

    <!-- -->

*   MASK

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='HASH', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddDesensitizationRuleResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  ruleId?: int32(name='RuleId', description='The ID generated for the data masking rule.', example='35***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model AddDesensitizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDesensitizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDesensitizationRule  AddDesensitizationRuleRequest
  * @return AddDesensitizationRuleResponse
 */
async function addDesensitizationRule(request: AddDesensitizationRuleRequest): AddDesensitizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDesensitizationRule', 'POST', '/', 'json', true, 'form', request);
}

model AddInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', example='dblink_test', position='Query'),
  databasePassword: string(name='DatabasePassword', description='This parameter is required.', example='test***', position='Query'),
  databaseUser: string(name='DatabaseUser', description='This parameter is required.', example='testsdb', position='Query'),
  dbaId?: long(name='DbaId', example='27****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', example='2', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', example='cn-hangzhou', position='Query'),
  enableSellCommon?: string(name='EnableSellCommon', example='Y', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', example='Y', position='Query'),
  enableSellStable?: string(name='EnableSellStable', example='NULL', position='Query'),
  enableSellTrust: string(name='EnableSellTrust', description='This parameter is required.', example='Y', position='Query'),
  envType: string(name='EnvType', description='This parameter is required.', example='product', position='Query'),
  exportTimeout: int32(name='ExportTimeout', description='This parameter is required.', example='86400', position='Query'),
  host: string(name='Host', description='This parameter is required.', example='172.XX.XXX.254', position='Query'),
  instanceAlias: string(name='InstanceAlias', description='This parameter is required.', position='Query'),
  instanceSource: string(name='InstanceSource', description='This parameter is required.', example='RDS', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='MySQL', position='Query'),
  networkType: string(name='NetworkType', description='This parameter is required.', example='VPC', position='Query'),
  port: int32(name='Port', description='This parameter is required.', example='3306', position='Query'),
  queryTimeout: int32(name='QueryTimeout', description='This parameter is required.', example='7200', position='Query'),
  safeRule?: string(name='SafeRule', position='Query'),
  sid?: string(name='Sid', example='testSid', position='Query'),
  skipTest?: boolean(name='SkipTest', example='false', position='Query'),
  templateId?: long(name='TemplateId', example='31***', position='Query'),
  templateType?: string(name='TemplateType', example='INNER', position='Query'),
  tid?: long(name='Tid', example='23****', position='Query'),
  useDsql?: int32(name='UseDsql', example='1', position='Query'),
  useSsl?: int32(name='UseSsl', minimum=-1, maximum=1, position='Query'),
  vpcId?: string(name='VpcId', example='vpc-2zef4o1hu7ljd****', position='Query'),
}

model AddInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model AddInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddInstance  AddInstanceRequest
  * @return AddInstanceResponse
 */
async function addInstance(request: AddInstanceRequest): AddInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddInstance', 'POST', '/', 'json', false, 'json', request);
}

model AddLhMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  members: [ 
    {
      roles: [ string ](name='Roles', description='The role. Valid values:

*   **ADMIN**: workspace administrator. You can add a workspace administrator only as a DMS administrator or a DBA.
*   **MEMBER**: workspace member.
*   **DEVELOPER**: task flow developer. Only a workspace member can be added as a task flow developer.

This parameter is required.'),
      userId: long(name='UserId', description='The ID of the user to be added. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.

This parameter is required.', example='15****'),
    }
  ](name='Members', description='The information about the users to be added.

This parameter is required.', shrink='json', position='Query'),
  objectId: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.

This parameter is required.', example='1', position='Query'),
  objectType: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow

This parameter is required.', example='0', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model AddLhMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddLhMembersResponseBody(name='body'),
}

/**
  * @description You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * Usage notes:
  * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
  * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
  * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](https://help.aliyun.com/document_detail/410893.html).
  * @param request  the request parameters of AddLhMembers  AddLhMembersRequest
  * @return AddLhMembersResponse
 */
async function addLhMembers(request: AddLhMembersRequest): AddLhMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLhMembers', 'POST', '/', 'json', false, 'json', request);
}

model AddLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  routeExpr: string(name='RouteExpr', description='The routing algorithm expression. For more information about how to configure a routing algorithm expression, see [Configure a routing algorithm](https://www.alibabacloud.com/help/en/data-management-service/latest/configure-a-routing-algorithm).

This parameter is required.', example='#id#%16', position='Query'),
  routeKey: string(name='RouteKey', description='The unique key of the routing algorithm. 

> - You can create a custom unique key for the routing algorithm. No requirements are imposed on custom unique keys.
> - The unique key of the routing algorithm in the same logical table must be unique.

This parameter is required.', example='id-hash-mod16', position='Query'),
  tableId: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.

This parameter is required.', example='4****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='4***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='can not find table, tableId : 11133'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model AddLogicTableRouteConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddLogicTableRouteConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddLogicTableRouteConfig  AddLogicTableRouteConfigRequest
  * @return AddLogicTableRouteConfigResponse
 */
async function addLogicTableRouteConfig(request: AddLogicTableRouteConfigRequest): AddLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddTableToCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId: long(name='CategoryId', description='This parameter is required.', example='30000254257', position='Query'),
  dbId: long(name='DbId', description='This parameter is required.', example='1930****', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_name', position='Query'),
  tableSchemaName?: string(name='TableSchemaName', example='dbo', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddTableToCategoryResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model AddTableToCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTableToCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTableToCategory  AddTableToCategoryRequest
  * @return AddTableToCategoryResponse
 */
async function addTableToCategory(request: AddTableToCategoryRequest): AddTableToCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTableToCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddTaskFlowEdgesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  edges: [ 
    {
      nodeEnd: long(name='NodeEnd', description='The ID of the node where the end node of the edge is located.

This parameter is required.', example='44***'),
      nodeFrom: long(name='NodeFrom', description='The ID of the node where the start node of the edge is located.

This parameter is required.', example='44***'),
    }
  ](name='Edges', description='The list of edges of the task flow.

This parameter is required.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddTaskFlowEdgesResponseBody = {
  edgeIds?: {
    edgeId?: [ long ](name='EdgeId')
  }(name='EdgeIds', description='The list of task flow edge IDs.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model AddTaskFlowEdgesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTaskFlowEdgesResponseBody(name='body'),
}

/**
  * @description When you add directed edges for a task node, take note of the following limits:
  * 1. The endpoints of the specified edge exist in the Directed Acyclic Graph (DAG) of the task flow specified by DagId.
  * 2. After a backward edge is added, the DAG does not contain loops.
  * @param request  the request parameters of AddTaskFlowEdges  AddTaskFlowEdgesRequest
  * @return AddTaskFlowEdgesResponse
 */
async function addTaskFlowEdges(request: AddTaskFlowEdgesRequest): AddTaskFlowEdgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTaskFlowEdges', 'POST', '/', 'json', false, 'json', request);
}

model AnalyzeSQLLineageRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: long(name='DbId', description='The database ID.

>  You can call one of the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html), [ListDatabases](https://help.aliyun.com/document_detail/141873.html), and [GetDatabase](https://help.aliyun.com/document_detail/141869.html) operations to obtain the database ID provided in the DatabaseId response parameter.

This parameter is required.', example='123***', minimum=1, maximum=9223372036854775807, position='Query'),
  sqlContent: string(name='SqlContent', description='The SQL statement.

This parameter is required.', example='insert into a (id) select id from b;', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AnalyzeSQLLineageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  lineageResult?: {
    lineages?: [ 
      {
        dst?: string(name='Dst', description='The target.', example='dmstest.a.id'),
        lineageType?: string(name='LineageType', description='The type of the lineage. Valid values:

*   **FIELD_DEPEND_FIELD**: Fields depend on fields.
*   **TABLE_DEPEND_TABLE**: Tables depend on tables.
*   **FIELD_INFLU_TABLE**: Fields influence tables.
*   **FIELD_INFLU_FIELD**: Fields influence fields.
*   **FIELD_INFLU_TABLE**: Tables influence fields.
*   **FIELD_JOIN_FIELD**: Fields are associated with fields.', example='FIELD_DEPEND_FIELD'),
        operType?: string(name='OperType', description='The operation type of the SQL statement in which the data lineage is generated. For example, if the operation type is SELECT, the data lineage is generated from a SELECT statement.

>  This field is an extended field which has no practical use.', example='SELECT'),
        processDetail?: {
          calWay?: string(name='CalWay', description='The calculating method. Valid values:

*   **DIRECT**: No function or expression is used.
*   **EXPR**: A function or expression is used.', example='DIRECT'),
          code?: string(name='Code', description='The SQL code snippet for field processing.', example='dmstest.b.id'),
        }(name='ProcessDetail', description='The handling details. This parameter is returned only when LineageType is FIELD_DEPEND_FIELD.'),
        src?: string(name='Src', description='The source.', example='dmstest.b.id'),
      }
    ](name='Lineages', description='The details about the lineage.'),
    objectMetadata?: [ 
      {
        fields?: [ 
          {
            name?: string(name='Name', description='The name of the field.', example='dmstest.a.id'),
          }
        ](name='Fields', description='The fields in the metatable.'),
        name?: string(name='Name', description='The object name.', example='a'),
        source?: string(name='Source', description='The source of metadata. Valid values:

*   **DDL**: The metadata comes from parsed SQL statements or definition of databases and tables collected by DMS.
*   **LINEAGE**: The metadata comes from lineage analysis results.', example='DDL'),
        type?: string(name='Type', description='The object type. Valid values:

*   **TABLE**
*   **VIEW**
*   **TMP_TABLE**', example='TABLE'),
      }
    ](name='ObjectMetadata', description='The table and field metadata information.'),
  }(name='LineageResult', description='Returned data set of SQL lineage.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model AnalyzeSQLLineageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeSQLLineageResponseBody(name='body'),
}

/**
  * @description The following conditions must be met before you call this API operation.
  * *   The database instance is of one of the following types: ApsaraDB RDS for MySQL, PolarDB for MySQL, AnalyticDB for MySQL, ApsaraDB RDS for PostgreSQL, PolarDB for PostgreSQL, AnalyticDB for PostgreSQL, Oracle, and openGauss.
  * *   A database instance is managed in Security Collaboration mode. For more information about control modes, see [Control modes](https://help.aliyun.com/document_detail/151629.html).
  * @param request  the request parameters of AnalyzeSQLLineage  AnalyzeSQLLineageRequest
  * @return AnalyzeSQLLineageResponse
 */
async function analyzeSQLLineage(request: AnalyzeSQLLineageRequest): AnalyzeSQLLineageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AnalyzeSQLLineage', 'POST', '/', 'json', false, 'json', request);
}

model ApproveOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  approvalNodeId?: long(name='ApprovalNodeId', description='If ApprovalType is set to ADD_APPROVAL_NODE, you need to specify this parameter. The ID of the user that is added as the new approval node. This node must be a user-defined approval node. You can call the ListUserDefineWorkFlowNodes operation to obtain the value of this parameter.', example='1', position='Query'),
  approvalNodePos?: string(name='ApprovalNodePos', description='The position of the new approval node. You must specify this parameter if ApprovalType is set to ADD_APPROVAL_NODE. Valid values:

*   **PRE_ADD_APPROVAL_NODE**: before the current approval node.
*   **POST_ADD_APPROVAL_NODE**: after the current approval node.', example='POST_ADD_APPROVAL_NODE', position='Query'),
  approvalType: string(name='ApprovalType', description='The action that you want to perform on the ticket. Valid values:

*   **AGREE**
*   **CANCEL**
*   **REJECT**
*   **TRANSFER**
*   **ADD_APPROVAL_NODE**

This parameter is required.', example='agree', position='Query'),
  comment?: string(name='Comment', description='The description of the ticket.', example='test', position='Query'),
  newApprover?: long(name='NewApprover', description='The ID of the user to which the ticket is transferred. If ApprovalType is set to TRANSFER, you need to specify this parameter.', example='12***', position='Query'),
  newApproverList?: string(name='NewApproverList', description='>  You can specify this parameter if ApprovalType is set to TRANSFER. You need to only specify one of NewApproverList and NewApprover.

The IDs of the users to whom the ticket is transferred. Separate multiple IDs with commas (,).', example='154***,155***,156***', position='Query'),
  oldApprover?: long(name='OldApprover', description='The ID of the user that transfers the ticket to another user. The default value is the ID of the current user. If the current user is an administrator or a database administrator (DBA), the user can change the value of this parameter to the ID of another user.', example='23***', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The UID of the Alibaba Cloud account that actually calls the API.', example='21400447956867****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='-1', position='Query'),
  workflowInstanceId: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.

This parameter is required.', example='1234', minimum=1, position='Query'),
}

model ApproveOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ApproveOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApproveOrder  ApproveOrderRequest
  * @return ApproveOrderResponse
 */
async function approveOrder(request: ApproveOrderRequest): ApproveOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOrder', 'POST', '/', 'json', false, 'json', request);
}

model BackFillRequest {
  regionId?: string(name='RegionId', position='Host'),
  asc?: boolean(name='Asc', description='The running sequence of task flows for data backfill. Valid values:

*   **0**: reverse chronological order.
*   **1**: chronological order. This is the default value.', example='0', position='Query'),
  backFillDate?: string(name='BackFillDate', description='The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.', example='2022-01-14', position='Query'),
  backFillDateBegin?: string(name='BackFillDateBegin', description='The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-01-14', position='Query'),
  backFillDateEnd?: string(name='BackFillDateEnd', description='The end date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-09-29', position='Query'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  filterNodeIds?: [ long ](name='FilterNodeIds', description='Filter condition, which specifies the list of node IDs in the task flow that do not need to supplement data.', shrink='json', position='Query'),
  historyDagId?: long(name='HistoryDagId', description='The ID of the historical task flow.', example='16***', position='Query'),
  interval?: int32(name='Interval', description='The interval at which data backfill is performed. Unit: hours. Minimum value: 1. Default value: 24.', example='24', minimum=1, position='Query'),
  isTriggerSubTree?: boolean(name='IsTriggerSubTree', description='Specifies whether to run descendant nodes. Default value: true.', example='true', position='Query'),
  startNodeIds?: [ long ](name='StartNodeIds', description='The number of nodes for which you want to backfill data.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model BackFillResponseBody = {
  dagInstanceId?: long(name='DagInstanceId', description='The ID of the execution record of the task flow.', example='47****'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  nodeId?: long(name='NodeId', description='The ID of the node.', example='43****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model BackFillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BackFillResponseBody(name='body'),
}

/**
  * @description During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
  * @param request  the request parameters of BackFill  BackFillRequest
  * @return BackFillResponse
 */
async function backFill(request: BackFillRequest): BackFillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BackFill', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateDataLakePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  ifNotExists?: boolean(name='IfNotExists', example='true', position='Query'),
  needResult?: boolean(name='NeedResult', example='true', position='Query'),
  partitionInputs: [
    DLPartitionInput
  ](name='PartitionInputs', description='This parameter is required.', shrink='json', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model BatchCreateDataLakePartitionsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  partitions?: [
    DLPartition
  ](name='Partitions'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: string(name='Success', example='true'),
}

model BatchCreateDataLakePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateDataLakePartitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateDataLakePartitions  BatchCreateDataLakePartitionsRequest
  * @return BatchCreateDataLakePartitionsResponse
 */
async function batchCreateDataLakePartitions(request: BatchCreateDataLakePartitionsRequest): BatchCreateDataLakePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateDataLakePartitions', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteDataLakePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  ifExists?: boolean(name='IfExists', example='true', position='Query'),
  partitionValuesList: [[ string ]  ](name='PartitionValuesList', description='This parameter is required.', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_name', position='Query'),
  tid?: long(name='Tid', example='3****', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model BatchDeleteDataLakePartitionsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  requestId?: string(name='RequestId', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: string(name='Success', example='true'),
}

model BatchDeleteDataLakePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteDataLakePartitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteDataLakePartitions  BatchDeleteDataLakePartitionsRequest
  * @return BatchDeleteDataLakePartitionsResponse
 */
async function batchDeleteDataLakePartitions(request: BatchDeleteDataLakePartitionsRequest): BatchDeleteDataLakePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDataLakePartitions', 'POST', '/', 'json', false, 'json', request);
}

model BatchUpdateDataLakePartitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  partitionInputs: [
    DLPartitionInput
  ](name='PartitionInputs', description='This parameter is required.', shrink='json', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model BatchUpdateDataLakePartitionsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  partitionErrors?: [
    PartitionError
  ](name='PartitionErrors'),
  requestId?: string(name='RequestId', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', example='true'),
}

model BatchUpdateDataLakePartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateDataLakePartitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUpdateDataLakePartitions  BatchUpdateDataLakePartitionsRequest
  * @return BatchUpdateDataLakePartitionsResponse
 */
async function batchUpdateDataLakePartitions(request: BatchUpdateDataLakePartitionsRequest): BatchUpdateDataLakePartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateDataLakePartitions', 'POST', '/', 'json', true, 'form', request);
}

model BuyPayAsYouGoOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  commodityType: string(name='CommodityType', description='The type of the resource that you want to purchase.

*   **VersionType**: DMS that supports control modes
*   **SensitiveDataProtection**: DMS that supports sensitive data protection

This parameter is required.', example='SensitiveDataProtection', position='Query'),
  insNum: int32(name='InsNum', description='The number of database instances that you want to use DMS to manage.

> A quota can be used for only one database instance.

This parameter is required.', example='7', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  versionType?: string(name='VersionType', description='The control mode of DMS. Valid values:

*   **stand**: Stable Change
*   **safety**: Security Collaboration', example='stand', position='Query'),
}

model BuyPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  instanceId?: string(name='InstanceId', description='If the purchase is successful, the ID of the purchased instance is returned.', example='dms_pre_public_cn-nif23l****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model BuyPayAsYouGoOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuyPayAsYouGoOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BuyPayAsYouGoOrder  BuyPayAsYouGoOrderRequest
  * @return BuyPayAsYouGoOrderResponse
 */
async function buyPayAsYouGoOrder(request: BuyPayAsYouGoOrderRequest): BuyPayAsYouGoOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BuyPayAsYouGoOrder', 'POST', '/', 'json', false, 'json', request);
}

model ChangeColumnSecLevelRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the field.

> You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the name of the field.

This parameter is required.', example='test_column', position='Query'),
  dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the database.

> You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the ID of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to obtain the ID of a logical database.

This parameter is required.', example='325', position='Query'),
  isLogic: boolean(name='IsLogic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a physical database.
*   false: The database is a logical database.

This parameter is required.', example='false', position='Query'),
  newLevel: string(name='NewLevel', description='The new sensitivity level of the field that you want to specify. Valid values:

*   INNER: low sensitivity level
*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level

This parameter is required.', example='SENSITIVE', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the database.

*   You can also call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of the database.
*   You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the name of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to obtain the name of a logical database.

This parameter is required.', example='test_schema', position='Query'),
  tableName: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the table.

> You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the name of the table.

This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='43253', position='Query'),
}

model ChangeColumnSecLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='false'),
}

model ChangeColumnSecLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeColumnSecLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeColumnSecLevel  ChangeColumnSecLevelRequest
  * @return ChangeColumnSecLevelResponse
 */
async function changeColumnSecLevel(request: ChangeColumnSecLevelRequest): ChangeColumnSecLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeColumnSecLevel', 'POST', '/', 'json', false, 'json', request);
}

model ChangeColumnSecurityLevelRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='This parameter is required.', example='test_column', position='Query'),
  dbId: long(name='DbId', description='This parameter is required.', example='325**', position='Query'),
  isLogic: boolean(name='IsLogic', description='This parameter is required.', example='false', position='Query'),
  newSensitivityLevel: string(name='NewSensitivityLevel', description='This parameter is required.', example='S2', position='Query'),
  schemaName: string(name='SchemaName', description='This parameter is required.', example='test_schema', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='10****', position='Query'),
}

model ChangeColumnSecurityLevelResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E103C5F9-DE47-53F2-BF34-D71DF38F****'),
  success?: boolean(name='Success', example='true'),
}

model ChangeColumnSecurityLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeColumnSecurityLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeColumnSecurityLevel  ChangeColumnSecurityLevelRequest
  * @return ChangeColumnSecurityLevelResponse
 */
async function changeColumnSecurityLevel(request: ChangeColumnSecurityLevelRequest): ChangeColumnSecurityLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeColumnSecurityLevel', 'POST', '/', 'json', false, 'json', request);
}

model ChangeLhDagOwnerRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.

This parameter is required.', example='9***', position='Query'),
  ownerUserId: long(name='OwnerUserId', description='The ID of the user to be specified as the new owner of the task flow. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.

This parameter is required.', example='50****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ChangeLhDagOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9997630E-1993-5E6D-9DF1-4EFEE755FE31'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ChangeLhDagOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeLhDagOwnerResponseBody(name='body'),
}

/**
  * @description Usage notes:
  * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
  * *   You can call the [ReDeployLhDagVersion](https://help.aliyun.com/document_detail/424712.html) operation to redeploy a published version of a task flow.
  * @param request  the request parameters of ChangeLhDagOwner  ChangeLhDagOwnerRequest
  * @return ChangeLhDagOwnerResponse
 */
async function changeLhDagOwner(request: ChangeLhDagOwnerRequest): ChangeLhDagOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeLhDagOwner', 'POST', '/', 'json', false, 'json', request);
}

model CloseOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  closeReason: string(name='CloseReason', description='The reason why the ticket is closed.

This parameter is required.', example='close reason', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='1343', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model CloseOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CloseOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseOrder  CloseOrderRequest
  * @return CloseOrderResponse
 */
async function closeOrder(request: CloseOrderRequest): CloseOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAbacAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityType: string(name='IdentityType', description='This parameter is required.', example='USER', position='Query'),
  policyId: long(name='PolicyId', description='This parameter is required.', example='12****', position='Query'),
  roleId?: long(name='RoleId', example='31****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  userId?: long(name='UserId', example='51****', position='Query'),
}

model CreateAbacAuthorizationResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  result?: string(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CreateAbacAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAbacAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAbacAuthorization  CreateAbacAuthorizationRequest
  * @return CreateAbacAuthorizationResponse
 */
async function createAbacAuthorization(request: CreateAbacAuthorizationRequest): CreateAbacAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAbacAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model CreateAbacPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  abacPolicyContent: string(name='AbacPolicyContent', description='This parameter is required.', example='{
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "dms:DbType": [
            "redis"
          ]
        }
      }
    }
  ],
  "Version": "1"
}', position='Query'),
  abacPolicyDesc?: string(name='AbacPolicyDesc', example='test', position='Query'),
  abacPolicyName: string(name='AbacPolicyName', description='This parameter is required.', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateAbacPolicyResponseBody = {
  createPolicyResult?: long(name='CreatePolicyResult', example='12****'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model CreateAbacPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAbacPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAbacPolicy  CreateAbacPolicyRequest
  * @return CreateAbacPolicyResponse
 */
async function createAbacPolicy(request: CreateAbacPolicyRequest): CreateAbacPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAbacPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.', position='Query'),
  name: string(name='Name', description='The name of the permission template.

This parameter is required.', example='Test template.', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model CreateAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    createTime?: string(name='CreateTime', description='The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.', example='2023-01-11 14:17:33'),
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='Test template.'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***'),
}

model CreateAuthorityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorityTemplateResponseBody(name='body'),
}

/**
  * @description You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of CreateAuthorityTemplate  CreateAuthorityTemplateRequest
  * @return CreateAuthorityTemplateResponse
 */
async function createAuthorityTemplate(request: CreateAuthorityTemplateRequest): CreateAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataArchiveOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', description='The description of the task.

This parameter is required.', example='test', position='Query'),
  param: {
    archiveMethod: string(name='ArchiveMethod', description='The archiving destination to which you want to archive data. Valid values:

>  If you set ArchiveMethod to a value other than inner_oss, you must register the corresponding destination database with Data Management (DMS) before you create the data archiving ticket. After the database is registered with DMS, the database is displayed in the Instances Connected section of the DMS console.

*   **inner_oss**: dedicated storage, which is a built-in Object Storage Service (OSS) bucket.
*   **oss_userself**: OSS bucket of the user.
*   **mysql**: ApsaraDB RDS for MySQL instance.
*   **polardb**: PolarDB for MySQL cluster.
*   **adb_mysql**: AnalyticDB for MySQL V3.0 cluster.
*   **lindorm**: Lindorm instance.

This parameter is required.', example='mysql'),
    cronStr?: string(name='CronStr', description='A crontab expression that specifies the scheduling cycle of the data archiving task. For more information, see the [Crontab expressions](https://help.aliyun.com/document_detail/206581.html) section of the "Create shadow tables for synchronization" topic. You must specify this parameter if you set RunMethod to schedule.', example='00 05 11 * * ?'),
    databaseId?: string(name='DatabaseId', description='The database ID. If the database is a self-managed database or a third-party cloud database, you can call the [GetDatabase](https://help.aliyun.com/document_detail/465856.html) operation to query the database ID. If the database is an Alibaba Cloud database, ignore this parameter.', example='1***'),
    logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false'),
    orderAfter?: [ string ](name='OrderAfter', description='The post behaviors.'),
    runMethod: string(name='RunMethod', description='The method that is used to run the data archiving task. Valid values:

*   **schedule**: The data archiving task is periodically scheduled.
*   **now**: The data archiving task is immediately run.

This parameter is required.', example='now'),
    sourceCatalogName: string(name='SourceCatalogName', description='The catalog of the source database. Valid values:

*   **def**: Set this parameter to def if the source database is of the two-layer logical schema, such as a MySQL database, a PolarDB for MySQL cluster, or an AnalyticDB for MySQL instance.
*   **Empty string**: Set this parameter to an empty string if the source database is a Lindorm or ApsaraDB for MongoDB instance.
*   **Catalog name**: Set this parameter to the catalog name of the source database if the source database is of the three-layer logical schema, such as a PostgreSQL database.

This parameter is required.', example='def'),
    sourceInstanceName: string(name='SourceInstanceName', description='The name of the source instance. If the database instance is a self-managed database or a third-party cloud database, you can call the [GetInstance](https://help.aliyun.com/document_detail/465826.html) operation to query the instance ID.

This parameter is required.', example='pc-bp1*******'),
    sourceSchemaName: string(name='SourceSchemaName', description='The schema name of the source database. The schema name of the source database is the same as that of the destination database. If the source database is a MySQL database, this parameter specifies the name of the source database. If the source database is a PostgreSQL database, this parameter specifies the schema name of the source database.

This parameter is required.', example='schema_test'),
    tableIncludes: [ 
      {
        tableName: string(name='TableName', description='The table name.

This parameter is required.', example='table1'),
        tableWhere?: string(name='TableWhere', description='The filter condition that is specified by the WHERE clause of the archiving configuration. If a time variable is used in the filter condition, the filter condition is specified in the following format: field name <=\\"${variable name}\\". The variable name in the filter condition must be the same as the time variable name that is specified in the Variables parameter.', example='gmt_modified<\\"${time}\\"'),
      }
    ](name='TableIncludes', description='The collection of tables to be archived.

This parameter is required.'),
    tableMapping?: [ string ](name='TableMapping', description='The table names mapped to the destination database. This parameter is not required and the default value is used.'),
    targetInstanceHost: string(name='TargetInstanceHost', description='The host of the destination instance. If the destination instance can be accessed over an internal network or the Internet, preferentially set the value to the internal endpoint of the destination instance.

*   If data is archived in an OSS bucket, set the value to the name of the bucket.
*   If data is archived in dedicated storage space, set the value to inner_oss.

This parameter is required.', example='am-bp1*********.ads.aliyuncs.com'),
    variables?: [ 
      {
        name?: string(name='Name'),
        pattern?: string(name='Pattern'),
      }
    ](name='Variables', description='The configuration of archiving variables. You can use a time variable as a filter condition for archiving data. Each variable has two attributes: name and pattern.'),
  }(name='Param', description='The parameters for archiving data.

This parameter is required.', shrink='json', position='Query'),
  parentId?: long(name='ParentId', description='The ID of the parent ticket. A parent ticket is generated only when a child ticket is created.', example='123****', position='Query'),
  pluginType?: string(name='PluginType', description='The type of the plug-in. Default value: DATA_ARCHIVE.', example='DATA_ARCHIVE', position='Query'),
  relatedUserList?: [ string ](name='RelatedUserList', description='The list of the related users.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataArchiveOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the data archiving ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to query logs and troubleshoot issues.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model CreateDataArchiveOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataArchiveOrderResponseBody(name='body'),
}

/**
  * @description You can call this API operation only for database instances that are managed in Security Collaboration mode.
  * @param request  the request parameters of CreateDataArchiveOrder  CreateDataArchiveOrderRequest
  * @return CreateDataArchiveOrderResponse
 */
async function createDataArchiveOrder(request: CreateDataArchiveOrderRequest): CreateDataArchiveOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataArchiveOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataCorrectOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    attachmentName?: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to change data. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of AttachmentKey.

>  This parameter is required if you set **SqlType** to **ATTACHMENT**.', example='test.sql'),
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    dbItemList: [ 
      {
        dbId?: long(name='DbId', description='The database ID. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.', example='1860****'),
        instanceId?: long(name='InstanceId', description='The instance ID. You can call the ListInstances or GetInstance operation to query the instance ID.

> 
> The instance change feature is supported only by ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and AnalyticDB for MySQL clusters.', example='1860****'),
        logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      }
    ](name='DbItemList', description='The databases whose data you want to change.

This parameter is required.'),
    estimateAffectRows: long(name='EstimateAffectRows', description='The estimated number of data rows that may be affected by the data change.

This parameter is required.', example='1'),
    execMode?: string(name='ExecMode', description='The mode in which the data change ticket is executed after the ticket is approved. Valid values:

*   **COMMITOR**: The ticket is executed by the user who submits the ticket.
*   **AUTO**: The ticket is automatically executed after the ticket is approved.
*   **LAST_AUDITOR**: The ticket is executed by the last approver of the ticket.', example='COMMITOR'),
    execSQL?: string(name='ExecSQL', description='The SQL statements for data change.

> 

*   This parameter is required if you set **SqlType** to **TEXT**.

*   The size of the SQL statement cannot exceed 15 MB.', example='update base_user set id = 1 where id  = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data change. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of AttachmentKey.

>  This parameter is required if you set **RollbackSqlType** to **ATTACHMENT**.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements for rolling back the data change.

>  This parameter is required if you set **RollbackSqlType** to **TEXT**.', example='update base_user set id = 1 where id  = 1;'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**
*   **ATTACHMENT**', example='TEXT'),
    sqlType: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

*   **TEXT**
*   **ATTACHMENT**

This parameter is required.', example='TEXT'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The ID of the Alibaba Cloud account that is used to call the API operation.', example='21400447956867****', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The IDs of the tickets.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateDataCorrectOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataCorrectOrderResponseBody(name='body'),
}

/**
  * @description For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
  * @param request  the request parameters of CreateDataCorrectOrder  CreateDataCorrectOrderRequest
  * @return CreateDataCorrectOrderResponse
 */
async function createDataCorrectOrder(request: CreateDataCorrectOrderRequest): CreateDataCorrectOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataCorrectOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataCronClearOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment for the ticket. The attachment provides more instructions for this operation.

You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.', example='order_attachement.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the data change. This reduces unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    cronClearItemList: [ 
      {
        columnName: string(name='ColumnName', description='The name of the field.

This parameter is required.', example='gmt_create'),
        filterSQL?: string(name='FilterSQL', description='The filter conditions.', example='where 1 = 1'),
        remainDays: long(name='RemainDays', description='The retention period of the historical data. Unit: days. For example, if you set the parameter to 7, DMS deletes the data that is retained for more than seven days.

This parameter is required.', example='7'),
        tableName: string(name='TableName', description='The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the name of the table.

This parameter is required.', example='t1'),
        timeUnit?: string(name='TimeUnit', description='The type of time granularity. If the ColumnName parameter specifies a field of a time type, this parameter is required. Valid values:

*   **MILLISECONDS**: milliseconds
*   **SECONDS**: seconds', example='MILLISECONDS'),
      }
    ](name='CronClearItemList', description='The tables for which you want to clear historical data.

This parameter is required.'),
    cronFormat: string(name='CronFormat', description='The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](https://help.aliyun.com/document_detail/206581.html).

This parameter is required.', example='0 0 2 * * ?'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

This parameter is required.', example='1234'),
        logic: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.

This parameter is required.', example='false'),
      }
    ](name='DbItemList', description='The databases for which you want to clear historical data.

This parameter is required.'),
    durationHour?: long(name='DurationHour', description='The amount of time taken to run the task. Unit: hours.

>  If the **specifyDuration** parameter is set to **true**, this parameter is required.', example='4'),
    specifyDuration: boolean(name='specifyDuration', description='Specifies whether to specify an end time for the task. Valid values:

*   **true**: specifies an end time for the task. The task is automatically suspended after this end time.
*   **false**: does not specify an end time for the task. The task is stopped after the historical data is cleared.

This parameter is required.', example='true'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.', example='123454324', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataCronClearOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateDataCronClearOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataCronClearOrderResponseBody(name='body'),
}

/**
  * @description For more information about the historical data cleaning, see [Clear historical data](https://help.aliyun.com/document_detail/162507.html).
  * This operation can be used only for MySQL databases.
  * @param request  the request parameters of CreateDataCronClearOrder  CreateDataCronClearOrderRequest
  * @return CreateDataCronClearOrderResponse
 */
async function createDataCronClearOrder(request: CreateDataCronClearOrderRequest): CreateDataCronClearOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataCronClearOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataExportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.

This parameter is required.', example='business_test', position='Query'),
  parentId?: long(name='ParentId', description='The ID of the parent ticket.', example='877****', position='Query'),
  pluginParam: {
    affectRows: long(name='AffectRows', description='The estimated number of data rows to be affected.

This parameter is required.', example='1'),
    classify: string(name='Classify', description='The reason for the export ticket.

This parameter is required.', example='test'),
    dbId: long(name='DbId', description='The database ID.

This parameter is required.', example='18****'),
    exeSQL: string(name='ExeSQL', description='The SQL statements that can be executed.

This parameter is required.', example='SELECT * FROM DMS_test
 LIMIT 20;'),
    ignoreAffectRows: boolean(name='IgnoreAffectRows', description='Specifies whether to skip verification. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true'),
    ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', description='The reason for skipping verification. This parameter is required if you set IgnoreAffectRows to true.', example='Test only, does not affect the business, and does not require verification.'),
    instanceId: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='132****'),
    logic: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**
*   **false**

> If you set this parameter to **true**, the database that you specify must be a logical database.

This parameter is required.', example='true'),
    watermark?: {
      columnName?: string(name='ColumnName', description='The field into which the watermark is to be embedded.', example='user_number'),
      dataWatermark?: string(name='DataWatermark', description='The information to be embedded as a watermark into data.', example='test'),
      fileWatermark?: string(name='FileWatermark', description='The information to be embedded as a watermark into files.', example='test'),
      keys?: [ string ](name='Keys', description='One or more primary keys or unique keys.'),
      watermarkTypes?: [ string ](name='WatermarkTypes', description='The methods in which the watermark is embedded.'),
    }(name='Watermark', description='The information about the watermarks.'),
  }(name='PluginParam', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The UID of the Alibaba Cloud account that actually calls the API.', example='21400447956867****', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders involved in this operation.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='3***', position='Query'),
}

model CreateDataExportOrderResponseBody = {
  createOrderResult?: {
    createOrderResult?: [ long ](name='CreateOrderResult')
  }(name='CreateOrderResult', description='The content of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateDataExportOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataExportOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataExportOrder  CreateDataExportOrderRequest
  * @return CreateDataExportOrderResponse
 */
async function createDataExportOrder(request: CreateDataExportOrderRequest): CreateDataExportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataExportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataImportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    attachmentName: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to import data. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to the attachment key from the value of the AttachmentKey parameter.

This parameter is required.', example='order_text'),
    classify?: string(name='Classify', description='The reason for the data import.', example='test'),
    csvFirstRowIsColumnDef?: boolean(name='CsvFirstRowIsColumnDef', description='The type of the CSV file. Valid values:

*   **true**: The first row in the CSV file contains field names.
*   **false**: The first row in the CSV file contains data.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='true'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.

This parameter is required.', example='1860****'),
        logic: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

>  If you set this parameter to **true**, the database that you specify must be a logical database.

This parameter is required.', example='false'),
      }
    ](name='DbItemList', description='The database to which you want to import data. You can specify only one database.

This parameter is required.'),
    execMode?: string(name='ExecMode'),
    fileEncoding?: string(name='FileEncoding', description='The encoding algorithm to be used by the destination database. Valid values:

*   **AUTO**: automatic identification
*   **UTF-8**: UTF-8 encoding
*   **GBK**: GBK encoding
*   **ISO-8859-1**: ISO-8859-1 encoding', example='AUTO'),
    fileType: string(name='FileType', description='The format of the file for the data import. Valid values:

*   **SQL**: an SQL file
*   **CSV**: a CSV file

This parameter is required.', example='CSV'),
    ignoreError?: boolean(name='IgnoreError', description='Specifies whether to skip an error that occurs. Valid values:

*   **true**: skips the error and continues to execute SQL statements.
*   **false**: stops executing SQL statements.', example='false'),
    importMode?: string(name='ImportMode', description='The import mode. Valid values:

*   **FAST_MODE**: In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
*   **SAFE_MODE**: In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. This mode can be used to import data in a more secure but less efficient manner.', example='FAST_MODE'),
    insertType?: string(name='InsertType', description='The mode in which the data in the CSV format is to be written to the destination table. Valid values:

*   **INSERT**: The database checks the primary key when data is written. If a duplicate primary key value exists, an error message is returned.
*   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
*   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as one row in the destination table, the database deletes the existing row and inserts the new row into the destination table.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='INSERT'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data import. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.

>  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.', example='rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements used to roll back the data import.

>  This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data import. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='TEXT'),
    tableName?: string(name='TableName', description='The destination table to which you want to import the data in the CSV format.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='Table_text'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataImportOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateDataImportOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataImportOrderResponseBody(name='body'),
}

/**
  * @description For more information about the Large Data Import feature, see [Import data](https://help.aliyun.com/document_detail/161439.html).
  * @param request  the request parameters of CreateDataImportOrder  CreateDataImportOrderRequest
  * @return CreateDataImportOrderResponse
 */
async function createDataImportOrder(request: CreateDataImportOrderRequest): CreateDataImportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataImportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataLakeDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  location: string(name='Location', description='This parameter is required.', example='oss://path/to/database', position='Query'),
  parameters?: map[string]string(name='Parameters', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model CreateDataLakeDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D911009F-3E95-5AFD-8CF1-73F7B4F15D6E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataLakeDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataLakeDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataLakeDatabase  CreateDataLakeDatabaseRequest
  * @return CreateDataLakeDatabaseResponse
 */
async function createDataLakeDatabase(request: CreateDataLakeDatabaseRequest): CreateDataLakeDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataLakeDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataLakeFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  functionInput: DLFunctionInput(name='FunctionInput', description='This parameter is required.', shrink='json', position='Body'),
  tid?: long(name='Tid', example='3****', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='12****', position='Query'),
}

model CreateDataLakeFunctionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  function?: DLFunction(name='Function'),
  requestId?: string(name='RequestId', example='EE214ECD-4330-503A-82F0-FFB039757DC8'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataLakeFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataLakeFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataLakeFunction  CreateDataLakeFunctionRequest
  * @return CreateDataLakeFunctionResponse
 */
async function createDataLakeFunction(request: CreateDataLakeFunctionRequest): CreateDataLakeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataLakeFunction', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataLakePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  ifNotExists?: boolean(name='IfNotExists', example='true', position='Query'),
  needResult?: boolean(name='NeedResult', example='true', position='Query'),
  partitionInput: DLPartitionInput(name='PartitionInput', description='This parameter is required.', shrink='json', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model CreateDataLakePartitionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  partition?: DLPartition(name='Partition'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success'),
}

model CreateDataLakePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataLakePartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataLakePartition  CreateDataLakePartitionRequest
  * @return CreateDataLakePartitionResponse
 */
async function createDataLakePartition(request: CreateDataLakePartitionRequest): CreateDataLakePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataLakePartition', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataLakeTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  tableInput: OpenStructDLTableInput(name='TableInput', description='This parameter is required.', shrink='json', position='Body'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model CreateDataLakeTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
  table?: DLTable(name='Table'),
}

model CreateDataLakeTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataLakeTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataLakeTable  CreateDataLakeTableRequest
  * @return CreateDataLakeTableResponse
 */
async function createDataLakeTable(request: CreateDataLakeTableRequest): CreateDataLakeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataLakeTable', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataTrackOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', description='The purpose or objective of the data tracking ticket. This parameter is used to help reduce unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    dbId: string(name='DbId', description='The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

> You can call this operation to create a data tracking ticket for only physical databases. This operation is not applicable to logical databases.

This parameter is required.', example='123***'),
    jobEndTime: string(name='JobEndTime', description='The end time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.

This parameter is required.', example='2023-04-23 10:00:00'),
    jobStartTime: string(name='JobStartTime', description='The start time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.

This parameter is required.', example='2023-04-23 00:00:00'),
    tableNames: [ string ](name='TableNames', description='The names of the tables for which you want to track data operations.

This parameter is required.'),
    trackTypes: [ string ](name='TrackTypes', description='The types of data operations that you want to track.

This parameter is required.'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ string ](name='RelatedUserList', description='The IDs of the operators that are related to the ticket.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataTrackOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The IDs of the data tracking tickets.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateDataTrackOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataTrackOrderResponseBody(name='body'),
}

/**
  * @description This operation is available only for instances that are managed in Security Collaboration mode.
  * @param request  the request parameters of CreateDataTrackOrder  CreateDataTrackOrderRequest
  * @return CreateDataTrackOrderResponse
 */
async function createDataTrackOrder(request: CreateDataTrackOrderRequest): CreateDataTrackOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataTrackOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseExportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.

This parameter is required.', example='document_test', position='Query'),
  parentId?: long(name='ParentId', description='The ID of the parent ticket.', example='877****', position='Query'),
  pluginParam: {
    classify: string(name='Classify', description='The reason for the database export.

This parameter is required.', example='document_test'),
    config: {
      dataOption: [ string ](name='DataOption', description='The export options for big data. The options are used to filter the big data to be exported. You can leave this parameter empty.

This parameter is required.'),
      exportContent: string(name='ExportContent', description='The type of data that you want to export. Valid values:

*   **DATA**: The data of the database is exported.
*   **STRUCT**: The schema of the database is exported.
*   **DATA_STRUCT**: The data and schema of the database are exported.

This parameter is required.', example='DATA'),
      exportTypes?: [ string ](name='ExportTypes', description='The types of schemas that you want to export.'),
      SQLExtOption: [ string ](name='SQLExtOption', description='The extension options of the SQL script. You can leave this parameter empty.

This parameter is required.'),
      selectedTables?: [ string ](name='SelectedTables', description='The tables that you want to export.'),
      tables?: map[string]string(name='Tables', description='The conditions used to filter the tables to be exported.'),
      targetOption: string(name='TargetOption', description='The format in which the database is exported. Valid values:

*   **SQL**
*   **CSV**
*   **XLSX**

This parameter is required.', example='SQL'),
    }(name='Config', description='The configurations for database export.

This parameter is required.'),
    dbId: long(name='DbId', description='The database ID.

This parameter is required.', example='17****'),
    instanceId: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='137****'),
    logic: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true'),
    searchName: string(name='SearchName', description='The name that is used to search for the database.

This parameter is required.', example='test@xxx.xxx.xxx.xxx:3306'),
  }(name='PluginParam', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders involved in this operation.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='3***', position='Query'),
}

model CreateDatabaseExportOrderResponseBody = {
  createOrderResult?: {
    createOrderResult?: [ long ](name='CreateOrderResult')
  }(name='CreateOrderResult', description='The information about the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateDatabaseExportOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatabaseExportOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatabaseExportOrder  CreateDatabaseExportOrderRequest
  * @return CreateDatabaseExportOrderResponse
 */
async function createDatabaseExportOrder(request: CreateDatabaseExportOrderRequest): CreateDatabaseExportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabaseExportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDifyInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  adbpgInstanceMode?: string(name='AdbpgInstanceMode', position='Query'),
  backupVSwitchId?: string(name='BackupVSwitchId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', position='Query'),
  databaseOption?: string(name='DatabaseOption', position='Query'),
  dbEngineType?: string(name='DbEngineType', position='Query'),
  dbEngineVersion?: string(name='DbEngineVersion', position='Query'),
  dbInstanceAccount?: string(name='DbInstanceAccount', position='Query'),
  dbInstanceCategory?: string(name='DbInstanceCategory', position='Query'),
  dbInstanceClass?: string(name='DbInstanceClass', position='Query'),
  dbInstancePassword?: string(name='DbInstancePassword', position='Query'),
  dbResourceId?: int32(name='DbResourceId', position='Query'),
  dbStorageSize?: string(name='DbStorageSize', position='Query'),
  dbStorageType?: string(name='DbStorageType', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  edition?: string(name='Edition', example='Community', position='Query'),
  enableExtraEndpoint?: boolean(name='EnableExtraEndpoint', position='Query'),
  gpuNodeSpec?: string(name='GpuNodeSpec', position='Query'),
  kvStoreAccount?: string(name='KvStoreAccount', position='Query'),
  kvStoreEngineVersion?: string(name='KvStoreEngineVersion', position='Query'),
  kvStoreInstanceClass?: string(name='KvStoreInstanceClass', position='Query'),
  kvStoreNodeType?: string(name='KvStoreNodeType', position='Query'),
  kvStoreOption?: string(name='KvStoreOption', position='Query'),
  kvStorePassword?: string(name='KvStorePassword', position='Query'),
  kvStoreResourceId?: int32(name='KvStoreResourceId', position='Query'),
  kvStoreType?: string(name='KvStoreType', position='Query'),
  majorVersion?: string(name='MajorVersion', position='Query'),
  modelId?: string(name='ModelId', position='Query'),
  modelOption?: string(name='ModelOption', example='Disable', position='Query'),
  natGatewayOption?: string(name='NatGatewayOption', position='Query'),
  ossPath?: string(name='OssPath', position='Query'),
  ossResourceId?: int32(name='OssResourceId', position='Query'),
  payPeriod?: int32(name='PayPeriod', position='Query'),
  payPeriodType?: string(name='PayPeriodType', position='Query'),
  payType?: string(name='PayType', position='Query'),
  replicas?: int32(name='Replicas', position='Query'),
  resourceQuota: string(name='ResourceQuota', description='This parameter is required.', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='This parameter is required.', position='Query'),
  segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', position='Query'),
  segNodeNum?: int32(name='SegNodeNum', position='Query'),
  storageType?: string(name='StorageType', position='Query'),
  vSwitchId: string(name='VSwitchId', description='This parameter is required.', position='Query'),
  vectordbAccount?: string(name='VectordbAccount', position='Query'),
  vectordbCategory?: string(name='VectordbCategory', position='Query'),
  vectordbEngineVersion?: string(name='VectordbEngineVersion', position='Query'),
  vectordbInstanceSpec?: string(name='VectordbInstanceSpec', position='Query'),
  vectordbOption?: string(name='VectordbOption', position='Query'),
  vectordbPassword?: string(name='VectordbPassword', position='Query'),
  vectordbResourceId?: int32(name='VectordbResourceId', position='Query'),
  vectordbStorageSize?: string(name='VectordbStorageSize', position='Query'),
  vectordbStorageType?: string(name='VectordbStorageType', position='Query'),
  vectordbType?: string(name='VectordbType', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', position='Query'),
  workspaceDescription?: string(name='WorkspaceDescription', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
  workspaceName?: string(name='WorkspaceName', position='Query'),
  workspaceOption?: string(name='WorkspaceOption', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', position='Query'),
}

model CreateDifyInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    replicas?: int32(name='Replicas'),
    resourceQuota?: string(name='ResourceQuota'),
    securityGroupId?: string(name='SecurityGroupId'),
    status?: string(name='Status'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
    workspaceId?: string(name='WorkspaceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDifyInstanceResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of CreateDifyInstance  CreateDifyInstanceRequest
  * @return CreateDifyInstanceResponse
 */
async function createDifyInstance(request: CreateDifyInstanceRequest): CreateDifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateFreeLockCorrectOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    attachmentName?: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to change data. This parameter is not supported.', example='test.sql'),
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.

This parameter is required.', example='1860****'),
        logic: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

This parameter is required.', example='false'),
      }
    ](name='DbItemList', description='The databases in which you want to change data.

This parameter is required.'),
    execMode?: string(name='ExecMode', description='The execution mode of the ticket after the ticket is approved. Valid values:

*   **COMMITOR**: The data change is performed by the user who submits the ticket.
*   **AUTO**: The data change is automatically performed after the ticket is approved.
*   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='COMMITOR'),
    execSQL: string(name='ExecSQL', description='The SQL statements that you want to execute to change data.

This parameter is required.', example='delete from base_user where 1 = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data change.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements used to roll back the data change.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment. This value is not supported.', example='TEXT'),
    sqlType: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment. This value is not supported.

This parameter is required.', example='TEXT'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateFreeLockCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateFreeLockCorrectOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFreeLockCorrectOrderResponseBody(name='body'),
}

/**
  * @description For more information about the lock-free change feature, see [Overview](https://help.aliyun.com/document_detail/207847.html).
  * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](https://help.aliyun.com/document_detail/96145.html) and [Change schemas without locking tables](https://help.aliyun.com/document_detail/98373.html).
  * @param request  the request parameters of CreateFreeLockCorrectOrder  CreateFreeLockCorrectOrderRequest
  * @return CreateFreeLockCorrectOrderResponse
 */
async function createFreeLockCorrectOrder(request: CreateFreeLockCorrectOrderRequest): CreateFreeLockCorrectOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFreeLockCorrectOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateLakeHouseSpaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the workspace.', example='test', position='Query'),
  devDbId: string(name='DevDbId', description='The ID of the development database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.

This parameter is required.', example='2435****', position='Query'),
  dwDbType: string(name='DwDbType', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL

This parameter is required.', example='14', position='Query'),
  mode: string(name='Mode', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode. This mode is unavailable.
*   **1**: standard mode.

This parameter is required.', example='1', position='Query'),
  prodDbId?: string(name='ProdDbId', description='The ID of the production database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.', example='2442****', position='Query'),
  spaceConfig: string(name='SpaceConfig', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.

This parameter is required.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}', position='Query'),
  spaceName: string(name='SpaceName', description='The name of the workspace.

This parameter is required.', example='test_space', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='Invalid parameters: space name,mode,prod db id,db type,config.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='24'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateLakeHouseSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLakeHouseSpaceResponseBody(name='body'),
}

/**
  * @description *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
  * *   You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
  * @param request  the request parameters of CreateLakeHouseSpace  CreateLakeHouseSpaceRequest
  * @return CreateLakeHouseSpaceResponse
 */
async function createLakeHouseSpace(request: CreateLakeHouseSpaceRequest): CreateLakeHouseSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLakeHouseSpace', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  alias: string(name='Alias', description='The alias of the logical database.

This parameter is required.', example='test_logic_db', position='Query'),
  databaseIds: [ long ](name='DatabaseIds', description='The IDs of the physical databases that compose the logical database. You can specify one or more database IDs. You can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the physical databases.

This parameter is required.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicDbId?: long(name='LogicDbId', description='The ID of the logical database.', example='1***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model CreateLogicDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogicDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLogicDatabase  CreateLogicDatabaseRequest
  * @return CreateLogicDatabaseResponse
 */
async function createLogicDatabase(request: CreateLogicDatabaseRequest): CreateLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateMetaCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  name: string(name='Name', description='This parameter is required.', example='default', position='Query'),
  parentCategoryId?: long(name='ParentCategoryId', example='30000322682', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateMetaCategoryResponseBody = {
  category?: MetaCategory(name='Category'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='207176D7-A9B3-55CE-A9DA-14E223A31913'),
  success?: boolean(name='Success', example='true'),
}

model CreateMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMetaCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMetaCategory  CreateMetaCategoryRequest
  * @return CreateMetaCategoryResponse
 */
async function createMetaCategory(request: CreateMetaCategoryRequest): CreateMetaCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMetaCategory', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.', example='test_AttachmentKey', position='Query'),
  comment: string(name='Comment', description='The description of the ticket to be created.

This parameter is required.', example='test', position='Query'),
  pluginParam: map[string]any(name='PluginParam', description='The ticket creation parameter. The value is a JSON string. The value of this parameter differs based on the type of the ticket. For more information, see the **PluginParam parameter** section in this topic.

This parameter is required.', example='{PluginParam_test}', shrink='json', position='Body'),
  pluginType: string(name='PluginType', description='The type of the ticket. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).

This parameter is required.', example='DATA_EXPORT', position='Query'),
  relatedUserList?: string(name='RelatedUserList', description='The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).', example='user1,user2', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model CreateOrderResponseBody = {
  createOrderResult?: {
    orderIds?: [ long ](name='OrderIds')
  }(name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderResponseBody(name='body'),
}

/**
  * @description To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
  * *   [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html): creates a regular data change ticket.
  * *   [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html): creates a ticket to clear historical data.
  * *   [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html): creates a data import ticket.
  * *   [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html): creates a lock-free change ticket.
  * @param request  the request parameters of CreateOrder  CreateOrderRequest
  * @return CreateOrderResponse
 */
async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrder', 'POST', '/', 'json', true, 'form', request);
}

model CreateProcCorrectOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='This parameter is required.', example='test', position='Query'),
  param: {
    classify?: string(name='Classify', example='test'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='This parameter is required.', example='19721978'),
        logic: boolean(name='Logic', description='This parameter is required.', example='false'),
      }
    ](name='DbItemList', description='This parameter is required.'),
    execMode?: string(name='ExecMode'),
    execSQL: string(name='ExecSQL', description='This parameter is required.', example='DELIMITER ///
CREATE PROCEDURE GetAllProducts()
BEGIN
SELECT *  FROM base_user;
END ///'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', example='TEXT'),
  }(name='Param', description='This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', shrink='json', position='Query'),
  tid?: long(name='Tid', example='4***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateProcCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model CreateProcCorrectOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProcCorrectOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProcCorrectOrder  CreateProcCorrectOrderRequest
  * @return CreateProcCorrectOrderResponse
 */
async function createProcCorrectOrder(request: CreateProcCorrectOrderRequest): CreateProcCorrectOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProcCorrectOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: long(name='InstanceId', description='The ID of the database instance. You can call the [ListInstances](https://www.alibabacloud.com/help/en/data-management-service/latest/listinstances) or [GetInstance](https://www.alibabacloud.com/help/en/data-management-service/latest/getinstance) operation to query the database instance ID.

This parameter is required.', example='183****', position='Query'),
  password: string(name='Password', description='The password of the database account.

This parameter is required.', example='******', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  username: string(name='Username', description='The username of the database account.

This parameter is required.', example='username', position='Query'),
}

model CreateProxyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='the instance proxy already exists.'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FFD154E-F57F-5374-B568-D6276F15****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model CreateProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProxyResponseBody(name='body'),
}

/**
  * @description - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
  * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
  * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
  * @param request  the request parameters of CreateProxy  CreateProxyRequest
  * @return CreateProxyResponse
 */
async function createProxy(request: CreateProxyRequest): CreateProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProxy', 'POST', '/', 'json', false, 'json', request);
}

model CreateProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  indepAccount?: string(name='IndepAccount', description='The database account.', example='xxx', position='Query'),
  indepPassword?: string(name='IndepPassword', description='The password that is used to log on to the database.', example='xxx', position='Query'),
  proxyId: long(name='ProxyId', description='The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  userId: long(name='UserId', description='The ID of the user. You can call the [ListUsers](https://www.alibabacloud.com/help/en/data-management-service/latest/listusers) or [GetUser](https://www.alibabacloud.com/help/en/data-management-service/latest/getuser) operation to obtain this parameter.

This parameter is required.', example='1', position='Query'),
}

model CreateProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  proxyAccessId?: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateProxyAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProxyAccessResponseBody(name='body'),
}

/**
  * @description - The data security protection feature is enabled for the instance.
  * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
  * @param request  the request parameters of CreateProxyAccess  CreateProxyAccessRequest
  * @return CreateProxyAccessResponse
 */
async function createProxyAccess(request: CreateProxyAccessRequest): CreateProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model CreatePublishGroupTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='The ID of the database for which the schema design is executed.

This parameter is required.', example='12345', position='Query'),
  logic: boolean(name='Logic', description='Indicates whether the database is a logical database.

This parameter is required.', example='false', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.

> : You can create a schema design ticket in the DMS console. For more information, see [Design schemas](https://help.aliyun.com/document_detail/69711.html). You can also create a schema design ticket by calling the [CreateOrder](https://help.aliyun.com/document_detail/144649.html) operation and obtain the ticket ID.

This parameter is required.', example='142435', position='Query'),
  planTime?: string(name='PlanTime', description='The time to execute the schema design ticket.', example='2019-10-10 00:00:00', position='Query'),
  publishStrategy: string(name='PublishStrategy', description='The policy to execute the schema design ticket. Valid values:

*   IMMEDIATELY: immediately executes the schema design ticket.
*   REGULARLY: executes the schema design ticket at a scheduled time.

This parameter is required.', example='IMMEDIATELY', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model CreatePublishGroupTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  taskId?: long(name='TaskId', description='The ID of the job.', example='413452'),
}

model CreatePublishGroupTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePublishGroupTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePublishGroupTask  CreatePublishGroupTaskRequest
  * @return CreatePublishGroupTaskResponse
 */
async function createPublishGroupTask(request: CreatePublishGroupTaskRequest): CreatePublishGroupTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublishGroupTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSQLReviewOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', description='The purpose or objective of the SQL review. This reduces unnecessary communication.

This parameter is required.', example='test', position='Query'),
  param: {
    attachmentKeyList: [ string ](name='AttachmentKeyList', description='The files to be reviewed. Multiple files can be reviewed at a time.

This parameter is required.'),
    dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

>  You can call this operation to query only physical databases. This operation is unavailable to query logical databases.

This parameter is required.', example='123321'),
    projectName: string(name='ProjectName', description='The name of the project.

This parameter is required.', example='SQL review for xxx'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders involved in this operation. All the specified stakeholders can view the ticket details and take part in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateSQLReviewOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The result of the ticket creation task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateSQLReviewOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSQLReviewOrderResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances that are managed in Security Collaboration mode.
  * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
  * @param request  the request parameters of CreateSQLReviewOrder  CreateSQLReviewOrderRequest
  * @return CreateSQLReviewOrderResponse
 */
async function createSQLReviewOrder(request: CreateSQLReviewOrderRequest): CreateSQLReviewOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSQLReviewOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the business scenario.', example='test', position='Query'),
  scenarioName: string(name='ScenarioName', description='The name of the business scenario.

This parameter is required.', example='Business scenario - test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='36***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScenarioResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScenario  CreateScenarioRequest
  * @return CreateScenarioResponse
 */
async function createScenario(request: CreateScenarioRequest): CreateScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScenario', 'POST', '/', 'json', false, 'json', request);
}

model CreateStandardGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).

This parameter is required.', example='mysql', position='Query'),
  description: string(name='Description', description='The description of the security rule set.

This parameter is required.', example='test_rule', position='Query'),
  groupName: string(name='GroupName', description='The name of the security rule set.

This parameter is required.', example='test_group', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroup?: {
    dbType?: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='mysql'),
    description?: string(name='Description', description='The description of the security rule set.', example='test_rule'),
    groupId?: long(name='GroupId', description='The security rule set ID.', example='41****'),
    groupMode?: string(name='GroupMode', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', example='COMMON'),
    groupName?: string(name='GroupName', description='The name of the security rule set.', example='test_group'),
    lastMenderId?: long(name='LastMenderId', description='The ID of the user who creates the security rule set.', example='51****'),
  }(name='StandardGroup', description='The information about the created security rule set.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateStandardGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStandardGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateStandardGroup  CreateStandardGroupRequest
  * @return CreateStandardGroupResponse
 */
async function createStandardGroup(request: CreateStandardGroupRequest): CreateStandardGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStandardGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateStructSyncOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql', position='Query'),
  comment: string(name='Comment', description='The remarks of the ticket.

This parameter is required.', example='test', position='Query'),
  param: {
    ignoreError?: boolean(name='IgnoreError', description='Specifies whether to skip an error that occurs in executing an SQL statement. Valid values:

*   **true**: continues to execute subsequent SQL statements if an error occurs in executing an SQL statement.
*   **false**: stops executing subsequent SQL statements if an error occurs in executing an SQL statement.', example='false'),
    source: {
      dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

This parameter is required.', example='4324532'),
      dbSearchName: string(name='DbSearchName', description='The name that is used to search for the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.

This parameter is required.', example='test'),
      logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      versionId?: string(name='VersionId', description='The version number of the schema. The default value is the latest schema version number. For more information, see [Manage schema versions](https://help.aliyun.com/document_detail/202275.html).', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Source', description='The information about the base database.

This parameter is required.'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', description='The name of the source table.', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', description='The name of the destination table.', example='test_tbl'),
      }
    ](name='TableInfoList', description='The information about the table of which you want to synchronize the schema.'),
    target: {
      dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

This parameter is required.', example='432432'),
      dbSearchName: string(name='DbSearchName', description='The name that is used to search for the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.

This parameter is required.', example='test'),
      logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      versionId?: string(name='VersionId', description='The version number. By default, this parameter is left empty.

>  If you specify the schema version number of the destination database, Data Management (DMS) only compares the schemas of the two databases.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Target', description='The information about the database to which you want to synchronize the schema of a table.

This parameter is required.'),
  }(name='Param', description='The parameters of the ticket.

This parameter is required.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The IDs of the stakeholders.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateStructSyncOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The result of creating the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateStructSyncOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStructSyncOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateStructSyncOrder  CreateStructSyncOrderRequest
  * @return CreateStructSyncOrderResponse
 */
async function createStructSyncOrder(request: CreateStructSyncOrderRequest): CreateStructSyncOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStructSyncOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='test', position='Query'),
  nodeContent?: string(name='NodeContent', description='The configuration of the node.', example='test', position='Query'),
  nodeName: string(name='NodeName', description='The name of the node that you want to create.

This parameter is required.', example='zhttest', position='Query'),
  nodeOutput?: string(name='NodeOutput', description='The output variables configured for the task.', example='test', position='Query'),
  nodeType: string(name='NodeType', description='The type of the node that you want to create. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).

This parameter is required.', example='36', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.', example='test', position='Query'),
}

model CreateTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='InvalidParameterValid'),
  nodeId?: long(name='NodeId', description='The ID of the task node returned when the task was created.', example='3***'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTask  CreateTaskRequest
  * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagName: string(name='DagName', description='The name of the task flow.

This parameter is required.', example='Dag_Name', position='Query'),
  description?: string(name='Description', description='The description of the task flow.', example='zht_test', position='Query'),
  scenarioId?: long(name='ScenarioId', description='The ID of the scenario.', example='2**', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateTaskFlowResponseBody = {
  dagId?: long(name='DagId', description='The ID of the task flow.', example='33***'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='User can not access to Tenant [1]'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='19DA51A9-AC3E-5C36-8351-07EBCD2B89A1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTaskFlow  CreateTaskFlowRequest
  * @return CreateTaskFlowResponse
 */
async function createTaskFlow(request: CreateTaskFlowRequest): CreateTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', description='The name of the attachment file.

>  The file name must end with .txt or .sql. For example, the file name can be test.txt or test.sql.

This parameter is required.', example='test.txt', position='Query'),
  fileSource: string(name='FileSource', description='The purpose of the attachment file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.

This parameter is required.', example='datacorrect', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  uploadURL: string(name='UploadURL', description='The URL of the attachment file. The URL must be an HTTP URL or an HTTPS URL.

>  You can upload the attachment file to an Object Storage Service (OSS) bucket and obtain the URL of the file in the OSS console. For more information, see [Share objects](https://help.aliyun.com/document_detail/195674.html).

This parameter is required.', example='https://XXX.oss-cn-hangzhou.aliyuncs.com/test.txt', position='Query'),
}

model CreateUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Unsupported url scheme : null, scheme must be https or http'),
  jobKey?: string(name='JobKey', description='The key of the task.

>  You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the progress and details of the task.', example='761f18031635736380812****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E103C5F9-DE47-53F2-BF34-D71DF38F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateUploadFileJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadFileJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUploadFileJob  CreateUploadFileJobRequest
  * @return CreateUploadFileJobResponse
 */
async function createUploadFileJob(request: CreateUploadFileJobRequest): CreateUploadFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadFileJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadOSSFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', description='The name of the file.

> The file name must end with .txt or .sql. For example, the file name can be text.txt.

This parameter is required.', example='test.sql', position='Query'),
  fileSource: string(name='FileSource', description='The purpose of the file upload task. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.

This parameter is required.', example='datacorrect', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
  uploadTarget: {
    bucketName: string(name='BucketName', description='The name of the OSS bucket.

This parameter is required.', example='test_bucket'),
    endpoint: string(name='Endpoint', description='The endpoint of the OSS bucket.

This parameter is required.', example='http://oss-cn-hangzhou.aliyuncs.com'),
    objectName: string(name='ObjectName', description='The name of the OSS object.

This parameter is required.', example='test.sql'),
  }(name='UploadTarget', description='The information about the OSS file to be uploaded.

This parameter is required.', shrink='json', position='Query'),
}

model CreateUploadOSSFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  jobKey?: string(name='JobKey', description='The key of the file upload task. You can query the upload progress and task details. For more information, see [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html).', example='65254a4c1614235217749100e'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateUploadOSSFileJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUploadOSSFileJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUploadOSSFileJob  CreateUploadOSSFileJobRequest
  * @return CreateUploadOSSFileJobResponse
 */
async function createUploadOSSFileJob(request: CreateUploadOSSFileJobRequest): CreateUploadOSSFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadOSSFileJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateWorkspaceRequest {
  clientToken?: string(name='ClientToken', example='token-xxx', position='Body'),
  description: string(name='Description', description='This parameter is required.', example='Test', minLength=1, position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-xxx', position='Query'),
  workspaceName: string(name='WorkspaceName', description='This parameter is required.', example='workspace_xxx', minLength=1, position='Query'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='4AC23904-55DE-550B-9676-E8946F07****'),
  success?: boolean(name='Success', example='true'),
  workspaceId?: long(name='WorkspaceId', example='12****'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspace  CreateWorkspaceRequest
  * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWorkspace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAbacAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  authorizationId: long(name='AuthorizationId', description='This parameter is required.', example='123***', position='Query'),
  identityType: string(name='IdentityType', description='This parameter is required.', example='USER', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteAbacAuthorizationResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='207176D7-A9B3-55CE-A9DA-14E223A31913'),
  result?: string(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAbacAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAbacAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAbacAuthorization  DeleteAbacAuthorizationRequest
  * @return DeleteAbacAuthorizationResponse
 */
async function deleteAbacAuthorization(request: DeleteAbacAuthorizationRequest): DeleteAbacAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAbacAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAbacPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  abacPolicyId: long(name='AbacPolicyId', description='This parameter is required.', example='12****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteAbacPolicyResponseBody = {
  deletePolicyResult?: boolean(name='DeletePolicyResult', example='true'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAbacPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAbacPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAbacPolicy  DeleteAbacPolicyRequest
  * @return DeleteAbacPolicyResponse
 */
async function deleteAbacPolicy(request: DeleteAbacPolicyRequest): DeleteAbacPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAbacPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='This parameter is required.', example='2592', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model DeleteAuthorityTemplateResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  tid?: long(name='Tid', example='3***'),
}

model DeleteAuthorityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAuthorityTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAuthorityTemplate  DeleteAuthorityTemplateRequest
  * @return DeleteAuthorityTemplateResponse
 */
async function deleteAuthorityTemplate(request: DeleteAuthorityTemplateRequest): DeleteAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLakeDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model DeleteDataLakeDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLakeDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLakeDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataLakeDatabase  DeleteDataLakeDatabaseRequest
  * @return DeleteDataLakeDatabaseResponse
 */
async function deleteDataLakeDatabase(request: DeleteDataLakeDatabaseRequest): DeleteDataLakeDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLakeDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLakeFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  functionName: string(name='FunctionName', description='This parameter is required.', example='my_funciton', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='12****', position='Query'),
}

model DeleteDataLakeFunctionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLakeFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLakeFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataLakeFunction  DeleteDataLakeFunctionRequest
  * @return DeleteDataLakeFunctionResponse
 */
async function deleteDataLakeFunction(request: DeleteDataLakeFunctionRequest): DeleteDataLakeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLakeFunction', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLakePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  ifExists?: boolean(name='IfExists', example='true', position='Query'),
  partitionValues: [ string ](name='PartitionValues', description='This parameter is required.', shrink='simple', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_name', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model DeleteDataLakePartitionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLakePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLakePartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataLakePartition  DeleteDataLakePartitionRequest
  * @return DeleteDataLakePartitionResponse
 */
async function deleteDataLakePartition(request: DeleteDataLakePartitionRequest): DeleteDataLakePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLakePartition', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLakeTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model DeleteDataLakeTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='8E88933E-E3D4-5BA8-8CBF-0A1CAE666690'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLakeTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLakeTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataLakeTable  DeleteDataLakeTableRequest
  * @return DeleteDataLakeTableResponse
 */
async function deleteDataLakeTable(request: DeleteDataLakeTableRequest): DeleteDataLakeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLakeTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The endpoint of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the endpoint.

This parameter is required.', example='xxx.mysql.rds.aliyuncs.com', position='Query'),
  port: int32(name='Port', description='The port number that is used to connect to the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the port number.

This parameter is required.', example='3306', position='Query'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the SID.', example='testSid', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model DeleteInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLakeHouseSpaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceId: long(name='SpaceId', description='The ID of the workspace. You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.

This parameter is required.', example='24', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model DeleteLakeHouseSpaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLakeHouseSpaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLakeHouseSpace  DeleteLakeHouseSpaceRequest
  * @return DeleteLakeHouseSpaceResponse
 */
async function deleteLakeHouseSpace(request: DeleteLakeHouseSpaceRequest): DeleteLakeHouseSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLakeHouseSpace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLhMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  memberIds: [ int32 ](name='MemberIds', description='The ID of the user to be removed. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.

This parameter is required.', shrink='json', position='Query'),
  objectId: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.

This parameter is required.', example='9***', position='Query'),
  objectType: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1C78D32-1AFD-58AD-9DD2-C8A0896969DD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DeleteLhMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLhMembersResponseBody(name='body'),
}

/**
  * @description You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
  * @param request  the request parameters of DeleteLhMembers  DeleteLhMembersRequest
  * @return DeleteLhMembersResponse
 */
async function deleteLhMembers(request: DeleteLhMembersRequest): DeleteLhMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLhMembers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  logicDbId: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the ID of the logical database.

This parameter is required.', example='1***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model DeleteLogicDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLogicDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLogicDatabase  DeleteLogicDatabaseRequest
  * @return DeleteLogicDatabaseResponse
 */
async function deleteLogicDatabase(request: DeleteLogicDatabaseRequest): DeleteLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  routeKey: string(name='RouteKey', description='The unique key of the routing algorithm. You can call the [ListLogicTableRouteConfig](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictablerouteconfig) operation to query the unique key.

This parameter is required.', example='id-hash-mod15', position='Query'),
  tableId: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.

This parameter is required.', example='1****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingRouteKey'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='RouteKey is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A916A004-A88C-5B39-ABDB-DE808E80****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model DeleteLogicTableRouteConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLogicTableRouteConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLogicTableRouteConfig  DeleteLogicTableRouteConfigRequest
  * @return DeleteLogicTableRouteConfigResponse
 */
async function deleteLogicTableRouteConfig(request: DeleteLogicTableRouteConfigRequest): DeleteLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetaCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId: long(name='CategoryId', description='This parameter is required.', example='30000235594', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteMetaCategoryResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMetaCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMetaCategory  DeleteMetaCategoryRequest
  * @return DeleteMetaCategoryResponse
 */
async function deleteMetaCategory(request: DeleteMetaCategoryRequest): DeleteMetaCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetaCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', description='The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteProxyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProxyResponseBody(name='body'),
}

/**
  * @description After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
  * @param request  the request parameters of DeleteProxy  DeleteProxyRequest
  * @return DeleteProxyResponse
 */
async function deleteProxy(request: DeleteProxyRequest): DeleteProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProxy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteProxyAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProxyAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProxyAccess  DeleteProxyAccessRequest
  * @return DeleteProxyAccessResponse
 */
async function deleteProxyAccess(request: DeleteProxyAccessRequest): DeleteProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  scenarioId: long(name='ScenarioId', description='The ID of the business scenario.

This parameter is required.', example='12***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenarioResponseBody(name='body'),
}

/**
  * @description When you call this operation, make sure that no task flow is specified in the business scenario.
  * @param request  the request parameters of DeleteScenario  DeleteScenarioRequest
  * @return DeleteScenarioResponse
 */
async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScenario', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStandardGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: long(name='GroupId', description='This parameter is required.', example='242***', position='Query'),
  tid?: long(name='Tid', example='23****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', example='true'),
}

model DeleteStandardGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStandardGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteStandardGroup  DeleteStandardGroupRequest
  * @return DeleteStandardGroupResponse
 */
async function deleteStandardGroup(request: DeleteStandardGroupRequest): DeleteStandardGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStandardGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The ID of the node you want to delete.

This parameter is required.', example='54****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3B460770-40D9-5F07-B68A-173D1D708B72'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTask  DeleteTaskRequest
  * @return DeleteTaskResponse
 */
async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.

This parameter is required.', example='134137***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9AFE13F6-A4FD-581B-BFDE-B63B1CDC2336'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DeleteTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTaskFlow  DeleteTaskFlowRequest
  * @return DeleteTaskFlowResponse
 */
async function deleteTaskFlow(request: DeleteTaskFlowRequest): DeleteTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskFlowEdgesByConditionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15****', position='Query'),
  id?: long(name='Id', description='The ID of the task flow edge to delete.', example='24***', position='Query'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the end node of the edge to delete.', example='44***', position='Query'),
  nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge to delete.', example='44***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskFlowEdgesByConditionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='21234B66-6859-5558-9E5B-006EFE915CD0'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteTaskFlowEdgesByConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * @description This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
  * @param request  the request parameters of DeleteTaskFlowEdgesByCondition  DeleteTaskFlowEdgesByConditionRequest
  * @return DeleteTaskFlowEdgesByConditionResponse
 */
async function deleteTaskFlowEdgesByCondition(request: DeleteTaskFlowEdgesByConditionRequest): DeleteTaskFlowEdgesByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTaskFlowEdgesByCondition', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='-1', position='Query'),
  uid: string(name='Uid', description='The unique ID (UID) of Alibaba Cloud account to delete.

This parameter is required.', example='12345', position='Query'),
}

model DeleteUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified user not exists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

/**
  * @description The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWorkspaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  workspaceId: long(name='WorkspaceId', description='This parameter is required.', example='12****', position='Query'),
}

model DeleteWorkspaceResponseBody = {
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspace  DeleteWorkspaceRequest
  * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDifyAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  appUuid?: string(name='AppUuid', example='92748163-af62-4ca4-ad85-1****', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Query'),
  dataRegion?: string(name='DataRegion', example='cn-hangzhou', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='339170706****', position='Query'),
}

model DescribeDifyAttributeResponseBody = {
  code?: string(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  root?: {
    appUuid?: string(name='AppUuid', example='92748163-af62-4ca4-ad85-1****'),
    replicas?: string(name='Replicas', example='1'),
    resourceQuota?: string(name='ResourceQuota', example='4CU'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-bp1ik7t5d5f24b****'),
    status?: string(name='Status', example='DEPLOYED'),
    vSwitchId?: string(name='VSwitchId', example='vsw-bp1tzpv5jfsuoqy****'),
    vpcId?: string(name='VpcId', example='vpc-bp1n16nsg8z1kn6****'),
    workspaceId?: string(name='WorkspaceId', example='339170706****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
  }(name='Root'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDifyAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDifyAttributeResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of DescribeDifyAttribute  DescribeDifyAttributeRequest
  * @return DescribeDifyAttributeResponse
 */
async function describeDifyAttribute(request: DescribeDifyAttributeRequest): DescribeDifyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDifyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDifyDefaultVpcRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion?: string(name='DataRegion', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model DescribeDifyDefaultVpcResponseBody = {
  code?: string(name='Code'),
  data?: {
    defaultVpcId?: string(name='DefaultVpcId'),
    workspaceId?: string(name='WorkspaceId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDifyDefaultVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDifyDefaultVpcResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of DescribeDifyDefaultVpc  DescribeDifyDefaultVpcRequest
  * @return DescribeDifyDefaultVpcResponse
 */
async function describeDifyDefaultVpc(request: DescribeDifyDefaultVpcRequest): DescribeDifyDefaultVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDifyDefaultVpc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDifyEditionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion?: string(name='DataRegion', position='Query'),
}

model DescribeDifyEditionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    community?: [ string ](name='Community'),
    enterprise?: [ string ](name='Enterprise'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDifyEditionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDifyEditionsResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of DescribeDifyEditions  DescribeDifyEditionsRequest
  * @return DescribeDifyEditionsResponse
 */
async function describeDifyEditions(request: DescribeDifyEditionsRequest): DescribeDifyEditionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDifyEditions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDifyRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion?: string(name='DataRegion', position='Query'),
}

model DescribeDifyRegionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      regionId?: string(name='RegionId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDifyRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDifyRegionsResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of DescribeDifyRegions  DescribeDifyRegionsRequest
  * @return DescribeDifyRegionsResponse
 */
async function describeDifyRegions(request: DescribeDifyRegionsRequest): DescribeDifyRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDifyRegions', 'POST', '/', 'json', false, 'json', request);
}

model DisableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='-1', position='Query'),
  uid: string(name='Uid', description='The UID of the Alibaba Cloud account.

This parameter is required.', example='12345', position='Query'),
}

model DisableUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='The specified user not exists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model DisableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableUserResponseBody(name='body'),
}

/**
  * @description The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
  * @param request  the request parameters of DisableUser  DisableUserRequest
  * @return DisableUserResponse
 */
async function disableUser(request: DisableUserRequest): DisableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableUser', 'POST', '/', 'json', false, 'json', request);
}

model DownloadDataTrackResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnFilter?: {
    betweenEnd?: string(name='BetweenEnd', description='The end value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.', example='10'),
    betweenStart?: string(name='BetweenStart', description='The start value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.', example='1'),
    columnName?: string(name='ColumnName', description='The name of the column.', example='account_name'),
    inList?: [ string ](name='InList', description='The IN list used in the filter condition.'),
    operator?: string(name='Operator', description='The type of the operator used to configure the filter condition. Valid values:

*   **EQUAL**: retrieves the column whose value is equal to the specified value.
*   **NOT_EQUAL**: retrieves the column whose value is not equal to the specified value.
*   **IN**: retrieves the column whose value is in the IN list.
*   **BETWEEN**: retrieves the column whose value is in the specified range.
*   **LESS**: retrieves the column whose value is less than the specified value.
*   **MORE**: retrieves the column whose value is greater than the specified value.
*   **NOT_IN**: retrieves the column whose value is not in the IN list.', example='EQUAL'),
    value?: string(name='Value', description='The value used in the filter condition.', example='1'),
  }(name='ColumnFilter', description='The condition to filter columns.', shrink='json', position='Query'),
  eventIdList?: [ long ](name='EventIdList', description='The IDs of the events.', shrink='json', position='Query'),
  filterEndTime?: string(name='FilterEndTime', description='The end time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 10:00:00', position='Query'),
  filterStartTime?: string(name='FilterStartTime', description='The start time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 00:00:00', position='Query'),
  filterTableList?: [ string ](name='FilterTableList', description='The names of the tables for which you want to track data operations.', shrink='json', position='Query'),
  filterTypeList?: [ string ](name='FilterTypeList', description='The types of data operations that you want to track.', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='406****', minimum=1, maximum=9223372036854775807, position='Query'),
  rollbackSQLType: string(name='RollbackSQLType', description='The type of the SQL statement.

*   **REVERSE**: undoes or rolls back an executed SQL statement, which is equivalent to the UNDO SQL statement.
*   **FORWARD**: redoes or re-executes an SQL statement that failed to be executed, which is equivalent to the REDO SQL statement.

This parameter is required.', example='REVERSE', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DownloadDataTrackResultResponseBody = {
  downloadKeyId?: string(name='DownloadKeyId', description='The ID of the download key, which is used to download the parsing result of the data tracking task.', example='e23dd7ec-a19f-4a69-8eb3-8ffd26e6****'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DownloadDataTrackResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadDataTrackResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadDataTrackResult  DownloadDataTrackResultRequest
  * @return DownloadDataTrackResultResponse
 */
async function downloadDataTrackResult(request: DownloadDataTrackResultRequest): DownloadDataTrackResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDataTrackResult', 'POST', '/', 'json', false, 'json', request);
}

model EditLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  alias: string(name='Alias', description='- The alias of the logical database. If you want to change the alias, specify a new alias.
- If you do not need to change the alias of the logical database, call the [GetLogicDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/getlogicdatabase) or [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the alias of the logical database.

This parameter is required.', example='test_logic_db', position='Query'),
  databaseIds: [ long ](name='DatabaseIds', description='- The IDs of the physical databases that compose the logical database. If you want to change the physical databases, you can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the new physical databases that you want to specify.
- If you do not want to change the physical databases, you can call the [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the IDs of the physical databases that compose the logical database.

This parameter is required.', shrink='json', position='Query'),
  logicDbId: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) operation to query the ID of the logical database.

This parameter is required.', example='1***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model EditLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model EditLogicDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditLogicDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditLogicDatabase  EditLogicDatabaseRequest
  * @return EditLogicDatabaseResponse
 */
async function editLogicDatabase(request: EditLogicDatabaseRequest): EditLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model EditMetaKnowledgeAssetRequest {
  regionId?: string(name='RegionId', position='Host'),
  assetDescription: string(name='AssetDescription', description='This parameter is required.', position='Query'),
  columnName?: string(name='ColumnName', position='Query'),
  dbId: int32(name='DbId', description='This parameter is required.', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', position='Query'),
  tableSchemaName?: string(name='TableSchemaName', position='Query'),
}

model EditMetaKnowledgeAssetResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditMetaKnowledgeAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditMetaKnowledgeAssetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditMetaKnowledgeAsset  EditMetaKnowledgeAssetRequest
  * @return EditMetaKnowledgeAssetResponse
 */
async function editMetaKnowledgeAsset(request: EditMetaKnowledgeAssetRequest): EditMetaKnowledgeAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditMetaKnowledgeAsset', 'POST', '/', 'json', false, 'json', request);
}

model EnableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
  uid: string(name='Uid', description='The UID of the Alibaba Cloud account.

This parameter is required.', example='12345', position='Query'),
}

model EnableUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='The specified user not exists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model EnableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableUserResponseBody(name='body'),
}

/**
  * @description The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
  * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
  * @param request  the request parameters of EnableUser  EnableUserRequest
  * @return EnableUserResponse
 */
async function enableUser(request: EnableUserRequest): EnableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableUser', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteDataCorrectRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the data change.

```

json
"actionDetail" : {
    "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "transaction" : false, // Specify whether to change data as a transaction. 
    "backupData" : true // Specify whether to back up data. 
  }
```', example='{ "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.

This parameter is required.', example='406****', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The ID of the Alibaba Cloud account that is used to call the API operation.', example='21400447956867****', position='Query'),
  tid?: string(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model ExecuteDataCorrectResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EADDA791-2809-58CE-A303-743A77FF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ExecuteDataCorrectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteDataCorrectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteDataCorrect  ExecuteDataCorrectRequest
  * @return ExecuteDataCorrectResponse
 */
async function executeDataCorrect(request: ExecuteDataCorrectRequest): ExecuteDataCorrectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteDataCorrect', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteDataExportRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the operation. Sample code:

```json
{
  "mode" : "FAST",   // The mode in which data is exported. Default value: FAST. A value of NORMAL specifies that the export task can be terminated during the export.  "encoding" : "UTF8",  // The encoding format.  "startTime" : "2022-12-22 00:00:00",  // The point in time at which data export starts.  "transaction" : false,    // Specifies whether to enable transactions.  "fileType" : "SQL"    // The format of the exported file.}
```

>  You can also set mode, encoding, and fileType to the following values:

*   mode: NORMAL

*   encoding: UTF8MB4, GB2312, ISO_8859_1, GBK, LATAIN1, or CP1252

*   fileType: XLSX, CSV, JSON, or TXT', example='{    "fileType": "CSV",    "encoding": ""  }', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='1234', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The ID of the Alibaba Cloud account that is used to call the API operation.', example='21400447956867****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model ExecuteDataExportResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ExecuteDataExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteDataExportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteDataExport  ExecuteDataExportRequest
  * @return ExecuteDataExportResponse
 */
async function executeDataExport(request: ExecuteDataExportRequest): ExecuteDataExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteDataExport', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteScriptRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='The ID of the database.

>  This parameter is equivalent to the DatabaseId parameter in the SearchDatabase, ListDatabases, and GetDatabase operations. You can call one of these operations to obtain the required database ID. For more information, see [SearchDatabase](https://help.aliyun.com/document_detail/141876.html), [ListDatabases](https://help.aliyun.com/document_detail/141873.html), and [GetDatabase](https://help.aliyun.com/document_detail/141869.html).

This parameter is required.', example='123', minimum=1, position='Query'),
  logic: boolean(name='Logic', description='Specifies whether the database is a logical database.

This parameter is required.', example='false', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  script: string(name='Script', description='The SQL statements to be executed. Data query language (DQL) statements, data definition language (DDL) statements, and data manipulation language (DML) statements are supported. The control mode of the instance that you want to query determines whether you can execute DDL and DML statements.

This parameter is required.', example='select dt from report_daily', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](https://help.aliyun.com/document_detail/181330.html).', example='234', position='Query'),
}

model ExecuteScriptResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message about the gateway.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  results?: [ 
    {
      columnNames?: [ string ](name='ColumnNames', description='The fields that are queried after the SQL statement is executed.'),
      message?: string(name='Message', description='The error message that is returned if the SQL statement fails to be executed. For example, an error message is returned because the SQL statement is invalid.', example='UnknownError'),
      rowCount?: long(name='RowCount', description='The total number of entries that are returned.', example='1'),
      rows?: [  map[string]any ](name='Rows', description='The rows that are queried after the SQL statement is executed.'),
      success?: boolean(name='Success', description='Indicates whether the SQL statement is executed.', example='true'),
    }
  ](name='Results', description='The results of the SQL statements that are executed, in the format of an array. Each entry in the array indicates the result of an SQL statement.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ExecuteScriptResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteScriptResponseBody(name='body'),
}

/**
  * @description You can call this operation only for instances that are managed in Security Collaboration mode.
  * @param request  the request parameters of ExecuteScript  ExecuteScriptRequest
  * @return ExecuteScriptResponse
 */
async function executeScript(request: ExecuteScriptRequest): ExecuteScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteScript', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteStructSyncRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='112345', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ExecuteStructSyncResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ExecuteStructSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteStructSyncResponseBody(name='body'),
}

/**
  * @description If the security rules of an instance indicate that a ticket must be approved before you perform schema synchronization, you can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
  * >  You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to query whether you need to submit a ticket for approval.
  * @param request  the request parameters of ExecuteStructSync  ExecuteStructSyncRequest
  * @return ExecuteStructSyncResponse
 */
async function executeStructSync(request: ExecuteStructSyncRequest): ExecuteStructSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteStructSync', 'POST', '/', 'json', false, 'json', request);
}

model GenMetaKnowledgeAssetRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='This parameter is required.', position='Query'),
}

model GenMetaKnowledgeAssetResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenMetaKnowledgeAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenMetaKnowledgeAssetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenMetaKnowledgeAsset  GenMetaKnowledgeAssetRequest
  * @return GenMetaKnowledgeAssetResponse
 */
async function genMetaKnowledgeAsset(request: GenMetaKnowledgeAssetRequest): GenMetaKnowledgeAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenMetaKnowledgeAsset', 'POST', '/', 'json', false, 'json', request);
}

model GenerateSqlFromNLRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='This parameter is required.', example='1***', position='Query'),
  dialect?: string(name='Dialect', example='MySQL', position='Query'),
  knowledge?: string(name='Knowledge', example='state>0代表成功', position='Query'),
  level?: string(name='Level', example='base', position='Query'),
  model?: string(name='Model', example='qwen-plus', position='Query'),
  question: string(name='Question', description='This parameter is required.', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  tableNames?: string(name='TableNames', example='users,orders', position='Query'),
}

model GenerateSqlFromNLResponseBody = {
  data?: {
    knowledgeReferences?: [ 
      {
        content?: string(name='Content', example='{\\"Status\\": \\"OK\\"}'),
        level?: string(name='Level', example='verified'),
        name?: string(name='Name', example='sample_tbl'),
      }
    ](name='KnowledgeReferences'),
    question?: string(name='Question'),
    similarSql?: [ 
      {
        question?: string(name='Question'),
        score?: string(name='Score', example='0.52'),
        sql?: string(name='Sql', example='SELECT * WHERE ResourceType = \\"ACS::ECS::Instance\\" AND ResourceGroupId != \\"rg-xxx\\"'),
        thought?: string(name='Thought'),
      }
    ](name='SimilarSql'),
    sql?: string(name='Sql', example='SELECT * FROM table WHERE condition;'),
    tables?: [ 
      {
        tableName?: string(name='TableName', example='ins_1.db1.table1'),
      }
    ](name='Tables'),
    thought?: string(name='Thought', example='通过分析用户的问题和提供的知识，生成了相应的SQL语句。'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model GenerateSqlFromNLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateSqlFromNLResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - 该API用于将用户的自然语言问题转换为可执行的SQL查询语句。
  * - 用户需要提供数据库ID (`dbId`) 和实例ID (`instanceId`)，以及想要查询的问题描述 (`question`)。
  * - 可选参数包括业务知识 (`knowledge`)、数据库方言 (`dialect`)、历史消息 (`history`)、算法级别 (`level`) 和指定模型名称 (`model`)。
  * - `dialect` 默认值为 "SQL"，表示生成标准SQL语句；`level` 默认值为 "base"，代表基础级别的处理。
  * - 如果请求中包含多个表且这些表不属于同一个数据库，则返回的 `dbId` 将为0，表明这是一个跨库查询。
  * - 返回结果中除了生成的SQL语句外，还包括了求解时用到的表、引用的知识点、展示用的SQL等信息，方便进一步理解和使用。
  * @param request  the request parameters of GenerateSqlFromNL  GenerateSqlFromNLRequest
  * @return GenerateSqlFromNLResponse
 */
async function generateSqlFromNL(request: GenerateSqlFromNLRequest): GenerateSqlFromNLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateSqlFromNL', 'POST', '/', 'json', false, 'json', request);
}

model GetAbacPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  abacPolicyId?: long(name='AbacPolicyId', example='12****', position='Query'),
  abacPolicyName?: string(name='AbacPolicyName', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetAbacPolicyResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  policy?: {
    authorizedQuantity?: string(name='AuthorizedQuantity', example='3'),
    creatorId?: long(name='CreatorId', example='51****'),
    policyContent?: string(name='PolicyContent', example='{
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "dms:DbType": [
            "redis"
          ]
        }
      }
    }
  ],
  "Version": "1"
}'),
    policyDesc?: string(name='PolicyDesc', example='test'),
    policyId?: long(name='PolicyId', example='12****'),
    policyName?: string(name='PolicyName', example='policy_test'),
    policySource?: string(name='PolicySource'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='2B7844DE-A0C3-50ED-A796-8F07D377144C'),
  success?: boolean(name='Success', example='true'),
}

model GetAbacPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAbacPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAbacPolicy  GetAbacPolicyRequest
  * @return GetAbacPolicyResponse
 */
async function getAbacPolicy(request: GetAbacPolicyRequest): GetAbacPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAbacPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetApprovalDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
  workflowInstanceId: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.

This parameter is required.', example='184****', position='Query'),
}

model GetApprovalDetailResponseBody = {
  approvalDetail?: {
    auditId?: long(name='AuditId', description='The ID of the approval process.', example='184****'),
    createTime?: string(name='CreateTime', description='The time when the approval process was created.', example='2021-10-29 14:17:25'),
    currentHandlers?: {
      currentHandler?: [ 
      {
        id?: long(name='Id', description='The ID of the user.', example='1'),
        nickName?: string(name='NickName', description='The nickname of the user.', example='nickName'),
      }
    ](name='CurrentHandler')
    }(name='CurrentHandlers', description='The information about the approver.'),
    description?: string(name='Description', description='The description of the approval process.', example='[Instance permissions] Application\\<br/>Permission type: ⌈Logon⌋\\<br/>Application period: 30.0 days\\<br/>Background description: [Instance permissions] logon test\\<br/>\\<br/>[Application list]\\<br/>\\<span style=\\"color:red\\">product\\</span> rm-bp144d5ky4l4rli0417\\*\\*\\*\\*.mysql.rds.aliyuncs.com:3306 - PRODUCT\\<br/>'),
    orderId?: long(name='OrderId', description='The ID of the ticket.', example='384****'),
    orderType?: string(name='OrderType', description='The type of the ticket. Valid values:

*   **NDDL**: a schema design ticket
*   **DATA_TRACK**: a data tracking ticket
*   **TABLE_SYNC**: a table synchronization ticket
*   **PERM_APPLY**: a permission application ticket
*   **DATA_EXPORT**: a data export ticket
*   **DATA_CORRECT**: a data change ticket
*   **OWNER_APPLY**: an owner role application ticket
*   **SENSITIVITY**: a column sensitivity level change ticket', example='PERM_APPLY'),
    reasonList?: {
      reasons?: [ string ](name='Reasons')
    }(name='ReasonList', description='The reasons for the approval.'),
    templateId?: long(name='TemplateId', description='The ID of the workflow template.', example='1234'),
    thirdpartyWorkflowComment?: string(name='ThirdpartyWorkflowComment', description='Third-party approval flow remarks.', example='test'),
    thirdpartyWorkflowUrl?: string(name='ThirdpartyWorkflowUrl', description='The third-party approval flow link.', example='https://xxx'),
    title?: string(name='Title', description='The title of the approval process.', example='Permission application ticket - 384\\*\\*\\*\\*'),
    workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

*   **AUDITING**: The ticket is being reviewed.
*   **REJECT**: The ticket was rejected.
*   **CANCEL**: The ticket was revoked.
*   **APPROVED**: The ticket was approved.

> An approval process contains multiple approval nodes, and this parameter is returned for each approval node.', example='APPROVED'),
    workflowNodes?: {
      workflowNode?: [ 
      {
        auditUserIdList?: {
          auditUserIds?: [ string ](name='AuditUserIds')
        }(name='AuditUserIdList', description='The IDs of the approvers.'),
        nodeName?: string(name='NodeName', description='The name of the approval node.', example='DBA'),
        operateComment?: string(name='OperateComment', description='The remarks of the approval.', example='Reason: Approved'),
        operateTime?: string(name='OperateTime', description='The time when the ticket was submitted.', example='2019-10-15 13:47:54'),
        operatorId?: long(name='OperatorId', description='The ID of the user who submitted the ticket.', example='1****'),
        workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

*   **START**: The ticket was submitted.
*   **ERROR**: An error occurred.
*   **AUDITING**: The ticket is being reviewed.
*   **REJECT**: The ticket was rejected.
*   **CANCEL**: The ticket was revoked.
*   **APPROVED**: The ticket was approved.', example='APPROVED'),
      }
    ](name='WorkflowNode')
    }(name='WorkflowNodes', description='The details of approval nodes.'),
  }(name='ApprovalDetail', description='The approval details of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='MissingWorkflowInstanceId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='WorkflowInstanceId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66DE630B-ECA1-52A3-9198-602066F9****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetApprovalDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApprovalDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApprovalDetail  GetApprovalDetailRequest
  * @return GetApprovalDetailResponse
 */
async function getApprovalDetail(request: GetApprovalDetailRequest): GetApprovalDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApprovalDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.

This parameter is required.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model GetAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    authorityTemplateItemList?: {
      authorityTemplateItem?: [ 
      {
        attribute?: string(name='Attribute', description='Other information. For example, you can add the logon permission on an instance to the permission template.', example='"permissionTypes": [
            "LOGIN"
          ]'),
        dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
        instanceId?: long(name='InstanceId', description='The ID of the instance.', example='188****'),
        itemId?: long(name='ItemId', description='The ID of the resource.', example='12***'),
        modifierId?: long(name='ModifierId', description='The ID of the user who modified the resource.', example='51***'),
        resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **INSTANCE**: instance
*   **LOGIC_DB**: logical database
*   **META_DB**: physical database
*   **LOGIC_TABLE**: logical table
*   **SINGLE_TABLE**: physical table', example='INSTANCE'),
        tableName?: string(name='TableName', description='The name of the table.', example='ExampleTable'),
        templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
      }
    ](name='AuthorityTemplateItem')
    }(name='AuthorityTemplateItemList', description='The resource information in the permission template.'),
    createTime?: string(name='CreateTime', description='The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.', example='2023-01-01 00:00:00'),
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='TestTemplate'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
}

model GetAuthorityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuthorityTemplateResponseBody(name='body'),
}

/**
  * @description You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of GetAuthorityTemplate  GetAuthorityTemplateRequest
  * @return GetAuthorityTemplateResponse
 */
async function getAuthorityTemplate(request: GetAuthorityTemplateRequest): GetAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorityTemplateItemRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.

This parameter is required.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model GetAuthorityTemplateItemResponseBody = {
  authorityTemplateItemList?: {
    authorityTemplateItem?: [ 
    {
      attribute?: string(name='Attribute', description='The additional information. For example, permissions to log on to an instance are added to the permission template.', example='"permissionTypes": [
            "LOGIN"
          ]'),
      dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='188****'),
      itemId?: long(name='ItemId', description='The ID of the resource.', example='12***'),
      modifierId?: long(name='ModifierId', description='The ID of the user who modifies the resource.', example='51***'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **INSTANCE**: instance
*   **LOGIC_DB**: logical database
*   **META_DB**: physical database
*   **LOGIC_TABLE**: logical table
*   **LOGIC_TABLE**: physical table', example='INSTANCE'),
      tableName?: string(name='TableName', description='The name of the table.', example='ExampleTable'),
      templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
    }
  ](name='AuthorityTemplateItem')
  }(name='AuthorityTemplateItemList', description='The permission templates.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
}

model GetAuthorityTemplateItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuthorityTemplateItemResponseBody(name='body'),
}

/**
  * @description You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of GetAuthorityTemplateItem  GetAuthorityTemplateItemRequest
  * @return GetAuthorityTemplateItemResponse
 */
async function getAuthorityTemplateItem(request: GetAuthorityTemplateItemRequest): GetAuthorityTemplateItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorityTemplateItem', 'POST', '/', 'json', false, 'json', request);
}

model GetClassificationTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: long(name='InstanceId', description='This parameter is required.', example='169****', position='Query'),
  tid?: long(name='Tid', example='23***', position='Query'),
}

model GetClassificationTemplateResponseBody = {
  classificationResourceTemplateMap?: {
    resourceId?: long(name='ResourceId', example='24****'),
    resourceType?: string(name='ResourceType', example='INSTANCE'),
    templateId?: long(name='TemplateId', example='3***'),
    templateType?: string(name='TemplateType', example='INNER'),
  }(name='ClassificationResourceTemplateMap'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model GetClassificationTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClassificationTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetClassificationTemplate  GetClassificationTemplateRequest
  * @return GetClassificationTemplateResponse
 */
async function getClassificationTemplate(request: GetClassificationTemplateRequest): GetClassificationTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClassificationTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetDBTaskSQLJobLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='The ID of the SQL task. You can call the [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to query the ID of the SQL task.

This parameter is required.', example='1276****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDBTaskSQLJobLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='JobId is mandatory for this action.'),
  log?: string(name='Log', description='The log that records the scheduling details.', example='log_****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AC23904-55DE-550B-9676-E8946F07****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDBTaskSQLJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDBTaskSQLJobLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDBTaskSQLJobLog  GetDBTaskSQLJobLogRequest
  * @return GetDBTaskSQLJobLogResponse
 */
async function getDBTaskSQLJobLog(request: GetDBTaskSQLJobLogRequest): GetDBTaskSQLJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBTaskSQLJobLog', 'POST', '/', 'json', false, 'json', request);
}

model GetDBTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  logicDbId: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the ID of the logical database.

This parameter is required.', example='134***', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='43***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDBTopologyResponseBody = {
  DBTopology?: {
    alias?: string(name='Alias', description='The alias of the access point.', example='logic_db_test'),
    DBTopologyInfoList?: [ 
      {
        catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.

> If the database is a PostgreSQL database, the value of this parameter is the name of the database.', example='def'),
        dbId?: long(name='DbId', description='The ID of the database for which the schema design is executed.', example='423532'),
        dbType?: string(name='DbType', description='The type of the database engine.', example='polardb'),
        envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: staging environment
*   test: test environment
*   sit: SIT environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: STAG environment', example='dev'),
        instanceId?: long(name='InstanceId', description='The ID of the instance. The valid value is returned if you call the ListInstances operation. The instance ID is not the ID of the RDS instance.', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', description='Instance resource ID.', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
*   **RDS:** an ApsaraDB RDS instance
*   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='RDS'),
        regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        schemaName?: string(name='SchemaName', description='The name of the logical database.

> If the database is a PostgreSQL database, the value of this parameter is the name of the database schema.', example='db_test@rm-xxx:3306'),
        searchName?: string(name='SearchName', description='The name of the saved search.', example='db_test'),
      }
    ](name='DBTopologyInfoList', description='The list of database splitting topology information.'),
    dbType?: string(name='DbType', description='The type of the database engine.', example='polardb'),
    envType?: string(name='EnvType', description='The type of the environment in which the database instance is deployed. Valid values:

*   product: production environment
*   dev: development environment
*   pre: pre-release environment
*   test: test environment
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: staging environment', example='dev'),
    logicDbId?: long(name='LogicDbId', description='The ID of the logical database.', example='1234'),
    logicDbName?: string(name='LogicDbName', description='Logical database name.', example='logic_db_test'),
    searchName?: string(name='SearchName', description='The name of the saved search.', example='logic_db_test'),
  }(name='DBTopology', description='The topology of the data table.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetDBTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDBTopologyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDBTopology  GetDBTopologyRequest
  * @return GetDBTopologyResponse
 */
async function getDBTopology(request: GetDBTopologyRequest): GetDBTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetDataArchiveCountRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderResultType?: string(name='OrderResultType', description='The type of the identity. Default value: AS_ADMIN.', example='AS_ADMIN', position='Query'),
  pluginType?: string(name='PluginType', description='The plugin type. Default value: DATA_ARCHIVE.', example='DATA_ARCHIVE', position='Query'),
  searchDateType?: string(name='SearchDateType', description='The time when the ticket is modified or created. The statistics of data archiving tickets are calculated based on the creation time.', example='CREATE_TIME', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='2****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataArchiveCountResponseBody = {
  data?: {
    failCount?: long(name='FailCount', description='The number of tickets that data archiving failed.', example='1**'),
    processingCount?: long(name='ProcessingCount', description='The number of tickets that data archiving is in progress.', example='2**'),
    successCount?: long(name='SuccessCount', description='The number of tickets that data archiving is successful.', example='3**'),
    totalCount?: long(name='TotalCount', description='The total number of data archiving tickets.', example='6**'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataArchiveCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataArchiveCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataArchiveCount  GetDataArchiveCountRequest
  * @return GetDataArchiveCountResponse
 */
async function getDataArchiveCount(request: GetDataArchiveCountRequest): GetDataArchiveCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataArchiveCount', 'POST', '/', 'json', false, 'json', request);
}

model GetDataArchiveOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The IDs of data archiving tickets.

This parameter is required.', example='868****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='5***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataArchiveOrderDetailResponseBody = {
  dataArchiveOrderDetail?: {
    comment?: string(name='Comment', description='The description of the data archiving tickets.', example='Archiving of test results'),
    committer?: string(name='Committer', description='The user who submitted the ticket.', example='dmstest'),
    committerId?: long(name='CommitterId', description='The ID of the user who submitted the ticket. The ID is a user ID and not the ID of an Alibaba Cloud account.', example='26***'),
    gmtCreate?: string(name='GmtCreate', description='The time when the ticket was created.', example='2023-05-15 16:00:48'),
    gmtModified?: string(name='GmtModified', description='The time when the ticket was last modified.', example='2023-05-23 16:00:48'),
    id?: long(name='Id', description='The ID of data archiving tickets.', example='868****'),
    pluginExtraData?: {
      dagInfo?: {
        creatorId?: string(name='CreatorId', description='The ID of the user who created the task flow.', example='59****'),
        cronBeginDate?: string(name='CronBeginDate', description='The start time for scheduling. The task flow is not scheduled before this point in time.', example='1970-01-01'),
        cronEndDate?: string(name='CronEndDate', description='The end time for scheduling. The task flow is not scheduled after this point in time.', example='9999-01-01'),
        cronTrigger?: boolean(name='CronTrigger', description='Indicates whether the archiving task is a scheduled task. Valid values:

*   **true**
*   **false**', example='false'),
        DWDevelop?: boolean(name='DWDevelop', description='Indicates whether the task is used to develop warehouses.

>  This field is a retained field that is not in use.', example='false'),
        dagName?: string(name='DagName', description='The name of the workflow.', example='data-archive-9099197'),
        dagOwnerId?: string(name='DagOwnerId', description='The ID of the owner of the workflow.', example='13****'),
        deployId?: long(name='DeployId', description='The ID of the deployment record.', example='93***'),
        description?: string(name='Description', description='The description of the workflow.', example='order id:9099197'),
        editDagId?: long(name='EditDagId', description='The ID of the editable workflow version.', example='24***'),
        gmtCreate?: string(name='GmtCreate', description='The time when the workflow was created.', example='2023-05-15 16:00:48'),
        gmtModified?: string(name='GmtModified', description='The time when the workflow was last modified.', example='2023-06-15 16:00:48'),
        id?: long(name='Id', description='The ID of the task flow.', example='24***'),
        isPublic?: long(name='IsPublic', description='Indicates whether the workflow is public. Valid values:

*   **0**: not public.
*   **1**: public.', example='0'),
        legacy?: boolean(name='Legacy', description='Indicates whether the task is a historical task. Valid values:

*   **true**
*   **false**', example='false'),
        system?: boolean(name='System', description='Indicates whether the task was created by the system. Valid values:

*   **true**
*   **false**', example='false'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='5***'),
        triggerOnce?: boolean(name='TriggerOnce', description='Indicates whether the workflow is triggered to run once. Valid values:

*   **true**
*   **false**', example='false'),
      }(name='DagInfo', description='The information about the workflow.'),
      dbBaseInfo?: {
        alias?: string(name='Alias', description='The alias of the database instance.', example='tf-testAccDMSEnterpriseLogicDatabase853****'),
        alterTimeout?: long(name='AlterTimeout', description='The timeout period of queries on the database.', example='600'),
        assetControl?: boolean(name='AssetControl', description='Indicates whether access control is enabled for data assets. Valid values:

*   **true**
*   **false**', example='true'),
        catalogName?: string(name='CatalogName', description='The name of the instance in the instance list.', example='test'),
        clusterNode?: string(name='ClusterNode', description='Indicates whether the instance is added to the DMS whitelist.', example='whitelist_done'),
        dbId?: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

>  You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of a physical database or the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.', example='348****'),
        dbType?: string(name='DbType', description='The type of the database. For information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MySQL'),
        dbaId?: long(name='DbaId', description='The ID of the database administrator (DBA) of the instance.', example='16****'),
        dbaName?: string(name='DbaName', description='The nickname of the DBA of the instance.', example='DBA'),
        description?: string(name='Description', description='The complete endpoint of the database.', example='test@rm-2ze756u8837****.mysql.rds.aliyuncs.com:3306 [test]'),
        encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf8'),
        envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
        follow?: boolean(name='Follow', description='Indicates whether the instance needs special attention. Valid values:

*   **true**
*   **false**', example='false'),
        host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='rm-2ze756u8837****.mysql.rds.aliyuncs.com'),
        idc?: string(name='Idc', description='The region in which the database instance resides.', example='cn-beijing'),
        idcTitle?: string(name='IdcTitle', description='The name of the region in which the database instance resides.', example='cn-beijing'),
        instanceId?: long(name='InstanceId', description='The ID of the instance to which the database belongs.', example='175****'),
        instanceSource?: string(name='InstanceSource', description='The source of the database instance.Valid values:

*   **RDS**: an ApsaraDB RDS instance.
*   **ECS_OWN**: a self-managed database deployed on an Elastic Compute Service (ECS) instance.
*   **PUBLIC_OWN**: a self-managed database instance that is connected over the Internet.
*   **VPC_ID**: a self-managed database instance in a virtual private cloud (VPC) that is connected over Express Connect circuits.
*   **GATEWAY**: a database instance connected by using a database gateway.', example='RDS'),
        lastSyncTime?: string(name='LastSyncTime', description='The time when the database information was last obtained.', example='2023-05-14 18:34:45'),
        level?: string(name='Level', description='The instance level.', example='medium'),
        logic?: boolean(name='Logic', description='Indicates whether the database is logical. Valid values:

*   **true**
*   **false**', example='false'),
        ownerIds?: [ long ](name='OwnerIds', description='The IDs of the owners of the databases, which are stored as an array. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the IDs of the owners.

>  The value of OwnerIds is the same as the value of UserId'),
        ownerNames?: [ string ](name='OwnerNames', description='The usernames of the database owners.'),
        port?: long(name='Port', description='The port that is used to connect to the database.', example='3306'),
        schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
        searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@rm-2ze756u8837****.mysql.rds.aliyuncs.com:3306 [test]'),
        standardGroup?: {
          dbType?: string(name='DbType', description='The type of the instance engine. For information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MySQL'),
          description?: string(name='Description', description='The description of the security rule set.', example='adb_mysql default'),
          freeOrStable?: boolean(name='FreeOrStable', description='Indicates whether the instance is managed in Flexible Management or Stable Change mode. Valid values:

*   **true**
*   **false**', example='false'),
          gmtCreate?: string(name='GmtCreate', description='The time when the security rule was created.', example='2020-05-24 14:12:32'),
          gmtModified?: string(name='GmtModified', description='The time when the security rule was last modified.', example='2020-05-25 14:12:32'),
          groupMode?: string(name='GroupMode', description='The type of the control mode of the instance. Valid values:

*   **COMMON**: The instance is managed in Security Collaboration mode.
*   **NONE_CONTROL**: The instance is managed in Flexible Management mode.
*   **STABLE**: The instance is managed in Stable Change mode.', example='COMMON'),
          groupName?: string(name='GroupName', description='The name of the security rule that corresponds to the control mode.', example='adb_mysql default'),
          id?: long(name='Id', description='The ID of the security rule.', example='24***'),
          lastMenderId?: long(name='LastMenderId', description='The user ID of the last modified security rule.', example='12****'),
        }(name='StandardGroup', description='The details of the control mode of the instance.'),
        state?: string(name='State', description='The status of the database. Valid values:

*   **NORMAL**: The database is running as expected.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='NORMAL'),
        tableCount?: long(name='TableCount', description='The number of tables.', example='201'),
        tnsName?: string(name='TnsName', description='The name of TNS.', example='TNS_4010'),
        unitType?: string(name='UnitType', description='The unit type.', example='-1'),
      }(name='DbBaseInfo', description='The database information related to data archiving tickets.'),
      instanceTotal?: long(name='InstanceTotal', description='The total number of archiving tasks.', example='2'),
      instances?: [ 
        {
          businessTime?: string(name='BusinessTime', description='The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2023-05-14 16:00:57'),
          dagId?: long(name='DagId', description='The task flow ID. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the value of this parameter.', example='37***'),
          endTime?: string(name='EndTime', description='The time when the task flow ended. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2022-06-04 15:14:00'),
          gmtCreate?: string(name='GmtCreate', description='The time when the task flow was created.', example='2023-05-14 16:00:57'),
          gmtModified?: string(name='GmtModified', description='The time when the task flow was last modified.', example='2023-05-14 16:00:57'),
          historyDagId?: long(name='HistoryDagId', description='The ID of the historical task flow.', example='32***'),
          id?: long(name='Id', description='The ID of the instance in the task flow that is executed.', example='24***'),
          lastRunningContext?: string(name='LastRunningContext', description='The context of the previous execution of the task flow.', example='{
      "nodes": [
            48**
      ],
      "edges": {}
}'),
          msg?: string(name='Msg', description='The context of the current execution of the task flow.', example='2023-05-15 16:37:48[GMT+08:00] INFO - Resource Control is active!\\n2023-05-15 16:37:48[GMT+08:00] INFO - Starting job j_4834 at Mon May 15 16:37:48 CST 2023'),
          status?: long(name='Status', description='The status of the task. Valid values:

*   **0**: The task is waiting for execution.
*   **1**: The task is in progress.
*   **2**: The task is suspended.
*   **3**: The task failed.
*   **4**: The task is successful.
*   **5**: The task is complete.', example='4'),
          tenantId?: string(name='TenantId', description='The tenant ID.', example='5***'),
          triggerType?: long(name='TriggerType', description='The mode in which the task flow was triggered. Valid values:

*   **0**: The task flow was triggered based on a schedule.
*   **1**: The task flow was manually triggered.', example='1'),
          version?: string(name='Version', description='The version number.', example='1'),
        }
      ](name='Instances', description='The list of archiving tasks.'),
      nextFireTimeResult?: {
        cronFireType?: string(name='CronFireType', description='The type of scheduled triggering.', example='NOT_SET'),
      }(name='NextFireTimeResult', description='The time when the next task is triggered.'),
      pageIndex?: long(name='PageIndex', description='The page number.', example='10'),
      pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
      tempTableNameMap?: map[string]any(name='TempTableNameMap', description='The name of the temporary table that is generated by the archiving task (indicated by the archiving task ID).', example='{
      "803***": [
            "tmp_dms_21321_20230704144336_temp_test_check"
      ]
}'),
    }(name='PluginExtraData', description='The additional information about the ticket.'),
    pluginParam?: {
      archiveMethod?: string(name='ArchiveMethod', description='The type of the archiving destination.', example='inner_oss'),
      dbSchema?: string(name='DbSchema', description='The schema of the database and table to be archived.', example='test'),
      logic?: boolean(name='Logic', description='Indicates whether the database is logical.

*   **true**
*   **false**', example='true'),
      orderAfter?: [ string ](name='OrderAfter', description='The post behavior of archiving.'),
      runMethod?: string(name='RunMethod', description='The running method, which indicates whether to run the task immediately or at a specific point in time.', example='now'),
      sourceDatabaseId?: long(name='SourceDatabaseId', description='The ID of the source database.', example='12***'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName', description='The table name.', example='tm_insured_cb'),
          tableWhere?: string(name='TableWhere', description='The filter condition.', example='id<1000 or gmt_create<\\"2023-05-14 16:00:57\\"'),
        }
      ](name='TableIncludes', description='The list of the archived tables and the filter conditions.'),
      tableMapping?: [ string ](name='TableMapping', description='The mapping of schemas.'),
      targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='12***'),
      variables?: [ string ](name='Variables', description='The time variable defined for scheduled archiving.'),
    }(name='PluginParam', description='The ticket creation parameter. The value is a JSON string. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).'),
    pluginType?: string(name='PluginType', description='The plug-in type that corresponds to the type of the ticket. The plug-in type for data archiving is DATA_ARCHIVE. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).', example='DATA_ARCHIVE'),
    relatedUserList?: [ long ](name='RelatedUserList', description='The user IDs related to the ticket.'),
    relatedUserNickList?: [ string ](name='RelatedUserNickList', description='The nicknames of the users that are related to the ticket.'),
    statusCode?: string(name='StatusCode', description='The status code of the ticket. Valid values:

*   **new**: newly created.
*   **toaudit**: being reviewed.
*   **Approved**: approved.
*   **reject**: rejected.
*   **processing**: being executed.
*   **Success**: successful.
*   **closed**: disabled.', example='processing'),
    statusDesc?: string(name='StatusDesc', description='The status description of the ticket.', example='a ticket task is being executed.'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.', example='29****'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc', description='The description of the approval process.', example='approved'),
  }(name='DataArchiveOrderDetail', description='The details of data archiving tickets.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the call failed.', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the request failed.', example='User [19929582****] not exist'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to query logs and troubleshoot issues.', example='4161CE36-28DF-5191-8A6F-A17076A0B124'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  traceId?: string(name='TraceId', description='Tracks service requests.', example='0a06e1e316757357507896067d3780'),
}

model GetDataArchiveOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataArchiveOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataArchiveOrderDetail  GetDataArchiveOrderDetailRequest
  * @return GetDataArchiveOrderDetailResponse
 */
async function getDataArchiveOrderDetail(request: GetDataArchiveOrderDetailRequest): GetDataArchiveOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataArchiveOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectBackupFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the operation. You do not need to specify this parameter.', example='{}', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='4200000', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model GetDataCorrectBackupFilesResponseBody = {
  dataCorrectBackupFiles?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='DataCorrectBackupFiles', description='The download URL of the backup file for the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AFF4109-FEFB-44E8-96A3-923B1FA8C46E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectBackupFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCorrectBackupFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCorrectBackupFiles  GetDataCorrectBackupFilesRequest
  * @return GetDataCorrectBackupFilesResponse
 */
async function getDataCorrectBackupFiles(request: GetDataCorrectBackupFilesRequest): GetDataCorrectBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='420****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model GetDataCorrectOrderDetailResponseBody = {
  dataCorrectOrderDetail?: {
    configDetail?: {
      cron?: boolean(name='Cron', description='Indicates whether the task is a scheduled task for historical data cleanup. This parameter is a reserved parameter and is valid only if the value of DetailType is CRON_CLEAR_DATA.', example='true'),
      cronCallTimes?: int32(name='CronCallTimes', description='The number of times the scheduled task is run. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.', example='0'),
      cronExtConfig?: {
        currentClearTaskCount?: int32(name='CurrentClearTaskCount', description='The number of times defragmentation is performed. This parameter is valid only if the value of OptimizeTableAfterEveryClearTimes is greater than 0.', example='0'),
        optimizeTableAfterEveryClearTimes?: int32(name='OptimizeTableAfterEveryClearTimes', description='Indicates whether the Periodically Optimize Table feature is enabled. Valid values:

*   **0** (default): The feature is disabled.
*   **A value greater than 0**: The feature is enabled. The value indicates the number of cleanups after which the system performs defragmentation.', example='0'),
      }(name='CronExtConfig', description='The additional configuration information about historical data cleanup. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.'),
      cronFormat?: string(name='CronFormat', description='The CRON expression of the scheduled task. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.', example='0 0 2 * * ?'),
      cronLastCallStartTime?: string(name='CronLastCallStartTime', description='The time when the task was last run.', example='2024-04-19 02:00:00.0'),
      cronNextCallTime?: string(name='CronNextCallTime', description='The time when the task is run next time. This parameter is returned only if the value of CronStatus is SUCCESS.', example='2024-04-19 02:00:00'),
      cronStatus?: string(name='CronStatus', description='The state of the scheduled task. If this parameter is empty, the task is not run. Valid values:

*   PAUSE: The task is suspended.
*   WAITING: The task is waiting to be run.
*   SUCCESS: The task is run.', example='SUCCESS'),
      csvTableName?: string(name='CsvTableName', description='The name of the table to which data is to be imported. This parameter is valid only if the value of DetailType is BIG_FILE. If the value of FileType is SQL, this parameter is empty.', example='tb_import_tb_name'),
      currentTaskId?: long(name='CurrentTaskId', description='The ID of the current data change task. This is a reserved parameter and can be ignored.', example='13***'),
      detailType?: string(name='DetailType', description='The type of the ticket. Valid values:

*   COMMON: regular data change.
*   CHUNK_DML: lock-free data change.
*   BIG_FILE: large data import.
*   CRON_CLEAR_DATA: historical data cleanup.
*   PROCEDURE: programmable object change.', example='BIG_FILE'),
      duration?: int32(name='Duration', description='The execution duration of the scheduled task. Unit: hour. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA. If the value is greater than 0, an execution duration is set.', example='1'),
      fileEncoding?: string(name='FileEncoding', description='The encoding method of the file. This parameter may be empty, which indicates the value of AUTO. Valid values:

*   **AUTO**: automatic identification.
*   **UTF-8**: UTF-8 encoding.
*   **GBK**: GBK encoding.
*   **ISO-8859-1**: ISO-8859-1 encoding.', example='UTF-8'),
      fileType?: string(name='FileType', description='The type of the file to be imported. This parameter is valid if the value of DetailType is BIG_FILE. Valid values:

*   **SQL**: an SQL file.
*   **CSV**: a CSV file.
*   **EXCEL**: an Excel file.
*   **JSON**: a JSON file, which is supported only by MongoDB databases.', example='CSV'),
      importExtConfig?: {
        csvFirstRowIsColumnDef?: boolean(name='CsvFirstRowIsColumnDef', description='Indicates whether the first row of the CSV file contains field names. Valid values:

*   **true**: The first row in the CSV file contains field names.
*   **false**: The first row in the CSV file contains data.

>  This parameter is valid if the value of **FileType** is **CSV** or **EXCEL**.', example='true'),
        ignoreError?: boolean(name='IgnoreError', description='Indicates whether an error that occurs is ignored. Valid values:

*   **true**: If an error occurs when SQL statements are being executed, DMS skips the current SQL statement and continues to execute subsequent SQL statements.
*   **false**: If an error occurs when SQL statements are being executed, DMS stops executing subsequent SQL statements.', example='false'),
        importMode?: string(name='ImportMode', description='The import mode. Valid values:

*   **FAST_MODE**: fast mode. In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
*   **SAFE_MODE**: security mode. In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. Compared with the fast mode, this mode can be used to import data in a more secure but less efficient manner.', example='FAST_MODE'),
        insertType?: string(name='InsertType', description='The mode in which data is to be imported to the destination table. Valid values:

*   **INSERT**: The database checks the primary key during data insertion. If the primary key is duplicated, an error is reported.
*   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
*   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as an existing row in the destination table, the system deletes the existing row and inserts the new row into the destination table.

>  This parameter is valid if the value of FileType is CSV or EXCEL.', example='INSERT'),
      }(name='ImportExtConfig', description='The additional configuration information about data import. This parameter is valid if the value of DetailType is BIG_FILE.'),
    }(name='ConfigDetail', description='The configurations of the ticket. This parameter is used to store the configuration information specific to a data change ticket type.'),
    databaseList?: {
      database?: [ 
      {
        dbId?: int32(name='DbId', description='The database ID.', example='1860****'),
        dbType?: string(name='DbType', description='The engine of the database.', example='mysql'),
        envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment.
*   dev: development environment.
*   pre: pre-release environment.
*   test: test environment.
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment.
*   pet: stress testing environment.
*   stag: staging environment.', example='product'),
        logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true.**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
        searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='xxx@xxx:3306'),
      }
    ](name='Database')
    }(name='DatabaseList', description='The information about the database in which data is changed.'),
    execMode?: string(name='ExecMode', description='The execution mode of the ticket after the ticket is approved. Valid values:

- **COMMITOR**: The data change is performed by the user who submits the ticket.
- **AUTO**: The data change is automatically performed after the ticket is approved.
- **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='COMMITOR'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', description='The number of affected rows that is obtained by the precheck.', example='100'),
      attachmentName?: string(name='AttachmentName', description='The name of the attachment that contains the SQL statements used to change data.', example='xxx'),
      classify?: string(name='Classify', description='The category of the reason for the data change.', example='test'),
      estimateAffectRows?: long(name='EstimateAffectRows', description='The estimated number of affected rows.', example='100'),
      exeSQL?: string(name='ExeSQL', description='The executed SQL statements.', example='update t1 set name = \\"xxx\\" where id <= 100'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', description='Indicates whether the precheck result is ignored. Valid values:

- **true**: The precheck result is ignored.
- **false**: The precheck result is not ignored.', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', description='The reason why the precheck result is ignored.', example='test'),
      rbAttachmentName?: string(name='RbAttachmentName', description='The name of the attachment that contains the SQL statements used to roll back the data change.', example='test'),
      rbSQL?: string(name='RbSQL', description='The SQL statements used to roll back the data change.', example='empty'),
      rbSQLType?: string(name='RbSQLType', description='The format of the SQL statements used to roll back the data change. Valid values:

- **TEXT**: text
- **ATTACHMENT**: attachment', example='text'),
      sqlType?: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

- **TEXT**: text
- **ATTACHMENT**: attachment', example='text'),
    }(name='OrderDetail', description='The details of the ticket.'),
    preCheckDetail?: {
      taskCheckDO?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The state of the precheck. Valid values:

*   **WAITING**: The ticket is pending precheck.
*   **RUNNING**: The ticket is being prechecked.
*   **SUCCESS**: The ticket passes the precheck.
*   **FAIL**: The ticket fails the precheck.', example='SUCCESS'),
        checkStep?: string(name='CheckStep', description='The check step of the precheck. Valid values:

*   **SQL_PARSE**: The system checks the syntax of the SQL statement.
*   **SQL_TYPE_CHECK**: The system checks the type of the SQL statement.
*   **PERMISSION_CHECK**: The system checks the permissions required for the data change.
*   **ROW_CHECK**: The system checks the number of affected rows.', example='PERMISSION_CHECK'),
        userTip?: string(name='UserTip', description='The message that appears when a check step is executed.', example='tip messsage'),
      }
    ](name='TaskCheckDO')
    }(name='PreCheckDetail', description='The precheck details of the ticket.'),
    status?: string(name='Status', description='The specific state of the data change ticket. Valid values:

>  The state of the ticket is not exactly equivalent to the status code for the ticket. To query the status code of the ticket, you can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/465868.html) operation and check the value of StatusCode in the response.

*   **new**: The ticket is created.
*   **precheck**: The ticket is in the pre-check phase.
*   **precheckFailed**: The ticket failed to pass the precheck.
*   **precheck_success**: The ticket passes the precheck and waits to be submitted for approval.
*   **toaudit**: The ticket is being reviewed.
*   **Approved**: The ticket is approved.
*   **reject**: The ticket is rejected.
*   **waiting**: The task is submitted and waits to be scheduled.
*   **processing**: The task is being executed.
*   **Success**: The task is successful.', example='approved'),
  }(name='DataCorrectOrderDetail', description='The information about the data change ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataCorrectOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCorrectOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCorrectOrderDetail  GetDataCorrectOrderDetailRequest
  * @return GetDataCorrectOrderDetailResponse
 */
async function getDataCorrectOrderDetail(request: GetDataCorrectOrderDetailRequest): GetDataCorrectOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectRollbackFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='51****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectRollbackFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  fileUrl?: string(name='FileUrl', description='The download URL of the attachment.', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDataCorrectRollbackFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCorrectRollbackFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCorrectRollbackFile  GetDataCorrectRollbackFileRequest
  * @return GetDataCorrectRollbackFileResponse
 */
async function getDataCorrectRollbackFile(request: GetDataCorrectRollbackFileRequest): GetDataCorrectRollbackFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectRollbackFile', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectSQLFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='730000', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectSQLFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  fileUrl?: string(name='FileUrl', description='The download URL of the SQL script.', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectSQLFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCorrectSQLFileResponseBody(name='body'),
}

/**
  * @description This operation applies to [regular data change](https://help.aliyun.com/document_detail/58419.html) and [batch data import](https://help.aliyun.com/document_detail/144643.html).
  * @param request  the request parameters of GetDataCorrectSQLFile  GetDataCorrectSQLFileRequest
  * @return GetDataCorrectSQLFileResponse
 */
async function getDataCorrectSQLFile(request: GetDataCorrectSQLFileRequest): GetDataCorrectSQLFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectSQLFile', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectTaskDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html), [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html), or [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html) operation to obtain the ticket ID.

This parameter is required.', example='12435523', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='14325432', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectTaskDetailResponseBody = {
  dataCorrectTaskDetail?: {
    actualAffectRows?: long(name='ActualAffectRows', description='The number of rows affected by the SQL statement.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the task was created.', example='2021-03-05 15:08:55'),
    DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='1234235'),
    jobStatus?: string(name='jobStatus', description='The state of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
  }(name='DataCorrectTaskDetail', description='The details of the data change task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCorrectTaskDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCorrectTaskDetail  GetDataCorrectTaskDetailRequest
  * @return GetDataCorrectTaskDetailResponse
 */
async function getDataCorrectTaskDetail(request: GetDataCorrectTaskDetailRequest): GetDataCorrectTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCronClearConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCronClearConfigResponseBody = {
  dataCronClearConfig?: {
    cronCallTimes?: string(name='CronCallTimes', description='The number of times that the task is run.', example='2'),
    cronFormat?: string(name='CronFormat', description='The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](https://help.aliyun.com/document_detail/206581.html).', example='0 0 23 ? * 7,1'),
    cronLastCallStartTime?: string(name='CronLastCallStartTime', description='The time when the task was last run.', example='2022-11-18 00:00:00'),
    cronNextCallTime?: string(name='CronNextCallTime', description='The time when the task is run next time. This parameter is displayed only when the status of the scheduled task is SUCCESS.', example='2022-11-19 00:00:00'),
    cronStatus?: string(name='CronStatus', description='The status of the scheduled task. If this parameter is empty, it indicates the task is not run. Valid values:

*   PAUSE: The task is suspended.
*   WAITING: The task is waiting to be run.
*   SUCCESS: The task is complete.', example='PAUSE'),
    currentClearTaskCount?: long(name='CurrentClearTaskCount', description='The number of times that the Optimize Table statement is automatically exeuted. This parameter is valid only when the value of the OptimizeTableAfterEveryClearTimes parameter is greater than 0.', example='0'),
    duration?: string(name='Duration', description='The execution duration of the task. Unit: hours. If the value is 0, it indicates the duration is not specified.', example='1'),
    optimizeTableAfterEveryClearTimes?: long(name='OptimizeTableAfterEveryClearTimes', description='Specifies whether to enable automatic execution of the OPTIMIZE TABLE statement. Valid values:

*   0: disables automatic execution
*   A number greater than 0: enables automatic execution. The number specifies the number of times that cleanup operations must be performed before the OPTIMIZE TABLE statement is automatically executed.', example='0'),
  }(name='DataCronClearConfig', description='Data configuration.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GetDataCronClearConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCronClearConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCronClearConfig  GetDataCronClearConfigRequest
  * @return GetDataCronClearConfigResponse
 */
async function getDataCronClearConfig(request: GetDataCronClearConfigRequest): GetDataCronClearConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCronClearConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCronClearTaskDetailListRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can query the ticket ID from the response parameters of the [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html) operation.

This parameter is required.', example='432532', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='12345', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCronClearTaskDetailListResponseBody = {
  dataCronClearTaskDetailList?: [ 
    {
      actualAffectRows?: long(name='ActualAffectRows', description='The number of rows affected by the SQL task.', example='1'),
      createTime?: string(name='CreateTime', description='The time when the SQL task was created.', example='2021-01-14 10:00:00'),
      DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='432523'),
      jobStatus?: string(name='jobStatus', description='The state of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
    }
  ](name='DataCronClearTaskDetailList', description='The historical data cleansing tasks'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of SQL tasks.', example='1'),
}

model GetDataCronClearTaskDetailListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataCronClearTaskDetailListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataCronClearTaskDetailList  GetDataCronClearTaskDetailListRequest
  * @return GetDataCronClearTaskDetailListResponse
 */
async function getDataCronClearTaskDetailList(request: GetDataCronClearTaskDetailListRequest): GetDataCronClearTaskDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCronClearTaskDetailList', 'POST', '/', 'json', false, 'json', request);
}

model GetDataExportDownloadURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='546****', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The ID of the Alibaba Cloud account that is used to call the API operation.', example='21400447956867****', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model GetDataExportDownloadURLResponseBody = {
  downloadURLResult?: {
    hasResult?: boolean(name='HasResult', description='Indicates whether export results are available for download. Valid values:

*   **true**
*   **false**', example='true'),
    tipMessage?: string(name='TipMessage', description='The message that indicates an exception.', example='tip message'),
    URL?: string(name='URL', description='The download URL of the file that records the export results for the ticket.', example='https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
  }(name='DownloadURLResult', description='The details of the download URL of the file that records the export results for the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='4BF24EA5-9013-4C85-AE68-6C23AF5E0097'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataExportDownloadURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataExportDownloadURLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataExportDownloadURL  GetDataExportDownloadURLRequest
  * @return GetDataExportDownloadURLResponse
 */
async function getDataExportDownloadURL(request: GetDataExportDownloadURLRequest): GetDataExportDownloadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportDownloadURL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataExportOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to query the ticket ID.

This parameter is required.', example='123456', position='Body'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model GetDataExportOrderDetailResponseBody = {
  dataExportOrderDetail?: {
    keyInfo?: {
      jobId?: long(name='JobId', description='Export task ID.', example='1385****'),
      jobStatus?: string(name='JobStatus', description='The state of the data export ticket. Valid values:

*   **PRE_CHECKING**: The ticket was being prechecked.
*   **PRE_CHECK_SUCCESS**: The ticket passed the precheck.
*   **PRE_CHECK_FAIL**: The ticket failed to pass the prechecked.
*   **WAITING_APPLY_AUDIT**: The ticket was to be submitted for approval.
*   **APPLY_AUDIT_SUCCESS**: The ticket was submitted for approval.
*   **ENABLE_EXPORT**: The ticket was approved. Data can be exported.
*   **WAITING_EXPORT**: Data was to be scheduled for export.
*   **DOING_EXPORT**: Data was being exported.
*   **EXPORT_FAIL**: Data failed to be exported.
*   **EXPORT_SUCCESS**: Data was exported.', example='EXPORT_SUCCESS'),
      preCheckId?: long(name='PreCheckId', description='The precheck ID.', example='123'),
    }(name='KeyInfo', description='The status information.'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', description='The number of rows that were affected by the SQL statement.', example='1'),
      classify?: string(name='Classify', description='The category of the reason for the data export.', example='text'),
      database?: string(name='Database', description='The name of the database from which data was exported.', example='xxx@xxx:3306'),
      dbId?: int32(name='DbId', description='The ID of the database from which data was exported.', example='123'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='test'),
      exeSQL?: string(name='ExeSQL', description='The SQL statement that was executed to export data.', example='select 1'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', description='Indicates whether the affected rows are skipped.', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', description='The reason why the affected rows are skipped.', example='empty'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database.', example='false'),
    }(name='OrderDetail', description='The details of the ticket.'),
  }(name='DataExportOrderDetail', description='The information about the data export ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataExportOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataExportOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataExportOrderDetail  GetDataExportOrderDetailRequest
  * @return GetDataExportOrderDetailResponse
 */
async function getDataExportOrderDetail(request: GetDataExportOrderDetailRequest): GetDataExportOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportOrderDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetDataExportPreCheckDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='34****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model GetDataExportPreCheckDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  preCheckResult?: {
    ignoreAffectRows?: boolean(name='IgnoreAffectRows', description='Specifies whether to skip verification. Valid values:

- true
- false', example='true'),
    preCheckDetailList?: {
      preCheckDetailList?: [ 
      {
        affectRows?: long(name='AffectRows', description='The estimated number of data rows to be affected.', example='1'),
        SQL?: string(name='SQL', description='The SQL statement.', example='SELECT * FROM tmp_table LIMIT 1'),
      }
    ](name='PreCheckDetailList')
    }(name='PreCheckDetailList', description='The list of pre-check details.'),
  }(name='PreCheckResult', description='Indicates the result of the precheck task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDataExportPreCheckDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataExportPreCheckDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataExportPreCheckDetail  GetDataExportPreCheckDetailRequest
  * @return GetDataExportPreCheckDetailResponse
 */
async function getDataExportPreCheckDetail(request: GetDataExportPreCheckDetailRequest): GetDataExportPreCheckDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportPreCheckDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataImportSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='14****', minimum=1, maximum=9223372036854775807, position='Query'),
  sqlId: long(name='SqlId', description='The SQL ID. You can call the ListDataImportSQLPreCheckDetail operation to query the SQL ID.

This parameter is required.', example='15****', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataImportSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  SQLDetail?: {
    execSql?: string(name='ExecSql', description='The SQL script.', example='insert into t1 values (1);'),
  }(name='SQLDetail', description='The details of SQL statements.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataImportSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataImportSQLResponseBody(name='body'),
}

/**
  * @description You can call this operation only if the data is imported in security mode in your data import ticket.
  * @param request  the request parameters of GetDataImportSQL  GetDataImportSQLRequest
  * @return GetDataImportSQLResponse
 */
async function getDataImportSQL(request: GetDataImportSQLRequest): GetDataImportSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataImportSQL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataLakeCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  tid?: long(name='Tid', example='3', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model GetDataLakeCatalogResponseBody = {
  catalog?: DLCatalog(name='Catalog'),
  errorCode?: string(name='ErrorCode', example='400'),
  errorMessage?: string(name='ErrorMessage', example='code: 404, can not find catalog, name : hiv request id: 6090E571-E5B1-1E6D-BF44-F9E10E8B7EB1'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model GetDataLakeCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataLakeCatalogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataLakeCatalog  GetDataLakeCatalogRequest
  * @return GetDataLakeCatalogResponse
 */
async function getDataLakeCatalog(request: GetDataLakeCatalogRequest): GetDataLakeCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataLakeCatalog', 'POST', '/', 'json', false, 'json', request);
}

model GetDataLakeDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='default', position='Query'),
  tid?: long(name='Tid', example='3', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model GetDataLakeDatabaseResponseBody = {
  database?: DLDatabase(name='Database'),
  errorCode?: string(name='ErrorCode', example='404'),
  errorMessage?: string(name='ErrorMessage', example='code: 404, can not find catalog, name : hive1 request id: FF737753-9641-1F51-AFDA-7DF541114B29'),
  requestId?: string(name='RequestId', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  success?: boolean(name='Success', example='true'),
}

model GetDataLakeDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataLakeDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataLakeDatabase  GetDataLakeDatabaseRequest
  * @return GetDataLakeDatabaseResponse
 */
async function getDataLakeDatabase(request: GetDataLakeDatabaseRequest): GetDataLakeDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataLakeDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetDataLakeFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  functionName: string(name='FunctionName', description='This parameter is required.', example='my_funciton', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='12****', position='Query'),
}

model GetDataLakeFunctionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  function?: DLFunction(name='Function'),
  requestId?: string(name='RequestId', example='D911009F-3E95-5AFD-8CF1-73F7B4F15D6E'),
  success?: boolean(name='Success', example='true'),
}

model GetDataLakeFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataLakeFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataLakeFunction  GetDataLakeFunctionRequest
  * @return GetDataLakeFunctionResponse
 */
async function getDataLakeFunction(request: GetDataLakeFunctionRequest): GetDataLakeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataLakeFunction', 'POST', '/', 'json', false, 'json', request);
}

model GetDataLakePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  partitionValues: [ string ](name='PartitionValues', description='This parameter is required.', shrink='simple', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model GetDataLakePartitionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  partition?: DLPartition(name='Partition'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model GetDataLakePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataLakePartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataLakePartition  GetDataLakePartitionRequest
  * @return GetDataLakePartitionResponse
 */
async function getDataLakePartition(request: GetDataLakePartitionRequest): GetDataLakePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataLakePartition', 'POST', '/', 'json', false, 'json', request);
}

model GetDataLakeTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='100g_customer', position='Query'),
  tid?: long(name='Tid', example='3', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model GetDataLakeTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='400'),
  errorMessage?: string(name='ErrorMessage', example='Unknown server error'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: string(name='Success', example='true'),
  table?: DLTable(name='Table'),
}

model GetDataLakeTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataLakeTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataLakeTable  GetDataLakeTableRequest
  * @return GetDataLakeTableResponse
 */
async function getDataLakeTable(request: GetDataLakeTableRequest): GetDataLakeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataLakeTable', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackJobDegreeRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='321****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackJobDegreeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  jobDegree?: {
    downloadCompletionDegree?: double(name='DownloadCompletionDegree', description='The progress of binary log download. Valid values: 0 to 1. A value of 1 indicates that binary log download is complete.', example='1'),
    filterCompletionDegree?: double(name='FilterCompletionDegree', description='The progress of binary log parsing. Valid values: 0 to 1. A value of 1 indicates that binary log parsing is complete.', example='1'),
    jobStatus?: string(name='JobStatus', description='The status of the data tracking task. Valid values:

*   **INIT**: The task is being initialized.
*   **LISTING**: The binary logs are being obtained.
*   **LIST_SUCCESS**: The binary logs are successfully obtained.
*   **DOWNLOADING**: The binary logs are being downloaded.
*   **DOWNLOAD_FAIL**: The binary logs failed to be downloaded.
*   **DOWNLOAD_SUCCESS**: The binary logs are successfully downloaded.
*   **FILTERING**: The binary logs are being parsed.
*   **FILTER_FAIL**: The binary logs failed to be parsed.
*   **FILTER_SUCCESS**: The binary logs are successfully parsed.', example='FILTER_SUCCESS'),
    listCompletionDegree?: double(name='ListCompletionDegree', description='The progress of binary log obtaining. Valid values: 0 to 1. A value of 1 indicates that binary log obtaining is complete.', example='1'),
    statusDesc?: string(name='StatusDesc', description='The description of the task status.', example='searching success'),
  }(name='JobDegree', description='The progress details of the data tracking task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDataTrackJobDegreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataTrackJobDegreeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataTrackJobDegree  GetDataTrackJobDegreeRequest
  * @return GetDataTrackJobDegreeResponse
 */
async function getDataTrackJobDegree(request: GetDataTrackJobDegreeRequest): GetDataTrackJobDegreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackJobDegree', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackJobTableMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.

This parameter is required.', example='12345', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackJobTableMetaResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tableMetaList?: [ 
    {
      columns?: [ 
        {
          charset?: string(name='Charset', description='The name of the character set.', example='utf8mb4'),
          columnName?: string(name='ColumnName', description='The name of the column.', example='claimantno'),
          columnPosition?: int32(name='ColumnPosition', description='The position of the column.', example='1'),
          columnType?: string(name='ColumnType', description='The data type of the column. Examples: BIGINT, INT, and VARCHAR.', example='BIGINT'),
          fictive?: boolean(name='Fictive', description='Indicates whether the column is a virtual column. Valid values:

*   **true**
*   **false**', example='false'),
        }
      ](name='Columns', description='The information about columns.'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='DB165'),
      tableName?: string(name='TableName', description='The name of the table.', example='live_stat'),
    }
  ](name='TableMetaList', description='The metadata of tables.'),
}

model GetDataTrackJobTableMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataTrackJobTableMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataTrackJobTableMeta  GetDataTrackJobTableMetaRequest
  * @return GetDataTrackJobTableMetaResponse
 */
async function getDataTrackJobTableMeta(request: GetDataTrackJobTableMetaRequest): GetDataTrackJobTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackJobTableMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='4328****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackOrderDetailResponseBody = {
  dataTrackOrderDetail?: {
    databaseSearchName?: string(name='DatabaseSearchName', description='The name that is used to search for the database.', example='xxx@yyy:3306'),
    dbId?: long(name='DbId', description='The ID of the database.', example='3431****'),
    jobEndTime?: string(name='JobEndTime', description='The end time of the time range in which data operations are tracked. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 10:00:00'),
    jobStartTime?: string(name='JobStartTime', description='The start time of the time range in which data operations are tracked. The time is in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 00:00:00'),
    jobStatus?: string(name='JobStatus', description='The status of the data tracking task. Valid values:

*   **INIT**: The task is being initialized.
*   **LISTING**: The binary logs are being obtained.
*   **LIST_SUCCESS**: The binary logs are successfully obtained.
*   **DOWNLOADING**: The binary logs are being downloaded.
*   **DOWNLOAD_FAIL**: The binary logs failed to be downloaded.
*   **DOWNLOAD_SUCCESS**: The binary logs are successfully downloaded.
*   **FILTERING**: The binary logs are being parsed.
*   **FILTER_FAIL**: The binary logs failed to be parsed.
*   **FILTER_SUCCESS**: The binary logs are successfully parsed.', example='FILTER_SUCCESS'),
    logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**
*   **false**', example='false'),
    schemaName?: string(name='SchemaName', description='The name of the database.', example='as_task'),
    statusDesc?: string(name='StatusDesc', description='The description of the task status.', example='searching success'),
    tableNames?: [ string ](name='TableNames', description='The names of the tables for which data operations are tracked.'),
    trackTypes?: [ string ](name='TrackTypes', description='The types of data operations that are tracked.'),
  }(name='DataTrackOrderDetail', description='The details of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDataTrackOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataTrackOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataTrackOrderDetail  GetDataTrackOrderDetailRequest
  * @return GetDataTrackOrderDetailResponse
 */
async function getDataTrackOrderDetail(request: GetDataTrackOrderDetailRequest): GetDataTrackOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The endpoint that is used to connect to the database.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  port: int32(name='Port', description='The port that is used to connect to the database.

This parameter is required.', example='3306', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database.

This parameter is required.', example='mysql', position='Query'),
  sid?: string(name='Sid', description='The system identifier (SID) of the database.

>  The SID uniquely identifies an Oracle database. After a database is created, a SID is generated for the database.', example='test_sid', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.', example='-1', position='Query'),
}

model GetDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.', example='def'),
    databaseId?: string(name='DatabaseId', description='The ID of the database.', example='984****'),
    dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='mysql'),
    dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA).', example='27****'),
    dbaName?: string(name='DbaName', description='The nickname of the DBA.', example='dba_name'),
    encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf8mb4'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: SIT environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
    host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='192.168.XX.XX'),
    instanceAlias?: string(name='InstanceAlias', description='The alias of the instance.', example='test'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='149****'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners of the database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The names of the owners of the database.'),
    port?: int32(name='Port', description='The port that is used to connect to the database.', example='3306'),
    schemaName?: string(name='SchemaName', description='The name of the database.', example='mysql'),
    searchName?: string(name='SearchName', description='The keyword that is used to search for the database.', example='mysql@192.168.XX.XX:3306'),
    sid?: string(name='Sid', description='The SID of the database.

>  The value of the parameter is returned only for Oracle databases.', example='test_sid'),
    state?: string(name='State', description='The status of the database. Valid values:

*   **NORMAL**: The database is running as expected.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='NORMAL'),
  }(name='Database', description='The details of the database.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='An unknown error occurred.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatabase  GetDatabaseRequest
  * @return GetDatabaseResponse
 */
async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseExportOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='821****', position='Body'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='3***', position='Query'),
}

model GetDatabaseExportOrderDetailResponseBody = {
  databaseExportOrderDetail?: {
    comment?: string(name='Comment', description='The business background information of the database export ticket.', example='test'),
    committer?: string(name='Committer', description='The user who submitted the ticket.', example='dmsuser'),
    committerId?: string(name='CommitterId', description='The ID of the user who submitted the ticket. This ID is a user ID and is not the ID of an Alibaba Cloud account.', example='12***'),
    id?: long(name='Id', description='The ticket ID.', example='821****'),
    keyInfo?: {
      auditDate?: string(name='AuditDate', description='The time when the ticket was submitted.', example='2023-04-13 13:44:59'),
      config?: {
        dbName?: string(name='DbName', description='The database name.', example='dmstest'),
        exportContent?: string(name='ExportContent', description='The type of data that was exported. Valid values:

*   **DATA**: The data of the database was exported.
*   **STRUCT**: The schema of the database was exported.
*   **DATA_STRUCT**: The data and schema of the database were exported.', example='DATA'),
        exportTypes?: {
          exportTypes?: [ string ](name='ExportTypes')
        }(name='ExportTypes', description='The type of schema that was exported.'),
        SQLExtOption?: {
          SQLExtOption?: [ string ](name='SQLExtOption')
        }(name='SQLExtOption', description='The extension options of the SQL script.'),
        selectedTables?: {
          selectedTables?: [ string ](name='SelectedTables')
        }(name='SelectedTables', description='The tables that were exported from the database.'),
        targetOption?: string(name='TargetOption', description='The format in which the database was exported. Valid values:

*   **SQL**
*   **CSV**
*   **XLSX**', example='SQL'),
      }(name='Config', description='The configuration information about the ticket.'),
      dbId?: long(name='DbId', description='The database ID.', example='2583****'),
      downloadURL?: string(name='DownloadURL', description='The URL that is used to download the export result.', example='https://oss.xxx.com'),
    }(name='KeyInfo', description='The key information about the ticket.'),
    log?: string(name='Log', description='The execution logs.', example='2023-04-12 14:58:32:015 Database Dump Start.
2023-04-12 14:58:32:096 set server side query timeout, sql : set max_execution_time = 0'),
    searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx.xxx.xxx.xxx:3306'),
    statusDesc?: string(name='StatusDesc', description='The status description of the ticket.', example='ticket approval'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc', description='The status description of the workflow.', example='ticket approval'),
  }(name='DatabaseExportOrderDetail', description='The details of the database export ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetDatabaseExportOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseExportOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatabaseExportOrderDetail  GetDatabaseExportOrderDetailRequest
  * @return GetDatabaseExportOrderDetailResponse
 */
async function getDatabaseExportOrderDetail(request: GetDatabaseExportOrderDetailRequest): GetDatabaseExportOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabaseExportOrderDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetDbExportDownloadURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='This parameter is required.', example='73****', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model GetDbExportDownloadURLResponseBody = {
  downloadURLResult?: {
    hasResult?: boolean(name='HasResult', example='true'),
    tipMessage?: string(name='TipMessage', example='tip message'),
    URL?: string(name='URL', example='https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
  }(name='DownloadURLResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model GetDbExportDownloadURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDbExportDownloadURLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDbExportDownloadURL  GetDbExportDownloadURLRequest
  * @return GetDbExportDownloadURLResponse
 */
async function getDbExportDownloadURL(request: GetDbExportDownloadURLRequest): GetDbExportDownloadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDbExportDownloadURL', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The endpoint of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the endpoint.

This parameter is required.', example='172.17.XXX.XXX', position='Query'),
  port: int32(name='Port', description='The port number that is used to connect to the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the port number.

This parameter is required.', example='5432', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the SID.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='2***', position='Query'),
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  instance?: {
    dataLinkName?: string(name='DataLinkName', description='The name of the database link for the database instance.', example='test'),
    databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database.', example='******'),
    databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database instance.', example='dbuser'),
    dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA) for the database instance.', example='29****'),
    dbaNickName?: string(name='DbaNickName', description='The nickname of the DBA for the database instance.', example='dbaname'),
    ddlOnline?: int32(name='DdlOnline', description='Indicates whether the lock-free schema change feature is enabled for the database instance.', example='0'),
    ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the Elastic Compute Service (ECS) instance on which the database instance is deployed.', example='i-bp124ldpklqz59y3****'),
    ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.', example='cn-beijing'),
    envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='test'),
    exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.', example='86400'),
    host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='192.168.XXX.XXX'),
    instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance.', example='test'),
    instanceId?: string(name='InstanceId', description='The ID of the database instance.', example='188****'),
    instanceSource?: string(name='InstanceSource', description='The source of the database instance.', example='ECS_OWN'),
    instanceType?: string(name='InstanceType', description='The type of the database instance.', example='postgresql'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners for the database instance.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The nicknames of the owners for the database instance.'),
    port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='5432'),
    queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.', example='7200'),
    safeRuleId?: string(name='SafeRuleId', description='The ID of the security rule set for the database instance.', example='3****'),
    sellSitd?: string(name='SellSitd', description='Whether sensitive data protection is enabled.  Valid values:

- **true**: Enable.

- **false**: Close.', example='false'),
    sellTrust?: string(name='SellTrust'),
    sid?: string(name='Sid', description='The SID of the database instance.', example='test'),
    standardGroup?: {
      groupMode?: string(name='GroupMode', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='NONE_CONTROL'),
      groupName?: string(name='GroupName', description='The name of the security rule set corresponding to the control mode.', example='test group name'),
    }(name='StandardGroup', description='The control mode of the database instance.'),
    state?: string(name='State', description='The status of the database instance. Valid values:

*   **NORMAL**: normal
*   **DISABLE**: disabled', example='NORMAL'),
    useDsql?: int32(name='UseDsql', description='Indicates whether the cross-database query feature is enabled for the database instance. Valid values:

*   **0**: disabled
*   **1**: enabled', example='0'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the database instance belongs.', example='vpc-o6wrloqsdqc9io3mg****'),
  }(name='Instance', description='The details of the database instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6C80B69-3203-56AC-8021-18BA72A6F4E1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetIntervalLimitOfSLARequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetIntervalLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  intervalLimit?: int32(name='IntervalLimit', description='The minimum scheduling cycle. Unit: minutes.', example='59'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetIntervalLimitOfSLAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntervalLimitOfSLAResponseBody(name='body'),
}

/**
  * @description The scheduling cycle of a task flow must be greater than the minimum scheduling cycle configured in the SLA rule for the task flow.
  * @param request  the request parameters of GetIntervalLimitOfSLA  GetIntervalLimitOfSLARequest
  * @return GetIntervalLimitOfSLAResponse
 */
async function getIntervalLimitOfSLA(request: GetIntervalLimitOfSLARequest): GetIntervalLimitOfSLAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIntervalLimitOfSLA', 'POST', '/', 'json', false, 'json', request);
}

model GetLhSpaceByNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceName: string(name='SpaceName', description='The name of the workspace.

This parameter is required.', example='test_space', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetLhSpaceByNameResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  lakehouseSpace?: {
    creatorId?: string(name='CreatorId', description='The ID of the user who creates the workspace.', example='51***'),
    description?: string(name='Description', description='The description of the workspace.', example='test'),
    devDbId?: int32(name='DevDbId', description='The ID of the development database.', example='2435****'),
    dwDbType?: string(name='DwDbType', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL', example='14'),
    id?: long(name='Id', description='The ID of the workspace.', example='1'),
    isDeleted?: boolean(name='IsDeleted', description='Indicates whether the workspace is deleted. Valid values:

*   **true**: The workspace is deleted.
*   **false**: The workspace is not deleted.', example='false'),
    mode?: int32(name='Mode', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode
*   **1**: standard mode', example='1'),
    prodDbId?: int32(name='ProdDbId', description='The ID of the production database.', example='2442****'),
    spaceConfig?: string(name='SpaceConfig', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}'),
    spaceName?: string(name='SpaceName', description='The name of the workspace.', example='test_space'),
    tenantId?: string(name='TenantId', description='The ID of the tenant to which the workspace belongs.', example='3***'),
  }(name='LakehouseSpace', description='The workspace for data warehouse development.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8CA4A8-AB2D-55B7-BD30-01A4609F40D8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetLhSpaceByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLhSpaceByNameResponseBody(name='body'),
}

/**
  * @description You are a DMS administrator or a database administrator (DBA).
  * @param request  the request parameters of GetLhSpaceByName  GetLhSpaceByNameRequest
  * @return GetLhSpaceByNameResponse
 */
async function getLhSpaceByName(request: GetLhSpaceByNameRequest): GetLhSpaceByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLhSpaceByName', 'POST', '/', 'json', false, 'json', request);
}

model GetLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the logical database.

This parameter is required.', example='1***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', position='Query'),
}

model GetLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The status code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicDatabase?: {
    alias?: string(name='Alias', description='The alias of the logical database.', example='test_logic_alias'),
    databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1***'),
    databaseIds?: {
      databaseIds?: [ long ](name='DatabaseIds')
    }(name='DatabaseIds', description='The IDs of database shards of the logical database.'),
    dbType?: string(name='DbType', description='The database engine. For more information about the valid values of the DbType parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='POLARDB'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: pre-release environment
*   test: test environment
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: staging environment', example='dev'),
    logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. The return value is true.', example='true'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners of the logical database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The names of the owners of the logical database.'),
    schemaName?: string(name='SchemaName', description='The name of the logical database.', example='test_logic_db'),
    searchName?: string(name='SearchName', description='The name that is used to search for the logical database.', example='test_logic_db[test_logic_alias]'),
  }(name='LogicDatabase', description='The details of the logical database.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GetLogicDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogicDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLogicDatabase  GetLogicDatabaseRequest
  * @return GetLogicDatabaseResponse
 */
async function getLogicDatabase(request: GetLogicDatabaseRequest): GetLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetMetaTableColumnRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The globally unique identifier (GUID) of the table in Data Management (DMS).

*   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to obtain the value of this parameter.
*   If the database to which the table belongs is a physical database, you can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the value of this parameter.

This parameter is required.', example='IDB_40753****.qntest2.activity_setting', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetMetaTableColumnResponseBody = {
  columnList?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**: The column is an auto-increment column.
*   **false**: The column is not an auto-increment column.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the column.', example='63513****'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='has_promotion'),
      columnType?: string(name='ColumnType', description='The data type of the column.

> The return value of a column is not unique, such as **bigint** or **int**.', example='bigint(1)'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='0'),
      dataPrecision?: int32(name='DataPrecision', description='The precision of the field.', example='19'),
      dataScale?: int32(name='DataScale', description='The number of decimal places for the field.', example='0'),
      description?: string(name='Description', description='The description of the column.', example='Whether discounts are provided'),
      nullable?: boolean(name='Nullable', description='Indicates whether the field can be empty. Valid values:

*   **true**: The field can be empty.
*   **false**: The field cannot be empty.', example='false'),
      position?: int32(name='Position', description='The position of the field in the table.', example='1'),
      primaryKey?: string(name='PrimaryKey', description='Indicates whether the field is the primary key. Valid values:

*   **true**: The field is the primary key.
*   **false**: The field is not the primary key.', example='true'),
      securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the column. Valid values:

*   **INNER**: The column is not sensitive.
*   **SENSITIVE**: The column is sensitive.
*   **CONFIDENTIAL**: The column is confidential.

> For more information, see [Sensitivity levels of columns](https://help.aliyun.com/document_detail/66091.html).', example='INNER'),
    }
  ](name='ColumnList', description='The details about fields in the table.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingTableGuid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='TableGuid is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='087DFBA1-378B-5D25-B13B-31F6409F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetMetaTableColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableColumnResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances whose control mode is Security Collaboration.
  * @param request  the request parameters of GetMetaTableColumn  GetMetaTableColumnRequest
  * @return GetMetaTableColumnResponse
 */
async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetaTableColumn', 'POST', '/', 'json', false, 'json', request);
}

model GetMetaTableDetailInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in Data Management (DMS).

> 

*   You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.

*   You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.

This parameter is required.', example='IDB_L_9032.db-test.yuyang_test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.', example='123', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetMetaTableDetailInfoResponseBody = {
  detailInfo?: {
    columnList?: [ 
      {
        autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   true: The column is an auto-increment column.
*   false: The column is not an auto-increment column.', example='true'),
        columnId?: string(name='ColumnId', description='The ID of the column.', example='191234849'),
        columnName?: string(name='ColumnName', description='The name of the column.', example='id'),
        columnType?: string(name='ColumnType', description='The data type of the column. Examples: Bigint, Int, and Varchar.', example='bigint(20) unsigned'),
        dataLength?: long(name='DataLength', description='The length of the field.', example='0'),
        dataPrecision?: int32(name='DataPrecision', description='The precision of the field.', example='0'),
        dataScale?: int32(name='DataScale', description='The scale of the column.', example='0'),
        description?: string(name='Description', description='The description of the column.', example='test'),
        nullable?: boolean(name='Nullable', description='Indicates whether the column is nullable. Valid values:

*   true: The column is nullable.
*   false: The column is not nullable.', example='false'),
        position?: string(name='Position', description='The position of the field in the table.', example='1'),
      }
    ](name='ColumnList', description='The columns in the table.'),
    indexList?: [ 
      {
        indexColumns?: [ string ](name='IndexColumns', description='The index column.'),
        indexId?: string(name='IndexId', description='The ID of the index.', example='123'),
        indexName?: string(name='IndexName', description='The name of the index.', example='PRIMARY'),
        indexType?: string(name='IndexType', description='The type of the index. Examples: Primary, Unique, and Normal.', example='Primary'),
        unique?: boolean(name='Unique', description='Indicates whether the index is unique. Valid values:

*   true: The index is unique.
*   false: The index is not unique.', example='false'),
      }
    ](name='IndexList', description='The list of indexes.'),
  }(name='DetailInfo', description='The details of the table.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E881CB2F-DE42-42E5-90EB-8B3173DCB9B9'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableDetailInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableDetailInfoResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances whose control mode is Security Collaboration.
  * @param request  the request parameters of GetMetaTableDetailInfo  GetMetaTableDetailInfoRequest
  * @return GetMetaTableDetailInfoResponse
 */
async function getMetaTableDetailInfo(request: GetMetaTableDetailInfoRequest): GetMetaTableDetailInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetaTableDetailInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOnlineDDLProgressRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobDetailId: long(name='JobDetailId', description='The ID of the OnlineDDL SQL task details. You can call the [ListDBTaskSQLJobDetail](https://help.aliyun.com/document_detail/207073.html) operation to obtain the task detail ID.

This parameter is required.', example='15***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOnlineDDLProgressResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  onlineDDLTaskDetail?: {
    cleanStrategy?: string(name='CleanStrategy', description='The cleanup policy of the original table after the cut-over. Valid values:

*   **DROP**: Invalid original tables are deleted.
*   **MOVE**: Invalid original tables are moved to the test database. You can delete the tables manually.
*   **NOTHING**: Invalid original tables are retained in the original database. You can delete the tables manually.', example='DROP'),
    copyChunkMode?: string(name='CopyChunkMode', description='The policy of full replication. Valid values:

*   **AUTO**: DMS dynamically adjusts the chunk size based on the performance of the database. Tables are locked for less than 1.5 seconds during a single replication operation.
*   **RUNNING**: DMS uses the specified value of the CopyChunkSize parameter. The valid value of the CopyChunkSize parameter ranges from 1 to 60000. If you set this parameter to RUNNING, you must specify the CopyChunkSize parameter.', example='AUTO'),
    copyChunkSize?: long(name='CopyChunkSize', description='The size of each chunk that is used to replicate data. This parameter is used to specify the size of each chunk. A larger chunk size increases the replication efficiency and decreases the business performance.

> During full replication, the original table is divided into N small chunks and each chunk is replicated to the temporary table one by one. By default, DMS dynamically adjusts the size of each chunk.', example='1000'),
    copyCount?: long(name='CopyCount', description='The actual amount of data replicated from the original table in the lock-free change operation.', example='9'),
    copyTotal?: long(name='CopyTotal', description='The estimated total number of rows of the data. The value is obtained from the statistical data in the information_schema database. In most cases, the estimated total number of rows is smaller than the actual number of rows in a table.', example='10'),
    cutoverFailRetryTimes?: long(name='CutoverFailRetryTimes', description='The number of retries when the cut-over fails.', example='3'),
    cutoverLockTimeSeconds?: long(name='CutoverLockTimeSeconds', description='The maximum period of time that a table can be locked during cut-over. Unit: seconds.', example='2'),
    cutoverWindowEndTime?: string(name='CutoverWindowEndTime', description='The end of the time window of the cut-over operation. This value is at least 30 minutes later than the CutoverWindowStartTime parameter. Default value: 23:59:59', example='13:00:00'),
    cutoverWindowStartTime?: string(name='CutoverWindowStartTime', description='The beginning of the time window of the cut-over operation. Default value: 00:00:00. This parameter controls the time window of the cut-over. Cut-over can be performed only when the cut-over conditions are met and the time is within the specified time window. If the time is not within the time window, the cut-over operation is not performed until the time reaches the beginning of the time window.', example='12:00:00'),
    delaySeconds?: long(name='DelaySeconds', description='The replay latency of DMS. Unit: seconds. The replay latency is the period of time that is taken to replay the binary logs of the table to the temporary table. The latency does not indicate the data migration latency between a primary database and a secondary database.', example='0'),
    jobStatus?: string(name='JobStatus', description='The state of the task. Valid values:

*   **INIT**: The task is being initialized.
*   **SUCCESS**: The task is complete.
*   **RUNNING**: The task is being executed.
*   **WAITING_CUTOVER**: The task is waiting for cut-over.
*   **RESTARTING**: The task is restarting.
*   **PAUSE**: The task is suspended.
*   **UNSUPPORTED**: The task is not supported.
*   **CANCELED**: The task is canceled.
*   **FAIL**: The task failed.
*   **INTERRUPT**: The task is interrupted.', example='SUCCESS'),
    progressRatio?: string(name='ProgressRatio', description='The estimated execution progress. The actual progress is subject to the task status.', example='90%'),
    statusDesc?: string(name='StatusDesc', description='The description of the task status.', example='Success'),
  }(name='OnlineDDLTaskDetail', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetOnlineDDLProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOnlineDDLProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOnlineDDLProgress  GetOnlineDDLProgressRequest
  * @return GetOnlineDDLProgressResponse
 */
async function getOnlineDDLProgress(request: GetOnlineDDLProgressRequest): GetOnlineDDLProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnlineDDLProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetOpLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseName?: string(name='DatabaseName', description='DatabaseName.', example='dmstest@rm-bp1qb97d4b****.mysql.rds.aliyuncs.com:3306[poc_dev]', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.

This parameter is required.', example='2022-03-29 10:00:00', position='Query'),
  module?: string(name='Module', description='The functional module for which you want to query operation logs. If you do not specify this parameter, operation logs for all functional modules are returned. Valid values:

*   **PERMISSION**: permissions
*   **OWNER**: data owner
*   **SQL_CONSOLE**: data query
*   **SQL_CONSOLE_EXPORT**: query result export
*   **DATA_CHANGE**: data change
*   **DATA_EXPORT**: data export
*   **SQL_REVIEW**: SQL review
*   **DT_SYNC**: database and table synchronization
*   **DT_DETAIL**: database and table details
*   **DB_TASK**: task management
*   **INSTANCE_MANAGE**: instance management
*   **USER_MANAGE**: user management
*   **SECURITY_RULE**: security rules
*   **CONFIG_MANAGE**: configuration management
*   **RESOURCE_AUTH**: resource authorization
*   **ACCESS_WHITE_IP**: access IP address whitelist
*   **NDDL**: schema design
*   **DSQL_CONSOLE**: cross-database data query
*   **DSQL_CONSOLE_EXPORT**: cross-database query result export
*   **DATA_TRACT**: data tracking
*   **DATA_QUALITY**: data quality
*   **DATALINK_MANAGE** :DBLink management
*   **DATASEC_MANAGE**: sensitive data management
*   **SELL**: sales', example='SECURITY_RULE', position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30
*   50
*   100

This parameter is required.', example='30', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.

This parameter is required.', example='2022-03-23 10:00:00', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
  userNick?: string(name='UserNick', description='UserNick.', example='test_name', position='Query'),
}

model GetOpLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  opLogDetails?: {
    opLogDetail?: [ 
    {
      database?: string(name='Database', description='The endpoint of the database instance.

> 

*   This parameter is valid only for database instances of the LocalInstance type.

*   This parameter is valid only for operations on the functional modules related to tasks.', example='dmstest_prod_database@dmstest.rds... [Test instance]'),
      module?: string(name='Module', description='The functional module for which the operation log is queried.', example='SECURITY_RULE'),
      opContent?: string(name='OpContent', description='The details of the operation.', example='SELECT * FROM `orders` \\n LIMIT 20'),
      opTime?: string(name='OpTime', description='The time when the operation was performed.', example='2022-03-28 16:45:19'),
      opUserId?: long(name='OpUserId', description='The ID of the user who performed the operation.', example='51****'),
      orderId?: long(name='OrderId', description='The ID of the ticket or task.

>  This parameter is valid only for operations on the functional modules related to tasks and the task management module in system management.', example='509****'),
      userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='22275482072787****'),
      userNick?: string(name='UserNick', description='The display name of the user.', example='test_name'),
    }
  ](name='OpLogDetail')
  }(name='OpLogDetails', description='The details of the operation log.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='47D56208-DB1D-4FD3-BE32-300E43185488'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of operation logs that are returned.', example='1'),
}

model GetOpLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpLogResponseBody(name='body'),
}

/**
  * @description Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain your user role from the RoleIdList parameter that is returned.
  * @param request  the request parameters of GetOpLog  GetOpLogRequest
  * @return GetOpLogResponse
 */
async function getOpLog(request: GetOpLogRequest): GetOpLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpLog', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderAttachmentFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='51****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOrderAttachmentFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned. Take note of the following rules:

*   The **ErrorCode** parameter is not returned if the request is successful.
*   The **ErrorCode** parameter is returned if the request fails. For more information, see the **Error codes** section of this topic.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  fileUrl?: string(name='FileUrl', description='The download URL of the attachment.', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetOrderAttachmentFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderAttachmentFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrderAttachmentFile  GetOrderAttachmentFileRequest
  * @return GetOrderAttachmentFileResponse
 */
async function getOrderAttachmentFile(request: GetOrderAttachmentFileRequest): GetOrderAttachmentFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderAttachmentFile', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderBaseInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='12345', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model GetOrderBaseInfoResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  orderBaseInfo?: {
    attachmentKey?: string(name='AttachmentKey', description='The Key of the ticket attachment. This information is returned only when an attachment is uploaded when a ticket is created.', example='upload_order_info_856887_f356366f-f0f8-42fc-ba57-4a509303e814_18072d8a9bce876e3073bc655c2865f.png'),
    comment?: string(name='Comment', description='The remarks of the ticket.', example='test'),
    committer?: string(name='Committer', description='The applicant.', example='xxx'),
    committerId?: long(name='CommitterId', description='The ID of the applicant. Note: The ID is different from the Alibaba Cloud account ID of the applicant.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the ticket was created.', example='2019-10-10 00:00:00'),
    lastModifyTime?: string(name='LastModifyTime', description='The time when the ticket was last modified.', example='2019-10-10 00:00:00'),
    orderId?: long(name='OrderId', description='The ID of the ticket.', example='12345'),
    originAttachmentName?: string(name='OriginAttachmentName', description='The original file name of the ticket attachment. This information is returned only when an attachment is uploaded when a ticket is created.', example='18072d8a9bce876e3073bc655c2865f.png'),
    pluginType?: string(name='PluginType', description='The type of the ticket. For more information about the value of this parameter, see the request parameters of the [CreateOrder](https://help.aliyun.com/document_detail/465865.html) operation.', example='DC_COMMON'),
    relatedUserList?: {
      userIds?: [ string ](name='UserIds')
    }(name='RelatedUserList', description='The IDs of the operators that are related to the ticket.'),
    relatedUserNickList?: {
      userNicks?: [ string ](name='UserNicks')
    }(name='RelatedUserNickList', description='The nicknames of the operators that are related to the ticket.'),
    statusCode?: string(name='StatusCode', description='The status code of the ticket. Valid values:

*   **new**: The ticket is created.
*   **toaudit**: The ticket is being reviewed.
*   **Approved**: The ticket is approved.
*   **reject**: The ticket is rejected.
*   **processing**: The ticket is being executed.
*   **success**: The ticket is executed.
*   **closed**: The ticket is closed.', example='success'),
    statusDesc?: string(name='StatusDesc', description='The description of the status.', example='success'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process.', example='1'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc', description='The description of the approval process.', example='approved'),
  }(name='OrderBaseInfo', description='The basic information about the ticket.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7133DF67-5B25-460F-8285-C4CC93472C2F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetOrderBaseInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderBaseInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrderBaseInfo  GetOrderBaseInfoRequest
  * @return GetOrderBaseInfoResponse
 */
async function getOrderBaseInfo(request: GetOrderBaseInfoRequest): GetOrderBaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderBaseInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOwnerApplyOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='730000', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOwnerApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  ownerApplyOrderDetail?: {
    applyType?: string(name='ApplyType', description='The type of the submitted ticket. Valid values:

*   **INSTANCE**: the ticket that applies for the permissions to be an instance owner
*   **DB**: the ticket that applies for the permissions to be a database owner
*   **TABLE**: the ticket that applies for the permissions to be a table owner', example='DB'),
    resources?: [ 
      {
        logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The instance is a logical database.
*   **false**: The instance is not a logical database.', example='true'),
        resourceDetail?: {
          dbType?: string(name='DbType', description='The type of the database engine.', example='MYSQL'),
          envType?: string(name='EnvType', description='The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='PRODUCT'),
          ownerIds?: [ long ](name='OwnerIds', description='The IDs of the original owners.'),
          ownerNickNames?: [ string ](name='OwnerNickNames', description='The nicknames of the owners.'),
          searchName?: string(name='SearchName', description='The search name of the resource.', example='yuyang【test】'),
          tableName?: string(name='TableName', description='The name of the table.

> : This parameter is returned when you submit a Database-OWNER ticket.', example='test'),
        }(name='ResourceDetail', description='The details of the resource.'),
        targetId?: string(name='TargetId', description='The ID of the resource.', example='12345'),
      }
    ](name='Resources', description='The details of the requested resource.'),
  }(name='OwnerApplyOrderDetail', description='The details of the ticket.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB784055-E8CB-4461-AB0B-483A1DA32BB5'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetOwnerApplyOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOwnerApplyOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOwnerApplyOrderDetail  GetOwnerApplyOrderDetailRequest
  * @return GetOwnerApplyOrderDetailResponse
 */
async function getOwnerApplyOrderDetail(request: GetOwnerApplyOrderDetailRequest): GetOwnerApplyOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOwnerApplyOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPagedInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='This parameter is required.', example='868*****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetPagedInstanceResponseBody = {
  data?: {
    instance?: [ 
      {
        businessTime?: string(name='BusinessTime', example='2023-05-14 16:00:57'),
        checkStatus?: long(name='CheckStatus', example='3'),
        dagId?: long(name='DagId', example='33753'),
        delete?: string(name='Delete', example='false'),
        endTime?: string(name='EndTime', example='2023-04-23 10:23:20'),
        gmtCreate?: string(name='GmtCreate', example='2023-03-28 10:50:45'),
        gmtModified?: string(name='GmtModified', example='2023-04-18 15:28:16'),
        historyDagId?: long(name='HistoryDagId', example='6851'),
        id?: long(name='Id', example='24271'),
        lastRunningContext?: string(name='LastRunningContext', example='{”nodes":[11694,11695]"}'),
        msg?: string(name='Msg'),
        status?: long(name='Status', example='1'),
        taskType?: long(name='TaskType', example='1'),
        tenantId?: string(name='TenantId', example='3406'),
        triggerType?: long(name='TriggerType', example='1'),
        version?: string(name='Version', example='1'),
      }
    ](name='Instance'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  pageIndex?: long(name='PageIndex', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
  total?: long(name='Total', example='2'),
  traceId?: string(name='TraceId', description='Id of the request', example='0a06e1e316757357507896067d3780'),
}

model GetPagedInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPagedInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPagedInstance  GetPagedInstanceRequest
  * @return GetPagedInstanceResponse
 */
async function getPagedInstance(request: GetPagedInstanceRequest): GetPagedInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPagedInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetPermApplyOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to query the ticket ID.

This parameter is required.', example='730000', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetPermApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  permApplyOrderDetail?: {
    applyType?: string(name='ApplyType', description='The type of objects on which you apply for permissions. Valid values:

*   **DB**: database
*   **TAB**: table
*   **COL**: column
*   **INSTANT**: instance', example='DB'),
    permType?: long(name='PermType', description='The type of the permissions that you apply for. Valid values:

*   **1**: the permissions to query information.
*   **2**: the permissions to export information.
*   **3**: the permissions to query and export information.
*   **4**: the permissions to modify information.
*   **5**: the permissions to query and modify information.
*   **6**: the permissions to export and modify information.
*   **7**: the permissions to query, export, and modify information.
*   **8**: the permissions to log on to the database.', example='7'),
    resources?: [ 
      {
        columnInfo?: {
          columnName?: string(name='ColumnName', description='The name of the column.', example='test_col'),
          tableName?: string(name='TableName', description='The name of the table.', example='test_tb'),
        }(name='ColumnInfo', description='The information about the column.'),
        databaseInfo?: {
          dbId?: long(name='DbId', description='The database ID.', example='12345'),
          dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
          envType?: string(name='EnvType', description='The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='product'),
          logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**
*   **false**', example='false'),
          ownerIds?: [ long ](name='OwnerIds', description='The IDs of the owners of the database.'),
          ownerNickNames?: [ string ](name='OwnerNickNames', description='The nicknames of the owners of the database.'),
          searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxxx:3306【test】'),
        }(name='DatabaseInfo', description='The information about the database.'),
        instanceInfo?: {
          dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
          dbaId?: long(name='DbaId', description='The ID of the database administrator (DBA) of the instance.', example='12345'),
          dbaNickName?: string(name='DbaNickName', description='The nickname of the DBA of the instance.', example='test_dba'),
          envType?: string(name='EnvType', description='The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='product'),
          host?: string(name='Host', description='The endpoint of the instance.', example='xxxx'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='12345'),
          ownerIds?: [ long ](name='OwnerIds', description='The IDs of the owners of the instance.'),
          ownerNickName?: [ string ](name='OwnerNickName', description='The nicknames of the owners of the instance.'),
          port?: long(name='Port', description='The port that is used to connect to the instance.', example='3306'),
          searchName?: string(name='SearchName', description='The name that is used to search for the instance.', example='xxxx:3306'),
        }(name='InstanceInfo', description='The information about the instance.'),
        tableInfo?: {
          tableName?: string(name='TableName', description='The name of the table.', example='test_tb'),
        }(name='TableInfo', description='The information about the table.'),
      }
    ](name='Resources', description='The list of resources.'),
    seconds?: long(name='Seconds', description='The validity duration of the permissions. Unit: seconds.', example='3600'),
  }(name='PermApplyOrderDetail', description='The details of the permission application ticket.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='A4C4499E-5AC2-4318-9FCF-03E426781A04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetPermApplyOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermApplyOrderDetailResponseBody(name='body'),
}

/**
  * @description You can call this operation to query the information about tickets that apply for permissions on databases, tables, and sensitive columns.
  * @param request  the request parameters of GetPermApplyOrderDetail  GetPermApplyOrderDetailRequest
  * @return GetPermApplyOrderDetailResponse
 */
async function getPermApplyOrderDetail(request: GetPermApplyOrderDetailRequest): GetPermApplyOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPermApplyOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: long(name='DbId', description='The ID of the physical database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.

This parameter is required.', example='43153', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetPhysicalDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.

> : If the database is a PostgreSQL database, the name of the database is displayed.', example='def'),
    databaseId?: string(name='DatabaseId', description='The ID of the physical database.', example='43125312'),
    dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
    dbaId?: string(name='DbaId', description='The user ID of the DBA in the destination database.', example='43253'),
    dbaName?: string(name='DbaName', description='The nickname of the database administrator (DBA) in the destination database.', example='dmstest'),
    encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf8mb4'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='product'),
    host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='rm-xxxab3r272.mysql.rds.aliyuncs.com'),
    instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance.', example='test'),
    instanceId?: string(name='InstanceId', description='The instance ID of the destination database.', example='43215325'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The user IDs of the database owners.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The nicknames of the database owners.'),
    port?: int32(name='Port', description='The port that is used to connect to the database.', example='3306'),
    schemaName?: string(name='SchemaName', description='The name of the database.

> : If the database is a PostgreSQL database, the name of the mode is displayed.', example='dmstest'),
    searchName?: string(name='SearchName', description='The name that is used for searching the database.', example='dmstest@rm-xxxab3r272.mysql.rds.aliyuncs.com:3306'),
    sid?: string(name='Sid', description='The system ID (SID) of the database.

> : The value of the parameter is returned only for Oracle databases.', example='def'),
    state?: string(name='State', description='The state of the database. Valid values:

*   **NORMAL**: The database is normal.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='NORMAL'),
  }(name='Database', description='The information about the physical database.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetPhysicalDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhysicalDatabase  GetPhysicalDatabaseRequest
  * @return GetPhysicalDatabaseResponse
 */
async function getPhysicalDatabase(request: GetPhysicalDatabaseRequest): GetPhysicalDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', description='The ID of the secure access proxy. You can call the [ListProxies](https://help.aliyun.com/document_detail/295371.html) operation to query the ID of the secure access proxy.

This parameter is required.', example='4**', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetProxyResponseBody = {
  creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
  creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='The condition cannot be empty!'),
  httpsPort?: int32(name='HttpsPort', description='The port number used by the HTTPS protocol.', example='443'),
  instanceId?: long(name='InstanceId', description='The ID of the instance.', example='183****'),
  privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint was enabled. Default value: **true**.', example='true'),
  privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
  protocolPort?: int32(name='ProtocolPort', description='The port number used by the protocol.', example='3306'),
  protocolType?: string(name='ProtocolType', description='The protocol type of the database. Example: MYSQL.', example='MYSQL'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
  publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint was enabled. Valid values:

*   **true**: The public endpoint was enabled.
*   **false**: The public endpoint was disabled.', example='true'),
  publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.

> 

*   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS is returned.

*   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using Alibaba Cloud DNS is returned.', example='dphzmy-5j8oimjsz6zed7k****.proxy.dms.aliyuncs.com'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F49D4598-2B3C-5723-865E-2CCB818E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProxyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProxy  GetProxyRequest
  * @return GetProxyResponse
 */
async function getProxy(request: GetProxyRequest): GetProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProxy', 'POST', '/', 'json', false, 'json', request);
}

model GetProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', description='The ID that Data Management (DMS) generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](https://help.aliyun.com/document_detail/295386.html) operation to query the ID.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UserNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='The specified user not exists.'),
  proxyAccess?: {
    accessId?: string(name='AccessId', description='The username of the database account that is authorized to enable the secure access proxy feature for an instance.', example='hObpgEXoca42q***'),
    gmtCreate?: string(name='GmtCreate', description='The time when the user is authorized to enable the secure access proxy feature for an instance.', example='1643034647'),
    indepAccount?: string(name='IndepAccount', description='The username of the independent database account.', example='***'),
    instanceId?: long(name='InstanceId', description='The ID of the instance for which the secure access proxy feature is enabled.', example='1922545'),
    originInfo?: string(name='OriginInfo', description='The method that is used to authorize the user to enable the secure access proxy feature for an instance. Valid values:

*   **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the ID of the Alibaba Cloud account.
*   **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.', example='Authorization by the Alibaba Cloud account (29490401597700\\*\\*\\*\\*)'),
    proxyAccessId?: long(name='ProxyAccessId', description='The ID that DMS generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](https://help.aliyun.com/document_detail/295386.html) operation to query the ID.', example='2002'),
    proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.

>  You can call the [ListProxies](https://help.aliyun.com/document_detail/295371.html) operation to query the ID of the secure access proxy.', example='1905'),
    userId?: long(name='UserId', description='The ID of the user.', example='12***'),
    userName?: string(name='UserName', description='The nickname of the user.', example='user'),
    userUid?: string(name='UserUid', description='The ID of the Alibaba Cloud account.', example='25936669186260****'),
  }(name='ProxyAccess', description='The authorization information about the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetProxyAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProxyAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProxyAccess  GetProxyAccessRequest
  * @return GetProxyAccessResponse
 */
async function getProxyAccess(request: GetProxyAccessRequest): GetProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleNumLimitOfSLARequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetRuleNumLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  ruleNumLimit?: int32(name='RuleNumLimit', description='The maximum number of SLA rules.', example='12'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetRuleNumLimitOfSLAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRuleNumLimitOfSLAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRuleNumLimitOfSLA  GetRuleNumLimitOfSLARequest
  * @return GetRuleNumLimitOfSLAResponse
 */
async function getRuleNumLimitOfSLA(request: GetRuleNumLimitOfSLARequest): GetRuleNumLimitOfSLAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleNumLimitOfSLA', 'POST', '/', 'json', false, 'json', request);
}

model GetSQLReviewCheckResultStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can obtain the ticket ID from the response parameters of the [CreateSQLReviewOrder](https://help.aliyun.com/document_detail/257777.html) operation.

This parameter is required.', example='123321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the ID of the tenant.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetSQLReviewCheckResultStatusResponseBody = {
  checkResultStatus?: {
    checkStatusResult?: {
      checkNotPass?: long(name='CheckNotPass', description='The number of SQL statements that failed to pass the review.', example='1'),
      checkPass?: long(name='CheckPass', description='The number of SQL statements that passed the review.', example='8'),
      forceNotPass?: long(name='ForceNotPass', description='The number of SQL statements that failed to pass the manual review.', example='0'),
      forcePass?: long(name='ForcePass', description='The number of SQL statements that passed the manual review.', example='1'),
      new?: long(name='New', description='The number of SQL statements to be reviewed.', example='0'),
      unknown?: long(name='Unknown', description='The number of abnormal SQL statements.', example='0'),
    }(name='CheckStatusResult', description='The result of the SQL status check.'),
    checkedCount?: long(name='CheckedCount', description='The number of SQL statements that were reviewed.', example='10'),
    SQLReviewResult?: {
      mustImprove?: long(name='MustImprove', description='The number of SQL statements that must be modified.', example='1'),
      potentialIssue?: long(name='PotentialIssue', description='The number of SQL statements that have potential issues.', example='0'),
      suggestImprove?: long(name='SuggestImprove', description='The number of SQL statements that can be modified.', example='3'),
      tableIndexSuggest?: long(name='TableIndexSuggest', description='The number of SQL statements that can use indexes.', example='2'),
      useDmsDmlUnlock?: long(name='UseDmsDmlUnlock', description='The number of SQL statements that can be used for lock-free data changes.', example='0'),
      useDmsToolkit?: long(name='UseDmsToolkit', description='The number of SQL statements that can be used for lock-free schema changes.', example='0'),
    }(name='SQLReviewResult', description='The optimization suggestion for SQL statements.'),
    totalSQLCount?: long(name='TotalSQLCount', description='The total number of SQL statements.', example='10'),
  }(name='CheckResultStatus', description='The result of the SQL review.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetSQLReviewCheckResultStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSQLReviewCheckResultStatusResponseBody(name='body'),
}

/**
  * @description For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
  * @param request  the request parameters of GetSQLReviewCheckResultStatus  GetSQLReviewCheckResultStatusRequest
  * @return GetSQLReviewCheckResultStatusResponse
 */
async function getSQLReviewCheckResultStatus(request: GetSQLReviewCheckResultStatusRequest): GetSQLReviewCheckResultStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSQLReviewCheckResultStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSQLReviewOptimizeDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  SQLReviewQueryKey: string(name='SQLReviewQueryKey', description='The key that is used to query the details of optimization suggestions. You can call the [ListSQLReviewOriginSQL](https://help.aliyun.com/document_detail/257870.html) operation to query the key.

This parameter is required.', example='a57e54ec5433475ea3082d882fdb****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetSQLReviewOptimizeDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  optimizeDetail?: {
    dbId?: int32(name='DbId', description='The ID of the database.', example='111222'),
    instanceId?: int32(name='InstanceId', description='The ID of the instance to which the database belongs.', example='123321'),
    qualityResult?: {
      errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='syntax error'),
      occurError?: boolean(name='OccurError', description='Indicates whether an error occurs. Valid values:

*   **true**: An error occurs.
*   **false**: No error occurs.', example='false'),
      results?: [ 
        {
          comments?: string(name='Comments', description='The comment that is specified when you create the SQL review rule. For more information, see [SQL review optimization](https://help.aliyun.com/document_detail/194114.html).', example='xxx business rule: the query must have a where condition.'),
          feedback?: string(name='Feedback', description='The optimization suggestion for the SQL statement. Valid values:

*   **MUST_IMPROVE**: The SQL statement must be improved.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
*   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
*   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLEINDEXSUGGEST**: We recommend that you use SQL statements that use indexes.', example='MUST_IMPROVE'),
          messages?: [ string ](name='Messages', description='The review results.'),
          ruleName?: string(name='RuleName', description='The name of the rule. For more information, see [SQL review optimization](https://help.aliyun.com/document_detail/194114.html).', example='SELECT_SUGGEST_ASSIGN_WHERE'),
          ruleType?: string(name='RuleType', description='The type of the SQL review rule. Valid values:

*   **REVIEW**: a rule that is used to review SQL statements based on standards.
*   **OPTIMIZE**: a rule that is used to provide optimization suggestions.', example='REVIEW'),
          scripts?: [ 
            {
              content?: string(name='Content', description='The content of the SQL script.', example='alter table xxx add index idx_xx(yyy);'),
              opType?: string(name='OpType', description='The purpose of the SQL script. The value is set to AddIndex.', example='AddIndex'),
              tableName?: string(name='TableName', description='The name of the table.', example='xxx'),
            }
          ](name='Scripts', description='The SQL script for data changes.'),
        }
      ](name='Results', description='The review results based on rules.'),
    }(name='QualityResult', description='The quality of the SQL statement.'),
    queryKey?: string(name='QueryKey', description='The key that is used to query the details of optimization suggestions.', example='a57e54ec5433475ea3082d882fdb****'),
    sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values: DELETE, UPDATE, and ALTER_TABLE.', example='UPDATE'),
  }(name='OptimizeDetail', description='The details of optimization suggestions for SQL statements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetSQLReviewOptimizeDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSQLReviewOptimizeDetailResponseBody(name='body'),
}

/**
  * @description For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
  * @param request  the request parameters of GetSQLReviewOptimizeDetail  GetSQLReviewOptimizeDetailRequest
  * @return GetSQLReviewOptimizeDetailResponse
 */
async function getSQLReviewOptimizeDetail(request: GetSQLReviewOptimizeDetailRequest): GetSQLReviewOptimizeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSQLReviewOptimizeDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStandardGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: long(name='GroupId', description='This parameter is required.', example='242***', position='Query'),
  tid?: long(name='Tid', example='23****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='BF7E9543-F431-566A-991A-B5C493EA36C2'),
  standardGroup?: {
    dbType?: string(name='DbType', example='mysql'),
    description?: string(name='Description'),
    groupId?: long(name='GroupId', example='41****'),
    groupMode?: string(name='GroupMode', example='COMMON'),
    groupName?: string(name='GroupName', example='poc_test'),
    lastMenderId?: long(name='LastMenderId', example='51****'),
  }(name='StandardGroup'),
  success?: boolean(name='Success', example='true'),
}

model GetStandardGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStandardGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStandardGroup  GetStandardGroupRequest
  * @return GetStandardGroupResponse
 */
async function getStandardGroup(request: GetStandardGroupRequest): GetStandardGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStandardGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncExecSqlDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='342153', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncExecSqlDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncExecSqlDetail?: {
    execSql?: string(name='ExecSql', description='The SQL statements that are executed.'),
    totalSqlCount?: long(name='TotalSqlCount', description='The total number of SQL statements.', example='1'),
  }(name='StructSyncExecSqlDetail', description='The details of the SQL statements.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetStructSyncExecSqlDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStructSyncExecSqlDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStructSyncExecSqlDetail  GetStructSyncExecSqlDetailRequest
  * @return GetStructSyncExecSqlDetailResponse
 */
async function getStructSyncExecSqlDetail(request: GetStructSyncExecSqlDetailRequest): GetStructSyncExecSqlDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncExecSqlDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncJobAnalyzeResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  compareType?: string(name='CompareType', description='The type of the comparison. Valid values:

*   **CREATE_TABLE**: compares the created tables.
*   **ALTER_TABLE**: compares the modified tables.
*   **EQUAL_TABLE**: compares the identical tables.
*   **PASS_TABLE**: compares the tables that are skipped during schema synchronization.
*   **NOT_COMPARE**: does not compare tables.', example='CREATE_TABLE', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='1342355', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncJobAnalyzeResultResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncJobAnalyzeResult?: {
    resultList?: [ 
      {
        script?: string(name='Script', description='The SQL script.'),
        sourceTableName?: string(name='SourceTableName', description='The name of the source table.', example='helloz_bak'),
        targetTableName?: string(name='TargetTableName', description='The name of the destination table.', example='helloz_bak'),
      }
    ](name='ResultList', description='The details of the analysis results.'),
    summaryList?: [ 
      {
        compareType?: string(name='CompareType', description='The type of the comparison. Valid values:

*   **CREATE_TABLE**: compares the created tables.
*   **ALTER_TABLE**: compares the modified tables.
*   **EQUAL_TABLE**: compares the identical tables.
*   **PASS_TABLE**: compares the tables that are skipped during schema synchronization.
*   **NOT_COMPARE**: does not compare tables.', example='CREATE_TABLE'),
        count?: long(name='Count', description='The number of tables.', example='1'),
      }
    ](name='SummaryList', description='The statistics on the analysis results.'),
  }(name='StructSyncJobAnalyzeResult', description='The analysis result of the schema synchronization task.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetStructSyncJobAnalyzeResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStructSyncJobAnalyzeResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStructSyncJobAnalyzeResult  GetStructSyncJobAnalyzeResultRequest
  * @return GetStructSyncJobAnalyzeResultResponse
 */
async function getStructSyncJobAnalyzeResult(request: GetStructSyncJobAnalyzeResultRequest): GetStructSyncJobAnalyzeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncJobAnalyzeResult', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncJobDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID.

This parameter is required.', example='4324321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncJobDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  structSyncJobDetail?: {
    DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='12345'),
    executeCount?: long(name='ExecuteCount', description='The number of SQL statements that have been executed.', example='1'),
    jobStatus?: string(name='JobStatus', description='The status of the task. Valid values:

*   **NEW**: The task was created.
*   **COMPARING**: The schemas of tables were being compared.
*   **COMPARE_BREAK**: The schema comparison was interrupted.
*   **COMPARE_FINISH**: The comparison was finished.
*   **NOT_SCRIPTS**: The comparison was finished but no executable script was available.
*   **SUBMITED_DBTASK**: The task was submitted.
*   **DBTASK_SUCCESS**: The task was complete.
*   **SUBMITED_WORKFLOW**: The ticket was submitted.
*   **WORKFLOW_SUCCESS**: The ticket was approved.', example='DBTASK_SUCCESS'),
    message?: string(name='Message', description='The description of the task.', example='test'),
    securityRule?: string(name='SecurityRule', description='The type of security rule. Valid values:

*   **CANNOT_SYNC**: Synchronization cannot be performed.
*   **WITH_APPROVE**: The schema synchronization can be performed after the ticket is approved. You can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
*   **WITHOUT_APPROVE**: The schema synchronization can be performed without approval.', example='WITHOUT_APPROVE'),
    sqlCount?: long(name='SqlCount', description='The total number of SQL statements.', example='1'),
    tableAnalyzed?: long(name='TableAnalyzed', description='The number of tables that have been analyzed.', example='2'),
    tableCount?: long(name='TableCount', description='The total number of tables.', example='2'),
  }(name='StructSyncJobDetail', description='The details of the schema synchronization task.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetStructSyncJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStructSyncJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStructSyncJobDetail  GetStructSyncJobDetailRequest
  * @return GetStructSyncJobDetailResponse
 */
async function getStructSyncJobDetail(request: GetStructSyncJobDetailRequest): GetStructSyncJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='43****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  structSyncOrderDetail?: {
    ignoreError?: boolean(name='IgnoreError', description='Indicates whether to skip errors. Valid values:

*   **true**: skips the error and continues to execute SQL statements.
*   **false**: stops executing SQL statements.', example='false'),
    sourceDatabaseInfo?: {
      dbId?: long(name='DbId', description='The ID of the source database.', example='432532'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='dev'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database', example='false'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test'),
    }(name='SourceDatabaseInfo', description='The information about the source database.'),
    sourceType?: string(name='SourceType', description='The schema version of the source database. Valid values:

*   **DATASOURCE**: the default latest version of the system
*   **VERSION**: a previous schema version that you manually specify', example='VERSION'),
    sourceVersionInfo?: {
      versionId?: string(name='VersionId', description='The version number.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='SourceVersionInfo', description='The version information about the source instance.

> This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', description='The name of the table whose schema you want to synchronize.', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', description='The name of the table to which you want to synchronize the schema of a table.', example='test_tbl'),
      }
    ](name='TableInfoList', description='The information about the table whose schema you want to synchronize.'),
    targetDatabaseInfo?: {
      dbId?: long(name='DbId', description='The ID of the destination database.', example='432543'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='dev'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database', example='false'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test'),
    }(name='TargetDatabaseInfo', description='The information about the destination database.'),
    targetType?: string(name='TargetType', description='The schema version of the destination database. Valid values:

*   **DATASOURCE**: the default latest version of the system
*   **VERSION**: a previous schema version that you manually specify', example='DATASOURCE'),
    targetVersionInfo?: {
      versionId?: string(name='VersionId', description='The version number.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='TargetVersionInfo', description='The version information about the destination instance.

> This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.'),
  }(name='StructSyncOrderDetail', description='The details of the schema synchronization ticket.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetStructSyncOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStructSyncOrderDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStructSyncOrderDetail  GetStructSyncOrderDetailRequest
  * @return GetStructSyncOrderDetailResponse
 */
async function getStructSyncOrderDetail(request: GetStructSyncOrderDetailRequest): GetStructSyncOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTableDBTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in DMS.

> 

*   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.

*   If the database to which the table belongs is a physical database, you can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.

This parameter is required.', example='IDB_L_9032.db-test.yuyang_test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableDBTopologyResponseBody = {
  DBTopology?: {
    dataSourceList?: [ 
      {
        databaseList?: [ 
          {
            dbId?: string(name='DbId', description='The ID of the database.', example='489347'),
            dbName?: string(name='DbName', description='The name of the database.', example='db-test'),
            dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MySQL'),
            envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: pre-release environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: staging environment

> For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='pre'),
            tableList?: [ 
              {
                tableId?: string(name='TableId', description='The ID of the table.', example='NORMAL'),
                tableName?: string(name='TableName', description='The name of the physical table.', example='151977812'),
                tableType?: string(name='TableType', description='The type of the table. This is a reserved parameter.', example='yuyang_test_0000'),
              }
            ](name='TableList', description='The physical tables.'),
          }
        ](name='DatabaseList', description='The physical databases.'),
        dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MySQL'),
        host?: string(name='Host', description='The endpoint of the data source.', example='xxx.mysql.polardb.rds.aliyuncs.com'),
        port?: int32(name='Port', description='The port that is used to connect to the data source.', example='3306'),
        sid?: string(name='Sid', description='The system ID (SID) of the data source.', example='def'),
      }
    ](name='DataSourceList', description='The data sources.'),
    tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_L_9032.db-test.yuyang_test'),
    tableName?: string(name='TableName', description='The name of the table.

> 

*   If a logical table is queried, the name of the logical table is returned.

*   If a physical table is queried, the name of the physical table is returned.', example='yuyang_test'),
  }(name='DBTopology', description='The topology of the data table.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='853F7FD4-D922-4EFB-931C-D253EF159E06'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetTableDBTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableDBTopologyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableDBTopology  GetTableDBTopologyRequest
  * @return GetTableDBTopologyResponse
 */
async function getTableDBTopology(request: GetTableDBTopologyRequest): GetTableDBTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableDBTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetTableDesignProjectFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the schema design ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ID.

This parameter is required.', example='95****', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableDesignProjectFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  projectFlow?: {
    currentPosition?: int32(name='CurrentPosition', description='The position of the current node in the process.', example='2'),
    flowNodeArray?: [ 
      {
        backToDesign?: boolean(name='BackToDesign', description='Indicates whether the ticket can be returned to the schema design node. Valid values:

*   **1**: The ticket can be returned to the schema design node.
*   **0**: The ticket cannot be returned to the schema design node. This value can be returned only for the PUBLISH node.', example='1'),
        canSkip?: boolean(name='CanSkip', description='Indicates whether the current node can be skipped. Valid values:

*   **1**: The current node can be skipped.
*   **0**: The current node cannot be skipped. This value can be returned only for the PUBLISH node.', example='0'),
        nodeRole?: string(name='NodeRole', description='The role of the node in the process.

*   START: The ticket was created.
*   DESIGN: The schema is being created.
*   PUBLISH: The schema is published.
*   END: The ticket is complete.', example='DESIGN'),
        nodeTitle?: string(name='NodeTitle', description='The title of the node.'),
        position?: int32(name='Position', description='The position of the node in the process. The value starts from 1.', example='1'),
        publishAnchor?: boolean(name='PublishAnchor', description='Indicates whether the node is the anchor node. A schema design process has only one anchor node, on which the schema is published. After the schema is published on the anchor node, a post-publish image is generated and the DDL metadata lock is released.', example='false'),
        publishStrategies?: [ string ](name='PublishStrategies', description='The available publishing strategies.'),
      }
    ](name='FlowNodeArray', description='The nodes in the process.'),
    ruleComment?: string(name='RuleComment', description='The description of the security rule set that is applied to the schema design ticket.', example='mysq_test'),
    ruleName?: string(name='RuleName', description='The name of the security rule set that is applied to the schema design ticket.', example='mysql default'),
  }(name='ProjectFlow', description='The information about the schema design process.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetTableDesignProjectFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableDesignProjectFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableDesignProjectFlow  GetTableDesignProjectFlowRequest
  * @return GetTableDesignProjectFlowResponse
 */
async function getTableDesignProjectFlow(request: GetTableDesignProjectFlowRequest): GetTableDesignProjectFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableDesignProjectFlow', 'POST', '/', 'json', false, 'json', request);
}

model GetTableDesignProjectInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the schema design ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to obtain the ID.

This parameter is required.', example='95****', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableDesignProjectInfoResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  projectInfo?: {
    baseDatabase?: {
      alias?: string(name='Alias', description='The alias of the database instance.', example='poc_test'),
      dbId?: int32(name='DbId', description='The database ID.', example='11****'),
      dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='POLARDB'),
      envType?: string(name='EnvType', description='The type of the environment in which the database instance is deployed. Valid values:

*   **product**: production environment.
*   **dev**: development environment.
*   **pre**: pre-release environment.
*   **test**: test environment.
*   **sit**: system integration testing (SIT) environment.
*   **uat**: user acceptance testing (UAT) environment.
*   **pet**: stress testing environment.
*   **stag**: staging environment.', example='dev'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**
*   **false**', example='false'),
      schemaName?: string(name='SchemaName', description='The database name.', example='bk_atc020'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='schema_name@127.0.XX.XX'),
    }(name='BaseDatabase', description='The information about the change base database of the schema design ticket.'),
    creatorId?: long(name='CreatorId', description='The ID of the user who created the ticket.', example='71****'),
    description?: string(name='Description', description='The description of the schema design project.', example='test'),
    gmtCreate?: string(name='GmtCreate', description='The time when the ticket was created.', example='2024-04-23 02:57:01'),
    gmtModified?: string(name='GmtModified', description='The time when the ticket was last modified.', example='2024-04-23 02:57:01'),
    orderId?: long(name='OrderId', description='The ticket ID.', example='95****'),
    projectId?: long(name='ProjectId', description='The project ID.', example='12****'),
    status?: string(name='Status', description='The state of the schema design project. Valid values:

*   **DESIGN**: The schema is being designed.
*   **PUBLISHED**: The schema is published.
*   **CLOSE**: The ticket is closed.', example='DESIGN'),
    title?: string(name='Title', description='The name of the schema design project.', example='test'),
  }(name='ProjectInfo', description='The information about the schema design project.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='48778434-5796-571A-8455-A59146588401'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetTableDesignProjectInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableDesignProjectInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableDesignProjectInfo  GetTableDesignProjectInfoRequest
  * @return GetTableDesignProjectInfoResponse
 */
async function getTableDesignProjectInfo(request: GetTableDesignProjectInfoRequest): GetTableDesignProjectInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableDesignProjectInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetTableKnowledgeInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='This parameter is required.', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', position='Query'),
  tableSchemaName?: string(name='TableSchemaName', position='Query'),
}

model GetTableKnowledgeInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  table?: TableKnowledgeInfo(name='Table'),
}

model GetTableKnowledgeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableKnowledgeInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableKnowledgeInfo  GetTableKnowledgeInfoRequest
  * @return GetTableKnowledgeInfoResponse
 */
async function getTableKnowledgeInfo(request: GetTableKnowledgeInfoRequest): GetTableKnowledgeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableKnowledgeInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetTableTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in Data Management (DMS).

> 
> - You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.
> - You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.

This parameter is required.', example='IDB_L_308302.yuyang_test.test_ch', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Tenant information](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableTopologyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5ED6A40-F344-4C7D-A8F0-5685CA584CA7'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  tableTopology?: {
    logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. Valid values:

*   **true**
*   **false**', example='true'),
    tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_L_308302.yuyang_test.test_ch'),
    tableName?: string(name='TableName', description='The name of the table.', example='test_ch'),
    tableTopologyInfoList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the physical database.', example='43215'),
        dbName?: string(name='DbName', description='The name of the database.', example='yuyang_test'),
        dbSearchName?: string(name='DbSearchName', description='The name that is used to search for the database.
> We recommend that you do not use this parameter for business development. The format of the parameter value may be modified in later versions.', example='yuyang_test@localhost:3306
[yuyang_test_dev]'),
        dbType?: string(name='DbType', description='The database engine.', example='mysql'),
        instanceId?: long(name='InstanceId', description='The ID of the instance to which the physical database belongs.', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', description='The ID of the resource related to the instance. The resource corresponds with the database instance type returned in the InstanceSource parameter.

*   **RDS**:The ID of the ApsaraDB RDS instance.
*   **ECS_OWN**: The ID of the Elastic Compute Service (ECS) instance.
*   **PUBLIC_OWN**: This parameter is left empty for self-managed database instances that are connected over the Internet.
*   **VPC_ID**:The ID of the virtual private cloud (VPC).
*   **GATEWAY**: The ID of the database gateway.', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', description='The type of the database instance. Valid values:

*   **RDS**: an ApsaraDB RDS instance.
*   **ECS_OWN**: a self-managed database that is deployed on an ECS instance
*   **PUBLIC_OWN**: a self-managed database instance that is connected over the Internet.
*   **VPC_ID**: a self-managed database instance in a VPC that is connected over Express Connect circuits.
*   **GATEWAY**: a database instance connected by using a database gateway.', example='RDS'),
        regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
        tableCount?: long(name='TableCount', description='The number of tables.', example='6'),
        tableNameExpr?: string(name='TableNameExpr', description='The expression of the names of logical tables.

**

**Description** This parameter is not returned for physical tables.', example='test_ch_[0000-0005]'),
        tableNameList?: string(name='TableNameList', description='The names of tables.

> The table names are separated by commas (,).', example='test_ch_0000,test_ch_0001,test_ch_0002,test_ch_0003,test_ch_0004,test_ch_0005'),
      }
    ](name='TableTopologyInfoList', description='Information of the topology of the table.'),
  }(name='TableTopology', description='The topology information.'),
}

model GetTableTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableTopologyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableTopology  GetTableTopologyRequest
  * @return GetTableTopologyResponse
 */
async function getTableTopology(request: GetTableTopologyRequest): GetTableTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: long(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='51***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='7838266C-E17B-58F4-B072-4DC356B58258'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  task?: {
    dagId?: long(name='DagId', description='The ID of the task flow to which the node belongs.', example='7321'),
    graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='{"{\\"x\\":0,\\"y\\":0,\\"layoutType\\":\\"Horizontal\\"}",  "id": 51***}'),
    nodeConfig?: string(name='NodeConfig', description='The advanced configuration for the node.'),
    nodeContent?: string(name='NodeContent', description='The configuration for the node.', example='{\\"dbList\\":[{\\"instanceId\\":177****}"   }'),
    nodeName?: string(name='NodeName', description='The name of the node.', example='Cross-database Spark SQL-1'),
    nodeOutput?: string(name='NodeOutput', description='The output variables for the node. This parameter is available only for some types of nodes.', example='{ "outputs":[ "extractMethod":"json" , "variableName":"var",   "description":"demo desc" } ] }'),
    nodeType?: string(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).', example='SPARK_SQL'),
    timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
  }(name='Task', description='The task node.'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTask  GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskFlowGraphRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskFlowGraphResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9D91166-A626-5F4E-9CA6-7AB10C59DBD8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  taskFlowGraph?: {
    canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow is editable. Valid values:

- **true**: editable
- **false**: non-editable', example='true'),
    dagName?: string(name='DagName', description='The name of the task flow.', example='test'),
    edges?: {
      edge?: [ 
      {
        dagId?: long(name='DagId', description='The ID of the task flow.', example='15***'),
        id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
        nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
        nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
      }
    ](name='Edge')
    }(name='Edges', description='The list of task flow edges.'),
    nodes?: {
      node?: [ 
      {
        dagId?: long(name='DagId', description='The ID of the task flow.', example='15***'),
        graphParam?: string(name='GraphParam', description='The position of the node in the DAG.', example='{\\"x\\":541,\\"y\\":322,\\"layoutType\\":\\"Horizontal\\"}'),
        nodeConfig?: string(name='NodeConfig', description='The advanced configuration of the node.'),
        nodeContent?: string(name='NodeContent', description='The configuration of the node.', example='{ODI3OTNRVC****UHVFT29"}'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='44***'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test'),
        nodeType?: long(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).', example='36'),
        timeVariables?: string(name='TimeVariables', description='The time variables for the node.', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
      }
    ](name='Node')
    }(name='Nodes', description='The node list of the task flow.'),
    status?: long(name='Status', description='The status of the task flow. Valid values:

- **0**: invalid
- **1**: not scheduled
- **2**: to be scheduled', example='2'),
  }(name='TaskFlowGraph', description='The list of DAG variables of the task flow.'),
}

model GetTaskFlowGraphResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskFlowGraphResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskFlowGraph  GetTaskFlowGraphRequest
  * @return GetTaskFlowGraphResponse
 */
async function getTaskFlowGraph(request: GetTaskFlowGraphRequest): GetTaskFlowGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskFlowGraph', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskFlowNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  notification?: {
    dagNotificationFail?: boolean(name='DagNotificationFail', description='Indicates whether notifications for failed task flows are enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
    dagNotificationSla?: boolean(name='DagNotificationSla', description='Indicates whether service level agreement (SLA) global notifications for task flows are enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
    dagNotificationSuccess?: boolean(name='DagNotificationSuccess', description='Indicates whether notifications for successful task flows are enabled. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
  }(name='Notification', description='The notification settings specified by the user.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='F19D575F-EBEA-5683-AFA3-A8F6D9A7DE03'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetTaskFlowNotificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskFlowNotificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskFlowNotification  GetTaskFlowNotificationRequest
  * @return GetTaskFlowNotificationResponse
 */
async function getTaskFlowNotification(request: GetTaskFlowNotificationRequest): GetTaskFlowNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskFlowNotification', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskInstanceRelationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.

This parameter is required.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to obtain the execution record ID.

This parameter is required.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskInstanceRelationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  nodeList?: {
    node?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The business time of the node.', example='2021-11-09 14:37:26'),
      endTime?: string(name='EndTime', description='The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-11 14:38:57'),
      executeTime?: long(name='ExecuteTime', description='The amount of time consumed for running the node. Unit: milliseconds.', example='170655'),
      id?: long(name='Id', description='The ID of the execution record of the task flow.', example='14059'),
      message?: string(name='Message', description='The description of the task.', example='test'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='14059'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Spark SQL-1'),
      nodeType?: int32(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).', example='36'),
      status?: int32(name='Status', description='The status of the node. Valid values:

*   **0**: The node is waiting to be scheduled.
*   **1**: The node is running.
*   **2**: The node is suspended.
*   **3**: The node failed to run.
*   **4**: The node is run.
*   **5**: The node is complete.', example='4'),
    }
  ](name='Node')
  }(name='NodeList', description='The information about the nodes in the execution record of the task flow.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetTaskInstanceRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceRelationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskInstanceRelation  GetTaskInstanceRelationRequest
  * @return GetTaskInstanceRelationResponse
 */
async function getTaskInstanceRelation(request: GetTaskInstanceRelationRequest): GetTaskInstanceRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskInstanceRelation', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
  uid?: string(name='Uid', description='The UID of the Alibaba Cloud account. You can view your UID by moving the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console.', example='22973492647626****', position='Query'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.', example='51****', position='Query'),
}

model GetUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='804BB128-CAFA-5DD0-BA1E-43DDE488****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request fails.', example='true'),
  user?: {
    curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that are performed on the current day.', example='3'),
    curResultCount?: long(name='CurResultCount', description='The number of rows that are queried on the current day.', example='28'),
    dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 

*   The system returns this parameter if the user has set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=***'),
    email?: string(name='Email', description='The email address that is used to receive notifications.

> 

*   The system returns this parameter if the user has set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set an email address.', example='Uesr_email'),
    lastLoginTime?: string(name='LastLoginTime', description='The last point in time when the user logged on to the console.', example='2021-11-08 11:26:21'),
    maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
    maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='10000'),
    mobile?: string(name='Mobile', description='The mobile number of the user.

> 

*   The system returns this parameter if the user has set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set a mobile phone number.', example='1389223****'),
    nickName?: string(name='NickName', description='The nickname of the user.', example='User_NickName'),
    notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message
*   **EMAIL**: email.
*   **DINGDING**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='EMAIL'),
    parentUid?: long(name='ParentUid', description='The UID of the Alibaba Cloud account of the user.

> An Alibaba Cloud account can contain one or more RAM users.', example='140692647406****'),
    roleIdList?: {
      roleIds?: [ int32 ](name='RoleIds')
    }(name='RoleIdList', description='The list of role IDs.'),
    roleNameList?: {
      roleNames?: [ string ](name='RoleNames')
    }(name='RoleNameList', description='The list of role names.'),
    signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC_SHA1.', example='NONE'),
    state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
    uid?: string(name='Uid', description='The UID of the user.', example='22275482072787****'),
    userId?: string(name='UserId', description='The ID of the user.', example='51****'),
    webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 

*   If the user has set a webhook URL, DMS sends notifications to the specified URL.

*   The system does not return this parameter if the user has not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
  }(name='User', description='The information about the user.'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserActiveTenantRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetUserActiveTenantResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  tenant?: {
    status?: string(name='Status', description='The status of the tenant. Valid values:

*   **ACTIVE**: The tenant is used to access DMS.
*   **IN_ACTIVE**: The tenant is not used.', example='ACTIVE'),
    tenantName?: string(name='TenantName', description='The name of the tenant.', example='test_name'),
    tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
  }(name='Tenant', description='The details of the tenant.'),
}

model GetUserActiveTenantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserActiveTenantResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserActiveTenant  GetUserActiveTenantRequest
  * @return GetUserActiveTenantResponse
 */
async function getUserActiveTenant(request: GetUserActiveTenantRequest): GetUserActiveTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserActiveTenant', 'POST', '/', 'json', false, 'json', request);
}

model GetUserUploadFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobKey: string(name='JobKey', description='The key of the file upload task. The key is returned when you call the [CreateUploadFileJob](https://help.aliyun.com/document_detail/206059.html) or [CreateUploadOSSFileJob](https://help.aliyun.com/document_detail/206060.html) operation.

This parameter is required.', example='65254a49100e', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetUserUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='BDEFE9F2-B3B4-42D0-83AE-ECF9FC067DCD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  uploadFileJobDetail?: {
    attachmentKey?: string(name='AttachmentKey', description='The key of the file that is returned after the file is uploaded. You can use this key when you upload the file as an attachment in a ticket.', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql'),
    fileName?: string(name='FileName', description='The name of the file.', example='test.sql'),
    fileSize?: long(name='FileSize', description='The size of the file. Unit: byte.', example='2968269'),
    fileSource?: string(name='FileSource', description='The purpose of the uploaded file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='datacorrect'),
    jobKey?: string(name='JobKey', description='The key of the file upload task.', example='65254a4c1614235217749100e'),
    jobStatus?: string(name='JobStatus', description='The status of the file upload task. Valid values:

*   **INIT**: The file upload task was initialized.
*   **PENDING**: The file upload task waited to be run.
*   **BE_SCHEDULED**: The file upload task waited to be scheduled.
*   **FAIL**: The file upload task failed.
*   **SUCCESS**: The file upload task was successful.
*   **RUNNING**: The file upload task was being run.', example='SUCCESS'),
    jobStatusDesc?: string(name='JobStatusDesc', description='The information about the status of the file upload task.', example='success'),
    uploadOSSParam?: {
      bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_bucket'),
      endpoint?: string(name='Endpoint', description='The endpoint of the OSS bucket.', example='http://oss-cn-hangzhou.aliyuncs.com'),
      objectName?: string(name='ObjectName', description='The name of the OSS object.', example='test.sql'),
    }(name='UploadOSSParam', description='The information about the Object Storage Service (OSS) bucket from which the file is uploaded.

> This parameter is returned if the value of **UploadType** is **OSS**.'),
    uploadType?: string(name='UploadType', description='The method used to upload the file. Valid values:

*   **URL**
*   **OSS**', example='URL'),
    uploadURL?: string(name='UploadURL', description='The URL of the file.

> This parameter is returned if the value of **UploadType** is **URL**.', example='http://xxxx/test.sql'),
    uploadedSize?: long(name='UploadedSize', description='The size of the uploaded file. Unit: byte.', example='2968269'),
  }(name='UploadFileJobDetail', description='The details of the file upload task.'),
}

model GetUserUploadFileJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserUploadFileJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserUploadFileJob  GetUserUploadFileJobRequest
  * @return GetUserUploadFileJobResponse
 */
async function getUserUploadFileJob(request: GetUserUploadFileJobRequest): GetUserUploadFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserUploadFileJob', 'POST', '/', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  workspaceId: long(name='WorkspaceId', description='This parameter is required.', example='12****', position='Query'),
}

model GetWorkspaceResponseBody = {
  data?: {
    description?: string(name='Description', example='Test'),
    ownerId?: string(name='OwnerId', example='12345****'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    serviceAccountId?: string(name='ServiceAccountId', example='12345****'),
    tid?: long(name='Tid', example='3322****'),
    vpcId?: string(name='VpcId', example='vpc-xxxx'),
    workspaceId?: long(name='WorkspaceId', example='863020290155****'),
    workspaceName?: string(name='WorkspaceName', example='workspace_xxx'),
  }(name='Data'),
  message?: string(name='Message', example='UnknownError'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF****'),
  success?: boolean(name='Success', example='true'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkspace  GetWorkspaceRequest
  * @return GetWorkspaceResponse
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model GrantTemplateAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment?: string(name='Comment', description='The reason why you want to grant permissions on resources to the users by using the permission template.', example='Business test.', position='Query'),
  expireDate: string(name='ExpireDate', description='The time when the permission expires. Specify the time in the yyyy-MM-DD HH:mm:ss format.

This parameter is required.', example='2023-03-08 17:58:53', position='Query'),
  templateId: long(name='TemplateId', description='The ID of the permission template.

This parameter is required.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
  userIds: string(name='UserIds', description='The IDs of users to which you want to grant permissions on resources by using the permission template.

This parameter is required.', example='[12***,34***,56***]', position='Query'),
}

model GrantTemplateAuthorityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  result?: boolean(name='Result', description='Indicates whether the permissions on resources were granted to the users by using the permission template.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GrantTemplateAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantTemplateAuthorityResponseBody(name='body'),
}

/**
  * @description You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of GrantTemplateAuthority  GrantTemplateAuthorityRequest
  * @return GrantTemplateAuthorityResponse
 */
async function grantTemplateAuthority(request: GrantTemplateAuthorityRequest): GrantTemplateAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantTemplateAuthority', 'POST', '/', 'json', false, 'json', request);
}

model GrantUserPermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: string(name='DbId', description='The ID of the database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.

>  The value of the DatabaseId parameter is that of the DbId parameter.', example='1***', position='Query'),
  dsType: string(name='DsType', description='The permissions on a specific type of object that you want to grant to the user. Valid values:

*   INSTANCE: permissions on instances
*   DATABASE: permissions on physical databases
*   LOGIC_DATABASE: permissions on logical databases
*   TABLE: permissions on physical tables
*   LOGIC_TABLE: permissions on logical tables

This parameter is required.', example='DATABASE', position='Query'),
  expireDate: string(name='ExpireDate', description='The time when the permissions expire.

This parameter is required.', example='2021-12-12 00:00:00', position='Query'),
  instanceId?: long(name='InstanceId', description='The ID of the instance. You must specify this parameter if you grant permissions on an instance to the user. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the instance.', example='174****', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. You must specify this parameter if you grant permissions on a database to the user. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false', position='Query'),
  permTypes: string(name='PermTypes', description='The permission type. Separate multiple permission types with commas (,). Valid values:

*   **QUERY**: the query permissions
*   **EXPORT**: the export permissions
*   **CORRECT**: the change permissions
*   **LOGIN**: the logon permissions
*   **PERF**: the query permissions on the performance details of the instance

This parameter is required.', example='QUERY', position='Query'),
  tableId?: string(name='TableId', description='The ID of the table. You must specify this parameter if you grant permissions on a table to the user. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table ID.', example='132***', position='Query'),
  tableName?: string(name='TableName', description='The name of the table. You must specify this parameter if you grant permissions on a table to the user.', example='table_name', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', position='Query'),
  userId: string(name='UserId', description='The ID of the user. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.

>  The user ID is different from the ID of your Alibaba Cloud account.

This parameter is required.', example='51****', position='Query'),
}

model GrantUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GrantUserPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantUserPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantUserPermission  GrantUserPermissionRequest
  * @return GrantUserPermissionResponse
 */
async function grantUserPermission(request: GrantUserPermissionRequest): GrantUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model InspectProxyAccessSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model InspectProxyAccessSecretResponseBody = {
  accessSecret?: string(name='AccessSecret', description='The authorization password of the security protection agent.', example='xxx'),
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model InspectProxyAccessSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InspectProxyAccessSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InspectProxyAccessSecret  InspectProxyAccessSecretRequest
  * @return InspectProxyAccessSecretResponse
 */
async function inspectProxyAccessSecret(request: InspectProxyAccessSecretRequest): InspectProxyAccessSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InspectProxyAccessSecret', 'POST', '/', 'json', false, 'json', request);
}

model ListAbacAuthorizationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', minimum=1, maximum=200, position='Query'),
  policyId?: string(name='PolicyId', example='12****', position='Query'),
  policySource?: string(name='PolicySource', example='USER_DEFINE', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListAbacAuthorizationsResponseBody = {
  authorizationList?: [ 
    {
      authorizationId?: long(name='AuthorizationId', example='32****'),
      identityId?: long(name='IdentityId', example='51****'),
      identityName?: string(name='IdentityName', example='test_user'),
      identityType?: string(name='IdentityType', example='USER'),
      policyId?: long(name='PolicyId', example='12****'),
      policyName?: string(name='PolicyName', example='policy_test'),
      policySource?: string(name='PolicySource', example='USER_DEFINE'),
    }
  ](name='AuthorizationList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='3'),
}

model ListAbacAuthorizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAbacAuthorizationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAbacAuthorizations  ListAbacAuthorizationsRequest
  * @return ListAbacAuthorizationsResponse
 */
async function listAbacAuthorizations(request: ListAbacAuthorizationsRequest): ListAbacAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAbacAuthorizations', 'POST', '/', 'json', false, 'json', request);
}

model ListAbacPoliciesRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', minimum=1, maximum=200, position='Query'),
  searchKey?: string(name='SearchKey', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListAbacPoliciesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  policyList?: [ 
    {
      abacPolicyContent?: string(name='AbacPolicyContent', example='{
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "dms:DbType": [
            "redis"
          ]
        }
      }
    }
  ],
  "Version": "1"
}'),
      abacPolicyDesc?: string(name='AbacPolicyDesc', example='test'),
      abacPolicyId?: long(name='AbacPolicyId', example='12****'),
      abacPolicyName?: string(name='AbacPolicyName', example='policy_test'),
      abacPolicySource?: string(name='AbacPolicySource', example='USER_DEFINE'),
      creatorId?: long(name='CreatorId', example='51****'),
    }
  ](name='PolicyList'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  tid?: long(name='Tid', example='3***'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListAbacPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAbacPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAbacPolicies  ListAbacPoliciesRequest
  * @return ListAbacPoliciesResponse
 */
async function listAbacPolicies(request: ListAbacPoliciesRequest): ListAbacPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAbacPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model ListAuthorityTemplateResponseBody = {
  authorityTemplateViewList?: {
    authorityTemplateView?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-10-26 11:37:47'),
      creatorId?: long(name='CreatorId', example='522****'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      templateId?: long(name='TemplateId', example='2592'),
    }
  ](name='AuthorityTemplateView')
  }(name='AuthorityTemplateViewList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', example='true'),
  tid?: long(name='Tid', example='3***'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListAuthorityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorityTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorityTemplate  ListAuthorityTemplateRequest
  * @return ListAuthorityTemplateResponse
 */
async function listAuthorityTemplate(request: ListAuthorityTemplateRequest): ListAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedDatabasesForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', example='MySQL', position='Query'),
  envType?: string(name='EnvType', example='product', position='Query'),
  logic?: boolean(name='Logic', example='false', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='51****', position='Query'),
}

model ListAuthorizedDatabasesForUserResponseBody = {
  databases?: [ 
    {
      dbId?: string(name='DbId', example='254****'),
      dbType?: string(name='DbType', example='MYSQL'),
      envType?: string(name='EnvType', example='product'),
      instanceId?: string(name='InstanceId', example='235****'),
      logic?: boolean(name='Logic', example='false'),
      permissionDetail?: {
        dsType?: string(name='DsType', example='DATABASE'),
        expireDate?: string(name='ExpireDate', example='2024-12-06 10:00:00'),
        message?: string(name='Message'),
        permType?: string(name='PermType', example='CORRECT'),
      }(name='PermissionDetail'),
      schemaName?: string(name='SchemaName', example='poc_testdb'),
      searchName?: string(name='SearchName', example='poc'),
      userId?: string(name='UserId', example='51****'),
    }
  ](name='Databases'),
  requestId?: string(name='RequestId', example='012AE0B5-4B52-532F-BD7C-1EE9F182089B'),
}

model ListAuthorizedDatabasesForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedDatabasesForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedDatabasesForUser  ListAuthorizedDatabasesForUserRequest
  * @return ListAuthorizedDatabasesForUserResponse
 */
async function listAuthorizedDatabasesForUser(request: ListAuthorizedDatabasesForUserRequest): ListAuthorizedDatabasesForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedDatabasesForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedInstancesForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', example='MySQL', position='Query'),
  envType?: string(name='EnvType', example='product', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='51****', position='Query'),
}

model ListAuthorizedInstancesForUserResponseBody = {
  instances?: [ 
    {
      dbType?: string(name='DbType', example='MySQL'),
      envType?: string(name='EnvType', example='product'),
      host?: string(name='Host', example='rm-2zex9lrc0gz0****.mysql.rds.aliyuncs.com'),
      instanceAlias?: string(name='InstanceAlias', example='DMS_TEST'),
      instanceId?: string(name='InstanceId', example='21****'),
      permissionDetail?: {
        dsType?: string(name='DsType', example='DATABASE'),
        expireDate?: string(name='ExpireDate', example='2024-12-06 10:00:00'),
        message?: string(name='Message'),
        permType?: string(name='PermType', example='CORRECT'),
      }(name='PermissionDetail'),
      port?: string(name='Port', example='3306'),
      userId?: string(name='UserId', example='51****'),
      userName?: string(name='UserName', example='user_test'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='B7DB89CC-017D-5503-8953-38FFE241A618'),
}

model ListAuthorizedInstancesForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedInstancesForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedInstancesForUser  ListAuthorizedInstancesForUserRequest
  * @return ListAuthorizedInstancesForUserResponse
 */
async function listAuthorizedInstancesForUser(request: ListAuthorizedInstancesForUserRequest): ListAuthorizedInstancesForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedInstancesForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedUsersForDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='This parameter is required.', example='135***', position='Query'),
  logic?: boolean(name='Logic', example='false', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='poc_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListAuthorizedUsersForDatabaseResponseBody = {
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  users?: [ 
    {
      uid?: string(name='Uid', example='164882191****'),
      userId?: string(name='UserId', example='51****'),
      userNickName?: string(name='UserNickName', example='user_test'),
    }
  ](name='Users'),
}

model ListAuthorizedUsersForDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedUsersForDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedUsersForDatabase  ListAuthorizedUsersForDatabaseRequest
  * @return ListAuthorizedUsersForDatabaseResponse
 */
async function listAuthorizedUsersForDatabase(request: ListAuthorizedUsersForDatabaseRequest): ListAuthorizedUsersForDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedUsersForDatabase', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedUsersForInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='174****', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='poc_test', position='Query'),
  tid?: long(name='Tid', example='3****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListAuthorizedUsersForInstanceResponseBody = {
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  users?: [ 
    {
      uid?: string(name='Uid', example='164882191****'),
      userId?: string(name='UserId', example='51***'),
      userNickName?: string(name='UserNickName', example='user_test'),
      userRealName?: string(name='UserRealName', example='user01'),
    }
  ](name='Users'),
}

model ListAuthorizedUsersForInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedUsersForInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedUsersForInstance  ListAuthorizedUsersForInstanceRequest
  * @return ListAuthorizedUsersForInstanceResponse
 */
async function listAuthorizedUsersForInstance(request: ListAuthorizedUsersForInstanceRequest): ListAuthorizedUsersForInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedUsersForInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListClassificationTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListClassificationTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  templateList?: [ 
    {
      name?: string(name='Name', description='The name of the classification template.', example='test'),
      remark?: string(name='Remark', description='The remarks.', example='test'),
      templateId?: long(name='TemplateId', description='The ID of the classification template.', example='3**'),
      templateType?: string(name='TemplateType', description='The type of the classification template. Valid values:

*   **INNER**: built-in template
*   **USER_DEFINE**: custom template', example='USER_DEFINE'),
    }
  ](name='TemplateList', description='The list of templates.'),
}

model ListClassificationTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClassificationTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClassificationTemplates  ListClassificationTemplatesRequest
  * @return ListClassificationTemplatesResponse
 */
async function listClassificationTemplates(request: ListClassificationTemplatesRequest): ListClassificationTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClassificationTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListColumnsRequest {
  regionId?: string(name='RegionId', position='Host'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false', position='Query'),
  tableId: string(name='TableId', description='The ID of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the table ID.

This parameter is required.', example='39281****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model ListColumnsResponseBody = {
  columnList?: {
    column?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   true: The column is an auto-increment column.
*   false: The column is not an auto-increment column.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the column.', example='62589****'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='name'),
      columnType?: string(name='ColumnType', description='The data type of the column.', example='varchar'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='4'),
      dataPrecision?: int32(name='DataPrecision', description='The number of valid digits for the field.', example='0'),
      dataScale?: int32(name='DataScale', description='The number of decimal places for the field.', example='0'),
      defaultValue?: string(name='DefaultValue', description='The default value of the column.', example='def_value'),
      description?: string(name='Description', description='The description of the column.', example='test'),
      functionType?: string(name='FunctionType', description='The type of the masking algorithm that is used for the field. Valid values:

*   null: No masking algorithm is used.
*   DEFAULT: A full masking algorithm is used.
*   FIX_POS: The fixed position is masked.
*   FIX_CHAR: The fixed characters are replaced.', example='DEFAULT'),
      nullable?: boolean(name='Nullable', description='Indicates whether the column can be empty. Valid values:

*   **true**: The column can be empty.
*   **false**: The column cannot be empty.', example='false'),
      securityLevel?: string(name='SecurityLevel', description='The security level of the column. Valid values:

*   INNER: The column is an internal column but not sensitive.
*   SENSITIVE: The column is a sensitive column.
*   CONFIDENTIAL: The column is a confidential column.

> For more information, see [Sensitivity levels of fields](https://help.aliyun.com/document_detail/66091.html).', example='INNER'),
      sensitive?: boolean(name='Sensitive', description='Indicates whether the column is a sensitive column. Valid values:

*   **true**: The column is a sensitive column.
*   **false**: The column is not a sensitive column.', example='false'),
    }
  ](name='Column')
  }(name='ColumnList', description='The details about columns.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AD9AC55-5873-474A-9F33-4285806A3619'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListColumnsResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances whose control mode is Security Collaboration.
  * @param request  the request parameters of ListColumns  ListColumnsRequest
  * @return ListColumnsResponse
 */
async function listColumns(request: ListColumnsRequest): ListColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListColumns', 'POST', '/', 'json', false, 'json', request);
}

model ListDAGVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.

This parameter is required.', example='7***', position='Query'),
  pageIndex: int32(name='PageIndex', description='The number of the page to return.

This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.

This parameter is required.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDAGVersionsResponseBody = {
  dagVersionList?: {
    dagVersion?: [ 
    {
      dagName?: string(name='DagName', description='The name of the task flow.', example='Spark SQL'),
      dagOwnerId?: string(name='DagOwnerId', description='The ID of the task flow owner.', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='name'),
      lastVersionId?: long(name='LastVersionId', description='The ID of the previously published version.', example='2****'),
      versionComments?: string(name='VersionComments', description='The description of the version.', example='test_OSS'),
      versionId?: long(name='VersionId', description='The ID of the version.', example='2****'),
    }
  ](name='DagVersion')
  }(name='DagVersionList', description='The information about the published versions.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7775630-7901-51B9-8782-9B585EC0799A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListDAGVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDAGVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDAGVersions  ListDAGVersionsRequest
  * @return ListDAGVersionsResponse
 */
async function listDAGVersions(request: ListDAGVersionsRequest): ListDAGVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDAGVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListDBTaskSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DBTaskGroupId: long(name='DBTaskGroupId', description='The ID of the SQL task group. You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to obtain this parameter.

This parameter is required.', example='1324235', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDBTaskSQLJobResponseBody = {
  DBTaskSQLJobList?: [ 
    {
      comment?: string(name='Comment', description='The description of the SQL task.', example='test'),
      createTime?: string(name='CreateTime', description='The time when the SQL task was created.', example='2021-02-18 17:49:20'),
      dbId?: long(name='DbId', description='The ID of the database.', example='43214523'),
      dbSearchName?: string(name='DbSearchName', description='The name that is used to search for the database.', example='test@xxx:3306【test】'),
      dbTaskGroupId?: long(name='DbTaskGroupId', description='The ID of the SQL task group.', example='4324132'),
      jobId?: long(name='JobId', description='The ID of the SQL task.', example='123435'),
      jobType?: string(name='JobType', description='The type of the SQL task.', example='STRUCT_SYNC'),
      lastExecTime?: string(name='LastExecTime', description='The time when the SQL task was last executed.', example='2021-02-18 17:49:31'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a logical database.', example='false'),
      status?: string(name='Status', description='The state of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
      transactional?: boolean(name='Transactional', description='Indicates whether the SQL task is executed as a transaction. Valid values:

*   **true**: The SQL task is executed as a transaction.
*   **false**: The SQL task is not executed as a transaction.', example='false'),
    }
  ](name='DBTaskSQLJobList', description='The list of the SQL tasks.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6C47680-8D2D-43A4-8902-F2740D71A398'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of the SQL tasks.', example='1'),
}

model ListDBTaskSQLJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDBTaskSQLJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDBTaskSQLJob  ListDBTaskSQLJobRequest
  * @return ListDBTaskSQLJobResponse
 */
async function listDBTaskSQLJob(request: ListDBTaskSQLJobRequest): ListDBTaskSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDBTaskSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model ListDBTaskSQLJobDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='The ID of the SQL task. You can call the [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to query the SQL task ID.

This parameter is required.', example='1276****', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDBTaskSQLJobDetailResponseBody = {
  DBTaskSQLJobDetailList?: [ 
    {
      affectRows?: long(name='AffectRows', description='The number of rows affected by the SQL task.', example='0'),
      currentSql?: string(name='CurrentSql', description='The SQL statement that was executed in the SQL task.', example='update a set id = 1 where id  = 1;'),
      dbId?: long(name='DbId', description='The ID of the physical database.', example='1988****'),
      endTime?: string(name='EndTime', description='The point in time when the SQL task ended.', example='2021-12-16 00:00:01'),
      executeCount?: long(name='ExecuteCount', description='The number of times that the SQL statement was executed.', example='1'),
      jobDetailId?: long(name='JobDetailId', description='The ID of the details of the SQL task.', example='24723****'),
      jobId?: long(name='JobId', description='The ID of the SQL task.', example='1276****'),
      log?: string(name='Log', description='The details of the operational log.', example='log_info'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      skip?: boolean(name='Skip', description='Indicates whether the SQL statement was skipped. Valid values:

*   **true**: The SQL statement was skipped.
*   **false**: The SQL statement was not skipped.', example='false'),
      sqlType?: string(name='SqlType', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='CREATE_TABLE'),
      startTime?: string(name='StartTime', description='The point in time when the SQL task started.', example='2021-12-16 00:00:00'),
      status?: string(name='Status', description='The status of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
      timeDelay?: long(name='TimeDelay', description='The duration of the SQL task. Unit: milliseconds.', example='38'),
    }
  ](name='DBTaskSQLJobDetailList', description='The details of SQL tasks.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='JobId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F044E33-FE09-58F1-8C61-A0F612EC****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of SQL tasks.', example='1'),
}

model ListDBTaskSQLJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDBTaskSQLJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDBTaskSQLJobDetail  ListDBTaskSQLJobDetailRequest
  * @return ListDBTaskSQLJobDetailResponse
 */
async function listDBTaskSQLJobDetail(request: ListDBTaskSQLJobDetailRequest): ListDBTaskSQLJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDBTaskSQLJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListDDLPublishRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

> You can create a schema design ticket in the Data Management (DMS) console. For more information, see [Design schemas](https://help.aliyun.com/document_detail/69711.html). You can also call the [CreateOrder](https://help.aliyun.com/document_detail/144649.html) operation to create a schema design ticket and obtain the ID of the ticket.

This parameter is required.', example='3214325', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, log on to the DMS console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDDLPublishRecordsResponseBody = {
  DDLPublishRecordList?: [ 
    {
      auditExpireTime?: string(name='AuditExpireTime', description='The time when the approval expires.', example='2020-12-14 20:52:38'),
      auditStatus?: string(name='AuditStatus', description='The approval state of the ticket. Valid values:

*   **EXEMPT_PASS**: The ticket passes without approval.
*   **TO_AUDIT**: The ticket is pending for approval.
*   **CANCEL**: The ticket is canceled.
*   **SUCCESS**: The ticket is approved.
*   **FAIL**: The ticket fails to pass the approval.', example='CANCEL'),
      comment?: string(name='Comment', description='Release remarks.', example='Release remarks'),
      creatorId?: long(name='CreatorId', description='The ID of the user who creates the ticket. You can obtain the user ID by calling the [GetUser](https://help.aliyun.com/document_detail/147098.html) operation and querying the value of the UserId parameter. The value is not the unique ID (UID) of the Alibaba Cloud account.', example='1423'),
      finality?: boolean(name='Finality', description='Indicates whether the approval is terminated. Valid values:

*   **true**: The approval is terminated.
*   **false**: The approval is not terminated.

> Multiple reasons can terminate the approval. For example, you withdraw the application or your ticket is not approved before the specified time.', example='true'),
      finalityReason?: string(name='FinalityReason', description='The reason for the termination.', example='CANCEL'),
      publishStatus?: string(name='PublishStatus', description='The publishing state of the ticket. Valid values:

*   **START**: The ticket is created.
*   **ANALYZE**: The ticket is under analysis.
*   **AUDIT**: The ticket is under approval.
*   **DISPATCH**: A task is generated for the ticket.
*   **SUCCESS**: The task is successful.', example='AUDIT'),
      publishTaskInfoList?: [ 
        {
          dbId?: long(name='DbId', description='The ID of the database.', example='4325'),
          logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: the database is not a logical database.', example='false'),
          planTime?: string(name='PlanTime', description='The time to publish the ticket.', example='2020-12-14 20:52:38'),
          publishJobList?: [ 
            {
              DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='423515'),
              executeCount?: long(name='ExecuteCount', description='The number of SQL statements that are executed.', example='0'),
              scripts?: string(name='Scripts', description='The script for data changes.', example='ALTER TABLE test_toolkit_rename_table_after_rename MODIFY COLUMN gmt_modified datetime NOT NULL'),
              statusDesc?: string(name='StatusDesc', description='The description of the state.', example='NONE'),
              tableName?: string(name='TableName', description='The name of the table after the change.', example='test_toolkit_rename_table_after_rename'),
              taskJobStatus?: string(name='TaskJobStatus', description='The state of the publishing task. Valid values:

*   **NONE**: The state of the task is unknown.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task fails.', example='NONE'),
            }
          ](name='PublishJobList', description='The list of the publishing tasks.'),
          publishStrategy?: string(name='PublishStrategy', description='The publishing policy. Valid values:

*   **IMMEDIATELY**: immediately publishes the ticket.
*   **REGULARLY**: publishes the ticket at a scheduled time.', example='IMMEDIATELY'),
          statusDesc?: string(name='StatusDesc', description='The description of the state.', example='NONE'),
          taskJobStatus?: string(name='TaskJobStatus', description='The state of the task.', example='NONE'),
        }
      ](name='PublishTaskInfoList', description='The list of publishing tasks.'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the operation. Valid values:

*   **NONE_RISK**: The operation does not have risks.
*   **LOW_RISK**: The operation is at low risk.
*   **MIDDLE_RISK**: The operation is at medium risk.
*   **HIGH_RISK**: The operation is at high risk.', example='LOW_RISK'),
      statusDesc?: string(name='StatusDesc', description='The description of the publishing state.', example='CANCEL'),
      workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process.', example='432153'),
    }
  ](name='DDLPublishRecordList', description='The details of the publishing records.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A1549FB0-D4B8-4140-919F-17322C1072B8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListDDLPublishRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDDLPublishRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDDLPublishRecords  ListDDLPublishRecordsRequest
  * @return ListDDLPublishRecordsResponse
 */
async function listDDLPublishRecords(request: ListDDLPublishRecordsRequest): ListDDLPublishRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDDLPublishRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListDataCorrectPreCheckDBRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket for the data change.

This parameter is required.', example='432****', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Valid values: an integer that is greater than 0.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.', example='4321****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataCorrectPreCheckDBResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  preCheckDBList?: [ 
    {
      dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
      searchName?: string(name='SearchName', description='The name of the database.', example='test@localhost:3306'),
      sqlNum?: long(name='SqlNum', description='The number of SQL statements.', example='1'),
    }
  ](name='PreCheckDBList', description='The information about the databases that are involved in the precheck.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95A972AF-FAED-4768-9360-7C0DF5D594D0'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListDataCorrectPreCheckDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataCorrectPreCheckDBResponseBody(name='body'),
}

/**
  * @description For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
  * @param request  the request parameters of ListDataCorrectPreCheckDB  ListDataCorrectPreCheckDBRequest
  * @return ListDataCorrectPreCheckDBResponse
 */
async function listDataCorrectPreCheckDB(request: ListDataCorrectPreCheckDBRequest): ListDataCorrectPreCheckDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataCorrectPreCheckDB', 'POST', '/', 'json', false, 'json', request);
}

model ListDataCorrectPreCheckSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.', example='1930****', position='Query'),
  orderId: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.

This parameter is required.', example='453****', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataCorrectPreCheckSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  preCheckSQLList?: [ 
    {
      affectRows?: long(name='AffectRows', description='The estimated number of affected rows.', example='0'),
      checkSQL?: string(name='CheckSQL', description='The SQL statement.', example='OPTIMIZE TABLE `Text_TableNames`'),
      dbId?: long(name='DbId', description='The ID of the database.', example='1930****'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://help.aliyun.com/document_detail/265977.html) operation to query the details of optimization suggestions based on the key.', example='b9e771fc6ec247dea6d06a32c777****'),
      sqlReviewStatus?: string(name='SqlReviewStatus', description='The review status of the SQL statement. Valid values:

*   **WAITING**: The SQL statement is pending for review.
*   **RUNNING**: The SQL statement is being reviewed.
*   **IGNORE**: The SQL statement review is skipped.
*   **PASS**: The SQL statement passed the review.
*   **BLOCK**: The SQL statement failed the review.', example='WAITING'),
      sqlType?: string(name='SqlType', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='OPTIMIZE'),
      tableNames?: string(name='TableNames', description='The name of the table whose data is changed.', example='Text_TableNames'),
    }
  ](name='PreCheckSQLList', description='The precheck information about SQL statements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ListDataCorrectPreCheckSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataCorrectPreCheckSQLResponseBody(name='body'),
}

/**
  * @description For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
  * @param request  the request parameters of ListDataCorrectPreCheckSQL  ListDataCorrectPreCheckSQLRequest
  * @return ListDataCorrectPreCheckSQLResponse
 */
async function listDataCorrectPreCheckSQL(request: ListDataCorrectPreCheckSQLRequest): ListDataCorrectPreCheckSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataCorrectPreCheckSQL', 'POST', '/', 'json', false, 'json', request);
}

model ListDataImportSQLPreCheckDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='11****', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumer?: long(name='PageNumer', description='The page number. Pages start from page 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

> You can log on to the Data Management (DMS) console and choose **Security and Specifications** > **Operation Audit** in the top navigation bar to view more types of SQL statements.', example='INSERT', position='Query'),
  statusCode?: string(name='StatusCode', description='The state of the ticket. If you leave this parameter empty, all the states are queried by default. Valid values:

*   **INIT**: The ticket is being initialized.
*   **RUNNING**: The ticket is in progress.
*   **SUCCESS**: The ticket is complete.
*   **TIMEOUT**: The ticket is skipped due to timeout.
*   **FAIL**: The ticket fails.', example='SUCCESS', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataImportSQLPreCheckDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  preCheckSQLDetailList?: [ 
    {
      skip?: boolean(name='Skip', description='Indicates whether the precheck of the SQL statement was skipped. Valid values:

*   **true**
*   **false**', example='true'),
      sqlId?: long(name='SqlId', description='The SQL ID, which indicates the sequence number of the SQL statement. The number starts with 1.', example='1'),
      sqlType?: string(name='SqlType', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='INSERT'),
      statusCode?: string(name='StatusCode', description='The state of the ticket. Valid values:

*   **INIT**: The ticket was being initialized.
*   **RUNNING**: The ticket was in progress.
*   **SUCCESS**: The ticket was complete.
*   **TIMEOUT**: The ticket was skipped due to timeout.
*   **FAIL**: The ticket failed.', example='SUCCESS'),
    }
  ](name='PreCheckSQLDetailList', description='The precheck information of SQL statements.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  totalCount?: long(name='TotalCount', description='The number of SQL statements.', example='1'),
}

model ListDataImportSQLPreCheckDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataImportSQLPreCheckDetailResponseBody(name='body'),
}

/**
  * @description You can call this operation only if the data is imported in security mode in your data import ticket.
  * @param request  the request parameters of ListDataImportSQLPreCheckDetail  ListDataImportSQLPreCheckDetailRequest
  * @return ListDataImportSQLPreCheckDetailResponse
 */
async function listDataImportSQLPreCheckDetail(request: ListDataImportSQLPreCheckDetailRequest): ListDataImportSQLPreCheckDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataImportSQLPreCheckDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListDataImportSQLTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataImportSQLTypeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  sqlTypeResult?: [ string ](name='SqlTypeResult', description='The types of SQL statements.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListDataImportSQLTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataImportSQLTypeResponseBody(name='body'),
}

/**
  * @description You can call this operation only if the data is imported in security mode in your data import ticket.
  * @param request  the request parameters of ListDataImportSQLType  ListDataImportSQLTypeRequest
  * @return ListDataImportSQLTypeResponse
 */
async function listDataImportSQLType(request: ListDataImportSQLTypeRequest): ListDataImportSQLTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataImportSQLType', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeCatalogRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  searchKey?: string(name='SearchKey', example='hive', position='Query'),
  tid?: long(name='Tid', example='3', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeCatalogResponseBody = {
  cataLogList?: [
    DLCatalog
  ](name='CataLogList'),
  errorCode?: string(name='ErrorCode', example='400'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakeCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeCatalogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeCatalog  ListDataLakeCatalogRequest
  * @return ListDataLakeCatalogResponse
 */
async function listDataLakeCatalog(request: ListDataLakeCatalogRequest): ListDataLakeCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeCatalog', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  searchKey?: string(name='SearchKey', example='default', position='Query'),
  tid?: long(name='Tid', example='3', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeDatabaseResponseBody = {
  databaseList?: [
    DLDatabase
  ](name='DatabaseList'),
  errorCode?: string(name='ErrorCode', example='400'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakeDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeDatabase  ListDataLakeDatabaseRequest
  * @return ListDataLakeDatabaseResponse
 */
async function listDataLakeDatabase(request: ListDataLakeDatabaseRequest): ListDataLakeDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeDatabase', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName?: string(name='DbName', example='default', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', example='.*', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeFunctionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  functionList?: [
    DLFunction
  ](name='FunctionList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakeFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeFunction  ListDataLakeFunctionRequest
  * @return ListDataLakeFunctionResponse
 */
async function listDataLakeFunction(request: ListDataLakeFunctionRequest): ListDataLakeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeFunction', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeFunctionNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  functionNamePattern?: string(name='FunctionNamePattern', example='.*', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeFunctionNameResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  functionNameList?: [ string ](name='FunctionNameList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc'),
  requestId?: string(name='RequestId', example='F1C78D32-1AFD-58AD-9DD2-C8A0896969DD'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakeFunctionNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeFunctionNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeFunctionName  ListDataLakeFunctionNameRequest
  * @return ListDataLakeFunctionNameResponse
 */
async function listDataLakeFunctionName(request: ListDataLakeFunctionNameRequest): ListDataLakeFunctionNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeFunctionName', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  partNames?: [ string ](name='PartNames', shrink='json', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakePartitionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NesLoKLEdIZrKhDT7I2gS****'),
  partitionList?: [
    DLPartition
  ](name='PartitionList'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakePartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakePartition  ListDataLakePartitionRequest
  * @return ListDataLakePartitionResponse
 */
async function listDataLakePartition(request: ListDataLakePartitionRequest): ListDataLakePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakePartition', 'POST', '/', 'json', true, 'form', request);
}

model ListDataLakePartitionByFilterRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  filter: string(name='Filter', description='This parameter is required.', example='ds>20241201', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakePartitionByFilterResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NesLoKLEdIZrKhDT7I2gS****'),
  partitionList?: [
    DLPartition
  ](name='PartitionList'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakePartitionByFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakePartitionByFilterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakePartitionByFilter  ListDataLakePartitionByFilterRequest
  * @return ListDataLakePartitionByFilterResponse
 */
async function listDataLakePartitionByFilter(request: ListDataLakePartitionByFilterRequest): ListDataLakePartitionByFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakePartitionByFilter', 'POST', '/', 'json', true, 'form', request);
}

model ListDataLakePartitionNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_name', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakePartitionNameResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NesLoKLEdIZrKhDT7I2gS****'),
  partitionNameList?: [ string ](name='PartitionNameList'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model ListDataLakePartitionNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakePartitionNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakePartitionName  ListDataLakePartitionNameRequest
  * @return ListDataLakePartitionNameResponse
 */
async function listDataLakePartitionName(request: ListDataLakePartitionNameRequest): ListDataLakePartitionNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakePartitionName', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tableNamePattern?: string(name='TableNamePattern', example='.*', position='Query'),
  tableType?: string(name='TableType', example='MANAGED_TABLE', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NesLoKLEdIZrKhDT7I2gS****'),
  requestId?: string(name='RequestId', example='3D3FB827-E667-50DB-AD59-C83F8237FECB'),
  success?: boolean(name='Success', example='true'),
  tableList?: [
    DLTable
  ](name='TableList'),
}

model ListDataLakeTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeTable  ListDataLakeTableRequest
  * @return ListDataLakeTableResponse
 */
async function listDataLakeTable(request: ListDataLakeTableRequest): ListDataLakeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeTable', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeTableNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='f056501ada12c1cc', position='Query'),
  tableNamePattern?: string(name='TableNamePattern', example='.*', position='Query'),
  tableType?: string(name='TableType', example='MANAGED_TABLE', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeTableNameResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='NesLoKLEdIZrKhDT7I2gS****'),
  requestId?: string(name='RequestId', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', example='true'),
  tableNameList?: [ string ](name='TableNameList'),
}

model ListDataLakeTableNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeTableNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeTableName  ListDataLakeTableNameRequest
  * @return ListDataLakeTableNameResponse
 */
async function listDataLakeTableName(request: ListDataLakeTableNameRequest): ListDataLakeTableNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeTableName', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLakeTablebaseInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  page?: int32(name='Page', example='1', minimum=1, position='Query'),
  rows?: int32(name='Rows', example='10', minimum=0, maximum=200, position='Query'),
  searchKey?: string(name='SearchKey', example='test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model ListDataLakeTablebaseInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='400'),
  errorMessage?: string(name='ErrorMessage', example='Specified parameter Rows is not valid.'),
  requestId?: string(name='RequestId', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', example='true'),
  tablebaseInfoList?: [
    DLTablebaseInfo
  ](name='TablebaseInfoList'),
  totalCount?: string(name='TotalCount', example='100'),
}

model ListDataLakeTablebaseInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLakeTablebaseInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataLakeTablebaseInfo  ListDataLakeTablebaseInfoRequest
  * @return ListDataLakeTablebaseInfoResponse
 */
async function listDataLakeTablebaseInfo(request: ListDataLakeTablebaseInfoRequest): ListDataLakeTablebaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLakeTablebaseInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabaseUserPermssionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the database.

This parameter is required.', example='123', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  permType: string(name='PermType', description='The type of the permission. Valid values:

*   DATABASE: permissions on databases
*   TABLE: permissions on tables
*   COLUMN: permissions on fields

This parameter is required.', example='DATABASE', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
  userName?: string(name='UserName', description='The nickname of the user.', example='search_user_name', position='Query'),
}

model ListDatabaseUserPermssionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68075D06-7406-4887-83A7-F558A4D28C13'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', description='The alias of the database instance.', example='instance_alias'),
      columnName?: string(name='ColumnName', description='The name of a column.', example='column_name'),
      dbId?: string(name='DbId', description='The ID of the database.', example='1234'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dsType?: string(name='DsType', description='The type of resources on which the user has permissions.', example='DATABASE'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='product'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='1443'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database.', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permission was created.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='The extra information. This parameter is reserved.', example='DEFAULT'),
          originFrom?: string(name='OriginFrom', description='The description of the entity that authorizes the permission.', example='xxx grant'),
          permType?: string(name='PermType', description='The type of the permission. Valid values:

*   QUERY: the query permissions
*   EXPORT: the export permissions
*   CORRECT: the change permissions', example='QUERY'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='13434'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of user permissions.'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='xxx@xxxx:3306'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='xxx'),
      tableId?: string(name='TableId', description='The ID of the table.', example='42345'),
      tableName?: string(name='TableName', description='The name of the table.', example='table_name'),
      userId?: string(name='UserId', description='The ID of the user.', example='14324'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='user_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The details of user permissions.'),
}

model ListDatabaseUserPermssionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseUserPermssionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabaseUserPermssions  ListDatabaseUserPermssionsRequest
  * @return ListDatabaseUserPermssionsResponse
 */
async function listDatabaseUserPermssions(request: ListDatabaseUserPermssionsRequest): ListDatabaseUserPermssionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseUserPermssions', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance. The valid value is returned if you call the ListInstances operation. The instance ID is not the ID of the RDS instance.

This parameter is required.', example='12***', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.', example='10', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='3***', position='Query'),
}

model ListDatabasesResponseBody = {
  databaseList?: {
    database?: [ 
    {
      catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.', example='1'),
      databaseId?: string(name='DatabaseId', description='The ID of the database.', example='1'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dbaId?: string(name='DbaId', description='The ID of the DBA.', example='1'),
      dbaName?: string(name='DbaName', description='The nickname of the Database administrator (DBA) to which the database belongs.', example='dba_user'),
      encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf-8'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='dev'),
      host?: string(name='Host', description='The endpoint of the instance to which the database belongs.', example='xxx.xxx.xxx.xxx'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the database belongs.', example='1'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the database.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the database owners.'),
      port?: int32(name='Port', description='The connection port of the instance to which the database belongs.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
      searchName?: string(name='SearchName', description='The name that is used for searching the database.', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', description='The system ID (SID) of the instance to which the database belongs.', example='test'),
      state?: string(name='State', description='The state of the database. Valid values:

*   NORMAL: The database is normal.
*   DISABLE: The database is disabled.
*   OFFLINE: The database is unpublished.
*   NOT_EXIST: The database does not exist.', example='NORMAL'),
    }
  ](name='Database')
  }(name='DatabaseList', description='The details of the databases.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5541CDA6-F674-435C-81BD-40C2FB926CE3'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of databases that belong to an instance.', example='1'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabases  ListDatabasesRequest
  * @return ListDatabasesResponse
 */
async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListDefaultSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDefaultSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='3E8AF4C3-A822-53A8-970C-059EE83BBD5A'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', description='The ID of the task flow.', example='0'),
      id?: long(name='Id', description='The ID of the SLA rule.', example='1'),
      intervalMinutes?: int32(name='IntervalMinutes', description='The timeout period. Unit: minutes.', example='1080'),
      nodeId?: long(name='NodeId', description='The ID of the task node.', example='0'),
      ruleType?: int32(name='RuleType', description='The type of the rule. Valid values:

*   **0**: an SLA rule for a task flow
*   **1**: an SLA rule for a task node', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList', description='The list of SLA rules.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListDefaultSLARulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDefaultSLARulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDefaultSLARules  ListDefaultSLARulesRequest
  * @return ListDefaultSLARulesResponse
 */
async function listDefaultSLARules(request: ListDefaultSLARulesRequest): ListDefaultSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDefaultSLARules', 'POST', '/', 'json', false, 'json', request);
}

model ListDesensitizationRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  funcType?: string(name='FuncType', description='The type of the masking algorithm.', example='MD5', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The maximum value is 100.', example='20', position='Query'),
  ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='1', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the masking rule.', example='default desensitization rule test', position='Query'),
  ruleType?: string(name='RuleType', description='The algorithm used for masking.', example='HASH', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDesensitizationRuleResponseBody = {
  desensitizationRuleList?: [ 
    {
      funcParams?: string(name='FuncParams', description='The parameter.', example='{paramName: salt, paramValue: 1}'),
      funcSample?: string(name='FuncSample', description='The example.', example='[{paramName: testStr, paramValue: 1}]'),
      functionType?: string(name='FunctionType', description='The algorithm type.', example='MD5'),
      lastModifierId?: string(name='LastModifierId', description='The ID of the user who last modified the masking rule.', example='2'),
      lastModifierName?: string(name='LastModifierName', description='The name of the user who last modified the masking rule.', example='test user'),
      referenceCount?: int32(name='ReferenceCount', description='The number of times that the masking was used.', example='1'),
      ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='hash desensitization algorithm'),
      ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='23'),
      ruleName?: string(name='RuleName', description='The name of the masking rule.', example='default desensitization rule test'),
      ruleType?: string(name='RuleType', description='The algorithm used for masking.', example='HASH'),
    }
  ](name='DesensitizationRuleList', description='The list of masking rules.'),
  errorCode: string(name='ErrorCode', description='The error code returned if the request failed.

This parameter is required.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned. By default, this parameter is not returned.', example='1'),
}

model ListDesensitizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDesensitizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDesensitizationRule  ListDesensitizationRuleRequest
  * @return ListDesensitizationRuleResponse
 */
async function listDesensitizationRule(request: ListDesensitizationRuleRequest): ListDesensitizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDesensitizationRule', 'POST', '/', 'json', false, 'json', request);
}

model ListDifyInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion?: string(name='DataRegion', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model ListDifyInstancesResponseBody = {
  code?: string(name='Code'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  root?: {
    data?: [ 
      {
        appUuid?: string(name='AppUuid'),
        createdTime?: string(name='CreatedTime'),
        edition?: string(name='Edition'),
        enterpriseInternetUrl?: string(name='EnterpriseInternetUrl'),
        enterpriseIntranetUrl?: string(name='EnterpriseIntranetUrl'),
        instanceId?: string(name='InstanceId'),
        internetUrl?: string(name='InternetUrl'),
        intranetUrl?: string(name='IntranetUrl'),
        majorVersion?: string(name='MajorVersion'),
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitchId?: string(name='VSwitchId'),
        vpcId?: string(name='VpcId'),
        workspaceId?: string(name='WorkspaceId'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Data'),
  }(name='Root'),
  success?: boolean(name='Success'),
}

model ListDifyInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDifyInstancesResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of ListDifyInstances  ListDifyInstancesRequest
  * @return ListDifyInstancesResponse
 */
async function listDifyInstances(request: ListDifyInstancesRequest): ListDifyInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDifyInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListEffectiveOrdersRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListEffectiveOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  orderSummary?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code of DMS.

*   dms_pre_public_cn: DMS that uses the subscription billing method
*   dms_post_public_cn: DMS that uses the pay-as-you-go billing method', example='dms_pre_public_cn'),
      commodityType?: string(name='CommodityType', description='The type of the service.

*   **VersionType**: DMS that supports control modes
*   **SensitiveDataProtection**: DMS that supports sensitive data protection', example='VersionType'),
      orderList?: [ 
        {
          buyerId?: string(name='BuyerId', description='The UID of the user who placed the order.', example='2698420314****'),
          endTime?: string(name='EndTime', description='The time when the instance expires.', example='2022-11-24 00:00:00'),
          insNum?: string(name='InsNum', description='The maximum number of database instances that you can use DMS to manage.', example='7'),
          instanceId?: string(name='InstanceId', description='The ID of the instance for the purchased service.', example='rm-bp1xd1v866****'),
          orderId?: string(name='OrderId', description='The ID of the order.', example='2190037****'),
          startTime?: string(name='StartTime', description='The time when the instance is started.', example='2022-10-24 00:00:00'),
        }
      ](name='OrderList', description='Details about the orders.'),
      totalQuota?: int32(name='TotalQuota', description='The sum of the number of instances that you can use DMS to manage in all orders.', example='12'),
      versionType?: string(name='VersionType', description='The control mode of DMS. Valid values:

*   **stand**: Stable Change
*   **safety**: Security Collaboration', example='safety'),
    }
  ](name='OrderSummary', description='The information about orders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListEffectiveOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEffectiveOrdersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEffectiveOrders  ListEffectiveOrdersRequest
  * @return ListEffectiveOrdersResponse
 */
async function listEffectiveOrders(request: ListEffectiveOrdersRequest): ListEffectiveOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEffectiveOrders', 'POST', '/', 'json', false, 'json', request);
}

model ListIndexesRequest {
  regionId?: string(name='RegionId', position='Host'),
  logic?: boolean(name='Logic', description='Specifies whether the table is a logical table.', example='false', position='Query'),
  tableId: string(name='TableId', description='The ID of the table.

This parameter is required.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='0', position='Query'),
}

model ListIndexesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  indexList?: {
    index?: [ 
    {
      indexComment?: string(name='IndexComment', description='The description of the index.', example='test'),
      indexId?: string(name='IndexId', description='The ID of the index.', example='1'),
      indexName?: string(name='IndexName', description='The name of the index.', example='idx_test'),
      indexType?: string(name='IndexType', description='The type of the index. Valid values:

*   Primary
*   Unique
*   Normal
*   FullText
*   Spatial', example='Primary'),
      tableId?: string(name='TableId', description='The ID of the table.', example='1'),
    }
  ](name='Index')
  }(name='IndexList', description='The details of indexes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1F4DE2F1-5B47-462A-A973-E02EB7AF386B'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListIndexesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIndexesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIndexes  ListIndexesRequest
  * @return ListIndexesResponse
 */
async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIndexes', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceLoginAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', description='The end of the time range to query.

>  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. This way, the returned entries can be displayed by page to increase query efficiency.

This parameter is required.', example='2021-11-18 18:00:00', position='Query'),
  opUserName?: string(name='OpUserName', description='The alias of the user.', example='test_OpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='20', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', description='The name of the database or instance whose logon records you want to query.

>  If SQL statements are executed at the instance level, you can set this parameter to an instance name. If SQL statements are executed at the database level, you can set this parameter to a database name.', example='test_SearchName', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.

This parameter is required.', example='2021-11-18 11:00:00', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListInstanceLoginAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidPageSize'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter PageSize is not valid.'),
  instanceLoginAuditLogList?: {
    instanceLoginAuditLog?: [ 
    {
      dbUser?: string(name='DbUser', description='The database account that is used to log on to the instance.', example='test_User'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='177****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='rm-bp144d5ky4l4rli0417****.mysql.rds.aliyuncs.com:3306[rm-bp144d5ky4l4r****]'),
      opTime?: string(name='OpTime', description='The time when the user performed an operation on the instance.', example='2021-11-18 11:13:26'),
      requestIp?: string(name='RequestIp', description='The source IP address of the request.', example='117.36.XX.XX,100.104.XX.XX'),
      userId?: long(name='UserId', description='The ID of the user.', example='12****'),
      userName?: string(name='UserName', description='The alias of the user.', example='test_UserName'),
    }
  ](name='InstanceLoginAuditLog')
  }(name='InstanceLoginAuditLogList', description='The logon records of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='074CE7C9-4F9C-5B62-89BC-7B4914A3****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListInstanceLoginAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceLoginAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceLoginAuditLog  ListInstanceLoginAuditLogRequest
  * @return ListInstanceLoginAuditLogResponse
 */
async function listInstanceLoginAuditLog(request: ListInstanceLoginAuditLogRequest): ListInstanceLoginAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceLoginAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceUserPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the instance.

This parameter is required.', example='174****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='100', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', position='Query'),
  userName?: string(name='UserName', description='The nickname of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query the nickname of the user.

>  The value of the NickName parameter is that of the UserName parameter.', example='test_nick_name', position='Query'),
}

model ListInstanceUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7D162AAE-6501-5691-BF14-D7018F662895'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='174****'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permissions were granted.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='This parameter is reserved.', example='XXX'),
          originFrom?: string(name='OriginFrom', description='The user who grants the permissions.', example='xxx authorization'),
          permType?: string(name='PermType', description='The type of the permissions. Valid values:

*   LOGIN: the logon permissions
*   PERF: the query permissions on the instance', example='LOGIN'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='773****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of permissions.'),
      userId?: string(name='UserId', description='The ID of the user.', example='51****'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='test_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The permissions of the user on the instance.'),
}

model ListInstanceUserPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceUserPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceUserPermissions  ListInstanceUserPermissionsRequest
  * @return ListInstanceUserPermissionsResponse
 */
async function listInstanceUserPermissions(request: ListInstanceUserPermissionsRequest): ListInstanceUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MySQL', position='Query'),
  envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product:** production environment
*   **dev**: development environment
*   **pre**: pre-release environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag:** staging environment', example='product', position='Query'),
  instanceSource?: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
*   **RDS**: an ApsaraDB RDS instance
*   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='RDS', position='Query'),
  instanceState?: string(name='InstanceState', description='The status of the database instance. Valid values:

*   **NORMAL**
*   **DISABLE**', example='NORMAL', position='Query'),
  netType?: string(name='NetType', description='The network type of the database instance. Valid values:

*   **CLASSIC:** classic network
*   **VPC:** VPC', example='VPC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The number cannot exceed 100.', example='50', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  region?: string(name='Region', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for database instances.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  instanceList?: {
    instance?: [ 
    {
      dataLinkName?: string(name='DataLinkName', description='The name of the database link for the database instance.', example='dblink_test'),
      databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database instance.', example='******'),
      databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database.', example='dbUser'),
      dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA) of the database instance.', example='31****'),
      dbaNickName?: string(name='DbaNickName', description='The nickname of the DBA of the instance.', example='dbaName'),
      ddlOnline?: int32(name='DdlOnline', description='Indicates whether the lock-free schema change feature is enabled for the database instance.', example='1'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance on which the database instance is deployed.', example='150****'),
      ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.', example='cn-hangzhou'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product:** production environment
*   **dev**: development environment
*   **pre**: pre-release environment
*   **test**: test environment
*   **sit**: SIT environment
*   **uat**: UAT environment
*   **pet**: stress testing environment
*   **stag:** staging environment', example='product'),
      exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.', example='86400'),
      host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='****.mysql.rds.aliyuncs.com'),
      instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance.', example='test'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='150***'),
      instanceSource?: string(name='InstanceSource', description='The source of the database instance.', example='RDS'),
      instanceType?: string(name='InstanceType', description='The type of the database instance.', example='mysql'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the database instance.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the owners of the database instance.'),
      port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='3306'),
      queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.', example='60'),
      safeRuleId?: string(name='SafeRuleId', description='The ID of the security rule set of the database instance.', example='1'),
      sellSitd?: boolean(name='SellSitd', description='Indicates whether the sensitive data protection feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      sellTrust?: string(name='SellTrust'),
      sid?: string(name='Sid', description='The system ID (SID) of the database instance.', example='test'),
      standardGroup?: {
        groupMode?: string(name='GroupMode', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='COMMON'),
        groupName?: string(name='GroupName', description='The name of the security rule corresponding to the control mode.', example='test'),
      }(name='StandardGroup', description='The control mode of the database instance.'),
      state?: string(name='State', description='The status of the database instance.', example='NORMAL'),
      useDsql?: int32(name='UseDsql', description='Indicates whether the cross-database query feature is enabled for the database instance. Valid values:

*   **0**: disabled
*   **1:**: enabled', example='1'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the database instance belongs.', example='vpc-o6wrloqsdqc9io3mg****'),
    }
  ](name='Instance')
  }(name='InstanceList', description='The information about the database instances that are returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of database instances that are returned.', example='1'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListLhTaskFlowAndScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceId: long(name='SpaceId', description='The ID of the workspace. You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.

This parameter is required.', example='24', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  userId?: long(name='UserId', description='The ID of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.', example='51****', position='Query'),
}

model ListLhTaskFlowAndScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  rawDAGList?: {
    dag?: [ 
    {
      canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow can be modified. Valid values:

*   **true**: The task flow can be modified.
*   **false**: The task flow cannot be modified.', example='true'),
      creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the workspace.', example='Creator_Name'),
      dagName?: string(name='DagName', description='The name of the task flow.', example='Dag_Name'),
      dagOwnerId?: string(name='DagOwnerId', description='The user ID of the task flow owner.', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_Name'),
      dataFlowId?: long(name='DataFlowId', description='The extended field. No meaning is specified for this field.', example='-'),
      demoId?: string(name='DemoId', description='The extended field. No meaning is specified for this field.', example='-'),
      deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
      id?: long(name='Id', description='The ID of the task flow.', example='134137****'),
      isDeleted?: boolean(name='IsDeleted', description='Indicates whether the task flow is deleted. Valid values:

*   **true**: deleted
*   **false**: not deleted', example='false'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='0'),
      latestInstanceTime?: int32(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-14'),
      scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='2**'),
      spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='1'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='2'),
    }
  ](name='Dag')
  }(name='RawDAGList', description='The task flows in the default business scenario.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  scenarioDAGList?: {
    scenarioDAG?: [ 
    {
      dagList?: {
        dag?: [ 
        {
          canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow can be modified. Valid values:

- **true**: The task flow can be modified.
- **false**: The task flow cannot be modified.', example='true'),
          creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
          creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the workspace.', example='Creator_Name'),
          dagName?: string(name='DagName', description='The name of the task flow.', example='Dag_Name'),
          dagOwnerId?: string(name='DagOwnerId', description='The user ID of the task flow owner.', example='51****'),
          dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_Name'),
          dataFlowId?: long(name='DataFlowId', description='The extended field. No meaning is specified for this field.', example='-'),
          demoId?: string(name='DemoId', description='The extended field. No meaning is specified for this field.', example='-'),
          deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
          id?: long(name='Id', description='The ID of the task flow.', example='9***'),
          isDeleted?: boolean(name='IsDeleted', description='Indicates whether the task flow is deleted. Valid values:

- **true**: deleted
- **false**: not deleted', example='false'),
          latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

- 0: invalid
- 1: scheduling disabled
- 2: waiting to be scheduled', example='1'),
          latestInstanceTime?: int32(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-14'),
          scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='2**'),
          spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='1'),
          status?: int32(name='Status', description='The status of the task flow. Valid values:

- **0**: invalid
- **1**: scheduling disabled
- **2**: waiting to be scheduled', example='1'),
        }
      ](name='Dag')
      }(name='DagList', description='The list of task flows.'),
      scenario?: {
        creatorId?: string(name='CreatorId', description='The ID of the user who creates the business scenario.', example='51****'),
        description?: string(name='Description', description='The description of the business scenario.', example='test'),
        scenarioName?: string(name='ScenarioName', description='The name of the business scenario.', example='Scenario_2'),
      }(name='Scenario', description='The information about the business scenario.'),
    }
  ](name='ScenarioDAG')
  }(name='ScenarioDAGList', description='The task flows in other business scenarios.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
}

model ListLhTaskFlowAndScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLhTaskFlowAndScenarioResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](https://help.aliyun.com/document_detail/424759.html) operation can be called to add a workspace member.
  * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
  * @param request  the request parameters of ListLhTaskFlowAndScenario  ListLhTaskFlowAndScenarioRequest
  * @return ListLhTaskFlowAndScenarioResponse
 */
async function listLhTaskFlowAndScenario(request: ListLhTaskFlowAndScenarioRequest): ListLhTaskFlowAndScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLhTaskFlowAndScenario', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicDatabasesRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='50', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3422', position='Query'),
}

model ListLogicDatabasesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  logicDatabaseList?: {
    logicDatabase?: [ 
    {
      alias?: string(name='Alias', description='The alias of the logical database.', example='logic_db_alias'),
      databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1***'),
      databaseIds?: {
        databaseIds?: [ long ](name='DatabaseIds')
      }(name='DatabaseIds', description='Logical database sub-ID list.'),
      dbType?: string(name='DbType', description='The type of the logical database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).', example='polardb'),
      envType?: string(name='EnvType', description='The type of the environment to which the logical database belongs. Valid values:

- **product**: production environment
- **dev**: development environment
- **pre**: staging environment
- **test**: test environment
- **sit**: system integration testing (SIT) environment
- **uat**: user acceptance testing (UAT) environment
- **pet**: stress testing environment
- **stag**: STAG environment', example='test'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. The return value is true.', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the logical database.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The names of the owners of the logical database.'),
      schemaName?: string(name='SchemaName', description='The name of the logical database.', example='logic_db'),
      searchName?: string(name='SearchName', description='The name that is used to search for the logical database.

> We recommend that you do not use this parameter for business development. The format of the parameter value may be modified in later versions.', example='logic_db[logic_db_alias]'),
    }
  ](name='LogicDatabase')
  }(name='LogicDatabaseList', description='The details of logical databases.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8068AF82-8A1A-592C-AC2E-6B75338BAB87'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of logical databases.', example='7'),
}

model ListLogicDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogicDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogicDatabases  ListLogicDatabasesRequest
  * @return ListLogicDatabasesResponse
 */
async function listLogicDatabases(request: ListLogicDatabasesRequest): ListLogicDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableId: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.

This parameter is required.', example='1****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingTableId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='TableId is mandatory for this action.'),
  logicTableRouteConfigList?: {
    logicTableRouteConfig?: [ 
    {
      routeExpr?: string(name='RouteExpr', description='The routing algorithm expression.', example='#id#%16\\t'),
      routeKey?: string(name='RouteKey', description='The unique key of the routing algorithm.', example='1'),
      tableId?: long(name='TableId', description='The ID of the logical table.', example='4****'),
    }
  ](name='LogicTableRouteConfig')
  }(name='LogicTableRouteConfigList', description='The routing algorithms.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C6A0D7D-B034-59F6-854C-32425AC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListLogicTableRouteConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogicTableRouteConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogicTableRouteConfig  ListLogicTableRouteConfigRequest
  * @return ListLogicTableRouteConfigResponse
 */
async function listLogicTableRouteConfig(request: ListLogicTableRouteConfigRequest): ListLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseId: string(name='DatabaseId', description='The ID of the logical database.

This parameter is required.', example='1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of the table.', example='true', position='Query'),
  searchName?: string(name='SearchName', description='The keyword that is used to search for the logical tables. Prefix match is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model ListLogicTablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicTableList?: {
    logicTable?: [ 
    {
      databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1'),
      logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. The value is fixed to true.', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the logical tables.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the owners of the logical tables.'),
      schemaName?: string(name='SchemaName', description='The logical database to which the logical table belongs.', example='yuyang_test'),
      tableCount?: string(name='TableCount', description='The number of logical tables.', example='4'),
      tableExpr?: string(name='TableExpr', description='The expression of the logical table.', example='test[1-4]'),
      tableGuid?: string(name='TableGuid', description='The GUID of the logical table.', example='IDB_L_308302.yuyang_test.test_ch'),
      tableId?: string(name='TableId', description='The ID of the logical table.', example='1'),
      tableName?: string(name='TableName', description='The name of the logical table.', example='test'),
    }
  ](name='LogicTable')
  }(name='LogicTableList', description='The details of the logical tables.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1E6484F-9DF1-4406-9BDE-0861C4629B69'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of logical tables that meet the query conditions.', example='1'),
}

model ListLogicTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogicTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogicTables  ListLogicTablesRequest
  * @return ListLogicTablesResponse
 */
async function listLogicTables(request: ListLogicTablesRequest): ListLogicTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicTables', 'POST', '/', 'json', false, 'json', request);
}

model ListMetaCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='50', maximum=1000, position='Query'),
  parentCategoryId?: long(name='ParentCategoryId', example='30000322682', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListMetaCategoryResponseBody = {
  categoryList?: {
    metaCategory?: [
    MetaCategory
  ](name='MetaCategory')
  }(name='CategoryList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetaCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMetaCategory  ListMetaCategoryRequest
  * @return ListMetaCategoryResponse
 */
async function listMetaCategory(request: ListMetaCategoryRequest): ListMetaCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMetaCategory', 'POST', '/', 'json', false, 'json', request);
}

model ListOrdersRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2022-04-09 11:00:00', position='Query'),
  orderResultType?: string(name='OrderResultType', description='The scope of the tickets that you want to query. Valid values:

*   **AS_ADMIN**: all tickets.
*   **AS_COMMITTER**: the tickets that are submitted by the current user.
*   **AS_HANDLER**: the tickets to be processed by the current user.
*   **AS_OWNER**: the tickets that are processed by the current user.
*   **AS_Related**: the tickets that are related to the current user.', example='AS_ADMIN', position='Query'),
  orderStatus?: string(name='OrderStatus', description='The status of the tickets that you want to query. Valid values:

*   **ALL**: queries the tickets of all statuses.
*   **FINISHED**: queries the tickets that are completed.
*   **RUNNING**: queries the tickets that are being processed.', example='ALL', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  pluginType?: string(name='PluginType', description='The type of the tickets that you want to query. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).', example='DC_COMMON', position='Query'),
  searchContent?: string(name='SearchContent', description='The keyword that is used to query tickets.', example='test', position='Query'),
  searchDateType?: string(name='SearchDateType', description='The time condition based on which you want to query tickets. Valid values:

*   **CREATE_TIME**: the time when a ticket was created.
*   **MODIFY_TIME**: the time when a ticket was last modified.', example='CREATE_TIME', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2022-04-08 11:00:00', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3000', position='Query'),
}

model ListOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  orders?: {
    order?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the ticket.', example='test'),
      committer?: string(name='Committer', description='The user who submitted the ticket.', example='test'),
      committerId?: long(name='CommitterId', description='The ID of the user who submitted the ticket.', example='51****'),
      createTime?: string(name='CreateTime', description='The time when the ticket was created.', example='2022-04-08 11:15:46'),
      lastModifyTime?: string(name='LastModifyTime', description='The time when the ticket was last modified.', example='2022-04-08 11:27:45'),
      orderId?: long(name='OrderId', description='The ID of the ticket.', example='51****'),
      pluginType?: string(name='PluginType', description='The type of the ticket.', example='DC_COMMON'),
      statusCode?: string(name='StatusCode', description='The status code of the ticket. Valid values:

*   **fail**: The ticket fails to be executed.
*   **toaudit**: The ticket is waiting for approval.
*   **cancel**: The ticket is cancelled.
*   **processing**: The ticket is being executed.
*   **approved**: The ticket is approved.
*   **reject**: The ticket is rejected.
*   **success**: The ticket is executed.
*   **closed**: The ticket is closed.', example='success'),
      statusDesc?: string(name='StatusDesc', description='The status description of the ticket.', example='changed successfully'),
    }
  ](name='Order')
  }(name='Orders', description='The details about the tickets.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model ListOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrdersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrders  ListOrdersRequest
  * @return ListOrdersResponse
 */
async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrders', 'POST', '/', 'json', false, 'json', request);
}

model ListProxiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxiesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='User can not access to Tenant [123445]'),
  proxyList?: [ 
    {
      creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
      creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
      httpsPort?: int32(name='HttpsPort', description='The number of the port that was used by HTTPS clients to connect to the database instance.', example='443'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='183****'),
      privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint is enabled. Default value: **true**.', example='true'),
      privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
      protocolPort?: int32(name='ProtocolPort', description='The number of the port that is used to connect the database instance.', example='3306'),
      protocolType?: string(name='ProtocolType', description='The type of the database. Example: MYSQL.', example='MYSQL'),
      proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
      publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint is enabled. Valid values:

*   **true**: The public endpoint is enabled.
*   **false**: The public endpoint is disabled.', example='false'),
      publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.

> 

*   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS (DNS) is returned.

*   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using DNS is returned.', example='dphzmy-5j8oimjsz6ze****-pub.proxy.dms.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='ProxyList', description='The proxies that are generated by the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5812180E-555F-5F90-BE4F-280576F4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListProxiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProxiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProxies  ListProxiesRequest
  * @return ListProxiesResponse
 */
async function listProxies(request: ListProxiesRequest): ListProxiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxies', 'POST', '/', 'json', false, 'json', request);
}

model ListProxyAccessesRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', description='The ID of the secure access proxy. 

>  You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) operation to query the ID of the secure access proxy.

This parameter is required.', example='47', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxyAccessesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingProxyId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='ProxyId is mandatory for this action.'),
  proxyAccessList?: [ 
    {
      accessId?: string(name='AccessId', description='The username of the database account that is authorized to access the database instance by using the secure access proxy feature.', example='MXPL8HalI22m****'),
      gmtCreate?: string(name='GmtCreate', description='The time when the user is authorized to access the database instance by using the secure access proxy feature.', example='2021-03-31 10:34:18'),
      indepAccount?: string(name='IndepAccount', description='The username of the independent database account.', example='****'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='164****'),
      originInfo?: string(name='OriginInfo', description='The method that is used to authorize the user to access the database instance by using the secure access proxy feature. Valid values: 

- **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the user ID (UID) of the Alibaba Cloud account.
- **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.', example='Authorization by the Alibaba Cloud Account(29490401597700****)'),
      proxyAccessId?: long(name='ProxyAccessId', description='The ID that DMS generates after the user is authorized to access the database instance by using the secure access proxy feature. The ID is unique in DMS.', example='****'),
      proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='47'),
      userId?: long(name='UserId', description='The ID of the user.', example='26****'),
      userName?: string(name='UserName', description='The nickname of the user.', example='user'),
      userUid?: string(name='UserUid', description='The UID of the Alibaba Cloud account.', example='25936669186260****'),
    }
  ](name='ProxyAccessList', description='The information about the users that are authorized to access the database instance by using the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E53D178A-85E9-5E1F-88B6-3CB1FCF2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListProxyAccessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProxyAccessesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProxyAccesses  ListProxyAccessesRequest
  * @return ListProxyAccessesResponse
 */
async function listProxyAccesses(request: ListProxyAccessesRequest): ListProxyAccessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxyAccesses', 'POST', '/', 'json', false, 'json', request);
}

model ListProxySQLExecAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.

This parameter is required.', example='1636962846000', position='Query'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS', position='Query'),
  opUserName?: string(name='OpUserName', description='The alias of the user.', example='testNickName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum values: 100.', example='100', minimum=1, maximum=100, position='Query'),
  SQLType?: string(name='SQLType', description='The type of SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT', position='Query'),
  searchName?: string(name='SearchName', description='The name of the database instance.', example='test', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.

This parameter is required.', example='1636876446000', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='14****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxySQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter StartTime is not valid.'),
  proxySQLExecAuditLogList?: {
    proxySQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='Indicates the total number of rows returned after the SQL statement was executed. If an SELECT SQL statement is executed, the return value of this parameter indicates the total number of the queried data rows.', example='1'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time that is consumed to execute the SQL statement. Unit: milliseconds.', example='1324'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='4***'),
      instanceName?: string(name='InstanceName', description='The name of the database instance.', example='pc-uf662nrg017c6****.mysql.polardb.rds.aliyuncs.com:3306【test】'),
      opTime?: string(name='OpTime', description='The time at which the user executes the SQL statement on the database instance. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636876446000'),
      remark?: string(name='Remark', description='The description.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was executed.', example='select 1;'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      userId?: long(name='UserId', description='The ID of the user.', example='4****'),
      userName?: string(name='UserName', description='The nickname of the user.', example='testNickName'),
    }
  ](name='ProxySQLExecAuditLog')
  }(name='ProxySQLExecAuditLogList', description='The audit information about the database instance that is provided by the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50ECB006-2C35-5FCA-91B9-01987A0B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListProxySQLExecAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProxySQLExecAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProxySQLExecAuditLog  ListProxySQLExecAuditLogRequest
  * @return ListProxySQLExecAuditLogResponse
 */
async function listProxySQLExecAuditLog(request: ListProxySQLExecAuditLogRequest): ListProxySQLExecAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxySQLExecAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='3D1A59F4-EB2B-5D24-80A5-90C446A00DE2'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', description='The ID of the task flow.', example='11****'),
      id?: long(name='Id', description='The ID of the SLA rule.', example='2'),
      intervalMinutes?: int32(name='IntervalMinutes', description='The timeout period. Unit: minutes.', example='1080'),
      nodeId?: long(name='NodeId', description='The ID of the task node.', example='1'),
      ruleType?: int32(name='RuleType', description='The type of the rule. Valid values:

*   **0**: an SLA rule for a task flow
*   **1**: an SLA rule for a task node', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList', description='The list of SLA rules.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListSLARulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSLARulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSLARules  ListSLARulesRequest
  * @return ListSLARulesResponse
 */
async function listSLARules(request: ListSLARulesRequest): ListSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSLARules', 'POST', '/', 'json', false, 'json', request);
}

model ListSQLExecAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', description='The end of the time range to query.

>  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. The returned entries can be displayed by page to improve query efficiency.

This parameter is required.', example='2021-11-08 11:00:00', position='Query'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS', position='Query'),
  opUserName?: string(name='OpUserName', description='The nickname of the user who wrote the SQL statement.', example='test_OpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value cannot exceed 100.', example='20', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', description='The name of the database or instance based on which you want to query SQL statements.

>  If the SQL statements to be queried are at the instance level, you can set this parameter to an instance name. If the SQL statements to be queried are at the database level, you can set this parameter to a database name.', example='test_SearchName', position='Query'),
  sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.

This parameter is required.', example='2021-11-08 11:04:00', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39BC9C86-95AE-58F2-9862-A7C3D896****'),
  SQLExecAuditLogList?: {
    SQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='The number of rows affected by the SQL statement. For example, if you execute an SQL statement to query data, the number of retrieved rows is returned.', example='2'),
      dbId?: long(name='DbId', description='The ID of the database.', example='2157****'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time consumed by the execution of the SQL statement. Unit: milliseconds.', example='18'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='185***'),
      instanceName?: string(name='InstanceName', description='The name of the database.

>  If the SQL statement takes effect on an instance, the name of the instance is returned.', example='polar123@pc-bp1h9tgq4st9g****.mysql.polardb.rds.aliyuncs.com:3306[polar_qw_test]'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      opTime?: string(name='OpTime', description='The time when the operation specified by the SQL statement was performed on the instance or database.', example='2021-11-08 11:04:27'),
      remark?: string(name='Remark', description='The comment on the SQL statement.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was written.', example='SELECT * FROM `polar123`.`p_qw` ORDER BY `id` DESC'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='polar123'),
      userId?: long(name='UserId', description='The ID of the user who wrote the SQL statement.', example='12****'),
      userName?: string(name='UserName', description='The nickname of the user who wrote the SQL statement.', example='test_UserName'),
    }
  ](name='SQLExecAuditLog')
  }(name='SQLExecAuditLogList', description='The entries returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListSQLExecAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSQLExecAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSQLExecAuditLog  ListSQLExecAuditLogRequest
  * @return ListSQLExecAuditLogResponse
 */
async function listSQLExecAuditLog(request: ListSQLExecAuditLogRequest): ListSQLExecAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSQLExecAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListSQLReviewOriginSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderActionDetail?: {
    checkStatusResult?: string(name='CheckStatusResult', description='The review status of the SQL statement. Valid values:

*   **new**: The SQL statement was waiting to be reviewed.
*   **unknown**: The SQL statement cannot be parsed.
*   **check_not_pass**: The SQL statement failed to pass the review.
*   **check_pass**: The SQL statement passed the review.
*   **force_pass**: The SQL statement passed the manual review.
*   **force_not_pass**: The SQL statement failed to pass the manual review.', example='check_not_pass'),
    fileId?: long(name='FileId', description='The ID of the file that contains the SQL statements to be reviewed.', example='123345'),
    page?: {
      pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', maximum=500),
    }(name='Page', description='The pagination information.'),
    SQLReviewResult?: string(name='SQLReviewResult', description='The optimization suggestion for the SQL statement. Valid values:

*   **MUST_IMPROVE**: The SQL statement must be optimized.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you optimize the SQL statement.
*   **USE_DMS_TOOLKIT**: We recommend that you change schemas without locking tables.
*   **USE_DMS_DML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLE_INDEX_SUGGEST**: We recommend that you optimize indexes for the SQL statement.', example='MUST_IMPROVE'),
  }(name='OrderActionDetail', description='The parameters that are used to filter SQL statements involved in the ticket.', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the SQL review ticket. You can call the [CreateSQLReviewOrder](https://help.aliyun.com/document_detail/257777.html) operation to query the ticket ID.

This parameter is required.', example='123321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSQLReviewOriginSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the request failed.', example='UnknownError'),
  originSQLList?: [ 
    {
      checkStatus?: string(name='CheckStatus', description='The review status of the SQL statement. Valid values:

*   **new**: The SQL statement was waiting to be reviewed.
*   **unknown**: The SQL statement cannot be parsed.
*   **check_not_pass**: The SQL statement failed to pass the review.
*   **check_pass**: The SQL statement passed the review.
*   **force_pass**: The SQL statement passed the manual review.
*   **force_not_pass**: The SQL statement failed to pass the manual review.', example='check_pass'),
      checkedTime?: string(name='CheckedTime', description='The time when the SQL statement was reviewed.', example='2021-06-09 21:07:00'),
      fileId?: long(name='FileId', description='The file ID.', example='123321'),
      fileName?: string(name='FileName', description='The name of the file.', example='test.sql'),
      reviewSummary?: string(name='ReviewSummary', description='The statistics on the optimization suggestions for SQL statements. The value is a JSON string. Valid values:

*   **MUST_IMPROVE**: The SQL statements must be optimized.
*   **POTENTIAL_ISSUE**: The SQL statements contain potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you optimize the SQL statements.
*   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
*   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLEINDEXSUGGEST**: We recommend that you optimize indexes for the SQL statements.', example='{"POTENTIAL_ISSUE":1,"SUGGEST_IMPROVE":1}'),
      SQLContent?: string(name='SQLContent', description='The SQL statement in the file.', example='select id from table_name'),
      SQLId?: long(name='SQLId', description='The ID of the SQL statement.', example='1111'),
      SQLName?: string(name='SQLName', description='The name of the SQL statement.', example='getByPk'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The key that is used to query the information about optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://help.aliyun.com/document_detail/465919.html) operation to query the details based on this key.', example='a57e54ec5433475ea3082d882fdb89c5'),
      sqlHash?: string(name='SqlHash', description='The MD5 hash value that is obtained after the SQL statement is calculated by using a hash algorithm.', example='95adb6e77a0884d9e50232cb8c5c969d'),
      statusDesc?: string(name='StatusDesc', description='The description of the review status.', example='passed the test'),
    }
  ](name='OriginSQLList', description='The information about the parsed SQL statements.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: Valid values:

*   true
*   false', example='true'),
  totalCount?: int32(name='TotalCount', description='The number of SQL statements in the file.', example='10'),
}

model ListSQLReviewOriginSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSQLReviewOriginSQLResponseBody(name='body'),
}

/**
  * @description For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
  * @param request  the request parameters of ListSQLReviewOriginSQL  ListSQLReviewOriginSQLRequest
  * @return ListSQLReviewOriginSQLResponse
 */
async function listSQLReviewOriginSQL(request: ListSQLReviewOriginSQLRequest): ListSQLReviewOriginSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSQLReviewOriginSQL', 'POST', '/', 'json', false, 'json', request);
}

model ListScenariosRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListScenariosResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  scenarioList?: [ 
    {
      creatorId?: string(name='CreatorId', description='The ID of the user who created the business scenario.', example='23***'),
      description?: string(name='Description', description='The description of the business scenario.', example='test'),
      id?: long(name='Id', description='The ID of the business scenario.', example='41***'),
      scenarioName?: string(name='ScenarioName', description='The name of the business scenario.', example='test'),
    }
  ](name='ScenarioList', description='The details of the returned business scenarios.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListScenariosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScenariosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScenarios  ListScenariosRequest
  * @return ListScenariosResponse
 */
async function listScenarios(request: ListScenariosRequest): ListScenariosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScenarios', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveColumnInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName?: string(name='ColumnName', example='test_column', position='Query'),
  instanceId: int32(name='InstanceId', description='This parameter is required.', example='183****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  schemaName?: string(name='SchemaName', example='test_schema', position='Query'),
  tableName?: string(name='TableName', example='test_table', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model ListSensitiveColumnInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  sensitiveColumnList?: {
    sensitiveColumn?: [ 
    {
      categoryName?: string(name='CategoryName'),
      columnName?: string(name='ColumnName', example='test_column'),
      defaultDesensitizationRule?: {
        ruleId?: long(name='RuleId', example='101**'),
        ruleName?: string(name='RuleName', example='test'),
      }(name='DefaultDesensitizationRule'),
      instanceId?: int32(name='InstanceId', example='183****'),
      isPlain?: boolean(name='IsPlain', example='False'),
      sampleData?: string(name='SampleData'),
      schemaName?: string(name='SchemaName', example='test_schema'),
      securityLevel?: string(name='SecurityLevel'),
      semiDesensitizationRuleList?: {
        semiDesensitizationRule?: [ 
        {
          ruleId?: long(name='RuleId', example='10***'),
          ruleName?: string(name='RuleName', example='test01'),
        }
      ](name='SemiDesensitizationRule')
      }(name='SemiDesensitizationRuleList'),
      tableName?: string(name='TableName', example='test_table'),
      userSensitivityLevel?: string(name='UserSensitivityLevel', example='S1'),
    }
  ](name='SensitiveColumn')
  }(name='SensitiveColumnList'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListSensitiveColumnInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitiveColumnInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitiveColumnInfo  ListSensitiveColumnInfoRequest
  * @return ListSensitiveColumnInfoResponse
 */
async function listSensitiveColumnInfo(request: ListSensitiveColumnInfoRequest): ListSensitiveColumnInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveColumnInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveColumnsRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to query the name of the field.', example='test_column', position='Query'),
  dbId?: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.

>  You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of the physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.', example='1860', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='100', position='Query'),
  schemaName?: string(name='SchemaName', description='The name of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.

>  You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the name of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the name of a logical database.', example='test_schema', position='Query'),
  securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level', example='SENSITIVE', position='Query'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the ID of the table.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3', position='Query'),
}

model ListSensitiveColumnsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='09D82FD7-F87F-59EF-AA82-AEF71B09E306'),
  sensitiveColumnList?: {
    sensitiveColumn?: [ 
    {
      columnCount?: long(name='ColumnCount', description='The number of sensitive fields.', example='1'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='test_column'),
      functionType?: string(name='FunctionType', description='The type of the de-identification algorithm. Valid values:

*   DEFAULT: All characters are masked. This is the default value.
*   FIX_POS: The characters at specific positions are masked.
*   FIX_CHAR: Specific characters are masked.', example='DEFAULT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_schema'),
      securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   SENSITIVE
*   CONFIDENTIAL', example='SENSITIVE'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
    }
  ](name='SensitiveColumn')
  }(name='SensitiveColumnList', description='The sensitive fields.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model ListSensitiveColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitiveColumnsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitiveColumns  ListSensitiveColumnsRequest
  * @return ListSensitiveColumnsResponse
 */
async function listSensitiveColumns(request: ListSensitiveColumnsRequest): ListSensitiveColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveColumns', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveColumnsDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the field.

>  You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the name of the field.

This parameter is required.', example='ColumnName_test', position='Query'),
  dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.', example='1860****', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the database.

> * You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of a physical database.
> * You can also call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of a logical database.

This parameter is required.', example='SchemaName_test', position='Query'),
  tableName: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the table.

>  You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the name of the table.

This parameter is required.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model ListSensitiveColumnsDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7629888F-C9FB-4D16-A7D3-B443FE06FBD4'),
  sensitiveColumnsDetailList?: {
    sensitiveColumnsDetail?: [ 
    {
      columnDescription?: string(name='ColumnDescription', description='The description of the field.', example='test'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='ColumnName_test'),
      columnType?: string(name='ColumnType', description='The data type of the field.', example='varchar(32)'),
      dbId?: long(name='DbId', description='The ID of the database.', example='1860****'),
      dbType?: string(name='DbType', description='The type of the database.', example='mysql'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='product'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='SchemaName_test'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx:3306'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
    }
  ](name='SensitiveColumnsDetail')
  }(name='SensitiveColumnsDetailList', description='The details of the sensitive field.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListSensitiveColumnsDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitiveColumnsDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitiveColumnsDetail  ListSensitiveColumnsDetailRequest
  * @return ListSensitiveColumnsDetailResponse
 */
async function listSensitiveColumnsDetail(request: ListSensitiveColumnsDetailRequest): ListSensitiveColumnsDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveColumnsDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveDataAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName?: string(name='ColumnName', description='The name of the column that contains sensitive data.', example='ExampleColumnName', position='Query'),
  dbName?: string(name='DbName', description='The name of the database that stores the sensitive data.', example='ExampleDbName', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range for which you want to query the audit logs for sensitive information. Specify the time in the yyyy-MM-DD HH:mm:ss format.', example='2022-11-18 11:00:00', position='Query'),
  moduleName?: string(name='ModuleName', description='The function module whose audit logs you want to query for sensitive data. If you do not specify this parameter, all audit logs are queried. Valid values:

*   **SQL_CONSOLE**: data query
*   **SQL_CONSOLE_EXPORT**: query result export
*   **DATA_CHANGE**: data change
*   **DATA_EXPORT**: data export', example='SQL_CONSOLE', position='Query'),
  opUserName?: string(name='OpUserName', description='The username of the requester.', example='ExampleOpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Example: 100', example='100', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range for which you want to query the audit logs for sensitive information. Specify the time in the yyyy-MM-DD HH:mm:ss format.', example='2022-11-18 10:00:00', position='Query'),
  tableName?: string(name='TableName', description='The name of the table that stores the sensitive data.', example='ExampleTableName', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSensitiveDataAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  sensitiveDataAuditLogList?: [ 
    {
      dbDisplayName?: string(name='DbDisplayName', description='The name of the database that stores the sensitive data.', example='ExampleDbName@xxx.xxx.xxx.xxx:3306'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12****'),
      moduleName?: string(name='ModuleName', description='The name of the function module whose audit logs were queried.', example='SQL_CONSOLE'),
      opTime?: string(name='OpTime', description='The time when the operation was performed. The time is in the yyyy-MM-DD HH:mm:ss format.', example='2022-11-18 10:01:00'),
      sensitiveDataLog?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the column that contains sensitive data.', example='ExampleColumnName'),
          columnPermissionType?: string(name='ColumnPermissionType', description='The permission that the user has on the column. Valid values:

*   **No permission**
*   **Partial redaction**
*   **Plaintext**
*   **Change**
*   **Enable data masking**
*   **Disable data masking**', example='Change'),
          desensitizationRule?: string(name='DesensitizationRule', description='The algorithm used for data masking.', example='Default - Full redaction'),
          securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the data. Valid values:

*   **Low**
*   **Medium**
*   **High**', example='Low'),
          tableName?: string(name='TableName', description='The name of the table that stores the sensitive data.', example='ExampleTableName'),
        }
      ](name='SensitiveDataLog', description='The logs for sensitive data.'),
      targetName?: string(name='TargetName', description='The details of the object on which the operation was performed. The value of this parameter is in one of the following formats:

*   Object name - object ID
*   Object name (object ID)', example='Ticket - 1\\*\\*\\*\\*'),
      userId?: long(name='UserId', description='The user ID of the requester.', example='1**'),
      userName?: string(name='UserName', description='The username of the requester.', example='ExampleUserName'),
    }
  ](name='SensitiveDataAuditLogList', description='The audit logs for sensitive data.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListSensitiveDataAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitiveDataAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitiveDataAuditLog  ListSensitiveDataAuditLogRequest
  * @return ListSensitiveDataAuditLogResponse
 */
async function listSensitiveDataAuditLog(request: ListSensitiveDataAuditLogRequest): ListSensitiveDataAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveDataAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitivityLevelRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId?: long(name='TemplateId', description='The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the ID of the classification template.', example='15**', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the type of the classification template.

Valid values:

*   USER_DEFINE: a custom template.
*   INNER: a built-in template.', example='INNER', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) in the topic "Manage DMS tenants."', example='20***', position='Query'),
}

model ListSensitivityLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The status code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  sensitivityLevelList?: [ 
    {
      isPlain?: boolean(name='IsPlain', description='Indicates whether the fields of the sensitive level are displayed in plaintext.', example='true'),
      name?: string(name='Name', description='The name of the sensitive level.', example='S2'),
      templateId?: string(name='TemplateId', description='The ID of the classification template.', example='1070'),
      templateType?: string(name='TemplateType', description='The type of the classification template. Valid values:

*   **INNER**: a built-in template.
*   **USER_DEFINE**: a custom template.', example='INNER'),
    }
  ](name='SensitivityLevelList', description='The sensitivity levels.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListSensitivityLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSensitivityLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSensitivityLevel  ListSensitivityLevelRequest
  * @return ListSensitivityLevelResponse
 */
async function listSensitivityLevel(request: ListSensitivityLevelRequest): ListSensitivityLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitivityLevel', 'GET', '/', 'json', false, 'json', request);
}

model ListStandardGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListStandardGroupsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroupList?: [ 
    {
      dbType?: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='mysql'),
      description?: string(name='Description', description='The description of the security rule set.', example='test_rule'),
      groupId?: long(name='GroupId', description='The ID of the security rule set.', example='41****'),
      groupMode?: string(name='GroupMode', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', example='COMMON'),
      groupName?: string(name='GroupName', description='The name of the security rule set.', example='test_group'),
      lastMenderId?: long(name='LastMenderId', description='The ID of the user who queries the security sets.', example='51****'),
    }
  ](name='StandardGroupList', description='The security rule sets returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListStandardGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStandardGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStandardGroups  ListStandardGroupsRequest
  * @return ListStandardGroupsResponse
 */
async function listStandardGroups(request: ListStandardGroupsRequest): ListStandardGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStandardGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTableColumnsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='This parameter is required.', example='123', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='100g_customer', position='Query'),
  tableSchemaName?: string(name='TableSchemaName', example='dbo', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model ListTableColumnsResponseBody = {
  columnList?: {
    column?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', example='false'),
      columnId?: string(name='ColumnId', example='12345'),
      columnName?: string(name='ColumnName', example='c1'),
      columnType?: string(name='ColumnType', example='varchar'),
      dataLength?: long(name='DataLength', example='32'),
      dataPrecision?: int32(name='DataPrecision', example='0'),
      dataScale?: int32(name='DataScale', example='0'),
      defaultValue?: string(name='DefaultValue', example='aaa'),
      description?: string(name='Description', example='column desc'),
      functionType?: string(name='FunctionType', example='NULL'),
      nullable?: boolean(name='Nullable', example='true'),
      securityLevel?: string(name='SecurityLevel', example='INNER'),
      sensitive?: boolean(name='Sensitive', example='false'),
    }
  ](name='Column')
  }(name='ColumnList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model ListTableColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableColumnsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTableColumns  ListTableColumnsRequest
  * @return ListTableColumnsResponse
 */
async function listTableColumns(request: ListTableColumnsRequest): ListTableColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTableColumns', 'POST', '/', 'json', false, 'json', request);
}

model ListTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseId: string(name='DatabaseId', description='The ID of the physical database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the physical database.

This parameter is required.', example='1860****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of a table. Valid values:

*   **true**: returns the GUID of a table.
*   **false**: does not return the GUID of a table.', example='true', position='Query'),
  searchName?: string(name='SearchName', description='The name used to search for tables. Fuzzy search is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model ListTablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B16FB618-5E96-4FFD-BB0D-490C890A4030'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tableList?: {
    table?: [ 
    {
      databaseId?: string(name='DatabaseId', description='The ID of the physical database.', example='1860****'),
      description?: string(name='Description', description='The description of the table.', example='test'),
      encoding?: string(name='Encoding', description='The encoding format of the table.', example='utf8'),
      engine?: string(name='Engine', description='The engine of the table.', example='InnoDB'),
      numRows?: long(name='NumRows', description='The number of rows in the table. This is a statistical value and does not indicate the actual number of rows.', example='10085'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The ID list of the table owners.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nickname list of the table owners.'),
      storeCapacity?: long(name='StoreCapacity', description='The storage space that is occupied by the table. This is a statistical value and does not indicate the accurate storage space. Unit: MB.', example='1024'),
      tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_44743****.qntest.consumption_records'),
      tableId?: string(name='TableId', description='The ID of the table.', example='44743****'),
      tableName?: string(name='TableName', description='The table name.', example='consumption_records'),
      tableSchemaName?: string(name='TableSchemaName', description='The database in which the table resides.', example='qntest'),
      tableType?: string(name='TableType', description='The type of the table. Default value: NORMAL.', example='NORMAL'),
    }
  ](name='Table')
  }(name='TableList', description='The details of the tables.'),
  totalCount?: long(name='TotalCount', description='The total number of tables that meet the query conditions.', example='1'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances whose control mode is Security Collaboration.
  * @param request  the request parameters of ListTables  ListTablesRequest
  * @return ListTablesResponse
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTables', 'POST', '/', 'json', false, 'json', request);
}

model ListTablesInCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId: long(name='CategoryId', description='This parameter is required.', example='30000235593', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', maximum=100, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTablesInCategoryResponseBody = {
  entityList?: {
    metaCategoryTableEntity?: [
    MetaCategoryTableEntity
  ](name='MetaCategoryTableEntity')
  }(name='EntityList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListTablesInCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesInCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTablesInCategory  ListTablesInCategoryRequest
  * @return ListTablesInCategoryResponse
 */
async function listTablesInCategory(request: ListTablesInCategoryRequest): ListTablesInCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTablesInCategory', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4116147E-C628-5816-8779-8EEAF8E973F4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the task flow.', example='Creator_NickName'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_NickName'),
      deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
      id?: long(name='Id', description='The ID of the task flow.', example='134137****'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

*   **0**: invalid.
*   **1**: scheduling disabled.
*   **2**: waiting to be scheduled.', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-13'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: The task flow is invalid.
*   **1**: Scheduling is disabled for the task flow.
*   **2**: The task flow is waiting to be scheduled.', example='2'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList', description='The information about the task flows returned.'),
}

model ListTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlow  ListTaskFlowRequest
  * @return ListTaskFlowResponse
 */
async function listTaskFlow(request: ListTaskFlowRequest): ListTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowConstantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='3****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowConstantsResponseBody = {
  dagConstants?: {
    dagConstant?: [ 
    {
      key?: string(name='Key', description='The constant key.', example='example'),
      value?: string(name='Value', description='The constant value.', example='0'),
    }
  ](name='DagConstant')
  }(name='DagConstants', description='A list of constant key-value pairs for the task flow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListTaskFlowConstantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowConstantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlowConstants  ListTaskFlowConstantsRequest
  * @return ListTaskFlowConstantsResponse
 */
async function listTaskFlowConstants(request: ListTaskFlowConstantsRequest): ListTaskFlowConstantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowConstants', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowCooperatorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowCooperatorsResponseBody = {
  cooperatorList?: {
    cooperator?: [ 
    {
      email?: string(name='Email', description='The email address of the user.', example='test@XX.com'),
      loginName?: string(name='LoginName', description='The username.', example='name'),
      nickName?: string(name='NickName', description='The alias of the user.', example='name'),
      userId?: string(name='UserId', description='userId.', example='123'),
    }
  ](name='Cooperator')
  }(name='CooperatorList', description='The users that are involved in the task flow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='54C99C70-2DFF-5A8C-A252-EBAA1EB668EC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListTaskFlowCooperatorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowCooperatorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlowCooperators  ListTaskFlowCooperatorsRequest
  * @return ListTaskFlowCooperatorsResponse
 */
async function listTaskFlowCooperators(request: ListTaskFlowCooperatorsRequest): ListTaskFlowCooperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowCooperators', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowEdgesByConditionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  id?: long(name='Id', description='The ID of the task flow edge.', example='24***', position='Query'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***', position='Query'),
  nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowEdgesByConditionResponseBody = {
  edges?: {
    edge?: [ 
    {
      id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
    }
  ](name='Edge')
  }(name='Edges', description='The list of task flow edges.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='D86249CD-422F-5ACF-85BA-9187C986AE0B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListTaskFlowEdgesByConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * @description This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
  * @param request  the request parameters of ListTaskFlowEdgesByCondition  ListTaskFlowEdgesByConditionRequest
  * @return ListTaskFlowEdgesByConditionResponse
 */
async function listTaskFlowEdgesByCondition(request: ListTaskFlowEdgesByConditionRequest): ListTaskFlowEdgesByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowEdgesByCondition', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.

This parameter is required.', example='7***', position='Query'),
  pageIndex: int32(name='PageIndex', description='The number of the page to return.

This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.

This parameter is required.', example='20', position='Query'),
  startTimeBegin?: string(name='StartTimeBegin', description='The beginning of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='2022-01-07', position='Query'),
  startTimeEnd?: string(name='StartTimeEnd', description='The end of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='2022-04-08', position='Query'),
  status?: int32(name='Status', description='The running status of the task node. Valid values:

- **0**: Waiting for scheduling

- **1**: Running

- **2**: Suspend

- **3**: Failed to run

- **4**: Run successfully

- **5**: Completed', example='3', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  triggerType?: int32(name='TriggerType', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='1', position='Query'),
  useBizDate?: boolean(name='UseBizDate', description='Adjust filter conditions:

- true: StartTimeBegin and StartTimeEnd are the time range for filtering services.

- false: StartTimeBegin and StartTimeEnd are the time range for the task to run.', example='true', position='Query'),
}

model ListTaskFlowInstanceResponseBody = {
  DAGInstanceList?: {
    DAGInstance?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-10 14:37:26'),
      dagId?: string(name='DagId', description='The ID of the task flow.', example='7***'),
      dagName?: string(name='DagName', description='The name of the task flow.', example='Spark_SQL_test'),
      dagVersion?: string(name='DagVersion', description='The version of the task flow.', example='[]'),
      endTime?: string(name='EndTime', description='The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-11 14:38:57'),
      historyDagId?: long(name='HistoryDagId', description='The ID of the previously published version of the task flow.', example='2****'),
      id?: long(name='Id', description='The ID of the execution record.', example='9234'),
      message?: string(name='Message', description='The description of the task.', example='test'),
      ownerName?: string(name='OwnerName', description='The name of the task flow owner.', example='test_name'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: The task flow is waiting to be scheduled.
*   **1**: The task flow is being executed.
*   **2**: The task flow is paused.
*   **3**: The task flow failed.
*   **4**: The task flow is executed.
*   **5**: The task flow is complete.', example='4'),
      triggerType?: int32(name='TriggerType', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='1'),
      startTime?: string(name='startTime', description='The time when the execution of the task flow was start. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-11 14:35:57'),
    }
  ](name='DAGInstance')
  }(name='DAGInstanceList', description='The information about the execution records returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of execution records returned.', example='1'),
}

model ListTaskFlowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlowInstance  ListTaskFlowInstanceRequest
  * @return ListTaskFlowInstanceResponse
 */
async function listTaskFlowInstance(request: ListTaskFlowInstanceRequest): ListTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC12A3BE-149F-5365-AF33-12CC8C963923'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  timeVariables?: {
    timeVariable?: [ 
    {
      name?: string(name='Name', description='The name of the time variable.', example='time_test'),
      pattern?: string(name='Pattern', description='The format of the time variable.', example='2018-09-26|+7h'),
    }
  ](name='TimeVariable')
  }(name='TimeVariables', description='The time variables for the task flow.'),
}

model ListTaskFlowTimeVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowTimeVariablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlowTimeVariables  ListTaskFlowTimeVariablesRequest
  * @return ListTaskFlowTimeVariablesResponse
 */
async function listTaskFlowTimeVariables(request: ListTaskFlowTimeVariablesRequest): ListTaskFlowTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowsByPageRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagIdList?: [ long ](name='DagIdList', description='Filter condition, task flow ID list.', shrink='json', position='Query'),
  pageIndex?: int32(name='PageIndex', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  scenarioId?: long(name='ScenarioId', description='Filter condition, application scenario ID.', example='12***', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for task flow names.', example='Test node', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowsByPageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6CB28697-BFE2-5739-9228-3971990E982C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', description='The ID of the user who created the task flow.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The username of the user who created the task flow.', example='Creator_NickName'),
      cronBeginDate?: string(name='CronBeginDate', description='The start time of scheduled scheduling. The task flow is not scheduled before this point in time.', example='1970-01-01'),
      cronEndDate?: string(name='CronEndDate', description='The end time of scheduled scheduling. The task flow is not scheduled after this point in time.', example='2023-01-01'),
      cronStr?: string(name='CronStr', description='Scheduled Cron.', example='0 0 1 * * ? *'),
      cronSwitch?: boolean(name='CronSwitch', description='Whether to enable scheduled scheduling.', example='false'),
      cronType?: int32(name='CronType', description='Scheduling cycle type. Valid values:
- **2**: Hourly scheduling
- **3**: Daily scheduling
- **4**: Weekly scheduling
- **5**: Monthly scheduling', example='2'),
      dagName?: string(name='DagName', description='The name of the task flow.', example='poc_task_test'),
      dagOwnerId?: string(name='DagOwnerId', description='The user ID of the task flow owner.', example='12***89'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The username of the owner of the task flow.', example='Owner_NickName'),
      deployId?: long(name='DeployId', description='The ID of the last deployment record of the task flow.', example='65***'),
      description?: string(name='Description', description='The description of the task flow.', example='test'),
      id?: long(name='Id', description='The ID of the task flow.', example='7***'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the last execution of the task flow. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', description='The time when the last execution record was created.', example='2022-04-13'),
      scenarioId?: string(name='ScenarioId', description='The ID of the application scenario.', example='1245'),
      scheduleParam?: string(name='ScheduleParam', description='Event scheduling configuration, JSON string format.', example='{\\"triggerType\\":\\"1\\",\\"specificTime\\":\\"2022-11-15 11:59\\"}'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='1'),
      timeZoneId?: string(name='TimeZoneId', description='Time zone setting. Default value: East 8(Asia/Shanghai).', example='Asia/Shanghai'),
      triggerType?: int32(name='TriggerType', description='The trigger type. Valid values:
- **0**: Periodic scheduling
- **1**: Run manually', example='0'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList', description='The details of the returned task flows.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='24'),
}

model ListTaskFlowsByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskFlowsByPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskFlowsByPage  ListTaskFlowsByPageRequest
  * @return ListTaskFlowsByPageResponse
 */
async function listTaskFlowsByPage(request: ListTaskFlowsByPageRequest): ListTaskFlowsByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowsByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksInTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='32***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTasksInTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='8B36B063-6B7D-5595-9FCF-3844B7B7ACD4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tasks?: {
    task?: [ 
    {
      graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='{\\"x\\":435,\\"y\\":192,\\"layoutType\\":\\"Horizontal\\"}'),
      nodeConfig?: string(name='NodeConfig', description='The advanced configuration for the node.', example='{     "rerun":{    "rerunEnable":true,      "rerunCount":1,   "rerunInterval":10 //  }}'),
      nodeContent?: string(name='NodeContent', description='The configuration for the node.', example='{     "dbId":123***,  "sql":"",    "dbType":"polardb" }'),
      nodeId?: string(name='NodeId', description='The ID of the node.', example='92***'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Cross-Database Spark SQL-1'),
      nodeOutput?: string(name='NodeOutput', description='The output variables for the task.', example='{  "outputs":[{ { "row":0, "column":-1,                  "combiner":"," }            "extractMethod":"{\\"row\\":0,\\"column\\":-1,\\"combiner\\":\\",\\"}",         "variableName":"var",    "description":"For demo"} ] }'),
      nodeType?: string(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).', example='SPARK_SQL'),
      timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.', example='{\\"variables\\":[{\\"name\\":\\"test1\\",\\"pattern\\":\\"yyyy-MM-dd'),
    }
  ](name='Task')
  }(name='Tasks', description='The tasks in the task flow.'),
}

model ListTasksInTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksInTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTasksInTaskFlow  ListTasksInTaskFlowRequest
  * @return ListTasksInTaskFlowResponse
 */
async function listTasksInTaskFlow(request: ListTasksInTaskFlowRequest): ListTasksInTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasksInTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListUserPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='db_name', position='Query'),
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='polardb', position='Query'),
  envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: staging environment
*   test: test environment
*   sit: SIT environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: STAG environment', example='dev', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5', position='Query'),
  permType: string(name='PermType', description='The permissions on a specific type of resources that you want to query. Valid values:

*   DATABASE: permissions on databases
*   TABLE: permissions on tables
*   COLUMN: permissions on fields
*   INSTANCE: permissions on instances

This parameter is required.', example='DATABASE', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword used in the query. For example, if you want to query permissions on an instance, you can specify the endpoint of the instance, such as rm-bp144d5ky4l4r****.', example='rm-bp144d5ky4l4r****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', position='Query'),
  userId: string(name='UserId', description='The ID of the user. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.

>  The user ID is different from the ID of your Alibaba Cloud account.

This parameter is required.', example='51****', position='Query'),
}

model ListUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that meet the query conditions.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', description='The alias of the instance.', example='instance_alias'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='column_name'),
      dbId?: string(name='DbId', description='The ID of the database.', example='1860****'),
      dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).', example='polardb'),
      dsType?: string(name='DsType', description='The permissions on a specific type of objects that are granted to the user. Valid values: 

- DATABASE: permissions on physical databases
- LOGIC_DATABASE: permissions on logical databases
- TABLE: permissions on physical tables
- LOGIC_TABLE: permissions on logical tables', example='DATABASE'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

- product: production environment
- dev: development environment
- pre: staging environment
- test: test environment
- sit: SIT environment
- uat: UAT environment
- pet: stress testing environment
- stag: STAG environment', example='dev'),
      host?: string(name='Host', description='The endpoint that is used to connect the database.', example='rm-bp144d5ky4l4r****'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='174****'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permissions were granted.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='This parameter is reserved.', example='xxx'),
          originFrom?: string(name='OriginFrom', description='The user who grants the permissions.', example='xxx authorization'),
          permType?: string(name='PermType', description='The type of the permissions. Valid values:

*   QUERY: the query permissions
*   EXPORT: the export permissions
*   CORRECT: the change permissions', example='QUERY'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='758****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of permissions.'),
      port?: long(name='Port', description='The port that is used to connect to the instance.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test_db@xxx:3306'),
      tableId?: string(name='TableId', description='The ID of the table.', example='13434'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
      userId?: string(name='UserId', description='The ID of the user.', example='51****'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The details of the permissions that the user has.'),
}

model ListUserPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserPermissions  ListUserPermissionsRequest
  * @return ListUserPermissionsResponse
 */
async function listUserPermissions(request: ListUserPermissionsRequest): ListUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListUserTenantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListUserTenantsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C478D9DA-3615-50F6-A2BC-7855AD65****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  tenantList?: [ 
    {
      status?: string(name='Status', description='The status of the tenant. Valid values:

*   **ACTIVE**: The tenant is used to access DMS.
*   **IN_ACTIVE**: The tenant is not used.', example='ACTIVE'),
      tenantName?: string(name='TenantName', description='The name of the tenant.', example='test_name'),
      tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
    }
  ](name='TenantList', description='The details of the tenants that were returned.'),
}

model ListUserTenantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserTenantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserTenants  ListUserTenantsRequest
  * @return ListUserTenantsResponse
 */
async function listUserTenants(request: ListUserTenantsRequest): ListUserTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserTenants', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

**

Valid values: 10, 20, 50, and 100.**** Default value: 10.', example='10', position='Query'),
  role?: string(name='Role', description='The role that is assigned to the user. Valid values:

*   **USER**: a regular user.
*   **DBA** : a database administrator (DBA).
*   **ADMIN**: a Data Management (DMS) administrator.
*   **SECURITY_ADMIN**: a security administrator.
*   **STRUCT_READ_ONLY**: a schema read-only user.

>  To check your role, move the pointer over the profile picture in the upper-right corner of the DMS console.', example='DBA', position='Query'),
  searchKey?: string(name='SearchKey', description='The search keyword. Fuzzy match is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.', example='3***', position='Query'),
  userState?: string(name='UserState', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL', position='Query'),
}

model ListUsersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='InvalidTid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Specified parameter Tid is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69161997-6030-53BA-A333-DBEC83B732FF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='3'),
  userList?: {
    user?: [ 
    {
      curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that were performed on the current day.', example='0'),
      curResultCount?: long(name='CurResultCount', description='The number of rows that were queried on the current day.', example='0'),
      dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 

*   The system returns this parameter if you have set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=9b7a4a562cbe7fcdea9962afac7b9d7b4504d564948083419750f9cafa78e4ef'),
      email?: string(name='Email', description='The email address that is used to receive notifications.

> 

*   The system returns this parameter if you have set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set an email address.', example='username@example.com'),
      lastLoginTime?: string(name='LastLoginTime', description='The time when the user last logged on to the console.', example='2021-11-08 13:43:43'),
      maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
      maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='50000'),
      mobile?: string(name='Mobile', description='The mobile phone number of the user.

> 

*   The system returns this parameter if you have set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set a mobile phone number.', example='1389999****'),
      nickName?: string(name='NickName', description='The nickname of the user.', example='test_NickName'),
      notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message
*   **EMAIL**: email.
*   **DINGDING**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='DINGROBOT'),
      parentUid?: string(name='ParentUid', description='The ID of the Alibaba Cloud account of the user.', example='140692647406****'),
      roleIdList?: {
        roleIds?: [ int32 ](name='RoleIds')
      }(name='RoleIdList', description='The IDs of the roles.'),
      roleNameList?: {
        roleNames?: [ string ](name='RoleNames')
      }(name='RoleNameList', description='The names of roles.'),
      signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC_SHA1.', example='HMAC_SHA1'),
      state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
      uid?: string(name='Uid', description='The ID of the Alibaba Cloud account.', example='167382665015****'),
      userId?: string(name='UserId', description='The ID of the user.', example='8****'),
      webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 

*   If you have set a webhook URL, DMS sends notifications to the specified URL.

*   The system does not return this parameter if you have not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
    }
  ](name='User')
  }(name='UserList', description='The details of users.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkFlowNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchName?: string(name='SearchName', description='The name that is used to search for approval nodes.', example='admin', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model ListWorkFlowNodesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  workflowNodes?: {
    workflowNode?: [ 
    {
      auditUsers?: {
        auditUser?: [ 
        {
          nickName?: string(name='NickName', description='The nickname of the approver.', example='test'),
          realName?: string(name='RealName', description='The real name of the approver.', example='test'),
          userId?: long(name='UserId', description='The ID of the approver. The ID is different from the ID of the Alibaba Cloud account of the approver.', example='123'),
        }
      ](name='AuditUser')
      }(name='AuditUsers', description='The details about approvers.'),
      comment?: string(name='Comment', description='The description of the approval template.', example='test'),
      createUserId?: long(name='CreateUserId', description='The ID of the creator. This ID is different from the ID of the Alibaba Cloud account of the creator.', example='123'),
      createUserNickName?: string(name='CreateUserNickName', description='The name of the user who creates the approval node.', example='test'),
      nodeId?: long(name='NodeId', description='The ID of the approval node.', example='123'),
      nodeName?: string(name='NodeName', description='The name of the approval node.', example='test'),
      nodeType?: string(name='NodeType', description='The type of the approval node. Valid values:

*   SYS: The approval node is predefined by the system.
*   USER_LIST: The approval node is created by a user.', example='SYS'),
    }
  ](name='WorkflowNode')
  }(name='WorkflowNodes', description='The details of approval nodes.'),
}

model ListWorkFlowNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkFlowNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkFlowNodes  ListWorkFlowNodesRequest
  * @return ListWorkFlowNodesResponse
 */
async function listWorkFlowNodes(request: ListWorkFlowNodesRequest): ListWorkFlowNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkFlowNodes', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkFlowTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchName?: string(name='SearchName', description='The name that is used to query approval templates.', example='Admin', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model ListWorkFlowTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='41067071-0243-4AAB-B3CF-4DE6D54F53B4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  workFlowTemplates?: {
    workFlowTemplate?: [ 
    {
      comment?: string(name='Comment', description='The description of the approval template.', example='test'),
      createUserId?: long(name='CreateUserId', description='The ID of the creator.', example='1234'),
      enabled?: string(name='Enabled', description='Indicates whether the approval template is enabled. Valid values:

*   Y: The approval template is enabled.
*   N: The approval template is disabled.', example='Y'),
      isSystem?: int32(name='IsSystem', description='Indicates whether the approval template is predefined by the system. Valid values:

*   1: The approval template is predefined by the system.
*   0: The approval template is not predefined by the system.', example='1'),
      templateId?: long(name='TemplateId', description='The ID of the approval template.', example='12345'),
      templateName?: string(name='TemplateName', description='The name of the approval template.', example='Admin'),
      workflowNodes?: {
        workflowNode?: [ 
        {
          comment?: string(name='Comment', description='The description of the approval node.', example='test'),
          createUserId?: long(name='CreateUserId', description='The ID of the creator.', example='1234'),
          nodeId?: long(name='NodeId', description='The ID of the approval node.', example='123'),
          nodeName?: string(name='NodeName', description='The name of the approval node.', example='test'),
          nodeType?: string(name='NodeType', description='The type of the approval node. Valid values:

*   SYS: The approval node is predefined by the system.
*   USER_LIST: The approval node is created by a user.', example='SYS'),
          position?: int32(name='Position', description='The position of the approval node.', example='1'),
          templateId?: long(name='TemplateId', description='The ID of the template.', example='12345'),
        }
      ](name='WorkflowNode')
      }(name='WorkflowNodes', description='The details of approval nodes.'),
    }
  ](name='WorkFlowTemplate')
  }(name='WorkFlowTemplates', description='The approval templates.'),
}

model ListWorkFlowTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkFlowTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkFlowTemplates  ListWorkFlowTemplatesRequest
  * @return ListWorkFlowTemplatesResponse
 */
async function listWorkFlowTemplates(request: ListWorkFlowTemplatesRequest): ListWorkFlowTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkFlowTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  regionId?: string(name='RegionId', position='Host'),
  alreadyJoined?: boolean(name='AlreadyJoined', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  searchKey?: string(name='SearchKey', example='poc_test', position='Query'),
  serviceAccountId?: long(name='ServiceAccountId', example='12345', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp10wnlcmor****', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='12****', position='Query'),
}

model ListWorkspacesResponseBody = {
  data?: {
    baseWorkspaces?: [ 
    {
      alreadyJoined?: boolean(name='AlreadyJoined', example='true'),
      creatorId?: long(name='CreatorId', example='123'),
      creatorNickName?: string(name='CreatorNickName', example='work*****'),
      creatorUid?: string(name='CreatorUid', example='1344****'),
      description?: string(name='Description', example='Test'),
      gmtCreate?: string(name='GmtCreate', example='2025-01-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2025-01-01 00:00:00'),
      name?: string(name='Name', example='workspace-xxxx'),
      ownerId?: long(name='OwnerId', example='123****'),
      ownerNickName?: string(name='OwnerNickName', example='hel****'),
      ownerUid?: string(name='OwnerUid', example='15608564799****'),
      region?: string(name='Region', example='cn-hangzhou'),
      serviceAccountId?: long(name='ServiceAccountId', example='12345'),
      serviceAccountNickName?: string(name='ServiceAccountNickName', example='testname'),
      serviceAccountUid?: string(name='ServiceAccountUid', example='1422****'),
      tenantId?: long(name='TenantId', example='23456'),
      vpcId?: string(name='VpcId', example='vpc-25fl3qjqb****'),
      workspaceId?: long(name='WorkspaceId', example='8652340494****'),
      workspaceName?: string(name='WorkspaceName', example='test-workspace'),
    }
  ](name='BaseWorkspaces')
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='UserNotExist'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='token-xxx'),
  requestId?: string(name='RequestId', example='EE214ECD-4330-503A-82F0-FFB03975****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaces  ListWorkspacesRequest
  * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkspaces', 'POST', '/', 'json', false, 'json', request);
}

model MakeTaskFlowInstanceSuccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.

This parameter is required.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model MakeTaskFlowInstanceSuccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model MakeTaskFlowInstanceSuccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MakeTaskFlowInstanceSuccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MakeTaskFlowInstanceSuccess  MakeTaskFlowInstanceSuccessRequest
  * @return MakeTaskFlowInstanceSuccessResponse
 */
async function makeTaskFlowInstanceSuccess(request: MakeTaskFlowInstanceSuccessRequest): MakeTaskFlowInstanceSuccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MakeTaskFlowInstanceSuccess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDataCorrectExecSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  execSQL: string(name='ExecSQL', description='The new SQL script.

This parameter is required.', example='update tb set id = 1 where id = 1;', position='Query'),
  orderId: long(name='OrderId', description='The ID of the data change ticket.

This parameter is required.', example='4328****', minimum=1, maximum=9223372036854775807, position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='4****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ModifyDataCorrectExecSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidOrderId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter OrderId is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyDataCorrectExecSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDataCorrectExecSQLResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDataCorrectExecSQL  ModifyDataCorrectExecSQLRequest
  * @return ModifyDataCorrectExecSQLResponse
 */
async function modifyDataCorrectExecSQL(request: ModifyDataCorrectExecSQLRequest): ModifyDataCorrectExecSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataCorrectExecSQL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesensitizationStrategyRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the field name.

>  You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the field name.

This parameter is required.', example='test_column', position='Query'),
  dbId: int32(name='DbId', description='The ID of the database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the ID.

This parameter is required.', example='123', position='Query'),
  isDefault?: boolean(name='IsDefault', description='The desensitization algorithm of the field setting. The default value is false. The values are as follows:

- **true**: default desensitization algorithm.

- **false** :semi-desensitization algorithm.', example='false', position='Query'),
  isLogic: boolean(name='IsLogic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a physical database.
*   **false**: The database is a logical database.

This parameter is required.', example='false', position='Query'),
  isReset?: boolean(name='IsReset', description='Specifies whether to reset the masking rule. Valid value:

*   **true**: Reset the masking rule.
*   **false**: Do not reset the masking rule. This is the default value.', example='false', position='Query'),
  ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='53', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the database name.

> 

*   If the database is a physical database, you can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the database name.

*   If the database is a logical database, you can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of the database.

This parameter is required.', example='test_schema', position='Query'),
  tableName: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the table name.

>  You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the table name.

This parameter is required.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) in the topic "Manage DMS tenants."', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ModifyDesensitizationStrategyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The status code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  result?: boolean(name='Result', description='The returned result.', example='True'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
}

model ModifyDesensitizationStrategyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesensitizationStrategyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesensitizationStrategy  ModifyDesensitizationStrategyRequest
  * @return ModifyDesensitizationStrategyResponse
 */
async function modifyDesensitizationStrategy(request: ModifyDesensitizationStrategyRequest): ModifyDesensitizationStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesensitizationStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', example='dblink_test', position='Query'),
  databasePassword?: string(name='DatabasePassword', example='test***', position='Query'),
  databaseUser?: string(name='DatabaseUser', example='testsdb', position='Query'),
  dbaId?: long(name='DbaId', example='27****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', example='2', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', example='cn-hangzhou', position='Query'),
  enableSellCommon?: string(name='EnableSellCommon', example='Y', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', example='Y', position='Query'),
  enableSellStable?: string(name='EnableSellStable', example='NULL', position='Query'),
  enableSellTrust?: string(name='EnableSellTrust', example='Y', position='Query'),
  envType?: string(name='EnvType', example='dev', position='Query'),
  exportTimeout?: int32(name='ExportTimeout', example='86400', position='Query'),
  host?: string(name='Host', example='192.XXX.0.56', position='Query'),
  instanceAlias?: string(name='InstanceAlias', example='instance_test', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='183****', position='Query'),
  instanceSource?: string(name='InstanceSource', example='RDS', position='Query'),
  instanceType?: string(name='InstanceType', example='MySQL', position='Query'),
  networkType?: string(name='NetworkType', example='VPC', position='Query'),
  port?: int32(name='Port', example='3306', position='Query'),
  queryTimeout?: int32(name='QueryTimeout', example='7200', position='Query'),
  safeRule?: string(name='SafeRule', position='Query'),
  sid?: string(name='Sid', example='testSid', position='Query'),
  skipTest?: boolean(name='SkipTest', example='false', position='Query'),
  templateId?: long(name='TemplateId', example='31***', position='Query'),
  templateType?: string(name='TemplateType', example='INNER', position='Query'),
  tid?: long(name='Tid', example='23****', position='Query'),
  useDsql?: int32(name='UseDsql', example='1', position='Query'),
  useSsl?: int32(name='UseSsl', minimum=-1, maximum=1, position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp10wnlcmor****', position='Query'),
}

model ModifyInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model ModifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstance  ModifyInstanceRequest
  * @return ModifyInstanceResponse
 */
async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model MoveTaskFlowToScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  scenarioId?: long(name='ScenarioId', description='The ID of the business scenario to which you want to migrate your task flow. If this parameter is set to the default value or a value that is less than or equal to 0, the task flow is migrated to the default business scenario.', example='1****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model MoveTaskFlowToScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='D85FD18C-4322-5D49-8C14-5A10E668F86C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model MoveTaskFlowToScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveTaskFlowToScenarioResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveTaskFlowToScenario  MoveTaskFlowToScenarioRequest
  * @return MoveTaskFlowToScenarioResponse
 */
async function moveTaskFlowToScenario(request: MoveTaskFlowToScenarioRequest): MoveTaskFlowToScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveTaskFlowToScenario', 'POST', '/', 'json', false, 'json', request);
}

model OfflineTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.

This parameter is required.', example='7***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model OfflineTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model OfflineTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineTaskFlow  OfflineTaskFlowRequest
  * @return OfflineTaskFlowResponse
 */
async function offlineTaskFlow(request: OfflineTaskFlowRequest): OfflineTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model PauseDataCorrectSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](https://help.aliyun.com/document_detail/208481.html) or [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to obtain the value of this parameter.

>  If Type is set to SINGLE, you must pass in the value of JobId to confirm the ID of the SQL task that you want to pause.', example='43253', position='Query'),
  orderId: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.

This parameter is required.', example='43253', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='4325', minimum=1, maximum=9223372036854775807, position='Query'),
  type: string(name='Type', description='The type of the pause operation. Valid values:

*   ALL: pauses all SQL tasks.
*   SINGLE: pauses a single SQL task.

This parameter is required.', example='SINGLE', position='Query'),
}

model PauseDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='335C5BC8-490C-56EF-BDDE-94A4B53FEB72'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model PauseDataCorrectSQLJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseDataCorrectSQLJobResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances that are managed in Security Collaboration mode.
  * @param request  the request parameters of PauseDataCorrectSQLJob  PauseDataCorrectSQLJobRequest
  * @return PauseDataCorrectSQLJobResponse
 */
async function pauseDataCorrectSQLJob(request: PauseDataCorrectSQLJobRequest): PauseDataCorrectSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseDataCorrectSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model PauseDataExportJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='This parameter is required.', example='1276****', position='Query'),
  orderId: long(name='OrderId', description='This parameter is required.', example='546****', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model PauseDataExportJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model PauseDataExportJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseDataExportJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PauseDataExportJob  PauseDataExportJobRequest
  * @return PauseDataExportJobResponse
 */
async function pauseDataExportJob(request: PauseDataExportJobRequest): PauseDataExportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseDataExportJob', 'POST', '/', 'json', false, 'json', request);
}

model PreviewWorkflowRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='This parameter is required.', example='1069****', position='Query'),
  tid?: long(name='Tid', example='23****', position='Query'),
}

model PreviewWorkflowResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  workflowDetail?: {
    comment?: string(name='Comment'),
    wfCateName?: string(name='WfCateName'),
    workflowNodeList?: {
      workflowNode?: [ 
      {
        auditUserList?: {
          auditUser?: [ 
          {
            nickName?: string(name='NickName', example='Owner'),
            realName?: string(name='RealName', example='db_test'),
            userId?: long(name='UserId', example='16***'),
          }
        ](name='AuditUser')
        }(name='AuditUserList'),
        comment?: string(name='Comment'),
        nodeName?: string(name='NodeName', example='Owner'),
        nodeType?: string(name='NodeType', example='SYS'),
      }
    ](name='WorkflowNode')
    }(name='WorkflowNodeList'),
  }(name='WorkflowDetail'),
}

model PreviewWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreviewWorkflowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PreviewWorkflow  PreviewWorkflowRequest
  * @return PreviewWorkflowResponse
 */
async function previewWorkflow(request: PreviewWorkflowRequest): PreviewWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreviewWorkflow', 'POST', '/', 'json', false, 'json', request);
}

model PublishAndDeployTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  versionComments?: string(name='VersionComments', description='The description of the version.', example='vc_test', position='Query'),
}

model PublishAndDeployTaskFlowResponseBody = {
  deployId?: long(name='DeployId', description='The ID of the deployment record.', example='12**'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='64E26249-B61F-51C6-B6DF-47EFF50128CC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model PublishAndDeployTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishAndDeployTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishAndDeployTaskFlow  PublishAndDeployTaskFlowRequest
  * @return PublishAndDeployTaskFlowResponse
 */
async function publishAndDeployTaskFlow(request: PublishAndDeployTaskFlowRequest): PublishAndDeployTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishAndDeployTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataTrackResultDownloadStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  downloadKeyId: string(name='DownloadKeyId', description='The ID of the download key, which is used to identify the parsing progress of data tracking logs. You can call the DownloadDataTrackResult operation to query the ID of the key.

This parameter is required.', example='e23dd7ec-a19f-4a69-8eb3-8ffd26e6****', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.

This parameter is required.', example='11****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.', example='1***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model QueryDataTrackResultDownloadStatusResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  statusResult?: {
    downloadStatus?: string(name='DownloadStatus', description='The status of the download task. Valid values:

*   **INIT**: The download task is being initialized.
*   **LISTING**: The download task is in a transient intermediate state during the initialization.
*   **DOWNLOADING**: The download task is being processed.
*   **DOWNLOAD_SUCCESS**: The download task was successfully processed.
*   **DOWNLOAD_FAIL**: The download task failed.', example='DOWNLOAD_SUCCESS'),
    downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download data tracking logs. This parameter is returned only when the value of DownloadStatus is DOWNLOAD_SUCCESS.', example='https://idbsaasstore.oss-cn-zhangjiakou.aliyuncs.com/****_REDO_31201_207.zip?Expires=1682239593&OSSAccessKeyId=****&Signature=****'),
    statusDesc?: string(name='StatusDesc', description='The description of the state.', example='SUCCESS'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='StatusResult', description='The information about the download progress.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model QueryDataTrackResultDownloadStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataTrackResultDownloadStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDataTrackResultDownloadStatus  QueryDataTrackResultDownloadStatusRequest
  * @return QueryDataTrackResultDownloadStatusResponse
 */
async function queryDataTrackResultDownloadStatus(request: QueryDataTrackResultDownloadStatusRequest): QueryDataTrackResultDownloadStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDataTrackResultDownloadStatus', 'POST', '/', 'json', false, 'json', request);
}

model ReDeployLhDagVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.

This parameter is required.', example='7***', position='Query'),
  dagVersion?: long(name='DagVersion', description='The ID of the task flow version. You can call the [ListDAGVersions](https://help.aliyun.com/document_detail/424682.html) operation to obtain the ID of the task flow version.', example='2****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ReDeployLhDagVersionResponseBody = {
  deployId?: long(name='DeployId', description='The ID of the deployment record.', example='15990'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='035C92E0-2EAD-50E5-A6DD-550F5F73D7CE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ReDeployLhDagVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReDeployLhDagVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReDeployLhDagVersion  ReDeployLhDagVersionRequest
  * @return ReDeployLhDagVersionResponse
 */
async function reDeployLhDagVersion(request: ReDeployLhDagVersionRequest): ReDeployLhDagVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReDeployLhDagVersion', 'POST', '/', 'json', false, 'json', request);
}

model ReRunTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.

This parameter is required.', example='47****', position='Query'),
  dagVersion?: string(name='DagVersion', description='The version number of the task flow. You can call the ListTaskFlowVersions operation to query the version number of the task flow.', example='2****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ReRunTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ReRunTaskFlowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReRunTaskFlowInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReRunTaskFlowInstance  ReRunTaskFlowInstanceRequest
  * @return ReRunTaskFlowInstanceResponse
 */
async function reRunTaskFlowInstance(request: ReRunTaskFlowInstanceRequest): ReRunTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReRunTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model RedeployDifyInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataRegion?: string(name='DataRegion', position='Query'),
  dryRun?: string(name='DryRun', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model RedeployDifyInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    status?: string(name='Status'),
    workspaceId?: string(name='WorkspaceId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RedeployDifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RedeployDifyInstanceResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
  * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
  * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
  * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
  * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
  * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
  * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
  * @param request  the request parameters of RedeployDifyInstance  RedeployDifyInstanceRequest
  * @return RedeployDifyInstanceResponse
 */
async function redeployDifyInstance(request: RedeployDifyInstanceRequest): RedeployDifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RedeployDifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model RefundPayAsYouGoOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID in the sales order.

This parameter is required.', example='dms_pre_public_intl-sg-vf****', position='Query'),
  orderId: string(name='OrderId', description='The order ID of the order for the pay-as-you-go resource. You can call the ListEffectiveOrders operation to query the order ID.

This parameter is required.', example='2190037****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model RefundPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RefundPayAsYouGoOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundPayAsYouGoOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefundPayAsYouGoOrder  RefundPayAsYouGoOrderRequest
  * @return RefundPayAsYouGoOrderResponse
 */
async function refundPayAsYouGoOrder(request: RefundPayAsYouGoOrderRequest): RefundPayAsYouGoOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundPayAsYouGoOrder', 'POST', '/', 'json', false, 'json', request);
}

model RegisterInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', description='The name of the database link for cross-database queries.

> 

*   This parameter is required if UseDsql is set to 1.

*   The name can contain only lowercase letters and underscores (_).

*   The name must be unique within a tenant.', example='dblink_test', position='Query'),
  databasePassword: string(name='DatabasePassword', description='The password that is used to log on to the database.

This parameter is required.', example='******', position='Query'),
  databaseUser: string(name='DatabaseUser', description='The account that is used to log on to the database.

This parameter is required.', example='dmstest', position='Query'),
  dbaUid: long(name='DbaUid', description='The ID of the user who assumes the DBA role of the database instance. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the user ID.

This parameter is required.', example='22275482072787****', position='Query'),
  dbaUidByString?: string(name='DbaUidByString', description='The ID of the user who assumes the DBA role of the database instance. If the user ID is a non-numeric value such as a role or an account, you can use this parameter to replace DbaUid.', example='22275482072787****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', description='Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:

*   **0**: disables the lock-free schema change feature.
*   **1**: uses the online DDL of MySQL first.
*   **2**: uses the lock-free schema change feature of DMS first.

> Supported database types: ApsaraDB RDS for MySQL, PolarDB for MySQL, ApsaraDB MyBase for MySQL, and third-party MySQL databases.', example='2', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance on which the database instance is deployed.

> This parameter is required if the InstanceSource parameter is set to ECS_OWN.', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.

> This parameter is required if the InstanceSource parameter is set to RDS, ECS_OWN, or VPC_IDC.', example='cn-hangzhou', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', description='*   **Y:** enables the sensitive data protection feature
*   **NULL or other:** disables the sensitive data protection feature', example='Y', position='Query'),
  envType: string(name='EnvType', description='The type of the environment in which the database instance is deployed. Valid values:

*   product: production environment
*   dev: development environment
*   pre: pre-release environment
*   test: test environment
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: staging environment

This parameter is required.', example='product', position='Query'),
  exportTimeout: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance. Unit: seconds.

This parameter is required.', example='600', position='Query'),
  host: string(name='Host', description='The host address that is used to connect to the database instance.

This parameter is required.', example='172.XX.XXX.254', position='Query'),
  instanceAlias: string(name='InstanceAlias', description='The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.

This parameter is required.', example='Test instance', position='Query'),
  instanceSource: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
*   **RDS:** an ApsaraDB RDS instance
*   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)

This parameter is required.', example='RDS', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).

This parameter is required.', example='MySQL', position='Query'),
  networkType: string(name='NetworkType', description='The network type of the database instance. Valid values:

*   **CLASSIC:** classic network
*   **VPC:** VPC

This parameter is required.', example='VPC', position='Query'),
  port: int32(name='Port', description='The port that is used to connect to the database instance.

This parameter is required.', example='3306', position='Query'),
  queryTimeout: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance. Unit: seconds.

This parameter is required.', example='60', position='Query'),
  resourceGroup?: string(name='ResourceGroup', position='Query'),
  safeRule: string(name='SafeRule', description='The name of the security rule set (GroupName) for the database instance. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/417891.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the name of the security rule set.

This parameter is required.', example='Test', position='Query'),
  sid?: string(name='Sid', description='The system ID (SID) of the database.

> This parameter is required if the InstanceType parameter is set to ORACLE.', example='XXX', position='Query'),
  skipTest?: boolean(name='SkipTest', description='Specifies whether to skip the connectivity test. Valid values:

*   **true:** skips the connectivity test
*   **false:** does not skip the connectivity test', example='true', position='Query'),
  templateId?: long(name='TemplateId', description='The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template ID.', example='31***', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template type.', example='INNER', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', position='Query'),
  useDsql?: int32(name='UseDsql', description='Specifies whether to enable the cross-database query feature for the database instance. Valid values:

*   **0**: disables the cross-database query feature.
*   **1**: enables the cross-database query feature.

> Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for PostgreSQL (compatible with Oracle), and ApsaraDB for Redis.', example='1', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the database instance belongs.

> This parameter is required if the InstanceSource parameter is set to VPC_IDC.', example='vpc-xxxxxxxxxxxxxxxxxxxxx', position='Query'),
}

model RegisterInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true:** The request was successful.
*   **false:** The request failed.', example='true'),
}

model RegisterInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterInstanceResponseBody(name='body'),
}

/**
  * @description Prerequisites: You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query your user role from the RoleIdList parameter that is returned.
  * @param request  the request parameters of RegisterInstance  RegisterInstanceRequest
  * @return RegisterInstanceResponse
 */
async function registerInstance(request: RegisterInstanceRequest): RegisterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterInstance', 'POST', '/', 'json', false, 'json', request);
}

model RegisterUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', description='The mobile number of the user.', example='130000000xx', position='Query'),
  roleNames?: string(name='RoleNames', description='The role that you want to assign to the user. Valid values:

*   **USER**: a regular user role
*   **DBA**: a database administrator (DBA) role
*   **ADMIN**: a DMS administrator role
*   **SECURITY_ADMIN**: a security administrator role

>  If you do not specify this parameter, the regular user role is assigned to the user by default. You can assign one or more roles to the user. Separate multiple roles with commas (,).', example='USER,DBA', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To query ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='-1', position='Query'),
  uid: string(name='Uid', description='The UID of the Alibaba Cloud account of the user that you want to register.

This parameter is required.', example='12345678', position='Query'),
  userNick?: string(name='UserNick', description='The nickname of the user.', example='dmstest', position='Query'),
}

model RegisterUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified user already exists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model RegisterUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterUserResponseBody(name='body'),
}

/**
  * @description If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
  * @param request  the request parameters of RegisterUser  RegisterUserRequest
  * @return RegisterUserResponse
 */
async function registerUser(request: RegisterUserRequest): RegisterUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterUser', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDataExportJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='This parameter is required.', example='1276****', position='Query'),
  orderId: long(name='OrderId', description='This parameter is required.', example='420****', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model RemoveDataExportJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model RemoveDataExportJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDataExportJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveDataExportJob  RemoveDataExportJobRequest
  * @return RemoveDataExportJobResponse
 */
async function removeDataExportJob(request: RemoveDataExportJobRequest): RemoveDataExportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDataExportJob', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTableFromCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId: long(name='CategoryId', description='This parameter is required.', example='30000235594', position='Query'),
  dbId: long(name='DbId', description='This parameter is required.', example='43153', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='test_table', position='Query'),
  tableSchemaName?: string(name='TableSchemaName', example='dbo', position='Query'),
  tid?: long(name='Tid', example='3****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model RemoveTableFromCategoryResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='19DA51A9-AC3E-5C36-8351-07EBCD2B89A1'),
  success?: boolean(name='Success', example='true'),
}

model RemoveTableFromCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTableFromCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTableFromCategory  RemoveTableFromCategoryRequest
  * @return RemoveTableFromCategoryResponse
 */
async function removeTableFromCategory(request: RemoveTableFromCategoryRequest): RemoveTableFromCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTableFromCategory', 'POST', '/', 'json', false, 'json', request);
}

model RestartDataCorrectSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](https://help.aliyun.com/document_detail/208481.html) and [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operations to obtain the value of this parameter.

If the Type parameter is set to SINGLE, you must pass the value of the JobId parameter to confirm the ID of the SQL task that you want to rerun.', example='43253', position='Query'),
  orderId: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.

This parameter is required.', example='453****', minimum=1, maximum=9223372036854775807, position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  type: string(name='Type', description='The type of the rerun operation. Valid values:

*   **ALL**: reruns all SQL tasks.
*   **SINGLE**: reruns a single SQL task.

This parameter is required.', example='ALL', position='Query'),
}

model RestartDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='809B52F2-CD2B-53DA-88C8-F7042787E673'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model RestartDataCorrectSQLJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartDataCorrectSQLJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartDataCorrectSQLJob  RestartDataCorrectSQLJobRequest
  * @return RestartDataCorrectSQLJobResponse
 */
async function restartDataCorrectSQLJob(request: RestartDataCorrectSQLJobRequest): RestartDataCorrectSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDataCorrectSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model RestartDataExportJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='This parameter is required.', example='1276****', position='Query'),
  orderId: long(name='OrderId', description='This parameter is required.', example='420****', position='Query'),
  tid?: long(name='Tid', example='23****', position='Query'),
}

model RestartDataExportJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model RestartDataExportJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartDataExportJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartDataExportJob  RestartDataExportJobRequest
  * @return RestartDataExportJobResponse
 */
async function restartDataExportJob(request: RestartDataExportJobRequest): RestartDataExportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDataExportJob', 'POST', '/', 'json', false, 'json', request);
}

model ResumeTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.

This parameter is required.', example='3****', position='Query'),
  dagVersion?: string(name='DagVersion', description='The version number of the task flow. You can call the [ListDAGVersions](https://help.aliyun.com/document_detail/424682.html) operation to query the version number.', example='[]', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ResumeTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FF2E325-763F-5E27-9157-C3CFA02F4CBF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ResumeTaskFlowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeTaskFlowInstanceResponseBody(name='body'),
}

/**
  * @description You can call this operation only for task flows that are suspended.
  * @param request  the request parameters of ResumeTaskFlowInstance  ResumeTaskFlowInstanceRequest
  * @return ResumeTaskFlowInstanceResponse
 */
async function resumeTaskFlowInstance(request: ResumeTaskFlowInstanceRequest): ResumeTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model RetryDataCorrectPreCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.

This parameter is required.', example='414****', minimum=1, maximum=9223372036854775807, position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model RetryDataCorrectPreCheckResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingOrderId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='OrderId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BC081C7-5F77-5C92-9758-E1ED17CA****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RetryDataCorrectPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryDataCorrectPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RetryDataCorrectPreCheck  RetryDataCorrectPreCheckRequest
  * @return RetryDataCorrectPreCheckResponse
 */
async function retryDataCorrectPreCheck(request: RetryDataCorrectPreCheckRequest): RetryDataCorrectPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryDataCorrectPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model RevokeTemplateAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.

This parameter is required.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
  userIds: string(name='UserIds', description='The IDs of users from whom you want to revoke permissions by using a permission template.

This parameter is required.', example='[12***,34***,56***]', position='Query'),
}

model RevokeTemplateAuthorityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  result?: boolean(name='Result', description='Indicates whether the permissions were revoked from the users.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RevokeTemplateAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeTemplateAuthorityResponseBody(name='body'),
}

/**
  * @description You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of RevokeTemplateAuthority  RevokeTemplateAuthorityRequest
  * @return RevokeTemplateAuthorityResponse
 */
async function revokeTemplateAuthority(request: RevokeTemplateAuthorityRequest): RevokeTemplateAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeTemplateAuthority', 'POST', '/', 'json', false, 'json', request);
}

model RevokeUserPermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: string(name='DbId', description='The database ID. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.', example='1860****', position='Query'),
  dsType: string(name='DsType', description='The type of the object on which you want to revoke permissions from a user. Valid values:

*   **INSTANCE**: instances.
*   **DATABASE**: physical databases.
*   **LOGIC_DATABASE**: logical databases.
*   **TABLE**: physical tables.
*   **LOGIC_TABLE**: logical tables.

This parameter is required.', example='DATABASE', position='Query'),
  instanceId?: long(name='InstanceId', description='The database instance ID. You must specify this parameter if you revoke a permission from the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the database instance.', example='174****', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

> 

*   If the database is a logical database, set this parameter to **true**.

*   If the database is a physical database, set this parameter to **false**.', example='false', position='Query'),
  permTypes: string(name='PermTypes', description='The type of the permissions. Valid values:

*   **QUERY**: query permissions.
*   **EXPORT**: export permissions.
*   **CORRECT**: change permissions.
*   **LOGIN**: logon permissions.
*   **PERF**: query permissions on the performance details of an instance.

This parameter is required.', example='CORRECT', position='Query'),
  tableId?: string(name='TableId', description='The table ID. You must specify this parameter if you revoke a permission from the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table ID.', example='13****', position='Query'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table name.', example='table_name', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', position='Query'),
  userAccessId: string(name='UserAccessId', description='The permission ID. You can call the [ListUserPermission](https://help.aliyun.com/document_detail/146957.html) operation to query the permission ID.

This parameter is required.', example='774****', position='Query'),
  userId: string(name='UserId', description='The user ID. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query the ID of the user.

This parameter is required.', example='51****', position='Query'),
}

model RevokeUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='MissingUserId'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UserId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A99CD576-1E18-4E86-931E-C3CCE56D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model RevokeUserPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeUserPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeUserPermission  RevokeUserPermissionRequest
  * @return RevokeUserPermissionResponse
 */
async function revokeUserPermission(request: RevokeUserPermissionRequest): RevokeUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model SearchDataTrackResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnFilter?: {
    betweenEnd?: string(name='BetweenEnd', description='The end value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.', example='10'),
    betweenStart?: string(name='BetweenStart', description='The start value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.', example='1'),
    columnName?: string(name='ColumnName', description='The name of the column.', example='c_payer_name'),
    inList?: [ string ](name='InList', description='The IN list used in the filter condition. This parameter takes effect only when Operator is set to IN or NOT_IN.'),
    operator?: string(name='Operator', description='The type of the operator used to configure the filter condition. Valid values:

*   **EQUAL**: retrieves the column whose value is equal to the specified value.
*   **NOT_EQUAL**: retrieves the column whose value is not equal to the specified value.
*   **IN**: retrieves the column whose value is in the IN list.
*   **BETWEEN**: retrieves the column whose value is in the specified range.
*   **LESS**: retrieves the column whose value is less than the specified value.
*   **MORE**: retrieves the column whose value is greater than the specified value.
*   **NOT_IN**: retrieves the column whose value is not in the IN list.', example='EQUAL'),
    value?: string(name='Value', description='The value used in the filter condition.', example='1'),
  }(name='ColumnFilter', description='The condition to filter columns.', shrink='json', position='Query'),
  filterEndTime?: string(name='FilterEndTime', description='The end time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 10:00:00', position='Query'),
  filterStartTime?: string(name='FilterStartTime', description='The start time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.', example='2023-04-23 00:00:00', position='Query'),
  filterTableList?: [ string ](name='FilterTableList', description='The names of the tables for which you want to track data operations.', shrink='json', position='Query'),
  filterTypeList?: [ string ](name='FilterTypeList', description='The types of data operations that you want to track.', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.

This parameter is required.', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='62***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SearchDataTrackResultResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  trackResult?: {
    eventList?: [ 
      {
        dataAfter?: [ string ](name='DataAfter', description='The data records after you perform data operations in the database.'),
        dataBefore?: [ string ](name='DataBefore', description='The data records before you perform data operations in the database.'),
        eventId?: long(name='EventId', description='The ID of the event.', example='1'),
        eventLength?: long(name='EventLength', description='The length of the event content. Unit: bytes.', example='4324'),
        eventTimestamp?: string(name='EventTimestamp', description='The event time.', example='2023-04-23 10:25:47'),
        eventType?: string(name='EventType', description='The type of the event. Valid values:

*   **WRITE_ROWS**: indicates an INSERT operation.
*   **UPDATE_ROWS**: indicates an UPDATE operation.
*   **DELETE_ROWS**: indicates a DELETE operation.
*   **EXT_WRITE_ROWS**: indicates an INSERT operation, which is equivalent to WRITE_ROWS.
*   **EXT_UPDATE_ROWS**: indicates an UPDATE operation, which is equivalent to UPDATE_ROWS.
*   **EXT_DELETE_ROWS**: indicates a DELETE operation, which is equivalent to DELETE_ROWS.', example='UPDATE_ROWS'),
        rollSQL?: string(name='RollSQL', description='The SQL statements used to roll back the data change.', example='-- Timestamp:2023-04-23 10:25:47 #1\\r\\nUPDATE `dc_test`.`tb_chunk_dml` SET `id`=1 , `gmt_create`=\\"2021-09-30T00:00:00\\" , `content`=\\"2023-03-30 14:51:50\\" , `c1`=\\"2023-04-17 13:42:03\\" , `c_id`=1 , `c13425`=\\"b\\\\\\"\\" , `c432532535`= null , `c1432`= null , `c143243253`= null , `c1432535`= null , `c43125325`= null , `c3425325`= null WHERE  (`id`=1)"'),
      }
    ](name='EventList', description='The details of the event logs.'),
    tableInfoList?: [ 
      {
        columns?: [ 
          {
            columnName?: string(name='ColumnName', description='The name of the column.', example='basic_platform'),
            columnPosition?: int32(name='ColumnPosition', description='The position of the column.', example='1'),
            columnType?: string(name='ColumnType', description='The data type of the column. Examples: BIGINT, INT, and VARCHAR.', example='BIGINT'),
            fictive?: boolean(name='Fictive', description='Indicates whether the column is a virtual column. Valid values:

*   **true**
*   **false**', example='true'),
          }
        ](name='Columns', description='The information about columns.'),
        description?: string(name='Description', description='The description of the column.', example='auto-description'),
        schemaName?: string(name='SchemaName', description='The name of the database.', example='prod_eb_vas'),
        tableName?: string(name='TableName', description='The name of the table.', example='import_table_test1'),
      }
    ](name='TableInfoList', description='The metadata of tables for which you track data operations.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='109'),
  }(name='TrackResult', description='The parsing result of the data tracking task.'),
}

model SearchDataTrackResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchDataTrackResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchDataTrackResult  SearchDataTrackResultRequest
  * @return SearchDataTrackResultResponse
 */
async function searchDataTrackResult(request: SearchDataTrackResultRequest): SearchDataTrackResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchDataTrackResult', 'POST', '/', 'json', false, 'json', request);
}

model SearchDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).', example='MYSQL', position='Query'),
  envType?: string(name='EnvType', description='The environment type of the database. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=1, maximum=1000, position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for databases.', example='testdb', position='Query'),
  searchRange?: string(name='SearchRange', description='The query range based on permissions. Valid values:

*   **HAS_PERMSSION**: searches for databases on which the current user has permissions.
*   **OWNER**: searches for databases owned by the current user.
*   **MY_FOCUS**: searches for databases that the current user follows.
*   **UNKNOWN**: searches for all databases.', example='HAS_PERMSSION', position='Query'),
  searchTarget?: string(name='SearchTarget', description='The category of the database. Valid values:

*   **DB**: single database or logical database.
*   **SINGLE_DB**: single database.
*   **LOGIC_DB**: logical database.', example='SINGLE_DB', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model SearchDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  searchDatabaseList?: {
    searchDatabase?: [ 
    {
      alias?: string(name='Alias', description='The alias of the database.', example='test_rds'),
      catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.

> If the type of the database engine is PostgreSQL, the name of the database is displayed.', example='dmstest'),
      databaseId?: string(name='DatabaseId', description='The ID of the database.', example='2528****'),
      datalinkName?: string(name='DatalinkName', description='The name of the data link for cross-database queries.', example='datalink_name'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dbaId?: string(name='DbaId', description='The ID of the user who assumes the database administrator (DBA) role.', example='10****'),
      encoding?: string(name='Encoding', description='The encoding method of the database.', example='utf8'),
      envType?: string(name='EnvType', description='The environment type of the database. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='test'),
      host?: string(name='Host', description='The endpoint of the instance in which the database resides.', example='rm-xxxx.mysql.rds.aliyuncs.com'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the databases.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the database owners.'),
      port?: int32(name='Port', description='The port of the instance in which the database resides.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', description='The system ID (SID) of the instance in which the database resides.', example='testSid'),
    }
  ](name='SearchDatabase')
  }(name='SearchDatabaseList', description='The information about the databases.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model SearchDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchDatabase  SearchDatabaseRequest
  * @return SearchDatabaseResponse
 */
async function searchDatabase(request: SearchDatabaseRequest): SearchDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchDatabase', 'POST', '/', 'json', false, 'json', request);
}

model SearchTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The type of database. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **Oracle**
*   **DRDS**
*   **OceanBase**
*   **Mongo**
*   **Redis**', example='MySQL', position='Query'),
  envType?: string(name='EnvType', description='The type of the environment to which databases belong. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).', example='PRODUCT', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=1, maximum=100, position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of each table.', example='false', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to query tables.', example='test', position='Query'),
  searchRange?: string(name='SearchRange', description='The scope of tables that you want to query. Valid values:

*   **HAS_PERMSSION**: the tables on which the current account has permissions.
*   **OWNER**: the tables owned by the current account.
*   **MY_FOCUS**: the tables that the current account follows.
*   **UNKNOWN**: all tables.', example='OWNER', position='Query'),
  searchTarget?: string(name='SearchTarget', description='The type of table that you want to query. Valid values:

*   **TABLE**: physical and logical tables
*   **SINGLE_TABLE**: physical tables
*   **LOGIC_TABLE**: logical tables', example='LOGIC_TABLE', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='1', position='Query'),
}

model SearchTableResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1489257F-1B5D-4B5B-89EF-923C12CEEBD1'),
  searchTableList?: {
    searchTable?: [ 
    {
      DBSearchName?: string(name='DBSearchName', description='The name that is used to search for the database to which the table belongs.', example='test'),
      databaseId?: string(name='DatabaseId', description='The ID of the database to which the table belongs.', example='1'),
      dbName?: string(name='DbName', description='The name of the database.', example='test'),
      dbType?: string(name='DbType', description='The type of the database. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **Oracle**
*   **DRDS**
*   **OceanBase**
*   **Mongo**
*   **Redis**', example='mysql'),
      description?: string(name='Description', description='The description of the table.', example='test'),
      encoding?: string(name='Encoding', description='The encoding format of the table.', example='utf8'),
      engine?: string(name='Engine', description='The engine of the table.', example='innodb'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='test'),
      logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. Valid values:

*   **true**: The table is a logical table.
*   **false**: The table is not a logical table.', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the table owners.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the table owners.'),
      tableGuid?: string(name='TableGuid', description='The GUID of the table.', example='IDB_L_9032.db-test.yuyang_test'),
      tableId?: string(name='TableId', description='The ID of the table.', example='1'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
      tableSchemaName?: string(name='TableSchemaName', description='The name of the database to which the table belongs.', example='test@xxx.xxx.xxx.xxx:3306'),
    }
  ](name='SearchTable')
  }(name='SearchTableList', description='The details of the tables.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model SearchTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTableResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances that are managed in Security Collaboration mode.
  * @param request  the request parameters of SearchTable  SearchTableRequest
  * @return SearchTableResponse
 */
async function searchTable(request: SearchTableRequest): SearchTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTable', 'POST', '/', 'json', false, 'json', request);
}

model SetOwnersRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerIds: string(name='OwnerIds', description='The ID of the user whom you want to specify as an owner. Separate multiple IDs with commas (,). You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.

>  The value of the OwnerIds parameter is that of the UserId parameter.

This parameter is required.', example='51****', position='Query'),
  ownerType: string(name='OwnerType', description='The type of the owner. Valid values:

*   INSTANCE: an owner of an instance.
*   DATABASE: an owner of a physical database.
*   LOGIC_DATABASE: an owner of a logical database.
*   TABLE: an owner of a physical table.
*   LOGIC_TABLE: an owner of a logical table.

This parameter is required.', example='INSTANCE', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource. The ID of the resource varies with the owner type. The owner types and resource IDs have the following mappings:

*   INSTANCE: the ID of an instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to query the ID of the instance.
*   DATABASE: the ID of a physical database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of the physical database.
*   LOGIC_DATABASE: the ID of a logical database. You can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of the logical database.
*   TABLE: the ID of a physical table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the ID of the physical table.
*   LOGIC_DATABASE: the ID of a logical table. You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to query the ID of the logical table.

This parameter is required.', example='174****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.', example='3***', position='Query'),
}

model SetOwnersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model SetOwnersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetOwnersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetOwners  SetOwnersRequest
  * @return SetOwnersResponse
 */
async function setOwners(request: SetOwnersRequest): SetOwnersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetOwners', 'POST', '/', 'json', false, 'json', request);
}

model SetWorkflowExtraInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  renderAddApprovalNode?: boolean(name='RenderAddApprovalNode', example='false', position='Query'),
  renderAgree?: boolean(name='RenderAgree', example='true', position='Query'),
  renderCancel?: boolean(name='RenderCancel', example='true', position='Query'),
  renderReject?: boolean(name='RenderReject', example='false', position='Query'),
  renderTransfer?: boolean(name='RenderTransfer', example='true', position='Query'),
  thirdpartyWorkflowComment?: string(name='ThirdpartyWorkflowComment', example='test', position='Query'),
  thirdpartyWorkflowUrl?: string(name='ThirdpartyWorkflowUrl', example='https://xxx', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workflowInstanceId: long(name='WorkflowInstanceId', description='This parameter is required.', example='184****', position='Query'),
}

model SetWorkflowExtraInfoResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='8401893F-4235-55D5-B563-7CF7A7D037DE'),
  success?: boolean(name='Success', example='true'),
}

model SetWorkflowExtraInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetWorkflowExtraInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetWorkflowExtraInfo  SetWorkflowExtraInfoRequest
  * @return SetWorkflowExtraInfoResponse
 */
async function setWorkflowExtraInfo(request: SetWorkflowExtraInfoRequest): SetWorkflowExtraInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWorkflowExtraInfo', 'POST', '/', 'json', false, 'json', request);
}

model SimplyAddInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  databasePassword: string(name='DatabasePassword', description='This parameter is required.', example='test***', position='Query'),
  databaseUser: string(name='DatabaseUser', description='This parameter is required.', example='abc', position='Query'),
  host?: string(name='Host', example='192.XXX.0.56', position='Query'),
  instanceId?: string(name='InstanceId', example='rm****', position='Query'),
  instanceRegion?: string(name='InstanceRegion', example='cn-hangzhou', position='Query'),
  port?: int32(name='Port', example='5432', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
}

model SimplyAddInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  instance?: {
    host?: string(name='Host', example='192.168.XXX.XXX'),
    instanceId?: string(name='InstanceId', example='188****'),
    port?: string(name='Port', example='5432'),
  }(name='Instance'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model SimplyAddInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SimplyAddInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SimplyAddInstance  SimplyAddInstanceRequest
  * @return SimplyAddInstanceResponse
 */
async function simplyAddInstance(request: SimplyAddInstanceRequest): SimplyAddInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SimplyAddInstance', 'POST', '/', 'json', false, 'json', request);
}

model SkipDataCorrectRowCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.

This parameter is required.', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', position='Query'),
  reason: string(name='Reason', description='The reason for skipping the verification on the number of rows in the precheck for data change.

This parameter is required.', example='save test time', position='Query'),
  tid?: long(name='Tid', description='The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SkipDataCorrectRowCheckResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model SkipDataCorrectRowCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SkipDataCorrectRowCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SkipDataCorrectRowCheck  SkipDataCorrectRowCheckRequest
  * @return SkipDataCorrectRowCheckResponse
 */
async function skipDataCorrectRowCheck(request: SkipDataCorrectRowCheckRequest): SkipDataCorrectRowCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipDataCorrectRowCheck', 'POST', '/', 'json', false, 'json', request);
}

model StopTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.

This parameter is required.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model StopTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='028BF827-3801-5869-8548-F4A039256308'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model StopTaskFlowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskFlowInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopTaskFlowInstance  StopTaskFlowInstanceRequest
  * @return StopTaskFlowInstanceResponse
 */
async function stopTaskFlowInstance(request: StopTaskFlowInstanceRequest): StopTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model SubmitOrderApprovalRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='12345', position='Query'),
  realLoginUserUid?: string(name='RealLoginUserUid', description='The ID of the Alibaba Cloud account that is used to call the API operation.', example='21400447956867****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model SubmitOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SubmitOrderApprovalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitOrderApprovalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitOrderApproval  SubmitOrderApprovalRequest
  * @return SubmitOrderApprovalResponse
 */
async function submitOrderApproval(request: SubmitOrderApprovalRequest): SubmitOrderApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitOrderApproval', 'POST', '/', 'json', false, 'json', request);
}

model SubmitStructSyncOrderApprovalRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

This parameter is required.', example='4324535', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SubmitStructSyncOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process.', example='432523'),
}

model SubmitStructSyncOrderApprovalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitStructSyncOrderApprovalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitStructSyncOrderApproval  SubmitStructSyncOrderApprovalRequest
  * @return SubmitStructSyncOrderApprovalResponse
 */
async function submitStructSyncOrderApproval(request: SubmitStructSyncOrderApprovalRequest): SubmitStructSyncOrderApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitStructSyncOrderApproval', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDataExportJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='This parameter is required.', example='1276****', position='Query'),
  orderId: long(name='OrderId', description='This parameter is required.', example='903****', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model SuspendDataExportJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model SuspendDataExportJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendDataExportJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendDataExportJob  SuspendDataExportJobRequest
  * @return SuspendDataExportJobResponse
 */
async function suspendDataExportJob(request: SuspendDataExportJobRequest): SuspendDataExportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDataExportJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.

This parameter is required.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SuspendTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='028BF827-3801-5869-8548-F4A039256305'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SuspendTaskFlowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendTaskFlowInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendTaskFlowInstance  SuspendTaskFlowInstanceRequest
  * @return SuspendTaskFlowInstanceResponse
 */
async function suspendTaskFlowInstance(request: SuspendTaskFlowInstanceRequest): SuspendTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model SyncDatabaseMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the database.

This parameter is required.', example='123', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
}

model SyncDatabaseMetaResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SyncDatabaseMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncDatabaseMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncDatabaseMeta  SyncDatabaseMetaRequest
  * @return SyncDatabaseMetaResponse
 */
async function syncDatabaseMeta(request: SyncDatabaseMetaRequest): SyncDatabaseMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncDatabaseMeta', 'POST', '/', 'json', false, 'json', request);
}

model SyncInstanceMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  ignoreTable?: boolean(name='IgnoreTable', description='Specifies whether to skip synchronization for the metadata of table dictionaries. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='12***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.', example='3***', position='Query'),
}

model SyncInstanceMetaResponseBody = {
  errorCode?: string(name='ErrorCode', description='Details about the topology of the data table.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model SyncInstanceMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncInstanceMetaResponseBody(name='body'),
}

/**
  * @description You can call this operation only for database instances whose control mode is Security Collaboration.
  * @param request  the request parameters of SyncInstanceMeta  SyncInstanceMetaRequest
  * @return SyncInstanceMetaResponse
 */
async function syncInstanceMeta(request: SyncInstanceMetaRequest): SyncInstanceMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncInstanceMeta', 'POST', '/', 'json', false, 'json', request);
}

model TryRunTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId?: long(name='DagId', example='11****', position='Query'),
}

model TryRunTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  instanceId?: string(name='InstanceId', example='169****'),
  requestId?: string(name='RequestId', example='9997630E-1993-5E6D-9DF1-4EFEE755FE31'),
  success?: boolean(name='Success', example='true'),
}

model TryRunTaskFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TryRunTaskFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TryRunTaskFlow  TryRunTaskFlowRequest
  * @return TryRunTaskFlowResponse
 */
async function tryRunTaskFlow(request: TryRunTaskFlowRequest): TryRunTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TryRunTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAbacPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  abacPolicyContent?: string(name='AbacPolicyContent', example='{
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*",
      "Condition": {
        "StringEqualsIgnoreCase": {
          "dms:DbType": [
            "redis"
          ]
        }
      }
    }
  ],
  "Version": "1"
}', position='Query'),
  abacPolicyDesc?: string(name='AbacPolicyDesc', example='test', position='Query'),
  abacPolicyId: long(name='AbacPolicyId', description='This parameter is required.', example='12****', position='Query'),
  abacPolicyName?: string(name='AbacPolicyName', example='policy_test', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateAbacPolicyResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='CE43759B-5A72-560A-BF3D-862F38B36B9E'),
  success?: boolean(name='Success', example='true'),
  updatePolicyResult?: long(name='UpdatePolicyResult', example='true'),
}

model UpdateAbacPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAbacPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAbacPolicy  UpdateAbacPolicyRequest
  * @return UpdateAbacPolicyResponse
 */
async function updateAbacPolicy(request: UpdateAbacPolicyRequest): UpdateAbacPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAbacPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='The description of the permission template.

>  You must specify the Name or Description parameter. Otherwise, the API call fails.

This parameter is required.', example='This template is used for business testing.', position='Query'),
  name: string(name='Name', description='The name of the permission template.

>  You must specify the Name or Description parameter. Otherwise, the API call fails.

This parameter is required.', example='Test template.', position='Query'),
  templateId: long(name='TemplateId', description='The ID of the permission template.

This parameter is required.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', position='Query'),
}

model UpdateAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='Test template.'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
}

model UpdateAuthorityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthorityTemplateResponseBody(name='body'),
}

/**
  * @description You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
  * @param request  the request parameters of UpdateAuthorityTemplate  UpdateAuthorityTemplateRequest
  * @return UpdateAuthorityTemplateResponse
 */
async function updateAuthorityTemplate(request: UpdateAuthorityTemplateRequest): UpdateAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataLakeDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  location: string(name='Location', description='This parameter is required.', example='oss://path/to/database', position='Query'),
  parameters?: map[string]string(name='Parameters', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model UpdateDataLakeDatabaseResponseBody = {
  database?: DLDatabase(name='Database'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataLakeDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataLakeDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataLakeDatabase  UpdateDataLakeDatabaseRequest
  * @return UpdateDataLakeDatabaseResponse
 */
async function updateDataLakeDatabase(request: UpdateDataLakeDatabaseRequest): UpdateDataLakeDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataLakeDatabase', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataLakeFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  functionInput: DLFunctionInput(name='FunctionInput', description='This parameter is required.', shrink='json', position='Body'),
  functionName: string(name='FunctionName', description='This parameter is required.', example='my_funciton', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', example='12****', position='Query'),
}

model UpdateDataLakeFunctionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  function?: DLFunction(name='Function'),
  requestId?: string(name='RequestId', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataLakeFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataLakeFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataLakeFunction  UpdateDataLakeFunctionRequest
  * @return UpdateDataLakeFunctionResponse
 */
async function updateDataLakeFunction(request: UpdateDataLakeFunctionRequest): UpdateDataLakeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataLakeFunction', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataLakePartitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  partitionInput: DLPartitionInput(name='PartitionInput', description='This parameter is required.', shrink='json', position='Body'),
  tableName: string(name='TableName', description='This parameter is required.', example='table_name', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model UpdateDataLakePartitionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataLakePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataLakePartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataLakePartition  UpdateDataLakePartitionRequest
  * @return UpdateDataLakePartitionResponse
 */
async function updateDataLakePartition(request: UpdateDataLakePartitionRequest): UpdateDataLakePartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataLakePartition', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataLakeTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  catalogName: string(name='CatalogName', description='This parameter is required.', example='hive', position='Query'),
  dataRegion: string(name='DataRegion', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  dbName: string(name='DbName', description='This parameter is required.', example='default', position='Query'),
  tableInput: OpenStructDLTableInput(name='TableInput', description='This parameter is required.', shrink='json', position='Body'),
  tableName?: string(name='TableName', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  workspaceId?: long(name='WorkspaceId', position='Query'),
}

model UpdateDataLakeTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C5B8E84B-42B6-4374-AD5A-6264E1753325'),
  success?: boolean(name='Success', example='true'),
  table?: DLTable(name='Table'),
}

model UpdateDataLakeTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataLakeTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataLakeTable  UpdateDataLakeTableRequest
  * @return UpdateDataLakeTableResponse
 */
async function updateDataLakeTable(request: UpdateDataLakeTableRequest): UpdateDataLakeTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataLakeTable', 'POST', '/', 'json', true, 'form', request);
}

model UpdateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', description='The name of the database link for cross-database queries.

> 

*   This parameter is required if UseDsql is set to 1.

*   The name can contain only lowercase letters and underscores (_).

*   The name must be unique within a tenant.', example='datalink_test', position='Query'),
  databasePassword: string(name='DatabasePassword', description='The password that is used to log on to the database.

This parameter is required.', example='******', position='Query'),
  databaseUser: string(name='DatabaseUser', description='The account that is used to log on to the database.

This parameter is required.', example='dbuser', position='Query'),
  dbaId: string(name='DbaId', description='The ID of the user who assumes the database administrator (DBA) role of the database instance. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the user ID.

This parameter is required.', example='27****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', description='Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:

*   **0:** disables the lock-free schema change feature.
*   **1**: uses the online DDL of MySQL first.
*   **2**: uses the lock-free schema change feature of DMS first.', example='0', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance on which the database instance is deployed.

> This parameter is required if the InstanceSource parameter is set to ECS_OWN.', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.

> This parameter is required if InstanceSource is set to RDS, ECS_OWN, and VPC_IDC.', example='cn-hangzhou', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', description='*   **Y:** enables the sensitive data protection feature
*   **N:** disables the sensitive data protection feature
*   **NULL or other:** does not update the status of the sensitive data protection feature', example='Y', position='Query'),
  envType: string(name='EnvType', description='The type of the environment in which the database instance is deployed. Valid values:

*   **product:** production environment
*   **dev:** development environment
*   **pre:** pre-release environment
*   **test:** test environment
*   **sit:** system integration testing (SIT) environment
*   **uat:** user acceptance testing (UAT) environment
*   **pet:** stress testing environment
*   **stag:** staging environment

This parameter is required.', example='product', position='Query'),
  exportTimeout: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.

This parameter is required.', example='600', position='Query'),
  host: string(name='Host', description='The host address that is used to connect to the database instance.

This parameter is required.', example='192.XXX.0.56', position='Query'),
  instanceAlias: string(name='InstanceAlias', description='The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.

This parameter is required.', example='instance_test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the database instance. You can call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the instance ID.

This parameter is required.', example='126****', position='Query'),
  instanceSource: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
*   **RDS:** an ApsaraDB RDS instance
*   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)

This parameter is required.', example='ECS_OWN', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).

This parameter is required.', example='mysql', position='Query'),
  port: int32(name='Port', description='The port that is used to connect to the database instance.

This parameter is required.', example='3306', position='Query'),
  queryTimeout: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.

This parameter is required.', example='60', position='Query'),
  safeRuleId: string(name='SafeRuleId', description='The name of the security rule set (GroupName) for the instance. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/417891.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the name of the security rule set.

This parameter is required.', example='3****', position='Query'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance.

> This parameter is required if the InstanceType parameter is set to ORACLE.', example='XXX', position='Query'),
  skipTest?: boolean(name='SkipTest', description='Specifies whether to skip the connectivity test. Valid values:

*   **true:** skips the connectivity test
*   **false:** does not skip the connectivity test', example='false', position='Query'),
  templateId?: long(name='TemplateId', description='The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template ID.', example='3***', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template type.', example='INNER', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.', example='3***', position='Query'),
  useDsql?: int32(name='UseDsql', description='Specifies whether to enable the cross-database query feature for the database instance. Valid values:

*   **0**: disables the cross-database query feature.
*   **1**: enables the cross-database query feature.

> Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for PostgreSQL (compatible with Oracle), and ApsaraDB for Redis.', example='0', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the database instance belongs.

> This parameter is required if the InstanceSource parameter is set to VPC_IDC.', example='vpc-xxx', position='Query'),
}

model UpdateInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true:** The request was successful.
*   **false:** The request failed.', example='false'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @description Before you call the UpdateInstance operation, call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) or [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the complete information about the instance.
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMetaCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId: long(name='CategoryId', description='This parameter is required.', example='30000181325', position='Query'),
  name?: string(name='Name', position='Query'),
  tid?: long(name='Tid', example='23****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateMetaCategoryResponseBody = {
  category?: MetaCategory(name='Category'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMetaCategory  UpdateMetaCategoryRequest
  * @return UpdateMetaCategoryResponse
 */
async function updateMetaCategory(request: UpdateMetaCategoryRequest): UpdateMetaCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMetaCategory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  slaRuleList?: [ 
    {
      dagId: long(name='DagId', description='The ID of the task flow.

This parameter is required.', example='15***'),
      intervalMinutes: int32(name='IntervalMinutes', description='The timeout period. Unit: minutes.

This parameter is required.', example='1080'),
      nodeId?: long(name='NodeId', description='The ID of the task node.', example='0'),
      type: int32(name='Type', description='The rule type. Valid values:

*   **0**: SLA rules for task flows
*   **1**: SLA rules for nodes

This parameter is required.', example='0'),
    }
  ](name='SlaRuleList', description='The list of SLA rules.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='88E053F7-347B-52DD-A186-1F340EEC0C27'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateSLARulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSLARulesResponseBody(name='body'),
}

/**
  * @description SLA rules take effect after task flows are deployed and published.
  * @param request  the request parameters of UpdateSLARules  UpdateSLARulesRequest
  * @return UpdateSLARulesResponse
 */
async function updateSLARules(request: UpdateSLARulesRequest): UpdateSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSLARules', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the business scenario.', example='test', position='Query'),
  scenarioId: string(name='ScenarioId', description='The ID of the business scenario.

This parameter is required.', example='12***', position='Query'),
  scenarioName: string(name='ScenarioName', description='The name of the business scenario.

This parameter is required.', example='Business scenario - test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScenarioResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateScenario  UpdateScenarioRequest
  * @return UpdateScenarioResponse
 */
async function updateScenario(request: UpdateScenarioRequest): UpdateScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScenario', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStandardGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='The description of the security rule set.

This parameter is required.', example='Production Environment test rules', position='Query'),
  groupId: long(name='GroupId', description='The security rule set ID. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/465940.html) operation to obtain the ID of the security rule set.

This parameter is required.', example='242***', position='Query'),
  groupName: string(name='GroupName', description='The name of the security rule set.

This parameter is required.', example='poc_test', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.', example='23****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to locate logs and troubleshoot issues.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  standardGroup?: {
    dbType?: string(name='DbType', description='The type of the database for which the security rules are used.', example='mysql'),
    description?: string(name='Description', description='The description of the security rule set.', example='Production Environment test rules'),
    groupId?: long(name='GroupId', description='The security rule set ID.', example='41****'),
    groupMode?: string(name='GroupMode', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', example='COMMON'),
    groupName?: string(name='GroupName', description='The name of the security rule set.', example='poc_test'),
    lastMenderId?: long(name='LastMenderId', description='The ID of the user who last modified the security rules.', example='51****'),
  }(name='StandardGroup', description='The information about the security rule set.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateStandardGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStandardGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateStandardGroup  UpdateStandardGroupRequest
  * @return UpdateStandardGroupResponse
 */
async function updateStandardGroup(request: UpdateStandardGroupRequest): UpdateStandardGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStandardGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeConfig: string(name='NodeConfig', description='The advanced configuration for the node. The value of this parameter must be a JSON string.

This parameter is required.', example='{ "rerun":{ "rerunEnable":true,  "rerunCount":1,   "rerunInterval":10 } }', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='43****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskConfigResponseBody(name='body'),
}

/**
  * @description You can call this operation to configure a failed task or rerun a task.
  * @param request  the request parameters of UpdateTaskConfig  UpdateTaskConfigRequest
  * @return UpdateTaskConfigResponse
 */
async function updateTaskConfig(request: UpdateTaskConfigRequest): UpdateTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeContent?: string(name='NodeContent', description='The node configurations after modification.', example='{ "dbId":12****, "sql":"select * from test_table",   "dbType":"lindorm_sql"  }', position='Query'),
  nodeId: string(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='43****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the ["View information about the current tenant"](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskContentResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskContentResponseBody(name='body'),
}

/**
  * @description You can call this operation to modify node configurations.
  * @param request  the request parameters of UpdateTaskContent  UpdateTaskContentRequest
  * @return UpdateTaskContentResponse
 */
async function updateTaskContent(request: UpdateTaskContentRequest): UpdateTaskContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskContent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskContentV2Request {
  regionId?: string(name='RegionId', position='Host'),
  nodeContent?: string(name='NodeContent', example='{ "dbId":12****, "sql":"select * from test_table",   "dbType":"lindorm_sql"  }', position='Body'),
  nodeId?: string(name='NodeId', example='449***', position='Query'),
}

model UpdateTaskContentV2ResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773'),
  success?: string(name='Success', example='true'),
}

model UpdateTaskContentV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskContentV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskContentV2  UpdateTaskContentV2Request
  * @return UpdateTaskContentV2Response
 */
async function updateTaskContentV2(request: UpdateTaskContentV2Request): UpdateTaskContentV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskContentV2', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTaskFlowConstantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagConstants?: [ 
    {
      key?: string(name='Key', description='The key name of a constant for the task flow.', example='poc_test'),
      value?: string(name='Value', description='The key value of a constant for the task flow.', example='poc_test'),
    }
  ](name='DagConstants', description='The constants for the task flow.', shrink='json', position='Query'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='3****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowConstantsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='C4CCC000-C193-5A32-B701-573F497BF729'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowConstantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowConstantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskFlowConstants  UpdateTaskFlowConstantsRequest
  * @return UpdateTaskFlowConstantsResponse
 */
async function updateTaskFlowConstants(request: UpdateTaskFlowConstantsRequest): UpdateTaskFlowConstantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowConstants', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowCooperatorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  cooperatorIds?: [ string ](name='CooperatorIds', description='The IDs of the users who are involved in the task flow to be updated.', shrink='json', position='Query'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowCooperatorsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowCooperatorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowCooperatorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskFlowCooperators  UpdateTaskFlowCooperatorsRequest
  * @return UpdateTaskFlowCooperatorsResponse
 */
async function updateTaskFlowCooperators(request: UpdateTaskFlowCooperatorsRequest): UpdateTaskFlowCooperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowCooperators', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowEdgesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The task flow ID. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  edges: [ 
    {
      id: long(name='Id', description='The ID of the task flow edge.

This parameter is required.', example='24***'),
      nodeEnd: long(name='NodeEnd', description='The ID of the end node of the edge.

This parameter is required.', example='44***'),
      nodeFrom: long(name='NodeFrom', description='The ID of the start node of the edge.

This parameter is required.', example='44***'),
    }
  ](name='Edges', description='The list of updated task flow edges.

This parameter is required.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowEdgesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The request ID.', example='93FC1AE1-EC54-52B1-B146-650180FB82E8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateTaskFlowEdgesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowEdgesResponseBody(name='body'),
}

/**
  * @description ###
  * The edges can be updated only when the following conditions are met:
  * 1.  The specified edge exists in the directed acyclic graph (DAG) of the task flow specified by DagId.
  * 2.  The specified edge nodes exist in the DAG of the task flow specified by DagId.
  * 3.  After the update, rings do not exist in the DAG.
  * @param request  the request parameters of UpdateTaskFlowEdges  UpdateTaskFlowEdgesRequest
  * @return UpdateTaskFlowEdgesResponse
 */
async function updateTaskFlowEdges(request: UpdateTaskFlowEdgesRequest): UpdateTaskFlowEdgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowEdges', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowNameAndDescRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  dagName: string(name='DagName', description='The new name that you want to specify for the task flow.

This parameter is required.', example='test', position='Query'),
  description?: string(name='Description', description='The description that you want to specify for the task flow.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowNameAndDescResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='F73CCB9D-0CF3-5D3D-97B0-D852A8022663'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowNameAndDescResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowNameAndDescResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskFlowNameAndDesc  UpdateTaskFlowNameAndDescRequest
  * @return UpdateTaskFlowNameAndDescResponse
 */
async function updateTaskFlowNameAndDesc(request: UpdateTaskFlowNameAndDescRequest): UpdateTaskFlowNameAndDescResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowNameAndDesc', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The unique ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  dagNotificationFail: boolean(name='DagNotificationFail', description='Specifies whether to enable notifications for failed task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.

This parameter is required.', example='true', position='Query'),
  dagNotificationSla: boolean(name='DagNotificationSla', description='Specifies whether to enable SLA global notifications for task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.

This parameter is required.', example='true', position='Query'),
  dagNotificationSuccess: boolean(name='DagNotificationSuccess', description='Specifies whether to enable notifications for successful task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.

This parameter is required.', example='true', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='3BDC762F-2525-5E47-8748-D6C58BDB3B38'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowNotificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowNotificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskFlowNotification  UpdateTaskFlowNotificationRequest
  * @return UpdateTaskFlowNotificationResponse
 */
async function updateTaskFlowNotification(request: UpdateTaskFlowNotificationRequest): UpdateTaskFlowNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowNotification', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowOwnerRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  newOwnerId: string(name='NewOwnerId', description='The user ID of the new owner. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the user ID.

This parameter is required.', example='51****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='482C61C1-2537-5BFB-8E58-34D9F17AD3C3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowOwnerResponseBody(name='body'),
}

/**
  * @description Note: The new owner of the task flow must belong to the same tenant as the previous owner.
  * @param request  the request parameters of UpdateTaskFlowOwner  UpdateTaskFlowOwnerRequest
  * @return UpdateTaskFlowOwnerResponse
 */
async function updateTaskFlowOwner(request: UpdateTaskFlowOwnerRequest): UpdateTaskFlowOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowOwner', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowRelationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.

This parameter is required.', example='15***', position='Query'),
  edges?: [ 
    {
      id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
    }
  ](name='Edges', description='The list of task flow edges to be updated.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowRelationsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='15D9E71C-405B-57D7-BE6E-707C2C7A8E0B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowRelationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowRelationsResponseBody(name='body'),
}

/**
  * @description You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
  * @param request  the request parameters of UpdateTaskFlowRelations  UpdateTaskFlowRelationsRequest
  * @return UpdateTaskFlowRelationsResponse
 */
async function updateTaskFlowRelations(request: UpdateTaskFlowRelationsRequest): UpdateTaskFlowRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowRelations', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowScheduleRequest {
  regionId?: string(name='RegionId', position='Host'),
  cronBeginDate?: string(name='CronBeginDate', description='The start of the time range for scheduling.', example='CronBeginDate_test', position='Query'),
  cronEndDate?: string(name='CronEndDate', description='The end of the time range for scheduling.', example='CronEndDate_test', position='Query'),
  cronStr?: string(name='CronStr', description='The cron expression for timed scheduling.', example='CronStr_test', position='Query'),
  cronType?: string(name='CronType', description='The type of the scheduling cycle. Valid values:

*   **MINUTE**: scheduling by minute
*   **HOUR**: scheduling by hour
*   **DAY**: scheduling by day
*   **WEEK**: scheduling by week
*   **MONTH**: scheduling by month', example='HOUR', position='Query'),
  dagId: long(name='DagId', description='The ID of the task flow.

This parameter is required.', example='7***', position='Query'),
  scheduleParam: string(name='ScheduleParam', description='The event scheduling configuration. The value of this parameter is a JSON string.

This parameter is required.', example='ScheduleParam_test', position='Query'),
  scheduleSwitch: boolean(name='ScheduleSwitch', description='Specifies whether to enable scheduling. Valid values:

*   **Enable**
*   **Disable**

This parameter is required.', example='Disable', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeZoneId?: string(name='TimeZoneId', description='The time zone. The default time zone is UTC+8 (Asia/Shanghai).', example='Asia/Shanghai', position='Query'),
  triggerType: string(name='TriggerType', description='The mode in which the task flow is triggered. Valid values:

*   **Cron**: The task flow is triggered based on timed scheduling.
*   **Event**: The task flow is triggered by events.

This parameter is required.', example='Event', position='Query'),
}

model UpdateTaskFlowScheduleResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='InvalidParameterValid'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='7BF38A13-C181-5B5E-97F1-8643F8A10093'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowScheduleResponseBody(name='body'),
}

/**
  * @description You can call this operation to update the scheduling properties for a task flow in the editing state. You can configure a **timed scheduling** task flow or an **event scheduling** task flow. When you configure a **timed scheduling** task flow, you can choose from one-time scheduling or periodic scheduling. When you configure an **event scheduling** task flow, you can subscribe to task flows or task flow nodes.****\\
  * After you update the scheduling properties, you need to publish and deploy the task flow again. The new task flow instance will run based on the updated scheduling properties.
  * @param request  the request parameters of UpdateTaskFlowSchedule  UpdateTaskFlowScheduleRequest
  * @return UpdateTaskFlowScheduleResponse
 */
async function updateTaskFlowSchedule(request: UpdateTaskFlowScheduleRequest): UpdateTaskFlowScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowSchedule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='43****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables: string(name='TimeVariables', description='The time variables for the task flow.

This parameter is required.', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}', position='Query'),
}

model UpdateTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowTimeVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskFlowTimeVariablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskFlowTimeVariables  UpdateTaskFlowTimeVariablesRequest
  * @return UpdateTaskFlowTimeVariablesResponse
 */
async function updateTaskFlowTimeVariables(request: UpdateTaskFlowTimeVariablesRequest): UpdateTaskFlowTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The ID of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='449***', position='Query'),
  nodeName: string(name='NodeName', description='The name of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node name.

This parameter is required.', example='Spark-test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskNameResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='C4604178-3BE1-5973-ACF0-7D561AEEF3A8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskName  UpdateTaskNameRequest
  * @return UpdateTaskNameResponse
 */
async function updateTaskName(request: UpdateTaskNameRequest): UpdateTaskNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskOutputRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The ID of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='14059', position='Query'),
  nodeOutput?: string(name='NodeOutput', description='The output variables for the task.', example='{“outputs”:[{"row":0, "column":-1,"combiner":","}"extractMethod":"{\\"row\\":0,\\"column\\":-1,\\"combiner\\":\\",\\"}",   "variableName":"var", "description":"For demo" }]}', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskOutputResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='AB524768-8A5F-523A-91BD-1147187FCD62'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskOutputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskOutputResponseBody(name='body'),
}

/**
  * @description Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
  * @param request  the request parameters of UpdateTaskOutput  UpdateTaskOutputRequest
  * @return UpdateTaskOutputResponse
 */
async function updateTaskOutput(request: UpdateTaskOutputRequest): UpdateTaskOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskOutput', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.

This parameter is required.', example='43****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables: string(name='TimeVariables', description='The time variables configured for the node. The value of this parameter must be a JSON string.

This parameter is required.', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}', position='Query'),
}

model UpdateTaskTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskTimeVariablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskTimeVariablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskTimeVariables  UpdateTaskTimeVariablesRequest
  * @return UpdateTaskTimeVariablesResponse
 */
async function updateTaskTimeVariables(request: UpdateTaskTimeVariablesRequest): UpdateTaskTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed each day.', example='1000', position='Query'),
  maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried each day.', example='1000', position='Query'),
  mobile?: string(name='Mobile', description='The DingTalk ID or mobile number of the user.', example='188xxxxxxxx', position='Query'),
  roleNames?: string(name='RoleNames', description='The roles that the user assumes. For more information about the valid values, see the Request parameters section in the [UpdateUser](https://help.aliyun.com/document_detail/465812.html) topic.', example='ADMIN,DBA', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).', example='-1', position='Query'),
  uid: long(name='Uid', description='The Alibaba Cloud unique ID (UID) of the user to update.

This parameter is required.', example='123456789', position='Query'),
  uidString?: string(name='UidString', description='The UID of the String type. If you specify this parameter, the UID of the Long type is replaced.', example='322824****:dmstest.wu@A201***', position='Query'),
  userNick?: string(name='UserNick', description='The nickname of the user.', example='test', position='Query'),
}

model UpdateUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', description='Indicates whether the request succeeded.', example='false'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUser  UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWorkspaceRequest {
  clientToken?: string(name='ClientToken', example='token-xxx', position='Body'),
  description?: string(name='Description', example='test', minLength=1, position='Query'),
  workspaceId: long(name='WorkspaceId', description='This parameter is required.', example='12****', position='Query'),
  workspaceName?: string(name='WorkspaceName', example='workspace_xxx', minLength=1, position='Query'),
}

model UpdateWorkspaceResponseBody = {
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='C51420E3-144A-4A94-B473-8662FCF4****'),
  success?: string(name='Success', example='true'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspace  UpdateWorkspaceRequest
  * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkspace', 'POST', '/', 'json', true, 'form', request);
}

