/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dms-enterprise';
  @version = '2018-11-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AsyncTaskVO {
  datasetId?: string(name='DatasetId', description='数据集id'),
  id?: long(name='Id', description='任务id'),
  remark?: string(name='Remark', description='任务记录'),
  taskName?: string(name='TaskName', description='任务名'),
  taskStatus?: int32(name='TaskStatus', description='任务状态(0=开始;1=读取成功;2=任务成功;-1=任务失败)'),
  taskType?: int32(name='TaskType', description='任务类型(0=上传;1=下载)'),
  userId?: long(name='UserId', description='用户id'),
}

model DatasetItemVO {
  asyncTaskList?: [
    AsyncTaskVO
  ](name='AsyncTaskList', description='关联etl任务'),
  datasetStatus?: int32(name='DatasetStatus', description='是否完成上传/融合计算（0否 1是）'),
  datasetType?: int32(name='DatasetType', description='类型（0上传 1融合计算）'),
  digest?: string(name='Digest', description='摘要信息'),
  fileSystem?: string(name='FileSystem', description='存储系统类型'),
  id?: string(name='Id', description='id值'),
  keyName?: string(name='KeyName', description='encdb.encdb_internal_scm_table.keyname'),
  moreInfo?: string(name='MoreInfo', description='其他数据集信息Json格式'),
  path?: string(name='Path', description='路径'),
  projectsLinked?: [
    ProjectDetailsLiteVO
  ](name='ProjectsLinked', description='关联项目'),
  recentTaskStatus?: int32(name='RecentTaskStatus', description='最近任务状态(0开始 1连接oos成功 2任务完成 -1失败 -2无任务)'),
  remark?: string(name='Remark', description='描述'),
  schema?: string(name='Schema', description='元数据信息'),
  tableName?: string(name='TableName', description='表名'),
  url?: string(name='Url', description='存储系统地址'),
}

model GetTableDataKeyVO {
  colName?: string(name='ColName', description='数据库表特定列名'),
  dbName?: string(name='DbName', description='数据库名'),
  mekId?: long(name='MekId', description='用户 mek 对应的密钥仓库 Id'),
  schemaName?: string(name='SchemaName', description='数据库 schema 名'),
  tblName?: string(name='TblName', description='数据库表名。密态数据集中使用 dataset_id'),
  userName?: string(name='UserName', description='用户名'),
}

model ImportMasterKeyVO {
  encryptMekDataBase64?: string(name='EncryptMekDataBase64', description='加密的主密钥base64信封格式'),
  mekId?: long(name='MekId', description='主密钥 id'),
  projectId?: [ long ](name='ProjectId', description='可以使用该主密钥的项目列表'),
}

model ProjectDetailsLiteVO {
  id?: long(name='Id', description='id'),
  projectName?: string(name='ProjectName', description='项目名'),
}

model StsApplyVO {
  aliyunId?: string(name='AliyunId', description='阿里云id'),
  duration?: long(name='Duration', description='持续时间'),
}

model StsTokenVO {
  accessKeyId?: string(name='AccessKeyId', description='临时AK'),
  accessKeySecret?: string(name='AccessKeySecret', description='临时SK'),
  expiration?: string(name='Expiration', description='过期时间'),
  securityToken?: string(name='SecurityToken', description='临时Token'),
}

model TeeEvidenceVO {
  cipherSuite?: string(name='CipherSuite', description='cipherSuite'),
  enclaveData?: string(name='EnclaveData', description='enclaveData'),
  encryptPublicKeyPem?: string(name='EncryptPublicKeyPem', description='公钥pem格式数据'),
  encryptPublicKeyType?: string(name='EncryptPublicKeyType', description='加密类型'),
  modifiedDate?: string(name='ModifiedDate', description='modifiedDate'),
  publicKey?: string(name='PublicKey', description='publicKey'),
  publicKeyRaBase64?: string(name='PublicKeyRaBase64', description='校验数据'),
  publicKeyRaType?: string(name='PublicKeyRaType', description='RA 校验类型'),
  quoteReport?: string(name='QuoteReport', description='quoteReport'),
  signPublicKeyPem?: string(name='SignPublicKeyPem', description='签名pem格式数据'),
  signPublicKeyType?: string(name='SignPublicKeyType', description='签名类型'),
  trustedMrEnclave?: [ string ](name='TrustedMrEnclave', description='trustedMrEnclave'),
}

model UsersDetailsVO {
  approvalSignatureBase64?: string(name='ApprovalSignatureBase64', description='审批签名信息'),
  approvalSqlTemplate?: string(name='ApprovalSqlTemplate', description='审批过的sql模板'),
  approvalStatus?: string(name='ApprovalStatus', description='是否完成了审批'),
  creator?: int32(name='Creator', description='是否为项目创建者'),
  dataReady?: int32(name='DataReady', description='是否绑定完数据'),
  id?: long(name='Id', description='用户id'),
  mekid?: long(name='Mekid', description='mekid'),
  pathPrefix?: string(name='PathPrefix', description='存储空间路径'),
  resultParty?: int32(name='ResultParty', description='是否为结果方'),
  uid?: string(name='Uid', description='uid'),
  userConfirmed?: int32(name='UserConfirmed', description='是否验证过项目同意加入'),
  userName?: string(name='UserName', description='用户名'),
  userPublicKeyPem?: string(name='UserPublicKeyPem', description='公钥'),
}

model AddDesensitizationRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  functionParams?: [ map[string]string ](name='FunctionParams', position='Body'),
  functionType: string(name='FunctionType', description='The name of the rule.', example='MD5', position='Query'),
  ruleDescription?: string(name='RuleDescription', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', position='Query'),
  ruleName: string(name='RuleName', description='The operation that you want to perform. Set the value to **AddDesensitizationRule**.', position='Query'),
  ruleType: string(name='RuleType', description='The error message returned if the request failed.', example='HASH', position='Query'),
  tid?: long(name='Tid', description='The ID generated for the masking rule.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddDesensitizationRuleResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the request.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The type of the masking algorithm.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  ruleId?: int32(name='RuleId', example='35***'),
  success?: boolean(name='Success', example='true'),
}

model AddDesensitizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddDesensitizationRuleResponseBody(name='body'),
}

async function addDesensitizationRule(request: AddDesensitizationRuleRequest): AddDesensitizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDesensitizationRule', 'POST', '/', 'json', true, 'form', request);
}

model AddLhMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  members: [ 
    {
      roles: [ string ](name='Roles'),
      userId: long(name='UserId', description='The ID of the request.', example='15****'),
    }
  ](name='Members', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', shrink='json', position='Query'),
  objectId: long(name='ObjectId', description='The ID of the user to be added. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.', example='1', position='Query'),
  objectType: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow', example='0', position='Query'),
  tid?: long(name='Tid', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', example='true'),
}

model AddLhMembersResponse = {
  headers: map[string]string(name='headers'),
  body: AddLhMembersResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **AddLhMembers**.
  *
 */
async function addLhMembers(request: AddLhMembersRequest): AddLhMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLhMembers', 'POST', '/', 'json', false, 'json', request);
}

model AddLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  routeExpr: string(name='RouteExpr', description='The ID of the request.', example='#id#%16', position='Query'),
  routeKey: string(name='RouteKey', description='The error code returned.', example='id-hash-mod16', position='Query'),
  tableId: long(name='TableId', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='4****', position='Query'),
  tid?: long(name='Tid', description='Adds a routing algorithm to a logical table.', example='4***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='WB01220210', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='can not find table, tableId : 11133'),
  requestId?: string(name='RequestId', description='AddLogicTableRouteConfig', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', example='true'),
}

model AddLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLogicTableRouteConfigResponseBody(name='body'),
}

async function addLogicTableRouteConfig(request: AddLogicTableRouteConfigRequest): AddLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model AddTaskFlowEdgesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***', position='Query'),
  edges: [ 
    {
      nodeEnd: long(name='NodeEnd', description='The error code returned if the request failed.', example='44***'),
      nodeFrom: long(name='NodeFrom', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='44***'),
    }
  ](name='Edges', description='The list of edges of the task flow.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model AddTaskFlowEdgesResponseBody = {
  edgeIds?: {
    edgeId?: [ long ](name='EdgeId')
  }(name='EdgeIds'),
  errorCode?: string(name='ErrorCode', description='AddTaskFlowEdges', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Adds directed edges for an existing task node.', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  success?: boolean(name='Success', example='true'),
}

model AddTaskFlowEdgesResponse = {
  headers: map[string]string(name='headers'),
  body: AddTaskFlowEdgesResponseBody(name='body'),
}

/**
  * The ID of the node where the end node of the edge is located.
  *
 */
async function addTaskFlowEdges(request: AddTaskFlowEdgesRequest): AddTaskFlowEdgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTaskFlowEdges', 'POST', '/', 'json', false, 'json', request);
}

model ApproveOrderRequest {
  regionId?: string(name='RegionId', description='The description of the ticket.', example='cn-hangzhou', position='Host'),
  approvalType: string(name='ApprovalType', description='The ID of the region in which you want to call this operation.', example='agree', position='Query'),
  comment?: string(name='Comment', description='The ID of the request.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the approval process. You can call the [GetOrderBaseInfo](~~144642~~) operation to obtain the ID of the approval process.', example='-1', position='Query'),
  workflowInstanceId: long(name='WorkflowInstanceId', description='The action that you want to perform on the ticket. Valid values:

*   AGREE: approve
*   CANCEL: cancel
*   REJECT: reject', example='1234', minimum=1, position='Query'),
}

model ApproveOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The error message returned.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model ApproveOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveOrderResponseBody(name='body'),
}

async function approveOrder(request: ApproveOrderRequest): ApproveOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOrder', 'POST', '/', 'json', false, 'json', request);
}

model BackFillRequest {
  regionId?: string(name='RegionId', position='Host'),
  asc?: boolean(name='Asc', description='The ID of the request.', example='0', position='Query'),
  backFillDate?: string(name='BackFillDate', description='The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-01-14', position='Query'),
  backFillDateBegin?: string(name='BackFillDateBegin', description='The running sequence of task flows for data backfill. Valid values:

*   **0**: reverse chronological order.
*   **1**: chronological order. This is the default value.', example='2022-01-14', position='Query'),
  backFillDateEnd?: string(name='BackFillDateEnd', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='2022-09-29', position='Query'),
  dagId: long(name='DagId', description='The operation that you want to perform. Set the value to **BackFill**.', example='15***', position='Query'),
  historyDagId?: long(name='HistoryDagId', description='The BackFillDate parameter is required if you specify a date for data backfill.

The BackFillDateBegin and BackFillDateEnd parameters are required if you specify a date range for data backfill.', example='16***', position='Query'),
  interval?: int32(name='Interval', description='Specifies whether to run descendant nodes. Default value: true.', example='24', minimum=1, position='Query'),
  isTriggerSubTree?: boolean(name='IsTriggerSubTree', description='The error message returned if the request failed.', example='true', position='Query'),
  startNodeIds?: [ long ](name='StartNodeIds', description='The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model BackFillResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  nodeId?: long(name='NodeId', example='43****'),
  requestId?: string(name='RequestId', description='Backfills data for task orchestration.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model BackFillResponse = {
  headers: map[string]string(name='headers'),
  body: BackFillResponseBody(name='body'),
}

/**
  * The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.
  *
 */
async function backFill(request: BackFillRequest): BackFillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BackFill', 'POST', '/', 'json', false, 'json', request);
}

model BuyPayAsYouGoOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  commodityType: string(name='CommodityType', description='The number of database instances that you want to use DMS to manage.

> : A quota can be used for only one database instance.', example='SensitiveDataProtection', position='Query'),
  insNum: int32(name='InsNum', description='The control mode of DMS. Valid values:

*   **stand**: Stable Change
*   **safety**: Security Collaboration', example='7', position='Query'),
  tid?: long(name='Tid', description='The type of the resource that you want to purchase.

*   **VersionType**: DMS that supports control modes
*   **SensitiveDataProtection**: DMS that supports sensitive data protection', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  versionType?: string(name='VersionType', description='The error code returned if the request failed.', example='stand', position='Query'),
}

model BuyPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='Purchases a pay-as-you-go Data Management (DMS) resource.', example='UnknownError'),
  instanceId?: string(name='InstanceId', description='购买成功后，返回购买的订单实例ID', example='dms_pre_public_cn-nif23l****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='If the purchase is successful, the ID of the purchased instance is returned.', example='true'),
}

model BuyPayAsYouGoOrderResponse = {
  headers: map[string]string(name='headers'),
  body: BuyPayAsYouGoOrderResponseBody(name='body'),
}

async function buyPayAsYouGoOrder(request: BuyPayAsYouGoOrderRequest): BuyPayAsYouGoOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BuyPayAsYouGoOrder', 'POST', '/', 'json', false, 'json', request);
}

model ChangeColumnSecLevelRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the field.

> You can also call the [ListColumns](~~141870~~) operation to obtain the name of the field.', example='test_column', position='Query'),
  dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](~~141876~~) operation to obtain the ID of the database.

> You can also call the [ListDatabases](~~141873~~) operation to obtain the ID of a physical database and the [ListLogicDatabases](~~141874~~) operation to obtain the ID of a logical database.', example='325', position='Query'),
  isLogic: boolean(name='IsLogic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a physical database.
*   false: The database is a logical database.', example='false', position='Query'),
  newLevel: string(name='NewLevel', description='The new sensitivity level of the field that you want to specify. Valid values:

*   INNER: low sensitivity level
*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level', example='SENSITIVE', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the database.

*   You can also call the [SearchDatabase](~~141876~~) operation to obtain the name of the database.
*   You can also call the [ListDatabases](~~141873~~) operation to obtain the name of a physical database and the [ListLogicDatabases](~~141874~~) operation to obtain the name of a logical database.', example='test_schema', position='Query'),
  tableName: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the table.

> You can also call the [ListTables](~~141878~~) operation to obtain the name of the table.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='43253', position='Query'),
}

model ChangeColumnSecLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='false'),
}

model ChangeColumnSecLevelResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeColumnSecLevelResponseBody(name='body'),
}

async function changeColumnSecLevel(request: ChangeColumnSecLevelRequest): ChangeColumnSecLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeColumnSecLevel', 'POST', '/', 'json', false, 'json', request);
}

model ChangeLhDagOwnerRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the request.', example='9***', position='Query'),
  ownerUserId: long(name='OwnerUserId', description='The operation that you want to perform. Set the value to **ChangeLhDagOwner**.', example='50****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ChangeLhDagOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='9997630E-1993-5E6D-9DF1-4EFEE755FE31'),
  success?: boolean(name='Success', example='true'),
}

model ChangeLhDagOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeLhDagOwnerResponseBody(name='body'),
}

/**
  * The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.
  *
 */
async function changeLhDagOwner(request: ChangeLhDagOwnerRequest): ChangeLhDagOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeLhDagOwner', 'POST', '/', 'json', false, 'json', request);
}

model CloseOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  closeReason: string(name='CloseReason', description='The reason why the ticket is closed.', example='close reason', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='1343', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model CloseOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CloseOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CloseOrderResponseBody(name='body'),
}

async function closeOrder(request: CloseOrderRequest): CloseOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.', position='Query'),
  name: string(name='Name', description='The name of the permission template.', example='Test template.', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model CreateAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    createTime?: string(name='CreateTime', description='The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.', example='2023-01-11 14:17:33'),
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='Test template.'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateAuthorityTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthorityTemplateResponseBody(name='body'),
}

/**
  * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function createAuthorityTemplate(request: CreateAuthorityTemplateRequest): CreateAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataCorrectOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The ID of the ticket.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='test', position='Query'),
  param: {
    attachmentName?: string(name='AttachmentName', description='The format of the SQL statements used to change data. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='test.sql'),
    classify?: string(name='Classify', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='test'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The key of the attachment that contains the SQL statements used to change data. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.

>  This parameter is required if you set the **SqlType** parameter to **ATTACHMENT**.', example='1860****'),
        logic: boolean(name='Logic', description='The SQL statements used to roll back the data change.

> 
*   This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.', example='false'),
      }
    ](name='DbItemList', description='The error message returned if the request fails.'),
    estimateAffectRows: long(name='EstimateAffectRows', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1'),
    execMode?: string(name='ExecMode', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='COMMITOR'),
    execSQL?: string(name='ExecSQL', description='The execution mode of the ticket after the ticket is approved. Valid values:

*   **COMMITOR**: The data change is performed by the user who submits the ticket.
*   **AUTO**: The data change is automatically performed after the ticket is approved.
*   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='update base_user set id = 1 where id  = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The parameters of the ticket.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', example='update base_user set id = 1 where id  = 1;'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='TEXT'),
    sqlType: string(name='SqlType', description='The SQL statements that you want to execute to change data.

>  This parameter is required if you set the **SqlType** parameter to **TEXT**.', example='TEXT'),
  }(name='Param', description='The databases in which you want to change data.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The estimated number of data rows to be affected by the data change.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='Creates a ticket for changing data in Data Management (DMS).', example='UnknownError'),
  requestId?: string(name='RequestId', description='The reason for the data change.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model CreateDataCorrectOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCorrectOrderResponseBody(name='body'),
}

/**
  * The error code returned if the request fails.
  *
 */
async function createDataCorrectOrder(request: CreateDataCorrectOrderRequest): CreateDataCorrectOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataCorrectOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataCronClearOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The ID of the ticket.', example='order_attachement.txt', position='Query'),
  comment: string(name='Comment', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='test', position='Query'),
  param: {
    classify?: string(name='Classify', description='The purpose or objective of the data change. This reduces unnecessary communication.', example='test'),
    cronClearItemList: [ 
      {
        columnName: string(name='ColumnName', description='The amount of time taken to run the task. Unit: hours.

>  If the **specifyDuration** parameter is set to **true**, this parameter is required.', example='gmt_create'),
        filterSQL?: string(name='FilterSQL', description='The retention period of the historical data. Unit: days. For example, if you set the parameter to 7, DMS deletes the data that is retained for more than seven days.', example='where 1 = 1'),
        remainDays: long(name='RemainDays', description='The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](~~206581~~).', example='7'),
        tableName: string(name='TableName', description='The parameters of the ticket.', example='t1'),
        timeUnit?: string(name='TimeUnit', description='The error message.', example='MILLISECONDS'),
      }
    ](name='CronClearItemList', description='The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
    cronFormat: string(name='CronFormat', description='The name of the field.', example='0 0 2 * * ?'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The type of time granularity. If the ColumnName parameter specifies a field of a time type, this parameter is required. Valid values:

*   **MILLISECONDS**: milliseconds
*   **SECONDS**: seconds', example='1234'),
        logic: boolean(name='Logic', description='The tables for which you want to clear historical data.', example='false'),
      }
    ](name='DbItemList', description='The ID of the database. You can call the [SearchDatabases](~~141876~~) operation to query the ID of the database.'),
    durationHour?: long(name='DurationHour', description='The key of the attachment for the ticket. The attachment provides more instructions for this operation.

You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='4'),
    specifyDuration: boolean(name='specifyDuration', description='The name of the table. You can call the [ListTables](~~141878~~) operation to query the name of the table.', example='true'),
  }(name='Param', description='The databases for which you want to clear historical data.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The ID of the tenant.

>  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](~~181330~~) section of the Manage DMS tenants topic.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The reason for the data change.', example='123454324', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataCronClearOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Specifies whether to specify an end time for the task. Valid values:

*   **true**: specifies an end time for the task. The task is automatically suspended after this end time.
*   **false**: does not specify an end time for the task. The task is stopped after the historical data is cleared.', example='true'),
}

model CreateDataCronClearOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCronClearOrderResponseBody(name='body'),
}

/**
  * The error code.
  *
 */
async function createDataCronClearOrder(request: CreateDataCronClearOrderRequest): CreateDataCronClearOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataCronClearOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataExportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', position='Query'),
  parentId?: long(name='ParentId', example='877****', position='Query'),
  pluginParam: {
    affectRows: long(name='AffectRows', example='1'),
    classify: string(name='Classify'),
    dbId: long(name='DbId', example='18****'),
    exeSQL: string(name='ExeSQL', example='SELECT * FROM DMS_test
 LIMIT 20;'),
    ignoreAffectRows: boolean(name='IgnoreAffectRows', example='true'),
    ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason'),
    instanceId: long(name='InstanceId', example='132****'),
    logic: boolean(name='Logic', example='true'),
    watermark?: {
      columnName?: string(name='ColumnName', example='user_number'),
      dataWatermark?: string(name='DataWatermark'),
      fileWatermark?: string(name='FileWatermark'),
      keys?: [ string ](name='Keys'),
      watermarkTypes?: [ string ](name='WatermarkTypes'),
    }(name='Watermark'),
  }(name='PluginParam', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model CreateDataExportOrderResponseBody = {
  createOrderResult?: {
    createOrderResult?: [ long ](name='CreateOrderResult')
  }(name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataExportOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataExportOrderResponseBody(name='body'),
}

async function createDataExportOrder(request: CreateDataExportOrderRequest): CreateDataExportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataExportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataImportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The operation that you want to perform. Set the value to CreateDataImportOrder.', example='test', position='Query'),
  param: {
    attachmentName: string(name='AttachmentName', description='The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.', example='order_text'),
    classify?: string(name='Classify', description='The database to which you want to import data. You can specify only one database.', example='test'),
    csvFirstRowIsColumnDef?: boolean(name='CsvFirstRowIsColumnDef', description='The format of the SQL statements used to roll back the data import. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='true'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
        logic: boolean(name='Logic', description='The mode in which the data in the CSV format is to be written to the destination table. Valid values:

*   **INSERT**: The database checks the primary key when data is written. If a duplicate primary key value exists, an error message is returned.
*   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
*   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as one row in the destination table, the database deletes the existing row and inserts the new row into the destination table.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='false'),
      }
    ](name='DbItemList', description='The format of the file for the data import. Valid values:

*   **SQL**: an SQL file
*   **CSV**: a CSV file'),
    fileEncoding?: string(name='FileEncoding', description='The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', example='AUTO'),
    fileType: string(name='FileType', description='The import mode. Valid values:

*   **FAST_MODE**: In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
*   **SAFE_MODE**: In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. This mode can be used to import data in a more secure but less efficient manner.', example='CSV'),
    ignoreError?: boolean(name='IgnoreError', description='The error message returned if the request fails.', example='false'),
    importMode?: string(name='ImportMode', description='The key of the attachment that contains the SQL statements used to import data. You can call the [GetUserUploadFileJob](~~206069~~) operation to the attachment key from the value of the AttachmentKey parameter.', example='FAST_MODE'),
    insertType?: string(name='InsertType', description='The parameters of the ticket.', example='INSERT'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The SQL statements used to roll back the data import.

>  This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.', example='rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The destination table to which you want to import the data in the CSV format.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The encoding algorithm to be used by the destination database. Valid values:

*   **AUTO**: automatic identification
*   **UTF-8**: UTF-8 encoding
*   **GBK**: GBK encoding
*   **ISO-8859-1**: ISO-8859-1 encoding', example='TEXT'),
    tableName?: string(name='TableName', description='Specifies whether to skip an error that occurs. Valid values:

*   **true**: skips the error and continues to execute SQL statements.
*   **false**: stops executing SQL statements.', example='Table_text'),
  }(name='Param', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

>  If you set this parameter to **true**, the database that you specify must be a logical database.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the ticket.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataImportOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The reason for the data import.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model CreateDataImportOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataImportOrderResponseBody(name='body'),
}

/**
  * The key of the attachment that contains the SQL statements used to roll back the data import. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.
  * >  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.
  *
 */
async function createDataImportOrder(request: CreateDataImportOrderRequest): CreateDataImportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataImportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataTrackOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', position='Query'),
  param: {
    dbId: string(name='DbId', example='123***'),
    jobEndTime: string(name='JobEndTime', example='2023-04-23 10:00:00'),
    jobStartTime: string(name='JobStartTime', example='2023-04-23 00:00:00'),
    tableNames: [ string ](name='TableNames'),
    trackTypes: [ string ](name='TrackTypes'),
  }(name='Param', shrink='json', position='Query'),
  relatedUserList?: [ string ](name='RelatedUserList', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateDataTrackOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataTrackOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataTrackOrderResponseBody(name='body'),
}

async function createDataTrackOrder(request: CreateDataTrackOrderRequest): CreateDataTrackOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataTrackOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseExportOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', position='Query'),
  parentId?: long(name='ParentId', example='877****', position='Query'),
  pluginParam: {
    classify: string(name='Classify'),
    config: {
      dataOption: [ string ](name='DataOption'),
      exportContent: string(name='ExportContent', example='DATA'),
      exportTypes?: [ string ](name='ExportTypes'),
      SQLExtOption: [ string ](name='SQLExtOption'),
      selectedTables?: [ string ](name='SelectedTables'),
      tables?: map[string]string(name='Tables'),
      targetOption: string(name='TargetOption', example='SQL'),
    }(name='Config'),
    dbId: long(name='DbId', example='17****'),
    instanceId: long(name='InstanceId', example='137****'),
    logic: boolean(name='Logic', example='true'),
    searchName: string(name='SearchName', example='test@xxx.xxx.xxx.xxx:3306'),
  }(name='PluginParam', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model CreateDatabaseExportOrderResponseBody = {
  createOrderResult?: {
    createOrderResult?: [ long ](name='CreateOrderResult')
  }(name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model CreateDatabaseExportOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseExportOrderResponseBody(name='body'),
}

async function createDatabaseExportOrder(request: CreateDatabaseExportOrderRequest): CreateDatabaseExportOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabaseExportOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateFreeLockCorrectOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt', position='Query'),
  comment: string(name='Comment', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', example='test', position='Query'),
  param: {
    attachmentName?: string(name='AttachmentName', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='test.sql'),
    classify?: string(name='Classify', description='The error code returned if the request fails.', example='test'),
    dbItemList: [ 
      {
        dbId: long(name='DbId', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='1860****'),
        logic: boolean(name='Logic', description='The SQL statements used to roll back the data change.', example='false'),
      }
    ](name='DbItemList', description='The key of the attachment that contains the SQL statements used to change data. This parameter is not supported.'),
    execMode?: string(name='ExecMode', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='COMMITOR'),
    execSQL: string(name='ExecSQL', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment. This value is not supported.', example='delete from base_user where 1 = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The error message returned if the request fails.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The databases in which you want to change data.', example='TEXT'),
    sqlType: string(name='SqlType', description='The operation that you want to perform. Set the value to CreateFreeLockCorrectOrder.', example='TEXT'),
  }(name='Param', description='The key of the attachment that contains the SQL statements used to roll back the data change.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The parameters of the ticket.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the ticket.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateFreeLockCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The execution mode of the ticket after the ticket is approved. Valid values:

*   **COMMITOR**: The data change is performed by the user who submits the ticket.
*   **AUTO**: The data change is automatically performed after the ticket is approved.
*   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='The reason for the data change.', example='true'),
}

model CreateFreeLockCorrectOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFreeLockCorrectOrderResponseBody(name='body'),
}

/**
  * The SQL statements that you want to execute to change data.
  *
 */
async function createFreeLockCorrectOrder(request: CreateFreeLockCorrectOrderRequest): CreateFreeLockCorrectOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFreeLockCorrectOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateLakeHouseSpaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the workspace.', example='test', position='Query'),
  devDbId: string(name='DevDbId', description='The ID of the development database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID.', example='2435****', position='Query'),
  dwDbType: string(name='DwDbType', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL', example='14', position='Query'),
  mode: string(name='Mode', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode. This mode is unavailable.
*   **1**: standard mode.', example='1', position='Query'),
  prodDbId?: string(name='ProdDbId', description='The ID of the production database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID.', example='2442****', position='Query'),
  spaceConfig: string(name='SpaceConfig', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}', position='Query'),
  spaceName: string(name='SpaceName', description='The name of the workspace.', example='test_space', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='Invalid parameters: space name,mode,prod db id,db type,config.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='24'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateLakeHouseSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLakeHouseSpaceResponseBody(name='body'),
}

/**
  * *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
  * *   You can call the [GetLhSpaceByName](~~424379~~) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
  *
 */
async function createLakeHouseSpace(request: CreateLakeHouseSpaceRequest): CreateLakeHouseSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLakeHouseSpace', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  alias: string(name='Alias', example='test_logic_db', position='Query'),
  databaseIds: [ long ](name='DatabaseIds', shrink='json', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  logicDbId?: long(name='LogicDbId', example='1***'),
  requestId?: string(name='RequestId', description='Id of the request', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model CreateLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLogicDatabaseResponseBody(name='body'),
}

async function createLogicDatabase(request: CreateLogicDatabaseRequest): CreateLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', description='test_AttachmentKey', example='test_AttachmentKey', position='Query'),
  comment: string(name='Comment', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='test', position='Query'),
  pluginParam: map[string]any(name='PluginParam', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='{PluginParam_test}', shrink='json', position='Body'),
  pluginType: string(name='PluginType', description='The ID of the ticket.', example='DATA_EXPORT', position='Query'),
  relatedUserList?: string(name='RelatedUserList', description='The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).', example='user1,user2', position='Query'),
  tid?: long(name='Tid', description='The error message.', example='3***', position='Query'),
}

model CreateOrderResponseBody = {
  createOrderResult?: {
    orderIds?: [ long ](name='OrderIds')
  }(name='CreateOrderResult', description='The ID of the request.'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='## PluginParam parameter

```

# Change a schema design.
 {
    "title": "test", // The name of the ticket.
    "description": "test", // The description of the ticket.
    "dbId": 11****, // The database to which changes are made.
    "logic": false, // Specifies whether the database is a logical database.
    "relatedIds": [], // The IDs of the stakeholders that are involved in the ticket.
  }

# Export data.
 {
  "classify": "Reason", // The purpose of the ticket.
  "dbId": 17****, // The ID of the database from which data is exported.
  "exeSQL": "select 1", // The SQL statement that is executed to export data.
  "logic": false, // Specifies whether the database is a logical database.
  "ignoreAffectRows": false, // Specifies whether to ignore the affected rows.
  "affectRows": 1, // The estimated number of affected rows.
  "ignoreAffectRowsReason": "" // The reason for ignoring the affected rows.
 }

If you need to create more types of tickets, submit a ticket for consultation. 
```', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6****'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

/**
  * The error code.
  *
 */
async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrder', 'POST', '/', 'json', true, 'form', request);
}

model CreateProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: long(name='InstanceId', example='183****', position='Query'),
  password: string(name='Password', example='******', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  username: string(name='Username', example='username', position='Query'),
}

model CreateProxyResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage'),
  proxyId?: long(name='ProxyId', example='4**'),
  requestId?: string(name='RequestId', description='Id of the request', example='4FFD154E-F57F-5374-B568-D6276F15****'),
  success?: boolean(name='Success', example='true'),
}

model CreateProxyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProxyResponseBody(name='body'),
}

async function createProxy(request: CreateProxyRequest): CreateProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProxy', 'POST', '/', 'json', false, 'json', request);
}

model CreateProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  indepAccount?: string(name='IndepAccount', example='xxx', position='Query'),
  indepPassword?: string(name='IndepPassword', example='xxx', position='Query'),
  proxyId: long(name='ProxyId', example='1', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  userId: long(name='UserId', example='1', position='Query'),
}

model CreateProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  proxyAccessId?: long(name='ProxyAccessId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model CreateProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProxyAccessResponseBody(name='body'),
}

async function createProxyAccess(request: CreateProxyAccessRequest): CreateProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model CreatePublishGroupTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='The ID of the database for which the schema design is executed.', example='12345', position='Query'),
  logic: boolean(name='Logic', description='Indicates whether the database is a logical database.', example='false', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.

> : You can create a schema design ticket in the DMS console. For more information, see [Design schemas](~~69711~~). You can also create a schema design ticket by calling the [CreateOrder](~~144649~~) operation and obtain the ticket ID.', example='142435', position='Query'),
  planTime?: string(name='PlanTime', description='The time to execute the schema design ticket.', example='2019-10-10 00:00:00', position='Query'),
  publishStrategy: string(name='PublishStrategy', description='The policy to execute the schema design ticket. Valid values:

*   IMMEDIATELY: immediately executes the schema design ticket.
*   REGULARLY: executes the schema design ticket at a scheduled time.', example='IMMEDIATELY', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model CreatePublishGroupTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  taskId?: long(name='TaskId', description='The ID of the job.', example='413452'),
}

model CreatePublishGroupTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePublishGroupTaskResponseBody(name='body'),
}

async function createPublishGroupTask(request: CreatePublishGroupTaskRequest): CreatePublishGroupTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublishGroupTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSQLReviewOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment: string(name='Comment', description='The purpose or objective of the SQL review. This reduces unnecessary communication.', example='test', position='Query'),
  param: {
    attachmentKeyList: [ string ](name='AttachmentKeyList', description='The files to be reviewed. Multiple files can be reviewed at a time.'),
    dbId: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](~~141876~~) operation to query the ID of the database.

>  You can call this operation to query only physical databases. This operation is unavailable to query logical databases.', example='123321'),
    projectName: string(name='ProjectName', description='The name of the project.', example='SQL review for xxx'),
  }(name='Param', description='The parameters of the ticket.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders involved in this operation. All the specified stakeholders can view the ticket details and take part in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateSQLReviewOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The result of the ticket creation task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateSQLReviewOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSQLReviewOrderResponseBody(name='body'),
}

/**
  * For more information about the SQL review feature, see [SQL review](~~60374~~).
  *
 */
async function createSQLReviewOrder(request: CreateSQLReviewOrderRequest): CreateSQLReviewOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSQLReviewOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='test', position='Query'),
  scenarioName: string(name='ScenarioName', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  scenarioId?: long(name='ScenarioId', example='36***'),
  success?: boolean(name='Success', example='true'),
}

model CreateScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScenarioResponseBody(name='body'),
}

async function createScenario(request: CreateScenarioRequest): CreateScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScenario', 'POST', '/', 'json', false, 'json', request);
}

model CreateStandardGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType: string(name='DbType', description='The created security rule set.', example='mysql', position='Query'),
  description: string(name='Description', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', position='Query'),
  groupName: string(name='GroupName', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request fails.', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', description='The name of the security rule set.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='xxx'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **CreateStandardGroup**.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroup?: {
    dbType?: string(name='DbType', example='mysql'),
    description?: string(name='Description', description='The ID of the request.'),
    groupMode?: string(name='GroupMode', example='COMMON'),
    groupName?: string(name='GroupName', description='The ID of the tenant.'),
    lastMenderId?: long(name='LastMenderId', example='51****'),
  }(name='StandardGroup', description='The name of the security rule set.'),
  success?: boolean(name='Success', description='The error message returned if the request fails.', example='true'),
}

model CreateStandardGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStandardGroupResponseBody(name='body'),
}

async function createStandardGroup(request: CreateStandardGroupRequest): CreateStandardGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStandardGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateStructSyncOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachmentKey?: string(name='AttachmentKey', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql', position='Query'),
  comment: string(name='Comment', description='Specifies whether to skip an error that occurs in executing an SQL statement. Valid values:

*   **true**: continues to execute subsequent SQL statements if an error occurs in executing an SQL statement.
*   **false**: stops executing subsequent SQL statements if an error occurs in executing an SQL statement.', example='test', position='Query'),
  param: {
    ignoreError?: boolean(name='IgnoreError', example='false'),
    source: {
      dbId: long(name='DbId', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='4324532'),
      dbSearchName: string(name='DbSearchName', description='The ID of the tenant.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see [Manage DMS tenants](~~181330~~).', example='test'),
      logic?: boolean(name='Logic', description='The schema of the response.', example='false'),
      versionId?: string(name='VersionId', description='The ID of the request.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Source', description='The name of the destination table.'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', example='test_tbl'),
      }
    ](name='TableInfoList'),
    target: {
      dbId: long(name='DbId', description='The error message.', example='432432'),
      dbSearchName: string(name='DbSearchName', description='The error code.', example='test'),
      logic?: boolean(name='Logic', description='The result of creating the ticket.', example='false'),
      versionId?: string(name='VersionId', description='The ID of the ticket.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Target', description='Indicates whether the request is successful.'),
  }(name='Param', description='The name of the source table.', shrink='json', position='Query'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The information about the table of which you want to synchronize the schema.', shrink='json', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateStructSyncOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model CreateStructSyncOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStructSyncOrderResponseBody(name='body'),
}

async function createStructSyncOrder(request: CreateStructSyncOrderRequest): CreateStructSyncOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStructSyncOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='7***', position='Query'),
  graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='test', position='Query'),
  nodeContent?: string(name='NodeContent', description='The configuration of the node.', example='test', position='Query'),
  nodeName: string(name='NodeName', description='The name of the node that you want to create.', example='zhttest', position='Query'),
  nodeOutput?: string(name='NodeOutput', description='The output variables configured for the task.', example='test', position='Query'),
  nodeType: string(name='NodeType', description='The type of the node that you want to create. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='36', position='Query'),
  tid?: long(name='Tid', description='The tenant ID.

>  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.', example='test', position='Query'),
}

model CreateTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='InvalidParameterValid'),
  nodeId?: long(name='NodeId', description='The ID of the task node returned when the task was created.', example='3***'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagName: string(name='DagName', example='Dag_Name', position='Query'),
  description?: string(name='Description', example='zht_test', position='Query'),
  scenarioId?: long(name='ScenarioId', example='2**', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model CreateTaskFlowResponseBody = {
  dagId?: long(name='DagId', example='33***'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='User can not access to Tenant [1]'),
  requestId?: string(name='RequestId', example='19DA51A9-AC3E-5C36-8351-07EBCD2B89A1'),
  success?: boolean(name='Success', example='true'),
}

model CreateTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskFlowResponseBody(name='body'),
}

async function createTaskFlow(request: CreateTaskFlowRequest): CreateTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', description='The name of the attachment file.

>  The file name must end with .txt or .sql. For example, the file name can be test.txt or test.sql.', example='test.txt', position='Query'),
  fileSource: string(name='FileSource', description='The purpose of the attachment file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='datacorrect', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  uploadURL: string(name='UploadURL', description='The URL of the attachment file. The URL must be an HTTP URL or an HTTPS URL.

>  You can upload the attachment file to an Object Storage Service (OSS) bucket and obtain the URL of the file in the OSS console. For more information, see [Share objects](~~195674~~).', example='https://XXX.oss-cn-hangzhou.aliyuncs.com/test.txt', position='Query'),
}

model CreateUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The operation that you want to perform. Set the value to **CreateUploadFileJob**.', example='Unsupported url scheme : null, scheme must be https or http'),
  jobKey?: string(name='JobKey', example='761f18031635736380812****'),
  requestId?: string(name='RequestId', description='The error code returned.', example='E103C5F9-DE47-53F2-BF34-D71DF38F****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model CreateUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadFileJobResponseBody(name='body'),
}

async function createUploadFileJob(request: CreateUploadFileJobRequest): CreateUploadFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadFileJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateUploadOSSFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileName: string(name='FileName', description='The name of the file.

> The file name must end with .txt or .sql. For example, the file name can be text.txt.', example='test.sql', position='Query'),
  fileSource: string(name='FileSource', description='The purpose of the file upload task. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='datacorrect', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
  uploadTarget: {
    bucketName: string(name='BucketName', description='The name of the OSS bucket.', example='test_bucket'),
    endpoint: string(name='Endpoint', description='The endpoint of the OSS bucket.', example='http://oss-cn-hangzhou.aliyuncs.com'),
    objectName: string(name='ObjectName', description='The name of the OSS object.', example='test.sql'),
  }(name='UploadTarget', description='The information about the OSS file to be uploaded.', shrink='json', position='Query'),
}

model CreateUploadOSSFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  jobKey?: string(name='JobKey', description='The key of the file upload task. You can query the upload progress and task details. For more information, see [GetUserUploadFileJob](~~206069~~).', example='65254a4c1614235217749100e'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateUploadOSSFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadOSSFileJobResponseBody(name='body'),
}

async function createUploadOSSFileJob(request: CreateUploadOSSFileJobRequest): CreateUploadOSSFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUploadOSSFileJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The error code that is returned.', example='xxx.mysql.rds.aliyuncs.com', position='Query'),
  port: int32(name='Port', description='The ID of the request.', example='3306', position='Query'),
  sid?: string(name='Sid', description='The operation that you want to perform. Set the value to **DeleteInstance**.', example='testSid', position='Query'),
  tid?: long(name='Tid', description='The system ID (SID) of the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to obtain the SID.', example='3***', position='Query'),
}

model DeleteInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLakeHouseSpaceRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceId: long(name='SpaceId', description='The error code returned if the request fails.', example='24', position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteLakeHouseSpace**.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLakeHouseSpaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLakeHouseSpaceResponseBody(name='body'),
}

async function deleteLakeHouseSpace(request: DeleteLakeHouseSpaceRequest): DeleteLakeHouseSpaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLakeHouseSpace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLhMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  memberIds: [ int32 ](name='MemberIds', description='The operation that you want to perform. Set the value to **DeleteLhMembers**.', shrink='json', position='Query'),
  objectId: long(name='ObjectId', description='The ID of the request.', example='9***', position='Query'),
  objectType: int32(name='ObjectType', description='The error code returned if the request fails.', example='1', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F1C78D32-1AFD-58AD-9DD2-C8A0896969DD'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLhMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLhMembersResponseBody(name='body'),
}

/**
  * The ID of the user to be removed. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.
  *
 */
async function deleteLhMembers(request: DeleteLhMembersRequest): DeleteLhMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLhMembers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  logicDbId: long(name='LogicDbId', example='1***', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLogicDatabaseResponseBody(name='body'),
}

async function deleteLogicDatabase(request: DeleteLogicDatabaseRequest): DeleteLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  routeKey: string(name='RouteKey', example='id-hash-mod15', position='Query'),
  tableId: long(name='TableId', example='1****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='MissingRouteKey'),
  errorMessage?: string(name='ErrorMessage', example='RouteKey is mandatory for this action.'),
  requestId?: string(name='RequestId', example='A916A004-A88C-5B39-ABDB-DE808E80****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLogicTableRouteConfigResponseBody(name='body'),
}

async function deleteLogicTableRouteConfig(request: DeleteLogicTableRouteConfigRequest): DeleteLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', example='1', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteProxyResponseBody = {
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProxyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProxyResponseBody(name='body'),
}

async function deleteProxy(request: DeleteProxyRequest): DeleteProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProxy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', example='1', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProxyAccessResponseBody(name='body'),
}

async function deleteProxyAccess(request: DeleteProxyAccessRequest): DeleteProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  scenarioId: long(name='ScenarioId', description='Deletes a business scenario.', example='12***', position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='12***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScenarioResponseBody(name='body'),
}

/**
  * The error code returned if the request failed.
  *
 */
async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScenario', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The ID of the request.', example='54****', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteTask**.', example='3B460770-40D9-5F07-B68A-173D1D708B72'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTaskResponseBody(name='body'),
}

async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request fails.', example='134137***', position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteTaskFlow**.', example='9AFE13F6-A4FD-581B-BFDE-B63B1CDC2336'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTaskFlowResponseBody(name='body'),
}

async function deleteTaskFlow(request: DeleteTaskFlowRequest): DeleteTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskFlowEdgesByConditionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request failed.', example='15****', position='Query'),
  id?: long(name='Id', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='24***', position='Query'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the end node of the edge to delete.', example='44***', position='Query'),
  nodeFrom?: long(name='NodeFrom', description='The operation that you want to perform. Set the value to **DeleteTaskFlowEdgesByCondition**.', example='44***', position='Query'),
  tid?: long(name='Tid', description='The ID of the start node on the edge to delete.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DeleteTaskFlowEdgesByConditionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='21234B66-6859-5558-9E5B-006EFE915CD0'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTaskFlowEdgesByConditionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.
  *
 */
async function deleteTaskFlowEdgesByCondition(request: DeleteTaskFlowEdgesByConditionRequest): DeleteTaskFlowEdgesByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTaskFlowEdgesByCondition', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', example='-1', position='Query'),
  uid: string(name='Uid', example='12345', position='Query'),
}

model DeleteUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

/**
  * DeleteUser
  *
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DisableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the request.', example='-1', position='Query'),
  uid: string(name='Uid', description='You can call this operation to disable a user that is temporarily not used in Data Management (DMS) Enterprise.', example='12345', position='Query'),
}

model DisableUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', description='DisableUser', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model DisableUserResponse = {
  headers: map[string]string(name='headers'),
  body: DisableUserResponseBody(name='body'),
}

/**
  * The UID of the Alibaba Cloud account.
  *
 */
async function disableUser(request: DisableUserRequest): DisableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableUser', 'POST', '/', 'json', false, 'json', request);
}

model DownloadDataTrackResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnFilter?: {
    betweenEnd?: string(name='BetweenEnd', example='10'),
    betweenStart?: string(name='BetweenStart', example='1'),
    columnName?: string(name='ColumnName', example='account_name'),
    inList?: [ string ](name='InList'),
    operator?: string(name='Operator', example='EQUAL'),
    value?: string(name='Value', example='1'),
  }(name='ColumnFilter', shrink='json', position='Query'),
  eventIdList?: [ long ](name='EventIdList', shrink='json', position='Query'),
  filterEndTime?: string(name='FilterEndTime', example='2023-04-23 10:00:00', position='Query'),
  filterStartTime?: string(name='FilterStartTime', example='2023-04-23 00:00:00', position='Query'),
  filterTableList?: [ string ](name='FilterTableList', shrink='json', position='Query'),
  filterTypeList?: [ string ](name='FilterTypeList', shrink='json', position='Query'),
  orderId: long(name='OrderId', example='406****', minimum=1, maximum=9223372036854775807, position='Query'),
  rollbackSQLType: string(name='RollbackSQLType', example='REVERSE', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model DownloadDataTrackResultResponseBody = {
  downloadKeyId?: string(name='DownloadKeyId', example='e23dd7ec-a19f-4a69-8eb3-8ffd26e6****'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', example='true'),
}

model DownloadDataTrackResultResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadDataTrackResultResponseBody(name='body'),
}

async function downloadDataTrackResult(request: DownloadDataTrackResultRequest): DownloadDataTrackResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDataTrackResult', 'POST', '/', 'json', false, 'json', request);
}

model EditLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  alias: string(name='Alias', example='test_logic_db', position='Query'),
  databaseIds: [ long ](name='DatabaseIds', shrink='json', position='Query'),
  logicDbId: long(name='LogicDbId', example='1***', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model EditLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model EditLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: EditLogicDatabaseResponseBody(name='body'),
}

async function editLogicDatabase(request: EditLogicDatabaseRequest): EditLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model EnableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', example='-1', position='Query'),
  uid: string(name='Uid', example='12345', position='Query'),
}

model EnableUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model EnableUserResponse = {
  headers: map[string]string(name='headers'),
  body: EnableUserResponseBody(name='body'),
}

async function enableUser(request: EnableUserRequest): EnableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableUser', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteDataCorrectRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The ID of the request.', example='{ "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The error code.', example='406****', position='Query'),
  tid?: string(name='Tid', description='The parameters that are required to perform the data change.

```

json
"actionDetail" : {
    "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "transaction" : false, // Specify whether to change data as a transaction. 
    "backupData" : true // Specify whether to back up data. 
  }
```', example='3***', position='Query'),
}

model ExecuteDataCorrectResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ExecuteDataCorrect**.', example='EADDA791-2809-58CE-A303-743A77FF****'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteDataCorrectResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteDataCorrectResponseBody(name='body'),
}

async function executeDataCorrect(request: ExecuteDataCorrectRequest): ExecuteDataCorrectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteDataCorrect', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteDataExportRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the operation:

```json
{
   "fileType": "CSV", // The format of the exported file.
   "encoding": "" // The encoding format.
 }
```', example='{    "fileType": "CSV",    "encoding": ""  }', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='1234', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model ExecuteDataExportResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ExecuteDataExportResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteDataExportResponseBody(name='body'),
}

async function executeDataExport(request: ExecuteDataExportRequest): ExecuteDataExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteDataExport', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteScriptRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: int32(name='DbId', description='Indicates whether the SQL statement is executed.', example='123', minimum=1, position='Query'),
  logic: boolean(name='Logic', description='The error code.', example='false', position='Query'),
  script: string(name='Script', description='Specifies whether the database is a logical database.', example='select dt from report_daily', position='Query'),
  tid?: long(name='Tid', description='The operation that you want to perform. Set the value to **ExecuteScript**.', example='234', position='Query'),
}

model ExecuteScriptResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The error message about the gateway.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  results?: [ 
    {
      columnNames?: [ string ](name='ColumnNames', description='The fields that are queried after the SQL statement is executed.'),
      message?: string(name='Message', description='The ID of the tenant.

>  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](~~181330~~).', example='UnknownError'),
      rowCount?: long(name='RowCount', description='The ID of the request.', example='1'),
      rows?: [  map[string]any ](name='Rows', description='The total number of entries that are returned.'),
      success?: boolean(name='Success', description='The rows that are queried after the SQL statement is executed.', example='true'),
    }
  ](name='Results', description='The ID of the database.

>  This parameter is equivalent to the DatabaseId parameter in the SearchDatabase, ListDatabases, and GetDatabase operations. You can call one of these operations to obtain the required database ID. For more information, see [SearchDatabase](~~141876~~), [ListDatabases](~~141873~~), and [GetDatabase](~~141869~~).'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteScriptResponseBody(name='body'),
}

/**
  * The SQL statements to be executed. Data query language (DQL) statements, data definition language (DDL) statements, and data manipulation language (DML) statements are supported. The control mode of the instance that you want to query determines whether you can execute DDL and DML statements.
  *
 */
async function executeScript(request: ExecuteScriptRequest): ExecuteScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteScript', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteStructSyncRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='112345', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ExecuteStructSyncResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteStructSyncResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteStructSyncResponseBody(name='body'),
}

async function executeStructSync(request: ExecuteStructSyncRequest): ExecuteStructSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteStructSync', 'POST', '/', 'json', false, 'json', request);
}

model GetApprovalDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', position='Query'),
  workflowInstanceId: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](~~144642~~) operation to obtain the ID of the approval process.', example='184****', position='Query'),
}

model GetApprovalDetailResponseBody = {
  approvalDetail?: {
    auditId?: long(name='AuditId', description='The ID of the approval process.', example='184****'),
    createTime?: string(name='CreateTime', description='The time when the approval process was created.', example='2021-10-29 14:17:25'),
    currentHandlers?: {
      currentHandler?: [ 
      {
        id?: long(name='Id', description='The ID of the user.', example='1'),
        nickName?: string(name='NickName', description='The nickname of the user.', example='nickName'),
      }
    ](name='CurrentHandler')
    }(name='CurrentHandlers', description='The information about the approver.'),
    description?: string(name='Description', description='The description of the approval process.', example='\\[Instance permissions] Application\\<br/>Permission type: ⌈Logon⌋\\<br/>Application period: 30.0 days\\<br/>Background description: \\[Instance permissions] logon test\\<br/>\\<br/>\\[Application list]\\<br/>\\<span style=\\"color:red\\">product\\</span> rm-bp144d5ky4l4rli0417\\*\\*\\*\\*.mysql.rds.aliyuncs.com:3306 - PRODUCT\\<br/>'),
    orderId?: long(name='OrderId', description='The ID of the ticket.', example='384****'),
    orderType?: string(name='OrderType', description='The type of the ticket. Valid values:

*   **NDDL**: a schema design ticket
*   **DATA_TRACK**: a data tracking ticket
*   **TABLE_SYNC**: a table synchronization ticket
*   **PERM_APPLY**: a permission application ticket
*   **DATA_EXPORT**: a data export ticket
*   **DATA_CORRECT**: a data change ticket
*   **OWNER_APPLY**: an owner role application ticket
*   **SENSITIVITY**: a column sensitivity level change ticket', example='PERM_APPLY'),
    reasonList?: {
      reasons?: [ string ](name='Reasons')
    }(name='ReasonList', description='The reasons for the approval.'),
    templateId?: long(name='TemplateId', description='The ID of the workflow template.', example='1234'),
    title?: string(name='Title', description='The title of the approval process.', example='Permission application ticket - 384\\*\\*\\*\\*'),
    workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

*   **AUDITING**: The ticket is being reviewed.
*   **REJECT**: The ticket was rejected.
*   **CANCEL**: The ticket was revoked.
*   **APPROVED**: The ticket was approved.

> An approval process contains multiple approval nodes, and this parameter is returned for each approval node.', example='APPROVED'),
    workflowNodes?: {
      workflowNode?: [ 
      {
        auditUserIdList?: {
          auditUserIds?: [ string ](name='AuditUserIds')
        }(name='AuditUserIdList', description='The IDs of the approvers.'),
        nodeName?: string(name='NodeName', description='The name of the approval node.', example='DBA'),
        operateComment?: string(name='OperateComment', description='The remarks of the approval.', example='Reason: Approved'),
        operateTime?: string(name='OperateTime', description='The time when the ticket was submitted.', example='2019-10-15 13:47:54'),
        operatorId?: long(name='OperatorId', description='The ID of the user who submitted the ticket.', example='1****'),
        workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

*   **START**: The ticket was submitted.
*   **ERROR**: An error occurred.
*   **AUDITING**: The ticket is being reviewed.
*   **REJECT**: The ticket was rejected.
*   **CANCEL**: The ticket was revoked.
*   **APPROVED**: The ticket was approved.', example='APPROVED'),
      }
    ](name='WorkflowNode')
    }(name='WorkflowNodes', description='The details of approval nodes.'),
  }(name='ApprovalDetail', description='The approval details of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='MissingWorkflowInstanceId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='WorkflowInstanceId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66DE630B-ECA1-52A3-9198-602066F9****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetApprovalDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetApprovalDetailResponseBody(name='body'),
}

async function getApprovalDetail(request: GetApprovalDetailRequest): GetApprovalDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApprovalDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model GetAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    authorityTemplateItemList?: {
      authorityTemplateItem?: [ 
      {
        attribute?: string(name='Attribute', description='Other information. For example, you can add the logon permission on an instance to the permission template.', example='"permissionTypes": [
            "LOGIN"
          ]'),
        dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
        instanceId?: long(name='InstanceId', description='The ID of the instance.', example='188****'),
        itemId?: long(name='ItemId', description='The ID of the resource.', example='12***'),
        modifierId?: long(name='ModifierId', description='The ID of the user who modified the resource.', example='51***'),
        resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **INSTANCE**: instance
*   **LOGIC_DB**: logical database
*   **META_DB**: physical database
*   **LOGIC_TABLE**: logical table
*   **SINGLE_TABLE**: physical table', example='INSTANCE'),
        tableName?: string(name='TableName', description='The name of the table.', example='ExampleTable'),
        templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
      }
    ](name='AuthorityTemplateItem')
    }(name='AuthorityTemplateItemList', description='The resource information in the permission template.'),
    createTime?: string(name='CreateTime', description='The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.', example='2023-01-01 00:00:00'),
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='TestTemplate'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetAuthorityTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorityTemplateResponseBody(name='body'),
}

/**
  * You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function getAuthorityTemplate(request: GetAuthorityTemplateRequest): GetAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorityTemplateItemRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model GetAuthorityTemplateItemResponseBody = {
  authorityTemplateItemList?: {
    authorityTemplateItem?: [ 
    {
      attribute?: string(name='Attribute', description='The additional information. For example, permissions to log on to an instance are added to the permission template.', example='"permissionTypes": [
            "LOGIN"
          ]'),
      dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='188****'),
      itemId?: long(name='ItemId', description='The ID of the resource.', example='12***'),
      modifierId?: long(name='ModifierId', description='The ID of the user who modifies the resource.', example='51***'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **INSTANCE**: instance
*   **LOGIC_DB**: logical database
*   **META_DB**: physical database
*   **LOGIC_TABLE**: logical table
*   **LOGIC_TABLE**: physical table', example='INSTANCE'),
      tableName?: string(name='TableName', description='The name of the table.', example='ExampleTable'),
      templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
    }
  ](name='AuthorityTemplateItem')
  }(name='AuthorityTemplateItemList', description='The permission templates.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetAuthorityTemplateItemResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorityTemplateItemResponseBody(name='body'),
}

/**
  * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function getAuthorityTemplateItem(request: GetAuthorityTemplateItemRequest): GetAuthorityTemplateItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorityTemplateItem', 'POST', '/', 'json', false, 'json', request);
}

model GetDBTaskSQLJobLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='The log that records the scheduling details.', example='1276****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The error code returned.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDBTaskSQLJobLogResponseBody = {
  errorCode?: string(name='ErrorCode', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', example='JobId is mandatory for this action.'),
  log?: string(name='Log', example='log_****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AC23904-55DE-550B-9676-E8946F07****'),
  success?: boolean(name='Success', description='The operation that you want to perform. Set the value to **GetDBTaskSQLJobLog**.', example='true'),
}

model GetDBTaskSQLJobLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBTaskSQLJobLogResponseBody(name='body'),
}

async function getDBTaskSQLJobLog(request: GetDBTaskSQLJobLogRequest): GetDBTaskSQLJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBTaskSQLJobLog', 'POST', '/', 'json', false, 'json', request);
}

model GetDBTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  logicDbId: long(name='LogicDbId', example='134325', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='43215', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDBTopologyResponseBody = {
  DBTopology?: {
    alias?: string(name='Alias', example='logic_db_test'),
    DBTopologyInfoList?: [ 
      {
        catalogName?: string(name='CatalogName', example='def'),
        dbId?: long(name='DbId', example='423532'),
        dbType?: string(name='DbType', example='polardb'),
        envType?: string(name='EnvType', example='dev'),
        instanceId?: long(name='InstanceId', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', example='RDS'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        schemaName?: string(name='SchemaName', example='db_test@rm-xxx:3306'),
        searchName?: string(name='SearchName', example='db_test'),
      }
    ](name='DBTopologyInfoList'),
    dbType?: string(name='DbType', example='polardb'),
    envType?: string(name='EnvType', example='dev'),
    logicDbId?: long(name='LogicDbId', example='1234'),
    logicDbName?: string(name='LogicDbName', example='logic_db_test'),
    searchName?: string(name='SearchName', example='logic_db_test'),
  }(name='DBTopology'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', example='true'),
}

model GetDBTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBTopologyResponseBody(name='body'),
}

async function getDBTopology(request: GetDBTopologyRequest): GetDBTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectBackupFilesRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionDetail?: map[string]any(name='ActionDetail', description='The error code.', example='{}', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The download URL of the backup file for the ticket.', example='4200000', position='Query'),
  tid?: long(name='Tid', description='The parameters that are required to perform the operation. You do not need to specify this parameter.', example='3***', position='Query'),
}

model GetDataCorrectBackupFilesResponseBody = {
  dataCorrectBackupFiles?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='DataCorrectBackupFiles'),
  errorCode?: string(name='ErrorCode', description='The operation that you want to perform. Set the value to **GetDataCorrectBackupFiles**.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AFF4109-FEFB-44E8-96A3-923B1FA8C46E'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectBackupFilesResponseBody(name='body'),
}

async function getDataCorrectBackupFiles(request: GetDataCorrectBackupFilesRequest): GetDataCorrectBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The information about the data change ticket.', example='420****', position='Query'),
  tid?: long(name='Tid', description='The status of the precheck. Valid values:

*   **WAITING**: The ticket is pending precheck.
*   **RUNNING**: The ticket is being prechecked.
*   **SUCCESS**: The ticket passes the precheck.
*   **FAIL**: The ticket fails the precheck.', example='3***', position='Query'),
}

model GetDataCorrectOrderDetailResponseBody = {
  dataCorrectOrderDetail?: {
    databaseList?: {
      database?: [ 
      {
        dbId?: int32(name='DbId', example='1860****'),
        dbType?: string(name='DbType', example='mysql'),
        envType?: string(name='EnvType', example='product'),
        logic?: boolean(name='Logic', example='false'),
        searchName?: string(name='SearchName', example='xxx@xxx:3306'),
      }
    ](name='Database')
    }(name='DatabaseList'),
    execMode?: string(name='ExecMode', example='COMMITOR'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', example='100'),
      attachmentName?: string(name='AttachmentName', example='xxx'),
      classify?: string(name='Classify', example='test'),
      estimateAffectRows?: long(name='EstimateAffectRows', example='100'),
      exeSQL?: string(name='ExeSQL', example='update t1 set name = \\"xxx\\" where id <= 100'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', example='test'),
      rbAttachmentName?: string(name='RbAttachmentName', example='test'),
      rbSQL?: string(name='RbSQL', example='empty'),
      rbSQLType?: string(name='RbSQLType', example='text'),
      sqlType?: string(name='SqlType', example='text'),
    }(name='OrderDetail'),
    preCheckDetail?: {
      taskCheckDO?: [ 
      {
        checkStatus?: string(name='CheckStatus', example='SUCCESS'),
        checkStep?: string(name='CheckStep', example='PERMISSION_CHECK'),
        userTip?: string(name='UserTip', description='Queries the information about a data change ticket in Data Management (DMS).', example='tip messsage'),
      }
    ](name='TaskCheckDO')
    }(name='PreCheckDetail', description='The precheck details of the ticket.'),
    status?: string(name='Status', example='approved'),
  }(name='DataCorrectOrderDetail', description='The ID of the request.'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The message that indicates a check step.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectOrderDetailResponseBody(name='body'),
}

async function getDataCorrectOrderDetail(request: GetDataCorrectOrderDetailRequest): GetDataCorrectOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectRollbackFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='51****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectRollbackFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  fileUrl?: string(name='FileUrl', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectRollbackFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectRollbackFileResponseBody(name='body'),
}

async function getDataCorrectRollbackFile(request: GetDataCorrectRollbackFileRequest): GetDataCorrectRollbackFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectRollbackFile', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectSQLFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='730000', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~).', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectSQLFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  fileUrl?: string(name='FileUrl', description='The download URL of the SQL script.', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectSQLFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectSQLFileResponseBody(name='body'),
}

/**
  * This operation applies to [regular data change](~~58419~~) and [batch data import](~~144643~~).
  *
 */
async function getDataCorrectSQLFile(request: GetDataCorrectSQLFileRequest): GetDataCorrectSQLFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectSQLFile', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCorrectTaskDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can call the [CreateDataCorrectOrder](~~208388~~), [CreateDataImportOrder](~~208387~~), or [CreateFreeLockCorrectOrder](~~208386~~) operation to obtain the ticket ID.', example='12435523', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='14325432', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCorrectTaskDetailResponseBody = {
  dataCorrectTaskDetail?: {
    actualAffectRows?: long(name='ActualAffectRows', description='The number of rows affected by the SQL statement.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the task was created.', example='2021-03-05 15:08:55'),
    DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='1234235'),
    jobStatus?: string(name='jobStatus', description='The state of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
  }(name='DataCorrectTaskDetail', description='The details of the data change task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectTaskDetailResponseBody(name='body'),
}

async function getDataCorrectTaskDetail(request: GetDataCorrectTaskDetailRequest): GetDataCorrectTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCorrectTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCronClearConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCronClearConfigResponseBody = {
  dataCronClearConfig?: {
    cronCallTimes?: string(name='CronCallTimes', example='2'),
    cronFormat?: string(name='CronFormat', example='0 0 23 ? * 7,1'),
    cronLastCallStartTime?: string(name='CronLastCallStartTime', example='2022-11-18 00:00:00'),
    cronNextCallTime?: string(name='CronNextCallTime', example='2022-11-19 00:00:00'),
    cronStatus?: string(name='CronStatus'),
    currentClearTaskCount?: long(name='CurrentClearTaskCount', example='0'),
    duration?: string(name='Duration', example='1'),
    optimizeTableAfterEveryClearTimes?: long(name='OptimizeTableAfterEveryClearTimes', example='0'),
  }(name='DataCronClearConfig'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCronClearConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCronClearConfigResponseBody(name='body'),
}

async function getDataCronClearConfig(request: GetDataCronClearConfigRequest): GetDataCronClearConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCronClearConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetDataCronClearTaskDetailListRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can query the ticket ID from the response parameters of the [CreateDataCronClearOrder](~~208385~~) operation.', example='432532', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='12345', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataCronClearTaskDetailListResponseBody = {
  dataCronClearTaskDetailList?: [ 
    {
      actualAffectRows?: long(name='ActualAffectRows', description='The number of rows affected by the SQL task.', example='1'),
      createTime?: string(name='CreateTime', description='The time when the SQL task was created.', example='2021-01-14 10:00:00'),
      DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='432523'),
      jobStatus?: string(name='jobStatus', description='The state of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
    }
  ](name='DataCronClearTaskDetailList', description='The historical data cleansing tasks'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of SQL tasks.', example='1'),
}

model GetDataCronClearTaskDetailListResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCronClearTaskDetailListResponseBody(name='body'),
}

async function getDataCronClearTaskDetailList(request: GetDataCronClearTaskDetailListRequest): GetDataCronClearTaskDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataCronClearTaskDetailList', 'POST', '/', 'json', false, 'json', request);
}

model GetDataExportDownloadURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The details about the download URL of the file that records the export results for the ticket.', example='546****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model GetDataExportDownloadURLResponseBody = {
  downloadURLResult?: {
    hasResult?: boolean(name='HasResult', description='Indicates whether export results are available for download. Valid values:

*   **true**: Export results are available for download.
*   **false**: No export results are available for download.', example='true'),
    tipMessage?: string(name='TipMessage', description='The error code.', example='tip message'),
    URL?: string(name='URL', description='The ID of the request.', example='https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
  }(name='DownloadURLResult', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to obtain the ticket ID.'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **GetDataExportDownloadURL**.', example='4BF24EA5-9013-4C85-AE68-6C23AF5E0097'),
  success?: boolean(name='Success', example='true'),
}

model GetDataExportDownloadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataExportDownloadURLResponseBody(name='body'),
}

async function getDataExportDownloadURL(request: GetDataExportDownloadURLRequest): GetDataExportDownloadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportDownloadURL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataExportOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', position='Body'),
  tid?: long(name='Tid', example='-1', position='Query'),
}

model GetDataExportOrderDetailResponseBody = {
  dataExportOrderDetail?: {
    keyInfo?: {
      jobStatus?: string(name='JobStatus', example='EXPORT_SUCCESS'),
      preCheckId?: long(name='PreCheckId'),
    }(name='KeyInfo'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', example='1'),
      classify?: string(name='Classify', example='text'),
      database?: string(name='Database', example='xxx@xxx:3306'),
      dbId?: int32(name='DbId'),
      envType?: string(name='EnvType', example='test'),
      exeSQL?: string(name='ExeSQL'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', example='empty'),
      logic?: boolean(name='Logic', example='false'),
    }(name='OrderDetail'),
  }(name='DataExportOrderDetail'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model GetDataExportOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataExportOrderDetailResponseBody(name='body'),
}

async function getDataExportOrderDetail(request: GetDataExportOrderDetailRequest): GetDataExportOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportOrderDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetDataExportPreCheckDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='34****', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model GetDataExportPreCheckDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  preCheckResult?: {
    ignoreAffectRows?: boolean(name='IgnoreAffectRows', example='true'),
    preCheckDetailList?: {
      preCheckDetailList?: [ 
      {
        affectRows?: long(name='AffectRows', example='1'),
        SQL?: string(name='SQL', example='SELECT * FROM tmp_table LIMIT 1'),
      }
    ](name='PreCheckDetailList')
    }(name='PreCheckDetailList'),
  }(name='PreCheckResult'),
  requestId?: string(name='RequestId', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', example='true'),
}

model GetDataExportPreCheckDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataExportPreCheckDetailResponseBody(name='body'),
}

async function getDataExportPreCheckDetail(request: GetDataExportPreCheckDetailRequest): GetDataExportPreCheckDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataExportPreCheckDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataImportSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='14****', minimum=1, maximum=9223372036854775807, position='Query'),
  sqlId: long(name='SqlId', example='15****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataImportSQLResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  SQLDetail?: {
    execSql?: string(name='ExecSql', example='insert into t1 values (1);'),
  }(name='SQLDetail'),
  success?: boolean(name='Success', example='true'),
}

model GetDataImportSQLResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataImportSQLResponseBody(name='body'),
}

async function getDataImportSQL(request: GetDataImportSQLRequest): GetDataImportSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataImportSQL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackJobDegreeRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='321****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackJobDegreeResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  jobDegree?: {
    downloadCompletionDegree?: double(name='DownloadCompletionDegree', example='1'),
    filterCompletionDegree?: double(name='FilterCompletionDegree', example='1'),
    jobStatus?: string(name='JobStatus', example='FILTER_SUCCESS'),
    listCompletionDegree?: double(name='ListCompletionDegree', example='1'),
    statusDesc?: string(name='StatusDesc', example='searching success'),
  }(name='JobDegree'),
  requestId?: string(name='RequestId', description='Id of the request', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model GetDataTrackJobDegreeResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataTrackJobDegreeResponseBody(name='body'),
}

async function getDataTrackJobDegree(request: GetDataTrackJobDegreeRequest): GetDataTrackJobDegreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackJobDegree', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackJobTableMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='12345', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackJobTableMetaResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  tableMetaList?: [ 
    {
      columns?: [ 
        {
          charset?: string(name='Charset', example='utf8mb4'),
          columnName?: string(name='ColumnName', example='claimantno'),
          columnPosition?: int32(name='ColumnPosition', example='1'),
          columnType?: string(name='ColumnType', example='BIGINT'),
          fictive?: boolean(name='Fictive', example='false'),
        }
      ](name='Columns'),
      schemaName?: string(name='SchemaName', example='DB165'),
      tableName?: string(name='TableName', example='live_stat'),
    }
  ](name='TableMetaList'),
}

model GetDataTrackJobTableMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataTrackJobTableMetaResponseBody(name='body'),
}

async function getDataTrackJobTableMeta(request: GetDataTrackJobTableMetaRequest): GetDataTrackJobTableMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackJobTableMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetDataTrackOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='4328****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetDataTrackOrderDetailResponseBody = {
  dataTrackOrderDetail?: {
    databaseSearchName?: string(name='DatabaseSearchName', example='xxx@yyy:3306'),
    dbId?: long(name='DbId', example='3431****'),
    jobEndTime?: string(name='JobEndTime', example='2023-04-23 10:00:00'),
    jobStartTime?: string(name='JobStartTime', example='2023-04-23 00:00:00'),
    jobStatus?: string(name='JobStatus', example='FILTER_SUCCESS'),
    logic?: boolean(name='Logic', example='false'),
    schemaName?: string(name='SchemaName', example='as_task'),
    statusDesc?: string(name='StatusDesc', example='searching success'),
    tableNames?: [ string ](name='TableNames'),
    trackTypes?: [ string ](name='TrackTypes'),
  }(name='DataTrackOrderDetail'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', example='true'),
}

model GetDataTrackOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataTrackOrderDetailResponseBody(name='body'),
}

async function getDataTrackOrderDetail(request: GetDataTrackOrderDetailRequest): GetDataTrackOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataTrackOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The error code.', example='192.168.XX.XX', position='Query'),
  port: int32(name='Port', description='The name of the catalog to which the database belongs.', example='3306', position='Query'),
  schemaName: string(name='SchemaName', description='The details of the database.', example='mysql', position='Query'),
  sid?: string(name='Sid', description='The operation that you want to perform. Set the value to **GetDatabase**.', example='test_sid', position='Query'),
  tid?: long(name='Tid', description='The ID of the database.', example='-1', position='Query'),
}

model GetDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='def'),
    databaseId?: string(name='DatabaseId', description='The names of the owners of the database.', example='984****'),
    dbType?: string(name='DbType', description='The system identifier (SID) of the database.

>  The SID uniquely identifies an Oracle database. After a database is created, a SID is generated for the database.', example='mysql'),
    dbaId?: string(name='DbaId', description='The port that is used to connect to the database.', example='27****'),
    dbaName?: string(name='DbaName', description='The encoding format of the database.', example='dba_name'),
    encoding?: string(name='Encoding', description='The port that is used to connect to the database.', example='utf8mb4'),
    envType?: string(name='EnvType', description='The endpoint that is used to connect to the database.', example='product'),
    host?: string(name='Host', description='The IDs of the owners of the database.', example='192.168.XX.XX'),
    instanceId?: string(name='InstanceId', description='The status of the database. Valid values:

*   **NORMAL**: The database is running as expected.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='149****'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The name of the database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The ID of the database administrator (DBA).'),
    port?: int32(name='Port', description='The error message.', example='3306'),
    schemaName?: string(name='SchemaName', description='The ID of the instance.', example='mysql'),
    searchName?: string(name='SearchName', description='The ID of the request.', example='mysql@192.168.XX.XX:3306'),
    sid?: string(name='Sid', description='The nickname of the DBA.', example='test_sid'),
    state?: string(name='State', description='The endpoint that is used to connect to the database.', example='NORMAL'),
  }(name='Database', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the ID of the tenant.'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='An unknown error occurred.'),
  requestId?: string(name='RequestId', description='The name of the database.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', example='true'),
}

model GetDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatabaseResponseBody(name='body'),
}

async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseExportOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='821****', position='Body'),
  tid?: long(name='Tid', example='3***', position='Query'),
}

model GetDatabaseExportOrderDetailResponseBody = {
  databaseExportOrderDetail?: {
    comment?: string(name='Comment'),
    committer?: string(name='Committer', example='dmsuser'),
    committerId?: string(name='CommitterId', example='12***'),
    id?: long(name='Id', example='821****'),
    keyInfo?: {
      auditDate?: string(name='AuditDate', example='2023-04-13 13:44:59'),
      config?: {
        dbName?: string(name='DbName', example='dmstest'),
        exportContent?: string(name='ExportContent', example='DATA'),
        exportTypes?: {
          exportTypes?: [ string ](name='ExportTypes')
        }(name='ExportTypes'),
        SQLExtOption?: {
          SQLExtOption?: [ string ](name='SQLExtOption')
        }(name='SQLExtOption'),
        selectedTables?: {
          selectedTables?: [ string ](name='SelectedTables')
        }(name='SelectedTables'),
        targetOption?: string(name='TargetOption', example='SQL'),
      }(name='Config'),
      dbId?: long(name='DbId', example='2583****'),
      downloadURL?: string(name='DownloadURL', example='https://oss.xxx.com'),
    }(name='KeyInfo'),
    log?: string(name='Log', example='2023-04-12 14:58:32:015 Database Dump Start.
2023-04-12 14:58:32:096 set server side query timeout, sql : set max_execution_time = 0'),
    searchName?: string(name='SearchName', example='test@xxx.xxx.xxx.xxx:3306'),
    statusDesc?: string(name='StatusDesc'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc'),
  }(name='DatabaseExportOrderDetail'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', example='true'),
}

model GetDatabaseExportOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatabaseExportOrderDetailResponseBody(name='body'),
}

async function getDatabaseExportOrderDetail(request: GetDatabaseExportOrderDetailRequest): GetDatabaseExportOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabaseExportOrderDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  host: string(name='Host', description='The name of the security rule set corresponding to the control mode.', example='172.17.XXX.XXX', position='Query'),
  port: int32(name='Port', description='The name of the database link for the database instance.', example='5432', position='Query'),
  sid?: string(name='Sid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the virtual private cloud (VPC) to which the database instance belongs.', example='2***', position='Query'),
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  instance?: {
    dataLinkName?: string(name='DataLinkName', description='The nickname of the DBA for the database instance.', example='test'),
    databasePassword?: string(name='DatabasePassword', description='The type of the database instance.', example='******'),
    databaseUser?: string(name='DatabaseUser', description='The timeout period for exporting data from the database instance.', example='dbuser'),
    dbaId?: string(name='DbaId', description='The timeout period for querying data in the database instance.', example='29****'),
    dbaNickName?: string(name='DbaNickName', description='The SID of the database instance.', example='dbaname'),
    ddlOnline?: int32(name='DdlOnline', description='The ID of the request.', example='0'),
    ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the security rule set for the database instance.', example='i-bp124ldpklqz59y3****'),
    ecsRegion?: string(name='EcsRegion', description='Queries the details of a database instance.', example='cn-beijing'),
    envType?: string(name='EnvType', description='The endpoint of the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the endpoint.', example='test'),
    exportTimeout?: int32(name='ExportTimeout', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='86400'),
    host?: string(name='Host', description='The ID of the database instance.', example='192.168.XXX.XXX'),
    instanceAlias?: string(name='InstanceAlias', description='The system ID (SID) of the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the SID.'),
    instanceId?: string(name='InstanceId', description='The control mode of the database instance.', example='188****'),
    instanceSource?: string(name='InstanceSource', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='ECS_OWN'),
    instanceType?: string(name='InstanceType', description='The host address that is used to connect to the database instance.', example='postgresql'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='Indicates whether the lock-free schema change feature is enabled for the database instance.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The alias of the database instance.'),
    port?: int32(name='Port', description='The ID of the database administrator (DBA) for the database instance.', example='5432'),
    queryTimeout?: int32(name='QueryTimeout', description='The status of the database instance. Valid values:

*   **NORMAL**: normal
*   **DISABLE**: disabled', example='7200'),
    safeRuleId?: string(name='SafeRuleId', description='The source of the database instance.', example='3****'),
    sellSitd?: string(name='SellSitd', description='为true，敏感数据保护开启，否则未开启', example='false'),
    sid?: string(name='Sid', description='The port number that is used to connect to the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the port number.', example='test'),
    standardGroup?: {
      groupMode?: string(name='GroupMode', example='NONE_CONTROL'),
      groupName?: string(name='GroupName'),
    }(name='StandardGroup'),
    state?: string(name='State', description='The nicknames of the owners for the database instance.', example='NORMAL'),
    useDsql?: int32(name='UseDsql', description='The password that is used to log on to the database.', example='0'),
    vpcId?: string(name='VpcId', description='The ID of the Elastic Compute Service (ECS) instance on which the database instance is deployed.', example='vpc-o6wrloqsdqc9io3mg****'),
  }(name='Instance', description='The ID of the region in which the database instance resides.'),
  requestId?: string(name='RequestId', description='The details of the database instance.', example='F6C80B69-3203-56AC-8021-18BA72A6F4E1'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetIntervalLimitOfSLARequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request failed.', example='11****', position='Query'),
  tid?: long(name='Tid', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetIntervalLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', description='GetIntervalLimitOfSLA', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  intervalLimit?: int32(name='IntervalLimit', example='59'),
  requestId?: string(name='RequestId', description='Queries the minimum scheduling cycle of a task flow when a service level agreement (SLA) timeout rule is configured for the task flow.', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: boolean(name='Success', example='true'),
}

model GetIntervalLimitOfSLAResponse = {
  headers: map[string]string(name='headers'),
  body: GetIntervalLimitOfSLAResponseBody(name='body'),
}

/**
  * The minimum scheduling cycle. Unit: minutes.
  *
 */
async function getIntervalLimitOfSLA(request: GetIntervalLimitOfSLARequest): GetIntervalLimitOfSLAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIntervalLimitOfSLA', 'POST', '/', 'json', false, 'json', request);
}

model GetLhSpaceByNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceName: string(name='SpaceName', description='Indicates whether the workspace is deleted. Valid values:

*   **true**: The workspace is deleted.
*   **false**: The workspace is not deleted.', example='test_space', position='Query'),
  tid?: long(name='Tid', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL', example='3000', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetLhSpaceByNameResponseBody = {
  errorCode?: string(name='ErrorCode', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The operation that you want to perform. Set the value to **GetLhSpaceByName**.', example='UnknownError'),
  lakehouseSpace?: {
    creatorId?: string(name='CreatorId', description='The description of the workspace.', example='51***'),
    description?: string(name='Description', description='The name of the workspace.', example='test'),
    devDbId?: int32(name='DevDbId', example='2435****'),
    dwDbType?: string(name='DwDbType', description='The ID of the user who creates the workspace.', example='14'),
    id?: long(name='Id', description='The name of the workspace.', example='1'),
    isDeleted?: boolean(name='IsDeleted', example='false'),
    mode?: int32(name='Mode', description='The workspace for data warehouse development.', example='1'),
    prodDbId?: int32(name='ProdDbId', example='2442****'),
    spaceConfig?: string(name='SpaceConfig', description='The ID of the request.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}'),
    spaceName?: string(name='SpaceName', description='The ID of the tenant to which the workspace belongs.', example='test_space'),
    tenantId?: string(name='TenantId', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode
*   **1**: standard mode', example='3***'),
  }(name='LakehouseSpace', description='The ID of the production database.'),
  requestId?: string(name='RequestId', description='The error code returned if the request fails.', example='FE8CA4A8-AB2D-55B7-BD30-01A4609F40D8'),
  success?: boolean(name='Success', description='The error message returned if the request fails.', example='true'),
}

model GetLhSpaceByNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetLhSpaceByNameResponseBody(name='body'),
}

/**
  * The ID of the workspace.
  *
 */
async function getLhSpaceByName(request: GetLhSpaceByNameRequest): GetLhSpaceByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLhSpaceByName', 'POST', '/', 'json', false, 'json', request);
}

model GetLogicDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the logical database. You can call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation to obtain the ID of the logical database.', example='1***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***', position='Query'),
}

model GetLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The status code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicDatabase?: {
    alias?: string(name='Alias', description='The alias of the logical database.', example='test_logic_alias'),
    databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1***'),
    databaseIds?: {
      databaseIds?: [ long ](name='DatabaseIds')
    }(name='DatabaseIds', description='The IDs of database shards of the logical database.'),
    dbType?: string(name='DbType', description='The database engine. For more information about the valid values of the DbType parameter, see [DbType parameter](~~198106~~).', example='POLARDB'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: pre-release environment
*   test: test environment
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: staging environment', example='dev'),
    logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. The return value is true.', example='true'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners of the logical database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The names of the owners of the logical database.'),
    schemaName?: string(name='SchemaName', description='The name of the logical database.', example='test_logic_db'),
    searchName?: string(name='SearchName', description='The name that is used to search for the logical database.', example='test_logic_db[test_logic_alias]'),
  }(name='LogicDatabase', description='The details of the logical database.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GetLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogicDatabaseResponseBody(name='body'),
}

async function getLogicDatabase(request: GetLogicDatabaseRequest): GetLogicDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogicDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetMetaTableColumnRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The globally unique identifier (GUID) of the table in Data Management (DMS).

*   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](~~141875~~) operation to obtain the value of this parameter.
*   If the database to which the table belongs is a physical database, you can call the [ListTables](~~141878~~) operation to obtain the value of this parameter.', example='IDB_40753****.qntest2.activity_setting', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetMetaTableColumnResponseBody = {
  columnList?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**: The column is an auto-increment column.
*   **false**: The column is not an auto-increment column.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the column.', example='63513****'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='has_promotion'),
      columnType?: string(name='ColumnType', description='The data type of the column.

> The return value of a column is not unique, such as **bigint** or **int**.', example='bigint(1)'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='0'),
      dataPrecision?: int32(name='DataPrecision', description='The precision of the field.', example='19'),
      dataScale?: int32(name='DataScale', description='The number of decimal places for the field.', example='0'),
      description?: string(name='Description', description='The description of the column.', example='Whether discounts are provided'),
      nullable?: boolean(name='Nullable', description='Indicates whether the field can be empty. Valid values:

*   **true**: The field can be empty.
*   **false**: The field cannot be empty.', example='false'),
      position?: int32(name='Position', description='The position of the field in the table.', example='1'),
      primaryKey?: string(name='PrimaryKey', description='Indicates whether the field is the primary key. Valid values:

*   **true**: The field is the primary key.
*   **false**: The field is not the primary key.', example='true'),
      securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the column. Valid values:

*   **INNER**: The column is not sensitive.
*   **SENSITIVE**: The column is sensitive.
*   **CONFIDENTIAL**: The column is confidential.

> For more information, see [Sensitivity levels of columns](~~66091~~).', example='INNER'),
    }
  ](name='ColumnList', description='The details about fields in the table.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingTableGuid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='TableGuid is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='087DFBA1-378B-5D25-B13B-31F6409F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances whose control mode is Security Collaboration.
  *
 */
async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetaTableColumn', 'POST', '/', 'json', false, 'json', request);
}

model GetMetaTableDetailInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in Data Management (DMS).

> 

*   You can call the [ListLogicTables](~~141875~~) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.

*   You can call the [ListTables](~~141878~~) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.', example='IDB_L_9032.db-test.yuyang_test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](~~181330~~) section of the Manage DMS tenants topic.', example='123', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetMetaTableDetailInfoResponseBody = {
  detailInfo?: {
    columnList?: [ 
      {
        autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   true: The column is an auto-increment column.
*   false: The column is not an auto-increment column.', example='true'),
        columnId?: string(name='ColumnId', description='The ID of the column.', example='191234849'),
        columnName?: string(name='ColumnName', description='The name of the column.', example='id'),
        columnType?: string(name='ColumnType', description='The data type of the column. Examples: Bigint, Int, and Varchar.', example='bigint(20) unsigned'),
        dataLength?: long(name='DataLength', description='The length of the field.', example='0'),
        dataPrecision?: int32(name='DataPrecision', description='The precision of the field.', example='0'),
        dataScale?: int32(name='DataScale', description='The scale of the column.', example='0'),
        description?: string(name='Description', description='The description of the column.', example='test'),
        nullable?: boolean(name='Nullable', description='Indicates whether the column is nullable. Valid values:

*   true: The column is nullable.
*   false: The column is not nullable.', example='false'),
        position?: string(name='Position', description='The position of the field in the table.', example='1'),
      }
    ](name='ColumnList', description='The columns in the table.'),
    indexList?: [ 
      {
        indexColumns?: [ string ](name='IndexColumns', description='The index column.'),
        indexId?: string(name='IndexId', description='The ID of the index.', example='123'),
        indexName?: string(name='IndexName', description='The name of the index.', example='PRIMARY'),
        indexType?: string(name='IndexType', description='The type of the index. Examples: Primary, Unique, and Normal.', example='Primary'),
        unique?: boolean(name='Unique', description='Indicates whether the index is unique. Valid values:

*   true: The index is unique.
*   false: The index is not unique.', example='false'),
      }
    ](name='IndexList', description='The list of indexes.'),
  }(name='DetailInfo', description='The details of the table.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E881CB2F-DE42-42E5-90EB-8B3173DCB9B9'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableDetailInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaTableDetailInfoResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances whose control mode is Security Collaboration.
  *
 */
async function getMetaTableDetailInfo(request: GetMetaTableDetailInfoRequest): GetMetaTableDetailInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMetaTableDetailInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOnlineDDLProgressRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobDetailId: long(name='JobDetailId', description='The ID of the OnlineDDL SQL task details. You can call the [ListDBTaskSQLJobDetail](~~207073~~) operation to obtain the task detail ID.', example='15***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOnlineDDLProgressResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  onlineDDLTaskDetail?: {
    cleanStrategy?: string(name='CleanStrategy', description='The cleanup policy of the original table after the cut-over. Valid values:

*   **DROP**: Invalid original tables are deleted.
*   **MOVE**: Invalid original tables are moved to the test database. You can delete the tables manually.
*   **NOTHING**: Invalid original tables are retained in the original database. You can delete the tables manually.', example='DROP'),
    copyChunkMode?: string(name='CopyChunkMode', description='The policy of full replication. Valid values:

*   **AUTO**: DMS dynamically adjusts the chunk size based on the performance of the database. Tables are locked for less than 1.5 seconds during a single replication operation.
*   **RUNNING**: DMS uses the specified value of the CopyChunkSize parameter. The valid value of the CopyChunkSize parameter ranges from 1 to 60000. If you set this parameter to RUNNING, you must specify the CopyChunkSize parameter.', example='AUTO'),
    copyChunkSize?: long(name='CopyChunkSize', description='The size of each chunk that is used to replicate data. This parameter is used to specify the size of each chunk. A larger chunk size increases the replication efficiency and decreases the business performance.

> During full replication, the original table is divided into N small chunks and each chunk is replicated to the temporary table one by one. By default, DMS dynamically adjusts the size of each chunk.', example='1000'),
    copyCount?: long(name='CopyCount', description='The actual amount of data replicated from the original table in the lock-free change operation.', example='9'),
    copyTotal?: long(name='CopyTotal', description='The estimated total number of rows of the data. The value is obtained from the statistical data in the information_schema database. In most cases, the estimated total number of rows is smaller than the actual number of rows in a table.', example='10'),
    cutoverFailRetryTimes?: long(name='CutoverFailRetryTimes', description='The number of retries when the cut-over fails.', example='3'),
    cutoverLockTimeSeconds?: long(name='CutoverLockTimeSeconds', description='The maximum period of time that a table can be locked during cut-over. Unit: seconds.', example='2'),
    cutoverWindowEndTime?: string(name='CutoverWindowEndTime', description='The end of the time window of the cut-over operation. This value is at least 30 minutes later than the CutoverWindowStartTime parameter. Default value: 23:59:59', example='13:00:00'),
    cutoverWindowStartTime?: string(name='CutoverWindowStartTime', description='The beginning of the time window of the cut-over operation. Default value: 00:00:00. This parameter controls the time window of the cut-over. Cut-over can be performed only when the cut-over conditions are met and the time is within the specified time window. If the time is not within the time window, the cut-over operation is not performed until the time reaches the beginning of the time window.', example='12:00:00'),
    delaySeconds?: long(name='DelaySeconds', description='The replay latency of DMS. Unit: seconds. The replay latency is the period of time that is taken to replay the binary logs of the table to the temporary table. The latency does not indicate the data migration latency between a primary database and a secondary database.', example='0'),
    jobStatus?: string(name='JobStatus', description='The state of the task. Valid values:

*   **INIT**: The task is being initialized.
*   **SUCCESS**: The task is complete.
*   **RUNNING**: The task is being executed.
*   **WAITING_CUTOVER**: The task is waiting for cut-over.
*   **RESTARTING**: The task is restarting.
*   **PAUSE**: The task is suspended.
*   **UNSUPPORTED**: The task is not supported.
*   **CANCELED**: The task is canceled.
*   **FAIL**: The task failed.
*   **INTERRUPT**: The task is interrupted.', example='SUCCESS'),
    progressRatio?: string(name='ProgressRatio', description='The estimated execution progress. The actual progress is subject to the task status.', example='90%'),
    statusDesc?: string(name='StatusDesc', description='The description of the task status.', example='Success'),
  }(name='OnlineDDLTaskDetail', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetOnlineDDLProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetOnlineDDLProgressResponseBody(name='body'),
}

async function getOnlineDDLProgress(request: GetOnlineDDLProgressRequest): GetOnlineDDLProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnlineDDLProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetOpLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseName?: string(name='DatabaseName', position='Query'),
  endTime: string(name='EndTime', example='2022-03-29 10:00:00', position='Query'),
  module?: string(name='Module', example='SECURITY_RULE', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='30', position='Query'),
  startTime: string(name='StartTime', example='2022-03-23 10:00:00', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  userNick?: string(name='UserNick', position='Query'),
}

model GetOpLogResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  opLogDetails?: {
    opLogDetail?: [ 
    {
      database?: string(name='Database'),
      module?: string(name='Module'),
      opContent?: string(name='OpContent', example='SELECT * FROM `orders` \\n LIMIT 20'),
      opTime?: string(name='OpTime', example='2022-03-28 16:45:19'),
      opUserId?: long(name='OpUserId', example='51****'),
      orderId?: long(name='OrderId', example='509****'),
      userId?: string(name='UserId', example='22275482072787****'),
      userNick?: string(name='UserNick', example='test_name'),
    }
  ](name='OpLogDetail')
  }(name='OpLogDetails'),
  requestId?: string(name='RequestId', example='47D56208-DB1D-4FD3-BE32-300E43185488'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetOpLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpLogResponseBody(name='body'),
}

/**
  * The error message returned if the request failed.
  *
 */
async function getOpLog(request: GetOpLogRequest): GetOpLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpLog', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderAttachmentFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='51****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOrderAttachmentFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  fileUrl?: string(name='FileUrl', example='https://dmsxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderAttachmentFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderAttachmentFileResponseBody(name='body'),
}

async function getOrderAttachmentFile(request: GetOrderAttachmentFileRequest): GetOrderAttachmentFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderAttachmentFile', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderBaseInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='12345', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model GetOrderBaseInfoResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  orderBaseInfo?: {
    comment?: string(name='Comment', description='The remarks of the ticket.', example='test'),
    committer?: string(name='Committer', description='The applicant.', example='xxx'),
    committerId?: long(name='CommitterId', description='The ID of the applicant. Note: The ID is different from the Alibaba Cloud account ID of the applicant.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the ticket was created.', example='2019-10-10 00:00:00'),
    lastModifyTime?: string(name='LastModifyTime', description='The time when the ticket was last modified.', example='2019-10-10 00:00:00'),
    orderId?: long(name='OrderId', description='The ID of the ticket.', example='12345'),
    pluginType?: string(name='PluginType', description='The type of the ticket. For more information about the value of this parameter, see the request parameters of the [CreateOrder](~~465865~~) operation.', example='DC_COMMON'),
    relatedUserList?: {
      userIds?: [ string ](name='UserIds')
    }(name='RelatedUserList', description='The IDs of the operators that are related to the ticket.'),
    relatedUserNickList?: {
      userNicks?: [ string ](name='UserNicks')
    }(name='RelatedUserNickList', description='The nicknames of the operators that are related to the ticket.'),
    statusCode?: string(name='StatusCode', description='The status code of the ticket. Valid values:

*   **new**: The ticket is created.
*   **toaudit**: The ticket is being reviewed.
*   **Approved**: The ticket is approved.
*   **reject**: The ticket is rejected.
*   **processing**: The ticket is being executed.
*   **success**: The ticket is executed.
*   **closed**: The ticket is closed.', example='success'),
    statusDesc?: string(name='StatusDesc', description='The description of the status.', example='success'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process.', example='1'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc', description='The description of the approval process.', example='approved'),
  }(name='OrderBaseInfo', description='The basic information about the ticket.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7133DF67-5B25-460F-8285-C4CC93472C2F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetOrderBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderBaseInfoResponseBody(name='body'),
}

async function getOrderBaseInfo(request: GetOrderBaseInfoRequest): GetOrderBaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderBaseInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOwnerApplyOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='730000', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetOwnerApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  ownerApplyOrderDetail?: {
    applyType?: string(name='ApplyType', example='DB'),
    resources?: [ 
      {
        logic?: boolean(name='Logic', example='true'),
        resourceDetail?: {
          dbType?: string(name='DbType', example='MYSQL'),
          envType?: string(name='EnvType', example='PRODUCT'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
          searchName?: string(name='SearchName', example='yuyang【test】'),
          tableName?: string(name='TableName', example='test'),
        }(name='ResourceDetail'),
        targetId?: string(name='TargetId', example='12345'),
      }
    ](name='Resources'),
  }(name='OwnerApplyOrderDetail'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB784055-E8CB-4461-AB0B-483A1DA32BB5'),
  success?: boolean(name='Success', example='true'),
}

model GetOwnerApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOwnerApplyOrderDetailResponseBody(name='body'),
}

async function getOwnerApplyOrderDetail(request: GetOwnerApplyOrderDetailRequest): GetOwnerApplyOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOwnerApplyOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPermApplyOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetPermApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  permApplyOrderDetail?: {
    applyType?: string(name='ApplyType', example='DB'),
    permType?: long(name='PermType', example='7'),
    resources?: [ 
      {
        columnInfo?: {
          columnName?: string(name='ColumnName', example='test_col'),
          tableName?: string(name='TableName', example='test_tb'),
        }(name='ColumnInfo'),
        databaseInfo?: {
          dbId?: long(name='DbId', example='12345'),
          dbType?: string(name='DbType', example='MySQL'),
          envType?: string(name='EnvType', example='product'),
          logic?: boolean(name='Logic', example='false'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
          searchName?: string(name='SearchName', example='test@xxxx:3306【test】'),
        }(name='DatabaseInfo'),
        instanceInfo?: {
          dbType?: string(name='DbType', example='MySQL'),
          dbaId?: long(name='DbaId', example='12345'),
          dbaNickName?: string(name='DbaNickName', example='test_dba'),
          envType?: string(name='EnvType', example='product'),
          host?: string(name='Host', example='xxxx'),
          instanceId?: string(name='InstanceId', example='12345'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickName?: [ string ](name='OwnerNickName'),
          port?: long(name='Port', example='3306'),
          searchName?: string(name='SearchName', example='xxxx:3306'),
        }(name='InstanceInfo'),
        tableInfo?: {
          tableName?: string(name='TableName', example='test_tb'),
        }(name='TableInfo'),
      }
    ](name='Resources'),
    seconds?: long(name='Seconds', example='3600'),
  }(name='PermApplyOrderDetail'),
  requestId?: string(name='RequestId', description='Id of the request', example='A4C4499E-5AC2-4318-9FCF-03E426781A04'),
  success?: boolean(name='Success', example='true'),
}

model GetPermApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetPermApplyOrderDetailResponseBody(name='body'),
}

async function getPermApplyOrderDetail(request: GetPermApplyOrderDetailRequest): GetPermApplyOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPermApplyOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: long(name='DbId', description='The ID of the physical database. You can call the [SearchDatabase](~~141876~~) operation to obtain the ID.', example='43153', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the ID of the tenant.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetPhysicalDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.

> : If the database is a PostgreSQL database, the name of the database is displayed.', example='def'),
    databaseId?: string(name='DatabaseId', description='The ID of the physical database.', example='43125312'),
    dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
    dbaId?: string(name='DbaId', description='The user ID of the DBA in the destination database.', example='43253'),
    dbaName?: string(name='DbaName', description='The nickname of the database administrator (DBA) in the destination database.', example='dmstest'),
    encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf8mb4'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. For more information, see [Change the environment type of an instance](~~163309~~).', example='product'),
    host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='rm-xxxab3r272.mysql.rds.aliyuncs.com'),
    instanceId?: string(name='InstanceId', description='The instance ID of the destination database.', example='43215325'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The user IDs of the database owners.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The nicknames of the database owners.'),
    port?: int32(name='Port', description='The port that is used to connect to the database.', example='3306'),
    schemaName?: string(name='SchemaName', description='The name of the database.

> : If the database is a PostgreSQL database, the name of the mode is displayed.', example='dmstest'),
    searchName?: string(name='SearchName', description='The name that is used for searching the database.', example='dmstest@rm-xxxab3r272.mysql.rds.aliyuncs.com:3306'),
    sid?: string(name='Sid', description='The system ID (SID) of the database.

> : The value of the parameter is returned only for Oracle databases.', example='def'),
    state?: string(name='State', description='The state of the database. Valid values:

*   **NORMAL**: The database is normal.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='NORMAL'),
  }(name='Database', description='The information about the physical database.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetPhysicalDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhysicalDatabaseResponseBody(name='body'),
}

async function getPhysicalDatabase(request: GetPhysicalDatabaseRequest): GetPhysicalDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', description='The ID of the secure access proxy. You can call the [ListProxies](~~295371~~) operation to query the ID of the secure access proxy.', example='4**', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetProxyResponseBody = {
  creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
  creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='The condition cannot be empty!'),
  httpsPort?: int32(name='HttpsPort', description='The port number used by the HTTPS protocol.', example='443'),
  instanceId?: long(name='InstanceId', description='The ID of the instance.', example='183****'),
  privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint was enabled. Default value: **true**.', example='true'),
  privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
  protocolPort?: int32(name='ProtocolPort', description='The port number used by the protocol.', example='3306'),
  protocolType?: string(name='ProtocolType', description='The protocol type of the database. Example: MYSQL.', example='MYSQL'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
  publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint was enabled. Valid values:

*   **true**: The public endpoint was enabled.
*   **false**: The public endpoint was disabled.', example='true'),
  publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.

> 

*   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS is returned.

*   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using Alibaba Cloud DNS is returned.', example='dphzmy-5j8oimjsz6zed7k****.proxy.dms.aliyuncs.com'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F49D4598-2B3C-5723-865E-2CCB818E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetProxyResponse = {
  headers: map[string]string(name='headers'),
  body: GetProxyResponseBody(name='body'),
}

async function getProxy(request: GetProxyRequest): GetProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProxy', 'POST', '/', 'json', false, 'json', request);
}

model GetProxyAccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', description='The ID that Data Management (DMS) generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](~~295386~~) operation to query the ID.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UserNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='The specified user not exists.'),
  proxyAccess?: {
    accessId?: string(name='AccessId', description='The username of the database account that is authorized to enable the secure access proxy feature for an instance.', example='hObpgEXoca42q***'),
    gmtCreate?: string(name='GmtCreate', description='The time when the user is authorized to enable the secure access proxy feature for an instance.', example='1643034647'),
    indepAccount?: string(name='IndepAccount', description='The username of the independent database account.', example='***'),
    instanceId?: long(name='InstanceId', description='The ID of the instance for which the secure access proxy feature is enabled.', example='1922545'),
    originInfo?: string(name='OriginInfo', description='The method that is used to authorize the user to enable the secure access proxy feature for an instance. Valid values:

*   **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the ID of the Alibaba Cloud account.
*   **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.', example='Authorization by the Alibaba Cloud account (29490401597700\\*\\*\\*\\*)'),
    proxyAccessId?: long(name='ProxyAccessId', description='The ID that DMS generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](~~295386~~) operation to query the ID.', example='2002'),
    proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.

>  You can call the [ListProxies](~~295371~~) operation to query the ID of the secure access proxy.', example='1905'),
    userId?: long(name='UserId', description='The ID of the user.', example='12***'),
    userName?: string(name='UserName', description='The nickname of the user.', example='user'),
    userUid?: string(name='UserUid', description='The ID of the Alibaba Cloud account.', example='25936669186260****'),
  }(name='ProxyAccess', description='The authorization information about the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  body: GetProxyAccessResponseBody(name='body'),
}

async function getProxyAccess(request: GetProxyAccessRequest): GetProxyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProxyAccess', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleNumLimitOfSLARequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetRuleNumLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  ruleNumLimit?: int32(name='RuleNumLimit', example='12'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleNumLimitOfSLAResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleNumLimitOfSLAResponseBody(name='body'),
}

async function getRuleNumLimitOfSLA(request: GetRuleNumLimitOfSLARequest): GetRuleNumLimitOfSLAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleNumLimitOfSLA', 'POST', '/', 'json', false, 'json', request);
}

model GetSQLReviewCheckResultStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket. You can obtain the ticket ID from the response parameters of the [CreateSQLReviewOrder](~~257777~~) operation.', example='123321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the ID of the tenant.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetSQLReviewCheckResultStatusResponseBody = {
  checkResultStatus?: {
    checkStatusResult?: {
      checkNotPass?: long(name='CheckNotPass', description='The number of SQL statements that failed to pass the review.', example='1'),
      checkPass?: long(name='CheckPass', description='The number of SQL statements that passed the review.', example='8'),
      forceNotPass?: long(name='ForceNotPass', description='The number of SQL statements that failed to pass the manual review.', example='0'),
      forcePass?: long(name='ForcePass', description='The number of SQL statements that passed the manual review.', example='1'),
      new?: long(name='New', description='The number of SQL statements to be reviewed.', example='0'),
      unknown?: long(name='Unknown', description='The number of abnormal SQL statements.', example='0'),
    }(name='CheckStatusResult', description='The result of the SQL status check.'),
    checkedCount?: long(name='CheckedCount', description='The number of SQL statements that were reviewed.', example='10'),
    SQLReviewResult?: {
      mustImprove?: long(name='MustImprove', description='The number of SQL statements that must be modified.', example='1'),
      potentialIssue?: long(name='PotentialIssue', description='The number of SQL statements that have potential issues.', example='0'),
      suggestImprove?: long(name='SuggestImprove', description='The number of SQL statements that can be modified.', example='3'),
      tableIndexSuggest?: long(name='TableIndexSuggest', description='The number of SQL statements that can use indexes.', example='2'),
      useDmsDmlUnlock?: long(name='UseDmsDmlUnlock', description='The number of SQL statements that can be used for lock-free data changes.', example='0'),
      useDmsToolkit?: long(name='UseDmsToolkit', description='The number of SQL statements that can be used for lock-free schema changes.', example='0'),
    }(name='SQLReviewResult', description='The optimization suggestion for SQL statements.'),
    totalSQLCount?: long(name='TotalSQLCount', description='The total number of SQL statements.', example='10'),
  }(name='CheckResultStatus', description='The result of the SQL review.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetSQLReviewCheckResultStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSQLReviewCheckResultStatusResponseBody(name='body'),
}

/**
  * For more information about the SQL review feature, see [SQL review](~~60374~~).
  *
 */
async function getSQLReviewCheckResultStatus(request: GetSQLReviewCheckResultStatusRequest): GetSQLReviewCheckResultStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSQLReviewCheckResultStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSQLReviewOptimizeDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  SQLReviewQueryKey: string(name='SQLReviewQueryKey', example='a57e54ec5433475ea3082d882fdb****', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetSQLReviewOptimizeDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  optimizeDetail?: {
    dbId?: int32(name='DbId', example='111222'),
    instanceId?: int32(name='InstanceId', example='123321'),
    qualityResult?: {
      errorMessage?: string(name='ErrorMessage', example='syntax error'),
      occurError?: boolean(name='OccurError', example='false'),
      results?: [ 
        {
          comments?: string(name='Comments'),
          feedback?: string(name='Feedback', example='MUST_IMPROVE'),
          messages?: [ string ](name='Messages'),
          ruleName?: string(name='RuleName', example='SELECT_SUGGEST_ASSIGN_WHERE'),
          ruleType?: string(name='RuleType', example='REVIEW'),
          scripts?: [ 
            {
              content?: string(name='Content', example='alter table xxx add index idx_xx(yyy);'),
              opType?: string(name='OpType', example='AddIndex'),
              tableName?: string(name='TableName', example='xxx'),
            }
          ](name='Scripts'),
        }
      ](name='Results'),
    }(name='QualityResult'),
    queryKey?: string(name='QueryKey', example='a57e54ec5433475ea3082d882fdb****'),
    sqlType?: string(name='SqlType', example='UPDATE'),
  }(name='OptimizeDetail'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model GetSQLReviewOptimizeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSQLReviewOptimizeDetailResponseBody(name='body'),
}

async function getSQLReviewOptimizeDetail(request: GetSQLReviewOptimizeDetailRequest): GetSQLReviewOptimizeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSQLReviewOptimizeDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncExecSqlDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='342153', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncExecSqlDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncExecSqlDetail?: {
    execSql?: string(name='ExecSql', description='The SQL statements that are executed.', example='/\\* origin table\\[helloz_bak] exist, target table\\[helloz_bak] not exist \\*/\\n/\\* generate \\[helloz_bak] create table sql \\*/\\ncreate table \\`helloz_bak\\`(\\n\\t\\`id\\` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT \\"Primary key\\",\\n\\t\\`gmt_create\\` datetime NOT NULL COMMENT \\"Creation time\\",\\n\\t\\`gmt_modified\\` datetime NOT NULL COMMENT \\"Modification time\\",\\n\\t\\`num\\` int(11) NOT NULL COMMENT \\"Number\\",\\n\\t\\`addr\\` varchar(50) CHARACTER SET utf8 COLLATE utf8\\_general_ci NOT NULL COMMENT \\"Address\\",\\n\\tPRIMARY KEY (\\`id\\`)\\n)\\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8\\_general_ci\\nCOMMENT=\\"test\\"\\n\\n;'),
    totalSqlCount?: long(name='TotalSqlCount', description='The total number of SQL statements.', example='1'),
  }(name='StructSyncExecSqlDetail', description='The details of the SQL statements.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetStructSyncExecSqlDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncExecSqlDetailResponseBody(name='body'),
}

async function getStructSyncExecSqlDetail(request: GetStructSyncExecSqlDetailRequest): GetStructSyncExecSqlDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncExecSqlDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncJobAnalyzeResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  compareType?: string(name='CompareType', example='CREATE_TABLE', position='Query'),
  orderId: long(name='OrderId', example='1342355', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
  pageSize?: long(name='PageSize', example='20', minimum=1, maximum=200, position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncJobAnalyzeResultResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncJobAnalyzeResult?: {
    resultList?: [ 
      {
        script?: string(name='Script'),
        sourceTableName?: string(name='SourceTableName', example='helloz_bak'),
        targetTableName?: string(name='TargetTableName', example='helloz_bak'),
      }
    ](name='ResultList'),
    summaryList?: [ 
      {
        compareType?: string(name='CompareType', example='CREATE_TABLE'),
        count?: long(name='Count', example='1'),
      }
    ](name='SummaryList'),
  }(name='StructSyncJobAnalyzeResult'),
  success?: boolean(name='Success', example='true'),
}

model GetStructSyncJobAnalyzeResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncJobAnalyzeResultResponseBody(name='body'),
}

async function getStructSyncJobAnalyzeResult(request: GetStructSyncJobAnalyzeResultRequest): GetStructSyncJobAnalyzeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncJobAnalyzeResult', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncJobDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The total number of tables.', example='4324321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The error message that is returned.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncJobDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The description of the task.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the ticket.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The status of the task. Valid values:

*   **NEW**: The task was created.
*   **COMPARING**: The schemas of tables were being compared.
*   **COMPARE_BREAK**: The schema comparison was interrupted.
*   **COMPARE_FINISH**: The schema comparison was complete.
*   **NOT_SCRIPTS**: The schema comparison was complete. No scripts were available.
*   **SUBMITED_DBTASK**: The task was submitted.
*   **DBTASK_SUCCESS**: The task was complete.
*   **SUBMITED_WORKFLOW**: The ticket was submitted for approval.
*   **WORKFLOW_SUCCESS**: The ticket was approved.', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  structSyncJobDetail?: {
    DBTaskGroupId?: long(name='DBTaskGroupId', example='12345'),
    executeCount?: long(name='ExecuteCount', example='1'),
    jobStatus?: string(name='JobStatus', description='The number of SQL statements that have been executed.', example='DBTASK_SUCCESS'),
    message?: string(name='Message', description='The details of the schema synchronization task.', example='test'),
    securityRule?: string(name='SecurityRule', example='WITHOUT_APPROVE'),
    sqlCount?: long(name='SqlCount', description='The number of tables that have been analyzed.', example='1'),
    tableAnalyzed?: long(name='TableAnalyzed', description='The type of security rule. Valid values:

*   **CANNOT_SYNC**: The schema synchronization is not allowed.
*   **WITH_APPROVE**: The schema synchronization can be performed after the ticket is approved. You can call the [SubmitStructSyncOrderApproval](~~206166~~) operation to submit the ticket for approval.
*   **WITHOUT_APPROVE**: The schema synchronization can be performed without approval.', example='2'),
    tableCount?: long(name='TableCount', description='The ID of the request.', example='2'),
  }(name='StructSyncJobDetail', description='1'),
  success?: boolean(name='Success', description='The total number of SQL statements.', example='true'),
}

model GetStructSyncJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncJobDetailResponseBody(name='body'),
}

async function getStructSyncJobDetail(request: GetStructSyncJobDetailRequest): GetStructSyncJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetStructSyncOrderDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='43****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetStructSyncOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  structSyncOrderDetail?: {
    ignoreError?: boolean(name='IgnoreError', description='Indicates whether to skip errors. Valid values:

*   **true**: skips the error and continues to execute SQL statements.
*   **false**: stops executing SQL statements.', example='false'),
    sourceDatabaseInfo?: {
      dbId?: long(name='DbId', description='The ID of the source database.', example='432532'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](~~163309~~).', example='dev'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database', example='false'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test'),
    }(name='SourceDatabaseInfo', description='The information about the source database.'),
    sourceType?: string(name='SourceType', description='The schema version of the source database. Valid values:

*   **DATASOURCE**: the default latest version of the system
*   **VERSION**: a previous schema version that you manually specify', example='VERSION'),
    sourceVersionInfo?: {
      versionId?: string(name='VersionId', description='The version number.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='SourceVersionInfo', description='The version information about the source instance.

> This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', description='The name of the table whose schema you want to synchronize.', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', description='The name of the table to which you want to synchronize the schema of a table.', example='test_tbl'),
      }
    ](name='TableInfoList', description='The information about the table whose schema you want to synchronize.'),
    targetDatabaseInfo?: {
      dbId?: long(name='DbId', description='The ID of the destination database.', example='432543'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='MySQL'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](~~163309~~).', example='dev'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database', example='false'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test'),
    }(name='TargetDatabaseInfo', description='The information about the destination database.'),
    targetType?: string(name='TargetType', description='The schema version of the destination database. Valid values:

*   **DATASOURCE**: the default latest version of the system
*   **VERSION**: a previous schema version that you manually specify', example='DATASOURCE'),
    targetVersionInfo?: {
      versionId?: string(name='VersionId', description='The version number.', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='TargetVersionInfo', description='The version information about the destination instance.

> This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.'),
  }(name='StructSyncOrderDetail', description='The details of the schema synchronization ticket.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetStructSyncOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncOrderDetailResponseBody(name='body'),
}

async function getStructSyncOrderDetail(request: GetStructSyncOrderDetailRequest): GetStructSyncOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStructSyncOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTableDBTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in DMS.

> 

*   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](~~141875~~) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.

*   If the database to which the table belongs is a physical database, you can call the [ListTables](~~141878~~) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.', example='IDB_L_9032.db-test.yuyang_test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableDBTopologyResponseBody = {
  DBTopology?: {
    dataSourceList?: [ 
      {
        databaseList?: [ 
          {
            dbId?: string(name='DbId', description='The ID of the database.', example='489347'),
            dbName?: string(name='DbName', description='The name of the database.', example='db-test'),
            dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MySQL'),
            envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: pre-release environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: staging environment

> For more information, see [Change the environment type of an instance](~~163309~~).', example='pre'),
            tableList?: [ 
              {
                tableId?: string(name='TableId', description='The ID of the table.', example='NORMAL'),
                tableName?: string(name='TableName', description='The name of the physical table.', example='151977812'),
                tableType?: string(name='TableType', description='The type of the table. This is a reserved parameter.', example='yuyang_test_0000'),
              }
            ](name='TableList', description='The physical tables.'),
          }
        ](name='DatabaseList', description='The physical databases.'),
        dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MySQL'),
        host?: string(name='Host', description='The endpoint of the data source.', example='xxx.mysql.polardb.rds.aliyuncs.com'),
        port?: int32(name='Port', description='The port that is used to connect to the data source.', example='3306'),
        sid?: string(name='Sid', description='The system ID (SID) of the data source.', example='def'),
      }
    ](name='DataSourceList', description='The data sources.'),
    tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_L_9032.db-test.yuyang_test'),
    tableName?: string(name='TableName', description='The name of the table.

> 

*   If a logical table is queried, the name of the logical table is returned.

*   If a physical table is queried, the name of the physical table is returned.', example='yuyang_test'),
  }(name='DBTopology', description='The topology of the data table.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='853F7FD4-D922-4EFB-931C-D253EF159E06'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetTableDBTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableDBTopologyResponseBody(name='body'),
}

async function getTableDBTopology(request: GetTableDBTopologyRequest): GetTableDBTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableDBTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetTableTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableGuid: string(name='TableGuid', description='The GUID of the table in Data Management (DMS).

> 
> - You can call the [ListLogicTables](~~141875~~) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.
> - You can call the [ListTables](~~141878~~) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.', example='IDB_L_308302.yuyang_test.test_ch', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Tenant information](~~181330~~) topic.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTableTopologyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5ED6A40-F344-4C7D-A8F0-5685CA584CA7'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  tableTopology?: {
    logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. Valid values:

*   **true**
*   **false**', example='true'),
    tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_L_308302.yuyang_test.test_ch'),
    tableName?: string(name='TableName', description='The name of the table.', example='test_ch'),
    tableTopologyInfoList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the physical database.', example='43215'),
        dbName?: string(name='DbName', description='The name of the database.', example='yuyang_test'),
        dbSearchName?: string(name='DbSearchName', description='The name that is used to search for the database.', example='yuyang_test@localhost:3306【yuyang_test_dev】'),
        dbType?: string(name='DbType', description='The database engine.', example='mysql'),
        instanceId?: long(name='InstanceId', description='The ID of the instance to which the physical database belongs.', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', description='The ID of the resource related to the instance. The resource corresponds with the database instance type returned in the InstanceSource parameter.

*   **RDS**:The ID of the ApsaraDB RDS instance.
*   **ECS_OWN**: The ID of the Elastic Compute Service (ECS) instance.
*   **PUBLIC_OWN**: This parameter is left empty for self-managed database instances that are connected over the Internet.
*   **VPC_ID**:The ID of the virtual private cloud (VPC).
*   **GATEWAY**: The ID of the database gateway.', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', description='The type of the database instance. Valid values:

*   **RDS**: an ApsaraDB RDS instance.
*   **ECS_OWN**: a self-managed database that is deployed on an ECS instance
*   **PUBLIC_OWN**: a self-managed database instance that is connected over the Internet.
*   **VPC_ID**: a self-managed database instance in a VPC that is connected over Express Connect circuits.
*   **GATEWAY**: a database instance connected by using a database gateway.', example='RDS'),
        regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
        tableCount?: long(name='TableCount', description='The number of tables.', example='6'),
        tableNameExpr?: string(name='TableNameExpr', description='The expression of the names of logical tables.

**

**Description** This parameter is not returned for physical tables.', example='test_ch_[0000-0005]'),
        tableNameList?: string(name='TableNameList', description='The names of tables.

> The table names are separated by commas (,).', example='test_ch_0000,test_ch_0001,test_ch_0002,test_ch_0003,test_ch_0004,test_ch_0005'),
      }
    ](name='TableTopologyInfoList', description='Information of the topology of the table.'),
  }(name='TableTopology', description='The topology information.'),
}

model GetTableTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableTopologyResponseBody(name='body'),
}

async function getTableTopology(request: GetTableTopologyRequest): GetTableTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTableTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: long(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node ID.', example='51***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='7838266C-E17B-58F4-B072-4DC356B58258'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  task?: {
    dagId?: long(name='DagId', description='The ID of the task flow to which the node belongs.', example='7321'),
    graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='{"{\\"x\\":0,\\"y\\":0,\\"layoutType\\":\\"Horizontal\\"}",  "id": 51***}'),
    nodeConfig?: string(name='NodeConfig', description='The advanced configuration for the node.', example='{\\\\"dbId\\\\":39\\*\\*\\*\\*,\\\\"dbType\\\\":\\\\"mysql\\\\",\\\\"locale\\\\":\\\\"zh\\\\",\\\\"sql\\\\":\\\\"/\\* Make sure that the following SQL statements meet your business requirements before submitting the SQL statements for execution. \\*/\\\\\\n\\\\\\nCREATE TABLE IF NOT EXISTS \\`momo_weekGather\\` (\\\\\\n\\\\\\t\\`id\\` bigint AUTO_INCREMENT DEFAULT \\"0\\",\\\\\\n\\\\\\t\\`age\\` bit NULL,\\\\\\n\\\\\\t\\`action\\` varchar(150) NULL,\\\\\\n\\\\\\t\\`elapse_time\\` datetime NULL,\\\\\\n\\\\\\tPRIMARY KEY (\\`id\\`)\\\\\\n) ENGINE=InnoDB\\\\\\nDEFAULT CHARACTER SET=utf8;\\\\"}'),
    nodeContent?: string(name='NodeContent', description='The configuration for the node.', example='{\\"dbList\\":[{\\"instanceId\\":177****}"   }'),
    nodeName?: string(name='NodeName', description='The name of the node.', example='Cross-database Spark SQL-1'),
    nodeOutput?: string(name='NodeOutput', description='The output variables for the node. This parameter is available only for some types of nodes.', example='{ "outputs":[ "extractMethod":"json" , "variableName":"var",   "description":"demo desc" } ] }'),
    nodeType?: string(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='SPARK_SQL'),
    timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
  }(name='Task', description='The task node.'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskFlowGraphRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***', position='Query'),
  tid?: long(name='Tid', description='The time variables for the node.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskFlowGraphResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the task flow.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The advanced configuration of the node.', example='D9D91166-A626-5F4E-9CA6-7AB10C59DBD8'),
  success?: boolean(name='Success', description='The operation that you want to perform. Set the value to **GetTaskFlowGraph**.', example='true'),
  taskFlowGraph?: {
    canEdit?: boolean(name='CanEdit', example='true'),
    dagName?: string(name='DagName', description='The ID of the node.', example='test'),
    edges?: {
      edge?: [ 
      {
        dagId?: long(name='DagId', example='15***'),
        id?: long(name='Id', example='24***'),
        nodeEnd?: long(name='NodeEnd', example='44***'),
        nodeFrom?: long(name='NodeFrom', example='44***'),
      }
    ](name='Edge')
    }(name='Edges'),
    nodes?: {
      node?: [ 
      {
        dagId?: long(name='DagId', description='The name of the node.', example='15***'),
        graphParam?: string(name='GraphParam', example='{\\"x\\":541,\\"y\\":322,\\"layoutType\\":\\"Horizontal\\"}'),
        nodeConfig?: string(name='NodeConfig'),
        nodeContent?: string(name='NodeContent', description='The ID of the request.', example='{ODI3OTNRVC****UHVFT29"}'),
        nodeId?: long(name='NodeId', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='44***'),
        nodeName?: string(name='NodeName', description='The position of the node in the DAG.', example='test'),
        nodeType?: long(name='NodeType', description='The list of DAG variables of the task flow.', example='36'),
        timeVariables?: string(name='TimeVariables', description='Queries the Directed Acyclic Graph (DAG) of a task flow.', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
      }
    ](name='Node')
    }(name='Nodes', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).'),
    status?: long(name='Status', example='2'),
  }(name='TaskFlowGraph', description='The error message returned if the request failed.'),
}

model GetTaskFlowGraphResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskFlowGraphResponseBody(name='body'),
}

async function getTaskFlowGraph(request: GetTaskFlowGraphRequest): GetTaskFlowGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskFlowGraph', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskFlowNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='15***', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  notification?: {
    dagNotificationFail?: boolean(name='DagNotificationFail', example='true'),
    dagNotificationSla?: boolean(name='DagNotificationSla', example='true'),
    dagNotificationSuccess?: boolean(name='DagNotificationSuccess', example='true'),
  }(name='Notification'),
  requestId?: string(name='RequestId', example='F19D575F-EBEA-5683-AFA3-A8F6D9A7DE03'),
  success?: boolean(name='Success', example='true'),
}

model GetTaskFlowNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskFlowNotificationResponseBody(name='body'),
}

async function getTaskFlowNotification(request: GetTaskFlowNotificationRequest): GetTaskFlowNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskFlowNotification', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskInstanceRelationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to obtain the execution record ID.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The business time of the node.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetTaskInstanceRelationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The operation that you want to perform. Set the value to **GetTaskInstanceRelation**.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The status of the node. Valid values:

*   **0**: The node is waiting to be scheduled.
*   **1**: The node is running.
*   **2**: The node is suspended.
*   **3**: The node failed to run.
*   **4**: The node is run.
*   **5**: The node is complete.', example='UnknownError'),
  nodeList?: {
    node?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The ID of the request.', example='2021-11-09 14:37:26'),
      endTime?: string(name='EndTime', example='2021-11-11 14:38:57'),
      executeTime?: long(name='ExecuteTime', example='170655'),
      id?: long(name='Id', description='The name of the node.', example='14059'),
      message?: string(name='Message', example='test'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='14059'),
      nodeName?: string(name='NodeName', description='The information about the nodes in the execution record of the task flow.', example='Spark SQL-1'),
      nodeType?: int32(name='NodeType', description='The ID of the execution record of the task flow.', example='36'),
      status?: int32(name='Status', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='4'),
    }
  ](name='Node')
  }(name='NodeList', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.'),
  requestId?: string(name='RequestId', description='The error code returned if the request fails.', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', description='The error message returned if the request fails.', example='true'),
}

model GetTaskInstanceRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskInstanceRelationResponseBody(name='body'),
}

async function getTaskInstanceRelation(request: GetTaskInstanceRelationRequest): GetTaskInstanceRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskInstanceRelation', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', position='Query'),
  uid?: string(name='Uid', description='The UID of the Alibaba Cloud account. You can view your UID by moving the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console.', example='22973492647626****', position='Query'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [ListUsers](~~141938~~) operation to query the ID of the user.', example='51****', position='Query'),
}

model GetUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='804BB128-CAFA-5DD0-BA1E-43DDE488****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request fails.', example='true'),
  user?: {
    curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that are performed on the current day.', example='3'),
    curResultCount?: long(name='CurResultCount', description='The number of rows that are queried on the current day.', example='28'),
    dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 

*   The system returns this parameter if the user has set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=***'),
    email?: string(name='Email', description='The email address that is used to receive notifications.

> 

*   The system returns this parameter if the user has set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set an email address.', example='Uesr_email'),
    lastLoginTime?: string(name='LastLoginTime', description='The last point in time when the user logged on to the console.', example='2021-11-08 11:26:21'),
    maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
    maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='10000'),
    mobile?: string(name='Mobile', description='The mobile number of the user.

> 

*   The system returns this parameter if the user has set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if the user has not set a mobile phone number.', example='1389223****'),
    nickName?: string(name='NickName', description='The nickname of the user.', example='User_NickName'),
    notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message
*   **EMAIL**: email.
*   **DINGDING**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='EMAIL'),
    parentUid?: long(name='ParentUid', description='The UID of the Alibaba Cloud account of the user.

> An Alibaba Cloud account can contain one or more RAM users.', example='140692647406****'),
    roleIdList?: {
      roleIds?: [ int32 ](name='RoleIds')
    }(name='RoleIdList', description='The list of role IDs.'),
    roleNameList?: {
      roleNames?: [ string ](name='RoleNames')
    }(name='RoleNameList', description='The list of role names.'),
    signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC_SHA1.', example='NONE'),
    state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
    uid?: string(name='Uid', description='The UID of the user.', example='22275482072787****'),
    userId?: string(name='UserId', description='The ID of the user.', example='51****'),
    webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 

*   If the user has set a webhook URL, DMS sends notifications to the specified URL.

*   The system does not return this parameter if the user has not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
  }(name='User', description='The information about the user.'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserActiveTenantRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The name of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetUserActiveTenantResponseBody = {
  errorCode?: string(name='ErrorCode', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The status of the tenant. Valid values:

*   **ACTIVE**: The tenant is used to access DMS.
*   **IN_ACTIVE**: The tenant is not used.', example='4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2'),
  success?: boolean(name='Success', example='true'),
  tenant?: {
    status?: string(name='Status', description='The error code.', example='ACTIVE'),
    tenantName?: string(name='TenantName', description='The operation that you want to perform. Set the value to **GetUserActiveTenant**.', example='test_name'),
    tid?: long(name='Tid', description='The ID of the request.', example='3***'),
  }(name='Tenant', description='The details of the tenant.'),
}

model GetUserActiveTenantResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserActiveTenantResponseBody(name='body'),
}

async function getUserActiveTenant(request: GetUserActiveTenantRequest): GetUserActiveTenantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserActiveTenant', 'POST', '/', 'json', false, 'json', request);
}

model GetUserUploadFileJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobKey: string(name='JobKey', description='The method used to upload the file. Valid values:

*   **URL**
*   **OSS**', example='65254a49100e', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='-1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetUserUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The key of the file that is returned after the file is uploaded. You can use this key when you upload the file as an attachment in a ticket.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The endpoint of the OSS bucket.', example='BDEFE9F2-B3B4-42D0-83AE-ECF9FC067DCD'),
  success?: boolean(name='Success', description='The size of the file. Unit: byte.', example='true'),
  uploadFileJobDetail?: {
    attachmentKey?: string(name='AttachmentKey', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql'),
    fileName?: string(name='FileName', description='The key of the file upload task. You can call the [CreateUploadFileJob](~~206059~~) or [CreateUploadOSSFileJob](~~206060~~) operation to query the key.', example='test.sql'),
    fileSize?: long(name='FileSize', description='-1', example='2968269'),
    fileSource?: string(name='FileSource', description='The information about the status of the file upload task.', example='datacorrect'),
    jobKey?: string(name='JobKey', description='The error message returned.', example='65254a4c1614235217749100e'),
    jobStatus?: string(name='JobStatus', example='SUCCESS'),
    jobStatusDesc?: string(name='JobStatusDesc', example='success'),
    uploadOSSParam?: {
      bucketName?: string(name='BucketName', description='The information about the Object Storage Service (OSS) bucket from which the file is uploaded.

>  This parameter is returned if the **UploadType** parameter is set to **OSS**.', example='test_bucket'),
      endpoint?: string(name='Endpoint', description='The URL of the file.

>  This parameter is returned if the **UploadType** parameter is set to **URL**.', example='http://oss-cn-hangzhou.aliyuncs.com'),
      objectName?: string(name='ObjectName', description='The ID of the request.', example='test.sql'),
    }(name='UploadOSSParam', description='The size of the uploaded file. Unit: byte.'),
    uploadType?: string(name='UploadType', description='The name of the file.', example='URL'),
    uploadURL?: string(name='UploadURL', description='The purpose of the uploaded file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='http://xxxx/test.sql'),
    uploadedSize?: long(name='UploadedSize', description='The key of the file upload task.', example='2968269'),
  }(name='UploadFileJobDetail', description='The name of the OSS bucket.'),
}

model GetUserUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserUploadFileJobResponseBody(name='body'),
}

async function getUserUploadFileJob(request: GetUserUploadFileJobRequest): GetUserUploadFileJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserUploadFileJob', 'POST', '/', 'json', false, 'json', request);
}

model GrantTemplateAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  comment?: string(name='Comment', description='The reason why you want to grant permissions on resources to the users by using the permission template.', example='Business test.', position='Query'),
  expireDate: string(name='ExpireDate', description='The time when the permission expires. Specify the time in the yyyy-MM-DD HH:mm:ss format.', example='2023-03-08 17:58:53', position='Query'),
  templateId: long(name='TemplateId', description='The ID of the permission template.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
  userIds: string(name='UserIds', description='The IDs of users to which you want to grant permissions on resources by using the permission template.', example='[12***,34***,56***]', position='Query'),
}

model GrantTemplateAuthorityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  result?: boolean(name='Result', description='Indicates whether the permissions on resources were granted to the users by using the permission template.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GrantTemplateAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: GrantTemplateAuthorityResponseBody(name='body'),
}

/**
  * You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function grantTemplateAuthority(request: GrantTemplateAuthorityRequest): GrantTemplateAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantTemplateAuthority', 'POST', '/', 'json', false, 'json', request);
}

model GrantUserPermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: string(name='DbId', description='The error message.', example='1***', position='Query'),
  dsType: string(name='DsType', description='The operation that you want to perform. Set the value to **GrantUserPermission**.', example='DATABASE', position='Query'),
  expireDate: string(name='ExpireDate', description='The ID of the request.', example='2021-12-12 00:00:00', position='Query'),
  instanceId?: long(name='InstanceId', description='The ID of the database. You can call the [ListDatabases](~~141873~~) operation to query the ID of a physical database and the [ListLogicDatabases](~~141874~~) operation to query the ID of a logical database.

>  The value of the DatabaseId parameter is that of the DbId parameter.', example='174****', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. You must specify this parameter if you grant permissions on a database to the user. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false', position='Query'),
  permTypes: string(name='PermTypes', description='The ID of the instance. You must specify this parameter if you grant permissions on an instance to the user. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to query the ID of the instance.', example='QUERY', position='Query'),
  tableId?: string(name='TableId', description='The permission type. Separate multiple permission types with commas (,). Valid values:

*   **QUERY**: the query permissions
*   **EXPORT**: the export permissions
*   **CORRECT**: the change permissions
*   **LOGIN**: the logon permissions
*   **PERF**: the query permissions on the performance details of the instance', example='132***', position='Query'),
  tableName?: string(name='TableName', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='table_name', position='Query'),
  tid?: long(name='Tid', description='The ID of the table. You must specify this parameter if you grant permissions on a table to the user. You can call the [ListTables](~~141878~~) operation to query the table ID.', example='3***', position='Query'),
  userId: string(name='UserId', description='The error code.', example='51****', position='Query'),
}

model GrantUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', example='true'),
}

model GrantUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantUserPermissionResponseBody(name='body'),
}

async function grantUserPermission(request: GrantUserPermissionRequest): GrantUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model InspectProxyAccessSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyAccessId: long(name='ProxyAccessId', example='1', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model InspectProxyAccessSecretResponseBody = {
  accessSecret?: string(name='AccessSecret', example='xxx'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model InspectProxyAccessSecretResponse = {
  headers: map[string]string(name='headers'),
  body: InspectProxyAccessSecretResponseBody(name='body'),
}

async function inspectProxyAccessSecret(request: InspectProxyAccessSecretRequest): InspectProxyAccessSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InspectProxyAccessSecret', 'POST', '/', 'json', false, 'json', request);
}

model ListClassificationTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The type of the classification template. Valid values:

*   **INNER**: built-in template
*   **USER_DEFINE**: custom template', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListClassificationTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the classification template.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The list of templates.', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', description='The name of the classification template.', example='true'),
  templateList?: [ 
    {
      name?: string(name='Name', description='Queries the classification templates.', example='test'),
      remark?: string(name='Remark', description='备注信息', example='test'),
      templateId?: long(name='TemplateId', description='The ID of the request.', example='3**'),
      templateType?: string(name='TemplateType', description='分类分级模板类型
- INNER：内置
- USER_DEFINE：自定义', example='USER_DEFINE'),
    }
  ](name='TemplateList', description='The remarks.'),
}

model ListClassificationTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClassificationTemplatesResponseBody(name='body'),
}

async function listClassificationTemplates(request: ListClassificationTemplatesRequest): ListClassificationTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClassificationTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListColumnsRequest {
  regionId?: string(name='RegionId', position='Host'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false', position='Query'),
  tableId: string(name='TableId', description='The ID of the table. You can call the [ListTables](~~141878~~) operation to obtain the table ID.', example='39281****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', position='Query'),
}

model ListColumnsResponseBody = {
  columnList?: {
    column?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the column is an auto-increment column. Valid values:

*   true: The column is an auto-increment column.
*   false: The column is not an auto-increment column.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the column.', example='62589****'),
      columnName?: string(name='ColumnName', description='The name of the column.', example='name'),
      columnType?: string(name='ColumnType', description='The data type of the column.', example='varchar'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='4'),
      dataPrecision?: int32(name='DataPrecision', description='The number of valid digits for the field.', example='0'),
      dataScale?: int32(name='DataScale', description='The number of decimal places for the field.', example='0'),
      defaultValue?: string(name='DefaultValue', description='The default value of the column.', example='def_value'),
      description?: string(name='Description', description='The description of the column.', example='test'),
      functionType?: string(name='FunctionType', description='The type of the masking algorithm that is used for the field. Valid values:

*   null: No masking algorithm is used.
*   DEFAULT: A full masking algorithm is used.
*   FIX_POS: The fixed position is masked.
*   FIX_CHAR: The fixed characters are replaced.', example='DEFAULT'),
      nullable?: boolean(name='Nullable', description='Indicates whether the column can be empty. Valid values:

*   **true**: The column can be empty.
*   **false**: The column cannot be empty.', example='false'),
      securityLevel?: string(name='SecurityLevel', description='The security level of the column. Valid values:

*   INNER: The column is an internal column but not sensitive.
*   SENSITIVE: The column is a sensitive column.
*   CONFIDENTIAL: The column is a confidential column.

> For more information, see [Sensitivity levels of fields](~~66091~~).', example='INNER'),
      sensitive?: boolean(name='Sensitive', description='Indicates whether the column is a sensitive column. Valid values:

*   **true**: The column is a sensitive column.
*   **false**: The column is not a sensitive column.', example='false'),
    }
  ](name='Column')
  }(name='ColumnList', description='The details about columns.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AD9AC55-5873-474A-9F33-4285806A3619'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: ListColumnsResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances whose control mode is Security Collaboration.
  *
 */
async function listColumns(request: ListColumnsRequest): ListColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListColumns', 'POST', '/', 'json', false, 'json', request);
}

model ListDAGVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The number of the page to return.', example='7***', position='Query'),
  pageIndex: int32(name='PageIndex', description='The number of entries to return on each page.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The error code returned if the request fails.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the previously published version.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDAGVersionsResponseBody = {
  dagVersionList?: {
    dagVersion?: [ 
    {
      dagName?: string(name='DagName', description='The name of the task flow owner.', example='Spark SQL'),
      dagOwnerId?: string(name='DagOwnerId', description='The name of the task flow.', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The ID of the request.', example='name'),
      lastVersionId?: long(name='LastVersionId', example='2****'),
      versionComments?: string(name='VersionComments', example='test_OSS'),
      versionId?: long(name='VersionId', example='2****'),
    }
  ](name='DagVersion')
  }(name='DagVersionList', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.'),
  errorCode?: string(name='ErrorCode', description='The information about the published versions.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ListDAGVersions**.', example='C7775630-7901-51B9-8782-9B585EC0799A'),
  success?: boolean(name='Success', description='The ID of the version.', example='true'),
  totalCount?: int32(name='TotalCount', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='1'),
}

model ListDAGVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDAGVersionsResponseBody(name='body'),
}

async function listDAGVersions(request: ListDAGVersionsRequest): ListDAGVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDAGVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListDBTaskSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DBTaskGroupId: long(name='DBTaskGroupId', example='1324235', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDBTaskSQLJobResponseBody = {
  DBTaskSQLJobList?: [ 
    {
      comment?: string(name='Comment', example='test'),
      createTime?: string(name='CreateTime', example='2021-02-18 17:49:20'),
      dbId?: long(name='DbId', example='43214523'),
      dbSearchName?: string(name='DbSearchName', example='test@xxx:3306【test】'),
      dbTaskGroupId?: long(name='DbTaskGroupId', example='4324132'),
      jobId?: long(name='JobId', example='123435'),
      jobType?: string(name='JobType', example='STRUCT_SYNC'),
      lastExecTime?: string(name='LastExecTime', example='2021-02-18 17:49:31'),
      logic?: boolean(name='Logic', example='false'),
      status?: string(name='Status', example='SUCCESS'),
      transactional?: boolean(name='Transactional', example='false'),
    }
  ](name='DBTaskSQLJobList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='F6C47680-8D2D-43A4-8902-F2740D71A398'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListDBTaskSQLJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListDBTaskSQLJobResponseBody(name='body'),
}

async function listDBTaskSQLJob(request: ListDBTaskSQLJobRequest): ListDBTaskSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDBTaskSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model ListDBTaskSQLJobDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: long(name='JobId', description='The number of times that the SQL statement was executed.', example='1276****', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumber?: long(name='PageNumber', description='The status of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The error code that is returned.', example='20', position='Query'),
  tid?: long(name='Tid', description='The ID of the physical database.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDBTaskSQLJobDetailResponseBody = {
  DBTaskSQLJobDetailList?: [ 
    {
      affectRows?: long(name='AffectRows', example='0'),
      currentSql?: string(name='CurrentSql', description='The duration of the SQL task. Unit: milliseconds.', example='update a set id = 1 where id  = 1;'),
      dbId?: long(name='DbId', description='The number of entries to return on each page.', example='1988****'),
      endTime?: string(name='EndTime', description='The ID of the request.', example='2021-12-16 00:00:01'),
      executeCount?: long(name='ExecuteCount', description='The point in time when the SQL task started.', example='1'),
      jobDetailId?: long(name='JobDetailId', description='The ID of the SQL task.', example='24723****'),
      jobId?: long(name='JobId', description='The number of the page to return.', example='1276****'),
      log?: string(name='Log', description='The details of the operational log.', example='log_info'),
      logic?: boolean(name='Logic', description='The details of SQL tasks.', example='false'),
      skip?: boolean(name='Skip', description='The error message that is returned.', example='false'),
      sqlType?: string(name='SqlType', description='The ID of the details of the SQL task.', example='CREATE_TABLE'),
      startTime?: string(name='StartTime', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='2021-12-16 00:00:00'),
      status?: string(name='Status', description='Indicates whether the SQL statement was skipped. Valid values:

*   **true**: The SQL statement was skipped.
*   **false**: The SQL statement was not skipped.', example='SUCCESS'),
      timeDelay?: long(name='TimeDelay', example='38'),
    }
  ](name='DBTaskSQLJobDetailList', description='The point in time when the SQL task ended.'),
  errorCode?: string(name='ErrorCode', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the SQL task. You can call the [ListDBTaskSQLJob](~~207049~~) operation to query the SQL task ID.', example='JobId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ListDBTaskSQLJobDetail**.', example='3F044E33-FE09-58F1-8C61-A0F612EC****'),
  success?: boolean(name='Success', description='The SQL statement that was executed in the SQL task.', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListDBTaskSQLJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListDBTaskSQLJobDetailResponseBody(name='body'),
}

async function listDBTaskSQLJobDetail(request: ListDBTaskSQLJobDetailRequest): ListDBTaskSQLJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDBTaskSQLJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListDDLPublishRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.

> You can create a schema design ticket in the Data Management (DMS) console. For more information, see [Design schemas](~~69711~~). You can also call the [CreateOrder](~~144649~~) operation to create a schema design ticket and obtain the ID of the ticket.', example='3214325', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, log on to the DMS console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDDLPublishRecordsResponseBody = {
  DDLPublishRecordList?: [ 
    {
      auditExpireTime?: string(name='AuditExpireTime', description='The time when the approval expires.', example='2020-12-14 20:52:38'),
      auditStatus?: string(name='AuditStatus', description='The approval state of the ticket. Valid values:

*   **EXEMPT_PASS**: The ticket passes without approval.
*   **TO_AUDIT**: The ticket is pending for approval.
*   **CANCEL**: The ticket is canceled.
*   **SUCCESS**: The ticket is approved.
*   **FAIL**: The ticket fails to pass the approval.', example='CANCEL'),
      comment?: string(name='Comment', description='发布备注'),
      creatorId?: long(name='CreatorId', description='The ID of the user who creates the ticket. You can obtain the user ID by calling the [GetUser](~~147098~~) operation and querying the value of the UserId parameter. The value is not the unique ID (UID) of the Alibaba Cloud account.', example='1423'),
      finality?: boolean(name='Finality', description='Indicates whether the approval is terminated. Valid values:

*   **true**: The approval is terminated.
*   **false**: The approval is not terminated.

> Multiple reasons can terminate the approval. For example, you withdraw the application or your ticket is not approved before the specified time.', example='true'),
      finalityReason?: string(name='FinalityReason', description='The reason for the termination.', example='CANCEL'),
      publishStatus?: string(name='PublishStatus', description='The publishing state of the ticket. Valid values:

*   **START**: The ticket is created.
*   **ANALYZE**: The ticket is under analysis.
*   **AUDIT**: The ticket is under approval.
*   **DISPATCH**: A task is generated for the ticket.
*   **SUCCESS**: The task is successful.', example='AUDIT'),
      publishTaskInfoList?: [ 
        {
          dbId?: long(name='DbId', description='The ID of the database.', example='4325'),
          logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: the database is not a logical database.', example='false'),
          planTime?: string(name='PlanTime', description='The time to publish the ticket.', example='2020-12-14 20:52:38'),
          publishJobList?: [ 
            {
              DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the SQL task group.', example='423515'),
              executeCount?: long(name='ExecuteCount', description='The number of SQL statements that are executed.', example='0'),
              scripts?: string(name='Scripts', description='The script for data changes.', example='ALTER TABLE test_toolkit_rename_table_after_rename MODIFY COLUMN gmt_modified datetime NOT NULL'),
              statusDesc?: string(name='StatusDesc', description='The description of the state.', example='NONE'),
              tableName?: string(name='TableName', description='The name of the table after the change.', example='test_toolkit_rename_table_after_rename'),
              taskJobStatus?: string(name='TaskJobStatus', description='The state of the publishing task. Valid values:

*   **NONE**: The state of the task is unknown.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task fails.', example='NONE'),
            }
          ](name='PublishJobList', description='The list of the publishing tasks.'),
          publishStrategy?: string(name='PublishStrategy', description='The publishing policy. Valid values:

*   **IMMEDIATELY**: immediately publishes the ticket.
*   **REGULARLY**: publishes the ticket at a scheduled time.', example='IMMEDIATELY'),
          statusDesc?: string(name='StatusDesc', description='The description of the state.', example='NONE'),
          taskJobStatus?: string(name='TaskJobStatus', description='The state of the task.', example='NONE'),
        }
      ](name='PublishTaskInfoList', description='The list of publishing tasks.'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the operation. Valid values:

*   **NONE_RISK**: The operation does not have risks.
*   **LOW_RISK**: The operation is at low risk.
*   **MIDDLE_RISK**: The operation is at medium risk.
*   **HIGH_RISK**: The operation is at high risk.', example='LOW_RISK'),
      statusDesc?: string(name='StatusDesc', description='The description of the publishing state.', example='CANCEL'),
      workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process.', example='432153'),
    }
  ](name='DDLPublishRecordList', description='The details of the publishing records.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A1549FB0-D4B8-4140-919F-17322C1072B8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListDDLPublishRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDDLPublishRecordsResponseBody(name='body'),
}

async function listDDLPublishRecords(request: ListDDLPublishRecordsRequest): ListDDLPublishRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDDLPublishRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListDataCorrectPreCheckDBRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The error code returned.', example='432****', position='Query'),
  pageNumber?: long(name='PageNumber', description='The operation that you want to perform. Set the value to **ListDataCorrectPreCheckDB**.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The error message returned.', example='20', position='Query'),
  tid?: long(name='Tid', description='The information about the databases that are involved in the precheck.', example='4321****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataCorrectPreCheckDBResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the ID of the tenant.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The name of the database.', example='UnknownError'),
  preCheckDBList?: [ 
    {
      dbId?: long(name='DbId', example='43***'),
      searchName?: string(name='SearchName', example='test@localhost:3306'),
      sqlNum?: long(name='SqlNum', example='1'),
    }
  ](name='PreCheckDBList', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='The ID of the ticket for the data change.', example='95A972AF-FAED-4768-9360-7C0DF5D594D0'),
  success?: boolean(name='Success', description='The number of SQL statements.', example='true'),
}

model ListDataCorrectPreCheckDBResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataCorrectPreCheckDBResponseBody(name='body'),
}

/**
  * The number of entries to return on each page.
  *
 */
async function listDataCorrectPreCheckDB(request: ListDataCorrectPreCheckDBRequest): ListDataCorrectPreCheckDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataCorrectPreCheckDB', 'POST', '/', 'json', false, 'json', request);
}

model ListDataCorrectPreCheckSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: long(name='DbId', description='The operation that you want to perform. Set the value to **ListDataCorrectPreCheckSQL**.', example='1930****', position='Query'),
  orderId: long(name='OrderId', description='The number of entries to return on each page.', example='453****', position='Query'),
  pageNumber?: long(name='PageNumber', description='The error code returned.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](~~265977~~) operation to query the details of optimization suggestions based on the key.', example='10', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataCorrectPreCheckSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The SQL statement.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the data change ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the data change ticket.', example='UnknownError'),
  preCheckSQLList?: [ 
    {
      affectRows?: long(name='AffectRows', description='The review status of the SQL statement. Valid values:

*   **WAITING**: The SQL statement is pending for review.
*   **RUNNING**: The SQL statement is being reviewed.
*   **IGNORE**: The SQL statement review is skipped.
*   **PASS**: The SQL statement passed the review.
*   **BLOCK**: The SQL statement failed the review.', example='0'),
      checkSQL?: string(name='CheckSQL', description='The estimated number of affected rows.', example='CheckSQL": "OPTIMIZE TABLE `Text_TableNames`'),
      dbId?: long(name='DbId', description='The name of the table whose data is changed.', example='1930****'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The ID of the request.', example='b9e771fc6ec247dea6d06a32c777****'),
      sqlReviewStatus?: string(name='SqlReviewStatus', example='WAITING'),
      sqlType?: string(name='SqlType', example='OPTIMIZE'),
      tableNames?: string(name='TableNames', example='Text_TableNames'),
    }
  ](name='PreCheckSQLList', description='The ID of the database. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.'),
  requestId?: string(name='RequestId', description='The error message returned.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='The ID of the database.', example='true'),
}

model ListDataCorrectPreCheckSQLResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataCorrectPreCheckSQLResponseBody(name='body'),
}

/**
  * The precheck information about SQL statements.
  *
 */
async function listDataCorrectPreCheckSQL(request: ListDataCorrectPreCheckSQLRequest): ListDataCorrectPreCheckSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataCorrectPreCheckSQL', 'POST', '/', 'json', false, 'json', request);
}

model ListDataImportSQLPreCheckDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='11****', minimum=1, maximum=9223372036854775807, position='Query'),
  pageNumer?: long(name='PageNumer', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  sqlType?: string(name='SqlType', example='INSERT', position='Query'),
  statusCode?: string(name='StatusCode', example='SUCCESS', position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataImportSQLPreCheckDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  preCheckSQLDetailList?: [ 
    {
      skip?: boolean(name='Skip', example='true'),
      sqlId?: long(name='SqlId', example='1'),
      sqlType?: string(name='SqlType', example='INSERT'),
      statusCode?: string(name='StatusCode', example='SUCCESS'),
    }
  ](name='PreCheckSQLDetailList'),
  requestId?: string(name='RequestId', description='Id of the request', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListDataImportSQLPreCheckDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataImportSQLPreCheckDetailResponseBody(name='body'),
}

async function listDataImportSQLPreCheckDetail(request: ListDataImportSQLPreCheckDetailRequest): ListDataImportSQLPreCheckDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataImportSQLPreCheckDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListDataImportSQLTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDataImportSQLTypeResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  sqlTypeResult?: [ string ](name='SqlTypeResult'),
  success?: boolean(name='Success', example='true'),
}

model ListDataImportSQLTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataImportSQLTypeResponseBody(name='body'),
}

async function listDataImportSQLType(request: ListDataImportSQLTypeRequest): ListDataImportSQLTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataImportSQLType', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabaseUserPermssionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the database.', example='123', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  permType: string(name='PermType', description='The type of the permission. Valid values:

*   DATABASE: permissions on databases
*   TABLE: permissions on tables
*   COLUMN: permissions on fields', example='DATABASE', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
  userName?: string(name='UserName', description='The nickname of the user.', example='search_user_name', position='Query'),
}

model ListDatabaseUserPermssionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68075D06-7406-4887-83A7-F558A4D28C13'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', description='The alias of the database instance.', example='instance_alias'),
      columnName?: string(name='ColumnName', description='The name of a column.', example='column_name'),
      dbId?: string(name='DbId', description='The ID of the database.', example='1234'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dsType?: string(name='DsType', description='The type of resources on which the user has permissions.', example='DATABASE'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='product'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='1443'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database.', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permission was created.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='The extra information. This parameter is reserved.', example='DEFAULT'),
          originFrom?: string(name='OriginFrom', description='The description of the entity that authorizes the permission.', example='xxx grant'),
          permType?: string(name='PermType', description='The type of the permission. Valid values:

*   QUERY: the query permissions
*   EXPORT: the export permissions
*   CORRECT: the change permissions', example='QUERY'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='13434'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of user permissions.'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='xxx@xxxx:3306'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='xxx'),
      tableId?: string(name='TableId', description='The ID of the table.', example='42345'),
      tableName?: string(name='TableName', description='The name of the table.', example='table_name'),
      userId?: string(name='UserId', description='The ID of the user.', example='14324'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='user_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The details of user permissions.'),
}

model ListDatabaseUserPermssionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatabaseUserPermssionsResponseBody(name='body'),
}

async function listDatabaseUserPermssions(request: ListDatabaseUserPermssionsRequest): ListDatabaseUserPermssionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseUserPermssions', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance. The valid value is returned if you call the ListInstances operation. The instance ID is not the ID of the RDS instance.', example='12***', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.', example='10', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='3***', position='Query'),
}

model ListDatabasesResponseBody = {
  databaseList?: {
    database?: [ 
    {
      catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.', example='1'),
      databaseId?: string(name='DatabaseId', description='The ID of the database.', example='1'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dbaId?: string(name='DbaId', description='The ID of the DBA.', example='1'),
      dbaName?: string(name='DbaName', description='The nickname of the Database administrator (DBA) to which the database belongs.', example='dba_user'),
      encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf-8'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='dev'),
      host?: string(name='Host', description='The endpoint of the instance to which the database belongs.', example='xxx.xxx.xxx.xxx'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the database belongs.', example='1'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the database.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the database owners.'),
      port?: int32(name='Port', description='The connection port of the instance to which the database belongs.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
      searchName?: string(name='SearchName', description='The name that is used for searching the database.', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', description='The system ID (SID) of the instance to which the database belongs.', example='test'),
      state?: string(name='State', description='The state of the database. Valid values:

*   NORMAL: The database is normal.
*   DISABLE: The database is disabled.
*   OFFLINE: The database is unpublished.
*   NOT_EXIST: The database does not exist.', example='NORMAL'),
    }
  ](name='Database')
  }(name='DatabaseList', description='The details of the databases.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5541CDA6-F674-435C-81BD-40C2FB926CE3'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of databases that belong to an instance.', example='1'),
}

model ListDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatabasesResponseBody(name='body'),
}

async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListDefaultSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDefaultSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='3E8AF4C3-A822-53A8-970C-059EE83BBD5A'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', example='0'),
      id?: long(name='Id', example='1'),
      intervalMinutes?: int32(name='IntervalMinutes', example='1080'),
      nodeId?: long(name='NodeId', example='0'),
      ruleType?: int32(name='RuleType', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList'),
  success?: boolean(name='Success', example='true'),
}

model ListDefaultSLARulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDefaultSLARulesResponseBody(name='body'),
}

async function listDefaultSLARules(request: ListDefaultSLARulesRequest): ListDefaultSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDefaultSLARules', 'POST', '/', 'json', false, 'json', request);
}

model ListDesensitizationRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  funcType?: string(name='FuncType', description='The description of the rule.', example='MD5', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The name of the masking rule.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The ID of the masking rule.', example='20', position='Query'),
  ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='1', position='Query'),
  ruleName?: string(name='RuleName', description='The example.', position='Query'),
  ruleType?: string(name='RuleType', description='The number of the page to return.', example='HASH', position='Query'),
  tid?: long(name='Tid', description='The name of the masking rule.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListDesensitizationRuleResponseBody = {
  desensitizationRuleList?: [ 
    {
      funcParams?: string(name='FuncParams', description='The type of the masking algorithm.', example='{paramName: salt, paramValue: 1}'),
      funcSample?: string(name='FuncSample', description='The algorithm type.', example='[{paramName: testStr, paramValue: 1}]'),
      functionType?: string(name='FunctionType', description='The algorithm used for masking.', example='MD5'),
      lastModifierId?: string(name='LastModifierId', description='The ID of the request.', example='2'),
      lastModifierName?: string(name='LastModifierName'),
      referenceCount?: int32(name='ReferenceCount', example='1'),
      ruleDesc?: string(name='RuleDesc', description='The ID of the user who last modified the masking rule.'),
      ruleId?: int32(name='RuleId', example='23'),
      ruleName?: string(name='RuleName', description='The error message returned if the request failed.'),
      ruleType?: string(name='RuleType', description='The parameter.', example='HASH'),
    }
  ](name='DesensitizationRuleList', description='The list of masking rules.'),
  errorCode: string(name='ErrorCode', description='The algorithm used for masking.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](~~181330~~).', example='UnknownError'),
  requestId?: string(name='RequestId', description='The name of the user who last modified the masking rule.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', description='The number of times that the masking was used.', example='true'),
  totalCount?: int32(name='TotalCount', description='The number of entries to return on each page. The maximum value is 100.', example='1'),
}

model ListDesensitizationRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListDesensitizationRuleResponseBody(name='body'),
}

async function listDesensitizationRule(request: ListDesensitizationRuleRequest): ListDesensitizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDesensitizationRule', 'POST', '/', 'json', false, 'json', request);
}

model ListEffectiveOrdersRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListEffectiveOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  orderSummary?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='DMS的商品Code
- 中国站：dms_pre_public_cn（包年包月）、dms_post_public_cn（按量付费）
- 国际站：dms_pre_public_intl（包年包月）、dms_post_public_intl（按量付费）'),
      commodityType?: string(name='CommodityType', description='商品类型
- versionType：管控模式
- SensitiveDataProtection：敏感数据保护', example='VersionType'),
      orderList?: [ 
        {
          buyerId?: string(name='BuyerId', description='购买用户UID', example='2698420314****'),
          endTime?: string(name='EndTime', description='订单到期时间', example='2022-11-24 00:00:00'),
          insNum?: string(name='InsNum', description='订单购买规格', example='7'),
          instanceId?: string(name='InstanceId', description='购买商品实例ID', example='rm-bp1xd1v866****'),
          orderId?: string(name='OrderId', description='购买订单ID', example='2190037****'),
          startTime?: string(name='StartTime', description='订单开始时间', example='2022-10-24 00:00:00'),
        }
      ](name='OrderList', description='订单明细'),
      totalQuota?: int32(name='TotalQuota', description='OrderList订单明细额度总和', example='12'),
      versionType?: string(name='VersionType', description='商品类型为管控模式时（CommodityType = versionType ），区分管控模式的类型：
- stand：稳定变更
- safety：安全协同', example='safety'),
    }
  ](name='OrderSummary'),
  requestId?: string(name='RequestId', description='Id of the request', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', example='true'),
}

model ListEffectiveOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListEffectiveOrdersResponseBody(name='body'),
}

async function listEffectiveOrders(request: ListEffectiveOrdersRequest): ListEffectiveOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEffectiveOrders', 'POST', '/', 'json', false, 'json', request);
}

model ListIndexesRequest {
  regionId?: string(name='RegionId', position='Host'),
  logic?: boolean(name='Logic', description='Specifies whether the table is a logical table.', example='false', position='Query'),
  tableId: string(name='TableId', description='The ID of the table.', example='1', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='0', position='Query'),
}

model ListIndexesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  indexList?: {
    index?: [ 
    {
      indexComment?: string(name='IndexComment', description='The description of the index.', example='test'),
      indexId?: string(name='IndexId', description='The ID of the index.', example='1'),
      indexName?: string(name='IndexName', description='The name of the index.', example='idx_test'),
      indexType?: string(name='IndexType', description='The type of the index. Valid values:

*   Primary
*   Unique
*   Normal
*   FullText
*   Spatial', example='Primary'),
      tableId?: string(name='TableId', description='The ID of the table.', example='1'),
    }
  ](name='Index')
  }(name='IndexList', description='The details of indexes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1F4DE2F1-5B47-462A-A973-E02EB7AF386B'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListIndexesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIndexesResponseBody(name='body'),
}

async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIndexes', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceLoginAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='2021-11-18 18:00:00', position='Query'),
  opUserName?: string(name='OpUserName', description='The error code returned.', example='test_OpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The logon records of the instance.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The alias of the user.', example='20', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', description='The ID of the instance.', example='test_SearchName', position='Query'),
  startTime: string(name='StartTime', description='The name of the database or instance whose logon records you want to query.

>  If SQL statements are executed at the instance level, you can set this parameter to an instance name. If SQL statements are executed at the database level, you can set this parameter to a database name.', example='2021-11-18 11:00:00', position='Query'),
  tid?: long(name='Tid', description='The operation that you want to perform. Set the value to **ListInstanceLoginAuditLog**.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListInstanceLoginAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the user.', example='InvalidPageSize'),
  errorMessage?: string(name='ErrorMessage', description='The number of the page to return.', example='Specified parameter PageSize is not valid.'),
  instanceLoginAuditLogList?: {
    instanceLoginAuditLog?: [ 
    {
      dbUser?: string(name='DbUser', example='test_User'),
      instanceId?: long(name='InstanceId', example='177****'),
      instanceName?: string(name='InstanceName', description='The ID of the request.', example='rm-bp144d5ky4l4rli0417****.mysql.rds.aliyuncs.com:3306【rm-bp144d5ky4l4r****】'),
      opTime?: string(name='OpTime', description='The name of the instance.', example='2021-11-18 11:13:26'),
      requestIp?: string(name='RequestIp', example='117.36.XX.XX,100.104.XX.XX'),
      userId?: long(name='UserId', description='The source IP address of the request.', example='12****'),
      userName?: string(name='UserName', description='The alias of the user.', example='test_UserName'),
    }
  ](name='InstanceLoginAuditLog')
  }(name='InstanceLoginAuditLogList', description='The database account that is used to log on to the instance.'),
  requestId?: string(name='RequestId', description='The error message returned.', example='074CE7C9-4F9C-5B62-89BC-7B4914A3****'),
  success?: boolean(name='Success', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries to return on each page. Maximum value: 100.', example='1'),
}

model ListInstanceLoginAuditLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceLoginAuditLogResponseBody(name='body'),
}

async function listInstanceLoginAuditLog(request: ListInstanceLoginAuditLogRequest): ListInstanceLoginAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceLoginAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceUserPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The user who grants the permissions.', example='174****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The ID of the instance.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The time when the permissions expire.', example='100', position='Query'),
  tid?: long(name='Tid', description='The nickname of the user. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to query the nickname of the user.

>  The value of the NickName parameter is that of the UserName parameter.', example='3***', position='Query'),
  userName?: string(name='UserName', description='The error code.', example='test_nick_name', position='Query'),
}

model ListInstanceUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the authorization record.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The number of entries to return on each page.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ListInstanceUserPermissions**.', example='7D162AAE-6501-5691-BF14-D7018F662895'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', description='The nickname of the user.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      instanceId?: string(name='InstanceId', description='The details of permissions.', example='174****'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='Queries the permissions of a user on a specific instance.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The ID of the request.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', example='XXX'),
          originFrom?: string(name='OriginFrom', description='The type of the permissions. Valid values:

*   LOGIN: the logon permissions
*   PERF: the query permissions on the instance'),
          permType?: string(name='PermType', description='The time when the permissions were granted.', example='LOGIN'),
          userAccessId?: string(name='UserAccessId', example='773****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The number of the page to return.'),
      userId?: string(name='UserId', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='51****'),
      userNickName?: string(name='UserNickName', description='The ID of the user.', example='test_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The error message.'),
}

model ListInstanceUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceUserPermissionsResponseBody(name='body'),
}

async function listInstanceUserPermissions(request: ListInstanceUserPermissionsRequest): ListInstanceUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The alias of the database instance.', example='MySQL', position='Query'),
  envType?: string(name='EnvType', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
*   **RDS**: an ApsaraDB RDS instance
*   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='product', position='Query'),
  instanceSource?: string(name='InstanceSource', description='The timeout period for querying data in the database instance.', example='RDS', position='Query'),
  instanceState?: string(name='InstanceState', description='The network type of the database instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='NORMAL', position='Query'),
  netType?: string(name='NetType', description='The status of the database instance.', example='VPC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Indicates whether the lock-free schema change feature is enabled for the database instance.', example='50', position='Query'),
  searchKey?: string(name='SearchKey', description='The operation that you want to perform. Set the value to **ListInstances**.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the owner for the database instance.', example='3***', position='Query'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The system ID (SID) of the database instance.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The name of the security rule set corresponding to the control mode.', example='UnknownError'),
  instanceList?: {
    instance?: [ 
    {
      dataLinkName?: string(name='DataLinkName', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='dblink_test'),
      databasePassword?: string(name='DatabasePassword', example='******'),
      databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database.', example='dbUser'),
      dbaId?: string(name='DbaId', description='The ID of the ECS instance on which the database instance is deployed.', example='31****'),
      dbaNickName?: string(name='DbaNickName', description='The ID of the database instance.', example='dbaName'),
      ddlOnline?: int32(name='DdlOnline', example='1'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='150****'),
      ecsRegion?: string(name='EcsRegion', example='cn-hangzhou'),
      envType?: string(name='EnvType', description='The status of the database instance. Valid values:

*   **NORMAL**: normal
*   **DISABLE**: disabled', example='product'),
      exportTimeout?: int32(name='ExportTimeout', description='The ID of the request.', example='86400'),
      host?: string(name='Host', description='The ID of the database administrator (DBA) for the database instance.', example='****.mysql.rds.aliyuncs.com'),
      instanceAlias?: string(name='InstanceAlias', example='test'),
      instanceId?: string(name='InstanceId', description='The timeout period for exporting data from the database instance.', example='150***'),
      instanceSource?: string(name='InstanceSource', description='Indicates whether the cross-database query feature is enabled for the database instance. Valid values:

*   **0**: disabled
*   **1**: enabled', example='RDS'),
      instanceType?: string(name='InstanceType', description='Queries the information about database instances.', example='mysql'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The host address that is used to connect to the database instance.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The error message that is returned.'),
      port?: int32(name='Port', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='3306'),
      queryTimeout?: int32(name='QueryTimeout', description='The number of entries to return on each page. The number cannot exceed 100.', example='60'),
      safeRuleId?: string(name='SafeRuleId', description='The password that is used to log on to the database.', example='1'),
      sellSitd?: boolean(name='SellSitd', description='为true，敏感数据保护开启，否则未开启', example='true'),
      sid?: string(name='Sid', description='The name of the database link for the database instance.', example='test'),
      standardGroup?: {
        groupMode?: string(name='GroupMode', example='COMMON'),
        groupName?: string(name='GroupName', example='test'),
      }(name='StandardGroup'),
      state?: string(name='State', description='The source of the database instance.', example='NORMAL'),
      useDsql?: int32(name='UseDsql', description='The keyword that is used to search for database instances.', example='1'),
      vpcId?: string(name='VpcId', description='The ID of the region in which the database instance resides.', example='vpc-o6wrloqsdqc9io3mg****'),
    }
  ](name='Instance')
  }(name='InstanceList', description='The number of the page to return.'),
  requestId?: string(name='RequestId', description='The control mode of the database instance.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', description='The information about the database instances that are returned.', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListLhTaskFlowAndScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  spaceId: long(name='SpaceId', description='The name of the user who creates the workspace.', example='24', position='Query'),
  tid?: long(name='Tid', description='The ID of the workspace. You can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  userId?: long(name='UserId', description='The user ID of the task flow owner.', example='51****', position='Query'),
}

model ListLhTaskFlowAndScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  rawDAGList?: {
    dag?: [ 
    {
      canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow is deleted. Valid values:

*   **true**: deleted
*   **false**: not deleted', example='true'),
      creatorId?: string(name='CreatorId', description='The ID of the workspace.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The status of the latest execution. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='Creator_Name'),
      dagName?: string(name='DagName', example='Dag_Name'),
      dagOwnerId?: string(name='DagOwnerId', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The ID of the latest deployment record.', example='Owner_Name'),
      dataFlowId?: long(name='DataFlowId', description='The name of the task flow owner.', example='-'),
      demoId?: string(name='DemoId', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='-'),
      deployId?: long(name='DeployId', description='The ID of the business scenario.', example='12**'),
      id?: long(name='Id', description='The status of the task flow. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='134137****'),
      isDeleted?: boolean(name='IsDeleted', description='The ID of the user. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.', example='false'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The name of the task flow.', example='0'),
      latestInstanceTime?: int32(name='LatestInstanceTime', description='Queries the task flows corresponding to a specific business scenario in a workspace in Data Management (DMS).', example='2022-04-14'),
      scenarioId?: long(name='ScenarioId', description='The task flows in the default business scenario.', example='2**'),
      spaceId?: long(name='SpaceId', description='The extended field. No meaning is specified for this field.', example='1'),
      status?: int32(name='Status', description='The ID of the task flow.', example='2'),
    }
  ](name='Dag')
  }(name='RawDAGList', description='The extended field. No meaning is specified for this field.'),
  requestId?: string(name='RequestId', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  scenarioDAGList?: {
    scenarioDAG?: [ 
    {
      dagList?: {
        dag?: [ 
        {
          canEdit?: boolean(name='CanEdit', example='true'),
          creatorId?: string(name='CreatorId', example='51****'),
          creatorNickName?: string(name='CreatorNickName', example='Creator_Name'),
          dagName?: string(name='DagName', example='Dag_Name'),
          dagOwnerId?: string(name='DagOwnerId', example='51****'),
          dagOwnerNickName?: string(name='DagOwnerNickName', example='Owner_Name'),
          dataFlowId?: long(name='DataFlowId', example='-'),
          demoId?: string(name='DemoId', example='-'),
          deployId?: long(name='DeployId', example='12**'),
          id?: long(name='Id', example='9***'),
          isDeleted?: boolean(name='IsDeleted', example='false'),
          latestInstanceStatus?: int32(name='LatestInstanceStatus', example='1'),
          latestInstanceTime?: int32(name='LatestInstanceTime', example='2022-04-14'),
          scenarioId?: long(name='ScenarioId', example='2**'),
          spaceId?: long(name='SpaceId', example='1'),
          status?: int32(name='Status', example='1'),
        }
      ](name='Dag')
      }(name='DagList'),
      scenario?: {
        creatorId?: string(name='CreatorId', example='51****'),
        description?: string(name='Description', example='test'),
        scenarioName?: string(name='ScenarioName', example='Scenario_2'),
      }(name='Scenario'),
    }
  ](name='ScenarioDAG')
  }(name='ScenarioDAGList'),
  success?: boolean(name='Success', example='true'),
}

model ListLhTaskFlowAndScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: ListLhTaskFlowAndScenarioResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **ListLhTaskFlowAndScenario**.
  *
 */
async function listLhTaskFlowAndScenario(request: ListLhTaskFlowAndScenarioRequest): ListLhTaskFlowAndScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLhTaskFlowAndScenario', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicDatabasesRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  tid?: long(name='Tid', position='Query'),
}

model ListLogicDatabasesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  logicDatabaseList?: {
    logicDatabase?: [ 
    {
      alias?: string(name='Alias', example='logic_db_alias'),
      databaseId?: string(name='DatabaseId', example='1***'),
      databaseIds?: {
        databaseIds?: [ long ](name='DatabaseIds')
      }(name='DatabaseIds'),
      dbType?: string(name='DbType'),
      envType?: string(name='EnvType', example='test'),
      logic?: boolean(name='Logic', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      schemaName?: string(name='SchemaName', example='logic_db'),
      searchName?: string(name='SearchName', example='logic_db【logic_db_alias】'),
    }
  ](name='LogicDatabase')
  }(name='LogicDatabaseList'),
  requestId?: string(name='RequestId', example='8068AF82-8A1A-592C-AC2E-6B75338BAB87'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='7'),
}

model ListLogicDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogicDatabasesResponseBody(name='body'),
}

async function listLogicDatabases(request: ListLogicDatabasesRequest): ListLogicDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicTableRouteConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  tableId: long(name='TableId', example='1****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='MissingTableId'),
  errorMessage?: string(name='ErrorMessage', example='TableId is mandatory for this action.'),
  logicTableRouteConfigList?: {
    logicTableRouteConfig?: [ 
    {
      routeExpr?: string(name='RouteExpr', example='#id#%16\\t'),
      routeKey?: string(name='RouteKey', example='1'),
      tableId?: long(name='TableId', example='4****'),
    }
  ](name='LogicTableRouteConfig')
  }(name='LogicTableRouteConfigList'),
  requestId?: string(name='RequestId', example='7C6A0D7D-B034-59F6-854C-32425AC6****'),
  success?: boolean(name='Success', example='true'),
}

model ListLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogicTableRouteConfigResponseBody(name='body'),
}

async function listLogicTableRouteConfig(request: ListLogicTableRouteConfigRequest): ListLogicTableRouteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicTableRouteConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListLogicTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseId: string(name='DatabaseId', description='The ID of the logical database.', example='1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of the table.', example='true', position='Query'),
  searchName?: string(name='SearchName', description='The keyword that is used to search for the logical tables. Prefix match is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model ListLogicTablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicTableList?: {
    logicTable?: [ 
    {
      databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1'),
      logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. The value is fixed to true.', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the logical tables.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the owners of the logical tables.'),
      schemaName?: string(name='SchemaName', description='The logical database to which the logical table belongs.', example='yuyang_test'),
      tableCount?: string(name='TableCount', description='The number of logical tables.', example='4'),
      tableExpr?: string(name='TableExpr', description='The expression of the logical table.', example='test[1-4]'),
      tableGuid?: string(name='TableGuid', description='The GUID of the logical table.', example='IDB_L_308302.yuyang_test.test_ch'),
      tableId?: string(name='TableId', description='The ID of the logical table.', example='1'),
      tableName?: string(name='TableName', description='The name of the logical table.', example='test'),
    }
  ](name='LogicTable')
  }(name='LogicTableList', description='The details of the logical tables.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1E6484F-9DF1-4406-9BDE-0861C4629B69'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of logical tables that meet the query conditions.', example='1'),
}

model ListLogicTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogicTablesResponseBody(name='body'),
}

async function listLogicTables(request: ListLogicTablesRequest): ListLogicTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogicTables', 'POST', '/', 'json', false, 'json', request);
}

model ListOrdersRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime?: string(name='EndTime', description='The user who submitted the ticket.', example='2022-04-09 11:00:00', position='Query'),
  orderResultType?: string(name='OrderResultType', description='The end of the time range to query.', example='AS_ADMIN', position='Query'),
  orderStatus?: string(name='OrderStatus', description='The type of the tickets that you want to query. For more information, see [PluginType parameter](~~429109~~).', example='ALL', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The keyword that is used to query tickets.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The scope of the tickets that you want to query. Valid values:

*   **AS_ADMIN**: all tickets.
*   **AS_COMMITTER**: the tickets that are submitted by the current user.
*   **AS_HANDLER**: the tickets to be processed by the current user.
*   **AS_OWNER**: the tickets that are processed by the current user.
*   **AS_Related**: the tickets that are related to the current user.', example='10', position='Query'),
  pluginType?: string(name='PluginType', description='The ID of the user who submitted the ticket.', example='DC_COMMON', position='Query'),
  searchContent?: string(name='SearchContent', description='The status of the tickets that you want to query. Valid values:

*   **ALL**: queries the tickets of all statuses.
*   **FINISHED**: queries the tickets that are completed.
*   **RUNNING**: queries the tickets that are being processed.', example='test', position='Query'),
  searchDateType?: string(name='SearchDateType', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='CREATE_TIME', position='Query'),
  startTime?: string(name='StartTime', description='The remarks of the ticket.', example='2022-04-08 11:00:00', position='Query'),
  tid?: long(name='Tid', description='The beginning of the time range to query.', example='3000', position='Query'),
}

model ListOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  orders?: {
    order?: [ 
    {
      comment?: string(name='Comment', description='The status description of the ticket.', example='test'),
      committer?: string(name='Committer', description='The type of the ticket.', example='test'),
      committerId?: long(name='CommitterId', description='The ID of the ticket.', example='51****'),
      createTime?: string(name='CreateTime', description='The time when the ticket was created.', example='2022-04-08 11:15:46'),
      lastModifyTime?: string(name='LastModifyTime', description='The number of entries to return on each page.', example='2022-04-08 11:27:45'),
      orderId?: long(name='OrderId', example='51****'),
      pluginType?: string(name='PluginType', example='DC_COMMON'),
      statusCode?: string(name='StatusCode', description='The time condition based on which you want to query tickets. Valid values:

*   **CREATE_TIME**: the time when a ticket was created.
*   **MODIFY_TIME**: the time when a ticket was last modified.', example='success'),
      statusDesc?: string(name='StatusDesc', description='Queries tickets in Data Management (DMS).'),
    }
  ](name='Order')
  }(name='Orders', description='The time when the ticket was last modified.'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrders', 'POST', '/', 'json', false, 'json', request);
}

model ListProxiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxiesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='User can not access to Tenant [123445]'),
  proxyList?: [ 
    {
      creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
      creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
      httpsPort?: int32(name='HttpsPort', description='The number of the port that was used by HTTPS clients to connect to the database instance.', example='443'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='183****'),
      privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint is enabled. Default value: **true**.', example='true'),
      privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
      protocolPort?: int32(name='ProtocolPort', description='The number of the port that is used to connect the database instance.', example='3306'),
      protocolType?: string(name='ProtocolType', description='The type of the database. Example: MYSQL.', example='MYSQL'),
      proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
      publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint is enabled. Valid values:

*   **true**: The public endpoint is enabled.
*   **false**: The public endpoint is disabled.', example='false'),
      publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.

> 

*   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS (DNS) is returned.

*   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using DNS is returned.', example='dphzmy-5j8oimjsz6ze****-pub.proxy.dms.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='ProxyList', description='The proxies that are generated by the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5812180E-555F-5F90-BE4F-280576F4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListProxiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProxiesResponseBody(name='body'),
}

async function listProxies(request: ListProxiesRequest): ListProxiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxies', 'POST', '/', 'json', false, 'json', request);
}

model ListProxyAccessesRequest {
  regionId?: string(name='RegionId', position='Host'),
  proxyId: long(name='ProxyId', example='47', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxyAccessesResponseBody = {
  errorCode?: string(name='ErrorCode', example='MissingProxyId'),
  errorMessage?: string(name='ErrorMessage', example='ProxyId is mandatory for this action.'),
  proxyAccessList?: [ 
    {
      accessId?: string(name='AccessId', example='MXPL8HalI22m****'),
      gmtCreate?: string(name='GmtCreate', example='2021-03-31 10:34:18'),
      indepAccount?: string(name='IndepAccount', example='****'),
      instanceId?: long(name='InstanceId', example='164****'),
      originInfo?: string(name='OriginInfo'),
      proxyAccessId?: long(name='ProxyAccessId', example='****'),
      proxyId?: long(name='ProxyId', example='47'),
      userId?: long(name='UserId', example='26****'),
      userName?: string(name='UserName', example='user'),
      userUid?: string(name='UserUid', example='25936669186260****'),
    }
  ](name='ProxyAccessList'),
  requestId?: string(name='RequestId', description='Id of the request', example='E53D178A-85E9-5E1F-88B6-3CB1FCF2****'),
  success?: boolean(name='Success', example='true'),
}

model ListProxyAccessesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProxyAccessesResponseBody(name='body'),
}

async function listProxyAccesses(request: ListProxyAccessesRequest): ListProxyAccessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxyAccesses', 'POST', '/', 'json', false, 'json', request);
}

model ListProxySQLExecAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636962846000', position='Query'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS', position='Query'),
  opUserName?: string(name='OpUserName', description='The alias of the user.', example='testNickName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum values: 100.', example='100', minimum=1, maximum=100, position='Query'),
  SQLType?: string(name='SQLType', description='The type of SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT', position='Query'),
  searchName?: string(name='SearchName', description='The name of the database instance.', example='test', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636876446000', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='14****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListProxySQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter StartTime is not valid.'),
  proxySQLExecAuditLogList?: {
    proxySQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='Indicates the total number of rows returned after the SQL statement was executed. If an SELECT SQL statement is executed, the return value of this parameter indicates the total number of the queried data rows.', example='1'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time that is consumed to execute the SQL statement. Unit: milliseconds.', example='1324'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='4***'),
      instanceName?: string(name='InstanceName', description='The name of the database instance.', example='pc-uf662nrg017c6****.mysql.polardb.rds.aliyuncs.com:3306【test】'),
      opTime?: string(name='OpTime', description='The time at which the user executes the SQL statement on the database instance. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636876446000'),
      remark?: string(name='Remark', description='The description.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was executed.', example='select 1;'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      userId?: long(name='UserId', description='The ID of the user.', example='4****'),
      userName?: string(name='UserName', description='The nickname of the user.', example='testNickName'),
    }
  ](name='ProxySQLExecAuditLog')
  }(name='ProxySQLExecAuditLogList', description='The audit information about the database instance that is provided by the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50ECB006-2C35-5FCA-91B9-01987A0B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListProxySQLExecAuditLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListProxySQLExecAuditLogResponseBody(name='body'),
}

async function listProxySQLExecAuditLog(request: ListProxySQLExecAuditLogRequest): ListProxySQLExecAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProxySQLExecAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='3D1A59F4-EB2B-5D24-80A5-90C446A00DE2'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', example='11****'),
      id?: long(name='Id', example='2'),
      intervalMinutes?: int32(name='IntervalMinutes', example='1080'),
      nodeId?: long(name='NodeId', example='1'),
      ruleType?: int32(name='RuleType', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList'),
  success?: boolean(name='Success', example='true'),
}

model ListSLARulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSLARulesResponseBody(name='body'),
}

async function listSLARules(request: ListSLARulesRequest): ListSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSLARules', 'POST', '/', 'json', false, 'json', request);
}

model ListSQLExecAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', description='The end of the time range to query.

>  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. The returned entries can be displayed by page to improve query efficiency.', example='2021-11-08 11:00:00', position='Query'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS', position='Query'),
  opUserName?: string(name='OpUserName', description='The nickname of the user who wrote the SQL statement.', example='test_OpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value cannot exceed 100.', example='20', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', description='The name of the database or instance based on which you want to query SQL statements.

>  If the SQL statements to be queried are at the instance level, you can set this parameter to an instance name. If the SQL statements to be queried are at the database level, you can set this parameter to a database name.', example='test_SearchName', position='Query'),
  sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.', example='2021-11-08 11:04:00', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39BC9C86-95AE-58F2-9862-A7C3D896****'),
  SQLExecAuditLogList?: {
    SQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='The number of rows affected by the SQL statement. For example, if you execute an SQL statement to query data, the number of retrieved rows is returned.', example='2'),
      dbId?: long(name='DbId', description='The ID of the database.', example='2157****'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time consumed by the execution of the SQL statement. Unit: milliseconds.', example='18'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='185***'),
      instanceName?: string(name='InstanceName', description='The name of the database.

>  If the SQL statement takes effect on an instance, the name of the instance is returned.'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      opTime?: string(name='OpTime', description='The time when the operation specified by the SQL statement was performed on the instance or database.', example='2021-11-08 11:04:27'),
      remark?: string(name='Remark', description='The comment on the SQL statement.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was written.', example='SELECT * FROM `polar123`.`p_qw` ORDER BY `id` DESC'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='polar123'),
      userId?: long(name='UserId', description='The ID of the user who wrote the SQL statement.', example='12****'),
      userName?: string(name='UserName', description='The nickname of the user who wrote the SQL statement.', example='test_UserName'),
    }
  ](name='SQLExecAuditLog')
  }(name='SQLExecAuditLogList', description='The entries returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListSQLExecAuditLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListSQLExecAuditLogResponseBody(name='body'),
}

async function listSQLExecAuditLog(request: ListSQLExecAuditLogRequest): ListSQLExecAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSQLExecAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListSQLReviewOriginSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderActionDetail?: {
    checkStatusResult?: string(name='CheckStatusResult', description='The operation that you want to perform. Set the value to **ListSQLReviewOriginSQL**.', example='check_not_pass'),
    fileId?: long(name='FileId', description='The error code returned.', example='123345'),
    page?: {
      pageNumber?: int32(name='PageNumber', description='The ID of the ticket for the SQL review. You can call the [CreateSQLReviewOrder](~~257777~~) operation to query the ID of the ticket.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of the page to return.', example='20', maximum=500),
    }(name='Page', description='The review status of the SQL statement. Valid values:

*   **new**: The SQL statement is pending for analysis.
*   **unknown**: The SQL statement failed to be parsed.
*   **check_not_pass**: The SQL statement failed the review.
*   **check_pass**: The SQL statement passed the review.
*   **force_pass**: The SQL statement passed the review by manual effort.
*   **force_not_pass**: The SQL statement failed the review by manual effort.'),
    SQLReviewResult?: string(name='SQLReviewResult', description='The paging settings.', example='MUST_IMPROVE'),
  }(name='OrderActionDetail', description='The ID of the file.', shrink='json', position='Query'),
  orderId: long(name='OrderId', description='The information about the parsed SQL statements.', example='123321', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The optimization suggestion for the SQL statement. Valid values:

*   **MUST_IMPROVE**: The SQL statement must be improved.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
*   **USE_DMS_TOOLKIT**: We recommend that you change schemas without locking tables.
*   **USE_DMS_DML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLE_INDEX_SUGGEST**: We recommend that you use SQL statements that use indexes.', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSQLReviewOriginSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The MD5 hash value of the SQL statement.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The description of the review status.', example='UnknownError'),
  originSQLList?: [ 
    {
      checkStatus?: string(name='CheckStatus', description='The ID of the file.', example='check_pass'),
      checkedTime?: string(name='CheckedTime', description='Queries the details of the SQL statements that are involved in an SQL review ticket.', example='2021-06-09 21:07:00'),
      fileId?: long(name='FileId', description='The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://icms.alibaba-inc.com/content/dms/doc?l=1\\&m=61777\\&n=2712723\\&spm) operation to query the details of optimization suggestions based on the key.', example='123321'),
      fileName?: string(name='FileName', description='The SQL statement.', example='test.sql'),
      reviewSummary?: string(name='ReviewSummary', example='{"POTENTIAL_ISSUE":1,"SUGGEST_IMPROVE":1}'),
      SQLContent?: string(name='SQLContent', description='The error message returned.', example='select id from table_name'),
      SQLId?: long(name='SQLId', description='The time when the SQL statement is reviewed.', example='1111'),
      SQLName?: string(name='SQLName', example='getByPk'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', example='a57e54ec5433475ea3082d882fdb89c5'),
      sqlHash?: string(name='SqlHash', example='95adb6e77a0884d9e50232cb8c5c969d'),
      statusDesc?: string(name='StatusDesc', description='The ID of the request.'),
    }
  ](name='OriginSQLList', description='The parameters that are used to filter SQL statements involved in the ticket.'),
  requestId?: string(name='RequestId', description='The name of the file.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='The ID of the SQL statement.', example='true'),
  totalCount?: int32(name='TotalCount', description='The number of entries to return on each page.', example='10'),
}

model ListSQLReviewOriginSQLResponse = {
  headers: map[string]string(name='headers'),
  body: ListSQLReviewOriginSQLResponseBody(name='body'),
}

/**
  * The total number of the SQL statements.
  *
 */
async function listSQLReviewOriginSQL(request: ListSQLReviewOriginSQLRequest): ListSQLReviewOriginSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSQLReviewOriginSQL', 'POST', '/', 'json', false, 'json', request);
}

model ListScenariosRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListScenariosResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  scenarioList?: [ 
    {
      creatorId?: string(name='CreatorId', example='23***'),
      description?: string(name='Description', example='test'),
      id?: long(name='Id', example='41***'),
      scenarioName?: string(name='ScenarioName', example='test'),
    }
  ](name='ScenarioList'),
  success?: boolean(name='Success', example='true'),
}

model ListScenariosResponse = {
  headers: map[string]string(name='headers'),
  body: ListScenariosResponseBody(name='body'),
}

async function listScenarios(request: ListScenariosRequest): ListScenariosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScenarios', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveColumnsRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName?: string(name='ColumnName', description='The operation that you want to perform. Set the value to **ListSensitiveColumns**.', example='test_column', position='Query'),
  dbId?: long(name='DbId', description='1860', example='1860', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The error message.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.', example='100', position='Query'),
  schemaName?: string(name='SchemaName', description='The number of entries to return on each page.', example='test_schema', position='Query'),
  securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level', example='SENSITIVE', position='Query'),
  tableName?: string(name='TableName', description='The error code.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The name of the table. You can call the [ListTables](~~141878~~) operation to query the ID of the table.', example='3', position='Query'),
}

model ListSensitiveColumnsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The sensitivity level of the field. Valid values:

*   SENSITIVE
*   CONFIDENTIAL', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The sensitive fields.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The number of sensitive fields.', example='09D82FD7-F87F-59EF-AA82-AEF71B09E306'),
  sensitiveColumnList?: {
    sensitiveColumn?: [ 
    {
      columnCount?: long(name='ColumnCount', description='Queries sensitive fields in a table of a database.', example='1'),
      columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListColumns](~~141870~~) operation to query the name of the field.', example='test_column'),
      functionType?: string(name='FunctionType', example='DEFAULT'),
      schemaName?: string(name='SchemaName', example='test_schema'),
      securityLevel?: string(name='SecurityLevel', description='The ID of the request.', example='SENSITIVE'),
      tableName?: string(name='TableName', description='The name of the field.', example='test_table'),
    }
  ](name='SensitiveColumn')
  }(name='SensitiveColumnList', description='The type of the de-identification algorithm. Valid values:

*   DEFAULT: All characters are masked. This is the default value.
*   FIX_POS: The characters at specific positions are masked.
*   FIX_CHAR: Specific characters are masked.'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='1'),
}

model ListSensitiveColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveColumnsResponseBody(name='body'),
}

async function listSensitiveColumns(request: ListSensitiveColumnsRequest): ListSensitiveColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveColumns', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveColumnsDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The details of the sensitive field.', example='ColumnName_test', position='Query'),
  dbId?: long(name='DbId', description='The ID of the database.', example='1860****', position='Query'),
  logic?: boolean(name='Logic', description='The name of the field.', example='false', position='Query'),
  schemaName: string(name='SchemaName', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='SchemaName_test', position='Query'),
  tableName: string(name='TableName', description='The name of the table.', example='test', position='Query'),
  tid?: long(name='Tid', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='3***', position='Query'),
}

model ListSensitiveColumnsDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='WB01053274', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the field.

>  You can also call the [ListColumns](~~141870~~) operation to obtain the name of the field.', example='7629888F-C9FB-4D16-A7D3-B443FE06FBD4'),
  sensitiveColumnsDetailList?: {
    sensitiveColumnsDetail?: [ 
    {
      columnDescription?: string(name='ColumnDescription', description='$.parameters[6].schema.description', example='test'),
      columnName?: string(name='ColumnName', description='The ID of the request.', example='ColumnName_test'),
      columnType?: string(name='ColumnType', description='$.parameters[7].schema.description', example='varchar(32)'),
      dbId?: long(name='DbId', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='1860****'),
      dbType?: string(name='DbType', description='$.parameters[6].schema.enumValueTitles', example='mysql'),
      envType?: string(name='EnvType', description='ListSensitiveColumnsDetail', example='product'),
      logic?: boolean(name='Logic', description='$.parameters[7].schema.example', example='false'),
      schemaName?: string(name='SchemaName', description='$.parameters[7].schema.enumValueTitles', example='SchemaName_test'),
      searchName?: string(name='SearchName', description='Queries the details of a sensitive field.', example='test@xxx:3306'),
      tableName?: string(name='TableName', description='$.parameters[6].schema.example', example='test'),
    }
  ](name='SensitiveColumnsDetail')
  }(name='SensitiveColumnsDetailList', description='The data type of the field.'),
  success?: boolean(name='Success', example='true'),
}

model ListSensitiveColumnsDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveColumnsDetailResponseBody(name='body'),
}

async function listSensitiveColumnsDetail(request: ListSensitiveColumnsDetailRequest): ListSensitiveColumnsDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveColumnsDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListSensitiveDataAuditLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName?: string(name='ColumnName', example='ExampleColumnName', position='Query'),
  dbName?: string(name='DbName', example='ExampleDbName', position='Query'),
  endTime?: string(name='EndTime', example='2022-11-18 11:00:00', position='Query'),
  moduleName?: string(name='ModuleName', example='SQL_CONSOLE', position='Query'),
  opUserName?: string(name='OpUserName', example='ExampleOpUserName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', example='2022-11-18 10:00:00', position='Query'),
  tableName?: string(name='TableName', example='ExampleTableName', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListSensitiveDataAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  sensitiveDataAuditLogList?: [ 
    {
      dbDisplayName?: string(name='DbDisplayName', example='ExampleDbName@xxx.xxx.xxx.xxx:3306'),
      instanceId?: long(name='InstanceId', example='12****'),
      moduleName?: string(name='ModuleName', example='SQL_CONSOLE'),
      opTime?: string(name='OpTime', example='2022-11-18 10:01:00'),
      sensitiveDataLog?: [ 
        {
          columnName?: string(name='ColumnName', example='ExampleColumnName'),
          columnPermissionType?: string(name='ColumnPermissionType'),
          desensitizationRule?: string(name='DesensitizationRule'),
          securityLevel?: string(name='SecurityLevel'),
          tableName?: string(name='TableName', example='ExampleTableName'),
        }
      ](name='SensitiveDataLog'),
      targetName?: string(name='TargetName'),
      userId?: long(name='UserId', example='1**'),
      userName?: string(name='UserName', example='ExampleUserName'),
    }
  ](name='SensitiveDataAuditLogList'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListSensitiveDataAuditLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveDataAuditLogResponseBody(name='body'),
}

async function listSensitiveDataAuditLog(request: ListSensitiveDataAuditLogRequest): ListSensitiveDataAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSensitiveDataAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ListStandardGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The error code returned if the request fails.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListStandardGroupsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the tenant.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The security rule sets returned.', example='xxx'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ListStandardGroups**.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroupList?: [ 
    {
      dbType?: string(name='DbType', example='mysql'),
      description?: string(name='Description', description='The ID of the request.'),
      groupId?: long(name='GroupId', example='41****'),
      groupMode?: string(name='GroupMode', example='COMMON'),
      groupName?: string(name='GroupName', description='The name of the security rule set.'),
      lastMenderId?: long(name='LastMenderId', example='51****'),
    }
  ](name='StandardGroupList', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration'),
  success?: boolean(name='Success', description='The error message returned if the request fails.', example='true'),
}

model ListStandardGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStandardGroupsResponseBody(name='body'),
}

async function listStandardGroups(request: ListStandardGroupsRequest): ListStandardGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStandardGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseId: string(name='DatabaseId', description='The ID of the physical database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID of the physical database.', example='1860****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of a table. Valid values:

*   **true**: returns the GUID of a table.
*   **false**: does not return the GUID of a table.', example='true', position='Query'),
  searchName?: string(name='SearchName', description='The name used to search for tables. Fuzzy search is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model ListTablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B16FB618-5E96-4FFD-BB0D-490C890A4030'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tableList?: {
    table?: [ 
    {
      databaseId?: string(name='DatabaseId', description='The ID of the physical database.', example='1860****'),
      description?: string(name='Description', description='The description of the table.', example='test'),
      encoding?: string(name='Encoding', description='The encoding format of the table.', example='utf8'),
      engine?: string(name='Engine', description='The engine of the table.', example='InnoDB'),
      numRows?: long(name='NumRows', description='The number of rows in the table. This is a statistical value and does not indicate the actual number of rows.', example='10085'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The ID list of the table owners.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nickname list of the table owners.'),
      storeCapacity?: long(name='StoreCapacity', description='The storage space that is occupied by the table. This is a statistical value and does not indicate the accurate storage space. Unit: MB.', example='1024'),
      tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_44743****.qntest.consumption_records'),
      tableId?: string(name='TableId', description='The ID of the table.', example='44743****'),
      tableName?: string(name='TableName', description='The table name.', example='consumption_records'),
      tableSchemaName?: string(name='TableSchemaName', description='The database in which the table resides.', example='qntest'),
      tableType?: string(name='TableType', description='The type of the table. Default value: NORMAL.', example='NORMAL'),
    }
  ](name='Table')
  }(name='TableList', description='The details of the tables.'),
  totalCount?: long(name='TotalCount', description='The total number of tables that meet the query conditions.', example='1'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTablesResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances whose control mode is Security Collaboration.
  *
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTables', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The information about the task flows returned.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the latest deployment record.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the task flow.', example='4116147E-C628-5816-8779-8EEAF8E973F4'),
  success?: boolean(name='Success', description='The operation that you want to perform. Set the value to **ListTaskFlow**.', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The ID of the user who creates the task flow.', example='Creator_NickName'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The status of the task flow. Valid values:

*   **0**: The task flow is invalid.
*   **1**: Scheduling is disabled for the task flow.
*   **2**: The task flow is waiting to be scheduled.', example='Owner_NickName'),
      deployId?: long(name='DeployId', description='The ID of the request.', example='12**'),
      id?: long(name='Id', description='The error message.', example='134137****'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', example='2022-04-13'),
      status?: int32(name='Status', description='The time when the latest execution record was generated.', example='2'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList', description='The name of the user who creates the task flow.'),
}

model ListTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowResponseBody(name='body'),
}

async function listTaskFlow(request: ListTaskFlowRequest): ListTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowConstantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='3****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowConstantsResponseBody = {
  dagConstants?: {
    dagConstant?: [ 
    {
      key?: string(name='Key', example='example'),
      value?: string(name='Value', example='0'),
    }
  ](name='DagConstant')
  }(name='DagConstants'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskFlowConstantsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowConstantsResponseBody(name='body'),
}

async function listTaskFlowConstants(request: ListTaskFlowConstantsRequest): ListTaskFlowConstantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowConstants', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowCooperatorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The username.', example='15****', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowCooperatorsResponseBody = {
  cooperatorList?: {
    cooperator?: [ 
    {
      email?: string(name='Email', example='test@XX.com'),
      loginName?: string(name='LoginName', example='name'),
      nickName?: string(name='NickName', example='name'),
      userId?: string(name='UserId', description='用户ID。', example='123'),
    }
  ](name='Cooperator')
  }(name='CooperatorList'),
  errorCode?: string(name='ErrorCode', description='The operation that you want to perform. Set the value to **ListTaskFlowCooperators**.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The users that are involved in the task flow.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='54C99C70-2DFF-5A8C-A252-EBAA1EB668EC'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskFlowCooperatorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowCooperatorsResponseBody(name='body'),
}

async function listTaskFlowCooperators(request: ListTaskFlowCooperatorsRequest): ListTaskFlowCooperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowCooperators', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowEdgesByConditionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The operation that you want to perform. Set the value to **ListTaskFlowEdgesByCondition**.', example='15***', position='Query'),
  id?: long(name='Id', description='The ID of the end node on the edge.', example='24***', position='Query'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='44***', position='Query'),
  nodeFrom?: long(name='NodeFrom', description='The error message returned if the request failed.', example='44***', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowEdgesByConditionResponseBody = {
  edges?: {
    edge?: [ 
    {
      id?: long(name='Id', example='24***'),
      nodeEnd?: long(name='NodeEnd', example='44***'),
      nodeFrom?: long(name='NodeFrom', example='44***'),
    }
  ](name='Edge')
  }(name='Edges'),
  errorCode?: string(name='ErrorCode', description='The ID of the end node on the edge.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the start node on the edge.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The list of task flow edges.', example='D86249CD-422F-5ACF-85BA-9187C986AE0B'),
  success?: boolean(name='Success', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='true'),
}

model ListTaskFlowEdgesByConditionResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.
  *
 */
async function listTaskFlowEdgesByCondition(request: ListTaskFlowEdgesByConditionRequest): ListTaskFlowEdgesByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowEdgesByCondition', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The operation that you want to perform. Set the value to **ListTaskFlowInstance**.', example='7***', position='Query'),
  pageIndex: int32(name='PageIndex', description='The number of entries to return on each page.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='20', position='Query'),
  startTimeBegin?: string(name='StartTimeBegin', description='The number of the page to return.', example='2022-01-07', position='Query'),
  startTimeEnd?: string(name='StartTimeEnd', description='The ID of the task flow.', example='2022-04-08', position='Query'),
  tid?: long(name='Tid', description='The ID of the execution record.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  triggerType?: int32(name='TriggerType', description='The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='1', position='Query'),
}

model ListTaskFlowInstanceResponseBody = {
  DAGInstanceList?: {
    DAGInstance?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The information about the execution records returned.', example='2021-11-10 14:37:26'),
      dagId?: string(name='DagId', description='The description of the task.', example='7***'),
      dagName?: string(name='DagName', example='Spark_SQL_test'),
      dagVersion?: string(name='DagVersion', example='[]'),
      endTime?: string(name='EndTime', description='The end of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='2021-11-11 14:38:57'),
      historyDagId?: long(name='HistoryDagId', description='Queries the execution records of a task flow.', example='2****'),
      id?: long(name='Id', description='The error message returned if the request fails.', example='9234'),
      message?: string(name='Message', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='test'),
      ownerName?: string(name='OwnerName', example='test_name'),
      status?: int32(name='Status', description='The ID of the request.', example='4'),
      triggerType?: int32(name='TriggerType', description='The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='1'),
    }
  ](name='DAGInstance')
  }(name='DAGInstanceList', description='The status of the task flow. Valid values:

*   **0**: The task flow is waiting to be scheduled.
*   **1**: The task flow is being executed.
*   **2**: The task flow is paused.
*   **3**: The task flow failed.
*   **4**: The task flow is executed.
*   **5**: The task flow is complete.'),
  errorCode?: string(name='ErrorCode', description='The beginning of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', description='The name of the task flow.', example='true'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowInstanceResponseBody(name='body'),
}

async function listTaskFlowInstance(request: ListTaskFlowInstanceRequest): ListTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='EC12A3BE-149F-5365-AF33-12CC8C963923'),
  success?: boolean(name='Success', example='true'),
  timeVariables?: {
    timeVariable?: [ 
    {
      name?: string(name='Name', example='time_test'),
      pattern?: string(name='Pattern', example='2018-09-26|+7h'),
    }
  ](name='TimeVariable')
  }(name='TimeVariables'),
}

model ListTaskFlowTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowTimeVariablesResponseBody(name='body'),
}

async function listTaskFlowTimeVariables(request: ListTaskFlowTimeVariablesRequest): ListTaskFlowTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskFlowsByPageRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTaskFlowsByPageResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='6CB28697-BFE2-5739-9228-3971990E982C'),
  success?: boolean(name='Success', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', example='51****'),
      creatorNickName?: string(name='CreatorNickName', example='Creator_NickName'),
      dagName?: string(name='DagName', example='poc_task_test'),
      dagOwnerNickName?: string(name='DagOwnerNickName', example='Owner_NickName'),
      deployId?: long(name='DeployId', example='65***'),
      description?: string(name='Description', example='test'),
      id?: long(name='Id', example='7***'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', example='2022-04-13'),
      status?: int32(name='Status', example='1'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList'),
  totalCount?: int32(name='TotalCount', example='24'),
}

model ListTaskFlowsByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskFlowsByPageResponseBody(name='body'),
}

async function listTaskFlowsByPage(request: ListTaskFlowsByPageRequest): ListTaskFlowsByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskFlowsByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksInTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The name of the node.', example='32***', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListTasksInTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ListTasksInTaskFlow**.', example='8B36B063-6B7D-5595-9FCF-3844B7B7ACD4'),
  success?: boolean(name='Success', description='The tasks in the task flow.', example='true'),
  tasks?: {
    task?: [ 
    {
      graphParam?: string(name='GraphParam', example='{\\"x\\":435,\\"y\\":192,\\"layoutType\\":\\"Horizontal\\"}'),
      nodeConfig?: string(name='NodeConfig', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.'),
      nodeContent?: string(name='NodeContent', description='The time variables configured for the node.'),
      nodeId?: string(name='NodeId', example='92***'),
      nodeName?: string(name='NodeName', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](~~181330~~).', example='Cross-Database Spark SQL-1'),
      nodeOutput?: string(name='NodeOutput'),
      nodeType?: string(name='NodeType', description='The ID of the node.', example='SPARK_SQL'),
      timeVariables?: string(name='TimeVariables', description='The configuration for the node.'),
    }
  ](name='Task')
  }(name='Tasks', description='The advanced configuration for the node.'),
}

model ListTasksInTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksInTaskFlowResponseBody(name='body'),
}

async function listTasksInTaskFlow(request: ListTasksInTaskFlowRequest): ListTasksInTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasksInTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListUserPermissionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  databaseName?: string(name='DatabaseName', description='The keyword used in the query. For example, if you want to query permissions on an instance, you can specify the endpoint of the instance, such as rm-bp144d5ky4l4r****.', example='db_name', position='Query'),
  dbType?: string(name='DbType', description='The ID of the database.', example='polardb', position='Query'),
  envType?: string(name='EnvType', description='The time when the permissions were granted.', example='dev', position='Query'),
  logic?: boolean(name='Logic', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', description='This parameter is reserved.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='5', position='Query'),
  permType: string(name='PermType', description='The operation that you want to perform. Set the value to **ListUserPermissions**.', example='DATABASE', position='Query'),
  searchKey?: string(name='SearchKey', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='rm-bp144d5ky4l4r****', position='Query'),
  tid?: long(name='Tid', description='The nickname of the user.', example='3***', position='Query'),
  userId: string(name='UserId', description='The ID of the authorization record.', example='51****', position='Query'),
}

model ListUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the user. You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the ID of the user.

>  The user ID is different from the ID of your Alibaba Cloud account.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: staging environment
*   test: test environment
*   sit: SIT environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: STAG environment', example='UnknownError'),
  requestId?: string(name='RequestId', description='The details of the permissions that the user has.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', description='The permissions on a specific type of resources that you want to query. Valid values:

*   DATABASE: permissions on databases
*   TABLE: permissions on tables
*   COLUMN: permissions on fields
*   INSTANCE: permissions on instances', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', example='instance_alias'),
      columnName?: string(name='ColumnName', example='column_name'),
      dbId?: string(name='DbId', description='The user who grants the permissions.', example='1860****'),
      dbType?: string(name='DbType', example='polardb'),
      dsType?: string(name='DsType', example='DATABASE'),
      envType?: string(name='EnvType', example='dev'),
      host?: string(name='Host', example='rm-bp144d5ky4l4r****'),
      instanceId?: string(name='InstanceId', description='The details of permissions.', example='174****'),
      logic?: boolean(name='Logic', description='The number of the page to return.', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='Queries the permissions of a specific user on a database or a table.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', example='xxx'),
          originFrom?: string(name='OriginFrom', description='The type of the permissions. Valid values:

*   QUERY: the query permissions
*   EXPORT: the export permissions
*   CORRECT: the change permissions'),
          permType?: string(name='PermType', description='The ID of the request.', example='QUERY'),
          userAccessId?: string(name='UserAccessId', example='758****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The name of the database.'),
      port?: long(name='Port', example='3306'),
      schemaName?: string(name='SchemaName', description='The error message.', example='test_db'),
      searchName?: string(name='SearchName', example='test_db@xxx:3306'),
      tableId?: string(name='TableId', example='13434'),
      tableName?: string(name='TableName', description='The ID of the instance.', example='test_table'),
      userId?: string(name='UserId', description='The name of the database.', example='51****'),
      userNickName?: string(name='UserNickName', description='The ID of the user.', example='nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='Indicates whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.'),
}

model ListUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserPermissionsResponseBody(name='body'),
}

async function listUserPermissions(request: ListUserPermissionsRequest): ListUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model ListUserTenantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  tid?: long(name='Tid', description='The name of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListUserTenantsResponseBody = {
  errorCode?: string(name='ErrorCode', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C478D9DA-3615-50F6-A2BC-7855AD65****'),
  success?: boolean(name='Success', example='true'),
  tenantList?: [ 
    {
      status?: string(name='Status', example='ACTIVE'),
      tenantName?: string(name='TenantName', example='test_name'),
      tid?: long(name='Tid', example='3***'),
    }
  ](name='TenantList', description='The operation that you want to perform. Set the value to **ListUserTenants**.'),
}

model ListUserTenantsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserTenantsResponseBody(name='body'),
}

async function listUserTenants(request: ListUserTenantsRequest): ListUserTenantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserTenants', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

**

Valid values: 10, 20, 50, and 100.**** Default value: 10.', example='10', position='Query'),
  role?: string(name='Role', description='The role that is assigned to the user. Valid values:

*   **USER**: a regular user.
*   **DBA** : a database administrator (DBA).
*   **ADMIN**: a Data Management (DMS) administrator.
*   **SECURITY_ADMIN**: a security administrator.
*   **STRUCT_READ_ONLY**: a schema read-only user.

>  To check your role, move the pointer over the profile picture in the upper-right corner of the DMS console.', example='DBA', position='Query'),
  searchKey?: string(name='SearchKey', description='The search keyword. Fuzzy match is supported.', example='test', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***', position='Query'),
  userState?: string(name='UserState', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL', position='Query'),
}

model ListUsersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='InvalidTid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Specified parameter Tid is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69161997-6030-53BA-A333-DBEC83B732FF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='3'),
  userList?: {
    user?: [ 
    {
      curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that were performed on the current day.', example='0'),
      curResultCount?: long(name='CurResultCount', description='The number of rows that were queried on the current day.', example='0'),
      dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 

*   The system returns this parameter if you have set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=9b7a4a562cbe7fcdea9962afac7b9d7b4504d564948083419750f9cafa78e4ef'),
      email?: string(name='Email', description='The email address that is used to receive notifications.

> 

*   The system returns this parameter if you have set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set an email address.', example='username@example.com'),
      lastLoginTime?: string(name='LastLoginTime', description='The time when the user last logged on to the console.', example='2021-11-08 13:43:43'),
      maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
      maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='50000'),
      mobile?: string(name='Mobile', description='The mobile phone number of the user.

> 

*   The system returns this parameter if you have set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.

*   The system does not return this parameter if you have not set a mobile phone number.', example='1389999****'),
      nickName?: string(name='NickName', description='The nickname of the user.', example='test_NickName'),
      notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message
*   **EMAIL**: email.
*   **DINGDING**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='DINGROBOT'),
      parentUid?: string(name='ParentUid', description='The ID of the Alibaba Cloud account of the user.', example='140692647406****'),
      roleIdList?: {
        roleIds?: [ int32 ](name='RoleIds')
      }(name='RoleIdList', description='The IDs of the roles.'),
      roleNameList?: {
        roleNames?: [ string ](name='RoleNames')
      }(name='RoleNameList', description='The names of roles.'),
      signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC_SHA1.', example='HMAC_SHA1'),
      state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
      uid?: string(name='Uid', description='The ID of the Alibaba Cloud account.', example='167382665015****'),
      userId?: string(name='UserId', description='The ID of the user.', example='8****'),
      webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 

*   If you have set a webhook URL, DMS sends notifications to the specified URL.

*   The system does not return this parameter if you have not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
    }
  ](name='User')
  }(name='UserList', description='The details of users.'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkFlowNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchName?: string(name='SearchName', description='The name that is used to search for approval nodes.', example='admin', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model ListWorkFlowNodesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  workflowNodes?: {
    workflowNode?: [ 
    {
      auditUsers?: {
        auditUser?: [ 
        {
          nickName?: string(name='NickName', description='The nickname of the approver.', example='test'),
          realName?: string(name='RealName', description='The real name of the approver.', example='test'),
          userId?: long(name='UserId', description='The ID of the approver. The ID is different from the ID of the Alibaba Cloud account of the approver.', example='123'),
        }
      ](name='AuditUser')
      }(name='AuditUsers', description='The details about approvers.'),
      comment?: string(name='Comment', description='The description of the approval template.', example='test'),
      createUserId?: long(name='CreateUserId', description='The ID of the creator. This ID is different from the ID of the Alibaba Cloud account of the creator.', example='123'),
      createUserNickName?: string(name='CreateUserNickName', description='The name of the user who creates the approval node.', example='test'),
      nodeId?: long(name='NodeId', description='The ID of the approval node.', example='123'),
      nodeName?: string(name='NodeName', description='The name of the approval node.', example='test'),
      nodeType?: string(name='NodeType', description='The type of the approval node. Valid values:

*   SYS: The approval node is predefined by the system.
*   USER_LIST: The approval node is created by a user.', example='SYS'),
    }
  ](name='WorkflowNode')
  }(name='WorkflowNodes', description='The details of approval nodes.'),
}

model ListWorkFlowNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkFlowNodesResponseBody(name='body'),
}

async function listWorkFlowNodes(request: ListWorkFlowNodesRequest): ListWorkFlowNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkFlowNodes', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkFlowTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  searchName?: string(name='SearchName', example='Admin', position='Query'),
  tid?: long(name='Tid', example='-1', position='Query'),
}

model ListWorkFlowTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='41067071-0243-4AAB-B3CF-4DE6D54F53B4'),
  success?: boolean(name='Success', example='true'),
  workFlowTemplates?: {
    workFlowTemplate?: [ 
    {
      comment?: string(name='Comment', example='test'),
      createUserId?: long(name='CreateUserId', example='1234'),
      enabled?: string(name='Enabled', example='Y'),
      isSystem?: int32(name='IsSystem', example='1'),
      templateId?: long(name='TemplateId', example='12345'),
      templateName?: string(name='TemplateName', example='Admin'),
      workflowNodes?: {
        workflowNode?: [ 
        {
          comment?: string(name='Comment', example='test'),
          createUserId?: long(name='CreateUserId', example='1234'),
          nodeId?: long(name='NodeId', example='123'),
          nodeName?: string(name='NodeName', example='test'),
          nodeType?: string(name='NodeType', example='SYS'),
          position?: int32(name='Position', example='1'),
          templateId?: long(name='TemplateId', example='12345'),
        }
      ](name='WorkflowNode')
      }(name='WorkflowNodes'),
    }
  ](name='WorkFlowTemplate')
  }(name='WorkFlowTemplates'),
}

model ListWorkFlowTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkFlowTemplatesResponseBody(name='body'),
}

async function listWorkFlowTemplates(request: ListWorkFlowTemplatesRequest): ListWorkFlowTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkFlowTemplates', 'POST', '/', 'json', false, 'json', request);
}

model MakeTaskFlowInstanceSuccessRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='{
    "RequestId": "028BF827-3801-5869-8548-F4A039256304",
    "ErrorCode": "UnknownError",
    "ErrorMessage": "UnknownError",
    "Success": true
}', example='47****', position='Query'),
  tid?: long(name='Tid', description='The error code returned if the request failed.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model MakeTaskFlowInstanceSuccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='WB01220210', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Sets the status of a task flow to "Successful".', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', example='true'),
}

model MakeTaskFlowInstanceSuccessResponse = {
  headers: map[string]string(name='headers'),
  body: MakeTaskFlowInstanceSuccessResponseBody(name='body'),
}

async function makeTaskFlowInstanceSuccess(request: MakeTaskFlowInstanceSuccessRequest): MakeTaskFlowInstanceSuccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MakeTaskFlowInstanceSuccess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDataCorrectExecSQLRequest {
  regionId?: string(name='RegionId', position='Host'),
  execSQL: string(name='ExecSQL', description='The error code returned.', example='update tb set id = 1 where id = 1;', position='Query'),
  orderId: long(name='OrderId', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='4328****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='4****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ModifyDataCorrectExecSQLResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidOrderId'),
  errorMessage?: string(name='ErrorMessage', example='Specified parameter OrderId is not valid.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ModifyDataCorrectExecSQL**.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDataCorrectExecSQLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataCorrectExecSQLResponseBody(name='body'),
}

async function modifyDataCorrectExecSQL(request: ModifyDataCorrectExecSQLRequest): ModifyDataCorrectExecSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataCorrectExecSQL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesensitizationStrategyRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnName: string(name='ColumnName', description='The ID of the masking rule.', example='test_column', position='Query'),
  dbId: int32(name='DbId', description='The error code returned if the request failed.', example='123', position='Query'),
  isLogic: boolean(name='IsLogic', description='The operation that you want to perform. Set the value to **ModifyDesensitizationStrategy**.', example='false', position='Query'),
  isReset?: boolean(name='IsReset', description='The name of the table. You can call the [ListSensitiveColumns](~~188103~~) operation to query the table name.

>  You can also call the [ListTables](~~141878~~) operation to query the table name.', example='false', position='Query'),
  ruleId?: int32(name='RuleId', description='The ID of the database. You can call the [ListDatabases](~~141873~~) operation to query the ID.', example='53', position='Query'),
  schemaName: string(name='SchemaName', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to query the field name.

>  You can also call the [ListColumns](~~141870~~) operation to query the field name.', example='test_schema', position='Query'),
  tableName: string(name='TableName', description='The error message returned if the request failed.', example='test_table', position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ModifyDesensitizationStrategyResponseBody = {
  errorCode?: string(name='ErrorCode', description='ModifyDesensitizationStrategy', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='WB01220505', example='UnknownError'),
  requestId?: string(name='RequestId', description='Modifies the masking rule bound to a specified field.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  result?: boolean(name='Result', example='True'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDesensitizationStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesensitizationStrategyResponseBody(name='body'),
}

async function modifyDesensitizationStrategy(request: ModifyDesensitizationStrategyRequest): ModifyDesensitizationStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesensitizationStrategy', 'POST', '/', 'json', false, 'json', request);
}

model MoveTaskFlowToScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  scenarioId?: long(name='ScenarioId', example='1****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model MoveTaskFlowToScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D85FD18C-4322-5D49-8C14-5A10E668F86C'),
  success?: boolean(name='Success', example='true'),
}

model MoveTaskFlowToScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: MoveTaskFlowToScenarioResponseBody(name='body'),
}

async function moveTaskFlowToScenario(request: MoveTaskFlowToScenarioRequest): MoveTaskFlowToScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveTaskFlowToScenario', 'POST', '/', 'json', false, 'json', request);
}

model OfflineTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request fails.', example='7***', position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model OfflineTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **OfflineTaskFlow**.', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', example='true'),
}

model OfflineTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: OfflineTaskFlowResponseBody(name='body'),
}

async function offlineTaskFlow(request: OfflineTaskFlowRequest): OfflineTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model PauseDataCorrectSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId?: long(name='JobId', example='43253', position='Query'),
  orderId: long(name='OrderId', description='The ID of the request.', example='43253', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='4325', minimum=1, maximum=9223372036854775807, position='Query'),
  type: string(name='Type', description='The operation that you want to perform. Set the value to **PauseDataCorrectSQLJob**.', example='SINGLE', position='Query'),
}

model PauseDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='335C5BC8-490C-56EF-BDDE-94A4B53FEB72'),
  success?: boolean(name='Success', example='true'),
}

model PauseDataCorrectSQLJobResponse = {
  headers: map[string]string(name='headers'),
  body: PauseDataCorrectSQLJobResponseBody(name='body'),
}

async function pauseDataCorrectSQLJob(request: PauseDataCorrectSQLJobRequest): PauseDataCorrectSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseDataCorrectSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model PublishAndDeployTaskFlowRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='The description of the version.', position='Query'),
  tid?: long(name='Tid', description='The response parameters.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  versionComments?: string(name='VersionComments', description='The error code returned if the request failed.', example='vc_test', position='Query'),
}

model PublishAndDeployTaskFlowResponseBody = {
  deployId?: long(name='DeployId'),
  errorCode?: string(name='ErrorCode', description='<PublishAndDeployTaskFlowResponse>
    <RequestId>64E26249-B61F-51C6-B6DF-47EFF50128CC</RequestId>
    <ErrorCode>UnknownError</ErrorCode>
    <ErrorMessage>Unknown server error</ErrorMessage>
    <Success>true</Success>
</PublishAndDeployTaskFlowResponse>', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='Publishes and deploys a task flow.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='12**', example='{
    "RequestId": "64E26249-B61F-51C6-B6DF-47EFF50128CC",
    "ErrorCode": "UnknownError",
    "ErrorMessage": "Unknown server error",
    "Success": true
}'),
  success?: boolean(name='Success', description='WB01220210', example='true'),
}

model PublishAndDeployTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: PublishAndDeployTaskFlowResponseBody(name='body'),
}

async function publishAndDeployTaskFlow(request: PublishAndDeployTaskFlowRequest): PublishAndDeployTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishAndDeployTaskFlow', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataTrackResultDownloadStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  downloadKeyId: string(name='DownloadKeyId', example='e23dd7ec-a19f-4a69-8eb3-8ffd26e6****', position='Query'),
  orderId: long(name='OrderId', example='11****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='1***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model QueryDataTrackResultDownloadStatusResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  statusResult?: {
    downloadStatus?: string(name='DownloadStatus', example='DOWNLOAD_SUCCESS'),
    downloadUrl?: string(name='DownloadUrl', example='https://idbsaasstore.oss-cn-zhangjiakou.aliyuncs.com/****_REDO_31201_207.zip?Expires=1682239593&OSSAccessKeyId=****&Signature=****'),
    statusDesc?: string(name='StatusDesc', example='SUCCESS'),
    totalCount?: long(name='TotalCount', example='69'),
  }(name='StatusResult'),
  success?: boolean(name='Success', example='true'),
}

model QueryDataTrackResultDownloadStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDataTrackResultDownloadStatusResponseBody(name='body'),
}

async function queryDataTrackResultDownloadStatus(request: QueryDataTrackResultDownloadStatusRequest): QueryDataTrackResultDownloadStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDataTrackResultDownloadStatus', 'POST', '/', 'json', false, 'json', request);
}

model ReDeployLhDagVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the deployment record.', example='7***', position='Query'),
  dagVersion?: long(name='DagVersion', description='The ID of the task flow version. You can call the [ListDAGVersions](~~424682~~) operation to obtain the ID of the task flow version.', example='2****', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the ID of the tenant.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ReDeployLhDagVersionResponseBody = {
  deployId?: long(name='DeployId', example='15990'),
  errorCode?: string(name='ErrorCode', description='The ID of the request.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The operation that you want to perform. Set the value to **ReDeployLhDagVersion**.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The error code returned if the request fails.', example='035C92E0-2EAD-50E5-A6DD-550F5F73D7CE'),
  success?: boolean(name='Success', example='true'),
}

model ReDeployLhDagVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ReDeployLhDagVersionResponseBody(name='body'),
}

async function reDeployLhDagVersion(request: ReDeployLhDagVersionRequest): ReDeployLhDagVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReDeployLhDagVersion', 'POST', '/', 'json', false, 'json', request);
}

model ReRunTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', example='47****', position='Query'),
  dagVersion: string(name='DagVersion', example='2****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ReRunTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', example='true'),
}

model ReRunTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReRunTaskFlowInstanceResponseBody(name='body'),
}

async function reRunTaskFlowInstance(request: ReRunTaskFlowInstanceRequest): ReRunTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReRunTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model RefundPayAsYouGoOrderRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: string(name='OrderId', description='The error code returned if the request failed.', example='2190037****', position='Query'),
  tid?: long(name='Tid', description='The order ID of the order for the pay-as-you-go resource. You can call the ListEffectiveOrders operation to query the order ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model RefundPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Unsubscribes from a pay-as-you-go Data Management (DMS) resource.', example='true'),
}

model RefundPayAsYouGoOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RefundPayAsYouGoOrderResponseBody(name='body'),
}

async function refundPayAsYouGoOrder(request: RefundPayAsYouGoOrderRequest): RefundPayAsYouGoOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundPayAsYouGoOrder', 'POST', '/', 'json', false, 'json', request);
}

model RegisterInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', example='dblink_test', position='Query'),
  databasePassword: string(name='DatabasePassword', example='******', position='Query'),
  databaseUser: string(name='DatabaseUser', example='dmstest', position='Query'),
  dbaUid: long(name='DbaUid', example='22275482072787****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', example='2', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', example='cn-hangzhou', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', description='- Y：开启敏感数据保护
- NULL或其它：不开启敏感数据保护', example='Y', position='Query'),
  envType: string(name='EnvType', example='product', position='Query'),
  exportTimeout: int32(name='ExportTimeout', example='600', position='Query'),
  host: string(name='Host', example='172.XX.XXX.254', position='Query'),
  instanceAlias: string(name='InstanceAlias', position='Query'),
  instanceSource: string(name='InstanceSource', example='RDS', position='Query'),
  instanceType: string(name='InstanceType', example='MySQL', position='Query'),
  networkType: string(name='NetworkType', example='VPC', position='Query'),
  port: int32(name='Port', example='3306', position='Query'),
  queryTimeout: int32(name='QueryTimeout', example='60', position='Query'),
  safeRule: string(name='SafeRule', position='Query'),
  sid?: string(name='Sid', example='XXX', position='Query'),
  skipTest?: boolean(name='SkipTest', example='true', position='Query'),
  templateId?: long(name='TemplateId', description='分类分级模板ID，可从ListClassificationTemplates获取', example='31***', position='Query'),
  templateType?: string(name='TemplateType', description='分类分级模板类型，可从ListClassificationTemplates获取', example='INNER', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  useDsql?: int32(name='UseDsql', example='1', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-xxxxxxxxxxxxxxxxxxxxx', position='Query'),
}

model RegisterInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', example='true'),
}

model RegisterInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterInstanceResponseBody(name='body'),
}

/**
  * WB01220505
  *
 */
async function registerInstance(request: RegisterInstanceRequest): RegisterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterInstance', 'POST', '/', 'json', false, 'json', request);
}

model RegisterUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  mobile?: string(name='Mobile', description='The mobile number of the user.', example='130000000xx', position='Query'),
  roleNames?: string(name='RoleNames', description='The operation that you want to perform. Set the value to **RegisterUser**.', example='USER,DBA', position='Query'),
  tid?: long(name='Tid', description='The role that you want to assign to the user. Valid values:

*   **USER**: a regular user role
*   **DBA**: a database administrator (DBA) role
*   **ADMIN**: a DMS administrator role
*   **SECURITY_ADMIN**: a security administrator role

>  If you do not specify this parameter, the regular user role is assigned to the user by default. You can assign one or more roles to the user. Separate multiple roles with commas (,).', example='-1', position='Query'),
  uid: string(name='Uid', description='The error code returned.', example='12345678', position='Query'),
  userNick?: string(name='UserNick', description='The ID of the request.', example='dmstest', position='Query'),
}

model RegisterUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user already exists.'),
  requestId?: string(name='RequestId', description='Registers a user for your enterprise.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model RegisterUserResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterUserResponseBody(name='body'),
}

/**
  * The ID of the tenant.
  * >  To query ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.
  *
 */
async function registerUser(request: RegisterUserRequest): RegisterUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterUser', 'POST', '/', 'json', false, 'json', request);
}

model RestartDataCorrectSQLJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId?: long(name='JobId', description='The error code returned.', example='43253', position='Query'),
  orderId: long(name='OrderId', description='The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](~~208481~~) and [ListDBTaskSQLJob](~~207049~~) operations to obtain the value of this parameter.

If the Type parameter is set to SINGLE, you must pass the value of the JobId parameter to confirm the ID of the SQL task that you want to rerun.', example='453****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  type: string(name='Type', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='ALL', position='Query'),
}

model RestartDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **RestartDataCorrectSQLJob**.', example='809B52F2-CD2B-53DA-88C8-F7042787E673'),
  success?: boolean(name='Success', example='true'),
}

model RestartDataCorrectSQLJobResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDataCorrectSQLJobResponseBody(name='body'),
}

async function restartDataCorrectSQLJob(request: RestartDataCorrectSQLJobRequest): RestartDataCorrectSQLJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDataCorrectSQLJob', 'POST', '/', 'json', false, 'json', request);
}

model ResumeTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='11****', position='Query'),
  dagInstanceId: long(name='DagInstanceId', example='3****', position='Query'),
  dagVersion: string(name='DagVersion', example='[]', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ResumeTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FF2E325-763F-5E27-9157-C3CFA02F4CBF'),
  success?: boolean(name='Success', example='true'),
}

model ResumeTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeTaskFlowInstanceResponseBody(name='body'),
}

async function resumeTaskFlowInstance(request: ResumeTaskFlowInstanceRequest): ResumeTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model RetryDataCorrectPreCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The error code returned.', example='414****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', description='The ID of the request.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model RetryDataCorrectPreCheckResponseBody = {
  errorCode?: string(name='ErrorCode', example='MissingOrderId'),
  errorMessage?: string(name='ErrorMessage', example='OrderId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **RetryDataCorrectPreCheck**.', example='5BC081C7-5F77-5C92-9758-E1ED17CA****'),
  success?: boolean(name='Success', example='true'),
}

model RetryDataCorrectPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: RetryDataCorrectPreCheckResponseBody(name='body'),
}

async function retryDataCorrectPreCheck(request: RetryDataCorrectPreCheckRequest): RetryDataCorrectPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryDataCorrectPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model RevokeTemplateAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  templateId: long(name='TemplateId', description='The ID of the permission template.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
  userIds: string(name='UserIds', description='The IDs of users from whom you want to revoke permissions by using a permission template.', example='[12***,34***,56***]', position='Query'),
}

model RevokeTemplateAuthorityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  result?: boolean(name='Result', description='Indicates whether the permissions were revoked from the users.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RevokeTemplateAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeTemplateAuthorityResponseBody(name='body'),
}

/**
  * You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function revokeTemplateAuthority(request: RevokeTemplateAuthorityRequest): RevokeTemplateAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeTemplateAuthority', 'POST', '/', 'json', false, 'json', request);
}

model RevokeUserPermissionRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId?: string(name='DbId', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

> 
*   If the database is a logical database, set this parameter to **true**.
*   If the database is a physical database, set this parameter to **false**.', example='1860****', position='Query'),
  dsType: string(name='DsType', description='The ID of the database. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='DATABASE', position='Query'),
  instanceId?: long(name='InstanceId', description='The error message returned.', example='174****', position='Query'),
  logic?: boolean(name='Logic', description='The type of the permission. Valid values:

*   **QUERY**: the data query permission
*   **EXPORT**: the data export permission
*   **CORRECT**: the data change permission', example='false', position='Query'),
  permTypes: string(name='PermTypes', description='The ID of the request.', example='CORRECT', position='Query'),
  tableId?: string(name='TableId', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='13****', position='Query'),
  tableName?: string(name='TableName', description='The ID of the database instance. You must specify this parameter when you revoke a permission from the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to query the database instance ID.', example='table_name', position='Query'),
  tid?: long(name='Tid', description='The error code returned.', example='3***', position='Query'),
  userAccessId: string(name='UserAccessId', description='Revokes a permission on a resource from a user.', example='774****', position='Query'),
  userId: string(name='UserId', description='The operation that you want to perform. Set the value to **RevokeUserPermission**.', example='51****', position='Query'),
}

model RevokeUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', description='WB01220210', example='MissingUserId'),
  errorMessage?: string(name='ErrorMessage', example='UserId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='RevokeUserPermission', example='A99CD576-1E18-4E86-931E-C3CCE56D****'),
  success?: boolean(name='Success', example='true'),
}

model RevokeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeUserPermissionResponseBody(name='body'),
}

async function revokeUserPermission(request: RevokeUserPermissionRequest): RevokeUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model SearchDataTrackResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  columnFilter?: {
    betweenEnd?: string(name='BetweenEnd', example='10'),
    betweenStart?: string(name='BetweenStart', example='1'),
    columnName?: string(name='ColumnName', example='c_payer_name'),
    inList?: [ string ](name='InList'),
    operator?: string(name='Operator', example='EQUAL'),
    value?: string(name='Value', example='1'),
  }(name='ColumnFilter', shrink='json', position='Query'),
  filterEndTime?: string(name='FilterEndTime', example='2023-04-23 10:00:00', position='Query'),
  filterStartTime?: string(name='FilterStartTime', example='2023-04-23 00:00:00', position='Query'),
  filterTableList?: [ string ](name='FilterTableList', shrink='json', position='Query'),
  filterTypeList?: [ string ](name='FilterTypeList', shrink='json', position='Query'),
  orderId: long(name='OrderId', example='420****', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='62***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SearchDataTrackResultResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
  trackResult?: {
    eventList?: [ 
      {
        dataAfter?: [ string ](name='DataAfter'),
        dataBefore?: [ string ](name='DataBefore'),
        eventId?: long(name='EventId', example='1'),
        eventLength?: long(name='EventLength', example='4324'),
        eventTimestamp?: string(name='EventTimestamp', example='2023-04-23 10:25:47'),
        eventType?: string(name='EventType', example='UPDATE_ROWS'),
        rollSQL?: string(name='RollSQL', example='-- Timestamp:2023-04-23 10:25:47 #1\\r\\nUPDATE `dc_test`.`tb_chunk_dml` SET `id`=1 , `gmt_create`=\\"2021-09-30T00:00:00\\" , `content`=\\"2023-03-30 14:51:50\\" , `c1`=\\"2023-04-17 13:42:03\\" , `c_id`=1 , `c13425`=\\"b\\\\\\"\\" , `c432532535`= null , `c1432`= null , `c143243253`= null , `c1432535`= null , `c43125325`= null , `c3425325`= null WHERE  (`id`=1)"'),
      }
    ](name='EventList'),
    tableInfoList?: [ 
      {
        columns?: [ 
          {
            columnName?: string(name='ColumnName', example='basic_platform'),
            columnPosition?: int32(name='ColumnPosition', example='1'),
            columnType?: string(name='ColumnType', example='BIGINT'),
            fictive?: boolean(name='Fictive', example='true'),
          }
        ](name='Columns'),
        description?: string(name='Description', example='auto-description'),
        schemaName?: string(name='SchemaName', example='prod_eb_vas'),
        tableName?: string(name='TableName', example='import_table_test1'),
      }
    ](name='TableInfoList'),
    totalCount?: long(name='TotalCount', example='109'),
  }(name='TrackResult'),
}

model SearchDataTrackResultResponse = {
  headers: map[string]string(name='headers'),
  body: SearchDataTrackResultResponseBody(name='body'),
}

async function searchDataTrackResult(request: SearchDataTrackResultRequest): SearchDataTrackResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchDataTrackResult', 'POST', '/', 'json', false, 'json', request);
}

model SearchDatabaseRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MYSQL', position='Query'),
  envType?: string(name='EnvType', description='The environment type of the database. For more information, see [Change the environment type of an instance](~~163309~~).', example='test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for databases.', example='testdb', position='Query'),
  searchRange?: string(name='SearchRange', description='The query range based on permissions. Valid values:

*   **HAS_PERMSSION**: searches for databases on which the current user has permissions.
*   **OWNER**: searches for databases owned by the current user.
*   **MY_FOCUS**: searches for databases that the current user follows.
*   **UNKNOWN**: searches for all databases.', example='HAS_PERMSSION', position='Query'),
  searchTarget?: string(name='SearchTarget', description='The category of the database. Valid values:

*   **DB**: single database or logical database.
*   **SINGLE_DB**: single database.
*   **LOGIC_DB**: logical database.', example='SINGLE_DB', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model SearchDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  searchDatabaseList?: {
    searchDatabase?: [ 
    {
      alias?: string(name='Alias', description='The alias of the database.', example='test_rds'),
      catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.

> If the type of the database engine is PostgreSQL, the name of the database is displayed.', example='dmstest'),
      databaseId?: string(name='DatabaseId', description='The ID of the database.', example='2528****'),
      datalinkName?: string(name='DatalinkName', description='The name of the data link for cross-database queries.', example='datalink_name'),
      dbType?: string(name='DbType', description='The type of the database engine.', example='mysql'),
      dbaId?: string(name='DbaId', description='The ID of the user who assumes the database administrator (DBA) role.', example='10****'),
      encoding?: string(name='Encoding', description='The encoding method of the database.', example='utf8'),
      envType?: string(name='EnvType', description='The environment type of the database. For more information, see [Change the environment type of an instance](~~163309~~).', example='test'),
      host?: string(name='Host', description='The endpoint of the instance in which the database resides.', example='rm-xxxx.mysql.rds.aliyuncs.com'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the databases.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the database owners.'),
      port?: int32(name='Port', description='The port of the instance in which the database resides.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', description='The system ID (SID) of the instance in which the database resides.', example='testSid'),
    }
  ](name='SearchDatabase')
  }(name='SearchDatabaseList', description='The information about the databases.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model SearchDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: SearchDatabaseResponseBody(name='body'),
}

async function searchDatabase(request: SearchDatabaseRequest): SearchDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchDatabase', 'POST', '/', 'json', false, 'json', request);
}

model SearchTableRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbType?: string(name='DbType', description='The type of database. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **Oracle**
*   **DRDS**
*   **OceanBase**
*   **Mongo**
*   **Redis**', example='MySQL', position='Query'),
  envType?: string(name='EnvType', description='The type of the environment to which databases belong. For more information, see [Change the environment type of an instance](~~163309~~).', example='PRODUCT', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of each table.', example='false', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to query tables.', example='test', position='Query'),
  searchRange?: string(name='SearchRange', description='The scope of tables that you want to query. Valid values:

*   **HAS_PERMSSION**: the tables on which the current account has permissions.
*   **OWNER**: the tables owned by the current account.
*   **MY_FOCUS**: the tables that the current account follows.
*   **UNKNOWN**: all tables.', example='OWNER', position='Query'),
  searchTarget?: string(name='SearchTarget', description='The type of table that you want to query. Valid values:

*   **TABLE**: physical and logical tables
*   **SINGLE_TABLE**: physical tables
*   **LOGIC_TABLE**: logical tables', example='LOGIC_TABLE', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](~~181330~~) section of the "Manage DMS tenants" topic.', example='1', position='Query'),
}

model SearchTableResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1489257F-1B5D-4B5B-89EF-923C12CEEBD1'),
  searchTableList?: {
    searchTable?: [ 
    {
      DBSearchName?: string(name='DBSearchName', description='The name that is used to search for the database to which the table belongs.', example='test'),
      databaseId?: string(name='DatabaseId', description='The ID of the database to which the table belongs.', example='1'),
      dbName?: string(name='DbName', description='The name of the database.', example='test'),
      dbType?: string(name='DbType', description='The type of the database. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **Oracle**
*   **DRDS**
*   **OceanBase**
*   **Mongo**
*   **Redis**', example='mysql'),
      description?: string(name='Description', description='The description of the table.', example='test'),
      encoding?: string(name='Encoding', description='The encoding format of the table.', example='utf8'),
      engine?: string(name='Engine', description='The engine of the table.', example='innodb'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='test'),
      logic?: boolean(name='Logic', description='Indicates whether the table is a logical table. Valid values:

*   **true**: The table is a logical table.
*   **false**: The table is not a logical table.', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the table owners.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the table owners.'),
      tableGuid?: string(name='TableGuid', description='The GUID of the table.', example='IDB_L_9032.db-test.yuyang_test'),
      tableId?: string(name='TableId', description='The ID of the table.', example='1'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
      tableSchemaName?: string(name='TableSchemaName', description='The name of the database to which the table belongs.', example='test@xxx.xxx.xxx.xxx:3306'),
    }
  ](name='SearchTable')
  }(name='SearchTableList', description='The details of the tables.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model SearchTableResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTableResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances that are managed in Security Collaboration mode.
  *
 */
async function searchTable(request: SearchTableRequest): SearchTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTable', 'POST', '/', 'json', false, 'json', request);
}

model SetOwnersRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerIds: string(name='OwnerIds', description='The operation that you want to perform. Set the value to **SetOwners**.', example='51****', position='Query'),
  ownerType: string(name='OwnerType', description='The ID of the request.', example='INSTANCE', position='Query'),
  resourceId: string(name='ResourceId', description='The error code.', example='174****', position='Query'),
  tid?: long(name='Tid', description='The ID of the user whom you want to specify as an owner. Separate multiple IDs with commas (,). You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the ID of the user.

>  The value of the OwnerIds parameter is that of the UserId parameter.', example='3***', position='Query'),
}

model SetOwnersResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', example='true'),
}

model SetOwnersResponse = {
  headers: map[string]string(name='headers'),
  body: SetOwnersResponseBody(name='body'),
}

async function setOwners(request: SetOwnersRequest): SetOwnersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetOwners', 'POST', '/', 'json', false, 'json', request);
}

model StopTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to query the execution record ID.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The response parameters.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model StopTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='Stops a task flow instance.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='028BF827-3801-5869-8548-F4A039256308'),
  success?: boolean(name='Success', example='true'),
}

model StopTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopTaskFlowInstanceResponseBody(name='body'),
}

async function stopTaskFlowInstance(request: StopTaskFlowInstanceRequest): StopTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model SubmitOrderApprovalRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', description='The ID of the ticket.', example='12345', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model SubmitOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SubmitOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitOrderApprovalResponseBody(name='body'),
}

async function submitOrderApproval(request: SubmitOrderApprovalRequest): SubmitOrderApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitOrderApproval', 'POST', '/', 'json', false, 'json', request);
}

model SubmitStructSyncOrderApprovalRequest {
  regionId?: string(name='RegionId', position='Host'),
  orderId: long(name='OrderId', example='4324535', minimum=1, maximum=9223372036854775807, position='Query'),
  tid?: long(name='Tid', example='1', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SubmitStructSyncOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471D'),
  success?: boolean(name='Success', example='true'),
  workflowInstanceId?: long(name='WorkflowInstanceId', example='432523'),
}

model SubmitStructSyncOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitStructSyncOrderApprovalResponseBody(name='body'),
}

async function submitStructSyncOrderApproval(request: SubmitStructSyncOrderApprovalRequest): SubmitStructSyncOrderApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitStructSyncOrderApproval', 'POST', '/', 'json', false, 'json', request);
}

model SuspendTaskFlowInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request failed.', example='7***', position='Query'),
  dagInstanceId: long(name='DagInstanceId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='47****', position='Query'),
  tid?: long(name='Tid', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to query the execution record ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model SuspendTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='SuspendTaskFlowInstance', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Suspends a task flow instance.', example='028BF827-3801-5869-8548-F4A039256305'),
  success?: boolean(name='Success', example='true'),
}

model SuspendTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendTaskFlowInstanceResponseBody(name='body'),
}

async function suspendTaskFlowInstance(request: SuspendTaskFlowInstanceRequest): SuspendTaskFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendTaskFlowInstance', 'POST', '/', 'json', false, 'json', request);
}

model SyncDatabaseMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbId: string(name='DbId', description='The ID of the database.', example='123', position='Query'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
}

model SyncDatabaseMetaResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SyncDatabaseMetaResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDatabaseMetaResponseBody(name='body'),
}

async function syncDatabaseMeta(request: SyncDatabaseMetaRequest): SyncDatabaseMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncDatabaseMeta', 'POST', '/', 'json', false, 'json', request);
}

model SyncInstanceMetaRequest {
  regionId?: string(name='RegionId', position='Host'),
  ignoreTable?: boolean(name='IgnoreTable', description='Specifies whether to skip synchronization for the metadata of table dictionaries. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='12***', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](~~181330~~) section of the Manage DMS tenants topic.', example='3***', position='Query'),
}

model SyncInstanceMetaResponseBody = {
  errorCode?: string(name='ErrorCode', description='Details about the topology of the data table.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model SyncInstanceMetaResponse = {
  headers: map[string]string(name='headers'),
  body: SyncInstanceMetaResponseBody(name='body'),
}

/**
  * You can call this operation only for database instances whose control mode is Security Collaboration.
  *
 */
async function syncInstanceMeta(request: SyncInstanceMetaRequest): SyncInstanceMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncInstanceMeta', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthorityTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  description: string(name='Description', description='The description of the permission template.

>  You must specify the Name or Description parameter. Otherwise, the API call fails.', example='This template is used for business testing.', position='Query'),
  name: string(name='Name', description='The name of the permission template.

>  You must specify the Name or Description parameter. Otherwise, the API call fails.', example='Test template.', position='Query'),
  templateId: long(name='TemplateId', description='The ID of the permission template.', example='1563', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***', position='Query'),
}

model UpdateAuthorityTemplateResponseBody = {
  authorityTemplateView?: {
    creatorId?: long(name='CreatorId', description='The ID of the user who created the permission template.', example='12***'),
    description?: string(name='Description', description='The description of the permission template.', example='This template is used for business testing.'),
    name?: string(name='Name', description='The name of the permission template.', example='Test template.'),
    templateId?: long(name='TemplateId', description='The ID of the permission template.', example='1563'),
  }(name='AuthorityTemplateView', description='The details of the permission template.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateAuthorityTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthorityTemplateResponseBody(name='body'),
}

/**
  * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](~~324212~~).
  *
 */
async function updateAuthorityTemplate(request: UpdateAuthorityTemplateRequest): UpdateAuthorityTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthorityTemplate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataLinkName?: string(name='DataLinkName', example='datalink_test', position='Query'),
  databasePassword: string(name='DatabasePassword', example='******', position='Query'),
  databaseUser: string(name='DatabaseUser', example='dbuser', position='Query'),
  dbaId: string(name='DbaId', example='27****', position='Query'),
  ddlOnline?: int32(name='DdlOnline', example='0', position='Query'),
  ecsInstanceId?: string(name='EcsInstanceId', example='i-2zei9gs1t7h8l7ac****', position='Query'),
  ecsRegion?: string(name='EcsRegion', example='cn-hangzhou', position='Query'),
  enableSellSitd?: string(name='EnableSellSitd', description='- Y：开启敏感数据保护
- N：关闭敏感数据保护
- 为NULL或其它：不更新敏感数据保护的状态（保持原始的开启或关闭状态）', example='Y', position='Query'),
  envType: string(name='EnvType', example='product', position='Query'),
  exportTimeout: int32(name='ExportTimeout', example='600', position='Query'),
  host: string(name='Host', example='192.XXX.0.56', position='Query'),
  instanceAlias: string(name='InstanceAlias', example='instance_test', position='Query'),
  instanceId: string(name='InstanceId', example='126****', position='Query'),
  instanceSource: string(name='InstanceSource', example='ECS_OWN', position='Query'),
  instanceType: string(name='InstanceType', example='mysql', position='Query'),
  port: int32(name='Port', example='3306', position='Query'),
  queryTimeout: int32(name='QueryTimeout', example='60', position='Query'),
  safeRuleId: string(name='SafeRuleId', example='3****', position='Query'),
  sid?: string(name='Sid', example='XXX', position='Query'),
  skipTest?: boolean(name='SkipTest', example='false', position='Query'),
  templateId?: long(name='TemplateId', description='更新分类分级模板ID，可从ListClassificationTemplates获取', example='3***', position='Query'),
  templateType?: string(name='TemplateType', description='更新分类分级模板类型，可从ListClassificationTemplates获取', example='INNER', position='Query'),
  tid?: long(name='Tid', example='3***', position='Query'),
  useDsql?: int32(name='UseDsql', example='0', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-xxx', position='Query'),
}

model UpdateInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', example='false'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSLARulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the tenant.

> :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='11****', position='Query'),
  slaRuleList?: [ 
    {
      dagId: long(name='DagId', description='The error code returned if the request failed.', example='15***'),
      intervalMinutes: int32(name='IntervalMinutes', description='Updates the service level agreement (SLA) timeout reminder for a task flow.', example='1080'),
      nodeId?: long(name='NodeId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='0'),
      type: int32(name='Type', description='The rule type. Valid values:

*   **0**: SLA rules for task flows
*   **1**: SLA rules for nodes', example='0'),
    }
  ](name='SlaRuleList', description='The timeout period. Unit: minutes.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The list of SLA rules.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', description='340282', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='UpdateSLARules', example='88E053F7-347B-52DD-A186-1F340EEC0C27'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSLARulesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSLARulesResponseBody(name='body'),
}

/**
  * The ID of the task node.
  *
 */
async function updateSLARules(request: UpdateSLARulesRequest): UpdateSLARulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSLARules', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScenarioRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='test', position='Query'),
  scenarioId: string(name='ScenarioId', example='12***', position='Query'),
  scenarioName: string(name='ScenarioName', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model UpdateScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScenarioResponseBody(name='body'),
}

async function updateScenario(request: UpdateScenarioRequest): UpdateScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScenario', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeConfig: string(name='NodeConfig', example='{ "rerun":{ "rerunEnable":true,  "rerunCount":1,   "rerunInterval":10 } }', position='Query'),
  nodeId: string(name='NodeId', example='43****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskConfigResponseBody(name='body'),
}

async function updateTaskConfig(request: UpdateTaskConfigRequest): UpdateTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeContent?: string(name='NodeContent', example='{ "dbId":12****, "sql":"select * from test_table",   "dbType":"lindorm_sql"  }', position='Query'),
  nodeId: string(name='NodeId', example='43****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskContentResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskContentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskContentResponseBody(name='body'),
}

async function updateTaskContent(request: UpdateTaskContentRequest): UpdateTaskContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskContent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowConstantsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagConstants?: [ 
    {
      key?: string(name='Key', description='The key name of a constant for the task flow.', example='poc_test'),
      value?: string(name='Value', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='poc_test'),
    }
  ](name='DagConstants', description='The key value of a constant for the task flow.', shrink='json', position='Query'),
  dagId: long(name='DagId', description='The error code returned if the request failed.', example='3****', position='Query'),
  tid?: long(name='Tid', description='The constants for the task flow.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowConstantsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **UpdateTaskFlowConstants**.', example='C4CCC000-C193-5A32-B701-573F497BF729'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowConstantsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowConstantsResponseBody(name='body'),
}

async function updateTaskFlowConstants(request: UpdateTaskFlowConstantsRequest): UpdateTaskFlowConstantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowConstants', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowCooperatorsRequest {
  regionId?: string(name='RegionId', position='Host'),
  cooperatorIds?: [ string ](name='CooperatorIds', shrink='json', position='Query'),
  dagId: long(name='DagId', example='11****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowCooperatorsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowCooperatorsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowCooperatorsResponseBody(name='body'),
}

async function updateTaskFlowCooperators(request: UpdateTaskFlowCooperatorsRequest): UpdateTaskFlowCooperatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowCooperators', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowEdgesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='$.parameters[3].schema.example', example='15***', position='Query'),
  edges: [ 
    {
      id: long(name='Id', description='$.parameters[2].schema.description', example='24***'),
      nodeEnd: long(name='NodeEnd', description='$.parameters[2].schema.example', example='44***'),
      nodeFrom: long(name='NodeFrom', description='$.parameters[2].schema.enumValueTitles', example='44***'),
    }
  ](name='Edges', description='$.parameters[3].schema.enumValueTitles', shrink='json', position='Query'),
  tid?: long(name='Tid', description='$.parameters[3].schema.description', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowEdgesResponseBody = {
  errorCode?: string(name='ErrorCode', description='UpdateTaskFlowEdges', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='WB01220505', example='UnknownError'),
  requestId?: string(name='RequestId', description='Updates the start and end nodes of specified edges of a specified task flow at a time.', example='93FC1AE1-EC54-52B1-B146-650180FB82E8'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowEdgesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowEdgesResponseBody(name='body'),
}

/**
  * Indicates whether the request was successful. Valid values:
  * *   **true**: The request was successful.
  * *   **false**: The request failed.
  *
 */
async function updateTaskFlowEdges(request: UpdateTaskFlowEdgesRequest): UpdateTaskFlowEdgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowEdges', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowNameAndDescRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The description that you want to specify for the task flow.', example='15***', position='Query'),
  dagName: string(name='DagName', description='The error code returned if the request failed.', example='test', position='Query'),
  description?: string(name='Description', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='test', position='Query'),
  tid?: long(name='Tid', description='The new name that you want to specify for the task flow.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowNameAndDescResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **UpdateTaskFlowNameAndDesc**.', example='F73CCB9D-0CF3-5D3D-97B0-D852A8022663'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowNameAndDescResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowNameAndDescResponseBody(name='body'),
}

async function updateTaskFlowNameAndDesc(request: UpdateTaskFlowNameAndDescRequest): UpdateTaskFlowNameAndDescResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowNameAndDesc', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowNotificationRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='Specifies whether to enable notifications for successful task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='15***', position='Query'),
  dagNotificationFail: boolean(name='DagNotificationFail', description='The error code returned if the request failed.', example='true', position='Query'),
  dagNotificationSla: boolean(name='DagNotificationSla', description='The operation that you want to perform. Set the value to **UpdateTaskFlowNotification**.', example='true', position='Query'),
  dagNotificationSuccess: boolean(name='DagNotificationSuccess', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='true', position='Query'),
  tid?: long(name='Tid', description='Specifies whether to enable notifications for failed task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Specifies whether to enable SLA global notifications for task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='3BDC762F-2525-5E47-8748-D6C58BDB3B38'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowNotificationResponseBody(name='body'),
}

async function updateTaskFlowNotification(request: UpdateTaskFlowNotificationRequest): UpdateTaskFlowNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowNotification', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowOwnerRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The error code returned if the request failed.', example='15***', position='Query'),
  newOwnerId: string(name='NewOwnerId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='51****', position='Query'),
  tid?: long(name='Tid', description='The user ID of the new owner. You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the user ID.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **UpdateTaskFlowOwner**.', example='482C61C1-2537-5BFB-8E58-34D9F17AD3C3'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowOwnerResponseBody(name='body'),
}

/**
  * The ID of the tenant.
  * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).
  *
 */
async function updateTaskFlowOwner(request: UpdateTaskFlowOwnerRequest): UpdateTaskFlowOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowOwner', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowRelationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***', position='Query'),
  edges?: [ 
    {
      id?: long(name='Id', description='The error code returned if the request failed.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The operation that you want to perform. Set the value to **UpdateTaskFlowRelations**.', example='44***'),
    }
  ](name='Edges', description='The list of task flow edges to be updated.', shrink='json', position='Query'),
  tid?: long(name='Tid', description='The ID of the task flow edge.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskFlowRelationsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='WB01220505', example='15D9E71C-405B-57D7-BE6E-707C2C7A8E0B'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowRelationsResponseBody(name='body'),
}

/**
  * The ID of the end node on the edge.
  *
 */
async function updateTaskFlowRelations(request: UpdateTaskFlowRelationsRequest): UpdateTaskFlowRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowRelations', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowScheduleRequest {
  regionId?: string(name='RegionId', position='Host'),
  cronBeginDate?: string(name='CronBeginDate', example='CronBeginDate_test', position='Query'),
  cronEndDate?: string(name='CronEndDate', example='CronEndDate_test', position='Query'),
  cronStr?: string(name='CronStr', example='CronStr_test', position='Query'),
  cronType?: string(name='CronType', example='HOUR', position='Query'),
  dagId: long(name='DagId', example='7***', position='Query'),
  scheduleParam: string(name='ScheduleParam', example='ScheduleParam_test', position='Query'),
  scheduleSwitch: boolean(name='ScheduleSwitch', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeZoneId?: string(name='TimeZoneId', example='Asia/Shanghai', position='Query'),
  triggerType: string(name='TriggerType', example='Event', position='Query'),
}

model UpdateTaskFlowScheduleResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', example='InvalidParameterValid'),
  requestId?: string(name='RequestId', example='7BF38A13-C181-5B5E-97F1-8643F8A10093'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowScheduleResponseBody(name='body'),
}

async function updateTaskFlowSchedule(request: UpdateTaskFlowScheduleRequest): UpdateTaskFlowScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowSchedule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskFlowTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dagId: long(name='DagId', example='43****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables: string(name='TimeVariables', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}', position='Query'),
}

model UpdateTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskFlowTimeVariablesResponseBody(name='body'),
}

async function updateTaskFlowTimeVariables(request: UpdateTaskFlowTimeVariablesRequest): UpdateTaskFlowTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskFlowTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='The error code returned if the request failed.', example='449***', position='Query'),
  nodeName: string(name='NodeName', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='Spark-test', position='Query'),
  tid?: long(name='Tid', description='The name of the node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node name.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskNameResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **UpdateTaskName**.', example='C4604178-3BE1-5973-ACF0-7D561AEEF3A8'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskNameResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskNameResponseBody(name='body'),
}

async function updateTaskName(request: UpdateTaskNameRequest): UpdateTaskNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskOutputRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', description='## Single-instance SQL assignment

- Example of NodeOutput:```
Variable extraction settings
             
                "row":0, // Rows. -1 indicates all rows.
                "column":-1, // Columns. -1 indicates all columns.
                 
                Delimiter
                If you select all rows or columns, you must specify a connector. The returned value of the variable is a string.
                 
                  
             
             
              
            "variableName":"var", // Variable name
            "description":"For demo" // Variable description
```


## Script code /ECS remote command

- Example of NodeOutput:```
"extractMethod":"json", // JSON
            "variableName":"var", // Variable name
            "description":"demo desc" // Variable description
```', example='14059', position='Query'),
  nodeOutput?: string(name='NodeOutput', description='Updates the output variables for a specified task node.', position='Query'),
  tid?: long(name='Tid', description='The operation that you want to perform. Set the value to **UpdateTaskOutput**.', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
}

model UpdateTaskOutputResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='AB524768-8A5F-523A-91BD-1147187FCD62'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskOutputResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskOutputResponseBody(name='body'),
}

/**
  * The output variables for the task.
  *
 */
async function updateTaskOutput(request: UpdateTaskOutputRequest): UpdateTaskOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskOutput', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskTimeVariablesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', example='43****', position='Query'),
  tid?: long(name='Tid', example='3***', minimum=1, maximum=9223372036854775807, position='Query'),
  timeVariables: string(name='TimeVariables', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}', position='Query'),
}

model UpdateTaskTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskTimeVariablesResponseBody(name='body'),
}

async function updateTaskTimeVariables(request: UpdateTaskTimeVariablesRequest): UpdateTaskTimeVariablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskTimeVariables', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed each day.', example='1000', position='Query'),
  maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried each day.', example='1000', position='Query'),
  mobile?: string(name='Mobile', description='The DingTalk ID or mobile number of the user.', example='188xxxxxxxx', position='Query'),
  roleNames?: string(name='RoleNames', description='The roles that the user assumes. For more information about the valid values, see the Request parameters section in the [RegisterUser](~~141565~~) topic.', example='ADMIN,DBA', position='Query'),
  tid?: long(name='Tid', description='The ID of the tenant.

> : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](~~181330~~).', example='-1', position='Query'),
  uid: long(name='Uid', description='The Alibaba Cloud unique ID (UID) of the user to update.', example='123456789', position='Query'),
  userNick?: string(name='UserNick', description='The nickname of the user.', example='test', position='Query'),
}

model UpdateUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', description='Indicates whether the request succeeded.', example='false'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

