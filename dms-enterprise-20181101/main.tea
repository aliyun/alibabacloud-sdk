/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dms-enterprise', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model SubmitStructSyncOrderApprovalRequest {
  orderId?: long(name='OrderId'),
}

model SubmitStructSyncOrderApprovalResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  workflowInstanceId?: long(name='WorkflowInstanceId'),
}

model SubmitStructSyncOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitStructSyncOrderApprovalResponseBody(name='body'),
}

async function submitStructSyncOrderApprovalWithOptions(request: SubmitStructSyncOrderApprovalRequest, runtime: Util.RuntimeOptions): SubmitStructSyncOrderApprovalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitStructSyncOrderApproval', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitStructSyncOrderApproval(request: SubmitStructSyncOrderApprovalRequest): SubmitStructSyncOrderApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitStructSyncOrderApprovalWithOptions(request, runtime);
}

model ListDatabaseUserPermssionsRequest {
  tid?: long(name='Tid'),
  permType?: string(name='PermType'),
  dbId?: string(name='DbId'),
  logic?: boolean(name='Logic'),
  userName?: string(name='UserName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDatabaseUserPermssionsResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  userPermissions?: {
    userPermission?: [ 
    {
      dbId?: string(name='DbId'),
      tableName?: string(name='TableName'),
      userId?: string(name='UserId'),
      schemaName?: string(name='SchemaName'),
      logic?: boolean(name='Logic'),
      userNickName?: string(name='UserNickName'),
      instanceId?: string(name='InstanceId'),
      permDetails?: {
        permDetail?: [ 
        {
          originFrom?: string(name='OriginFrom'),
          permType?: string(name='PermType'),
          expireDate?: string(name='ExpireDate'),
          createDate?: string(name='CreateDate'),
          userAccessId?: string(name='UserAccessId'),
          extraData?: string(name='ExtraData'),
        }
      ](name='PermDetail')
      }(name='PermDetails'),
      envType?: string(name='EnvType'),
      columnName?: string(name='ColumnName'),
      dbType?: string(name='DbType'),
      dsType?: string(name='DsType'),
      tableId?: string(name='TableId'),
      searchName?: string(name='SearchName'),
      alias?: string(name='Alias'),
    }
  ](name='UserPermission')
  }(name='UserPermissions'),
  success?: boolean(name='Success'),
}

model ListDatabaseUserPermssionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatabaseUserPermssionsResponseBody(name='body'),
}

async function listDatabaseUserPermssionsWithOptions(request: ListDatabaseUserPermssionsRequest, runtime: Util.RuntimeOptions): ListDatabaseUserPermssionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDatabaseUserPermssions', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDatabaseUserPermssions(request: ListDatabaseUserPermssionsRequest): ListDatabaseUserPermssionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatabaseUserPermssionsWithOptions(request, runtime);
}

model ListSensitiveColumnsRequest {
  tid?: long(name='Tid'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  columnName?: string(name='ColumnName'),
  securityLevel?: string(name='SecurityLevel'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListSensitiveColumnsResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  sensitiveColumnList?: {
    sensitiveColumn?: [ 
    {
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      securityLevel?: string(name='SecurityLevel'),
      columnCount?: long(name='ColumnCount'),
      schemaName?: string(name='SchemaName'),
      functionType?: string(name='FunctionType'),
    }
  ](name='SensitiveColumn')
  }(name='SensitiveColumnList'),
  success?: boolean(name='Success'),
}

model ListSensitiveColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveColumnsResponseBody(name='body'),
}

async function listSensitiveColumnsWithOptions(request: ListSensitiveColumnsRequest, runtime: Util.RuntimeOptions): ListSensitiveColumnsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSensitiveColumns', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSensitiveColumns(request: ListSensitiveColumnsRequest): ListSensitiveColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveColumnsWithOptions(request, runtime);
}

model ListUsersRequest {
  tid?: long(name='Tid'),
  role?: string(name='Role'),
  userState?: string(name='UserState'),
  searchKey?: string(name='SearchKey'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUsersResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  userList?: {
    user?: [ 
    {
      state?: string(name='State'),
      curResultCount?: long(name='CurResultCount'),
      userId?: string(name='UserId'),
      lastLoginTime?: string(name='LastLoginTime'),
      maxResultCount?: long(name='MaxResultCount'),
      parentUid?: string(name='ParentUid'),
      roleIdList?: {
        roleIds?: [ int32 ](name='RoleIds')
      }(name='RoleIdList'),
      roleNameList?: {
        roleNames?: [ string ](name='RoleNames')
      }(name='RoleNameList'),
      nickName?: string(name='NickName'),
      maxExecuteCount?: long(name='MaxExecuteCount'),
      curExecuteCount?: long(name='CurExecuteCount'),
      mobile?: string(name='Mobile'),
      uid?: string(name='Uid'),
    }
  ](name='User')
  }(name='UserList'),
  success?: boolean(name='Success'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model SubmitOrderApprovalRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
}

model SubmitOrderApprovalResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SubmitOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitOrderApprovalResponseBody(name='body'),
}

async function submitOrderApprovalWithOptions(request: SubmitOrderApprovalRequest, runtime: Util.RuntimeOptions): SubmitOrderApprovalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitOrderApproval', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitOrderApproval(request: SubmitOrderApprovalRequest): SubmitOrderApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitOrderApprovalWithOptions(request, runtime);
}

model GrantUserPermissionRequest {
  tid?: long(name='Tid'),
  userId?: string(name='UserId'),
  dsType?: string(name='DsType'),
  dbId?: string(name='DbId'),
  logic?: boolean(name='Logic'),
  tableId?: string(name='TableId'),
  tableName?: string(name='TableName'),
  permTypes?: string(name='PermTypes'),
  expireDate?: string(name='ExpireDate'),
}

model GrantUserPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GrantUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantUserPermissionResponseBody(name='body'),
}

async function grantUserPermissionWithOptions(request: GrantUserPermissionRequest, runtime: Util.RuntimeOptions): GrantUserPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantUserPermission', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantUserPermission(request: GrantUserPermissionRequest): GrantUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantUserPermissionWithOptions(request, runtime);
}

model GetMetaTableDetailInfoRequest {
  tid?: long(name='Tid'),
  tableGuid?: string(name='TableGuid'),
}

model GetMetaTableDetailInfoResponseBody = {
  requestId?: string(name='RequestId'),
  detailInfo?: {
    indexList?: [ 
      {
        indexColumns?: [ string ](name='IndexColumns'),
        indexName?: string(name='IndexName'),
        unique?: boolean(name='Unique'),
        indexType?: string(name='IndexType'),
        indexId?: string(name='IndexId'),
      }
    ](name='IndexList'),
    columnList?: [ 
      {
        columnName?: string(name='ColumnName'),
        description?: string(name='Description'),
        dataScale?: int32(name='DataScale'),
        dataPrecision?: int32(name='DataPrecision'),
        columnType?: string(name='ColumnType'),
        autoIncrement?: boolean(name='AutoIncrement'),
        position?: string(name='Position'),
        nullable?: boolean(name='Nullable'),
        columnId?: string(name='ColumnId'),
        dataLength?: int32(name='DataLength'),
      }
    ](name='ColumnList'),
  }(name='DetailInfo'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetMetaTableDetailInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaTableDetailInfoResponseBody(name='body'),
}

async function getMetaTableDetailInfoWithOptions(request: GetMetaTableDetailInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableDetailInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMetaTableDetailInfo', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMetaTableDetailInfo(request: GetMetaTableDetailInfoRequest): GetMetaTableDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableDetailInfoWithOptions(request, runtime);
}

model GetDataCorrectSQLFileRequest {
  orderId?: long(name='OrderId'),
  orderActionName?: string(name='OrderActionName'),
}

model GetDataCorrectSQLFileResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  fileUrl?: string(name='FileUrl'),
}

model GetDataCorrectSQLFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectSQLFileResponseBody(name='body'),
}

async function getDataCorrectSQLFileWithOptions(request: GetDataCorrectSQLFileRequest, runtime: Util.RuntimeOptions): GetDataCorrectSQLFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataCorrectSQLFile', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataCorrectSQLFile(request: GetDataCorrectSQLFileRequest): GetDataCorrectSQLFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectSQLFileWithOptions(request, runtime);
}

model CreateOrderRequest {
  tid?: long(name='Tid'),
  comment?: string(name='Comment'),
  pluginParam?: map[string]any(name='PluginParam'),
  relatedUserList?: string(name='RelatedUserList'),
  pluginType?: string(name='PluginType'),
}

model CreateOrderShrinkRequest {
  tid?: long(name='Tid'),
  comment?: string(name='Comment'),
  pluginParamShrink?: string(name='PluginParam'),
  relatedUserList?: string(name='RelatedUserList'),
  pluginType?: string(name='PluginType'),
}

model CreateOrderResponseBody = {
  createOrderResult?: {
    orderIds?: [ long ](name='OrderIds')
  }(name='CreateOrderResult'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(tmpReq: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pluginParam)) {
    request.pluginParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pluginParam, 'PluginParam', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrder', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model ListDatabasesRequest {
  tid?: long(name='Tid'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDatabasesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  databaseList?: {
    database?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      host?: string(name='Host'),
      catalogName?: string(name='CatalogName'),
      dbaName?: string(name='DbaName'),
      state?: string(name='State'),
      dbaId?: string(name='DbaId'),
      schemaName?: string(name='SchemaName'),
      instanceId?: string(name='InstanceId'),
      port?: int32(name='Port'),
      envType?: string(name='EnvType'),
      sid?: string(name='Sid'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      encoding?: string(name='Encoding'),
      dbType?: string(name='DbType'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      searchName?: string(name='SearchName'),
    }
  ](name='Database')
  }(name='DatabaseList'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatabasesResponseBody(name='body'),
}

async function listDatabasesWithOptions(request: ListDatabasesRequest, runtime: Util.RuntimeOptions): ListDatabasesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDatabases', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatabasesWithOptions(request, runtime);
}

model ListUserPermissionsRequest {
  tid?: long(name='Tid'),
  permType?: string(name='PermType'),
  userId?: string(name='UserId'),
  databaseName?: string(name='DatabaseName'),
  logic?: boolean(name='Logic'),
  envType?: string(name='EnvType'),
  dbType?: string(name='DbType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUserPermissionsResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  userPermissions?: {
    userPermission?: [ 
    {
      dbId?: string(name='DbId'),
      tableName?: string(name='TableName'),
      userId?: string(name='UserId'),
      schemaName?: string(name='SchemaName'),
      logic?: boolean(name='Logic'),
      userNickName?: string(name='UserNickName'),
      instanceId?: string(name='InstanceId'),
      permDetails?: {
        permDetail?: [ 
        {
          originFrom?: string(name='OriginFrom'),
          permType?: string(name='PermType'),
          expireDate?: string(name='ExpireDate'),
          createDate?: string(name='CreateDate'),
          userAccessId?: string(name='UserAccessId'),
          extraData?: string(name='ExtraData'),
        }
      ](name='PermDetail')
      }(name='PermDetails'),
      envType?: string(name='EnvType'),
      columnName?: string(name='ColumnName'),
      dbType?: string(name='DbType'),
      dsType?: string(name='DsType'),
      tableId?: string(name='TableId'),
      searchName?: string(name='SearchName'),
      alias?: string(name='Alias'),
    }
  ](name='UserPermission')
  }(name='UserPermissions'),
  success?: boolean(name='Success'),
}

model ListUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserPermissionsResponseBody(name='body'),
}

async function listUserPermissionsWithOptions(request: ListUserPermissionsRequest, runtime: Util.RuntimeOptions): ListUserPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserPermissions', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserPermissions(request: ListUserPermissionsRequest): ListUserPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserPermissionsWithOptions(request, runtime);
}

model ListWorkFlowTemplatesRequest {
  tid?: long(name='Tid'),
  searchName?: string(name='SearchName'),
}

model ListWorkFlowTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
  workFlowTemplates?: {
    workFlowTemplate?: [ 
    {
      isSystem?: int32(name='IsSystem'),
      workflowNodes?: {
        workflowNode?: [ 
        {
          comment?: string(name='Comment'),
          nodeType?: string(name='NodeType'),
          nodeName?: string(name='NodeName'),
          position?: int32(name='Position'),
          createUserId?: long(name='CreateUserId'),
          templateId?: long(name='TemplateId'),
          nodeId?: long(name='NodeId'),
        }
      ](name='WorkflowNode')
      }(name='WorkflowNodes'),
      comment?: string(name='Comment'),
      enabled?: string(name='Enabled'),
      templateName?: string(name='TemplateName'),
      templateId?: long(name='TemplateId'),
      createUserId?: long(name='CreateUserId'),
    }
  ](name='WorkFlowTemplate')
  }(name='WorkFlowTemplates'),
}

model ListWorkFlowTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkFlowTemplatesResponseBody(name='body'),
}

async function listWorkFlowTemplatesWithOptions(request: ListWorkFlowTemplatesRequest, runtime: Util.RuntimeOptions): ListWorkFlowTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListWorkFlowTemplates', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listWorkFlowTemplates(request: ListWorkFlowTemplatesRequest): ListWorkFlowTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkFlowTemplatesWithOptions(request, runtime);
}

model GetDataExportOrderDetailRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
}

model GetDataExportOrderDetailResponseBody = {
  requestId?: string(name='RequestId'),
  dataExportOrderDetail?: {
    keyInfo?: {
      preCheckId?: long(name='PreCheckId'),
      jobStatus?: string(name='JobStatus'),
    }(name='KeyInfo'),
    orderDetail?: {
      dbId?: int32(name='DbId'),
      database?: string(name='Database'),
      classify?: string(name='Classify'),
      exeSQL?: string(name='ExeSQL'),
      logic?: boolean(name='Logic'),
      actualAffectRows?: long(name='ActualAffectRows'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason'),
      envType?: string(name='EnvType'),
    }(name='OrderDetail'),
  }(name='DataExportOrderDetail'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetDataExportOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataExportOrderDetailResponseBody(name='body'),
}

async function getDataExportOrderDetailWithOptions(request: GetDataExportOrderDetailRequest, runtime: Util.RuntimeOptions): GetDataExportOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataExportOrderDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataExportOrderDetail(request: GetDataExportOrderDetailRequest): GetDataExportOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataExportOrderDetailWithOptions(request, runtime);
}

model ListInstancesRequest {
  tid?: long(name='Tid'),
  searchKey?: string(name='SearchKey'),
  dbType?: string(name='DbType'),
  envType?: string(name='EnvType'),
  instanceSource?: string(name='InstanceSource'),
  netType?: string(name='NetType'),
  instanceState?: string(name='InstanceState'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  instanceList?: {
    instance?: [ 
    {
      vpcId?: string(name='VpcId'),
      databaseUser?: string(name='DatabaseUser'),
      dbaId?: string(name='DbaId'),
      useDsql?: int32(name='UseDsql'),
      port?: int32(name='Port'),
      ecsInstanceId?: string(name='EcsInstanceId'),
      envType?: string(name='EnvType'),
      sid?: string(name='Sid'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      safeRuleId?: string(name='SafeRuleId'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      dbaNickName?: string(name='DbaNickName'),
      queryTimeout?: int32(name='QueryTimeout'),
      instanceSource?: string(name='InstanceSource'),
      host?: string(name='Host'),
      state?: string(name='State'),
      dataLinkName?: string(name='DataLinkName'),
      exportTimeout?: int32(name='ExportTimeout'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      databasePassword?: string(name='DatabasePassword'),
      instanceAlias?: string(name='InstanceAlias'),
      ddlOnline?: int32(name='DdlOnline'),
      ecsRegion?: string(name='EcsRegion'),
    }
  ](name='Instance')
  }(name='InstanceList'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListInstances', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model GetUserUploadFileJobRequest {
  jobKey?: string(name='JobKey'),
}

model GetUserUploadFileJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  uploadFileJobDetail?: {
    jobKey?: string(name='JobKey'),
    fileName?: string(name='FileName'),
    fileSize?: long(name='FileSize'),
    fileSource?: string(name='FileSource'),
    uploadType?: string(name='UploadType'),
    uploadURL?: string(name='UploadURL'),
    uploadOSSParam?: {
      endpoint?: string(name='Endpoint'),
      bucketName?: string(name='BucketName'),
      objectName?: string(name='ObjectName'),
    }(name='UploadOSSParam'),
    uploadedSize?: long(name='UploadedSize'),
    jobStatus?: string(name='JobStatus'),
    jobStatusDesc?: string(name='JobStatusDesc'),
    attachmentKey?: string(name='AttachmentKey'),
  }(name='UploadFileJobDetail'),
}

model GetUserUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserUploadFileJobResponseBody(name='body'),
}

async function getUserUploadFileJobWithOptions(request: GetUserUploadFileJobRequest, runtime: Util.RuntimeOptions): GetUserUploadFileJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserUploadFileJob', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserUploadFileJob(request: GetUserUploadFileJobRequest): GetUserUploadFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserUploadFileJobWithOptions(request, runtime);
}

model GetStructSyncJobDetailRequest {
  orderId?: long(name='OrderId'),
}

model GetStructSyncJobDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  structSyncJobDetail?: {
    jobStatus?: string(name='JobStatus'),
    message?: string(name='Message'),
    tableAnalyzed?: long(name='TableAnalyzed'),
    tableCount?: long(name='TableCount'),
    sqlCount?: long(name='SqlCount'),
    executeCount?: long(name='ExecuteCount'),
    securityRule?: string(name='SecurityRule'),
  }(name='StructSyncJobDetail'),
}

model GetStructSyncJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncJobDetailResponseBody(name='body'),
}

async function getStructSyncJobDetailWithOptions(request: GetStructSyncJobDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStructSyncJobDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStructSyncJobDetail(request: GetStructSyncJobDetailRequest): GetStructSyncJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncJobDetailWithOptions(request, runtime);
}

model CreateUploadOSSFileJobRequest {
  fileSource?: string(name='FileSource'),
  fileName?: string(name='FileName'),
  uploadType?: string(name='UploadType'),
  uploadTarget?: {
    endpoint?: string(name='Endpoint'),
    bucketName?: string(name='BucketName'),
    objectName?: string(name='ObjectName'),
  }(name='UploadTarget'),
}

model CreateUploadOSSFileJobShrinkRequest {
  fileSource?: string(name='FileSource'),
  fileName?: string(name='FileName'),
  uploadType?: string(name='UploadType'),
  uploadTargetShrink?: string(name='UploadTarget'),
}

model CreateUploadOSSFileJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  jobKey?: string(name='JobKey'),
}

model CreateUploadOSSFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadOSSFileJobResponseBody(name='body'),
}

async function createUploadOSSFileJobWithOptions(tmpReq: CreateUploadOSSFileJobRequest, runtime: Util.RuntimeOptions): CreateUploadOSSFileJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUploadOSSFileJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.uploadTarget)) {
    request.uploadTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uploadTarget, 'UploadTarget', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUploadOSSFileJob', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUploadOSSFileJob(request: CreateUploadOSSFileJobRequest): CreateUploadOSSFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadOSSFileJobWithOptions(request, runtime);
}

model SearchDatabaseRequest {
  tid?: long(name='Tid'),
  searchKey?: string(name='SearchKey'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  envType?: string(name='EnvType'),
  searchRange?: string(name='SearchRange'),
  searchTarget?: string(name='SearchTarget'),
  dbType?: string(name='DbType'),
}

model SearchDatabaseResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  searchDatabaseList?: {
    searchDatabase?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      host?: string(name='Host'),
      dbaId?: string(name='DbaId'),
      schemaName?: string(name='SchemaName'),
      logic?: boolean(name='Logic'),
      datalinkName?: string(name='DatalinkName'),
      port?: int32(name='Port'),
      envType?: string(name='EnvType'),
      sid?: string(name='Sid'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      encoding?: string(name='Encoding'),
      dbType?: string(name='DbType'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      searchName?: string(name='SearchName'),
      alias?: string(name='Alias'),
    }
  ](name='SearchDatabase')
  }(name='SearchDatabaseList'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SearchDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: SearchDatabaseResponseBody(name='body'),
}

async function searchDatabaseWithOptions(request: SearchDatabaseRequest, runtime: Util.RuntimeOptions): SearchDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchDatabase', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchDatabase(request: SearchDatabaseRequest): SearchDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchDatabaseWithOptions(request, runtime);
}

model SyncDatabaseMetaRequest {
  tid?: long(name='Tid'),
  dbId?: string(name='DbId'),
  logic?: boolean(name='Logic'),
}

model SyncDatabaseMetaResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SyncDatabaseMetaResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDatabaseMetaResponseBody(name='body'),
}

async function syncDatabaseMetaWithOptions(request: SyncDatabaseMetaRequest, runtime: Util.RuntimeOptions): SyncDatabaseMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncDatabaseMeta', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncDatabaseMeta(request: SyncDatabaseMetaRequest): SyncDatabaseMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDatabaseMetaWithOptions(request, runtime);
}

model GetUserRequest {
  tid?: long(name='Tid'),
  uid?: string(name='Uid'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  user?: {
    state?: string(name='State'),
    curResultCount?: long(name='CurResultCount'),
    userId?: string(name='UserId'),
    lastLoginTime?: string(name='LastLoginTime'),
    maxResultCount?: long(name='MaxResultCount'),
    parentUid?: long(name='ParentUid'),
    roleIdList?: {
      roleIds?: [ int32 ](name='RoleIds')
    }(name='RoleIdList'),
    roleNameList?: {
      roleNames?: [ string ](name='RoleNames')
    }(name='RoleNameList'),
    nickName?: string(name='NickName'),
    maxExecuteCount?: long(name='MaxExecuteCount'),
    curExecuteCount?: long(name='CurExecuteCount'),
    mobile?: string(name='Mobile'),
    uid?: string(name='Uid'),
  }(name='User'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model ExecuteStructSyncRequest {
  orderId?: long(name='OrderId'),
}

model ExecuteStructSyncResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
}

model ExecuteStructSyncResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteStructSyncResponseBody(name='body'),
}

async function executeStructSyncWithOptions(request: ExecuteStructSyncRequest, runtime: Util.RuntimeOptions): ExecuteStructSyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteStructSync', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeStructSync(request: ExecuteStructSyncRequest): ExecuteStructSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeStructSyncWithOptions(request, runtime);
}

model GetDataCorrectOrderDetailRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
}

model GetDataCorrectOrderDetailResponseBody = {
  requestId?: string(name='RequestId'),
  dataCorrectOrderDetail?: {
    preCheckDetail?: {
      taskCheckDO?: [ 
      {
        userTip?: string(name='UserTip'),
        checkStatus?: string(name='CheckStatus'),
        checkStep?: string(name='CheckStep'),
      }
    ](name='TaskCheckDO')
    }(name='PreCheckDetail'),
    orderDetail?: {
      rbSQL?: string(name='RbSQL'),
      rbAttachmentName?: string(name='RbAttachmentName'),
      classify?: string(name='Classify'),
      exeSQL?: string(name='ExeSQL'),
      estimateAffectRows?: long(name='EstimateAffectRows'),
      rbSQLType?: string(name='RbSQLType'),
      actualAffectRows?: long(name='ActualAffectRows'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows'),
      attachmentName?: string(name='AttachmentName'),
      sqlType?: string(name='SqlType'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason'),
    }(name='OrderDetail'),
    databaseList?: {
      database?: [ 
      {
        dbId?: int32(name='DbId'),
        dbType?: string(name='DbType'),
        logic?: boolean(name='Logic'),
        searchName?: string(name='SearchName'),
        envType?: string(name='EnvType'),
      }
    ](name='Database')
    }(name='DatabaseList'),
  }(name='DataCorrectOrderDetail'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetDataCorrectOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectOrderDetailResponseBody(name='body'),
}

async function getDataCorrectOrderDetailWithOptions(request: GetDataCorrectOrderDetailRequest, runtime: Util.RuntimeOptions): GetDataCorrectOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataCorrectOrderDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataCorrectOrderDetail(request: GetDataCorrectOrderDetailRequest): GetDataCorrectOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectOrderDetailWithOptions(request, runtime);
}

model ListColumnsRequest {
  tid?: long(name='Tid'),
  tableId?: string(name='TableId'),
  logic?: boolean(name='Logic'),
}

model ListColumnsResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  columnList?: {
    column?: [ 
    {
      columnType?: string(name='ColumnType'),
      autoIncrement?: boolean(name='AutoIncrement'),
      columnId?: string(name='ColumnId'),
      defaultValue?: string(name='DefaultValue'),
      sensitive?: boolean(name='Sensitive'),
      columnName?: string(name='ColumnName'),
      securityLevel?: string(name='SecurityLevel'),
      description?: string(name='Description'),
      dataPrecision?: int32(name='DataPrecision'),
      dataScale?: int32(name='DataScale'),
      functionType?: string(name='FunctionType'),
      nullable?: boolean(name='Nullable'),
      dataLength?: long(name='DataLength'),
    }
  ](name='Column')
  }(name='ColumnList'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: ListColumnsResponseBody(name='body'),
}

async function listColumnsWithOptions(request: ListColumnsRequest, runtime: Util.RuntimeOptions): ListColumnsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListColumns', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listColumns(request: ListColumnsRequest): ListColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listColumnsWithOptions(request, runtime);
}

model RevokeUserPermissionRequest {
  tid?: long(name='Tid'),
  userId?: string(name='UserId'),
  dsType?: string(name='DsType'),
  dbId?: string(name='DbId'),
  logic?: boolean(name='Logic'),
  tableId?: string(name='TableId'),
  tableName?: string(name='TableName'),
  permTypes?: string(name='PermTypes'),
  userAccessId?: string(name='UserAccessId'),
}

model RevokeUserPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model RevokeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeUserPermissionResponseBody(name='body'),
}

async function revokeUserPermissionWithOptions(request: RevokeUserPermissionRequest, runtime: Util.RuntimeOptions): RevokeUserPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeUserPermission', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeUserPermission(request: RevokeUserPermissionRequest): RevokeUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeUserPermissionWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  tid?: long(name='Tid'),
  tableGuid?: string(name='TableGuid'),
}

model GetMetaTableColumnResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  columnList?: [ 
    {
      columnType?: string(name='ColumnType'),
      autoIncrement?: boolean(name='AutoIncrement'),
      columnId?: string(name='ColumnId'),
      columnName?: string(name='ColumnName'),
      securityLevel?: string(name='SecurityLevel'),
      primaryKey?: string(name='PrimaryKey'),
      description?: string(name='Description'),
      dataPrecision?: int32(name='DataPrecision'),
      dataScale?: int32(name='DataScale'),
      position?: int32(name='Position'),
      nullable?: boolean(name='Nullable'),
      dataLength?: int32(name='DataLength'),
    }
  ](name='ColumnList'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMetaTableColumn', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model EnableUserRequest {
  tid?: long(name='Tid'),
  uid?: string(name='Uid'),
}

model EnableUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model EnableUserResponse = {
  headers: map[string]string(name='headers'),
  body: EnableUserResponseBody(name='body'),
}

async function enableUserWithOptions(request: EnableUserRequest, runtime: Util.RuntimeOptions): EnableUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableUser(request: EnableUserRequest): EnableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableUserWithOptions(request, runtime);
}

model UpdateInstanceRequest {
  tid?: long(name='Tid'),
  instanceType?: string(name='InstanceType'),
  instanceSource?: string(name='InstanceSource'),
  envType?: string(name='EnvType'),
  ecsInstanceId?: string(name='EcsInstanceId'),
  vpcId?: string(name='VpcId'),
  ecsRegion?: string(name='EcsRegion'),
  host?: string(name='Host'),
  port?: int32(name='Port'),
  sid?: string(name='Sid'),
  databaseUser?: string(name='DatabaseUser'),
  databasePassword?: string(name='DatabasePassword'),
  instanceAlias?: string(name='InstanceAlias'),
  dbaId?: string(name='DbaId'),
  safeRuleId?: string(name='SafeRuleId'),
  queryTimeout?: int32(name='QueryTimeout'),
  exportTimeout?: int32(name='ExportTimeout'),
  dataLinkName?: string(name='DataLinkName'),
  ddlOnline?: int32(name='DdlOnline'),
  useDsql?: int32(name='UseDsql'),
  instanceId?: string(name='InstanceId'),
  skipTest?: boolean(name='SkipTest'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstanceWithOptions(request: UpdateInstanceRequest, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstance', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceWithOptions(request, runtime);
}

model ExecuteScriptRequest {
  dbId?: int32(name='DbId'),
  script?: string(name='Script'),
  logic?: boolean(name='Logic'),
  tid?: long(name='Tid'),
}

model ExecuteScriptResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      columnNames?: [ string ](name='ColumnNames'),
      rows?: [  map[string]any ](name='Rows'),
      success?: boolean(name='Success'),
      message?: string(name='Message'),
      rowCount?: long(name='RowCount'),
    }
  ](name='Results'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ExecuteScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteScriptResponseBody(name='body'),
}

async function executeScriptWithOptions(request: ExecuteScriptRequest, runtime: Util.RuntimeOptions): ExecuteScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteScript', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeScript(request: ExecuteScriptRequest): ExecuteScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeScriptWithOptions(request, runtime);
}

model ListDBTaskSQLJobDetailRequest {
  jobId?: long(name='JobId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListDBTaskSQLJobDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  DBTaskSQLJobDetailList?: [ 
    {
      jobDetailId?: long(name='JobDetailId'),
      currentSql?: string(name='CurrentSql'),
      executeCount?: long(name='ExecuteCount'),
      jobId?: long(name='JobId'),
      dbId?: long(name='DbId'),
      logic?: boolean(name='Logic'),
      skip?: boolean(name='Skip'),
      sqlType?: string(name='SqlType'),
      status?: string(name='Status'),
    }
  ](name='DBTaskSQLJobDetailList'),
  totalCount?: long(name='TotalCount'),
}

model ListDBTaskSQLJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListDBTaskSQLJobDetailResponseBody(name='body'),
}

async function listDBTaskSQLJobDetailWithOptions(request: ListDBTaskSQLJobDetailRequest, runtime: Util.RuntimeOptions): ListDBTaskSQLJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDBTaskSQLJobDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDBTaskSQLJobDetail(request: ListDBTaskSQLJobDetailRequest): ListDBTaskSQLJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDBTaskSQLJobDetailWithOptions(request, runtime);
}

model DisableUserRequest {
  tid?: long(name='Tid'),
  uid?: string(name='Uid'),
}

model DisableUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model DisableUserResponse = {
  headers: map[string]string(name='headers'),
  body: DisableUserResponseBody(name='body'),
}

async function disableUserWithOptions(request: DisableUserRequest, runtime: Util.RuntimeOptions): DisableUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableUser(request: DisableUserRequest): DisableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableUserWithOptions(request, runtime);
}

model GetApprovalDetailRequest {
  tid?: long(name='Tid'),
  workflowInstanceId?: long(name='WorkflowInstanceId'),
}

model GetApprovalDetailResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  approvalDetail?: {
    workflowNodes?: {
      workflowNode?: [ 
      {
        operateTime?: string(name='OperateTime'),
        operatorId?: long(name='OperatorId'),
        nodeName?: string(name='NodeName'),
        auditUserIdList?: {
          auditUserIds?: [ string ](name='AuditUserIds')
        }(name='AuditUserIdList'),
        operateComment?: string(name='OperateComment'),
        workflowInsCode?: string(name='WorkflowInsCode'),
      }
    ](name='WorkflowNode')
    }(name='WorkflowNodes'),
    description?: string(name='Description'),
    currentHandlers?: {
      currentHandler?: [ 
      {
        nickName?: string(name='NickName'),
        id?: long(name='Id'),
      }
    ](name='CurrentHandler')
    }(name='CurrentHandlers'),
    orderType?: string(name='OrderType'),
    title?: string(name='Title'),
    auditId?: long(name='AuditId'),
    orderId?: long(name='OrderId'),
    workflowInsCode?: string(name='WorkflowInsCode'),
    reasonList?: {
      reasons?: [ string ](name='Reasons')
    }(name='ReasonList'),
  }(name='ApprovalDetail'),
  success?: boolean(name='Success'),
}

model GetApprovalDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetApprovalDetailResponseBody(name='body'),
}

async function getApprovalDetailWithOptions(request: GetApprovalDetailRequest, runtime: Util.RuntimeOptions): GetApprovalDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApprovalDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApprovalDetail(request: GetApprovalDetailRequest): GetApprovalDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApprovalDetailWithOptions(request, runtime);
}

model GetUserActiveTenantResponseBody = {
  tenant?: {
    status?: string(name='Status'),
    tid?: long(name='Tid'),
    tenantName?: string(name='TenantName'),
  }(name='Tenant'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetUserActiveTenantResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserActiveTenantResponseBody(name='body'),
}

async function getUserActiveTenantWithOptions(runtime: Util.RuntimeOptions): GetUserActiveTenantResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetUserActiveTenant', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserActiveTenant(): GetUserActiveTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserActiveTenantWithOptions(runtime);
}

model RegisterUserRequest {
  tid?: long(name='Tid'),
  uid?: string(name='Uid'),
  userNick?: string(name='UserNick'),
  roleNames?: string(name='RoleNames'),
  mobile?: string(name='Mobile'),
}

model RegisterUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model RegisterUserResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterUserResponseBody(name='body'),
}

async function registerUserWithOptions(request: RegisterUserRequest, runtime: Util.RuntimeOptions): RegisterUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerUser(request: RegisterUserRequest): RegisterUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerUserWithOptions(request, runtime);
}

model GetInstanceRequest {
  tid?: long(name='Tid'),
  host?: string(name='Host'),
  port?: int32(name='Port'),
  sid?: string(name='Sid'),
}

model GetInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instance?: {
    vpcId?: string(name='VpcId'),
    databaseUser?: string(name='DatabaseUser'),
    dbaId?: string(name='DbaId'),
    useDsql?: int32(name='UseDsql'),
    port?: int32(name='Port'),
    ecsInstanceId?: string(name='EcsInstanceId'),
    envType?: string(name='EnvType'),
    sid?: string(name='Sid'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList'),
    safeRuleId?: string(name='SafeRuleId'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList'),
    dbaNickName?: string(name='DbaNickName'),
    queryTimeout?: int32(name='QueryTimeout'),
    instanceSource?: string(name='InstanceSource'),
    host?: string(name='Host'),
    state?: string(name='State'),
    dataLinkName?: string(name='DataLinkName'),
    exportTimeout?: int32(name='ExportTimeout'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    databasePassword?: string(name='DatabasePassword'),
    instanceAlias?: string(name='InstanceAlias'),
    ddlOnline?: int32(name='DdlOnline'),
    ecsRegion?: string(name='EcsRegion'),
  }(name='Instance'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstance', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetPermApplyOrderDetailRequest {
  orderId?: long(name='OrderId'),
}

model GetPermApplyOrderDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  permApplyOrderDetail?: {
    resources?: [ 
      {
        databaseInfo?: {
          dbId?: long(name='DbId'),
          logic?: boolean(name='Logic'),
          dbType?: string(name='DbType'),
          searchName?: string(name='SearchName'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
          envType?: string(name='EnvType'),
        }(name='DatabaseInfo'),
        tableInfo?: {
          tableName?: string(name='TableName'),
        }(name='TableInfo'),
        columnInfo?: {
          tableName?: string(name='TableName'),
          columnName?: string(name='ColumnName'),
        }(name='ColumnInfo'),
        instanceInfo?: {
          instanceId?: string(name='InstanceId'),
          searchName?: string(name='SearchName'),
          dbType?: string(name='DbType'),
          envType?: string(name='EnvType'),
          host?: string(name='Host'),
          port?: long(name='Port'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickName?: [ string ](name='OwnerNickName'),
          dbaId?: long(name='DbaId'),
          dbaNickName?: string(name='DbaNickName'),
        }(name='InstanceInfo'),
      }
    ](name='Resources'),
    permType?: long(name='PermType'),
    seconds?: long(name='Seconds'),
    applyType?: string(name='ApplyType'),
  }(name='PermApplyOrderDetail'),
}

model GetPermApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetPermApplyOrderDetailResponseBody(name='body'),
}

async function getPermApplyOrderDetailWithOptions(request: GetPermApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermApplyOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPermApplyOrderDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPermApplyOrderDetail(request: GetPermApplyOrderDetailRequest): GetPermApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermApplyOrderDetailWithOptions(request, runtime);
}

model ListIndexesRequest {
  tid?: long(name='Tid'),
  tableId?: string(name='TableId'),
  logic?: boolean(name='Logic'),
}

model ListIndexesResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  indexList?: {
    index?: [ 
    {
      indexName?: string(name='IndexName'),
      indexType?: string(name='IndexType'),
      tableId?: string(name='TableId'),
      indexId?: string(name='IndexId'),
      indexComment?: string(name='IndexComment'),
    }
  ](name='Index')
  }(name='IndexList'),
  success?: boolean(name='Success'),
}

model ListIndexesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIndexesResponseBody(name='body'),
}

async function listIndexesWithOptions(request: ListIndexesRequest, runtime: Util.RuntimeOptions): ListIndexesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIndexes', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIndexesWithOptions(request, runtime);
}

model ListLogicTablesRequest {
  tid?: long(name='Tid'),
  databaseId?: string(name='DatabaseId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchName?: string(name='SearchName'),
  returnGuid?: boolean(name='ReturnGuid'),
}

model ListLogicTablesResponseBody = {
  totalCount?: long(name='TotalCount'),
  logicTableList?: {
    logicTable?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      tableName?: string(name='TableName'),
      tableCount?: string(name='TableCount'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      schemaName?: string(name='SchemaName'),
      logic?: boolean(name='Logic'),
      tableExpr?: string(name='TableExpr'),
      tableGuid?: string(name='TableGuid'),
      tableId?: string(name='TableId'),
    }
  ](name='LogicTable')
  }(name='LogicTableList'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListLogicTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogicTablesResponseBody(name='body'),
}

async function listLogicTablesWithOptions(request: ListLogicTablesRequest, runtime: Util.RuntimeOptions): ListLogicTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLogicTables', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLogicTables(request: ListLogicTablesRequest): ListLogicTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogicTablesWithOptions(request, runtime);
}

model GetDataExportDownloadURLRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
}

model GetDataExportDownloadURLResponseBody = {
  downloadURLResult?: {
    hasResult?: boolean(name='HasResult'),
    tipMessage?: string(name='TipMessage'),
    URL?: string(name='URL'),
  }(name='DownloadURLResult'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetDataExportDownloadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataExportDownloadURLResponseBody(name='body'),
}

async function getDataExportDownloadURLWithOptions(request: GetDataExportDownloadURLRequest, runtime: Util.RuntimeOptions): GetDataExportDownloadURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataExportDownloadURL', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataExportDownloadURL(request: GetDataExportDownloadURLRequest): GetDataExportDownloadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataExportDownloadURLWithOptions(request, runtime);
}

model CreatePublishGroupTaskRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  dbId?: int32(name='DbId'),
  logic?: boolean(name='Logic'),
  publishStrategy?: string(name='PublishStrategy'),
  planTime?: string(name='PlanTime'),
}

model CreatePublishGroupTaskResponseBody = {
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model CreatePublishGroupTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePublishGroupTaskResponseBody(name='body'),
}

async function createPublishGroupTaskWithOptions(request: CreatePublishGroupTaskRequest, runtime: Util.RuntimeOptions): CreatePublishGroupTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePublishGroupTask', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPublishGroupTask(request: CreatePublishGroupTaskRequest): CreatePublishGroupTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPublishGroupTaskWithOptions(request, runtime);
}

model GetDatabaseRequest {
  tid?: long(name='Tid'),
  host?: string(name='Host'),
  port?: int32(name='Port'),
  sid?: string(name='Sid'),
  schemaName?: string(name='SchemaName'),
}

model GetDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
  database?: {
    databaseId?: string(name='DatabaseId'),
    host?: string(name='Host'),
    catalogName?: string(name='CatalogName'),
    dbaName?: string(name='DbaName'),
    state?: string(name='State'),
    dbaId?: string(name='DbaId'),
    schemaName?: string(name='SchemaName'),
    instanceId?: string(name='InstanceId'),
    port?: int32(name='Port'),
    envType?: string(name='EnvType'),
    sid?: string(name='Sid'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList'),
    encoding?: string(name='Encoding'),
    dbType?: string(name='DbType'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList'),
    searchName?: string(name='SearchName'),
  }(name='Database'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatabaseResponseBody(name='body'),
}

async function getDatabaseWithOptions(request: GetDatabaseRequest, runtime: Util.RuntimeOptions): GetDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDatabase', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatabaseWithOptions(request, runtime);
}

model GetOwnerApplyOrderDetailRequest {
  orderId?: long(name='OrderId'),
}

model GetOwnerApplyOrderDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  ownerApplyOrderDetail?: {
    applyType?: string(name='ApplyType'),
    resources?: [ 
      {
        logic?: boolean(name='Logic'),
        targetId?: string(name='TargetId'),
        resourceDetail?: {
          searchName?: string(name='SearchName'),
          dbType?: string(name='DbType'),
          envType?: string(name='EnvType'),
          tableName?: string(name='TableName'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
        }(name='ResourceDetail'),
      }
    ](name='Resources'),
  }(name='OwnerApplyOrderDetail'),
}

model GetOwnerApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOwnerApplyOrderDetailResponseBody(name='body'),
}

async function getOwnerApplyOrderDetailWithOptions(request: GetOwnerApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetOwnerApplyOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOwnerApplyOrderDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOwnerApplyOrderDetail(request: GetOwnerApplyOrderDetailRequest): GetOwnerApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOwnerApplyOrderDetailWithOptions(request, runtime);
}

model GetOpLogRequest {
  tid?: long(name='Tid'),
  module?: string(name='Module'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model GetOpLogResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  opLogDetails?: {
    opLogDetail?: [ 
    {
      module?: string(name='Module'),
      database?: string(name='Database'),
      userId?: long(name='UserId'),
      opContent?: string(name='OpContent'),
      userNick?: string(name='UserNick'),
      orderId?: long(name='OrderId'),
      opTime?: string(name='OpTime'),
    }
  ](name='OpLogDetail')
  }(name='OpLogDetails'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetOpLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpLogResponseBody(name='body'),
}

async function getOpLogWithOptions(request: GetOpLogRequest, runtime: Util.RuntimeOptions): GetOpLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOpLog', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOpLog(request: GetOpLogRequest): GetOpLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpLogWithOptions(request, runtime);
}

model SearchTableRequest {
  tid?: long(name='Tid'),
  searchKey?: string(name='SearchKey'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  envType?: string(name='EnvType'),
  searchRange?: string(name='SearchRange'),
  searchTarget?: string(name='SearchTarget'),
  dbType?: string(name='DbType'),
  returnGuid?: boolean(name='ReturnGuid'),
}

model SearchTableResponseBody = {
  searchTableList?: {
    searchTable?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      tableName?: string(name='TableName'),
      DBSearchName?: string(name='DBSearchName'),
      logic?: boolean(name='Logic'),
      envType?: string(name='EnvType'),
      dbName?: string(name='DbName'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      description?: string(name='Description'),
      encoding?: string(name='Encoding'),
      dbType?: string(name='DbType'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      tableSchemaName?: string(name='TableSchemaName'),
      tableGuid?: string(name='TableGuid'),
      engine?: string(name='Engine'),
      tableId?: string(name='TableId'),
    }
  ](name='SearchTable')
  }(name='SearchTableList'),
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SearchTableResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTableResponseBody(name='body'),
}

async function searchTableWithOptions(request: SearchTableRequest, runtime: Util.RuntimeOptions): SearchTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchTable', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchTable(request: SearchTableRequest): SearchTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTableWithOptions(request, runtime);
}

model ListDBTaskSQLJobRequest {
  DBTaskGroupId?: long(name='DBTaskGroupId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListDBTaskSQLJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  DBTaskSQLJobList?: [ 
    {
      jobId?: long(name='JobId'),
      jobType?: string(name='JobType'),
      comment?: string(name='Comment'),
      dbSearchName?: string(name='DbSearchName'),
      dbId?: long(name='DbId'),
      logic?: boolean(name='Logic'),
      createTime?: string(name='CreateTime'),
      lastExecTime?: string(name='LastExecTime'),
      dbTaskGroupId?: long(name='DbTaskGroupId'),
      status?: string(name='Status'),
      transactional?: boolean(name='Transactional'),
    }
  ](name='DBTaskSQLJobList'),
  totalCount?: long(name='TotalCount'),
}

model ListDBTaskSQLJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListDBTaskSQLJobResponseBody(name='body'),
}

async function listDBTaskSQLJobWithOptions(request: ListDBTaskSQLJobRequest, runtime: Util.RuntimeOptions): ListDBTaskSQLJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDBTaskSQLJob', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDBTaskSQLJob(request: ListDBTaskSQLJobRequest): ListDBTaskSQLJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDBTaskSQLJobWithOptions(request, runtime);
}

model DeleteUserRequest {
  tid?: long(name='Tid'),
  uid?: string(name='Uid'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model GetStructSyncJobAnalyzeResultRequest {
  orderId?: long(name='OrderId'),
  compareType?: string(name='CompareType'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model GetStructSyncJobAnalyzeResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  structSyncJobAnalyzeResult?: {
    summaryList?: [ 
      {
        compareType?: string(name='CompareType'),
        count?: long(name='Count'),
      }
    ](name='SummaryList'),
    resultList?: [ 
      {
        sourceTableName?: string(name='SourceTableName'),
        targetTableName?: string(name='TargetTableName'),
        script?: string(name='Script'),
      }
    ](name='ResultList'),
  }(name='StructSyncJobAnalyzeResult'),
}

model GetStructSyncJobAnalyzeResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncJobAnalyzeResultResponseBody(name='body'),
}

async function getStructSyncJobAnalyzeResultWithOptions(request: GetStructSyncJobAnalyzeResultRequest, runtime: Util.RuntimeOptions): GetStructSyncJobAnalyzeResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStructSyncJobAnalyzeResult', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStructSyncJobAnalyzeResult(request: GetStructSyncJobAnalyzeResultRequest): GetStructSyncJobAnalyzeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncJobAnalyzeResultWithOptions(request, runtime);
}

model ApproveOrderRequest {
  tid?: long(name='Tid'),
  workflowInstanceId?: long(name='WorkflowInstanceId'),
  approvalType?: string(name='ApprovalType'),
  comment?: string(name='Comment'),
}

model ApproveOrderResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ApproveOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveOrderResponseBody(name='body'),
}

async function approveOrderWithOptions(request: ApproveOrderRequest, runtime: Util.RuntimeOptions): ApproveOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApproveOrder', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function approveOrder(request: ApproveOrderRequest): ApproveOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveOrderWithOptions(request, runtime);
}

model CreateUploadFileJobRequest {
  fileSource?: string(name='FileSource'),
  fileName?: string(name='FileName'),
  uploadType?: string(name='UploadType'),
  uploadURL?: string(name='UploadURL'),
}

model CreateUploadFileJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  jobKey?: string(name='JobKey'),
}

model CreateUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadFileJobResponseBody(name='body'),
}

async function createUploadFileJobWithOptions(request: CreateUploadFileJobRequest, runtime: Util.RuntimeOptions): CreateUploadFileJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUploadFileJob', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUploadFileJob(request: CreateUploadFileJobRequest): CreateUploadFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadFileJobWithOptions(request, runtime);
}

model ListLogicDatabasesRequest {
  tid?: long(name='Tid'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListLogicDatabasesResponseBody = {
  totalCount?: long(name='TotalCount'),
  logicDatabaseList?: {
    logicDatabase?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      dbType?: string(name='DbType'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      logic?: boolean(name='Logic'),
      schemaName?: string(name='SchemaName'),
      searchName?: string(name='SearchName'),
      envType?: string(name='EnvType'),
    }
  ](name='LogicDatabase')
  }(name='LogicDatabaseList'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListLogicDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogicDatabasesResponseBody(name='body'),
}

async function listLogicDatabasesWithOptions(request: ListLogicDatabasesRequest, runtime: Util.RuntimeOptions): ListLogicDatabasesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLogicDatabases', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLogicDatabases(request: ListLogicDatabasesRequest): ListLogicDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogicDatabasesWithOptions(request, runtime);
}

model CloseOrderRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  closeReason?: string(name='CloseReason'),
}

model CloseOrderResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model CloseOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CloseOrderResponseBody(name='body'),
}

async function closeOrderWithOptions(request: CloseOrderRequest, runtime: Util.RuntimeOptions): CloseOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseOrder', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeOrder(request: CloseOrderRequest): CloseOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeOrderWithOptions(request, runtime);
}

model SyncInstanceMetaRequest {
  tid?: long(name='Tid'),
  instanceId?: string(name='InstanceId'),
  ignoreTable?: boolean(name='IgnoreTable'),
}

model SyncInstanceMetaResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SyncInstanceMetaResponse = {
  headers: map[string]string(name='headers'),
  body: SyncInstanceMetaResponseBody(name='body'),
}

async function syncInstanceMetaWithOptions(request: SyncInstanceMetaRequest, runtime: Util.RuntimeOptions): SyncInstanceMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncInstanceMeta', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncInstanceMeta(request: SyncInstanceMetaRequest): SyncInstanceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncInstanceMetaWithOptions(request, runtime);
}

model ListOrdersRequest {
  tid?: long(name='Tid'),
  pluginType?: string(name='PluginType'),
  orderResultType?: string(name='OrderResultType'),
  searchDateType?: string(name='SearchDateType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  searchContent?: string(name='SearchContent'),
  orderStatus?: string(name='OrderStatus'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListOrdersResponseBody = {
  orders?: {
    order?: [ 
    {
      comment?: string(name='Comment'),
      lastModifyTime?: string(name='LastModifyTime'),
      statusCode?: string(name='StatusCode'),
      createTime?: string(name='CreateTime'),
      committer?: string(name='Committer'),
      committerId?: long(name='CommitterId'),
      statusDesc?: string(name='StatusDesc'),
      pluginType?: string(name='PluginType'),
      orderId?: long(name='OrderId'),
    }
  ](name='Order')
  }(name='Orders'),
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrdersWithOptions(request: ListOrdersRequest, runtime: Util.RuntimeOptions): ListOrdersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOrders', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrdersWithOptions(request, runtime);
}

model GetOrderBaseInfoRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
}

model GetOrderBaseInfoResponseBody = {
  orderBaseInfo?: {
    relatedUserNickList?: {
      userNicks?: [ string ](name='UserNicks')
    }(name='RelatedUserNickList'),
    comment?: string(name='Comment'),
    createTime?: string(name='CreateTime'),
    committer?: string(name='Committer'),
    workflowInstanceId?: long(name='WorkflowInstanceId'),
    committerId?: long(name='CommitterId'),
    lastModifyTime?: string(name='LastModifyTime'),
    statusCode?: string(name='StatusCode'),
    relatedUserList?: {
      userIds?: [ string ](name='UserIds')
    }(name='RelatedUserList'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc'),
    statusDesc?: string(name='StatusDesc'),
    pluginType?: string(name='PluginType'),
    orderId?: long(name='OrderId'),
  }(name='OrderBaseInfo'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetOrderBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderBaseInfoResponseBody(name='body'),
}

async function getOrderBaseInfoWithOptions(request: GetOrderBaseInfoRequest, runtime: Util.RuntimeOptions): GetOrderBaseInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOrderBaseInfo', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOrderBaseInfo(request: GetOrderBaseInfoRequest): GetOrderBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderBaseInfoWithOptions(request, runtime);
}

model ListUserTenantsResponseBody = {
  requestId?: string(name='RequestId'),
  tenantList?: [ 
    {
      status?: string(name='Status'),
      tid?: long(name='Tid'),
      tenantName?: string(name='TenantName'),
    }
  ](name='TenantList'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListUserTenantsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserTenantsResponseBody(name='body'),
}

async function listUserTenantsWithOptions(runtime: Util.RuntimeOptions): ListUserTenantsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListUserTenants', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserTenants(): ListUserTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserTenantsWithOptions(runtime);
}

model SetOwnersRequest {
  tid?: long(name='Tid'),
  resourceId?: string(name='ResourceId'),
  ownerType?: string(name='OwnerType'),
  ownerIds?: string(name='OwnerIds'),
}

model SetOwnersResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model SetOwnersResponse = {
  headers: map[string]string(name='headers'),
  body: SetOwnersResponseBody(name='body'),
}

async function setOwnersWithOptions(request: SetOwnersRequest, runtime: Util.RuntimeOptions): SetOwnersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetOwners', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setOwners(request: SetOwnersRequest): SetOwnersResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOwnersWithOptions(request, runtime);
}

model GetLogicDatabaseRequest {
  tid?: long(name='Tid'),
  dbId?: string(name='DbId'),
}

model GetLogicDatabaseResponseBody = {
  logicDatabase?: {
    databaseId?: string(name='DatabaseId'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList'),
    dbType?: string(name='DbType'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList'),
    logic?: boolean(name='Logic'),
    schemaName?: string(name='SchemaName'),
    searchName?: string(name='SearchName'),
    envType?: string(name='EnvType'),
  }(name='LogicDatabase'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogicDatabaseResponseBody(name='body'),
}

async function getLogicDatabaseWithOptions(request: GetLogicDatabaseRequest, runtime: Util.RuntimeOptions): GetLogicDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogicDatabase', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogicDatabase(request: GetLogicDatabaseRequest): GetLogicDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogicDatabaseWithOptions(request, runtime);
}

model GetDataCorrectBackupFilesRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetail?: map[string]any(name='ActionDetail'),
}

model GetDataCorrectBackupFilesShrinkRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetailShrink?: string(name='ActionDetail'),
}

model GetDataCorrectBackupFilesResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
  dataCorrectBackupFiles?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='DataCorrectBackupFiles'),
}

model GetDataCorrectBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataCorrectBackupFilesResponseBody(name='body'),
}

async function getDataCorrectBackupFilesWithOptions(tmpReq: GetDataCorrectBackupFilesRequest, runtime: Util.RuntimeOptions): GetDataCorrectBackupFilesResponse {
  Util.validateModel(tmpReq);
  var request = new GetDataCorrectBackupFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataCorrectBackupFiles', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataCorrectBackupFiles(request: GetDataCorrectBackupFilesRequest): GetDataCorrectBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectBackupFilesWithOptions(request, runtime);
}

model RegisterInstanceRequest {
  tid?: long(name='Tid'),
  instanceType?: string(name='InstanceType'),
  instanceSource?: string(name='InstanceSource'),
  networkType?: string(name='NetworkType'),
  envType?: string(name='EnvType'),
  ecsInstanceId?: string(name='EcsInstanceId'),
  vpcId?: string(name='VpcId'),
  ecsRegion?: string(name='EcsRegion'),
  host?: string(name='Host'),
  port?: int32(name='Port'),
  sid?: string(name='Sid'),
  databaseUser?: string(name='DatabaseUser'),
  databasePassword?: string(name='DatabasePassword'),
  instanceAlias?: string(name='InstanceAlias'),
  dbaUid?: long(name='DbaUid'),
  safeRule?: string(name='SafeRule'),
  queryTimeout?: int32(name='QueryTimeout'),
  exportTimeout?: int32(name='ExportTimeout'),
  dataLinkName?: string(name='DataLinkName'),
  ddlOnline?: int32(name='DdlOnline'),
  useDsql?: int32(name='UseDsql'),
  skipTest?: boolean(name='SkipTest'),
}

model RegisterInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model RegisterInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterInstanceResponseBody(name='body'),
}

async function registerInstanceWithOptions(request: RegisterInstanceRequest, runtime: Util.RuntimeOptions): RegisterInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterInstance', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerInstance(request: RegisterInstanceRequest): RegisterInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerInstanceWithOptions(request, runtime);
}

model CreateStructSyncOrderRequest {
  comment?: string(name='Comment'),
  relatedUserList?: [ long ](name='RelatedUserList'),
  param?: {
    source?: {
      dbId?: long(name='DbId'),
      dbSearchName?: string(name='DbSearchName'),
      logic?: boolean(name='Logic'),
      versionId?: string(name='VersionId'),
    }(name='Source'),
    target?: {
      dbId?: long(name='DbId'),
      dbSearchName?: string(name='DbSearchName'),
      logic?: boolean(name='Logic'),
      versionId?: string(name='VersionId'),
    }(name='Target'),
    ignoreError?: boolean(name='IgnoreError'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName'),
        targetTableName?: string(name='TargetTableName'),
      }
    ](name='TableInfoList'),
  }(name='Param'),
}

model CreateStructSyncOrderShrinkRequest {
  comment?: string(name='Comment'),
  relatedUserListShrink?: string(name='RelatedUserList'),
  paramShrink?: string(name='Param'),
}

model CreateStructSyncOrderResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  createOrderResult?: [ long ](name='CreateOrderResult'),
}

model CreateStructSyncOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStructSyncOrderResponseBody(name='body'),
}

async function createStructSyncOrderWithOptions(tmpReq: CreateStructSyncOrderRequest, runtime: Util.RuntimeOptions): CreateStructSyncOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateStructSyncOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateStructSyncOrder', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createStructSyncOrder(request: CreateStructSyncOrderRequest): CreateStructSyncOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStructSyncOrderWithOptions(request, runtime);
}

model ExecuteDataExportRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetail?: map[string]any(name='ActionDetail'),
}

model ExecuteDataExportShrinkRequest {
  tid?: long(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetailShrink?: string(name='ActionDetail'),
}

model ExecuteDataExportResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ExecuteDataExportResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteDataExportResponseBody(name='body'),
}

async function executeDataExportWithOptions(tmpReq: ExecuteDataExportRequest, runtime: Util.RuntimeOptions): ExecuteDataExportResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteDataExportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteDataExport', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeDataExport(request: ExecuteDataExportRequest): ExecuteDataExportResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeDataExportWithOptions(request, runtime);
}

model ExecuteDataCorrectRequest {
  tid?: string(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetail?: map[string]any(name='ActionDetail'),
}

model ExecuteDataCorrectShrinkRequest {
  tid?: string(name='Tid'),
  orderId?: long(name='OrderId'),
  actionName?: string(name='ActionName'),
  actionDetailShrink?: string(name='ActionDetail'),
}

model ExecuteDataCorrectResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ExecuteDataCorrectResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteDataCorrectResponseBody(name='body'),
}

async function executeDataCorrectWithOptions(tmpReq: ExecuteDataCorrectRequest, runtime: Util.RuntimeOptions): ExecuteDataCorrectResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteDataCorrectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteDataCorrect', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeDataCorrect(request: ExecuteDataCorrectRequest): ExecuteDataCorrectResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeDataCorrectWithOptions(request, runtime);
}

model ListTablesRequest {
  tid?: long(name='Tid'),
  databaseId?: string(name='DatabaseId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchName?: string(name='SearchName'),
  returnGuid?: boolean(name='ReturnGuid'),
}

model ListTablesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  tableList?: {
    table?: [ 
    {
      databaseId?: string(name='DatabaseId'),
      tableName?: string(name='TableName'),
      storeCapacity?: long(name='StoreCapacity'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      description?: string(name='Description'),
      encoding?: string(name='Encoding'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      tableSchemaName?: string(name='TableSchemaName'),
      tableType?: string(name='TableType'),
      tableGuid?: string(name='TableGuid'),
      engine?: string(name='Engine'),
      numRows?: long(name='NumRows'),
      tableId?: string(name='TableId'),
    }
  ](name='Table')
  }(name='TableList'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTablesResponseBody(name='body'),
}

async function listTablesWithOptions(request: ListTablesRequest, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTables', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTablesWithOptions(request, runtime);
}

model ListWorkFlowNodesRequest {
  tid?: long(name='Tid'),
  searchName?: string(name='SearchName'),
}

model ListWorkFlowNodesResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  workflowNodes?: {
    workflowNode?: [ 
    {
      comment?: string(name='Comment'),
      createUserNickName?: string(name='CreateUserNickName'),
      nodeType?: string(name='NodeType'),
      nodeName?: string(name='NodeName'),
      auditUsers?: {
        auditUser?: [ 
        {
          realName?: string(name='RealName'),
          userId?: long(name='UserId'),
          nickName?: string(name='NickName'),
        }
      ](name='AuditUser')
      }(name='AuditUsers'),
      createUserId?: long(name='CreateUserId'),
      nodeId?: long(name='NodeId'),
    }
  ](name='WorkflowNode')
  }(name='WorkflowNodes'),
  success?: boolean(name='Success'),
}

model ListWorkFlowNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkFlowNodesResponseBody(name='body'),
}

async function listWorkFlowNodesWithOptions(request: ListWorkFlowNodesRequest, runtime: Util.RuntimeOptions): ListWorkFlowNodesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListWorkFlowNodes', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listWorkFlowNodes(request: ListWorkFlowNodesRequest): ListWorkFlowNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkFlowNodesWithOptions(request, runtime);
}

model GetStructSyncOrderDetailRequest {
  orderId?: long(name='OrderId'),
}

model GetStructSyncOrderDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  structSyncOrderDetail?: {
    sourceDatabaseInfo?: {
      dbId?: long(name='DbId'),
      searchName?: string(name='SearchName'),
      dbType?: string(name='DbType'),
      envType?: string(name='EnvType'),
      logic?: boolean(name='Logic'),
    }(name='SourceDatabaseInfo'),
    targetDatabaseInfo?: {
      dbId?: long(name='DbId'),
      searchName?: string(name='SearchName'),
      dbType?: string(name='DbType'),
      envType?: string(name='EnvType'),
      logic?: boolean(name='Logic'),
    }(name='TargetDatabaseInfo'),
    sourceType?: string(name='SourceType'),
    sourceVersionInfo?: {
      versionId?: string(name='VersionId'),
    }(name='SourceVersionInfo'),
    targetType?: string(name='TargetType'),
    targetVersionInfo?: {
      versionId?: string(name='VersionId'),
    }(name='TargetVersionInfo'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName'),
        targetTableName?: string(name='TargetTableName'),
      }
    ](name='TableInfoList'),
    ignoreError?: boolean(name='IgnoreError'),
  }(name='StructSyncOrderDetail'),
}

model GetStructSyncOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncOrderDetailResponseBody(name='body'),
}

async function getStructSyncOrderDetailWithOptions(request: GetStructSyncOrderDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStructSyncOrderDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStructSyncOrderDetail(request: GetStructSyncOrderDetailRequest): GetStructSyncOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncOrderDetailWithOptions(request, runtime);
}

model ListSensitiveColumnsDetailRequest {
  tid?: long(name='Tid'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  columnName?: string(name='ColumnName'),
}

model ListSensitiveColumnsDetailResponseBody = {
  requestId?: string(name='RequestId'),
  sensitiveColumnsDetailList?: {
    sensitiveColumnsDetail?: [ 
    {
      dbId?: long(name='DbId'),
      columnName?: string(name='ColumnName'),
      columnDescription?: string(name='ColumnDescription'),
      tableName?: string(name='TableName'),
      dbType?: string(name='DbType'),
      columnType?: string(name='ColumnType'),
      logic?: boolean(name='Logic'),
      schemaName?: string(name='SchemaName'),
      searchName?: string(name='SearchName'),
      envType?: string(name='EnvType'),
    }
  ](name='SensitiveColumnsDetail')
  }(name='SensitiveColumnsDetailList'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model ListSensitiveColumnsDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListSensitiveColumnsDetailResponseBody(name='body'),
}

async function listSensitiveColumnsDetailWithOptions(request: ListSensitiveColumnsDetailRequest, runtime: Util.RuntimeOptions): ListSensitiveColumnsDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSensitiveColumnsDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSensitiveColumnsDetail(request: ListSensitiveColumnsDetailRequest): ListSensitiveColumnsDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveColumnsDetailWithOptions(request, runtime);
}

model UpdateUserRequest {
  tid?: long(name='Tid'),
  uid?: long(name='Uid'),
  userNick?: string(name='UserNick'),
  roleNames?: string(name='RoleNames'),
  mobile?: string(name='Mobile'),
  maxExecuteCount?: long(name='MaxExecuteCount'),
  maxResultCount?: long(name='MaxResultCount'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUser', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model GetStructSyncExecSqlDetailRequest {
  orderId?: long(name='OrderId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model GetStructSyncExecSqlDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  structSyncExecSqlDetail?: {
    totalSqlCount?: long(name='TotalSqlCount'),
    execSql?: string(name='ExecSql'),
  }(name='StructSyncExecSqlDetail'),
}

model GetStructSyncExecSqlDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetStructSyncExecSqlDetailResponseBody(name='body'),
}

async function getStructSyncExecSqlDetailWithOptions(request: GetStructSyncExecSqlDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncExecSqlDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStructSyncExecSqlDetail', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStructSyncExecSqlDetail(request: GetStructSyncExecSqlDetailRequest): GetStructSyncExecSqlDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncExecSqlDetailWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  tid?: long(name='Tid'),
  host?: string(name='Host'),
  port?: int32(name='Port'),
  sid?: string(name='Sid'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model GetTableDBTopologyRequest {
  tid?: long(name='Tid'),
  tableGuid?: string(name='TableGuid'),
}

model GetTableDBTopologyResponseBody = {
  requestId?: string(name='RequestId'),
  DBTopology?: {
    tableName?: string(name='TableName'),
    dataSourceList?: [ 
      {
        sid?: string(name='Sid'),
        host?: string(name='Host'),
        dbType?: string(name='DbType'),
        databaseList?: [ 
          {
            dbId?: string(name='DbId'),
            dbName?: string(name='DbName'),
            dbType?: string(name='DbType'),
            tableList?: [ 
              {
                tableName?: string(name='TableName'),
                tableType?: string(name='TableType'),
                tableId?: string(name='TableId'),
              }
            ](name='TableList'),
            envType?: string(name='EnvType'),
          }
        ](name='DatabaseList'),
        port?: int32(name='Port'),
      }
    ](name='DataSourceList'),
    tableGuid?: string(name='TableGuid'),
  }(name='DBTopology'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model GetTableDBTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetTableDBTopologyResponseBody(name='body'),
}

async function getTableDBTopologyWithOptions(request: GetTableDBTopologyRequest, runtime: Util.RuntimeOptions): GetTableDBTopologyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTableDBTopology', '2018-11-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTableDBTopology(request: GetTableDBTopologyRequest): GetTableDBTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTableDBTopologyWithOptions(request, runtime);
}

