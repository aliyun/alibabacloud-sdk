/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dms-enterprise', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AsyncTaskVO {
  datasetId?: string(name='DatasetId'),
  id?: long(name='Id'),
  remark?: string(name='Remark'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus'),
  taskType?: int32(name='TaskType'),
  userId?: long(name='UserId'),
}

model DatasetItemVO {
  asyncTaskList?: [
    AsyncTaskVO
  ](name='AsyncTaskList'),
  datasetStatus?: int32(name='DatasetStatus'),
  datasetType?: int32(name='DatasetType'),
  digest?: string(name='Digest'),
  fileSystem?: string(name='FileSystem'),
  id?: string(name='Id'),
  keyName?: string(name='KeyName'),
  moreInfo?: string(name='MoreInfo'),
  path?: string(name='Path'),
  projectsLinked?: [
    ProjectDetailsLiteVO
  ](name='ProjectsLinked'),
  recentTaskStatus?: int32(name='RecentTaskStatus'),
  remark?: string(name='Remark'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
  url?: string(name='Url'),
}

model GetTableDataKeyVO {
  colName?: string(name='ColName'),
  dbName?: string(name='DbName'),
  mekId?: long(name='MekId'),
  schemaName?: string(name='SchemaName'),
  tblName?: string(name='TblName'),
  userName?: string(name='UserName'),
}

model ImportMasterKeyVO {
  encryptMekDataBase64?: string(name='EncryptMekDataBase64'),
  mekId?: long(name='MekId'),
  projectId?: [ long ](name='ProjectId'),
}

model ProjectDetailsLiteVO {
  id?: long(name='Id'),
  projectName?: string(name='ProjectName'),
}

model StsApplyVO {
  aliyunId?: string(name='AliyunId'),
  duration?: long(name='Duration'),
}

model StsTokenVO {
  accessKeyId?: string(name='AccessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret'),
  expiration?: string(name='Expiration'),
  securityToken?: string(name='SecurityToken'),
}

model TeeEvidenceVO {
  cipherSuite?: string(name='CipherSuite'),
  enclaveData?: string(name='EnclaveData'),
  encryptPublicKeyPem?: string(name='EncryptPublicKeyPem'),
  encryptPublicKeyType?: string(name='EncryptPublicKeyType'),
  modifiedDate?: string(name='ModifiedDate'),
  publicKey?: string(name='PublicKey'),
  publicKeyRaBase64?: string(name='PublicKeyRaBase64'),
  publicKeyRaType?: string(name='PublicKeyRaType'),
  quoteReport?: string(name='QuoteReport'),
  signPublicKeyPem?: string(name='SignPublicKeyPem'),
  signPublicKeyType?: string(name='SignPublicKeyType'),
  trustedMrEnclave?: [ string ](name='TrustedMrEnclave'),
}

model UsersDetailsVO {
  approvalSignatureBase64?: string(name='ApprovalSignatureBase64'),
  approvalSqlTemplate?: string(name='ApprovalSqlTemplate'),
  approvalStatus?: string(name='ApprovalStatus'),
  creator?: int32(name='Creator'),
  dataReady?: int32(name='DataReady'),
  id?: long(name='Id'),
  mekid?: long(name='Mekid'),
  pathPrefix?: string(name='PathPrefix'),
  resultParty?: int32(name='ResultParty'),
  uid?: string(name='Uid'),
  userConfirmed?: int32(name='UserConfirmed'),
  userName?: string(name='UserName'),
  userPublicKeyPem?: string(name='UserPublicKeyPem'),
}

model AddDesensitizationRuleRequest {
  functionParams?: [ map[string]string ](name='FunctionParams'),
  functionType?: string(name='FunctionType', description='The type of the masking algorithm.', example='MD5'),
  ruleDescription?: string(name='RuleDescription', description='The description of the rule.'),
  ruleName?: string(name='RuleName', description='The name of the rule.'),
  ruleType?: string(name='RuleType', description='The masking algorithm.', example='HASH'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model AddDesensitizationRuleResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  ruleId?: int32(name='RuleId', description='The ID generated for the masking rule.', example='35***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model AddDesensitizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDesensitizationRuleResponseBody(name='body'),
}

async function addDesensitizationRuleWithOptions(request: AddDesensitizationRuleRequest, runtime: Util.RuntimeOptions): AddDesensitizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionType)) {
    query['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.ruleDescription)) {
    query['RuleDescription'] = request.ruleDescription;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.functionParams)) {
    bodyFlat['FunctionParams'] = request.functionParams;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddDesensitizationRule',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDesensitizationRule(request: AddDesensitizationRuleRequest): AddDesensitizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDesensitizationRuleWithOptions(request, runtime);
}

model AddLhMembersRequest {
  members?: [ 
    {
      roles?: [ string ](name='Roles', description='The role. Valid values:

*   **ADMIN**: workspace administrator. You can add a workspace administrator only as a DMS administrator or a DBA.
*   **MEMBER**: workspace member.
*   **DEVELOPER**: task flow developer. Only a workspace member can be added as a task flow developer.'),
      userId?: long(name='UserId', description='The ID of the user to be added. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.', example='15****'),
    }
  ](name='Members', description='The information about the users to be added.'),
  objectId?: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='1'),
  objectType?: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow', example='0'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3000'),
}

model AddLhMembersShrinkRequest {
  membersShrink?: string(name='Members', description='The information about the users to be added.'),
  objectId?: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='1'),
  objectType?: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow', example='0'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3000'),
}

model AddLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model AddLhMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddLhMembersResponseBody(name='body'),
}

/**
  * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * Usage notes:
  * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
  * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](~~424761~~) operation.
  * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](~~410893~~).
  *
  * @param tmpReq AddLhMembersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddLhMembersResponse
 */
async function addLhMembersWithOptions(tmpReq: AddLhMembersRequest, runtime: Util.RuntimeOptions): AddLhMembersResponse {
  Util.validateModel(tmpReq);
  var request = new AddLhMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.membersShrink)) {
    query['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddLhMembers',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * Usage notes:
  * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
  * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](~~424761~~) operation.
  * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](~~410893~~).
  *
  * @param request AddLhMembersRequest
  * @return AddLhMembersResponse
 */
async function addLhMembers(request: AddLhMembersRequest): AddLhMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLhMembersWithOptions(request, runtime);
}

model AddLogicTableRouteConfigRequest {
  routeExpr?: string(name='RouteExpr', description='The routing algorithm expression. For more information about how to configure a routing algorithm expression, see [Configure a routing algorithm](https://www.alibabacloud.com/help/en/data-management-service/latest/configure-a-routing-algorithm).', example='#id#%16'),
  routeKey?: string(name='RouteKey', description='The unique key of the routing algorithm. 

> - You can create a custom unique key for the routing algorithm. No requirements are imposed on custom unique keys.
- The unique key of the routing algorithm in the same logical table must be unique.', example='id-hash-mod16'),
  tableId?: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.', example='4****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='4***'),
}

model AddLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='can not find table, tableId : 11133'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B43AD641-49C2-5299-9E06-1B37EC1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model AddLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddLogicTableRouteConfigResponseBody(name='body'),
}

async function addLogicTableRouteConfigWithOptions(request: AddLogicTableRouteConfigRequest, runtime: Util.RuntimeOptions): AddLogicTableRouteConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.routeExpr)) {
    query['RouteExpr'] = request.routeExpr;
  }
  if (!Util.isUnset(request.routeKey)) {
    query['RouteKey'] = request.routeKey;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddLogicTableRouteConfig',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addLogicTableRouteConfig(request: AddLogicTableRouteConfigRequest): AddLogicTableRouteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLogicTableRouteConfigWithOptions(request, runtime);
}

model AddTaskFlowEdgesRequest {
  dagId?: long(name='DagId', example='15***'),
  edges?: [ 
    {
      nodeEnd?: long(name='NodeEnd', example='44***'),
      nodeFrom?: long(name='NodeFrom', example='44***'),
    }
  ](name='Edges'),
  tid?: long(name='Tid', example='3***'),
}

model AddTaskFlowEdgesShrinkRequest {
  dagId?: long(name='DagId', example='15***'),
  edgesShrink?: string(name='Edges'),
  tid?: long(name='Tid', example='3***'),
}

model AddTaskFlowEdgesResponseBody = {
  edgeIds?: {
    edgeId?: [ long ](name='EdgeId')
  }(name='EdgeIds'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E5EE2B9E-2F95-57FA-B284-CB441CEE49D6'),
  success?: boolean(name='Success', example='true'),
}

model AddTaskFlowEdgesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTaskFlowEdgesResponseBody(name='body'),
}

async function addTaskFlowEdgesWithOptions(tmpReq: AddTaskFlowEdgesRequest, runtime: Util.RuntimeOptions): AddTaskFlowEdgesResponse {
  Util.validateModel(tmpReq);
  var request = new AddTaskFlowEdgesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.edges)) {
    request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, 'Edges', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.edgesShrink)) {
    query['Edges'] = request.edgesShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTaskFlowEdges',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTaskFlowEdges(request: AddTaskFlowEdgesRequest): AddTaskFlowEdgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTaskFlowEdgesWithOptions(request, runtime);
}

model ApproveOrderRequest {
  approvalType?: string(name='ApprovalType', description='The action that you want to perform on the ticket. Valid values:

*   AGREE: approve
*   CANCEL: cancel
*   REJECT: reject', example='agree'),
  comment?: string(name='Comment', description='The description of the ticket.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='-1'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](~~144642~~) operation to obtain the ID of the approval process.', example='1234'),
}

model ApproveOrderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ApproveOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveOrderResponseBody(name='body'),
}

async function approveOrderWithOptions(request: ApproveOrderRequest, runtime: Util.RuntimeOptions): ApproveOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.approvalType)) {
    query['ApprovalType'] = request.approvalType;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.workflowInstanceId)) {
    query['WorkflowInstanceId'] = request.workflowInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApproveOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveOrder(request: ApproveOrderRequest): ApproveOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveOrderWithOptions(request, runtime);
}

model BackFillRequest {
  asc?: boolean(name='Asc', description='The running sequence of task flows for data backfill. Valid values:

*   **0**: reverse chronological order.
*   **1**: chronological order. This is the default value.', example='0'),
  backFillDate?: string(name='BackFillDate', description='The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.', example='2022-01-14'),
  backFillDateBegin?: string(name='BackFillDateBegin', description='The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-01-14'),
  backFillDateEnd?: string(name='BackFillDateEnd', description='The end date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-09-29'),
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  historyDagId?: long(name='HistoryDagId', description='The ID of the historical task flow.', example='16***'),
  interval?: int32(name='Interval', description='The interval at which data backfill is performed. Unit: hours. Minimum value: 1. Default value: 24.', example='24'),
  isTriggerSubTree?: boolean(name='IsTriggerSubTree', description='Specifies whether to run descendant nodes. Default value: true.', example='true'),
  startNodeIds?: [ long ](name='StartNodeIds', description='The number of nodes for which you want to backfill data.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model BackFillShrinkRequest {
  asc?: boolean(name='Asc', description='The running sequence of task flows for data backfill. Valid values:

*   **0**: reverse chronological order.
*   **1**: chronological order. This is the default value.', example='0'),
  backFillDate?: string(name='BackFillDate', description='The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.', example='2022-01-14'),
  backFillDateBegin?: string(name='BackFillDateBegin', description='The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-01-14'),
  backFillDateEnd?: string(name='BackFillDateEnd', description='The end date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.', example='2022-09-29'),
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  historyDagId?: long(name='HistoryDagId', description='The ID of the historical task flow.', example='16***'),
  interval?: int32(name='Interval', description='The interval at which data backfill is performed. Unit: hours. Minimum value: 1. Default value: 24.', example='24'),
  isTriggerSubTree?: boolean(name='IsTriggerSubTree', description='Specifies whether to run descendant nodes. Default value: true.', example='true'),
  startNodeIdsShrink?: string(name='StartNodeIds', description='The number of nodes for which you want to backfill data.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model BackFillResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  nodeId?: long(name='NodeId', description='The ID of the node.', example='43****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model BackFillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BackFillResponseBody(name='body'),
}

/**
  * ## Description
  * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
  *
  * @param tmpReq BackFillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BackFillResponse
 */
async function backFillWithOptions(tmpReq: BackFillRequest, runtime: Util.RuntimeOptions): BackFillResponse {
  Util.validateModel(tmpReq);
  var request = new BackFillShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.startNodeIds)) {
    request.startNodeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startNodeIds, 'StartNodeIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.backFillDate)) {
    query['BackFillDate'] = request.backFillDate;
  }
  if (!Util.isUnset(request.backFillDateBegin)) {
    query['BackFillDateBegin'] = request.backFillDateBegin;
  }
  if (!Util.isUnset(request.backFillDateEnd)) {
    query['BackFillDateEnd'] = request.backFillDateEnd;
  }
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.historyDagId)) {
    query['HistoryDagId'] = request.historyDagId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.isTriggerSubTree)) {
    query['IsTriggerSubTree'] = request.isTriggerSubTree;
  }
  if (!Util.isUnset(request.startNodeIdsShrink)) {
    query['StartNodeIds'] = request.startNodeIdsShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BackFill',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
  *
  * @param request BackFillRequest
  * @return BackFillResponse
 */
async function backFill(request: BackFillRequest): BackFillResponse {
  var runtime = new Util.RuntimeOptions{};
  return backFillWithOptions(request, runtime);
}

model BuyPayAsYouGoOrderRequest {
  commodityType?: string(name='CommodityType', example='SensitiveDataProtection'),
  insNum?: int32(name='InsNum', example='7'),
  tid?: long(name='Tid', example='3***'),
  versionType?: string(name='VersionType', example='stand'),
}

model BuyPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  instanceId?: string(name='InstanceId', example='dms_pre_public_cn-nif23l****'),
  requestId?: string(name='RequestId', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model BuyPayAsYouGoOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BuyPayAsYouGoOrderResponseBody(name='body'),
}

async function buyPayAsYouGoOrderWithOptions(request: BuyPayAsYouGoOrderRequest, runtime: Util.RuntimeOptions): BuyPayAsYouGoOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityType)) {
    query['CommodityType'] = request.commodityType;
  }
  if (!Util.isUnset(request.insNum)) {
    query['InsNum'] = request.insNum;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.versionType)) {
    query['VersionType'] = request.versionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BuyPayAsYouGoOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function buyPayAsYouGoOrder(request: BuyPayAsYouGoOrderRequest): BuyPayAsYouGoOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return buyPayAsYouGoOrderWithOptions(request, runtime);
}

model ChangeColumnSecLevelRequest {
  columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to query the name of the field.

>  You can also call the [ListColumns](~~141870~~) operation to query the name of the field.', example='test_column'),
  dbId?: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](~~141876~~) operation to query the ID of the database.

>  You can also call the [ListDatabases](~~141873~~) operation to query the ID of a physical database and the [ListLogicDatabases](~~141874~~) operation to query the ID of a logical database.', example='325'),
  isLogic?: boolean(name='IsLogic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a physical database.
*   false: The database is a logical database.', example='false'),
  newLevel?: string(name='NewLevel', description='The new sensitivity level of the field that you want to specify. Valid values:

*   INNER: low sensitivity level
*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level', example='SENSITIVE'),
  schemaName?: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](~~188103~~) operation to query the name of the database.

*   You can also call the [SearchDatabase](~~141876~~) operation to query the name of the database.
*   You can also call the [ListDatabases](~~141873~~) operation to query the name of a physical database and the [ListLogicDatabases](~~141874~~) operation to query the name of a logical database.', example='test_schema'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](~~188103~~) operation to query the name of the table.

>  You can also call the [ListTables](~~141878~~) operation to query the name of the table.', example='test_table'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='43253'),
}

model ChangeColumnSecLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='false'),
}

model ChangeColumnSecLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeColumnSecLevelResponseBody(name='body'),
}

async function changeColumnSecLevelWithOptions(request: ChangeColumnSecLevelRequest, runtime: Util.RuntimeOptions): ChangeColumnSecLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.isLogic)) {
    query['IsLogic'] = request.isLogic;
  }
  if (!Util.isUnset(request.newLevel)) {
    query['NewLevel'] = request.newLevel;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeColumnSecLevel',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeColumnSecLevel(request: ChangeColumnSecLevelRequest): ChangeColumnSecLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeColumnSecLevelWithOptions(request, runtime);
}

model ChangeLhDagOwnerRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='9***'),
  ownerUserId?: long(name='OwnerUserId', description='The ID of the user to be specified as the new owner of the task flow. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.', example='50****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model ChangeLhDagOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9997630E-1993-5E6D-9DF1-4EFEE755FE31'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ChangeLhDagOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeLhDagOwnerResponseBody(name='body'),
}

/**
  * Usage notes:
  * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
  * *   You can call the [ReDeployLhDagVersion](~~424712~~) operation to redeploy a published version of a task flow.
  *
  * @param request ChangeLhDagOwnerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChangeLhDagOwnerResponse
 */
async function changeLhDagOwnerWithOptions(request: ChangeLhDagOwnerRequest, runtime: Util.RuntimeOptions): ChangeLhDagOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.ownerUserId)) {
    query['OwnerUserId'] = request.ownerUserId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeLhDagOwner',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Usage notes:
  * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
  * *   You can call the [ReDeployLhDagVersion](~~424712~~) operation to redeploy a published version of a task flow.
  *
  * @param request ChangeLhDagOwnerRequest
  * @return ChangeLhDagOwnerResponse
 */
async function changeLhDagOwner(request: ChangeLhDagOwnerRequest): ChangeLhDagOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeLhDagOwnerWithOptions(request, runtime);
}

model CloseOrderRequest {
  closeReason?: string(name='CloseReason', example='close reason'),
  orderId?: long(name='OrderId', example='1343'),
  tid?: long(name='Tid', example='-1'),
}

model CloseOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model CloseOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseOrderResponseBody(name='body'),
}

async function closeOrderWithOptions(request: CloseOrderRequest, runtime: Util.RuntimeOptions): CloseOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.closeReason)) {
    query['CloseReason'] = request.closeReason;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeOrder(request: CloseOrderRequest): CloseOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeOrderWithOptions(request, runtime);
}

model CreateDataCorrectOrderRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='test'),
  param?: {
    attachmentName?: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to change data. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.

>  This parameter is required if you set the **SqlType** parameter to **ATTACHMENT**.', example='test.sql'),
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    dbItemList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
        logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      }
    ](name='DbItemList', description='The databases in which you want to change data.'),
    estimateAffectRows?: long(name='EstimateAffectRows', description='The estimated number of data rows to be affected by the data change.', example='1'),
    execMode?: string(name='ExecMode', description='The execution mode of the ticket after the ticket is approved. Valid values:

*   **COMMITOR**: The data change is performed by the user who submits the ticket.
*   **AUTO**: The data change is automatically performed after the ticket is approved.
*   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='COMMITOR'),
    execSQL?: string(name='ExecSQL', description='The SQL statements that you want to execute to change data.

>  This parameter is required if you set the **SqlType** parameter to **TEXT**.', example='update base_user set id = 1 where id  = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data change. You can call the [GetUserUploadFileJob](~~206069~~) operation to the attachment key from the value of the AttachmentKey parameter.

>  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements used to roll back the data change.

> 
*   This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.', example='update base_user set id = 1 where id  = 1;'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='TEXT'),
    sqlType?: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='TEXT'),
  }(name='Param', description='The parameters of the ticket.'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateDataCorrectOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='test'),
  paramShrink?: string(name='Param', description='The parameters of the ticket.'),
  relatedUserListShrink?: string(name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateDataCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateDataCorrectOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataCorrectOrderResponseBody(name='body'),
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param tmpReq CreateDataCorrectOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDataCorrectOrderResponse
 */
async function createDataCorrectOrderWithOptions(tmpReq: CreateDataCorrectOrderRequest, runtime: Util.RuntimeOptions): CreateDataCorrectOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataCorrectOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataCorrectOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param request CreateDataCorrectOrderRequest
  * @return CreateDataCorrectOrderResponse
 */
async function createDataCorrectOrder(request: CreateDataCorrectOrderRequest): CreateDataCorrectOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataCorrectOrderWithOptions(request, runtime);
}

model CreateDataCronClearOrderRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment for the ticket. The attachment provides more instructions for this operation.

You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='order_attachement.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This reduces unnecessary communication.', example='test'),
  param?: {
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    cronClearItemList?: [ 
      {
        columnName?: string(name='ColumnName', description='The name of the field.', example='gmt_create'),
        filterSQL?: string(name='FilterSQL', description='The filter conditions.', example='where 1 = 1'),
        remainDays?: long(name='RemainDays', description='The retention period of the historical data. Unit: days. For example, if you set the parameter to 7, DMS deletes the data that is retained for more than seven days.', example='7'),
        tableName?: string(name='TableName', description='The name of the table. You can call the [ListTables](~~141878~~) operation to query the name of the table.', example='t1'),
        timeUnit?: string(name='TimeUnit', description='The type of time granularity. If the ColumnName parameter specifies a field of a time type, this parameter is required. Valid values:

*   **MILLISECONDS**: milliseconds
*   **SECONDS**: seconds', example='MILLISECONDS'),
      }
    ](name='CronClearItemList', description='The tables for which you want to clear historical data.'),
    cronFormat?: string(name='CronFormat', description='The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](~~206581~~).', example='0 0 2 * * ?'),
    dbItemList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the database. You can call the [SearchDatabases](~~141876~~) operation to query the ID of the database.', example='1234'),
        logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      }
    ](name='DbItemList', description='The databases for which you want to clear historical data.'),
    durationHour?: long(name='DurationHour', description='The amount of time taken to run the task. Unit: hours.

>  If the **specifyDuration** parameter is set to **true**, this parameter is required.', example='4'),
    specifyDuration?: boolean(name='specifyDuration', description='Specifies whether to specify an end time for the task. Valid values:

*   **true**: specifies an end time for the task. The task is automatically suspended after this end time.
*   **false**: does not specify an end time for the task. The task is stopped after the historical data is cleared.', example='true'),
  }(name='Param', description='The parameters of the ticket.'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](~~181330~~) section of the Manage DMS tenants topic.', example='123454324'),
}

model CreateDataCronClearOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment for the ticket. The attachment provides more instructions for this operation.

You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='order_attachement.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This reduces unnecessary communication.', example='test'),
  paramShrink?: string(name='Param', description='The parameters of the ticket.'),
  relatedUserListShrink?: string(name='RelatedUserList', description='The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](~~181330~~) section of the Manage DMS tenants topic.', example='123454324'),
}

model CreateDataCronClearOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateDataCronClearOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataCronClearOrderResponseBody(name='body'),
}

/**
  * For more information about the historical data cleaning, see [Clear historical data](~~162507~~).
  * This operation can be used only for MySQL databases.
  *
  * @param tmpReq CreateDataCronClearOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDataCronClearOrderResponse
 */
async function createDataCronClearOrderWithOptions(tmpReq: CreateDataCronClearOrderRequest, runtime: Util.RuntimeOptions): CreateDataCronClearOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataCronClearOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataCronClearOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the historical data cleaning, see [Clear historical data](~~162507~~).
  * This operation can be used only for MySQL databases.
  *
  * @param request CreateDataCronClearOrderRequest
  * @return CreateDataCronClearOrderResponse
 */
async function createDataCronClearOrder(request: CreateDataCronClearOrderRequest): CreateDataCronClearOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataCronClearOrderWithOptions(request, runtime);
}

model CreateDataImportOrderRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.', example='test'),
  param?: {
    attachmentName?: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to import data. You can call the [GetUserUploadFileJob](~~206069~~) operation to the attachment key from the value of the AttachmentKey parameter.', example='order_text'),
    classify?: string(name='Classify', description='The reason for the data import.', example='test'),
    csvFirstRowIsColumnDef?: boolean(name='CsvFirstRowIsColumnDef', description='The type of the CSV file. Valid values:

*   **true**: The first row in the CSV file contains field names.
*   **false**: The first row in the CSV file contains data.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='true'),
    dbItemList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
        logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

>  If you set this parameter to **true**, the database that you specify must be a logical database.', example='false'),
      }
    ](name='DbItemList', description='The database to which you want to import data. You can specify only one database.'),
    fileEncoding?: string(name='FileEncoding', description='The encoding algorithm to be used by the destination database. Valid values:

*   **AUTO**: automatic identification
*   **UTF-8**: UTF-8 encoding
*   **GBK**: GBK encoding
*   **ISO-8859-1**: ISO-8859-1 encoding', example='AUTO'),
    fileType?: string(name='FileType', description='The format of the file for the data import. Valid values:

*   **SQL**: an SQL file
*   **CSV**: a CSV file', example='CSV'),
    ignoreError?: boolean(name='IgnoreError', description='Specifies whether to skip an error that occurs. Valid values:

*   **true**: skips the error and continues to execute SQL statements.
*   **false**: stops executing SQL statements.', example='false'),
    importMode?: string(name='ImportMode', description='The import mode. Valid values:

*   **FAST_MODE**: In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
*   **SAFE_MODE**: In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. This mode can be used to import data in a more secure but less efficient manner.', example='FAST_MODE'),
    insertType?: string(name='InsertType', description='The mode in which the data in the CSV format is to be written to the destination table. Valid values:

*   **INSERT**: The database checks the primary key when data is written. If a duplicate primary key value exists, an error message is returned.
*   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
*   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as one row in the destination table, the database deletes the existing row and inserts the new row into the destination table.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='INSERT'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data import. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.

>  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.', example='rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements used to roll back the data import.

>  This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data import. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment', example='TEXT'),
    tableName?: string(name='TableName', description='The destination table to which you want to import the data in the CSV format.

>  This parameter is required if you set the **FileType** parameter to **CSV**.', example='Table_text'),
  }(name='Param', description='The parameters of the ticket.'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateDataImportOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.', example='test'),
  paramShrink?: string(name='Param', description='The parameters of the ticket.'),
  relatedUserListShrink?: string(name='RelatedUserList', description='The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateDataImportOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateDataImportOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataImportOrderResponseBody(name='body'),
}

/**
  * For more information about the Large Data Import feature, see [Import data](~~161439~~).
  *
  * @param tmpReq CreateDataImportOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDataImportOrderResponse
 */
async function createDataImportOrderWithOptions(tmpReq: CreateDataImportOrderRequest, runtime: Util.RuntimeOptions): CreateDataImportOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataImportOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataImportOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the Large Data Import feature, see [Import data](~~161439~~).
  *
  * @param request CreateDataImportOrderRequest
  * @return CreateDataImportOrderResponse
 */
async function createDataImportOrder(request: CreateDataImportOrderRequest): CreateDataImportOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataImportOrderWithOptions(request, runtime);
}

model CreateFreeLockCorrectOrderRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='test'),
  param?: {
    attachmentName?: string(name='AttachmentName', description='The key of the attachment that contains the SQL statements used to change data. This parameter is not supported.', example='test.sql'),
    classify?: string(name='Classify', description='The reason for the data change.', example='test'),
    dbItemList?: [ 
      {
        dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
        logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      }
    ](name='DbItemList', description='The databases in which you want to change data.'),
    execMode?: string(name='ExecMode', description='The execution mode of the ticket after the ticket is approved. Valid values:

*   **COMMITOR**: The data change is performed by the user who submits the ticket.
*   **AUTO**: The data change is automatically performed after the ticket is approved.
*   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='COMMITOR'),
    execSQL?: string(name='ExecSQL', description='The SQL statements that you want to execute to change data.', example='delete from base_user where 1 = 1;'),
    rollbackAttachmentName?: string(name='RollbackAttachmentName', description='The key of the attachment that contains the SQL statements used to roll back the data change.', example='test_rollback.sql'),
    rollbackSQL?: string(name='RollbackSQL', description='The SQL statements used to roll back the data change.', example='empty'),
    rollbackSqlType?: string(name='RollbackSqlType', description='The format of the SQL statements used to roll back the data change. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment. This value is not supported.', example='TEXT'),
    sqlType?: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

*   **TEXT**: text
*   **ATTACHMENT**: attachment. This value is not supported.', example='TEXT'),
  }(name='Param', description='The parameters of the ticket.'),
  relatedUserList?: [ long ](name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateFreeLockCorrectOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](~~206069~~) operation to obtain the attachment key from the value of the AttachmentKey parameter.', example='order_attachment.txt'),
  comment?: string(name='Comment', description='The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.', example='test'),
  paramShrink?: string(name='Param', description='The parameters of the ticket.'),
  relatedUserListShrink?: string(name='RelatedUserList', description='The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateFreeLockCorrectOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateFreeLockCorrectOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFreeLockCorrectOrderResponseBody(name='body'),
}

/**
  * For more information about the lock-free change feature, see [Overview](~~207847~~).
  * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](~~96145~~) and [Change schemas without locking tables](~~98373~~).
  *
  * @param tmpReq CreateFreeLockCorrectOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFreeLockCorrectOrderResponse
 */
async function createFreeLockCorrectOrderWithOptions(tmpReq: CreateFreeLockCorrectOrderRequest, runtime: Util.RuntimeOptions): CreateFreeLockCorrectOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFreeLockCorrectOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFreeLockCorrectOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the lock-free change feature, see [Overview](~~207847~~).
  * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](~~96145~~) and [Change schemas without locking tables](~~98373~~).
  *
  * @param request CreateFreeLockCorrectOrderRequest
  * @return CreateFreeLockCorrectOrderResponse
 */
async function createFreeLockCorrectOrder(request: CreateFreeLockCorrectOrderRequest): CreateFreeLockCorrectOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFreeLockCorrectOrderWithOptions(request, runtime);
}

model CreateLakeHouseSpaceRequest {
  description?: string(name='Description', description='The description of the workspace.', example='test'),
  devDbId?: string(name='DevDbId', description='The ID of the development database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID.', example='2435****'),
  dwDbType?: string(name='DwDbType', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL', example='14'),
  mode?: string(name='Mode', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode. This mode is unavailable.
*   **1**: standard mode.', example='1'),
  prodDbId?: string(name='ProdDbId', description='The ID of the production database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID.', example='2442****'),
  spaceConfig?: string(name='SpaceConfig', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}'),
  spaceName?: string(name='SpaceName', description='The name of the workspace.', example='test_space'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='Invalid parameters: space name、mode、prod db id、db type、config.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='24'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateLakeHouseSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLakeHouseSpaceResponseBody(name='body'),
}

/**
  * *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
  * *   You can call the [GetLhSpaceByName](~~424379~~) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
  *
  * @param request CreateLakeHouseSpaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateLakeHouseSpaceResponse
 */
async function createLakeHouseSpaceWithOptions(request: CreateLakeHouseSpaceRequest, runtime: Util.RuntimeOptions): CreateLakeHouseSpaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.devDbId)) {
    query['DevDbId'] = request.devDbId;
  }
  if (!Util.isUnset(request.dwDbType)) {
    query['DwDbType'] = request.dwDbType;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.prodDbId)) {
    query['ProdDbId'] = request.prodDbId;
  }
  if (!Util.isUnset(request.spaceConfig)) {
    query['SpaceConfig'] = request.spaceConfig;
  }
  if (!Util.isUnset(request.spaceName)) {
    query['SpaceName'] = request.spaceName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLakeHouseSpace',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
  * *   You can call the [GetLhSpaceByName](~~424379~~) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
  *
  * @param request CreateLakeHouseSpaceRequest
  * @return CreateLakeHouseSpaceResponse
 */
async function createLakeHouseSpace(request: CreateLakeHouseSpaceRequest): CreateLakeHouseSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLakeHouseSpaceWithOptions(request, runtime);
}

model CreateLogicDatabaseRequest {
  alias?: string(name='Alias', description='The alias of the logical database.', example='test_logic_db'),
  databaseIds?: [ long ](name='DatabaseIds', description='The IDs of the physical databases that compose the logical database. You can specify one or more database IDs. You can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the physical databases.'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model CreateLogicDatabaseShrinkRequest {
  alias?: string(name='Alias', description='The alias of the logical database.', example='test_logic_db'),
  databaseIdsShrink?: string(name='DatabaseIds', description='The IDs of the physical databases that compose the logical database. You can specify one or more database IDs. You can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the physical databases.'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model CreateLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicDbId?: long(name='LogicDbId', description='The ID of the logical database.', example='1***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model CreateLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLogicDatabaseResponseBody(name='body'),
}

async function createLogicDatabaseWithOptions(tmpReq: CreateLogicDatabaseRequest, runtime: Util.RuntimeOptions): CreateLogicDatabaseResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLogicDatabaseShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.databaseIds)) {
    request.databaseIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.databaseIds, 'DatabaseIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!Util.isUnset(request.databaseIdsShrink)) {
    query['DatabaseIds'] = request.databaseIdsShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLogicDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLogicDatabase(request: CreateLogicDatabaseRequest): CreateLogicDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogicDatabaseWithOptions(request, runtime);
}

model CreateOrderRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='test_AttachmentKey'),
  comment?: string(name='Comment', description='The description of the ticket to be created.', example='test'),
  pluginParam?: map[string]any(name='PluginParam', description='The ticket creation parameter. The value is a JSON string. The value of this parameter differs based on the type of the ticket. For more information, see the **PluginParam parameter** section in this topic.', example='{PluginParam_test}'),
  pluginType?: string(name='PluginType', description='The type of the ticket. For more information, see [PluginType parameter](~~429109~~).', example='DATA_EXPORT'),
  relatedUserList?: string(name='RelatedUserList', description='The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).', example='user1,user2'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', description='The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](~~206069~~) operation to query the key of the attachment.', example='test_AttachmentKey'),
  comment?: string(name='Comment', description='The description of the ticket to be created.', example='test'),
  pluginParamShrink?: string(name='PluginParam', description='The ticket creation parameter. The value is a JSON string. The value of this parameter differs based on the type of the ticket. For more information, see the **PluginParam parameter** section in this topic.', example='{PluginParam_test}'),
  pluginType?: string(name='PluginType', description='The type of the ticket. For more information, see [PluginType parameter](~~429109~~).', example='DATA_EXPORT'),
  relatedUserList?: string(name='RelatedUserList', description='The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).', example='user1,user2'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model CreateOrderResponseBody = {
  createOrderResult?: {
    orderIds?: [ long ](name='OrderIds')
  }(name='CreateOrderResult', description='The ID of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrderResponseBody(name='body'),
}

/**
  * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
  * *   [CreateDataCorrectOrder](~~208388~~): creates a regular data change ticket.
  * *   [CreateDataCronClearOrder](~~208385~~): creates a ticket to clear historical data.
  * *   [CreateDataImportOrder](~~208387~~): creates a data import ticket.
  * *   [CreateFreeLockCorrectOrder](~~208386~~): creates a lock-free change ticket.
  *
  * @param tmpReq CreateOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOrderResponse
 */
async function createOrderWithOptions(tmpReq: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pluginParam)) {
    request.pluginParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pluginParam, 'PluginParam', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  if (!Util.isUnset(request.relatedUserList)) {
    query['RelatedUserList'] = request.relatedUserList;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pluginParamShrink)) {
    body['PluginParam'] = request.pluginParamShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
  * *   [CreateDataCorrectOrder](~~208388~~): creates a regular data change ticket.
  * *   [CreateDataCronClearOrder](~~208385~~): creates a ticket to clear historical data.
  * *   [CreateDataImportOrder](~~208387~~): creates a data import ticket.
  * *   [CreateFreeLockCorrectOrder](~~208386~~): creates a lock-free change ticket.
  *
  * @param request CreateOrderRequest
  * @return CreateOrderResponse
 */
async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model CreateProxyRequest {
  instanceId?: long(name='InstanceId', description='The ID of the database instance. You can call the [ListInstances](https://www.alibabacloud.com/help/en/data-management-service/latest/listinstances) or [GetInstance](https://www.alibabacloud.com/help/en/data-management-service/latest/getinstance) operation to query the database instance ID.', example='183****'),
  password?: string(name='Password', description='The password of the database account.', example='******'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***'),
  username?: string(name='Username', description='The username of the database account.', example='username'),
}

model CreateProxyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FFD154E-F57F-5374-B568-D6276F15****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model CreateProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProxyResponseBody(name='body'),
}

/**
  * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
  * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
  * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
  *
  * @param request CreateProxyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProxyResponse
 */
async function createProxyWithOptions(request: CreateProxyRequest, runtime: Util.RuntimeOptions): CreateProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProxy',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
  * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
  * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
  *
  * @param request CreateProxyRequest
  * @return CreateProxyResponse
 */
async function createProxy(request: CreateProxyRequest): CreateProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProxyWithOptions(request, runtime);
}

model CreateProxyAccessRequest {
  indepAccount?: string(name='IndepAccount', description='The database account.', example='xxx'),
  indepPassword?: string(name='IndepPassword', description='The password that is used to log on to the database.', example='xxx'),
  proxyId?: long(name='ProxyId', description='The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1'),
  userId?: long(name='UserId', description='The ID of the user. You can call the [ListUsers](https://www.alibabacloud.com/help/en/data-management-service/latest/listusers) or [GetUser](https://www.alibabacloud.com/help/en/data-management-service/latest/getuser) operation to obtain this parameter.', example='1'),
}

model CreateProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  proxyAccessId?: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProxyAccessResponseBody(name='body'),
}

/**
  * - The data security protection feature is enabled for the instance.
  * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
  *
  * @param request CreateProxyAccessRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProxyAccessResponse
 */
async function createProxyAccessWithOptions(request: CreateProxyAccessRequest, runtime: Util.RuntimeOptions): CreateProxyAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.indepAccount)) {
    query['IndepAccount'] = request.indepAccount;
  }
  if (!Util.isUnset(request.indepPassword)) {
    query['IndepPassword'] = request.indepPassword;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProxyAccess',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The data security protection feature is enabled for the instance.
  * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
  *
  * @param request CreateProxyAccessRequest
  * @return CreateProxyAccessResponse
 */
async function createProxyAccess(request: CreateProxyAccessRequest): CreateProxyAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProxyAccessWithOptions(request, runtime);
}

model CreatePublishGroupTaskRequest {
  dbId?: int32(name='DbId', example='12345'),
  logic?: boolean(name='Logic', example='false'),
  orderId?: long(name='OrderId', example='142435'),
  planTime?: string(name='PlanTime', example='2019-10-10 00:00:00'),
  publishStrategy?: string(name='PublishStrategy', example='IMMEDIATELY'),
  tid?: long(name='Tid', example='-1'),
}

model CreatePublishGroupTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='413452'),
}

model CreatePublishGroupTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePublishGroupTaskResponseBody(name='body'),
}

async function createPublishGroupTaskWithOptions(request: CreatePublishGroupTaskRequest, runtime: Util.RuntimeOptions): CreatePublishGroupTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.planTime)) {
    query['PlanTime'] = request.planTime;
  }
  if (!Util.isUnset(request.publishStrategy)) {
    query['PublishStrategy'] = request.publishStrategy;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePublishGroupTask',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPublishGroupTask(request: CreatePublishGroupTaskRequest): CreatePublishGroupTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPublishGroupTaskWithOptions(request, runtime);
}

model CreateSQLReviewOrderRequest {
  comment?: string(name='Comment', example='test'),
  param?: {
    attachmentKeyList?: [ string ](name='AttachmentKeyList'),
    dbId?: long(name='DbId', example='123321'),
    projectName?: string(name='ProjectName'),
  }(name='Param'),
  relatedUserList?: [ long ](name='RelatedUserList'),
  tid?: long(name='Tid', example='1'),
}

model CreateSQLReviewOrderShrinkRequest {
  comment?: string(name='Comment', example='test'),
  paramShrink?: string(name='Param'),
  relatedUserListShrink?: string(name='RelatedUserList'),
  tid?: long(name='Tid', example='1'),
}

model CreateSQLReviewOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model CreateSQLReviewOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSQLReviewOrderResponseBody(name='body'),
}

/**
  * For more instructions on this feature, see [SQL audit](~~60374~~) .
  *
  * @param tmpReq CreateSQLReviewOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSQLReviewOrderResponse
 */
async function createSQLReviewOrderWithOptions(tmpReq: CreateSQLReviewOrderRequest, runtime: Util.RuntimeOptions): CreateSQLReviewOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSQLReviewOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSQLReviewOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more instructions on this feature, see [SQL audit](~~60374~~) .
  *
  * @param request CreateSQLReviewOrderRequest
  * @return CreateSQLReviewOrderResponse
 */
async function createSQLReviewOrder(request: CreateSQLReviewOrderRequest): CreateSQLReviewOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSQLReviewOrderWithOptions(request, runtime);
}

model CreateScenarioRequest {
  description?: string(name='Description', description='The description of the business scenario.', example='test'),
  scenarioName?: string(name='ScenarioName', description='The name of the business scenario.', example='Business scenario - test'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
}

model CreateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='36***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateScenarioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScenarioResponseBody(name='body'),
}

async function createScenarioWithOptions(request: CreateScenarioRequest, runtime: Util.RuntimeOptions): CreateScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.scenarioName)) {
    query['ScenarioName'] = request.scenarioName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateScenario',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createScenario(request: CreateScenarioRequest): CreateScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScenarioWithOptions(request, runtime);
}

model CreateStandardGroupRequest {
  dbType?: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='mysql'),
  description?: string(name='Description', description='The description of the security rule set.'),
  groupName?: string(name='GroupName', description='The name of the security rule set.'),
  tid?: long(name='Tid', description='The ID of the tenant.', example='3000'),
}

model CreateStandardGroupResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroup?: {
    dbType?: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='mysql'),
    description?: string(name='Description', description='The description of the security rule set.'),
    groupMode?: string(name='GroupMode', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', example='COMMON'),
    groupName?: string(name='GroupName', description='The name of the security rule set.'),
    lastMenderId?: long(name='LastMenderId', description='The ID of the user who creates the security rule set.', example='51****'),
  }(name='StandardGroup', description='The created security rule set.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateStandardGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStandardGroupResponseBody(name='body'),
}

async function createStandardGroupWithOptions(request: CreateStandardGroupRequest, runtime: Util.RuntimeOptions): CreateStandardGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStandardGroup',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStandardGroup(request: CreateStandardGroupRequest): CreateStandardGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStandardGroupWithOptions(request, runtime);
}

model CreateStructSyncOrderRequest {
  attachmentKey?: string(name='AttachmentKey', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql'),
  comment?: string(name='Comment', example='test'),
  param?: {
    ignoreError?: boolean(name='IgnoreError', example='false'),
    source?: {
      dbId?: long(name='DbId', example='4324532'),
      dbSearchName?: string(name='DbSearchName', example='test'),
      logic?: boolean(name='Logic', example='false'),
      versionId?: string(name='VersionId', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Source'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', example='test_tbl'),
      }
    ](name='TableInfoList'),
    target?: {
      dbId?: long(name='DbId', example='432432'),
      dbSearchName?: string(name='DbSearchName', example='test'),
      logic?: boolean(name='Logic', example='false'),
      versionId?: string(name='VersionId', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='Target'),
  }(name='Param'),
  relatedUserList?: [ long ](name='RelatedUserList'),
  tid?: long(name='Tid', example='1'),
}

model CreateStructSyncOrderShrinkRequest {
  attachmentKey?: string(name='AttachmentKey', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql'),
  comment?: string(name='Comment', example='test'),
  paramShrink?: string(name='Param'),
  relatedUserListShrink?: string(name='RelatedUserList'),
  tid?: long(name='Tid', example='1'),
}

model CreateStructSyncOrderResponseBody = {
  createOrderResult?: [ long ](name='CreateOrderResult'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model CreateStructSyncOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStructSyncOrderResponseBody(name='body'),
}

async function createStructSyncOrderWithOptions(tmpReq: CreateStructSyncOrderRequest, runtime: Util.RuntimeOptions): CreateStructSyncOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateStructSyncOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.param)) {
    request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, 'Param', 'json');
  }
  if (!Util.isUnset(tmpReq.relatedUserList)) {
    request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, 'RelatedUserList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attachmentKey)) {
    query['AttachmentKey'] = request.attachmentKey;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.paramShrink)) {
    query['Param'] = request.paramShrink;
  }
  if (!Util.isUnset(request.relatedUserListShrink)) {
    query['RelatedUserList'] = request.relatedUserListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStructSyncOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStructSyncOrder(request: CreateStructSyncOrderRequest): CreateStructSyncOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStructSyncOrderWithOptions(request, runtime);
}

model CreateTaskRequest {
  dagId?: long(name='DagId', example='7***'),
  graphParam?: string(name='GraphParam', example='test'),
  nodeContent?: string(name='NodeContent', example='test'),
  nodeName?: string(name='NodeName', example='zhttest'),
  nodeOutput?: string(name='NodeOutput', example='test'),
  nodeType?: string(name='NodeType', example='36'),
  tid?: long(name='Tid', example='3***'),
  timeVariables?: string(name='TimeVariables', example='test'),
}

model CreateTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', example='InvalidParameterValid'),
  nodeId?: long(name='NodeId', example='3***'),
  requestId?: string(name='RequestId', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', example='true'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTaskWithOptions(request: CreateTaskRequest, runtime: Util.RuntimeOptions): CreateTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.graphParam)) {
    query['GraphParam'] = request.graphParam;
  }
  if (!Util.isUnset(request.nodeContent)) {
    query['NodeContent'] = request.nodeContent;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.nodeOutput)) {
    query['NodeOutput'] = request.nodeOutput;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.timeVariables)) {
    query['TimeVariables'] = request.timeVariables;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTask',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskWithOptions(request, runtime);
}

model CreateTaskFlowRequest {
  dagName?: string(name='DagName', description='The name of the task flow.', example='Dag_Name'),
  description?: string(name='Description', description='The description of the task flow.', example='zht_test'),
  scenarioId?: long(name='ScenarioId', description='The ID of the scenario.', example='2**'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***'),
}

model CreateTaskFlowResponseBody = {
  dagId?: long(name='DagId', description='The ID of the task flow.', example='33***'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='User can not access to Tenant [1]'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='19DA51A9-AC3E-5C36-8351-07EBCD2B89A1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskFlowResponseBody(name='body'),
}

async function createTaskFlowWithOptions(request: CreateTaskFlowRequest, runtime: Util.RuntimeOptions): CreateTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagName)) {
    query['DagName'] = request.dagName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTaskFlow(request: CreateTaskFlowRequest): CreateTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskFlowWithOptions(request, runtime);
}

model CreateUploadFileJobRequest {
  fileName?: string(name='FileName', description='The name of the attachment file.

>  The file name must end with .txt or .sql. For example, the file name can be test.txt or test.sql.', example='test.txt'),
  fileSource?: string(name='FileSource', description='The purpose of the attachment file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='datacorrect'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
  uploadURL?: string(name='UploadURL', description='The URL of the attachment file. The URL must be an HTTP URL or an HTTPS URL.

>  You can upload the attachment file to an Object Storage Service (OSS) bucket and obtain the URL of the file in the OSS console. For more information, see [Share objects](~~195674~~).', example='https://XXX.oss-cn-hangzhou.aliyuncs.com/test.txt'),
}

model CreateUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Unsupported url scheme : null, scheme must be https or http'),
  jobKey?: string(name='JobKey', description='The key of the task.

>  You can call the [GetUserUploadFileJob](~~206069~~) operation to query the progress and details of the task.', example='761f18031635736380812****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E103C5F9-DE47-53F2-BF34-D71DF38F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUploadFileJobResponseBody(name='body'),
}

async function createUploadFileJobWithOptions(request: CreateUploadFileJobRequest, runtime: Util.RuntimeOptions): CreateUploadFileJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileSource)) {
    query['FileSource'] = request.fileSource;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uploadURL)) {
    query['UploadURL'] = request.uploadURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUploadFileJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUploadFileJob(request: CreateUploadFileJobRequest): CreateUploadFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadFileJobWithOptions(request, runtime);
}

model CreateUploadOSSFileJobRequest {
  fileName?: string(name='FileName', example='test.sql'),
  fileSource?: string(name='FileSource', example='datacorrect'),
  tid?: long(name='Tid', example='-1'),
  uploadTarget?: {
    bucketName?: string(name='BucketName', example='test_bucket'),
    endpoint?: string(name='Endpoint', example='http://oss-cn-hangzhou.aliyuncs.com'),
    objectName?: string(name='ObjectName', example='test.sql'),
  }(name='UploadTarget'),
}

model CreateUploadOSSFileJobShrinkRequest {
  fileName?: string(name='FileName', example='test.sql'),
  fileSource?: string(name='FileSource', example='datacorrect'),
  tid?: long(name='Tid', example='-1'),
  uploadTargetShrink?: string(name='UploadTarget'),
}

model CreateUploadOSSFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  jobKey?: string(name='JobKey', example='65254a4c1614235217749100e'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model CreateUploadOSSFileJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUploadOSSFileJobResponseBody(name='body'),
}

async function createUploadOSSFileJobWithOptions(tmpReq: CreateUploadOSSFileJobRequest, runtime: Util.RuntimeOptions): CreateUploadOSSFileJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUploadOSSFileJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.uploadTarget)) {
    request.uploadTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uploadTarget, 'UploadTarget', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileSource)) {
    query['FileSource'] = request.fileSource;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uploadTargetShrink)) {
    query['UploadTarget'] = request.uploadTargetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUploadOSSFileJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUploadOSSFileJob(request: CreateUploadOSSFileJobRequest): CreateUploadOSSFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadOSSFileJobWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  host?: string(name='Host', description='The endpoint of the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to obtain the endpoint.', example='xxx.mysql.rds.aliyuncs.com'),
  port?: int32(name='Port', description='The port number that is used to connect to the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to obtain the port number.', example='3306'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to obtain the SID.', example='testSid'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
}

model DeleteInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
  *
  * @param request DeleteInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
  *
  * @param request DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteLakeHouseSpaceRequest {
  spaceId?: long(name='SpaceId', description='The ID of the workspace. You can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.', example='24'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model DeleteLakeHouseSpaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model DeleteLakeHouseSpaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLakeHouseSpaceResponseBody(name='body'),
}

async function deleteLakeHouseSpaceWithOptions(request: DeleteLakeHouseSpaceRequest, runtime: Util.RuntimeOptions): DeleteLakeHouseSpaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.spaceId)) {
    query['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLakeHouseSpace',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLakeHouseSpace(request: DeleteLakeHouseSpaceRequest): DeleteLakeHouseSpaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLakeHouseSpaceWithOptions(request, runtime);
}

model DeleteLhMembersRequest {
  memberIds?: [ int32 ](name='MemberIds', description='The ID of the user to be removed. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.'),
  objectId?: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='9***'),
  objectType?: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model DeleteLhMembersShrinkRequest {
  memberIdsShrink?: string(name='MemberIds', description='The ID of the user to be removed. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.'),
  objectId?: long(name='ObjectId', description='The ID of the object.

*   If the object is a workspace, you can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.
*   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='9***'),
  objectType?: int32(name='ObjectType', description='The type of the object. Valid values:

*   **0**: workspace
*   **1**: task flow', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model DeleteLhMembersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1C78D32-1AFD-58AD-9DD2-C8A0896969DD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DeleteLhMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLhMembersResponseBody(name='body'),
}

/**
  * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](~~424761~~) operation.
  *
  * @param tmpReq DeleteLhMembersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteLhMembersResponse
 */
async function deleteLhMembersWithOptions(tmpReq: DeleteLhMembersRequest, runtime: Util.RuntimeOptions): DeleteLhMembersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteLhMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.memberIds)) {
    request.memberIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberIds, 'MemberIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.memberIdsShrink)) {
    query['MemberIds'] = request.memberIdsShrink;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLhMembers',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
  * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](~~424761~~) operation.
  *
  * @param request DeleteLhMembersRequest
  * @return DeleteLhMembersResponse
 */
async function deleteLhMembers(request: DeleteLhMembersRequest): DeleteLhMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLhMembersWithOptions(request, runtime);
}

model DeleteLogicDatabaseRequest {
  logicDbId?: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the ID of the logical database.', example='1***'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model DeleteLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model DeleteLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLogicDatabaseResponseBody(name='body'),
}

async function deleteLogicDatabaseWithOptions(request: DeleteLogicDatabaseRequest, runtime: Util.RuntimeOptions): DeleteLogicDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logicDbId)) {
    query['LogicDbId'] = request.logicDbId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLogicDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLogicDatabase(request: DeleteLogicDatabaseRequest): DeleteLogicDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogicDatabaseWithOptions(request, runtime);
}

model DeleteLogicTableRouteConfigRequest {
  routeKey?: string(name='RouteKey', description='The unique key of the routing algorithm. You can call the [ListLogicTableRouteConfig](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictablerouteconfig) operation to query the unique key.', example='id-hash-mod15'),
  tableId?: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.', example='1****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***'),
}

model DeleteLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingRouteKey'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='RouteKey is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A916A004-A88C-5B39-ABDB-DE808E80****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model DeleteLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLogicTableRouteConfigResponseBody(name='body'),
}

async function deleteLogicTableRouteConfigWithOptions(request: DeleteLogicTableRouteConfigRequest, runtime: Util.RuntimeOptions): DeleteLogicTableRouteConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.routeKey)) {
    query['RouteKey'] = request.routeKey;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLogicTableRouteConfig',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLogicTableRouteConfig(request: DeleteLogicTableRouteConfigRequest): DeleteLogicTableRouteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogicTableRouteConfigWithOptions(request, runtime);
}

model DeleteProxyRequest {
  proxyId?: long(name='ProxyId', description='The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1'),
}

model DeleteProxyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProxyResponseBody(name='body'),
}

/**
  * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
  *
  * @param request DeleteProxyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteProxyResponse
 */
async function deleteProxyWithOptions(request: DeleteProxyRequest, runtime: Util.RuntimeOptions): DeleteProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProxy',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
  *
  * @param request DeleteProxyRequest
  * @return DeleteProxyResponse
 */
async function deleteProxy(request: DeleteProxyRequest): DeleteProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProxyWithOptions(request, runtime);
}

model DeleteProxyAccessRequest {
  proxyAccessId?: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1'),
}

model DeleteProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProxyAccessResponseBody(name='body'),
}

async function deleteProxyAccessWithOptions(request: DeleteProxyAccessRequest, runtime: Util.RuntimeOptions): DeleteProxyAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.proxyAccessId)) {
    query['ProxyAccessId'] = request.proxyAccessId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProxyAccess',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProxyAccess(request: DeleteProxyAccessRequest): DeleteProxyAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProxyAccessWithOptions(request, runtime);
}

model DeleteScenarioRequest {
  scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='12***'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
}

model DeleteScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteScenarioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteScenarioResponseBody(name='body'),
}

/**
  * ### Usage notes
  * When you call this operation, make sure that no task flow is specified in the business scenario.
  *
  * @param request DeleteScenarioRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteScenarioResponse
 */
async function deleteScenarioWithOptions(request: DeleteScenarioRequest, runtime: Util.RuntimeOptions): DeleteScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScenario',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Usage notes
  * When you call this operation, make sure that no task flow is specified in the business scenario.
  *
  * @param request DeleteScenarioRequest
  * @return DeleteScenarioResponse
 */
async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScenarioWithOptions(request, runtime);
}

model DeleteTaskRequest {
  nodeId?: string(name='NodeId', description='The ID of the node you want to delete.', example='54****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model DeleteTaskResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3B460770-40D9-5F07-B68A-173D1D708B72'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTaskResponseBody(name='body'),
}

async function deleteTaskWithOptions(request: DeleteTaskRequest, runtime: Util.RuntimeOptions): DeleteTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTask',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTaskWithOptions(request, runtime);
}

model DeleteTaskFlowRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='134137***'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model DeleteTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9AFE13F6-A4FD-581B-BFDE-B63B1CDC2336'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DeleteTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTaskFlowResponseBody(name='body'),
}

async function deleteTaskFlowWithOptions(request: DeleteTaskFlowRequest, runtime: Util.RuntimeOptions): DeleteTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTaskFlow(request: DeleteTaskFlowRequest): DeleteTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTaskFlowWithOptions(request, runtime);
}

model DeleteTaskFlowEdgesByConditionRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15****'),
  id?: long(name='Id', description='The ID of the task flow edge to delete.', example='24***'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the end node of the edge to delete.', example='44***'),
  nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge to delete.', example='44***'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model DeleteTaskFlowEdgesByConditionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='21234B66-6859-5558-9E5B-006EFE915CD0'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DeleteTaskFlowEdgesByConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
  *
  * @param request DeleteTaskFlowEdgesByConditionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTaskFlowEdgesByConditionResponse
 */
async function deleteTaskFlowEdgesByConditionWithOptions(request: DeleteTaskFlowEdgesByConditionRequest, runtime: Util.RuntimeOptions): DeleteTaskFlowEdgesByConditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.nodeEnd)) {
    query['NodeEnd'] = request.nodeEnd;
  }
  if (!Util.isUnset(request.nodeFrom)) {
    query['NodeFrom'] = request.nodeFrom;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTaskFlowEdgesByCondition',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
  *
  * @param request DeleteTaskFlowEdgesByConditionRequest
  * @return DeleteTaskFlowEdgesByConditionResponse
 */
async function deleteTaskFlowEdgesByCondition(request: DeleteTaskFlowEdgesByConditionRequest): DeleteTaskFlowEdgesByConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTaskFlowEdgesByConditionWithOptions(request, runtime);
}

model DeleteUserRequest {
  tid?: long(name='Tid', example='-1'),
  uid?: string(name='Uid', example='12345'),
}

model DeleteUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

/**
  * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
  *
  * @param request DeleteUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserResponse
 */
async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
  *
  * @param request DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DisableUserRequest {
  tid?: long(name='Tid', example='-1'),
  uid?: string(name='Uid', example='12345'),
}

model DisableUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model DisableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableUserResponseBody(name='body'),
}

/**
  * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
  *
  * @param request DisableUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableUserResponse
 */
async function disableUserWithOptions(request: DisableUserRequest, runtime: Util.RuntimeOptions): DisableUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
  * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
  *
  * @param request DisableUserRequest
  * @return DisableUserResponse
 */
async function disableUser(request: DisableUserRequest): DisableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableUserWithOptions(request, runtime);
}

model EditLogicDatabaseRequest {
  alias?: string(name='Alias', description='- The alias of the logical database. If you want to change the alias, specify a new alias.
- If you do not need to change the alias of the logical database, call the [GetLogicDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/getlogicdatabase) or [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the alias of the logical database.', example='test_logic_db'),
  databaseIds?: [ long ](name='DatabaseIds', description='- The IDs of the physical databases that compose the logical database. If you want to change the physical databases, you can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the new physical databases that you want to specify.
- If you do not want to change the physical databases, you can call the [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the IDs of the physical databases that compose the logical database.'),
  logicDbId?: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) operation to query the ID of the logical database.', example='1***'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model EditLogicDatabaseShrinkRequest {
  alias?: string(name='Alias', description='- The alias of the logical database. If you want to change the alias, specify a new alias.
- If you do not need to change the alias of the logical database, call the [GetLogicDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/getlogicdatabase) or [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the alias of the logical database.', example='test_logic_db'),
  databaseIdsShrink?: string(name='DatabaseIds', description='- The IDs of the physical databases that compose the logical database. If you want to change the physical databases, you can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the new physical databases that you want to specify.
- If you do not want to change the physical databases, you can call the [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the IDs of the physical databases that compose the logical database.'),
  logicDbId?: long(name='LogicDbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) operation to query the ID of the logical database.', example='1***'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model EditLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model EditLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditLogicDatabaseResponseBody(name='body'),
}

async function editLogicDatabaseWithOptions(tmpReq: EditLogicDatabaseRequest, runtime: Util.RuntimeOptions): EditLogicDatabaseResponse {
  Util.validateModel(tmpReq);
  var request = new EditLogicDatabaseShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.databaseIds)) {
    request.databaseIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.databaseIds, 'DatabaseIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!Util.isUnset(request.databaseIdsShrink)) {
    query['DatabaseIds'] = request.databaseIdsShrink;
  }
  if (!Util.isUnset(request.logicDbId)) {
    query['LogicDbId'] = request.logicDbId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EditLogicDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editLogicDatabase(request: EditLogicDatabaseRequest): EditLogicDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return editLogicDatabaseWithOptions(request, runtime);
}

model EnableUserRequest {
  tid?: long(name='Tid', example='-1'),
  uid?: string(name='Uid', example='12345'),
}

model EnableUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model EnableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableUserResponseBody(name='body'),
}

/**
  * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
  * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
  *
  * @param request EnableUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableUserResponse
 */
async function enableUserWithOptions(request: EnableUserRequest, runtime: Util.RuntimeOptions): EnableUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
  * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
  *
  * @param request EnableUserRequest
  * @return EnableUserResponse
 */
async function enableUser(request: EnableUserRequest): EnableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableUserWithOptions(request, runtime);
}

model ExecuteDataCorrectRequest {
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the data change.

```

json
"actionDetail" : {
    "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "transaction" : false, // Specify whether to change data as a transaction. 
    "backupData" : true // Specify whether to back up data. 
  }
```', example='{ "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }'),
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the ticket.', example='406****'),
  tid?: string(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ExecuteDataCorrectShrinkRequest {
  actionDetailShrink?: string(name='ActionDetail', description='The parameters that are required to perform the data change.

```

json
"actionDetail" : {
    "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
    "transaction" : false, // Specify whether to change data as a transaction. 
    "backupData" : true // Specify whether to back up data. 
  }
```', example='{ "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }'),
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the ticket.', example='406****'),
  tid?: string(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ExecuteDataCorrectResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EADDA791-2809-58CE-A303-743A77FF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ExecuteDataCorrectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteDataCorrectResponseBody(name='body'),
}

async function executeDataCorrectWithOptions(tmpReq: ExecuteDataCorrectRequest, runtime: Util.RuntimeOptions): ExecuteDataCorrectResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteDataCorrectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.actionDetailShrink)) {
    query['ActionDetail'] = request.actionDetailShrink;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteDataCorrect',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeDataCorrect(request: ExecuteDataCorrectRequest): ExecuteDataCorrectResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeDataCorrectWithOptions(request, runtime);
}

model ExecuteDataExportRequest {
  actionDetail?: map[string]any(name='ActionDetail', example='{    "fileType": "CSV",    "encoding": ""  }'),
  orderId?: long(name='OrderId', example='1234'),
  tid?: long(name='Tid', example='-1'),
}

model ExecuteDataExportShrinkRequest {
  actionDetailShrink?: string(name='ActionDetail', example='{    "fileType": "CSV",    "encoding": ""  }'),
  orderId?: long(name='OrderId', example='1234'),
  tid?: long(name='Tid', example='-1'),
}

model ExecuteDataExportResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteDataExportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteDataExportResponseBody(name='body'),
}

async function executeDataExportWithOptions(tmpReq: ExecuteDataExportRequest, runtime: Util.RuntimeOptions): ExecuteDataExportResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteDataExportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.actionDetailShrink)) {
    query['ActionDetail'] = request.actionDetailShrink;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteDataExport',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeDataExport(request: ExecuteDataExportRequest): ExecuteDataExportResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeDataExportWithOptions(request, runtime);
}

model ExecuteScriptRequest {
  dbId?: int32(name='DbId', description='The ID of the database.

>  This parameter is equivalent to the DatabaseId parameter in the SearchDatabase, ListDatabases, and GetDatabase operations. You can call one of these operations to obtain the required database ID. For more information, see [SearchDatabase](~~141876~~), [ListDatabases](~~141873~~), and [GetDatabase](~~141869~~).', example='123'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database.', example='false'),
  script?: string(name='Script', description='The SQL statements to be executed. Data query language (DQL) statements, data definition language (DDL) statements, and data manipulation language (DML) statements are supported. The control mode of the instance that you want to query determines whether you can execute DDL and DML statements.', example='select dt from report_daily'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](~~181330~~).', example='234'),
}

model ExecuteScriptResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message about the gateway.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  results?: [ 
    {
      columnNames?: [ string ](name='ColumnNames', description='The fields that are queried after the SQL statement is executed.'),
      message?: string(name='Message', description='The error message that is returned if the SQL statement fails to be executed. For example, an error message is returned because the SQL statement is invalid.', example='UnknownError'),
      rowCount?: long(name='RowCount', description='The total number of entries that are returned.', example='1'),
      rows?: [  map[string]any ](name='Rows', description='The rows that are queried after the SQL statement is executed.'),
      success?: boolean(name='Success', description='Indicates whether the SQL statement is executed.', example='true'),
    }
  ](name='Results', description='The results of the SQL statements that are executed, in the format of an array. Each entry in the array indicates the result of an SQL statement.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ExecuteScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteScriptResponseBody(name='body'),
}

/**
  * You can call this operation only for instances that are managed in Security Collaboration mode.
  *
  * @param request ExecuteScriptRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExecuteScriptResponse
 */
async function executeScriptWithOptions(request: ExecuteScriptRequest, runtime: Util.RuntimeOptions): ExecuteScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.script)) {
    query['Script'] = request.script;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteScript',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation only for instances that are managed in Security Collaboration mode.
  *
  * @param request ExecuteScriptRequest
  * @return ExecuteScriptResponse
 */
async function executeScript(request: ExecuteScriptRequest): ExecuteScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeScriptWithOptions(request, runtime);
}

model ExecuteStructSyncRequest {
  orderId?: long(name='OrderId', example='112345'),
  tid?: long(name='Tid', example='1'),
}

model ExecuteStructSyncResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  success?: boolean(name='Success', example='true'),
}

model ExecuteStructSyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteStructSyncResponseBody(name='body'),
}

/**
  * If the security rules of the instance need to be approved for synchronization, call [SubmitStructSyncOrderApproval](~~206166~~) The interface initiates an approval process and completes the approval.
  * >  You can call [GetStructSyncJobDetail](~~206160~~) You can call this operation to query whether the target instance requires an approval.
  *
  * @param request ExecuteStructSyncRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExecuteStructSyncResponse
 */
async function executeStructSyncWithOptions(request: ExecuteStructSyncRequest, runtime: Util.RuntimeOptions): ExecuteStructSyncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteStructSync',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the security rules of the instance need to be approved for synchronization, call [SubmitStructSyncOrderApproval](~~206166~~) The interface initiates an approval process and completes the approval.
  * >  You can call [GetStructSyncJobDetail](~~206160~~) You can call this operation to query whether the target instance requires an approval.
  *
  * @param request ExecuteStructSyncRequest
  * @return ExecuteStructSyncResponse
 */
async function executeStructSync(request: ExecuteStructSyncRequest): ExecuteStructSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeStructSyncWithOptions(request, runtime);
}

model GetApprovalDetailRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The ID of the approval process. You can call the [GetOrderBaseInfo](~~144642~~) operation to query the ID of the approval process.', example='184****'),
}

model GetApprovalDetailResponseBody = {
  approvalDetail?: {
    auditId?: long(name='AuditId', description='The ID of the approval process.', example='184****'),
    createTime?: string(name='CreateTime', description='The time when the approval process was created.', example='2021-10-29 14:17:25'),
    currentHandlers?: {
      currentHandler?: [ 
      {
        id?: long(name='Id', description='The ID of the user.', example='1'),
        nickName?: string(name='NickName', description='The nickname of the user.', example='nickName'),
      }
    ](name='CurrentHandler')
    }(name='CurrentHandlers', description='The information about the approver.'),
    description?: string(name='Description', description='The description of the approval process.'),
    orderId?: long(name='OrderId', description='The ID of the ticket.', example='384****'),
    orderType?: string(name='OrderType', description='The type of the ticket. Valid values:

- **NDDL**: The ticket is used to change the schema design.
- **DATA_TRACK**: The ticket is used to track data.
- **TABLE_SYNC**: The ticket is used to synchronize databases and tables.
- **PERM_APPLY**: The ticket is used to apply for permissions.
- **DATA_EXPORT**: The ticket is used to export data.
- **DATA_CORRECT**: The ticket is used to change data.
- **OWNER_APPLY**: The ticket is used to apply for the owner role of a resource.
- **SENSITIVITY**: The ticket is used to change column sensitivity levels.', example='PERM_APPLY'),
    reasonList?: {
      reasons?: [ string ](name='Reasons')
    }(name='ReasonList', description='The reason for the approval.'),
    templateId?: long(name='TemplateId', description='The ID of the approval template.', example='1234'),
    title?: string(name='Title', description='The title of the approval process.'),
    workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

- **AUDITING**: The ticket is being processed.
- **REJECT**: The ticket was rejected.
- **CANCEL**: The ticket was revoked.
- **APPROVED**: The ticket was approved.

>  If an approval process contains multiple approval nodes, this parameter is returned for each approval node.', example='APPROVED'),
    workflowNodes?: {
      workflowNode?: [ 
      {
        auditUserIdList?: {
          auditUserIds?: [ string ](name='AuditUserIds')
        }(name='AuditUserIdList', description='The IDs of the approvers.'),
        nodeName?: string(name='NodeName', description='The name of the approval node.', example='DBA'),
        operateComment?: string(name='OperateComment', description='The remarks of the approval.'),
        operateTime?: string(name='OperateTime', description='The time when the ticket was submitted.', example='2019-10-15 13:47:54'),
        operatorId?: long(name='OperatorId', description='The ID of the user who submitted the ticket.', example='1****'),
        workflowInsCode?: string(name='WorkflowInsCode', description='The approval status of the ticket. Valid values:

*   **AUDITING**: The ticket is being processed.
*   **REJECT**: The ticket was rejected.
*   **CANCEL**: The ticket was revoked.
*   **APPROVED**: The ticket was approved.', example='APPROVED'),
      }
    ](name='WorkflowNode')
    }(name='WorkflowNodes', description='The details of approval nodes.'),
  }(name='ApprovalDetail', description='The approval details of the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='MissingWorkflowInstanceId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='WorkflowInstanceId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66DE630B-ECA1-52A3-9198-602066F9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model GetApprovalDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApprovalDetailResponseBody(name='body'),
}

async function getApprovalDetailWithOptions(request: GetApprovalDetailRequest, runtime: Util.RuntimeOptions): GetApprovalDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.workflowInstanceId)) {
    query['WorkflowInstanceId'] = request.workflowInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApprovalDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApprovalDetail(request: GetApprovalDetailRequest): GetApprovalDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApprovalDetailWithOptions(request, runtime);
}

model GetDBTaskSQLJobLogRequest {
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [ListDBTaskSQLJob](~~207049~~) operation to query the ID of the SQL task.', example='1276****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model GetDBTaskSQLJobLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='JobId is mandatory for this action.'),
  log?: string(name='Log', description='The log that records the scheduling details.', example='log_****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AC23904-55DE-550B-9676-E8946F07****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDBTaskSQLJobLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDBTaskSQLJobLogResponseBody(name='body'),
}

async function getDBTaskSQLJobLogWithOptions(request: GetDBTaskSQLJobLogRequest, runtime: Util.RuntimeOptions): GetDBTaskSQLJobLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDBTaskSQLJobLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDBTaskSQLJobLog(request: GetDBTaskSQLJobLogRequest): GetDBTaskSQLJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDBTaskSQLJobLogWithOptions(request, runtime);
}

model GetDBTopologyRequest {
  logicDbId?: long(name='LogicDbId', example='134325'),
  tid?: long(name='Tid', example='43215'),
}

model GetDBTopologyResponseBody = {
  DBTopology?: {
    alias?: string(name='Alias', example='logic_db_test'),
    DBTopologyInfoList?: [ 
      {
        catalogName?: string(name='CatalogName', example='def'),
        dbId?: long(name='DbId', example='423532'),
        dbType?: string(name='DbType', example='polardb'),
        envType?: string(name='EnvType', example='dev'),
        instanceId?: long(name='InstanceId', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', example='RDS'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        schemaName?: string(name='SchemaName', example='db_test@rm-xxx:3306'),
        searchName?: string(name='SearchName', example='db_test'),
      }
    ](name='DBTopologyInfoList'),
    dbType?: string(name='DbType', example='polardb'),
    envType?: string(name='EnvType', example='dev'),
    logicDbId?: long(name='LogicDbId', example='1234'),
    logicDbName?: string(name='LogicDbName', example='logic_db_test'),
    searchName?: string(name='SearchName', example='logic_db_test'),
  }(name='DBTopology'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C5B8E84B-42B6-4374-AD5A-6264E1753378'),
  success?: boolean(name='Success', example='true'),
}

model GetDBTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDBTopologyResponseBody(name='body'),
}

async function getDBTopologyWithOptions(request: GetDBTopologyRequest, runtime: Util.RuntimeOptions): GetDBTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logicDbId)) {
    query['LogicDbId'] = request.logicDbId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDBTopology',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDBTopology(request: GetDBTopologyRequest): GetDBTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDBTopologyWithOptions(request, runtime);
}

model GetDataCorrectBackupFilesRequest {
  actionDetail?: map[string]any(name='ActionDetail', description='The parameters that are required to perform the operation. You do not need to specify this parameter.', example='{}'),
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to obtain the ticket ID.', example='4200000'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetDataCorrectBackupFilesShrinkRequest {
  actionDetailShrink?: string(name='ActionDetail', description='The parameters that are required to perform the operation. You do not need to specify this parameter.', example='{}'),
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to obtain the ticket ID.', example='4200000'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetDataCorrectBackupFilesResponseBody = {
  dataCorrectBackupFiles?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='DataCorrectBackupFiles', description='The download URL of the backup file for the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AFF4109-FEFB-44E8-96A3-923B1FA8C46E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataCorrectBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCorrectBackupFilesResponseBody(name='body'),
}

async function getDataCorrectBackupFilesWithOptions(tmpReq: GetDataCorrectBackupFilesRequest, runtime: Util.RuntimeOptions): GetDataCorrectBackupFilesResponse {
  Util.validateModel(tmpReq);
  var request = new GetDataCorrectBackupFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionDetail)) {
    request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, 'ActionDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.actionDetailShrink)) {
    query['ActionDetail'] = request.actionDetailShrink;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCorrectBackupFiles',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCorrectBackupFiles(request: GetDataCorrectBackupFilesRequest): GetDataCorrectBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectBackupFilesWithOptions(request, runtime);
}

model GetDataCorrectOrderDetailRequest {
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to obtain the ticket ID.', example='420****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetDataCorrectOrderDetailResponseBody = {
  dataCorrectOrderDetail?: {
    databaseList?: {
      database?: [ 
      {
        dbId?: int32(name='DbId', description='The ID of the database.', example='1860****'),
        dbType?: string(name='DbType', description='The engine of the database.', example='mysql'),
        envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

- product: production environment
- dev: development environment
- pre: staging environment
- test: test environment
- sit: system integration testing (SIT) environment
- uat: user acceptance testing (UAT) environment
- pet: stress testing environment
- stag: STAG environment', example='product'),
        logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

- **true**: The database is a logical database.
- **false**: The database is a physical database.', example='false'),
        searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='xxx@xxx:3306'),
      }
    ](name='Database')
    }(name='DatabaseList', description='The information about the database in which data is changed.'),
    execMode?: string(name='ExecMode', description='The execution mode of the ticket after the ticket is approved. Valid values:

- **COMMITOR**: The data change is performed by the user who submits the ticket.
- **AUTO**: The data change is automatically performed after the ticket is approved.
- **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.', example='COMMITOR'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', description='The number of affected rows that is obtained by the precheck.', example='100'),
      attachmentName?: string(name='AttachmentName', description='The name of the attachment that contains the SQL statements used to change data.', example='xxx'),
      classify?: string(name='Classify', description='The category of the reason for the data change.', example='test'),
      estimateAffectRows?: long(name='EstimateAffectRows', description='The estimated number of affected rows.', example='100'),
      exeSQL?: string(name='ExeSQL', description='The executed SQL statements.', example='update t1 set name = \\"xxx\\" where id <= 100'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', description='Indicates whether the precheck result is ignored. Valid values:

- **true**: The precheck result is ignored.
- **false**: The precheck result is not ignored.', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', description='The reason why the precheck result is ignored.', example='test'),
      rbAttachmentName?: string(name='RbAttachmentName', description='The name of the attachment that contains the SQL statements used to roll back the data change.', example='test'),
      rbSQL?: string(name='RbSQL', description='The SQL statements used to roll back the data change.', example='empty'),
      rbSQLType?: string(name='RbSQLType', description='The format of the SQL statements used to roll back the data change. Valid values:

- **TEXT**: text
- **ATTACHMENT**: attachment', example='text'),
      sqlType?: string(name='SqlType', description='The format of the SQL statements used to change data. Valid values:

- **TEXT**: text
- **ATTACHMENT**: attachment', example='text'),
    }(name='OrderDetail', description='The details of the ticket.'),
    preCheckDetail?: {
      taskCheckDO?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The status of the precheck. Valid values:

*   **WAITING**: The ticket is pending precheck.
*   **RUNNING**: The ticket is being prechecked.
*   **SUCCESS**: The ticket passes the precheck.
*   **FAIL**: The ticket fails the precheck.', example='SUCCESS'),
        checkStep?: string(name='CheckStep', description='The check step of the precheck. Valid values:

*   **SQL_PARSE**: The system checks the syntax of the SQL statement.
*   **SQL_TYPE_CHECK**: The system checks the type of the SQL statement.
*   **PERMISSION_CHECK**: The system checks the permissions required for the data change.
*   **ROW_CHECK**: The system checks the number of affected rows.', example='PERMISSION_CHECK'),
        userTip?: string(name='UserTip', description='The message that indicates a check step.', example='tip messsage'),
      }
    ](name='TaskCheckDO')
    }(name='PreCheckDetail', description='The precheck details of the ticket.'),
    status?: string(name='Status', description='The status of the ticket. Valid values:

- **new**: The ticket is created.
- **precheck**: The ticket is being prechecked.
- **precheck_fail**: The ticket fails the precheck.
- **precheck_success**: The ticket passes the precheck and waits to be submitted for approval.
- **toaudit**: The ticket is being reviewed.
- **Approved**: The ticket is approved.
- **reject**: The ticket is rejected.
- **waiting**: The ticket is submitted and waits to be scheduled.
- **processing**: The ticket is being executed.
- **success**: The ticket is executed.
- **closed**: The ticket is closed.', example='approved'),
  }(name='DataCorrectOrderDetail', description='The information about the data change ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
}

model GetDataCorrectOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCorrectOrderDetailResponseBody(name='body'),
}

async function getDataCorrectOrderDetailWithOptions(request: GetDataCorrectOrderDetailRequest, runtime: Util.RuntimeOptions): GetDataCorrectOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCorrectOrderDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCorrectOrderDetail(request: GetDataCorrectOrderDetailRequest): GetDataCorrectOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectOrderDetailWithOptions(request, runtime);
}

model GetDataCorrectRollbackFileRequest {
  orderId?: long(name='OrderId', example='3214325'),
  tid?: long(name='Tid', example='3***'),
}

model GetDataCorrectRollbackFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  fileUrl?: string(name='FileUrl', example='https://dmsxxx'),
  requestId?: string(name='RequestId', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectRollbackFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCorrectRollbackFileResponseBody(name='body'),
}

async function getDataCorrectRollbackFileWithOptions(request: GetDataCorrectRollbackFileRequest, runtime: Util.RuntimeOptions): GetDataCorrectRollbackFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCorrectRollbackFile',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCorrectRollbackFile(request: GetDataCorrectRollbackFileRequest): GetDataCorrectRollbackFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectRollbackFileWithOptions(request, runtime);
}

model GetDataCorrectSQLFileRequest {
  orderId?: long(name='OrderId', example='730000'),
  tid?: long(name='Tid', example='-1'),
}

model GetDataCorrectSQLFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  fileUrl?: string(name='FileUrl', example='https://dmsxxx'),
  requestId?: string(name='RequestId', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectSQLFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCorrectSQLFileResponseBody(name='body'),
}

/**
  * This interface applies to: [Common data change](~~58419~~) and [Batch Data import](~~144643~~) .
  *
  * @param request GetDataCorrectSQLFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDataCorrectSQLFileResponse
 */
async function getDataCorrectSQLFileWithOptions(request: GetDataCorrectSQLFileRequest, runtime: Util.RuntimeOptions): GetDataCorrectSQLFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCorrectSQLFile',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This interface applies to: [Common data change](~~58419~~) and [Batch Data import](~~144643~~) .
  *
  * @param request GetDataCorrectSQLFileRequest
  * @return GetDataCorrectSQLFileResponse
 */
async function getDataCorrectSQLFile(request: GetDataCorrectSQLFileRequest): GetDataCorrectSQLFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectSQLFileWithOptions(request, runtime);
}

model GetDataCorrectTaskDetailRequest {
  orderId?: long(name='OrderId', example='12435523'),
  tid?: long(name='Tid', example='14325432'),
}

model GetDataCorrectTaskDetailResponseBody = {
  dataCorrectTaskDetail?: {
    actualAffectRows?: long(name='ActualAffectRows', example='1'),
    createTime?: string(name='CreateTime', example='2021-03-05 15:08:55'),
    DBTaskGroupId?: long(name='DBTaskGroupId', example='1234235'),
    jobStatus?: string(name='jobStatus', example='SUCCESS'),
  }(name='DataCorrectTaskDetail'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCorrectTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCorrectTaskDetailResponseBody(name='body'),
}

async function getDataCorrectTaskDetailWithOptions(request: GetDataCorrectTaskDetailRequest, runtime: Util.RuntimeOptions): GetDataCorrectTaskDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCorrectTaskDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCorrectTaskDetail(request: GetDataCorrectTaskDetailRequest): GetDataCorrectTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCorrectTaskDetailWithOptions(request, runtime);
}

model GetDataCronClearConfigRequest {
  orderId?: long(name='OrderId', example='420****'),
  tid?: long(name='Tid', example='3***'),
}

model GetDataCronClearConfigResponseBody = {
  dataCronClearConfig?: {
    cronCallTimes?: string(name='CronCallTimes', example='2'),
    cronFormat?: string(name='CronFormat'),
    cronLastCallStartTime?: string(name='CronLastCallStartTime', example='2022-11-18 00:00:00'),
    cronNextCallTime?: string(name='CronNextCallTime', example='2022-11-19 00:00:00'),
    cronStatus?: string(name='CronStatus', example='PAUSE'),
    currentClearTaskCount?: long(name='CurrentClearTaskCount', example='0'),
    duration?: string(name='Duration', example='1'),
    optimizeTableAfterEveryClearTimes?: long(name='OptimizeTableAfterEveryClearTimes', example='0'),
  }(name='DataCronClearConfig'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  success?: boolean(name='Success', example='true'),
}

model GetDataCronClearConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCronClearConfigResponseBody(name='body'),
}

async function getDataCronClearConfigWithOptions(request: GetDataCronClearConfigRequest, runtime: Util.RuntimeOptions): GetDataCronClearConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCronClearConfig',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCronClearConfig(request: GetDataCronClearConfigRequest): GetDataCronClearConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCronClearConfigWithOptions(request, runtime);
}

model GetDataCronClearTaskDetailListRequest {
  orderId?: long(name='OrderId', example='432532'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  tid?: long(name='Tid', example='12345'),
}

model GetDataCronClearTaskDetailListResponseBody = {
  dataCronClearTaskDetailList?: [ 
    {
      actualAffectRows?: long(name='ActualAffectRows', example='1'),
      createTime?: string(name='CreateTime', example='2021-01-14 10:00:00'),
      DBTaskGroupId?: long(name='DBTaskGroupId', example='432523'),
      jobStatus?: string(name='jobStatus', example='SUCCESS'),
    }
  ](name='DataCronClearTaskDetailList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C1D39814-9808-47F8-AFE0-AF167239AC9B'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetDataCronClearTaskDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataCronClearTaskDetailListResponseBody(name='body'),
}

async function getDataCronClearTaskDetailListWithOptions(request: GetDataCronClearTaskDetailListRequest, runtime: Util.RuntimeOptions): GetDataCronClearTaskDetailListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataCronClearTaskDetailList',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataCronClearTaskDetailList(request: GetDataCronClearTaskDetailListRequest): GetDataCronClearTaskDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataCronClearTaskDetailListWithOptions(request, runtime);
}

model GetDataExportDownloadURLRequest {
  orderId?: long(name='OrderId', description='The ID of the ticket. You can call the [ListOrders](~~144643~~) operation to obtain the ticket ID.', example='546****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetDataExportDownloadURLResponseBody = {
  downloadURLResult?: {
    hasResult?: boolean(name='HasResult', description='Indicates whether export results are available for download. Valid values:

*   **true**: Export results are available for download.
*   **false**: No export results are available for download.', example='true'),
    tipMessage?: string(name='TipMessage', description='The message that indicates an exception.', example='tip message'),
    URL?: string(name='URL', description='The download URL of the file that records the export results for the ticket.', example='https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
  }(name='DownloadURLResult', description='The details about the download URL of the file that records the export results for the ticket.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4BF24EA5-9013-4C85-AE68-6C23AF5E0097'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetDataExportDownloadURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataExportDownloadURLResponseBody(name='body'),
}

async function getDataExportDownloadURLWithOptions(request: GetDataExportDownloadURLRequest, runtime: Util.RuntimeOptions): GetDataExportDownloadURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataExportDownloadURL',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataExportDownloadURL(request: GetDataExportDownloadURLRequest): GetDataExportDownloadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataExportDownloadURLWithOptions(request, runtime);
}

model GetDataExportOrderDetailRequest {
  orderId?: long(name='OrderId', example='123456'),
  tid?: long(name='Tid', example='-1'),
}

model GetDataExportOrderDetailResponseBody = {
  dataExportOrderDetail?: {
    keyInfo?: {
      jobStatus?: string(name='JobStatus', example='EXPORT_SUCCESS'),
      preCheckId?: long(name='PreCheckId', example='123'),
    }(name='KeyInfo'),
    orderDetail?: {
      actualAffectRows?: long(name='ActualAffectRows', example='1'),
      classify?: string(name='Classify', example='text'),
      database?: string(name='Database', example='xxx@xxx:3306'),
      dbId?: int32(name='DbId', example='123'),
      envType?: string(name='EnvType', example='test'),
      exeSQL?: string(name='ExeSQL', example='select 1'),
      ignoreAffectRows?: boolean(name='IgnoreAffectRows', example='false'),
      ignoreAffectRowsReason?: string(name='IgnoreAffectRowsReason', example='empty'),
      logic?: boolean(name='Logic', example='false'),
    }(name='OrderDetail'),
  }(name='DataExportOrderDetail'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model GetDataExportOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataExportOrderDetailResponseBody(name='body'),
}

async function getDataExportOrderDetailWithOptions(request: GetDataExportOrderDetailRequest, runtime: Util.RuntimeOptions): GetDataExportOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataExportOrderDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataExportOrderDetail(request: GetDataExportOrderDetailRequest): GetDataExportOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataExportOrderDetailWithOptions(request, runtime);
}

model GetDatabaseRequest {
  host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='192.168.XX.XX'),
  port?: int32(name='Port', description='The port that is used to connect to the database.', example='3306'),
  schemaName?: string(name='SchemaName', description='The name of the database.', example='mysql'),
  sid?: string(name='Sid', description='The system identifier (SID) of the database.

>  The SID uniquely identifies an Oracle database. After a database is created, a SID is generated for the database.', example='test_sid'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the ID of the tenant.', example='-1'),
}

model GetDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', description='The name of the catalog to which the database belongs.', example='def'),
    databaseId?: string(name='DatabaseId', description='The ID of the database.', example='984****'),
    dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='mysql'),
    dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA).', example='27****'),
    dbaName?: string(name='DbaName', description='The nickname of the DBA.', example='dba_name'),
    encoding?: string(name='Encoding', description='The encoding format of the database.', example='utf8mb4'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: SIT environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
    host?: string(name='Host', description='The endpoint that is used to connect to the database.', example='192.168.XX.XX'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='149****'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners of the database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The names of the owners of the database.'),
    port?: int32(name='Port', description='The port that is used to connect to the database.', example='3306'),
    schemaName?: string(name='SchemaName', description='The name of the database.', example='mysql'),
    searchName?: string(name='SearchName', description='The keyword that is used to search for the database.', example='mysql@192.168.XX.XX:3306'),
    sid?: string(name='Sid', description='The SID of the database.

>  The value of the parameter is returned only for Oracle databases.', example='test_sid'),
    state?: string(name='State', description='The status of the database. Valid values:

*   **NORMAL**: The database is running as expected.
*   **DISABLE**: The database is disabled.
*   **OFFLINE**: The database is unpublished.
*   **NOT_EXIST**: The database does not exist.', example='NORMAL'),
  }(name='Database', description='The details of the database.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='An unknown error occurred.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDatabaseResponseBody(name='body'),
}

async function getDatabaseWithOptions(request: GetDatabaseRequest, runtime: Util.RuntimeOptions): GetDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatabaseWithOptions(request, runtime);
}

model GetInstanceRequest {
  host?: string(name='Host', description='The endpoint of the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the endpoint.', example='172.17.XXX.XXX'),
  port?: int32(name='Port', description='The port number that is used to connect to the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the port number.', example='5432'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance. You can call the [ListInstances](~~141936~~) operation to obtain the SID.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='2***'),
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  instance?: {
    dataLinkName?: string(name='DataLinkName', description='The name of the database link for the database instance.', example='test'),
    databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database.', example='******'),
    databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database instance.', example='dbuser'),
    dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA) for the database instance.', example='29****'),
    dbaNickName?: string(name='DbaNickName', description='The nickname of the DBA for the database instance.', example='dbaname'),
    ddlOnline?: int32(name='DdlOnline', description='Indicates whether the lock-free schema change feature is enabled for the database instance.', example='0'),
    ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the Elastic Compute Service (ECS) instance on which the database instance is deployed.', example='i-bp124ldpklqz59y3****'),
    ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.', example='cn-beijing'),
    envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='test'),
    exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.', example='86400'),
    host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='192.168.XXX.XXX'),
    instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance.'),
    instanceId?: string(name='InstanceId', description='The ID of the database instance.', example='188****'),
    instanceSource?: string(name='InstanceSource', description='The source of the database instance.', example='ECS_OWN'),
    instanceType?: string(name='InstanceType', description='The type of the database instance.', example='postgresql'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners for the database instance.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The nicknames of the owners for the database instance.'),
    port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='5432'),
    queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.', example='7200'),
    safeRuleId?: string(name='SafeRuleId', description='The ID of the security rule set for the database instance.', example='3****'),
    sellSitd?: string(name='SellSitd', example='false'),
    sid?: string(name='Sid', description='The SID of the database instance.', example='test'),
    standardGroup?: {
      groupMode?: string(name='GroupMode', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='NONE_CONTROL'),
      groupName?: string(name='GroupName', description='The name of the security rule set corresponding to the control mode.'),
    }(name='StandardGroup', description='The control mode of the database instance.'),
    state?: string(name='State', description='The status of the database instance. Valid values:

*   **NORMAL**: normal
*   **DISABLE**: disabled', example='NORMAL'),
    useDsql?: int32(name='UseDsql', description='Indicates whether the cross-database query feature is enabled for the database instance. Valid values:

*   **0**: disabled
*   **1**: enabled', example='0'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the database instance belongs.', example='vpc-o6wrloqsdqc9io3mg****'),
  }(name='Instance', description='The details of the database instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6C80B69-3203-56AC-8021-18BA72A6F4E1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetIntervalLimitOfSLARequest {
  dagId?: long(name='DagId', example='11****'),
  tid?: long(name='Tid', example='3***'),
}

model GetIntervalLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  intervalLimit?: int32(name='IntervalLimit', example='59'),
  requestId?: string(name='RequestId', example='5B96E35F-A58E-5399-9041-09CF9A1E46EA'),
  success?: boolean(name='Success', example='true'),
}

model GetIntervalLimitOfSLAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIntervalLimitOfSLAResponseBody(name='body'),
}

async function getIntervalLimitOfSLAWithOptions(request: GetIntervalLimitOfSLARequest, runtime: Util.RuntimeOptions): GetIntervalLimitOfSLAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIntervalLimitOfSLA',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIntervalLimitOfSLA(request: GetIntervalLimitOfSLARequest): GetIntervalLimitOfSLAResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIntervalLimitOfSLAWithOptions(request, runtime);
}

model GetLhSpaceByNameRequest {
  spaceName?: string(name='SpaceName', description='The name of the workspace.', example='test_space'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3000'),
}

model GetLhSpaceByNameResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  lakehouseSpace?: {
    creatorId?: string(name='CreatorId', description='The ID of the user who creates the workspace.', example='51***'),
    description?: string(name='Description', description='The description of the workspace.', example='test'),
    devDbId?: int32(name='DevDbId', description='The ID of the development database.', example='2435****'),
    dwDbType?: string(name='DwDbType', description='The type of the database. Valid values:

*   **14**: AnalyticDB for MySQL
*   **18**: AnalyticDB for PostgreSQL', example='14'),
    id?: long(name='Id', description='The ID of the workspace.', example='1'),
    isDeleted?: boolean(name='IsDeleted', description='Indicates whether the workspace is deleted. Valid values:

*   **true**: The workspace is deleted.
*   **false**: The workspace is not deleted.', example='false'),
    mode?: int32(name='Mode', description='The mode in which the workspace runs. Valid values:

*   **0**: basic mode
*   **1**: standard mode', example='1'),
    prodDbId?: int32(name='ProdDbId', description='The ID of the production database.', example='2442****'),
    spaceConfig?: string(name='SpaceConfig', description='The configuration of the workspace. Valid values:

*   **skipManualRunCheck**: No security rule check is required in the trial run phase.
*   **skipPublishApprove**: No approval is required for publishing and O\\&M.', example='{\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}'),
    spaceName?: string(name='SpaceName', description='The name of the workspace.', example='test_space'),
    tenantId?: string(name='TenantId', description='The ID of the tenant to which the workspace belongs.', example='3***'),
  }(name='LakehouseSpace', description='The workspace for data warehouse development.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE8CA4A8-AB2D-55B7-BD30-01A4609F40D8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetLhSpaceByNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLhSpaceByNameResponseBody(name='body'),
}

/**
  * You are a DMS administrator or a database administrator (DBA).
  *
  * @param request GetLhSpaceByNameRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetLhSpaceByNameResponse
 */
async function getLhSpaceByNameWithOptions(request: GetLhSpaceByNameRequest, runtime: Util.RuntimeOptions): GetLhSpaceByNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.spaceName)) {
    query['SpaceName'] = request.spaceName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLhSpaceByName',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You are a DMS administrator or a database administrator (DBA).
  *
  * @param request GetLhSpaceByNameRequest
  * @return GetLhSpaceByNameResponse
 */
async function getLhSpaceByName(request: GetLhSpaceByNameRequest): GetLhSpaceByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLhSpaceByNameWithOptions(request, runtime);
}

model GetLogicDatabaseRequest {
  dbId?: string(name='DbId', description='The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to obtain the ID of the logical database.', example='1***'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.', example='3***'),
}

model GetLogicDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  logicDatabase?: {
    alias?: string(name='Alias', description='The alias of the logical database.', example='test_logic_alias'),
    databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1***'),
    databaseIds?: {
      databaseIds?: [ long ](name='DatabaseIds')
    }(name='DatabaseIds'),
    dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of the DbType parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).', example='polardb'),
    envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

- product: production environment
- dev: development environment
- pre: staging environment
- test: test environment
- sit: SIT environment
- uat: user acceptance testing (UAT) environment
- pet: stress testing environment
- stag: STAG environment', example='dev'),
    logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. The return value is true.', example='true'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList', description='The IDs of the owners of the logical database.'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList', description='The names of the owners of the logical database.'),
    schemaName?: string(name='SchemaName', description='The name of the logical database.', example='test_logic_db'),
    searchName?: string(name='SearchName', description='The name that is used to search for the logical database.', example='test_logic_db[test_logic_alias]'),
  }(name='LogicDatabase', description='The details about the logical database.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
}

model GetLogicDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogicDatabaseResponseBody(name='body'),
}

async function getLogicDatabaseWithOptions(request: GetLogicDatabaseRequest, runtime: Util.RuntimeOptions): GetLogicDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogicDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogicDatabase(request: GetLogicDatabaseRequest): GetLogicDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogicDatabaseWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the table in Data Management (DMS).

*   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](~~141875~~) operation to obtain the value of this parameter.
*   If the database to which the table belongs is a physical database, you can call the [ListTables](~~141878~~) operation to obtain the value of this parameter.', example='IDB_40753****.qntest2.activity_setting'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model GetMetaTableColumnResponseBody = {
  columnList?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the field is an auto-increment field. Valid values:

*   **true**: The field is an auto-increment field.
*   **false**: The field is not an auto-increment field.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the field.', example='63513****'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='has_promotion'),
      columnType?: string(name='ColumnType', description='The data type of the field.

>  The returned data type is not unique. For example, the returned data type can be **bigint** or **int**.', example='bigint(1)'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='0'),
      dataPrecision?: int32(name='DataPrecision', description='The precision of the field.', example='19'),
      dataScale?: int32(name='DataScale', description='The number of decimal places that the field shows.', example='0'),
      description?: string(name='Description', description='The description of the field.'),
      nullable?: boolean(name='Nullable', description='Indicates whether the field can be empty. Valid values:

*   **true**: The field can be empty.
*   **false**: The field cannot be empty.', example='false'),
      position?: int32(name='Position', description='The position of the field in the table.', example='1'),
      primaryKey?: string(name='PrimaryKey', description='Indicates whether the field is the primary key. Valid values:

*   **true**: The field is the primary key.
*   **false**: The field is not the primary key.', example='true'),
      securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   **INNER**: The field is not sensitive.
*   **SENSITIVE**: The field is sensitive.
*   **CONFIDENTIAL**: The field is confidential.

>  For more information, see [Sensitivity levels of fields](~~66091~~).', example='INNER'),
    }
  ](name='ColumnList', description='The details about fields in the table.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingTableGuid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='TableGuid is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='087DFBA1-378B-5D25-B13B-31F6409F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableColumn',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model GetMetaTableDetailInfoRequest {
  tableGuid?: string(name='TableGuid', example='IDB_L_9032.db-test.yuyang_test'),
  tid?: long(name='Tid', example='123'),
}

model GetMetaTableDetailInfoResponseBody = {
  detailInfo?: {
    columnList?: [ 
      {
        autoIncrement?: boolean(name='AutoIncrement', example='true'),
        columnId?: string(name='ColumnId', example='191234849'),
        columnName?: string(name='ColumnName', example='id'),
        columnType?: string(name='ColumnType', example='bigint(20) unsigned'),
        dataLength?: long(name='DataLength', example='0'),
        dataPrecision?: int32(name='DataPrecision', example='0'),
        dataScale?: int32(name='DataScale', example='0'),
        description?: string(name='Description', example='test'),
        nullable?: boolean(name='Nullable', example='false'),
        position?: string(name='Position', example='1'),
      }
    ](name='ColumnList'),
    indexList?: [ 
      {
        indexColumns?: [ string ](name='IndexColumns'),
        indexId?: string(name='IndexId', example='123'),
        indexName?: string(name='IndexName', example='PRIMARY'),
        indexType?: string(name='IndexType', example='Primary'),
        unique?: boolean(name='Unique', example='false'),
      }
    ](name='IndexList'),
  }(name='DetailInfo'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E881CB2F-DE42-42E5-90EB-8B3173DCB9B9'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableDetailInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableDetailInfoResponseBody(name='body'),
}

async function getMetaTableDetailInfoWithOptions(request: GetMetaTableDetailInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableDetailInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableDetailInfo',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableDetailInfo(request: GetMetaTableDetailInfoRequest): GetMetaTableDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableDetailInfoWithOptions(request, runtime);
}

model GetOnlineDDLProgressRequest {
  jobDetailId?: long(name='JobDetailId', example='15***'),
  tid?: long(name='Tid', example='3***'),
}

model GetOnlineDDLProgressResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  onlineDDLTaskDetail?: {
    cleanStrategy?: string(name='CleanStrategy', example='DROP'),
    copyChunkMode?: string(name='CopyChunkMode', example='AUTO'),
    copyChunkSize?: long(name='CopyChunkSize', example='1000'),
    copyCount?: long(name='CopyCount', example='9'),
    copyTotal?: long(name='CopyTotal', example='10'),
    cutoverFailRetryTimes?: long(name='CutoverFailRetryTimes', example='3'),
    cutoverLockTimeSeconds?: long(name='CutoverLockTimeSeconds', example='2'),
    cutoverWindowEndTime?: string(name='CutoverWindowEndTime', example='13:00:00'),
    cutoverWindowStartTime?: string(name='CutoverWindowStartTime', example='12:00:00'),
    delaySeconds?: long(name='DelaySeconds', example='0'),
    jobStatus?: string(name='JobStatus', example='SUCCESS'),
    progressRatio?: string(name='ProgressRatio', example='90%'),
    statusDesc?: string(name='StatusDesc', example='Success'),
  }(name='OnlineDDLTaskDetail'),
  requestId?: string(name='RequestId', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', example='true'),
}

model GetOnlineDDLProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOnlineDDLProgressResponseBody(name='body'),
}

async function getOnlineDDLProgressWithOptions(request: GetOnlineDDLProgressRequest, runtime: Util.RuntimeOptions): GetOnlineDDLProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobDetailId)) {
    query['JobDetailId'] = request.jobDetailId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOnlineDDLProgress',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOnlineDDLProgress(request: GetOnlineDDLProgressRequest): GetOnlineDDLProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOnlineDDLProgressWithOptions(request, runtime);
}

model GetOpLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.', example='2022-03-29 10:00:00'),
  module?: string(name='Module', description='The functional module for which you want to query operation logs. If you do not specify this parameter, operation logs for all functional modules are returned. Valid values:

*   **PERMISSION**: permissions
*   **OWNER**: data owner
*   **SQL_CONSOLE**: data query
*   **SQL_CONSOLE_EXPORT**: query result export
*   **DATA_CHANGE**: data change
*   **DATA_EXPORT**: data export
*   **SQL_REVIEW**: SQL review
*   **DT_SYNC**: database and table synchronization
*   **DT_DETAIL**: database and table details
*   **DB_TASK**: task management
*   **INSTANCE_MANAGE**: instance management
*   **USER_MANAGE**: user management
*   **SECURITY_RULE**: security rule
*   **CONFIG_MANAGE**: configuration management
*   **RESOURCE_AUTH**: resource authorization
*   **ACCESS_WHITE_IP**: access IP address allowlist', example='SECURITY_RULE'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30
*   50
*   100', example='30'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.', example='2022-03-23 10:00:00'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetOpLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  opLogDetails?: {
    opLogDetail?: [ 
    {
      database?: string(name='Database', description='The endpoint of the database instance.

> *   This parameter is valid only for database instances of the LocalInstance type.
*   This parameter is valid only for operations on the functional modules related to tasks.'),
      module?: string(name='Module', description='The functional module for which the operation log is queried.'),
      opContent?: string(name='OpContent', description='The details of the operation.', example='SELECT * FROM `orders` \\n LIMIT 20'),
      opTime?: string(name='OpTime', description='The time when the operation was performed.', example='2022-03-28 16:45:19'),
      opUserId?: long(name='OpUserId', description='The ID of the user who performed the operation.', example='51****'),
      orderId?: long(name='OrderId', description='The ID of the ticket or task.

>  This parameter is valid only for operations on the functional modules related to tasks and the task management module in system management.', example='509****'),
      userId?: string(name='UserId', description='The UID of the Alibaba Cloud account.', example='22275482072787****'),
      userNick?: string(name='UserNick', description='The display name of the user.', example='test_name'),
    }
  ](name='OpLogDetail')
  }(name='OpLogDetails', description='The details of the operation log.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='47D56208-DB1D-4FD3-BE32-300E43185488'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of operation logs that are returned.', example='1'),
}

model GetOpLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpLogResponseBody(name='body'),
}

/**
  * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain your user role from the RoleIdList parameter that is returned.
  *
  * @param request GetOpLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetOpLogResponse
 */
async function getOpLogWithOptions(request: GetOpLogRequest, runtime: Util.RuntimeOptions): GetOpLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.module)) {
    query['Module'] = request.module;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain your user role from the RoleIdList parameter that is returned.
  *
  * @param request GetOpLogRequest
  * @return GetOpLogResponse
 */
async function getOpLog(request: GetOpLogRequest): GetOpLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpLogWithOptions(request, runtime);
}

model GetOrderAttachmentFileRequest {
  orderId?: long(name='OrderId', example='1234'),
  tid?: long(name='Tid', example='3***'),
}

model GetOrderAttachmentFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  fileUrl?: string(name='FileUrl', example='https://dmsxxx'),
  requestId?: string(name='RequestId', example='FE8EE2F1-4880-46BC-A704-5CF63EAF9A04'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderAttachmentFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrderAttachmentFileResponseBody(name='body'),
}

async function getOrderAttachmentFileWithOptions(request: GetOrderAttachmentFileRequest, runtime: Util.RuntimeOptions): GetOrderAttachmentFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrderAttachmentFile',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrderAttachmentFile(request: GetOrderAttachmentFileRequest): GetOrderAttachmentFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderAttachmentFileWithOptions(request, runtime);
}

model GetOrderBaseInfoRequest {
  orderId?: long(name='OrderId', example='12345'),
  tid?: long(name='Tid', example='-1'),
}

model GetOrderBaseInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  orderBaseInfo?: {
    comment?: string(name='Comment', example='test'),
    committer?: string(name='Committer', example='xxx'),
    committerId?: long(name='CommitterId', example='1'),
    createTime?: string(name='CreateTime', example='2019-10-10 00:00:00'),
    lastModifyTime?: string(name='LastModifyTime', example='2019-10-10 00:00:00'),
    orderId?: long(name='OrderId', example='12345'),
    pluginType?: string(name='PluginType', example='DC_COMMON'),
    relatedUserList?: {
      userIds?: [ string ](name='UserIds')
    }(name='RelatedUserList'),
    relatedUserNickList?: {
      userNicks?: [ string ](name='UserNicks')
    }(name='RelatedUserNickList'),
    statusCode?: string(name='StatusCode', example='success'),
    statusDesc?: string(name='StatusDesc', example='success'),
    workflowInstanceId?: long(name='WorkflowInstanceId', example='1'),
    workflowStatusDesc?: string(name='WorkflowStatusDesc', example='approved'),
  }(name='OrderBaseInfo'),
  requestId?: string(name='RequestId', example='7133DF67-5B25-460F-8285-C4CC93472C2F'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrderBaseInfoResponseBody(name='body'),
}

async function getOrderBaseInfoWithOptions(request: GetOrderBaseInfoRequest, runtime: Util.RuntimeOptions): GetOrderBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrderBaseInfo',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrderBaseInfo(request: GetOrderBaseInfoRequest): GetOrderBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderBaseInfoWithOptions(request, runtime);
}

model GetOwnerApplyOrderDetailRequest {
  orderId?: long(name='OrderId', example='730000'),
  tid?: long(name='Tid', example='-1'),
}

model GetOwnerApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  ownerApplyOrderDetail?: {
    applyType?: string(name='ApplyType', example='DB'),
    resources?: [ 
      {
        logic?: boolean(name='Logic', example='true'),
        resourceDetail?: {
          dbType?: string(name='DbType', example='MYSQL'),
          envType?: string(name='EnvType', example='PRODUCT'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
          searchName?: string(name='SearchName', example='yuyang【test】'),
          tableName?: string(name='TableName', example='test'),
        }(name='ResourceDetail'),
        targetId?: string(name='TargetId', example='12345'),
      }
    ](name='Resources'),
  }(name='OwnerApplyOrderDetail'),
  requestId?: string(name='RequestId', example='CB784055-E8CB-4461-AB0B-483A1DA32BB5'),
  success?: boolean(name='Success', example='true'),
}

model GetOwnerApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOwnerApplyOrderDetailResponseBody(name='body'),
}

async function getOwnerApplyOrderDetailWithOptions(request: GetOwnerApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetOwnerApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOwnerApplyOrderDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOwnerApplyOrderDetail(request: GetOwnerApplyOrderDetailRequest): GetOwnerApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOwnerApplyOrderDetailWithOptions(request, runtime);
}

model GetPermApplyOrderDetailRequest {
  orderId?: long(name='OrderId', example='730000'),
  tid?: long(name='Tid', example='-1'),
}

model GetPermApplyOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  permApplyOrderDetail?: {
    applyType?: string(name='ApplyType', example='DB'),
    permType?: long(name='PermType', example='7'),
    resources?: [ 
      {
        columnInfo?: {
          columnName?: string(name='ColumnName', example='test_col'),
          tableName?: string(name='TableName', example='test_tb'),
        }(name='ColumnInfo'),
        databaseInfo?: {
          dbId?: long(name='DbId', example='12345'),
          dbType?: string(name='DbType', example='MySQL'),
          envType?: string(name='EnvType', example='product'),
          logic?: boolean(name='Logic', example='false'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickNames?: [ string ](name='OwnerNickNames'),
          searchName?: string(name='SearchName', example='test@xxxx:3306【test】'),
        }(name='DatabaseInfo'),
        instanceInfo?: {
          dbType?: string(name='DbType', example='MySQL'),
          dbaId?: long(name='DbaId', example='12345'),
          dbaNickName?: string(name='DbaNickName', example='test_dba'),
          envType?: string(name='EnvType', example='product'),
          host?: string(name='Host', example='xxxx'),
          instanceId?: string(name='InstanceId', example='12345'),
          ownerIds?: [ long ](name='OwnerIds'),
          ownerNickName?: [ string ](name='OwnerNickName'),
          port?: long(name='Port', example='3306'),
          searchName?: string(name='SearchName', example='xxxx:3306'),
        }(name='InstanceInfo'),
        tableInfo?: {
          tableName?: string(name='TableName', example='test_tb'),
        }(name='TableInfo'),
      }
    ](name='Resources'),
    seconds?: long(name='Seconds', example='3600'),
  }(name='PermApplyOrderDetail'),
  requestId?: string(name='RequestId', example='A4C4499E-5AC2-4318-9FCF-03E426781A04'),
  success?: boolean(name='Success', example='true'),
}

model GetPermApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPermApplyOrderDetailResponseBody(name='body'),
}

/**
  * This interface is applicable to obtaining: **Database-permission** , **Table-permissions** , **sensitive column-permission** .
  *
  * @param request GetPermApplyOrderDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetPermApplyOrderDetailResponse
 */
async function getPermApplyOrderDetailWithOptions(request: GetPermApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermApplyOrderDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This interface is applicable to obtaining: **Database-permission** , **Table-permissions** , **sensitive column-permission** .
  *
  * @param request GetPermApplyOrderDetailRequest
  * @return GetPermApplyOrderDetailResponse
 */
async function getPermApplyOrderDetail(request: GetPermApplyOrderDetailRequest): GetPermApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermApplyOrderDetailWithOptions(request, runtime);
}

model GetPhysicalDatabaseRequest {
  dbId?: long(name='DbId', example='43153'),
  tid?: long(name='Tid', example='1'),
}

model GetPhysicalDatabaseResponseBody = {
  database?: {
    catalogName?: string(name='CatalogName', example='def'),
    databaseId?: string(name='DatabaseId', example='43125312'),
    dbType?: string(name='DbType', example='mysql'),
    dbaId?: string(name='DbaId', example='43253'),
    dbaName?: string(name='DbaName', example='dmstest'),
    encoding?: string(name='Encoding', example='utf8mb4'),
    envType?: string(name='EnvType', example='product'),
    host?: string(name='Host', example='rm-xxxab3r272.mysql.rds.aliyuncs.com'),
    instanceId?: string(name='InstanceId', example='43215325'),
    ownerIdList?: {
      ownerIds?: [ string ](name='OwnerIds')
    }(name='OwnerIdList'),
    ownerNameList?: {
      ownerNames?: [ string ](name='OwnerNames')
    }(name='OwnerNameList'),
    port?: int32(name='Port', example='3306'),
    schemaName?: string(name='SchemaName', example='dmstest'),
    searchName?: string(name='SearchName', example='dmstest@rm-xxxab3r272.mysql.rds.aliyuncs.com:3306'),
    sid?: string(name='Sid', example='def'),
    state?: string(name='State', example='NORMAL'),
  }(name='Database'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model GetPhysicalDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhysicalDatabaseResponseBody(name='body'),
}

async function getPhysicalDatabaseWithOptions(request: GetPhysicalDatabaseRequest, runtime: Util.RuntimeOptions): GetPhysicalDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhysicalDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPhysicalDatabase(request: GetPhysicalDatabaseRequest): GetPhysicalDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhysicalDatabaseWithOptions(request, runtime);
}

model GetProxyRequest {
  instanceId?: long(name='InstanceId', description='The ID of the database instance. You can call the [ListInstances](https://www.alibabacloud.com/help/en/data-management-service/latest/listinstances) or [GetInstance](https://www.alibabacloud.com/help/en/data-management-service/latest/getinstance) operation to query the database instance ID.', example='183****'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) operation to query the ID of the secure access proxy.', example='4**'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***'),
}

model GetProxyResponseBody = {
  creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
  creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The condition cannot be empty!'),
  httpsPort?: int32(name='HttpsPort', description='The port that was used by HTTPS clients to connect to the database instance.', example='443'),
  instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='183****'),
  privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint is enabled. Default value: **true**.', example='true'),
  privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
  protocolPort?: int32(name='ProtocolPort', example='3306'),
  protocolType?: string(name='ProtocolType', example='MYSQL'),
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
  publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint is enabled. Valid values:

- **true**: The public endpoint is enabled.
- **false**: The public endpoint is disabled.', example='true'),
  publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.  

> - If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS (DNS) is returned.
- If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using DNS is returned.', example='dphzmy-5j8oimjsz6zed7k****.proxy.dms.aliyuncs.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F49D4598-2B3C-5723-865E-2CCB818E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model GetProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProxyResponseBody(name='body'),
}

async function getProxyWithOptions(request: GetProxyRequest, runtime: Util.RuntimeOptions): GetProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProxy',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProxy(request: GetProxyRequest): GetProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProxyWithOptions(request, runtime);
}

model GetProxyAccessRequest {
  proxyAccessId?: long(name='ProxyAccessId', example='1'),
  tid?: long(name='Tid', example='3***'),
}

model GetProxyAccessResponseBody = {
  errorCode?: string(name='ErrorCode', example='UserNotExist'),
  errorMessage?: string(name='ErrorMessage', example='The specified user not exists.'),
  proxyAccess?: {
    accessId?: string(name='AccessId', example='hObpgEXoca42q***'),
    gmtCreate?: string(name='GmtCreate', example='1643034647'),
    indepAccount?: string(name='IndepAccount', example='***'),
    instanceId?: long(name='InstanceId', example='1922545'),
    originInfo?: string(name='OriginInfo'),
    proxyAccessId?: long(name='ProxyAccessId', example='2002'),
    proxyId?: long(name='ProxyId', example='1905'),
    userId?: long(name='UserId', example='12***'),
    userName?: string(name='UserName', example='user'),
    userUid?: string(name='UserUid', example='25936669186260****'),
  }(name='ProxyAccess'),
  requestId?: string(name='RequestId', description='Id of the request', example='3CDB8601-AD74-4A47-8114-08E08CD6****'),
  success?: boolean(name='Success', example='true'),
}

model GetProxyAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProxyAccessResponseBody(name='body'),
}

async function getProxyAccessWithOptions(request: GetProxyAccessRequest, runtime: Util.RuntimeOptions): GetProxyAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.proxyAccessId)) {
    query['ProxyAccessId'] = request.proxyAccessId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProxyAccess',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProxyAccess(request: GetProxyAccessRequest): GetProxyAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProxyAccessWithOptions(request, runtime);
}

model GetRuleNumLimitOfSLARequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='11****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
}

model GetRuleNumLimitOfSLAResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  ruleNumLimit?: int32(name='RuleNumLimit', description='The maximum number of SLA rules.', example='12'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model GetRuleNumLimitOfSLAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleNumLimitOfSLAResponseBody(name='body'),
}

async function getRuleNumLimitOfSLAWithOptions(request: GetRuleNumLimitOfSLARequest, runtime: Util.RuntimeOptions): GetRuleNumLimitOfSLAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRuleNumLimitOfSLA',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRuleNumLimitOfSLA(request: GetRuleNumLimitOfSLARequest): GetRuleNumLimitOfSLAResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleNumLimitOfSLAWithOptions(request, runtime);
}

model GetSQLReviewCheckResultStatusRequest {
  orderId?: long(name='OrderId', example='123321'),
  tid?: long(name='Tid', example='1'),
}

model GetSQLReviewCheckResultStatusResponseBody = {
  checkResultStatus?: {
    checkStatusResult?: {
      checkNotPass?: long(name='CheckNotPass', example='1'),
      checkPass?: long(name='CheckPass', example='8'),
      forceNotPass?: long(name='ForceNotPass', example='0'),
      forcePass?: long(name='ForcePass', example='1'),
      new?: long(name='New', example='0'),
      unknown?: long(name='Unknown', example='0'),
    }(name='CheckStatusResult'),
    checkedCount?: long(name='CheckedCount', example='10'),
    SQLReviewResult?: {
      mustImprove?: long(name='MustImprove', example='1'),
      potentialIssue?: long(name='PotentialIssue', example='0'),
      suggestImprove?: long(name='SuggestImprove', example='3'),
      tableIndexSuggest?: long(name='TableIndexSuggest', example='2'),
      useDmsDmlUnlock?: long(name='UseDmsDmlUnlock', example='0'),
      useDmsToolkit?: long(name='UseDmsToolkit', example='0'),
    }(name='SQLReviewResult'),
    totalSQLCount?: long(name='TotalSQLCount', example='10'),
  }(name='CheckResultStatus'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', example='true'),
}

model GetSQLReviewCheckResultStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSQLReviewCheckResultStatusResponseBody(name='body'),
}

/**
  * For more instructions on this feature, see [SQL audit](~~60374~~) .
  *
  * @param request GetSQLReviewCheckResultStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSQLReviewCheckResultStatusResponse
 */
async function getSQLReviewCheckResultStatusWithOptions(request: GetSQLReviewCheckResultStatusRequest, runtime: Util.RuntimeOptions): GetSQLReviewCheckResultStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSQLReviewCheckResultStatus',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more instructions on this feature, see [SQL audit](~~60374~~) .
  *
  * @param request GetSQLReviewCheckResultStatusRequest
  * @return GetSQLReviewCheckResultStatusResponse
 */
async function getSQLReviewCheckResultStatus(request: GetSQLReviewCheckResultStatusRequest): GetSQLReviewCheckResultStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSQLReviewCheckResultStatusWithOptions(request, runtime);
}

model GetSQLReviewOptimizeDetailRequest {
  SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The key that is used to query the details of optimization suggestions. You can call the [ListSQLReviewOriginSQL](~~257870~~) operation to query the key.', example='a57e54ec5433475ea3082d882fdb****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the ID of the tenant.', example='1'),
}

model GetSQLReviewOptimizeDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  optimizeDetail?: {
    dbId?: int32(name='DbId', description='The ID of the database.', example='111222'),
    instanceId?: int32(name='InstanceId', description='The ID of the instance to which the database belongs.', example='123321'),
    qualityResult?: {
      errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='syntax error'),
      occurError?: boolean(name='OccurError', description='Indicates whether an error occurs. Valid values:

*   **true**: An error occurs.
*   **false**: No error occurs.', example='false'),
      results?: [ 
        {
          comments?: string(name='Comments', description='The comment that is specified when you create the SQL review rule. For more information, see [SQL review optimization](~~194114~~).'),
          feedback?: string(name='Feedback', description='The optimization suggestion for the SQL statement. Valid values:

*   **MUST_IMPROVE**: The SQL statement must be improved.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
*   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
*   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLEINDEXSUGGEST**: We recommend that you use SQL statements that use indexes.', example='MUST_IMPROVE'),
          messages?: [ string ](name='Messages', description='The review results.'),
          ruleName?: string(name='RuleName', description='The name of the rule. For more information, see [SQL review optimization](~~194114~~).', example='SELECT_SUGGEST_ASSIGN_WHERE'),
          ruleType?: string(name='RuleType', description='The type of the SQL review rule. Valid values:

*   **REVIEW**: a rule that is used to review SQL statements based on standards.
*   **OPTIMIZE**: a rule that is used to provide optimization suggestions.', example='REVIEW'),
          scripts?: [ 
            {
              content?: string(name='Content', description='The content of the SQL script.', example='alter table xxx add index idx_xx(yyy);'),
              opType?: string(name='OpType', description='The purpose of the SQL script. The value is set to AddIndex.', example='AddIndex'),
              tableName?: string(name='TableName', description='The name of the table.', example='xxx'),
            }
          ](name='Scripts', description='The SQL script for data changes.'),
        }
      ](name='Results', description='The review results based on rules.'),
    }(name='QualityResult', description='The quality of the SQL statement.'),
    queryKey?: string(name='QueryKey', description='The key that is used to query the details of optimization suggestions.', example='a57e54ec5433475ea3082d882fdb****'),
    sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values: DELETE, UPDATE, and ALTER_TABLE.', example='UPDATE'),
  }(name='OptimizeDetail', description='The details of optimization suggestions for SQL statements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetSQLReviewOptimizeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSQLReviewOptimizeDetailResponseBody(name='body'),
}

/**
  * For more information about the SQL review feature, see [SQL review](https://icms.alibaba-inc.com/content/dms/doc?l=1\\&m=61777\\&n=2433364).
  *
  * @param request GetSQLReviewOptimizeDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSQLReviewOptimizeDetailResponse
 */
async function getSQLReviewOptimizeDetailWithOptions(request: GetSQLReviewOptimizeDetailRequest, runtime: Util.RuntimeOptions): GetSQLReviewOptimizeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.SQLReviewQueryKey)) {
    query['SQLReviewQueryKey'] = request.SQLReviewQueryKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSQLReviewOptimizeDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the SQL review feature, see [SQL review](https://icms.alibaba-inc.com/content/dms/doc?l=1\\&m=61777\\&n=2433364).
  *
  * @param request GetSQLReviewOptimizeDetailRequest
  * @return GetSQLReviewOptimizeDetailResponse
 */
async function getSQLReviewOptimizeDetail(request: GetSQLReviewOptimizeDetailRequest): GetSQLReviewOptimizeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSQLReviewOptimizeDetailWithOptions(request, runtime);
}

model GetStructSyncExecSqlDetailRequest {
  orderId?: long(name='OrderId', example='342153'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  tid?: long(name='Tid', example='1'),
}

model GetStructSyncExecSqlDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', description='Id of the request', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncExecSqlDetail?: {
    execSql?: string(name='ExecSql'),
    totalSqlCount?: long(name='TotalSqlCount', example='1'),
  }(name='StructSyncExecSqlDetail'),
  success?: boolean(name='Success', example='true'),
}

model GetStructSyncExecSqlDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStructSyncExecSqlDetailResponseBody(name='body'),
}

async function getStructSyncExecSqlDetailWithOptions(request: GetStructSyncExecSqlDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncExecSqlDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStructSyncExecSqlDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStructSyncExecSqlDetail(request: GetStructSyncExecSqlDetailRequest): GetStructSyncExecSqlDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncExecSqlDetailWithOptions(request, runtime);
}

model GetStructSyncJobAnalyzeResultRequest {
  compareType?: string(name='CompareType', example='CREATE_TABLE'),
  orderId?: long(name='OrderId', example='1342355'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  tid?: long(name='Tid', example='1'),
}

model GetStructSyncJobAnalyzeResultResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='1810E635-A2D7-428B-BAA9-85DAEB9B1A77'),
  structSyncJobAnalyzeResult?: {
    resultList?: [ 
      {
        script?: string(name='Script'),
        sourceTableName?: string(name='SourceTableName', example='helloz_bak'),
        targetTableName?: string(name='TargetTableName', example='helloz_bak'),
      }
    ](name='ResultList'),
    summaryList?: [ 
      {
        compareType?: string(name='CompareType', example='CREATE_TABLE'),
        count?: long(name='Count', example='1'),
      }
    ](name='SummaryList'),
  }(name='StructSyncJobAnalyzeResult'),
  success?: boolean(name='Success', example='true'),
}

model GetStructSyncJobAnalyzeResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStructSyncJobAnalyzeResultResponseBody(name='body'),
}

async function getStructSyncJobAnalyzeResultWithOptions(request: GetStructSyncJobAnalyzeResultRequest, runtime: Util.RuntimeOptions): GetStructSyncJobAnalyzeResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.compareType)) {
    query['CompareType'] = request.compareType;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStructSyncJobAnalyzeResult',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStructSyncJobAnalyzeResult(request: GetStructSyncJobAnalyzeResultRequest): GetStructSyncJobAnalyzeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncJobAnalyzeResultWithOptions(request, runtime);
}

model GetStructSyncJobDetailRequest {
  orderId?: long(name='OrderId', description='The ID of the ticket.', example='4324321'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](~~181330~~).', example='1'),
}

model GetStructSyncJobDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  structSyncJobDetail?: {
    DBTaskGroupId?: long(name='DBTaskGroupId', description='The ID of the task queue.', example='12345'),
    executeCount?: long(name='ExecuteCount', description='The number of SQL statements that have been executed.', example='1'),
    jobStatus?: string(name='JobStatus', description='The status of the task. Valid values:

*   **NEW**: The task was created.
*   **COMPARING**: The schemas of tables were being compared.
*   **COMPARE_BREAK**: The schema comparison was interrupted.
*   **COMPARE_FINISH**: The schema comparison was complete.
*   **NOT_SCRIPTS**: The schema comparison was complete. No scripts were available.
*   **SUBMITED_DBTASK**: The task was submitted.
*   **DBTASK_SUCCESS**: The task was complete.
*   **SUBMITED_WORKFLOW**: The ticket was submitted for approval.
*   **WORKFLOW_SUCCESS**: The ticket was approved.', example='DBTASK_SUCCESS'),
    message?: string(name='Message', description='The description of the task.', example='test'),
    securityRule?: string(name='SecurityRule', description='The type of security rule. Valid values:

*   **CANNOT_SYNC**: The schema synchronization is not allowed.
*   **WITH_APPROVE**: The schema synchronization can be performed after the ticket is approved. You can call the [SubmitStructSyncOrderApproval](~~206166~~) operation to submit the ticket for approval.
*   **WITHOUT_APPROVE**: The schema synchronization can be performed without approval.', example='WITHOUT_APPROVE'),
    sqlCount?: long(name='SqlCount', description='The total number of SQL statements.', example='1'),
    tableAnalyzed?: long(name='TableAnalyzed', description='The number of tables that have been analyzed.', example='2'),
    tableCount?: long(name='TableCount', description='The total number of tables.', example='2'),
  }(name='StructSyncJobDetail', description='The details of the schema synchronization task.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model GetStructSyncJobDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStructSyncJobDetailResponseBody(name='body'),
}

async function getStructSyncJobDetailWithOptions(request: GetStructSyncJobDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStructSyncJobDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStructSyncJobDetail(request: GetStructSyncJobDetailRequest): GetStructSyncJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncJobDetailWithOptions(request, runtime);
}

model GetStructSyncOrderDetailRequest {
  orderId?: long(name='OrderId', example='432553'),
  tid?: long(name='Tid', example='1'),
}

model GetStructSyncOrderDetailResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471A'),
  structSyncOrderDetail?: {
    ignoreError?: boolean(name='IgnoreError', example='false'),
    sourceDatabaseInfo?: {
      dbId?: long(name='DbId', example='432532'),
      dbType?: string(name='DbType', example='MySQL'),
      envType?: string(name='EnvType', example='dev'),
      logic?: boolean(name='Logic', example='false'),
      searchName?: string(name='SearchName', example='test'),
    }(name='SourceDatabaseInfo'),
    sourceType?: string(name='SourceType', example='VERSION'),
    sourceVersionInfo?: {
      versionId?: string(name='VersionId', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='SourceVersionInfo'),
    tableInfoList?: [ 
      {
        sourceTableName?: string(name='SourceTableName', example='test_tbl'),
        targetTableName?: string(name='TargetTableName', example='test_tbl'),
      }
    ](name='TableInfoList'),
    targetDatabaseInfo?: {
      dbId?: long(name='DbId', example='432543'),
      dbType?: string(name='DbType', example='MySQL'),
      envType?: string(name='EnvType', example='dev'),
      logic?: boolean(name='Logic', example='false'),
      searchName?: string(name='SearchName', example='test'),
    }(name='TargetDatabaseInfo'),
    targetType?: string(name='TargetType', example='DATASOURCE'),
    targetVersionInfo?: {
      versionId?: string(name='VersionId', example='e179bbb8163dcdcfacda24858bedb4d8006ae2b8'),
    }(name='TargetVersionInfo'),
  }(name='StructSyncOrderDetail'),
  success?: boolean(name='Success', example='true'),
}

model GetStructSyncOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStructSyncOrderDetailResponseBody(name='body'),
}

async function getStructSyncOrderDetailWithOptions(request: GetStructSyncOrderDetailRequest, runtime: Util.RuntimeOptions): GetStructSyncOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStructSyncOrderDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStructSyncOrderDetail(request: GetStructSyncOrderDetailRequest): GetStructSyncOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStructSyncOrderDetailWithOptions(request, runtime);
}

model GetTableDBTopologyRequest {
  tableGuid?: string(name='TableGuid', example='IDB_L_9032.db-test.yuyang_test'),
  tid?: long(name='Tid', example='1'),
}

model GetTableDBTopologyResponseBody = {
  DBTopology?: {
    dataSourceList?: [ 
      {
        databaseList?: [ 
          {
            dbId?: string(name='DbId', example='489347'),
            dbName?: string(name='DbName', example='db-test'),
            dbType?: string(name='DbType', example='MySQL'),
            envType?: string(name='EnvType', example='pre'),
            tableList?: [ 
              {
                tableId?: string(name='TableId', example='NORMAL'),
                tableName?: string(name='TableName', example='151977812'),
                tableType?: string(name='TableType', example='yuyang_test_0000'),
              }
            ](name='TableList'),
          }
        ](name='DatabaseList'),
        dbType?: string(name='DbType', example='MySQL'),
        host?: string(name='Host', example='xxx.mysql.polardb.rds.aliyuncs.com'),
        port?: int32(name='Port', example='3306'),
        sid?: string(name='Sid', example='def'),
      }
    ](name='DataSourceList'),
    tableGuid?: string(name='TableGuid', example='IDB_L_9032.db-test.yuyang_test'),
    tableName?: string(name='TableName', example='yuyang_test'),
  }(name='DBTopology'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='853F7FD4-D922-4EFB-931C-D253EF159E06'),
  success?: boolean(name='Success', example='true'),
}

model GetTableDBTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTableDBTopologyResponseBody(name='body'),
}

async function getTableDBTopologyWithOptions(request: GetTableDBTopologyRequest, runtime: Util.RuntimeOptions): GetTableDBTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTableDBTopology',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTableDBTopology(request: GetTableDBTopologyRequest): GetTableDBTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTableDBTopologyWithOptions(request, runtime);
}

model GetTableTopologyRequest {
  tableGuid?: string(name='TableGuid', example='IDB_L_308302.yuyang_test.test_ch'),
  tid?: long(name='Tid', example='1'),
}

model GetTableTopologyResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F5ED6A40-F344-4C7D-A8F0-5685CA584CA7'),
  success?: boolean(name='Success', example='true'),
  tableTopology?: {
    logic?: boolean(name='Logic', example='true'),
    tableGuid?: string(name='TableGuid', example='IDB_L_308302.yuyang_test.test_ch'),
    tableName?: string(name='TableName', example='test_ch'),
    tableTopologyInfoList?: [ 
      {
        dbId?: long(name='DbId', example='43215'),
        dbName?: string(name='DbName', example='yuyang_test'),
        dbSearchName?: string(name='DbSearchName', example='yuyang_test@localhost:3306【yuyang_test_dev】'),
        dbType?: string(name='DbType', example='mysql'),
        instanceId?: long(name='InstanceId', example='4325325'),
        instanceResourceId?: string(name='InstanceResourceId', example='rm-xxx'),
        instanceSource?: string(name='InstanceSource', example='RDS'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        tableCount?: long(name='TableCount', example='6'),
        tableNameExpr?: string(name='TableNameExpr', example='test_ch_[0000-0005]'),
        tableNameList?: string(name='TableNameList', example='test_ch_0000,test_ch_0001,test_ch_0002,test_ch_0003,test_ch_0004,test_ch_0005'),
      }
    ](name='TableTopologyInfoList'),
  }(name='TableTopology'),
}

model GetTableTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTableTopologyResponseBody(name='body'),
}

async function getTableTopologyWithOptions(request: GetTableTopologyRequest, runtime: Util.RuntimeOptions): GetTableTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTableTopology',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTableTopology(request: GetTableTopologyRequest): GetTableTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTableTopologyWithOptions(request, runtime);
}

model GetTaskRequest {
  nodeId?: long(name='NodeId', example='51***'),
  tid?: long(name='Tid', example='3***'),
}

model GetTaskResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7838266C-E17B-58F4-B072-4DC356B58258'),
  success?: boolean(name='Success', example='true'),
  task?: {
    dagId?: long(name='DagId', example='7321'),
    graphParam?: string(name='GraphParam', example='{"{\\"x\\":0,\\"y\\":0,\\"layoutType\\":\\"Horizontal\\"}",  "id": 51***}'),
    nodeConfig?: string(name='NodeConfig'),
    nodeContent?: string(name='NodeContent', example='{\\"dbList\\":[{\\"instanceId\\":177****}"   }'),
    nodeName?: string(name='NodeName'),
    nodeOutput?: string(name='NodeOutput', example='{ "outputs":[ "extractMethod":"json" , "variableName":"var",   "description":"demo desc" } ] }'),
    nodeType?: string(name='NodeType', example='SPARK_SQL'),
    timeVariables?: string(name='TimeVariables', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
  }(name='Task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTaskFlowGraphRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model GetTaskFlowGraphResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9D91166-A626-5F4E-9CA6-7AB10C59DBD8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  taskFlowGraph?: {
    canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow is editable. Valid values:

- **true**: editable
- **false**: non-editable', example='true'),
    dagName?: string(name='DagName', description='The name of the task flow.', example='test'),
    edges?: {
      edge?: [ 
      {
        dagId?: long(name='DagId', description='The ID of the task flow.', example='15***'),
        id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
        nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
        nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
      }
    ](name='Edge')
    }(name='Edges', description='The list of task flow edges.'),
    nodes?: {
      node?: [ 
      {
        dagId?: long(name='DagId', description='The ID of the task flow.', example='15***'),
        graphParam?: string(name='GraphParam', description='The position of the node in the DAG.', example='{\\"x\\":541,\\"y\\":322,\\"layoutType\\":\\"Horizontal\\"}'),
        nodeConfig?: string(name='NodeConfig', description='The advanced configuration of the node.'),
        nodeContent?: string(name='NodeContent', description='The configuration of the node.', example='{ODI3OTNRVC****UHVFT29"}'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='44***'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test'),
        nodeType?: long(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='36'),
        timeVariables?: string(name='TimeVariables', description='The time variables for the node.', example='{\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}'),
      }
    ](name='Node')
    }(name='Nodes', description='The node list of the task flow.'),
    status?: long(name='Status', description='The status of the task flow. Valid values:

- **0**: invalid
- **1**: not scheduled
- **2**: to be scheduled', example='2'),
  }(name='TaskFlowGraph', description='The list of DAG variables of the task flow.'),
}

model GetTaskFlowGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskFlowGraphResponseBody(name='body'),
}

async function getTaskFlowGraphWithOptions(request: GetTaskFlowGraphRequest, runtime: Util.RuntimeOptions): GetTaskFlowGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskFlowGraph',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskFlowGraph(request: GetTaskFlowGraphRequest): GetTaskFlowGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskFlowGraphWithOptions(request, runtime);
}

model GetTaskFlowNotificationRequest {
  dagId?: long(name='DagId', example='15***'),
  tid?: long(name='Tid', example='3***'),
}

model GetTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  notification?: {
    dagNotificationFail?: boolean(name='DagNotificationFail', example='true'),
    dagNotificationSla?: boolean(name='DagNotificationSla', example='true'),
    dagNotificationSuccess?: boolean(name='DagNotificationSuccess', example='true'),
  }(name='Notification'),
  requestId?: string(name='RequestId', example='F19D575F-EBEA-5683-AFA3-A8F6D9A7DE03'),
  success?: boolean(name='Success', example='true'),
}

model GetTaskFlowNotificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskFlowNotificationResponseBody(name='body'),
}

async function getTaskFlowNotificationWithOptions(request: GetTaskFlowNotificationRequest, runtime: Util.RuntimeOptions): GetTaskFlowNotificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskFlowNotification',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskFlowNotification(request: GetTaskFlowNotificationRequest): GetTaskFlowNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskFlowNotificationWithOptions(request, runtime);
}

model GetTaskInstanceRelationRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='7***'),
  dagInstanceId?: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to obtain the execution record ID.', example='47****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model GetTaskInstanceRelationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  nodeList?: {
    node?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The business time of the node.', example='2021-11-09 14:37:26'),
      endTime?: string(name='EndTime', description='The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-11 14:38:57'),
      executeTime?: long(name='ExecuteTime', description='The amount of time consumed for running the node. Unit: milliseconds.', example='170655'),
      id?: long(name='Id', description='The ID of the execution record of the task flow.', example='14059'),
      message?: string(name='Message', description='The description of the task.', example='test'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='14059'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Spark SQL-1'),
      nodeType?: int32(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='36'),
      status?: int32(name='Status', description='The status of the node. Valid values:

*   **0**: The node is waiting to be scheduled.
*   **1**: The node is running.
*   **2**: The node is suspended.
*   **3**: The node failed to run.
*   **4**: The node is run.
*   **5**: The node is complete.', example='4'),
    }
  ](name='Node')
  }(name='NodeList', description='The information about the nodes in the execution record of the task flow.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model GetTaskInstanceRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskInstanceRelationResponseBody(name='body'),
}

async function getTaskInstanceRelationWithOptions(request: GetTaskInstanceRelationRequest, runtime: Util.RuntimeOptions): GetTaskInstanceRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskInstanceRelation',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskInstanceRelation(request: GetTaskInstanceRelationRequest): GetTaskInstanceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskInstanceRelationWithOptions(request, runtime);
}

model GetUserRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the ID of the tenant.', example='3***'),
  uid?: string(name='Uid', description='The UID of the user. You can view your UID by moving the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console.', example='22973492647626****'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [ListUsers](~~141938~~) operation to query the ID of the user.', example='51****'),
}

model GetUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Unknown server error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='804BB128-CAFA-5DD0-BA1E-43DDE488****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  user?: {
    curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that are performed on the current day.', example='3'),
    curResultCount?: long(name='CurResultCount', description='The number of rows that are queried on the current day.', example='28'),
    dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 
*   The system returns this parameter if the user has set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=***'),
    email?: string(name='Email', description='The email address that is used to receive notifications.

> 
*   The system returns this parameter if the user has set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set an email address.', example='Uesr_email'),
    lastLoginTime?: string(name='LastLoginTime', description='The last time when the user logged on to the console.', example='2021-11-08 11:26:21'),
    maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
    maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='10000'),
    mobile?: string(name='Mobile', description='The mobile phone number that is used to receive notifications.

> 
*   The system returns this parameter if the user has set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set a mobile phone number.', example='1389223****'),
    nickName?: string(name='NickName', description='The nickname of the user.', example='User_NickName'),
    notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message.
*   **EMAIL**: email.
*   **DingTalk**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='EMAIL'),
    parentUid?: long(name='ParentUid', description='The UID of the Alibaba Cloud account of the user.

>  An Alibaba Cloud account can contain one or more RAM users.', example='140692647406****'),
    roleIdList?: {
      roleIds?: [ int32 ](name='RoleIds')
    }(name='RoleIdList', description='The ID of the role that is assigned to the user. Valid values:

*   **1**: a regular user role.
*   **2**: a database administrator (DBA) role.
*   **3**: a DMS administrator role.
*   **4**: a security administrator role.
*   **6**: a schema read-only user role.'),
    roleNameList?: {
      roleNames?: [ string ](name='RoleNames')
    }(name='RoleNameList', description='The name of the role that is assigned to the user. Valid values:

*   **USER**: a regular user.
*   **DBA** : a DBA.
*   **ADMIN**: a DMS administrator.
*   **SECURITY_ADMIN**: a security administrator.
*   **STRUCT_READ_ONLY**: a schema read-only user.'),
    signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC_SHA1.', example='NONE'),
    state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
    uid?: string(name='Uid', description='The UID of the user.', example='22275482072787****'),
    userId?: string(name='UserId', description='The ID of the user.', example='51****'),
    webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 
*   If the user has set a webhook URL, DMS sends notifications to the specified URL.
*   The system does not return this parameter if the user has not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
  }(name='User', description='The information about the user.'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetUserActiveTenantRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model GetUserActiveTenantResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  tenant?: {
    status?: string(name='Status', description='The status of the tenant. Valid values:

*   **ACTIVE**: The tenant is used to access DMS.
*   **IN_ACTIVE**: The tenant is not used.', example='ACTIVE'),
    tenantName?: string(name='TenantName', description='The name of the tenant.', example='test_name'),
    tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
  }(name='Tenant', description='The details of the tenant.'),
}

model GetUserActiveTenantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserActiveTenantResponseBody(name='body'),
}

async function getUserActiveTenantWithOptions(request: GetUserActiveTenantRequest, runtime: Util.RuntimeOptions): GetUserActiveTenantResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserActiveTenant',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserActiveTenant(request: GetUserActiveTenantRequest): GetUserActiveTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserActiveTenantWithOptions(request, runtime);
}

model GetUserUploadFileJobRequest {
  jobKey?: string(name='JobKey', description='The key of the file upload task. You can call the [CreateUploadFileJob](~~206059~~) or [CreateUploadOSSFileJob](~~206060~~) operation to query the key.', example='65254a49100e'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='-1'),
}

model GetUserUploadFileJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDEFE9F2-B3B4-42D0-83AE-ECF9FC067DCD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  uploadFileJobDetail?: {
    attachmentKey?: string(name='AttachmentKey', description='The key of the file that is returned after the file is uploaded. You can use this key when you upload the file as an attachment in a ticket.', example='upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql'),
    fileName?: string(name='FileName', description='The name of the file.', example='test.sql'),
    fileSize?: long(name='FileSize', description='The size of the file. Unit: byte.', example='2968269'),
    fileSource?: string(name='FileSource', description='The purpose of the uploaded file. Valid values:

*   **datacorrect**: The file is uploaded to change data.
*   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
*   **big-file**: The file is uploaded to import multiple data records at a time.
*   **sqlreview**: The file is uploaded for SQL review.', example='datacorrect'),
    jobKey?: string(name='JobKey', description='The key of the file upload task.', example='65254a4c1614235217749100e'),
    jobStatus?: string(name='JobStatus', description='The status of the file upload task. Valid values:

*   **INIT**: The task was initialized.
*   **PENDING**: The task waited to be run.
*   **BE_SCHEDULED**: The task waited to be scheduled.
*   **FAIL**: The task failed.
*   **SUCCESS**: The task was run as expected.
*   **RUNNING**: The task was being run.', example='SUCCESS'),
    jobStatusDesc?: string(name='JobStatusDesc', description='The information about the status of the file upload task.', example='success'),
    uploadOSSParam?: {
      bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_bucket'),
      endpoint?: string(name='Endpoint', description='The endpoint of the OSS bucket.', example='http://oss-cn-hangzhou.aliyuncs.com'),
      objectName?: string(name='ObjectName', description='The name of the OSS object.', example='test.sql'),
    }(name='UploadOSSParam', description='The information about the Object Storage Service (OSS) bucket from which the file is uploaded.

>  This parameter is returned if the **UploadType** parameter is set to **OSS**.'),
    uploadType?: string(name='UploadType', description='The method used to upload the file. Valid values:

*   **URL**
*   **OSS**', example='URL'),
    uploadURL?: string(name='UploadURL', description='The URL of the file.

>  This parameter is returned if the **UploadType** parameter is set to **URL**.', example='http://xxxx/test.sql'),
    uploadedSize?: long(name='UploadedSize', description='The size of the uploaded file. Unit: byte.', example='2968269'),
  }(name='UploadFileJobDetail', description='The details of the file upload task.'),
}

model GetUserUploadFileJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserUploadFileJobResponseBody(name='body'),
}

async function getUserUploadFileJobWithOptions(request: GetUserUploadFileJobRequest, runtime: Util.RuntimeOptions): GetUserUploadFileJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserUploadFileJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserUploadFileJob(request: GetUserUploadFileJobRequest): GetUserUploadFileJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserUploadFileJobWithOptions(request, runtime);
}

model GrantUserPermissionRequest {
  dbId?: string(name='DbId', description='The ID of the database. You can call the [ListDatabases](~~141873~~) operation to query the ID of a physical database and the [ListLogicDatabases](~~141874~~) operation to query the ID of a logical database.

>  The value of the DatabaseId parameter is that of the DbId parameter.', example='1***'),
  dsType?: string(name='DsType', description='The permissions on a specific type of object that you want to grant to the user. Valid values:

*   INSTANCE: permissions on instances
*   DATABASE: permissions on physical databases
*   LOGIC_DATABASE: permissions on logical databases
*   TABLE: permissions on physical tables
*   LOGIC_TABLE: permissions on logical tables', example='DATABASE'),
  expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2021-12-12 00:00:00'),
  instanceId?: long(name='InstanceId', description='The ID of the instance. You must specify this parameter if you grant permissions on an instance to the user. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to query the ID of the instance.', example='174****'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. You must specify this parameter if you grant permissions on a database to the user. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false'),
  permTypes?: string(name='PermTypes', description='The permission type. Separate multiple permission types with commas (,). Valid values:

*   **QUERY**: the query permissions
*   **EXPORT**: the export permissions
*   **CORRECT**: the change permissions
*   **LOGIN**: the logon permissions
*   **PERF**: the query permissions on the performance details of the instance', example='QUERY'),
  tableId?: string(name='TableId', description='The ID of the table. You must specify this parameter if you grant permissions on a table to the user. You can call the [ListTables](~~141878~~) operation to query the table ID.', example='132***'),
  tableName?: string(name='TableName', description='The name of the table. You must specify this parameter if you grant permissions on a table to the user.', example='table_name'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the ID of the user.

>  The user ID is different from the ID of your Alibaba Cloud account.', example='51****'),
}

model GrantUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GrantUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantUserPermissionResponseBody(name='body'),
}

async function grantUserPermissionWithOptions(request: GrantUserPermissionRequest, runtime: Util.RuntimeOptions): GrantUserPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.dsType)) {
    query['DsType'] = request.dsType;
  }
  if (!Util.isUnset(request.expireDate)) {
    query['ExpireDate'] = request.expireDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.permTypes)) {
    query['PermTypes'] = request.permTypes;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantUserPermission',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantUserPermission(request: GrantUserPermissionRequest): GrantUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantUserPermissionWithOptions(request, runtime);
}

model InspectProxyAccessSecretRequest {
  proxyAccessId?: long(name='ProxyAccessId', description='The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.', example='1'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.', example='1'),
}

model InspectProxyAccessSecretResponseBody = {
  accessSecret?: string(name='AccessSecret', description='The authorization password of the security protection agent.', example='xxx'),
  errorCode?: string(name='ErrorCode', description='The error code returned to the query task.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model InspectProxyAccessSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InspectProxyAccessSecretResponseBody(name='body'),
}

async function inspectProxyAccessSecretWithOptions(request: InspectProxyAccessSecretRequest, runtime: Util.RuntimeOptions): InspectProxyAccessSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.proxyAccessId)) {
    query['ProxyAccessId'] = request.proxyAccessId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InspectProxyAccessSecret',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inspectProxyAccessSecret(request: InspectProxyAccessSecretRequest): InspectProxyAccessSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return inspectProxyAccessSecretWithOptions(request, runtime);
}

model ListClassificationTemplatesRequest {
  tid?: long(name='Tid', example='3***'),
}

model ListClassificationTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='90260530-565C-42B9-A6E8-893481FE6AB6'),
  success?: boolean(name='Success', example='true'),
  templateList?: [ 
    {
      name?: string(name='Name', example='test'),
      remark?: string(name='Remark', example='test'),
      templateId?: long(name='TemplateId', example='3**'),
      templateType?: string(name='TemplateType', example='USER_DEFINE'),
    }
  ](name='TemplateList'),
}

model ListClassificationTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClassificationTemplatesResponseBody(name='body'),
}

async function listClassificationTemplatesWithOptions(request: ListClassificationTemplatesRequest, runtime: Util.RuntimeOptions): ListClassificationTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClassificationTemplates',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClassificationTemplates(request: ListClassificationTemplatesRequest): ListClassificationTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClassificationTemplatesWithOptions(request, runtime);
}

model ListColumnsRequest {
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
  tableId?: string(name='TableId', description='The ID of the table. You can call the [ListTables](~~141878~~) operation to obtain the table ID.', example='39281****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
}

model ListColumnsResponseBody = {
  columnList?: {
    column?: [ 
    {
      autoIncrement?: boolean(name='AutoIncrement', description='Indicates whether the field is an auto-increment field. Valid values:

*   true: The field is an auto-increment field.
*   false: The field is not an auto-increment field.', example='false'),
      columnId?: string(name='ColumnId', description='The ID of the field.', example='62589****'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='name'),
      columnType?: string(name='ColumnType', description='The data type of the field.', example='varchar'),
      dataLength?: long(name='DataLength', description='The length of the field.', example='4'),
      dataPrecision?: int32(name='DataPrecision', description='The number of valid digits for the field.', example='0'),
      dataScale?: int32(name='DataScale', description='The number of decimal places for the field.', example='0'),
      defaultValue?: string(name='DefaultValue', description='The default value of the field.', example='def_value'),
      description?: string(name='Description', description='The description of the field.', example='test'),
      functionType?: string(name='FunctionType', description='The type of the masking algorithm that is used for the field. Valid values:

*   null: No masking algorithm is used.
*   DEFAULT: A full masking algorithm is used.
*   FIX_POS: The fixed position is masked.
*   FIX_CHAR: The fixed characters are replaced.', example='DEFAULT'),
      nullable?: boolean(name='Nullable', description='Indicates whether the field can be empty. Valid values:

*   **true**: The field can be empty.
*   **false**: The field cannot be empty.', example='false'),
      securityLevel?: string(name='SecurityLevel', description='The security level of the field. Valid values:

*   INNER: The field is an internal field but not sensitive.
*   SENSITIVE: The field is a sensitive field.
*   CONFIDENTIAL: The field is a confidential field.

>  For more information, see [Adjust the sensitivity level of one or more fields](~~66091~~).', example='INNER'),
      sensitive?: boolean(name='Sensitive', description='Indicates whether the field is a sensitive field. Valid values:

*   **true**: The field is a sensitive field.
*   **false**: The field is not a sensitive field.', example='false'),
    }
  ](name='Column')
  }(name='ColumnList', description='The information about the columns returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AD9AC55-5873-474A-9F33-4285806A3619'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListColumnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListColumnsResponseBody(name='body'),
}

async function listColumnsWithOptions(request: ListColumnsRequest, runtime: Util.RuntimeOptions): ListColumnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListColumns',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listColumns(request: ListColumnsRequest): ListColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listColumnsWithOptions(request, runtime);
}

model ListDAGVersionsRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='7***'),
  pageIndex?: int32(name='PageIndex', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model ListDAGVersionsResponseBody = {
  dagVersionList?: {
    dagVersion?: [ 
    {
      dagName?: string(name='DagName', description='The name of the task flow.', example='Spark SQL'),
      dagOwnerId?: string(name='DagOwnerId', description='The ID of the task flow owner.', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='name'),
      lastVersionId?: long(name='LastVersionId', description='The ID of the previously published version.', example='2****'),
      versionComments?: string(name='VersionComments', description='The description of the version.', example='test_OSS'),
      versionId?: long(name='VersionId', description='The ID of the version.', example='2****'),
    }
  ](name='DagVersion')
  }(name='DagVersionList', description='The information about the published versions.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7775630-7901-51B9-8782-9B585EC0799A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListDAGVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDAGVersionsResponseBody(name='body'),
}

async function listDAGVersionsWithOptions(request: ListDAGVersionsRequest, runtime: Util.RuntimeOptions): ListDAGVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDAGVersions',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDAGVersions(request: ListDAGVersionsRequest): ListDAGVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDAGVersionsWithOptions(request, runtime);
}

model ListDBTaskSQLJobRequest {
  DBTaskGroupId?: long(name='DBTaskGroupId', example='1324235'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  tid?: long(name='Tid', example='1'),
}

model ListDBTaskSQLJobResponseBody = {
  DBTaskSQLJobList?: [ 
    {
      comment?: string(name='Comment', example='test'),
      createTime?: string(name='CreateTime', example='2021-02-18 17:49:20'),
      dbId?: long(name='DbId', example='43214523'),
      dbSearchName?: string(name='DbSearchName', example='test@xxx:3306【test】'),
      dbTaskGroupId?: long(name='DbTaskGroupId', example='4324132'),
      jobId?: long(name='JobId', example='123435'),
      jobType?: string(name='JobType', example='STRUCT_SYNC'),
      lastExecTime?: string(name='LastExecTime', example='2021-02-18 17:49:31'),
      logic?: boolean(name='Logic', example='false'),
      status?: string(name='Status', example='SUCCESS'),
      transactional?: boolean(name='Transactional', example='false'),
    }
  ](name='DBTaskSQLJobList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F6C47680-8D2D-43A4-8902-F2740D71A398'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListDBTaskSQLJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDBTaskSQLJobResponseBody(name='body'),
}

async function listDBTaskSQLJobWithOptions(request: ListDBTaskSQLJobRequest, runtime: Util.RuntimeOptions): ListDBTaskSQLJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBTaskGroupId)) {
    query['DBTaskGroupId'] = request.DBTaskGroupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDBTaskSQLJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDBTaskSQLJob(request: ListDBTaskSQLJobRequest): ListDBTaskSQLJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDBTaskSQLJobWithOptions(request, runtime);
}

model ListDBTaskSQLJobDetailRequest {
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [ListDBTaskSQLJob](~~207049~~) operation to query the SQL task ID.', example='1276****'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ListDBTaskSQLJobDetailResponseBody = {
  DBTaskSQLJobDetailList?: [ 
    {
      affectRows?: long(name='AffectRows', description='The number of rows affected by the SQL task.', example='0'),
      currentSql?: string(name='CurrentSql', description='The SQL statement that was executed in the SQL task.', example='update a set id = 1 where id  = 1;'),
      dbId?: long(name='DbId', description='The ID of the physical database.', example='1988****'),
      endTime?: string(name='EndTime', description='The point in time when the SQL task ended.', example='2021-12-16 00:00:01'),
      executeCount?: long(name='ExecuteCount', description='The number of times that the SQL statement was executed.', example='1'),
      jobDetailId?: long(name='JobDetailId', description='The ID of the details of the SQL task.', example='24723****'),
      jobId?: long(name='JobId', description='The ID of the SQL task.', example='1276****'),
      log?: string(name='Log', description='The details of the operational log.', example='log_info'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      skip?: boolean(name='Skip', description='Indicates whether the SQL statement was skipped. Valid values:

*   **true**: The SQL statement was skipped.
*   **false**: The SQL statement was not skipped.', example='false'),
      sqlType?: string(name='SqlType', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='CREATE_TABLE'),
      startTime?: string(name='StartTime', description='The point in time when the SQL task started.', example='2021-12-16 00:00:00'),
      status?: string(name='Status', description='The status of the SQL task. Valid values:

*   **INIT**: The SQL task was initialized.
*   **PENDING**: The SQL task waited to be run.
*   **BE_SCHEDULED**: The SQL task waited to be scheduled.
*   **FAIL**: The SQL task failed.
*   **SUCCESS**: The SQL task was successful.
*   **PAUSE**: The SQL task was paused.
*   **DELETE**: The SQL task was deleted.
*   **RUNNING**: The SQL task was being run.', example='SUCCESS'),
      timeDelay?: long(name='TimeDelay', description='The duration of the SQL task. Unit: milliseconds.', example='38'),
    }
  ](name='DBTaskSQLJobDetailList', description='The details of SQL tasks.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='MissingJobId'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='JobId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F044E33-FE09-58F1-8C61-A0F612EC****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of SQL tasks.', example='1'),
}

model ListDBTaskSQLJobDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDBTaskSQLJobDetailResponseBody(name='body'),
}

async function listDBTaskSQLJobDetailWithOptions(request: ListDBTaskSQLJobDetailRequest, runtime: Util.RuntimeOptions): ListDBTaskSQLJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDBTaskSQLJobDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDBTaskSQLJobDetail(request: ListDBTaskSQLJobDetailRequest): ListDBTaskSQLJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDBTaskSQLJobDetailWithOptions(request, runtime);
}

model ListDDLPublishRecordsRequest {
  orderId?: long(name='OrderId', example='3214325'),
  tid?: long(name='Tid', example='1'),
}

model ListDDLPublishRecordsResponseBody = {
  DDLPublishRecordList?: [ 
    {
      auditExpireTime?: string(name='AuditExpireTime', example='2020-12-14 20:52:38'),
      auditStatus?: string(name='AuditStatus', example='CANCEL'),
      creatorId?: long(name='CreatorId', example='1423'),
      finality?: boolean(name='Finality', example='true'),
      finalityReason?: string(name='FinalityReason', example='CANCEL'),
      publishStatus?: string(name='PublishStatus', example='AUDIT'),
      publishTaskInfoList?: [ 
        {
          dbId?: long(name='DbId', example='4325'),
          logic?: boolean(name='Logic', example='false'),
          planTime?: string(name='PlanTime', example='2020-12-14 20:52:38'),
          publishJobList?: [ 
            {
              DBTaskGroupId?: long(name='DBTaskGroupId', example='423515'),
              executeCount?: long(name='ExecuteCount', example='0'),
              scripts?: string(name='Scripts', example='ALTER TABLE test_toolkit_rename_table_after_rename MODIFY COLUMN gmt_modified datetime NOT NULL'),
              statusDesc?: string(name='StatusDesc', example='NONE'),
              tableName?: string(name='TableName', example='test_toolkit_rename_table_after_rename'),
              taskJobStatus?: string(name='TaskJobStatus', example='NONE'),
            }
          ](name='PublishJobList'),
          publishStrategy?: string(name='PublishStrategy', example='IMMEDIATELY'),
          statusDesc?: string(name='StatusDesc', example='NONE'),
          taskJobStatus?: string(name='TaskJobStatus', example='NONE'),
        }
      ](name='PublishTaskInfoList'),
      riskLevel?: string(name='RiskLevel', example='LOW_RISK'),
      statusDesc?: string(name='StatusDesc', example='CANCEL'),
      workflowInstanceId?: long(name='WorkflowInstanceId', example='432153'),
    }
  ](name='DDLPublishRecordList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='A1549FB0-D4B8-4140-919F-17322C1072B8'),
  success?: boolean(name='Success', example='true'),
}

model ListDDLPublishRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDDLPublishRecordsResponseBody(name='body'),
}

async function listDDLPublishRecordsWithOptions(request: ListDDLPublishRecordsRequest, runtime: Util.RuntimeOptions): ListDDLPublishRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDDLPublishRecords',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDDLPublishRecords(request: ListDDLPublishRecordsRequest): ListDDLPublishRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDDLPublishRecordsWithOptions(request, runtime);
}

model ListDataCorrectPreCheckDBRequest {
  orderId?: long(name='OrderId', description='The ID of the ticket for the data change.', example='432****'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Valid values: an integer that is greater than 0.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the ID of the tenant.', example='4321****'),
}

model ListDataCorrectPreCheckDBResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  preCheckDBList?: [ 
    {
      dbId?: long(name='DbId', description='The ID of the database.', example='43***'),
      searchName?: string(name='SearchName', description='The name of the database.', example='test@localhost:3306'),
      sqlNum?: long(name='SqlNum', description='The number of SQL statements.', example='1'),
    }
  ](name='PreCheckDBList', description='The information about the databases that are involved in the precheck.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95A972AF-FAED-4768-9360-7C0DF5D594D0'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListDataCorrectPreCheckDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataCorrectPreCheckDBResponseBody(name='body'),
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param request ListDataCorrectPreCheckDBRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDataCorrectPreCheckDBResponse
 */
async function listDataCorrectPreCheckDBWithOptions(request: ListDataCorrectPreCheckDBRequest, runtime: Util.RuntimeOptions): ListDataCorrectPreCheckDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataCorrectPreCheckDB',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param request ListDataCorrectPreCheckDBRequest
  * @return ListDataCorrectPreCheckDBResponse
 */
async function listDataCorrectPreCheckDB(request: ListDataCorrectPreCheckDBRequest): ListDataCorrectPreCheckDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataCorrectPreCheckDBWithOptions(request, runtime);
}

model ListDataCorrectPreCheckSQLRequest {
  dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1930****'),
  orderId?: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the data change ticket.', example='453****'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='10'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ListDataCorrectPreCheckSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  preCheckSQLList?: [ 
    {
      affectRows?: long(name='AffectRows', description='The estimated number of affected rows.', example='0'),
      checkSQL?: string(name='CheckSQL', description='The SQL statement.', example='CheckSQL": "OPTIMIZE TABLE `Text_TableNames`'),
      dbId?: long(name='DbId', description='The ID of the database.', example='1930****'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](~~265977~~) operation to query the details of optimization suggestions based on the key.', example='b9e771fc6ec247dea6d06a32c777****'),
      sqlReviewStatus?: string(name='SqlReviewStatus', description='The review status of the SQL statement. Valid values:

*   **WAITING**: The SQL statement is pending for review.
*   **RUNNING**: The SQL statement is being reviewed.
*   **IGNORE**: The SQL statement review is skipped.
*   **PASS**: The SQL statement passed the review.
*   **BLOCK**: The SQL statement failed the review.', example='WAITING'),
      sqlType?: string(name='SqlType', description='The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.', example='OPTIMIZE'),
      tableNames?: string(name='TableNames', description='The name of the table whose data is changed.', example='Text_TableNames'),
    }
  ](name='PreCheckSQLList', description='The precheck information about SQL statements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='31853A2B-DC9D-5B39-8492-D2AC8BCF550E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ListDataCorrectPreCheckSQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataCorrectPreCheckSQLResponseBody(name='body'),
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param request ListDataCorrectPreCheckSQLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDataCorrectPreCheckSQLResponse
 */
async function listDataCorrectPreCheckSQLWithOptions(request: ListDataCorrectPreCheckSQLRequest, runtime: Util.RuntimeOptions): ListDataCorrectPreCheckSQLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataCorrectPreCheckSQL',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the Normal Data Modify feature, see [Change regular data](~~58419~~).
  *
  * @param request ListDataCorrectPreCheckSQLRequest
  * @return ListDataCorrectPreCheckSQLResponse
 */
async function listDataCorrectPreCheckSQL(request: ListDataCorrectPreCheckSQLRequest): ListDataCorrectPreCheckSQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataCorrectPreCheckSQLWithOptions(request, runtime);
}

model ListDatabaseUserPermssionsRequest {
  dbId?: string(name='DbId', example='123'),
  logic?: boolean(name='Logic', example='false'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  permType?: string(name='PermType', example='DATABASE'),
  tid?: long(name='Tid', example='-1'),
  userName?: string(name='UserName', example='search_user_name'),
}

model ListDatabaseUserPermssionsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='68075D06-7406-4887-83A7-F558A4D28C13'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', example='instance_alias'),
      columnName?: string(name='ColumnName', example='column_name'),
      dbId?: string(name='DbId', example='1234'),
      dbType?: string(name='DbType', example='mysql'),
      dsType?: string(name='DsType', example='DATABASE'),
      envType?: string(name='EnvType', example='product'),
      instanceId?: string(name='InstanceId', example='1443'),
      logic?: boolean(name='Logic', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', example='DEFAULT'),
          originFrom?: string(name='OriginFrom', example='xxx grant'),
          permType?: string(name='PermType', example='QUERY'),
          userAccessId?: string(name='UserAccessId', example='13434'),
        }
      ](name='PermDetail')
      }(name='PermDetails'),
      schemaName?: string(name='SchemaName', example='xxx@xxxx:3306'),
      searchName?: string(name='SearchName', example='xxx'),
      tableId?: string(name='TableId', example='42345'),
      tableName?: string(name='TableName', example='table_name'),
      userId?: string(name='UserId', example='14324'),
      userNickName?: string(name='UserNickName', example='user_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions'),
}

model ListDatabaseUserPermssionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDatabaseUserPermssionsResponseBody(name='body'),
}

async function listDatabaseUserPermssionsWithOptions(request: ListDatabaseUserPermssionsRequest, runtime: Util.RuntimeOptions): ListDatabaseUserPermssionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.permType)) {
    query['PermType'] = request.permType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatabaseUserPermssions',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDatabaseUserPermssions(request: ListDatabaseUserPermssionsRequest): ListDatabaseUserPermssionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatabaseUserPermssionsWithOptions(request, runtime);
}

model ListDatabasesRequest {
  instanceId?: string(name='InstanceId', example='1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tid?: long(name='Tid', example='-1'),
}

model ListDatabasesResponseBody = {
  databaseList?: {
    database?: [ 
    {
      catalogName?: string(name='CatalogName', example='1'),
      databaseId?: string(name='DatabaseId', example='1'),
      dbType?: string(name='DbType', example='mysql'),
      dbaId?: string(name='DbaId', example='1'),
      dbaName?: string(name='DbaName', example='dba_user'),
      encoding?: string(name='Encoding', example='utf-8'),
      envType?: string(name='EnvType', example='dev'),
      host?: string(name='Host', example='xxx.xxx.xxx.xxx'),
      instanceId?: string(name='InstanceId', example='1'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      port?: int32(name='Port', example='3306'),
      schemaName?: string(name='SchemaName', example='test'),
      searchName?: string(name='SearchName', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', example='test'),
      state?: string(name='State', example='NORMAL'),
    }
  ](name='Database')
  }(name='DatabaseList'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='5541CDA6-F674-435C-81BD-40C2FB926CE3'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDatabasesResponseBody(name='body'),
}

async function listDatabasesWithOptions(request: ListDatabasesRequest, runtime: Util.RuntimeOptions): ListDatabasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatabases',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatabasesWithOptions(request, runtime);
}

model ListDefaultSLARulesRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='11****'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ListDefaultSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='3E8AF4C3-A822-53A8-970C-059EE83BBD5A'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', description='The ID of the task flow.', example='0'),
      id?: long(name='Id', description='The ID of the SLA rule.', example='1'),
      intervalMinutes?: int32(name='IntervalMinutes', description='The timeout period. Unit: minutes.', example='1080'),
      nodeId?: long(name='NodeId', description='The ID of the task node.', example='0'),
      ruleType?: int32(name='RuleType', description='The type of the rule. Valid values:

*   **0**: an SLA rule for a task flow
*   **1**: an SLA rule for a task node', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList', description='The list of SLA rules.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListDefaultSLARulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDefaultSLARulesResponseBody(name='body'),
}

async function listDefaultSLARulesWithOptions(request: ListDefaultSLARulesRequest, runtime: Util.RuntimeOptions): ListDefaultSLARulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDefaultSLARules',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDefaultSLARules(request: ListDefaultSLARulesRequest): ListDefaultSLARulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDefaultSLARulesWithOptions(request, runtime);
}

model ListDesensitizationRuleRequest {
  funcType?: string(name='FuncType', description='The type of the masking algorithm.', example='MD5'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The maximum value is 100.', example='20'),
  ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='1'),
  ruleName?: string(name='RuleName', description='The name of the masking rule.'),
  ruleType?: string(name='RuleType', description='The algorithm used for masking.', example='HASH'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ListDesensitizationRuleResponseBody = {
  desensitizationRuleList?: [ 
    {
      funcParams?: string(name='FuncParams', description='The parameter.', example='{paramName: salt, paramValue: 1}'),
      funcSample?: string(name='FuncSample', description='The example.', example='[{paramName: testStr, paramValue: 1}]'),
      functionType?: string(name='FunctionType', description='The algorithm type.', example='MD5'),
      lastModifierId?: string(name='LastModifierId', description='The ID of the user who last modified the masking rule.', example='2'),
      lastModifierName?: string(name='LastModifierName', description='The name of the user who last modified the masking rule.'),
      referenceCount?: int32(name='ReferenceCount', description='The number of times that the masking was used.', example='1'),
      ruleDesc?: string(name='RuleDesc', description='The description of the rule.'),
      ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='23'),
      ruleName?: string(name='RuleName', description='The name of the masking rule.'),
      ruleType?: string(name='RuleType', description='The algorithm used for masking.', example='HASH'),
    }
  ](name='DesensitizationRuleList', description='The list of masking rules.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E76DD2E7-EBAC-5724-B163-19AAC233F8F2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned. By default, this parameter is not returned.', example='1'),
}

model ListDesensitizationRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDesensitizationRuleResponseBody(name='body'),
}

async function listDesensitizationRuleWithOptions(request: ListDesensitizationRuleRequest, runtime: Util.RuntimeOptions): ListDesensitizationRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.funcType)) {
    query['FuncType'] = request.funcType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDesensitizationRule',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDesensitizationRule(request: ListDesensitizationRuleRequest): ListDesensitizationRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDesensitizationRuleWithOptions(request, runtime);
}

model ListEffectiveOrdersRequest {
  tid?: long(name='Tid', example='3***'),
}

model ListEffectiveOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  orderSummary?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityType?: string(name='CommodityType', example='VersionType'),
      orderList?: [ 
        {
          buyerId?: string(name='BuyerId', example='2698420314****'),
          endTime?: string(name='EndTime', example='2022-11-24 00:00:00'),
          insNum?: string(name='InsNum', example='7'),
          instanceId?: string(name='InstanceId', example='rm-bp1xd1v866****'),
          orderId?: string(name='OrderId', example='2190037****'),
          startTime?: string(name='StartTime', example='2022-10-24 00:00:00'),
        }
      ](name='OrderList'),
      totalQuota?: int32(name='TotalQuota', example='12'),
      versionType?: string(name='VersionType', example='safety'),
    }
  ](name='OrderSummary'),
  requestId?: string(name='RequestId', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', example='true'),
}

model ListEffectiveOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEffectiveOrdersResponseBody(name='body'),
}

async function listEffectiveOrdersWithOptions(request: ListEffectiveOrdersRequest, runtime: Util.RuntimeOptions): ListEffectiveOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEffectiveOrders',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEffectiveOrders(request: ListEffectiveOrdersRequest): ListEffectiveOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEffectiveOrdersWithOptions(request, runtime);
}

model ListIndexesRequest {
  logic?: boolean(name='Logic', example='false'),
  tableId?: string(name='TableId', example='1'),
  tid?: long(name='Tid', example='0'),
}

model ListIndexesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  indexList?: {
    index?: [ 
    {
      indexComment?: string(name='IndexComment', example='test'),
      indexId?: string(name='IndexId', example='1'),
      indexName?: string(name='IndexName', example='idx_test'),
      indexType?: string(name='IndexType', example='Primary'),
      tableId?: string(name='TableId', example='1'),
    }
  ](name='Index')
  }(name='IndexList'),
  requestId?: string(name='RequestId', example='1F4DE2F1-5B47-462A-A973-E02EB7AF386B'),
  success?: boolean(name='Success', example='true'),
}

model ListIndexesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIndexesResponseBody(name='body'),
}

async function listIndexesWithOptions(request: ListIndexesRequest, runtime: Util.RuntimeOptions): ListIndexesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIndexes',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIndexes(request: ListIndexesRequest): ListIndexesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIndexesWithOptions(request, runtime);
}

model ListInstanceLoginAuditLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

>  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. This way, the returned entries can be displayed by page to increase query efficiency.', example='2021-11-18 18:00:00'),
  opUserName?: string(name='OpUserName', description='The alias of the user.', example='test_OpUserName'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='20'),
  searchName?: string(name='SearchName', description='The name of the database or instance whose logon records you want to query.

>  If SQL statements are executed at the instance level, you can set this parameter to an instance name. If SQL statements are executed at the database level, you can set this parameter to a database name.', example='test_SearchName'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.', example='2021-11-18 11:00:00'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ListInstanceLoginAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidPageSize'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter PageSize is not valid.'),
  instanceLoginAuditLogList?: {
    instanceLoginAuditLog?: [ 
    {
      dbUser?: string(name='DbUser', description='The database account that is used to log on to the instance.', example='test_User'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='177****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='rm-bp144d5ky4l4rli0417****.mysql.rds.aliyuncs.com:3306【rm-bp144d5ky4l4r****】'),
      opTime?: string(name='OpTime', description='The time when the user performed an operation on the instance.', example='2021-11-18 11:13:26'),
      requestIp?: string(name='RequestIp', description='The source IP address of the request.', example='117.36.XX.XX,100.104.XX.XX'),
      userId?: long(name='UserId', description='The ID of the user.', example='12****'),
      userName?: string(name='UserName', description='The alias of the user.', example='test_UserName'),
    }
  ](name='InstanceLoginAuditLog')
  }(name='InstanceLoginAuditLogList', description='The logon records of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='074CE7C9-4F9C-5B62-89BC-7B4914A3****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListInstanceLoginAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceLoginAuditLogResponseBody(name='body'),
}

async function listInstanceLoginAuditLogWithOptions(request: ListInstanceLoginAuditLogRequest, runtime: Util.RuntimeOptions): ListInstanceLoginAuditLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.opUserName)) {
    query['OpUserName'] = request.opUserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceLoginAuditLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceLoginAuditLog(request: ListInstanceLoginAuditLogRequest): ListInstanceLoginAuditLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceLoginAuditLogWithOptions(request, runtime);
}

model ListInstanceUserPermissionsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to query the ID of the instance.', example='174****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='100'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
  userName?: string(name='UserName', description='The nickname of the user. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to query the nickname of the user.

>  The value of the NickName parameter is that of the UserName parameter.', example='test_nick_name'),
}

model ListInstanceUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7D162AAE-6501-5691-BF14-D7018F662895'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='174****'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permissions were granted.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='This parameter is reserved.', example='XXX'),
          originFrom?: string(name='OriginFrom', description='The user who grants the permissions.'),
          permType?: string(name='PermType', description='The type of the permissions. Valid values:

*   LOGIN: the logon permissions
*   PERF: the query permissions on the instance', example='LOGIN'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='773****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of permissions.'),
      userId?: string(name='UserId', description='The ID of the user.', example='51****'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='test_nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The permissions of the user on the instance.'),
}

model ListInstanceUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceUserPermissionsResponseBody(name='body'),
}

async function listInstanceUserPermissionsWithOptions(request: ListInstanceUserPermissionsRequest, runtime: Util.RuntimeOptions): ListInstanceUserPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceUserPermissions',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceUserPermissions(request: ListInstanceUserPermissionsRequest): ListInstanceUserPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceUserPermissionsWithOptions(request, runtime);
}

model ListInstancesRequest {
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MySQL'),
  envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
  instanceSource?: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
*   **RDS**: an ApsaraDB RDS instance
*   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='RDS'),
  instanceState?: string(name='InstanceState', description='The status of the database instance. Valid values:

*   **NORMAL**: normal
*   **DISABLE**: disabled', example='NORMAL'),
  netType?: string(name='NetType', description='The network type of the database instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='VPC'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The number cannot exceed 100.', example='50'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for database instances.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  instanceList?: {
    instance?: [ 
    {
      dataLinkName?: string(name='DataLinkName', description='The name of the database link for the database instance.', example='dblink_test'),
      databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database.', example='******'),
      databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database.', example='dbUser'),
      dbaId?: string(name='DbaId', description='The ID of the database administrator (DBA) for the database instance.', example='31****'),
      dbaNickName?: string(name='DbaNickName', description='The nickname of the DBA for the database instance.', example='dbaName'),
      ddlOnline?: int32(name='DdlOnline', description='Indicates whether the lock-free schema change feature is enabled for the database instance.', example='1'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance on which the database instance is deployed.', example='150****'),
      ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.', example='cn-hangzhou'),
      envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: SIT environment
*   **uat**: UAT environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
      exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.', example='86400'),
      host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='****.mysql.rds.aliyuncs.com'),
      instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance.', example='test'),
      instanceId?: string(name='InstanceId', description='The ID of the database instance.', example='150***'),
      instanceSource?: string(name='InstanceSource', description='The source of the database instance.', example='RDS'),
      instanceType?: string(name='InstanceType', description='The type of the database instance.', example='mysql'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The ID of the owner for the database instance.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nickname of the owner for the database instance.'),
      port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='3306'),
      queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.', example='60'),
      safeRuleId?: string(name='SafeRuleId', description='The ID of the security rule set for the database instance.', example='1'),
      sellSitd?: boolean(name='SellSitd', example='true'),
      sid?: string(name='Sid', description='The system ID (SID) of the database instance.', example='test'),
      standardGroup?: {
        groupMode?: string(name='GroupMode', description='The type of the control mode. Valid values:

*   **COMMON**: Security Collaboration
*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change', example='COMMON'),
        groupName?: string(name='GroupName', description='The name of the security rule set corresponding to the control mode.', example='test'),
      }(name='StandardGroup', description='The control mode of the database instance.'),
      state?: string(name='State', description='The status of the database instance.', example='NORMAL'),
      useDsql?: int32(name='UseDsql', description='Indicates whether the cross-database query feature is enabled for the database instance. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the database instance belongs.', example='vpc-o6wrloqsdqc9io3mg****'),
    }
  ](name='Instance')
  }(name='InstanceList', description='The information about the database instances that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4B07137-F6AE-4756-8474-7F92BB6C4E04'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of database instances that are returned.', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.instanceSource)) {
    query['InstanceSource'] = request.instanceSource;
  }
  if (!Util.isUnset(request.instanceState)) {
    query['InstanceState'] = request.instanceState;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListLhTaskFlowAndScenarioRequest {
  spaceId?: long(name='SpaceId', description='The ID of the workspace. You can call the [GetLhSpaceByName](~~424379~~) operation to obtain the workspace ID.', example='24'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
  userId?: long(name='UserId', description='The ID of the user. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain the user ID.', example='51****'),
}

model ListLhTaskFlowAndScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  rawDAGList?: {
    dag?: [ 
    {
      canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow can be modified. Valid values:

*   **true**: The task flow can be modified.
*   **false**: The task flow cannot be modified.', example='true'),
      creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the workspace.', example='Creator_Name'),
      dagName?: string(name='DagName', description='The name of the task flow.', example='Dag_Name'),
      dagOwnerId?: string(name='DagOwnerId', description='The user ID of the task flow owner.', example='51****'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_Name'),
      dataFlowId?: long(name='DataFlowId', description='The extended field. No meaning is specified for this field.', example='-'),
      demoId?: string(name='DemoId', description='The extended field. No meaning is specified for this field.', example='-'),
      deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
      id?: long(name='Id', description='The ID of the task flow.', example='134137****'),
      isDeleted?: boolean(name='IsDeleted', description='Indicates whether the task flow is deleted. Valid values:

*   **true**: deleted
*   **false**: not deleted', example='false'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='0'),
      latestInstanceTime?: int32(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-14'),
      scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='2**'),
      spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='1'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: invalid
*   **1**: scheduling disabled
*   **2**: waiting to be scheduled', example='2'),
    }
  ](name='Dag')
  }(name='RawDAGList', description='The task flows in the default business scenario.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='48602B78-0DDF-414C-8688-70CAB6070115'),
  scenarioDAGList?: {
    scenarioDAG?: [ 
    {
      dagList?: {
        dag?: [ 
        {
          canEdit?: boolean(name='CanEdit', description='Indicates whether the task flow can be modified. Valid values:

- **true**: The task flow can be modified.
- **false**: The task flow cannot be modified.', example='true'),
          creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
          creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the workspace.', example='Creator_Name'),
          dagName?: string(name='DagName', description='The name of the task flow.', example='Dag_Name'),
          dagOwnerId?: string(name='DagOwnerId', description='The user ID of the task flow owner.', example='51****'),
          dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_Name'),
          dataFlowId?: long(name='DataFlowId', description='The extended field. No meaning is specified for this field.', example='-'),
          demoId?: string(name='DemoId', description='The extended field. No meaning is specified for this field.', example='-'),
          deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
          id?: long(name='Id', description='The ID of the task flow.', example='9***'),
          isDeleted?: boolean(name='IsDeleted', description='Indicates whether the task flow is deleted. Valid values:

- **true**: deleted
- **false**: not deleted', example='false'),
          latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

- 0: invalid
- 1: scheduling disabled
- 2: waiting to be scheduled', example='1'),
          latestInstanceTime?: int32(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-14'),
          scenarioId?: long(name='ScenarioId', description='The ID of the business scenario.', example='2**'),
          spaceId?: long(name='SpaceId', description='The ID of the workspace.', example='1'),
          status?: int32(name='Status', description='The status of the task flow. Valid values:

- **0**: invalid
- **1**: scheduling disabled
- **2**: waiting to be scheduled', example='1'),
        }
      ](name='Dag')
      }(name='DagList', description='The list of task flows.'),
      scenario?: {
        creatorId?: string(name='CreatorId', description='The ID of the user who creates the business scenario.', example='51****'),
        description?: string(name='Description', description='The description of the business scenario.', example='test'),
        scenarioName?: string(name='ScenarioName', description='The name of the business scenario.', example='Scenario_2'),
      }(name='Scenario', description='The information about the business scenario.'),
    }
  ](name='ScenarioDAG')
  }(name='ScenarioDAGList', description='The task flows in other business scenarios.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
}

model ListLhTaskFlowAndScenarioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLhTaskFlowAndScenarioResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](~~424759~~) operation can be called to add a workspace member.
  * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
  *
  * @param request ListLhTaskFlowAndScenarioRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListLhTaskFlowAndScenarioResponse
 */
async function listLhTaskFlowAndScenarioWithOptions(request: ListLhTaskFlowAndScenarioRequest, runtime: Util.RuntimeOptions): ListLhTaskFlowAndScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.spaceId)) {
    query['SpaceId'] = request.spaceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLhTaskFlowAndScenario',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](~~424759~~) operation can be called to add a workspace member.
  * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
  *
  * @param request ListLhTaskFlowAndScenarioRequest
  * @return ListLhTaskFlowAndScenarioResponse
 */
async function listLhTaskFlowAndScenario(request: ListLhTaskFlowAndScenarioRequest): ListLhTaskFlowAndScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLhTaskFlowAndScenarioWithOptions(request, runtime);
}

model ListLogicDatabasesRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='50'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3422'),
}

model ListLogicDatabasesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  logicDatabaseList?: {
    logicDatabase?: [ 
    {
      alias?: string(name='Alias', description='The alias of the logical database.', example='logic_db_alias'),
      databaseId?: string(name='DatabaseId', description='The ID of the logical database.', example='1***'),
      databaseIds?: {
        databaseIds?: [ long ](name='DatabaseIds')
      }(name='DatabaseIds'),
      dbType?: string(name='DbType', description='The type of the logical database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).', example='polardb'),
      envType?: string(name='EnvType', description='The type of the environment to which the logical database belongs. Valid values:

- **product**: production environment
- **dev**: development environment
- **pre**: staging environment
- **test**: test environment
- **sit**: system integration testing (SIT) environment
- **uat**: user acceptance testing (UAT) environment
- **pet**: stress testing environment
- **stag**: STAG environment', example='test'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. The return value is true.', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the logical database.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The names of the owners of the logical database.'),
      schemaName?: string(name='SchemaName', description='The name of the logical database.', example='logic_db'),
      searchName?: string(name='SearchName', description='The name that is used to search for the logical database.', example='logic_db【logic_db_alias】'),
    }
  ](name='LogicDatabase')
  }(name='LogicDatabaseList', description='The details of logical databases.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8068AF82-8A1A-592C-AC2E-6B75338BAB87'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- **true**: The request is successful.
- **false**: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of logical databases.', example='7'),
}

model ListLogicDatabasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogicDatabasesResponseBody(name='body'),
}

async function listLogicDatabasesWithOptions(request: ListLogicDatabasesRequest, runtime: Util.RuntimeOptions): ListLogicDatabasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogicDatabases',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogicDatabases(request: ListLogicDatabasesRequest): ListLogicDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogicDatabasesWithOptions(request, runtime);
}

model ListLogicTableRouteConfigRequest {
  tableId?: long(name='TableId', description='The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.', example='1****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***'),
}

model ListLogicTableRouteConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingTableId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='TableId is mandatory for this action.'),
  logicTableRouteConfigList?: {
    logicTableRouteConfig?: [ 
    {
      routeExpr?: string(name='RouteExpr', description='The routing algorithm expression.', example='#id#%16\\t'),
      routeKey?: string(name='RouteKey', description='The unique key of the routing algorithm.', example='1'),
      tableId?: long(name='TableId', description='The ID of the logical table.', example='4****'),
    }
  ](name='LogicTableRouteConfig')
  }(name='LogicTableRouteConfigList', description='The routing algorithms.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C6A0D7D-B034-59F6-854C-32425AC6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListLogicTableRouteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogicTableRouteConfigResponseBody(name='body'),
}

async function listLogicTableRouteConfigWithOptions(request: ListLogicTableRouteConfigRequest, runtime: Util.RuntimeOptions): ListLogicTableRouteConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogicTableRouteConfig',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogicTableRouteConfig(request: ListLogicTableRouteConfigRequest): ListLogicTableRouteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogicTableRouteConfigWithOptions(request, runtime);
}

model ListLogicTablesRequest {
  databaseId?: string(name='DatabaseId', example='1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  returnGuid?: boolean(name='ReturnGuid', example='true'),
  searchName?: string(name='SearchName', example='test'),
  tid?: long(name='Tid', example='-1'),
}

model ListLogicTablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  logicTableList?: {
    logicTable?: [ 
    {
      databaseId?: string(name='DatabaseId', example='1'),
      logic?: boolean(name='Logic', example='true'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      schemaName?: string(name='SchemaName', example='yuyang_test'),
      tableCount?: string(name='TableCount', example='4'),
      tableExpr?: string(name='TableExpr', example='test[1-4]'),
      tableGuid?: string(name='TableGuid', example='IDB_L_308302.yuyang_test.test_ch'),
      tableId?: string(name='TableId', example='1'),
      tableName?: string(name='TableName', example='test'),
    }
  ](name='LogicTable')
  }(name='LogicTableList'),
  requestId?: string(name='RequestId', example='F1E6484F-9DF1-4406-9BDE-0861C4629B69'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListLogicTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogicTablesResponseBody(name='body'),
}

async function listLogicTablesWithOptions(request: ListLogicTablesRequest, runtime: Util.RuntimeOptions): ListLogicTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseId)) {
    query['DatabaseId'] = request.databaseId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.returnGuid)) {
    query['ReturnGuid'] = request.returnGuid;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogicTables',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogicTables(request: ListLogicTablesRequest): ListLogicTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogicTablesWithOptions(request, runtime);
}

model ListOrdersRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2022-04-09 11:00:00'),
  orderResultType?: string(name='OrderResultType', description='The scope of the tickets that you want to query. Valid values:

*   **AS_ADMIN**: all tickets.
*   **AS_COMMITTER**: the tickets that are submitted by the current user.
*   **AS_HANDLER**: the tickets to be processed by the current user.
*   **AS_OWNER**: the tickets that are processed by the current user.
*   **AS_Related**: the tickets that are related to the current user.', example='AS_ADMIN'),
  orderStatus?: string(name='OrderStatus', description='The status of the tickets that you want to query. Valid values:

*   **ALL**: queries the tickets of all statuses.
*   **FINISHED**: queries the tickets that are completed.
*   **RUNNING**: queries the tickets that are being processed.', example='ALL'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  pluginType?: string(name='PluginType', description='The type of the tickets that you want to query. For more information, see [PluginType parameter](~~429109~~).', example='DC_COMMON'),
  searchContent?: string(name='SearchContent', description='The keyword that is used to query tickets.', example='test'),
  searchDateType?: string(name='SearchDateType', description='The time condition based on which you want to query tickets. Valid values:

*   **CREATE_TIME**: the time when a ticket was created.
*   **MODIFY_TIME**: the time when a ticket was last modified.', example='CREATE_TIME'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2022-04-08 11:00:00'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3000'),
}

model ListOrdersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  orders?: {
    order?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the ticket.', example='test'),
      committer?: string(name='Committer', description='The user who submitted the ticket.', example='test'),
      committerId?: long(name='CommitterId', description='The ID of the user who submitted the ticket.', example='51****'),
      createTime?: string(name='CreateTime', description='The time when the ticket was created.', example='2022-04-08 11:15:46'),
      lastModifyTime?: string(name='LastModifyTime', description='The time when the ticket was last modified.', example='2022-04-08 11:27:45'),
      orderId?: long(name='OrderId', description='The ID of the ticket.', example='51****'),
      pluginType?: string(name='PluginType', description='The type of the ticket.', example='DC_COMMON'),
      statusCode?: string(name='StatusCode', description='The status code of the ticket. Valid values:

*   **fail**: The ticket fails to be executed.
*   **toaudit**: The ticket is waiting for approval.
*   **cancel**: The ticket is cancelled.
*   **processing**: The ticket is being executed.
*   **approved**: The ticket is approved.
*   **reject**: The ticket is rejected.
*   **success**: The ticket is executed.
*   **closed**: The ticket is closed.', example='success'),
      statusDesc?: string(name='StatusDesc', description='The status description of the ticket.'),
    }
  ](name='Order')
  }(name='Orders', description='The details about the tickets.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model ListOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrdersResponseBody(name='body'),
}

async function listOrdersWithOptions(request: ListOrdersRequest, runtime: Util.RuntimeOptions): ListOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.orderResultType)) {
    query['OrderResultType'] = request.orderResultType;
  }
  if (!Util.isUnset(request.orderStatus)) {
    query['OrderStatus'] = request.orderStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  if (!Util.isUnset(request.searchContent)) {
    query['SearchContent'] = request.searchContent;
  }
  if (!Util.isUnset(request.searchDateType)) {
    query['SearchDateType'] = request.searchDateType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrders',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrders(request: ListOrdersRequest): ListOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrdersWithOptions(request, runtime);
}

model ListProxiesRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.', example='3***'),
}

model ListProxiesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='User can not access to Tenant [123445]'),
  proxyList?: [ 
    {
      creatorId?: long(name='CreatorId', description='The ID of the user who enabled the secure access proxy feature.', example='12****'),
      creatorName?: string(name='CreatorName', description='The nickname of the user who enabled the secure access proxy feature.', example='test_name'),
      httpsPort?: int32(name='HttpsPort', description='The port that was used by HTTPS clients to connect to the database instance.', example='443'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='183****'),
      privateEnable?: boolean(name='PrivateEnable', description='Indicates whether the internal endpoint is enabled. Default value: **true**.', example='true'),
      privateHost?: string(name='PrivateHost', description='The internal endpoint.', example='dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com'),
      protocolPort?: int32(name='ProtocolPort', example='3306'),
      protocolType?: string(name='ProtocolType', example='MYSQL'),
      proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='4**'),
      publicEnable?: boolean(name='PublicEnable', description='Indicates whether the public endpoint is enabled. Valid values:

- **true**: The public endpoint is enabled.
- **false**: The public endpoint is disabled.', example='false'),
      publicHost?: string(name='PublicHost', description='The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.  

> - If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS (DNS) is returned.
- If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using DNS is returned.', example='dphzmy-5j8oimjsz6ze****-pub.proxy.dms.aliyuncs.com'),
    }
  ](name='ProxyList', description='An array that consists of secure access proxies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5812180E-555F-5F90-BE4F-280576F4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListProxiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProxiesResponseBody(name='body'),
}

async function listProxiesWithOptions(request: ListProxiesRequest, runtime: Util.RuntimeOptions): ListProxiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProxies',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProxies(request: ListProxiesRequest): ListProxiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProxiesWithOptions(request, runtime);
}

model ListProxyAccessesRequest {
  proxyId?: long(name='ProxyId', description='The ID of the secure access proxy. 

>  You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) operation to query the ID of the secure access proxy.', example='47'),
  tid?: long(name='Tid', description='The ID of the tenant. 

>  You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the ID of the tenant.', example='3***'),
}

model ListProxyAccessesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingProxyId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='ProxyId is mandatory for this action.'),
  proxyAccessList?: [ 
    {
      accessId?: string(name='AccessId', description='The username of the database account that is authorized to access the database instance by using the secure access proxy feature.', example='MXPL8HalI22m****'),
      gmtCreate?: string(name='GmtCreate', description='The time when the user is authorized to access the database instance by using the secure access proxy feature.', example='2021-03-31 10:34:18'),
      indepAccount?: string(name='IndepAccount', description='The username of the independent database account.', example='****'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='164****'),
      originInfo?: string(name='OriginInfo', description='The method that is used to authorize the user to access the database instance by using the secure access proxy feature. Valid values: 

- **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the user ID (UID) of the Alibaba Cloud account.
- **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.'),
      proxyAccessId?: long(name='ProxyAccessId', description='The ID that DMS generates after the user is authorized to access the database instance by using the secure access proxy feature. The ID is unique in DMS.', example='****'),
      proxyId?: long(name='ProxyId', description='The ID of the secure access proxy.', example='47'),
      userId?: long(name='UserId', description='The ID of the user.', example='26****'),
      userName?: string(name='UserName', description='The nickname of the user.', example='user'),
      userUid?: string(name='UserUid', description='The UID of the Alibaba Cloud account.', example='25936669186260****'),
    }
  ](name='ProxyAccessList', description='The information about the users that are authorized to access the database instance by using the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E53D178A-85E9-5E1F-88B6-3CB1FCF2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListProxyAccessesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProxyAccessesResponseBody(name='body'),
}

async function listProxyAccessesWithOptions(request: ListProxyAccessesRequest, runtime: Util.RuntimeOptions): ListProxyAccessesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProxyAccesses',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProxyAccesses(request: ListProxyAccessesRequest): ListProxyAccessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProxyAccessesWithOptions(request, runtime);
}

model ListProxySQLExecAuditLogRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636962846000'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
  opUserName?: string(name='OpUserName', description='The alias of the user.', example='testNickName'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum values: 100.', example='100'),
  SQLType?: string(name='SQLType', description='The type of SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT'),
  searchName?: string(name='SearchName', description='The name of the database instance.', example='test'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636876446000'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='14****'),
}

model ListProxySQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter StartTime is not valid.'),
  proxySQLExecAuditLogList?: {
    proxySQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='Indicates the total number of rows returned after the SQL statement was executed. If an SELECT SQL statement is executed, the return value of this parameter indicates the total number of the queried data rows.', example='1'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time that is consumed to execute the SQL statement. Unit: milliseconds.', example='1324'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The execution of the SQL statement fails.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the database instance.', example='4***'),
      instanceName?: string(name='InstanceName', description='The name of the database instance.', example='pc-uf662nrg017c6****.mysql.polardb.rds.aliyuncs.com:3306【test】'),
      opTime?: string(name='OpTime', description='The time at which the user executes the SQL statement on the database instance. The value of this parameter must be a timestamp that follows the UNIX time format.', example='1636876446000'),
      remark?: string(name='Remark', description='The description.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was executed.', example='select 1;'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**
*   **INSERT**
*   **DELETE**
*   **CREATE_TABLE**

>  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      userId?: long(name='UserId', description='The ID of the user.', example='4****'),
      userName?: string(name='UserName', description='The nickname of the user.', example='testNickName'),
    }
  ](name='ProxySQLExecAuditLog')
  }(name='ProxySQLExecAuditLogList', description='The audit information about the database instance that is provided by the secure access proxy feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50ECB006-2C35-5FCA-91B9-01987A0B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListProxySQLExecAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProxySQLExecAuditLogResponseBody(name='body'),
}

async function listProxySQLExecAuditLogWithOptions(request: ListProxySQLExecAuditLogRequest, runtime: Util.RuntimeOptions): ListProxySQLExecAuditLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.execState)) {
    query['ExecState'] = request.execState;
  }
  if (!Util.isUnset(request.opUserName)) {
    query['OpUserName'] = request.opUserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLType)) {
    query['SQLType'] = request.SQLType;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProxySQLExecAuditLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProxySQLExecAuditLog(request: ListProxySQLExecAuditLogRequest): ListProxySQLExecAuditLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProxySQLExecAuditLogWithOptions(request, runtime);
}

model ListSLARulesRequest {
  dagId?: long(name='DagId', example='11****'),
  tid?: long(name='Tid', example='3***'),
}

model ListSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='3D1A59F4-EB2B-5D24-80A5-90C446A00DE2'),
  SLARuleList?: {
    SLARule?: [ 
    {
      dagId?: long(name='DagId', example='11****'),
      id?: long(name='Id', example='2'),
      intervalMinutes?: int32(name='IntervalMinutes', example='1080'),
      nodeId?: long(name='NodeId', example='1'),
      ruleType?: int32(name='RuleType', example='0'),
    }
  ](name='SLARule')
  }(name='SLARuleList'),
  success?: boolean(name='Success', example='true'),
}

model ListSLARulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSLARulesResponseBody(name='body'),
}

async function listSLARulesWithOptions(request: ListSLARulesRequest, runtime: Util.RuntimeOptions): ListSLARulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSLARules',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSLARules(request: ListSLARulesRequest): ListSLARulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSLARulesWithOptions(request, runtime);
}

model ListSQLExecAuditLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

>  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. The returned entries can be displayed by page to improve query efficiency.', example='2021-11-08 11:00:00'),
  execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
  opUserName?: string(name='OpUserName', description='The nickname of the user who wrote the SQL statement.', example='test_OpUserName'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value cannot exceed 100.', example='20'),
  searchName?: string(name='SearchName', description='The name of the database or instance based on which you want to query SQL statements.

>  If the SQL statements to be queried are at the instance level, you can set this parameter to an instance name. If the SQL statements to be queried are at the database level, you can set this parameter to a database name.', example='test_SearchName'),
  sqlType?: string(name='SqlType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

>  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.', example='2021-11-08 11:04:00'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
}

model ListSQLExecAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingStartTime'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39BC9C86-95AE-58F2-9862-A7C3D896****'),
  SQLExecAuditLogList?: {
    SQLExecAuditLog?: [ 
    {
      affectRows?: long(name='AffectRows', description='The number of rows affected by the SQL statement. For example, if you execute an SQL statement to query data, the number of retrieved rows is returned.', example='2'),
      dbId?: long(name='DbId', description='The ID of the database.', example='2157****'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time consumed by the execution of the SQL statement. Unit: milliseconds.', example='18'),
      execState?: string(name='ExecState', description='The execution status of the SQL statement. Valid values:

*   **FAIL**: The SQL statement fails to be executed.
*   **NOEXE**: The SQL statement has not been executed.
*   **RUNNING**: The SQL statement is being executed.
*   **CANCEL**: The execution of the SQL statement is canceled.
*   **SUCCESS**: The SQL statement is executed.', example='SUCCESS'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='185***'),
      instanceName?: string(name='InstanceName', description='The name of the database.

>  If the SQL statement takes effect on an instance, the name of the instance is returned.'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
      opTime?: string(name='OpTime', description='The time when the operation specified by the SQL statement was performed on the instance or database.', example='2021-11-08 11:04:27'),
      remark?: string(name='Remark', description='The comment on the SQL statement.', example='success'),
      SQL?: string(name='SQL', description='The SQL statement that was written.', example='SELECT * FROM `polar123`.`p_qw` ORDER BY `id` DESC'),
      SQLType?: string(name='SQLType', description='The type of the SQL statement. Valid values:

*   **SELECT**: the SQL statement that is used to query data.
*   **INSERT**: the SQL statement that is used to insert data.
*   **DELETE**: the SQL statement that is used to delete data.
*   **CREATE_TABLE**: the SQL statement that is used to create tables.

>  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.', example='SELECT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='polar123'),
      userId?: long(name='UserId', description='The ID of the user who wrote the SQL statement.', example='12****'),
      userName?: string(name='UserName', description='The nickname of the user who wrote the SQL statement.', example='test_UserName'),
    }
  ](name='SQLExecAuditLog')
  }(name='SQLExecAuditLogList', description='The entries returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListSQLExecAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSQLExecAuditLogResponseBody(name='body'),
}

async function listSQLExecAuditLogWithOptions(request: ListSQLExecAuditLogRequest, runtime: Util.RuntimeOptions): ListSQLExecAuditLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.execState)) {
    query['ExecState'] = request.execState;
  }
  if (!Util.isUnset(request.opUserName)) {
    query['OpUserName'] = request.opUserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSQLExecAuditLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSQLExecAuditLog(request: ListSQLExecAuditLogRequest): ListSQLExecAuditLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSQLExecAuditLogWithOptions(request, runtime);
}

model ListSQLReviewOriginSQLRequest {
  orderActionDetail?: {
    checkStatusResult?: string(name='CheckStatusResult', description='The review status of the SQL statement. Valid values:

*   **new**: The SQL statement is pending for analysis.
*   **unknown**: The SQL statement failed to be parsed.
*   **check_not_pass**: The SQL statement failed the review.
*   **check_pass**: The SQL statement passed the review.
*   **force_pass**: The SQL statement passed the review by manual effort.
*   **force_not_pass**: The SQL statement failed the review by manual effort.', example='check_not_pass'),
    fileId?: long(name='FileId', description='The ID of the file.', example='123345'),
    page?: {
      pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
      pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
    }(name='Page', description='The paging settings.'),
    SQLReviewResult?: string(name='SQLReviewResult', description='The optimization suggestion for the SQL statement. Valid values:

*   **MUST_IMPROVE**: The SQL statement must be improved.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
*   **USE_DMS_TOOLKIT**: We recommend that you change schemas without locking tables.
*   **USE_DMS_DML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLE_INDEX_SUGGEST**: We recommend that you use SQL statements that use indexes.', example='MUST_IMPROVE'),
  }(name='OrderActionDetail', description='The parameters that are used to filter SQL statements involved in the ticket.'),
  orderId?: long(name='OrderId', description='The ID of the ticket for the SQL review. You can call the [CreateSQLReviewOrder](~~257777~~) operation to query the ID of the ticket.', example='123321'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to query the ID of the tenant.', example='1'),
}

model ListSQLReviewOriginSQLShrinkRequest {
  orderActionDetailShrink?: string(name='OrderActionDetail', description='The parameters that are used to filter SQL statements involved in the ticket.'),
  orderId?: long(name='OrderId', description='The ID of the ticket for the SQL review. You can call the [CreateSQLReviewOrder](~~257777~~) operation to query the ID of the ticket.', example='123321'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to query the ID of the tenant.', example='1'),
}

model ListSQLReviewOriginSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  originSQLList?: [ 
    {
      checkStatus?: string(name='CheckStatus', description='The review status of the SQL statement. Valid values:

*   **new**: The SQL statement is pending for analysis.
*   **unknown**: The SQL statement failed to be parsed.
*   **check_not_pass**: The SQL statement failed the review.
*   **check_pass**: The SQL statement passed the review.
*   **force_pass**: The SQL statement passed the review by manual effort.
*   **force_not_pass**: The SQL statement failed the review by manual effort.', example='check_pass'),
      checkedTime?: string(name='CheckedTime', description='The time when the SQL statement is reviewed.', example='2021-06-09 21:07:00'),
      fileId?: long(name='FileId', description='The ID of the file.', example='123321'),
      fileName?: string(name='FileName', description='The name of the file.', example='test.sql'),
      reviewSummary?: string(name='ReviewSummary', description='The statistics of optimization suggestions for SQL statements. The value is a JSON string. The following optimization suggestions are involved:

*   **MUST_IMPROVE**: The SQL statement must be improved.
*   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
*   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
*   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
*   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
*   **TABLEINDEXSUGGEST**: We recommend that you use SQL statements that use indexes.', example='{"POTENTIAL_ISSUE":1,"SUGGEST_IMPROVE":1}'),
      SQLContent?: string(name='SQLContent', description='The SQL statement.', example='select id from table_name'),
      SQLId?: long(name='SQLId', description='The ID of the SQL statement.', example='1111'),
      SQLName?: string(name='SQLName', example='getByPk'),
      SQLReviewQueryKey?: string(name='SQLReviewQueryKey', description='The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://icms.alibaba-inc.com/content/dms/doc?l=1\\&m=61777\\&n=2712723\\&spm) operation to query the details of optimization suggestions based on the key.', example='a57e54ec5433475ea3082d882fdb89c5'),
      sqlHash?: string(name='SqlHash', description='The MD5 hash value of the SQL statement.', example='95adb6e77a0884d9e50232cb8c5c969d'),
      statusDesc?: string(name='StatusDesc', description='The description of the review status.'),
    }
  ](name='OriginSQLList', description='The information about the parsed SQL statements.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of the SQL statements.', example='10'),
}

model ListSQLReviewOriginSQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSQLReviewOriginSQLResponseBody(name='body'),
}

/**
  * For more information about the SQL review feature, see [SQL review](~~60374~~).
  *
  * @param tmpReq ListSQLReviewOriginSQLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListSQLReviewOriginSQLResponse
 */
async function listSQLReviewOriginSQLWithOptions(tmpReq: ListSQLReviewOriginSQLRequest, runtime: Util.RuntimeOptions): ListSQLReviewOriginSQLResponse {
  Util.validateModel(tmpReq);
  var request = new ListSQLReviewOriginSQLShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.orderActionDetail)) {
    request.orderActionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderActionDetail, 'OrderActionDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.orderActionDetailShrink)) {
    query['OrderActionDetail'] = request.orderActionDetailShrink;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSQLReviewOriginSQL',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the SQL review feature, see [SQL review](~~60374~~).
  *
  * @param request ListSQLReviewOriginSQLRequest
  * @return ListSQLReviewOriginSQLResponse
 */
async function listSQLReviewOriginSQL(request: ListSQLReviewOriginSQLRequest): ListSQLReviewOriginSQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSQLReviewOriginSQLWithOptions(request, runtime);
}

model ListScenariosRequest {
  tid?: long(name='Tid', example='3***'),
}

model ListScenariosResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  scenarioList?: [ 
    {
      creatorId?: string(name='CreatorId', example='23***'),
      description?: string(name='Description', example='test'),
      id?: long(name='Id', example='41***'),
      scenarioName?: string(name='ScenarioName', example='test'),
    }
  ](name='ScenarioList'),
  success?: boolean(name='Success', example='true'),
}

model ListScenariosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListScenariosResponseBody(name='body'),
}

async function listScenariosWithOptions(request: ListScenariosRequest, runtime: Util.RuntimeOptions): ListScenariosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScenarios',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listScenarios(request: ListScenariosRequest): ListScenariosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScenariosWithOptions(request, runtime);
}

model ListSensitiveColumnsRequest {
  columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListColumns](~~141870~~) operation to query the name of the field.', example='test_column'),
  dbId?: long(name='DbId', description='The ID of the database. You can call the [SearchDatabase](~~141876~~) operation to query the ID of the database.

>  You can also call the [ListDatabases](~~141873~~) operation to query the ID of the physical database and the [ListLogicDatabases](~~141874~~) operation to query the ID of a logical database.', example='1860'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='100'),
  schemaName?: string(name='SchemaName', description='The name of the database. You can call the [SearchDatabase](~~141876~~) operation to query the name of the database.

>  You can also call the [ListDatabases](~~141873~~) operation to query the name of a physical database and the [ListLogicDatabases](~~141874~~) operation to query the name of a logical database.', example='test_schema'),
  securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   SENSITIVE: medium sensitivity level
*   CONFIDENTIAL: high sensitivity level', example='SENSITIVE'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListTables](~~141878~~) operation to query the ID of the table.', example='test_table'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3'),
}

model ListSensitiveColumnsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='09D82FD7-F87F-59EF-AA82-AEF71B09E306'),
  sensitiveColumnList?: {
    sensitiveColumn?: [ 
    {
      columnCount?: long(name='ColumnCount', description='The number of sensitive fields.', example='1'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='test_column'),
      functionType?: string(name='FunctionType', description='The type of the de-identification algorithm. Valid values:

*   DEFAULT: All characters are masked. This is the default value.
*   FIX_POS: The characters at specific positions are masked.
*   FIX_CHAR: Specific characters are masked.', example='DEFAULT'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_schema'),
      securityLevel?: string(name='SecurityLevel', description='The sensitivity level of the field. Valid values:

*   SENSITIVE
*   CONFIDENTIAL', example='SENSITIVE'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
    }
  ](name='SensitiveColumn')
  }(name='SensitiveColumnList', description='The sensitive fields.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model ListSensitiveColumnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSensitiveColumnsResponseBody(name='body'),
}

async function listSensitiveColumnsWithOptions(request: ListSensitiveColumnsRequest, runtime: Util.RuntimeOptions): ListSensitiveColumnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.securityLevel)) {
    query['SecurityLevel'] = request.securityLevel;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSensitiveColumns',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSensitiveColumns(request: ListSensitiveColumnsRequest): ListSensitiveColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveColumnsWithOptions(request, runtime);
}

model ListSensitiveColumnsDetailRequest {
  columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the field.

>  You can also call the [ListColumns](~~141870~~) operation to obtain the name of the field.', example='ColumnName_test'),
  dbId?: long(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To obtain the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To obtain the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.', example='false'),
  schemaName?: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the database.

> 
*   You can also call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the name of a physical database.
*   You can also call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation to obtain the name of a logical database.', example='SchemaName_test'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](~~188103~~) operation to obtain the name of the table.

>  You can also call the [ListTables](~~141878~~) operation to obtain the name of the table.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model ListSensitiveColumnsDetailResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7629888F-C9FB-4D16-A7D3-B443FE06FBD4'),
  sensitiveColumnsDetailList?: {
    sensitiveColumnsDetail?: [ 
    {
      columnDescription?: string(name='ColumnDescription', description='The description of the field.', example='test'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='ColumnName_test'),
      columnType?: string(name='ColumnType', description='The data type of the field.', example='varchar(32)'),
      dbId?: long(name='DbId', description='The ID of the database.', example='1860****'),
      dbType?: string(name='DbType', description='The type of the database.', example='mysql'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs.', example='product'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='SchemaName_test'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx:3306'),
      tableName?: string(name='TableName', description='The name of the table.', example='test'),
    }
  ](name='SensitiveColumnsDetail')
  }(name='SensitiveColumnsDetailList', description='The details of the sensitive field.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
}

model ListSensitiveColumnsDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSensitiveColumnsDetailResponseBody(name='body'),
}

async function listSensitiveColumnsDetailWithOptions(request: ListSensitiveColumnsDetailRequest, runtime: Util.RuntimeOptions): ListSensitiveColumnsDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSensitiveColumnsDetail',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSensitiveColumnsDetail(request: ListSensitiveColumnsDetailRequest): ListSensitiveColumnsDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveColumnsDetailWithOptions(request, runtime);
}

model ListSensitiveDataAuditLogRequest {
  columnName?: string(name='ColumnName', example='ExampleColumnName'),
  dbName?: string(name='DbName', example='ExampleDbName'),
  endTime?: string(name='EndTime', example='2022-11-18 11:00:00'),
  moduleName?: string(name='ModuleName', example='SQL_CONSOLE'),
  opUserName?: string(name='OpUserName', example='ExampleOpUserName'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  startTime?: string(name='StartTime', example='2022-11-18 10:00:00'),
  tableName?: string(name='TableName', example='ExampleTableName'),
  tid?: long(name='Tid', example='3***'),
}

model ListSensitiveDataAuditLogResponseBody = {
  errorCode?: string(name='ErrorCode', example='403'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  sensitiveDataAuditLogList?: [ 
    {
      dbDisplayName?: string(name='DbDisplayName', example='ExampleDbName@xxx.xxx.xxx.xxx:3306'),
      instanceId?: long(name='InstanceId', example='12****'),
      moduleName?: string(name='ModuleName', example='SQL_CONSOLE'),
      opTime?: string(name='OpTime', example='2022-11-18 10:01:00'),
      sensitiveDataLog?: [ 
        {
          columnName?: string(name='ColumnName', example='ExampleColumnName'),
          columnPermissionType?: string(name='ColumnPermissionType'),
          desensitizationRule?: string(name='DesensitizationRule'),
          securityLevel?: string(name='SecurityLevel'),
          tableName?: string(name='TableName', example='ExampleTableName'),
        }
      ](name='SensitiveDataLog'),
      targetName?: string(name='TargetName'),
      userId?: long(name='UserId', example='1**'),
      userName?: string(name='UserName', example='ExampleUserName'),
    }
  ](name='SensitiveDataAuditLogList'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListSensitiveDataAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSensitiveDataAuditLogResponseBody(name='body'),
}

async function listSensitiveDataAuditLogWithOptions(request: ListSensitiveDataAuditLogRequest, runtime: Util.RuntimeOptions): ListSensitiveDataAuditLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.opUserName)) {
    query['OpUserName'] = request.opUserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSensitiveDataAuditLog',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSensitiveDataAuditLog(request: ListSensitiveDataAuditLogRequest): ListSensitiveDataAuditLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSensitiveDataAuditLogWithOptions(request, runtime);
}

model ListStandardGroupsRequest {
  tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
}

model ListStandardGroupsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  standardGroupList?: [ 
    {
      dbType?: string(name='DbType', description='The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='mysql'),
      description?: string(name='Description', description='The description of the security rule set.'),
      groupId?: long(name='GroupId', example='41****'),
      groupMode?: string(name='GroupMode', description='The control mode. Valid values:

*   **NONE_CONTROL**: Flexible Management
*   **STABLE**: Stable Change
*   **COMMON**: Security Collaboration', example='COMMON'),
      groupName?: string(name='GroupName', description='The name of the security rule set.'),
      lastMenderId?: long(name='LastMenderId', description='The ID of the user who queries the security sets.', example='51****'),
    }
  ](name='StandardGroupList', description='The security rule sets returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListStandardGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStandardGroupsResponseBody(name='body'),
}

async function listStandardGroupsWithOptions(request: ListStandardGroupsRequest, runtime: Util.RuntimeOptions): ListStandardGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListStandardGroups',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listStandardGroups(request: ListStandardGroupsRequest): ListStandardGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStandardGroupsWithOptions(request, runtime);
}

model ListTablesRequest {
  databaseId?: string(name='DatabaseId', description='The ID of the physical database. You can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to obtain the ID of the physical database.', example='1860****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  returnGuid?: boolean(name='ReturnGuid', description='Specifies whether to return the GUID of a table. Valid values:

*   **true**: returns the GUID of a table.
*   **false**: does not return the GUID of a table.', example='true'),
  searchName?: string(name='SearchName', description='The name used to search for tables. Fuzzy search is supported.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model ListTablesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B16FB618-5E96-4FFD-BB0D-490C890A4030'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  tableList?: {
    table?: [ 
    {
      databaseId?: string(name='DatabaseId', description='The ID of the physical database.', example='1860****'),
      description?: string(name='Description', description='The description of the table.', example='test'),
      encoding?: string(name='Encoding', description='The encoding format of the table.', example='utf8'),
      engine?: string(name='Engine', description='The engine of the table.', example='InnoDB'),
      numRows?: long(name='NumRows', description='The number of rows in the table. This is a statistical value and does not indicate the actual number of rows.', example='10085'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the table.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the owners of the table.'),
      storeCapacity?: long(name='StoreCapacity', description='The storage space that is occupied by the table. This is a statistical value and does not indicate the accurate storage space. Unit: MB.', example='1024'),
      tableGuid?: string(name='TableGuid', description='The GUID of the table in DMS.', example='IDB_44743****.qntest.consumption_records'),
      tableId?: string(name='TableId', description='The ID of the table.', example='44743****'),
      tableName?: string(name='TableName', description='The name of the table.', example='consumption_records'),
      tableSchemaName?: string(name='TableSchemaName', description='The database in which the table resides.', example='qntest'),
      tableType?: string(name='TableType', description='The type of the table. Default value: NORMAL.', example='NORMAL'),
    }
  ](name='Table')
  }(name='TableList', description='The details of the tables.'),
  totalCount?: long(name='TotalCount', description='The total number of tables that meet the query conditions.', example='1'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTablesResponseBody(name='body'),
}

async function listTablesWithOptions(request: ListTablesRequest, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseId)) {
    query['DatabaseId'] = request.databaseId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.returnGuid)) {
    query['ReturnGuid'] = request.returnGuid;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTables',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTablesWithOptions(request, runtime);
}

model ListTaskFlowRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model ListTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4116147E-C628-5816-8779-8EEAF8E973F4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', description='The ID of the user who creates the task flow.', example='51****'),
      creatorNickName?: string(name='CreatorNickName', description='The name of the user who creates the task flow.', example='Creator_NickName'),
      dagOwnerNickName?: string(name='DagOwnerNickName', description='The name of the task flow owner.', example='Owner_NickName'),
      deployId?: long(name='DeployId', description='The ID of the latest deployment record.', example='12**'),
      id?: long(name='Id', description='The ID of the task flow.', example='134137****'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', description='The status of the latest execution. Valid values:

*   **0**: invalid.
*   **1**: scheduling disabled.
*   **2**: waiting to be scheduled.', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', description='The time when the latest execution record was generated.', example='2022-04-13'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: The task flow is invalid.
*   **1**: Scheduling is disabled for the task flow.
*   **2**: The task flow is waiting to be scheduled.', example='2'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList', description='The information about the task flows returned.'),
}

model ListTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowResponseBody(name='body'),
}

async function listTaskFlowWithOptions(request: ListTaskFlowRequest, runtime: Util.RuntimeOptions): ListTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlow(request: ListTaskFlowRequest): ListTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowWithOptions(request, runtime);
}

model ListTaskFlowConstantsRequest {
  dagId?: long(name='DagId', example='3****'),
  tid?: long(name='Tid', example='3***'),
}

model ListTaskFlowConstantsResponseBody = {
  dagConstants?: {
    dagConstant?: [ 
    {
      key?: string(name='Key', example='example'),
      value?: string(name='Value', example='0'),
    }
  ](name='DagConstant')
  }(name='DagConstants'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskFlowConstantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowConstantsResponseBody(name='body'),
}

async function listTaskFlowConstantsWithOptions(request: ListTaskFlowConstantsRequest, runtime: Util.RuntimeOptions): ListTaskFlowConstantsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowConstants',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlowConstants(request: ListTaskFlowConstantsRequest): ListTaskFlowConstantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowConstantsWithOptions(request, runtime);
}

model ListTaskFlowCooperatorsRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ListTaskFlowCooperatorsResponseBody = {
  cooperatorList?: {
    cooperator?: [ 
    {
      email?: string(name='Email', description='The email address of the user.', example='test@XX.com'),
      loginName?: string(name='LoginName', description='The username.', example='name'),
      nickName?: string(name='NickName', description='The alias of the user.', example='name'),
      userId?: string(name='UserId'),
    }
  ](name='Cooperator')
  }(name='CooperatorList', description='The users that are involved in the task flow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='54C99C70-2DFF-5A8C-A252-EBAA1EB668EC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListTaskFlowCooperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowCooperatorsResponseBody(name='body'),
}

async function listTaskFlowCooperatorsWithOptions(request: ListTaskFlowCooperatorsRequest, runtime: Util.RuntimeOptions): ListTaskFlowCooperatorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowCooperators',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlowCooperators(request: ListTaskFlowCooperatorsRequest): ListTaskFlowCooperatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowCooperatorsWithOptions(request, runtime);
}

model ListTaskFlowEdgesByConditionRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
  nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
  nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ListTaskFlowEdgesByConditionResponseBody = {
  edges?: {
    edge?: [ 
    {
      id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
    }
  ](name='Edge')
  }(name='Edges', description='The list of task flow edges.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='D86249CD-422F-5ACF-85BA-9187C986AE0B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListTaskFlowEdgesByConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowEdgesByConditionResponseBody(name='body'),
}

/**
  * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
  *
  * @param request ListTaskFlowEdgesByConditionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTaskFlowEdgesByConditionResponse
 */
async function listTaskFlowEdgesByConditionWithOptions(request: ListTaskFlowEdgesByConditionRequest, runtime: Util.RuntimeOptions): ListTaskFlowEdgesByConditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.nodeEnd)) {
    query['NodeEnd'] = request.nodeEnd;
  }
  if (!Util.isUnset(request.nodeFrom)) {
    query['NodeFrom'] = request.nodeFrom;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowEdgesByCondition',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
  *
  * @param request ListTaskFlowEdgesByConditionRequest
  * @return ListTaskFlowEdgesByConditionResponse
 */
async function listTaskFlowEdgesByCondition(request: ListTaskFlowEdgesByConditionRequest): ListTaskFlowEdgesByConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowEdgesByConditionWithOptions(request, runtime);
}

model ListTaskFlowInstanceRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='7***'),
  pageIndex?: int32(name='PageIndex', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTimeBegin?: string(name='StartTimeBegin', description='The beginning of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='2022-01-07'),
  startTimeEnd?: string(name='StartTimeEnd', description='The end of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.', example='2022-04-08'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
  triggerType?: int32(name='TriggerType', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='1'),
}

model ListTaskFlowInstanceResponseBody = {
  DAGInstanceList?: {
    DAGInstance?: [ 
    {
      businessTime?: string(name='BusinessTime', description='The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-10 14:37:26'),
      dagId?: string(name='DagId', description='The ID of the task flow.', example='7***'),
      dagName?: string(name='DagName', description='The name of the task flow.', example='Spark_SQL_test'),
      dagVersion?: string(name='DagVersion', example='[]'),
      endTime?: string(name='EndTime', description='The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.', example='2021-11-11 14:38:57'),
      historyDagId?: long(name='HistoryDagId', description='The ID of the previously published version of the task flow.', example='2****'),
      id?: long(name='Id', description='The ID of the execution record.', example='9234'),
      message?: string(name='Message', description='The description of the task.', example='test'),
      ownerName?: string(name='OwnerName', description='The name of the task flow owner.', example='test_name'),
      status?: int32(name='Status', description='The status of the task flow. Valid values:

*   **0**: The task flow is waiting to be scheduled.
*   **1**: The task flow is being executed.
*   **2**: The task flow is paused.
*   **3**: The task flow failed.
*   **4**: The task flow is executed.
*   **5**: The task flow is complete.', example='4'),
      triggerType?: int32(name='TriggerType', description='The mode in which the task flow is triggered. Valid values:

*   **0**: The task flow is automatically triggered based on periodic scheduling.
*   **1**: The task flow is manually triggered.', example='1'),
    }
  ](name='DAGInstance')
  }(name='DAGInstanceList', description='The information about the execution records returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of execution records returned.', example='1'),
}

model ListTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowInstanceResponseBody(name='body'),
}

async function listTaskFlowInstanceWithOptions(request: ListTaskFlowInstanceRequest, runtime: Util.RuntimeOptions): ListTaskFlowInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTimeBegin)) {
    query['StartTimeBegin'] = request.startTimeBegin;
  }
  if (!Util.isUnset(request.startTimeEnd)) {
    query['StartTimeEnd'] = request.startTimeEnd;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.triggerType)) {
    query['TriggerType'] = request.triggerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlowInstance(request: ListTaskFlowInstanceRequest): ListTaskFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowInstanceWithOptions(request, runtime);
}

model ListTaskFlowTimeVariablesRequest {
  dagId?: long(name='DagId', example='11****'),
  tid?: long(name='Tid', example='3***'),
}

model ListTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='EC12A3BE-149F-5365-AF33-12CC8C963923'),
  success?: boolean(name='Success', example='true'),
  timeVariables?: {
    timeVariable?: [ 
    {
      name?: string(name='Name', example='time_test'),
      pattern?: string(name='Pattern', example='2018-09-26|+7h'),
    }
  ](name='TimeVariable')
  }(name='TimeVariables'),
}

model ListTaskFlowTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowTimeVariablesResponseBody(name='body'),
}

async function listTaskFlowTimeVariablesWithOptions(request: ListTaskFlowTimeVariablesRequest, runtime: Util.RuntimeOptions): ListTaskFlowTimeVariablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowTimeVariables',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlowTimeVariables(request: ListTaskFlowTimeVariablesRequest): ListTaskFlowTimeVariablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowTimeVariablesWithOptions(request, runtime);
}

model ListTaskFlowsByPageRequest {
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  searchKey?: string(name='SearchKey'),
  tid?: long(name='Tid', example='3***'),
}

model ListTaskFlowsByPageResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='6CB28697-BFE2-5739-9228-3971990E982C'),
  success?: boolean(name='Success', example='true'),
  taskFlowList?: {
    taskFlow?: [ 
    {
      creatorId?: string(name='CreatorId', example='51****'),
      creatorNickName?: string(name='CreatorNickName', example='Creator_NickName'),
      dagName?: string(name='DagName', example='poc_task_test'),
      dagOwnerNickName?: string(name='DagOwnerNickName', example='Owner_NickName'),
      deployId?: long(name='DeployId', example='65***'),
      description?: string(name='Description', example='test'),
      id?: long(name='Id', example='7***'),
      latestInstanceStatus?: int32(name='LatestInstanceStatus', example='0'),
      latestInstanceTime?: string(name='LatestInstanceTime', example='2022-04-13'),
      status?: int32(name='Status', example='1'),
    }
  ](name='TaskFlow')
  }(name='TaskFlowList'),
  totalCount?: int32(name='TotalCount', example='24'),
}

model ListTaskFlowsByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskFlowsByPageResponseBody(name='body'),
}

async function listTaskFlowsByPageWithOptions(request: ListTaskFlowsByPageRequest, runtime: Util.RuntimeOptions): ListTaskFlowsByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskFlowsByPage',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskFlowsByPage(request: ListTaskFlowsByPageRequest): ListTaskFlowsByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskFlowsByPageWithOptions(request, runtime);
}

model ListTasksInTaskFlowRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='32***'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ListTasksInTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='8B36B063-6B7D-5595-9FCF-3844B7B7ACD4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  tasks?: {
    task?: [ 
    {
      graphParam?: string(name='GraphParam', description='The position of the node on the Directed Acyclic Graph (DAG).', example='{\\"x\\":435,\\"y\\":192,\\"layoutType\\":\\"Horizontal\\"}'),
      nodeConfig?: string(name='NodeConfig', description='The advanced configuration for the node.'),
      nodeContent?: string(name='NodeContent', description='The configuration for the node.'),
      nodeId?: string(name='NodeId', description='The ID of the node.', example='92***'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Cross-Database Spark SQL-1'),
      nodeOutput?: string(name='NodeOutput', description='The output variables for the task.'),
      nodeType?: string(name='NodeType', description='The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](~~424705~~).', example='SPARK_SQL'),
      timeVariables?: string(name='TimeVariables', description='The time variables configured for the node.'),
    }
  ](name='Task')
  }(name='Tasks', description='The tasks in the task flow.'),
}

model ListTasksInTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksInTaskFlowResponseBody(name='body'),
}

async function listTasksInTaskFlowWithOptions(request: ListTasksInTaskFlowRequest, runtime: Util.RuntimeOptions): ListTasksInTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasksInTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasksInTaskFlow(request: ListTasksInTaskFlowRequest): ListTasksInTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksInTaskFlowWithOptions(request, runtime);
}

model ListUserPermissionsRequest {
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='db_name'),
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='polardb'),
  envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: staging environment
*   test: test environment
*   sit: SIT environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: STAG environment', example='dev'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5'),
  permType?: string(name='PermType', description='The permissions on a specific type of resources that you want to query. Valid values:

*   DATABASE: permissions on databases
*   TABLE: permissions on tables
*   COLUMN: permissions on fields
*   INSTANCE: permissions on instances', example='DATABASE'),
  searchKey?: string(name='SearchKey', description='The keyword used in the query. For example, if you want to query permissions on an instance, you can specify the endpoint of the instance, such as rm-bp144d5ky4l4r****.', example='rm-bp144d5ky4l4r****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the ID of the user.

>  The user ID is different from the ID of your Alibaba Cloud account.', example='51****'),
}

model ListUserPermissionsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- true: The request is successful.
- false: The request fails.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries that meet the query conditions.', example='1'),
  userPermissions?: {
    userPermission?: [ 
    {
      alias?: string(name='Alias', description='The alias of the instance.', example='instance_alias'),
      columnName?: string(name='ColumnName', description='The name of the field.', example='column_name'),
      dbId?: string(name='DbId', description='The ID of the database.', example='1860****'),
      dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).', example='polardb'),
      dsType?: string(name='DsType', description='The permissions on a specific type of objects that are granted to the user. Valid values: 

- DATABASE: permissions on physical databases
- LOGIC_DATABASE: permissions on logical databases
- TABLE: permissions on physical tables
- LOGIC_TABLE: permissions on logical tables', example='DATABASE'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs. Valid values:

- product: production environment
- dev: development environment
- pre: staging environment
- test: test environment
- sit: SIT environment
- uat: UAT environment
- pet: stress testing environment
- stag: STAG environment', example='dev'),
      host?: string(name='Host', description='The endpoint that is used to connect the database.', example='rm-bp144d5ky4l4r****'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='174****'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   true: The database is a logical database.
*   false: The database is a physical database.', example='false'),
      permDetails?: {
        permDetail?: [ 
        {
          createDate?: string(name='CreateDate', description='The time when the permissions were granted.', example='2019-12-12 00:00:00'),
          expireDate?: string(name='ExpireDate', description='The time when the permissions expire.', example='2020-12-12 00:00:00'),
          extraData?: string(name='ExtraData', description='This parameter is reserved.', example='xxx'),
          originFrom?: string(name='OriginFrom', description='The user who grants the permissions.'),
          permType?: string(name='PermType', description='The type of the permissions. Valid values:

*   QUERY: the query permissions
*   EXPORT: the export permissions
*   CORRECT: the change permissions', example='QUERY'),
          userAccessId?: string(name='UserAccessId', description='The ID of the authorization record.', example='758****'),
        }
      ](name='PermDetail')
      }(name='PermDetails', description='The details of permissions.'),
      port?: long(name='Port', description='The port that is used to connect to the instance.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test_db'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test_db@xxx:3306'),
      tableId?: string(name='TableId', description='The ID of the table.', example='13434'),
      tableName?: string(name='TableName', description='The name of the table.', example='test_table'),
      userId?: string(name='UserId', description='The ID of the user.', example='51****'),
      userNickName?: string(name='UserNickName', description='The nickname of the user.', example='nick_name'),
    }
  ](name='UserPermission')
  }(name='UserPermissions', description='The details of the permissions that the user has.'),
}

model ListUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserPermissionsResponseBody(name='body'),
}

async function listUserPermissionsWithOptions(request: ListUserPermissionsRequest, runtime: Util.RuntimeOptions): ListUserPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.permType)) {
    query['PermType'] = request.permType;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserPermissions',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserPermissions(request: ListUserPermissionsRequest): ListUserPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserPermissionsWithOptions(request, runtime);
}

model ListUserTenantsRequest {
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model ListUserTenantsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='TenantNotExist'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified tenant does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C478D9DA-3615-50F6-A2BC-7855AD65****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
  tenantList?: [ 
    {
      status?: string(name='Status', description='The status of the tenant. Valid values:

*   **ACTIVE**: The tenant is used to access DMS.
*   **IN_ACTIVE**: The tenant is not used.', example='ACTIVE'),
      tenantName?: string(name='TenantName', description='The name of the tenant.', example='test_name'),
      tid?: long(name='Tid', description='The ID of the tenant.', example='3***'),
    }
  ](name='TenantList', description='The details of the tenants that were returned.'),
}

model ListUserTenantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserTenantsResponseBody(name='body'),
}

async function listUserTenantsWithOptions(request: ListUserTenantsRequest, runtime: Util.RuntimeOptions): ListUserTenantsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserTenants',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserTenants(request: ListUserTenantsRequest): ListUserTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserTenantsWithOptions(request, runtime);
}

model ListUsersRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

>  Valid values: 10, 20, 50, and 100. Default value: 10.', example='10'),
  role?: string(name='Role', description='The role that is assigned to the user. Valid values:

*   **USER**: a regular user role.
*   **DBA**: a database administrator (DBA) role.
*   **ADMIN**: a Data Management (DMS) administrator role.
*   **SECURITY_ADMIN**: a security administrator role.
*   **STRUCT_READ_ONLY**: a schema read-only user role.

>  To check your role, move the pointer over the profile picture in the upper-right corner of the DMS console.', example='DBA'),
  searchKey?: string(name='SearchKey', description='The search keyword. Fuzzy match is supported.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the ID of the tenant.', example='3***'),
  userState?: string(name='UserState', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
}

model ListUsersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidTid'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter Tid is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='67E910F2-4B62-5B0C-ACA3-7547695C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='3'),
  userList?: {
    user?: [ 
    {
      curExecuteCount?: long(name='CurExecuteCount', description='The number of queries that are performed on the current day.', example='0'),
      curResultCount?: long(name='CurResultCount', description='The number of rows that are queried on the current day.', example='0'),
      dingRobot?: string(name='DingRobot', description='The DingTalk chatbot URL that is used to receive notifications.

> 
*   The system returns this parameter if the user has set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set a DingTalk chatbot URL.', example='https://XXX.dingtalk.com/robot/send?access_token=9b7a4a562cbe7fcdea9962afac7b9d7b4504d564948083419750f9cafa78e4ef'),
      email?: string(name='Email', description='The email address that is used to receive notifications.

> 
*   The system returns this parameter if the user has set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set an email address.', example='username@example.com'),
      lastLoginTime?: string(name='LastLoginTime', description='The last time when the user logged on to the console.', example='2021-11-08 13:43:43'),
      maxExecuteCount?: long(name='MaxExecuteCount', description='The maximum number of queries that can be performed on the current day.', example='2000'),
      maxResultCount?: long(name='MaxResultCount', description='The maximum number of rows that can be queried on the current day.', example='50000'),
      mobile?: string(name='Mobile', description='The mobile phone number that is used to receive notifications.

> 
*   The system returns this parameter if the user has set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
*   The system does not return this parameter if the user has not set a mobile phone number.', example='1389999****'),
      nickName?: string(name='NickName', description='The nickname of the user.', example='test_NickName'),
      notificationMode?: string(name='NotificationMode', description='The notification method. The system returns one or more values. Valid values:

*   **SMS**: text message.
*   **EMAIL**: email.
*   **DingTalk**: DingTalk.
*   **DINGROBOT**: DingTalk chatbot.
*   **WEBHOOK**: webhook.', example='DINGROBOT'),
      parentUid?: string(name='ParentUid', description='The UID of the Alibaba Cloud account of the user.', example='140692647406****'),
      roleIdList?: {
        roleIds?: [ int32 ](name='RoleIds')
      }(name='RoleIdList', description='The ID of the role that is assigned to the user. Valid values:

*   **1**: a regular user role.
*   **2**: a DBA role.
*   **3**: a DMS administrator role.
*   **4**: a security administrator role.
*   **6**: a schema read-only user role.'),
      roleNameList?: {
        roleNames?: [ string ](name='RoleNames')
      }(name='RoleNameList', description='The name of the role that is assigned to the user. Valid values:

*   **USER**: a regular user.
*   **DBA**: a DBA.
*   **ADMIN**: a DMS administrator.
*   **SECURITY_ADMIN**: a security administrator.
*   **STRUCT_READ_ONLY**: a schema read-only user.'),
      signatureMethod?: string(name='SignatureMethod', description='The signature method that is used to secure connections when a webhook URL is used. Valid values:

*   **NONE**: no signature.
*   **HMAC_SHA1**: HMAC-SHA1.', example='HMAC_SHA1'),
      state?: string(name='State', description='The status of the user. Valid values:

*   **NORMAL**: The user is normal.
*   **DISABLE**: The user is disabled.
*   **DELETE**: The user is deleted.', example='NORMAL'),
      uid?: string(name='Uid', description='The UID of the user.', example='167382665015****'),
      userId?: string(name='UserId', description='The ID of the user.', example='8****'),
      webhook?: string(name='Webhook', description='The webhook URL that is used to receive notifications.

> 
*   If the user has set a webhook URL, DMS sends notifications to the specified URL.
*   The system does not return this parameter if the user has not set a webhook URL.', example='http://dms-XXX.aliyun.com:8***'),
    }
  ](name='User')
  }(name='UserList', description='The details of users.'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userState)) {
    query['UserState'] = request.userState;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListWorkFlowNodesRequest {
  searchName?: string(name='SearchName', example='admin'),
  tid?: long(name='Tid', example='-1'),
}

model ListWorkFlowNodesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='CFD8FE00-36D9-4C1B-940D-65A7B73D9066'),
  success?: boolean(name='Success', example='true'),
  workflowNodes?: {
    workflowNode?: [ 
    {
      auditUsers?: {
        auditUser?: [ 
        {
          nickName?: string(name='NickName', example='test'),
          realName?: string(name='RealName', example='test'),
          userId?: long(name='UserId', example='123'),
        }
      ](name='AuditUser')
      }(name='AuditUsers'),
      comment?: string(name='Comment', example='test'),
      createUserId?: long(name='CreateUserId', example='123'),
      createUserNickName?: string(name='CreateUserNickName', example='test'),
      nodeId?: long(name='NodeId', example='123'),
      nodeName?: string(name='NodeName', example='test'),
      nodeType?: string(name='NodeType', example='SYS'),
    }
  ](name='WorkflowNode')
  }(name='WorkflowNodes'),
}

model ListWorkFlowNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkFlowNodesResponseBody(name='body'),
}

async function listWorkFlowNodesWithOptions(request: ListWorkFlowNodesRequest, runtime: Util.RuntimeOptions): ListWorkFlowNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkFlowNodes',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWorkFlowNodes(request: ListWorkFlowNodesRequest): ListWorkFlowNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkFlowNodesWithOptions(request, runtime);
}

model ListWorkFlowTemplatesRequest {
  searchName?: string(name='SearchName', example='Admin'),
  tid?: long(name='Tid', example='-1'),
}

model ListWorkFlowTemplatesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='41067071-0243-4AAB-B3CF-4DE6D54F53B4'),
  success?: boolean(name='Success', example='true'),
  workFlowTemplates?: {
    workFlowTemplate?: [ 
    {
      comment?: string(name='Comment', example='test'),
      createUserId?: long(name='CreateUserId', example='1234'),
      enabled?: string(name='Enabled', example='Y'),
      isSystem?: int32(name='IsSystem', example='1'),
      templateId?: long(name='TemplateId', example='12345'),
      templateName?: string(name='TemplateName', example='Admin'),
      workflowNodes?: {
        workflowNode?: [ 
        {
          comment?: string(name='Comment', example='test'),
          createUserId?: long(name='CreateUserId', example='1234'),
          nodeId?: long(name='NodeId', example='123'),
          nodeName?: string(name='NodeName', example='test'),
          nodeType?: string(name='NodeType', example='SYS'),
          position?: int32(name='Position', example='1'),
          templateId?: long(name='TemplateId', example='12345'),
        }
      ](name='WorkflowNode')
      }(name='WorkflowNodes'),
    }
  ](name='WorkFlowTemplate')
  }(name='WorkFlowTemplates'),
}

model ListWorkFlowTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkFlowTemplatesResponseBody(name='body'),
}

async function listWorkFlowTemplatesWithOptions(request: ListWorkFlowTemplatesRequest, runtime: Util.RuntimeOptions): ListWorkFlowTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkFlowTemplates',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWorkFlowTemplates(request: ListWorkFlowTemplatesRequest): ListWorkFlowTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkFlowTemplatesWithOptions(request, runtime);
}

model MakeTaskFlowInstanceSuccessRequest {
  dagId?: long(name='DagId', example='7***'),
  dagInstanceId?: long(name='DagInstanceId', example='47****'),
  tid?: long(name='Tid', example='3***'),
}

model MakeTaskFlowInstanceSuccessResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='028BF827-3801-5869-8548-F4A039256304'),
  success?: boolean(name='Success', example='true'),
}

model MakeTaskFlowInstanceSuccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MakeTaskFlowInstanceSuccessResponseBody(name='body'),
}

async function makeTaskFlowInstanceSuccessWithOptions(request: MakeTaskFlowInstanceSuccessRequest, runtime: Util.RuntimeOptions): MakeTaskFlowInstanceSuccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MakeTaskFlowInstanceSuccess',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function makeTaskFlowInstanceSuccess(request: MakeTaskFlowInstanceSuccessRequest): MakeTaskFlowInstanceSuccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return makeTaskFlowInstanceSuccessWithOptions(request, runtime);
}

model ModifyDataCorrectExecSQLRequest {
  execSQL?: string(name='ExecSQL', description='The new SQL script.', example='update tb set id = 1 where id = 1;'),
  orderId?: long(name='OrderId', description='The ID of the data change ticket.', example='4328****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='4****'),
}

model ModifyDataCorrectExecSQLResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='InvalidOrderId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Specified parameter OrderId is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C1CB646-1DE4-4AD0-B4A4-7D47DD52****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyDataCorrectExecSQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataCorrectExecSQLResponseBody(name='body'),
}

async function modifyDataCorrectExecSQLWithOptions(request: ModifyDataCorrectExecSQLRequest, runtime: Util.RuntimeOptions): ModifyDataCorrectExecSQLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.execSQL)) {
    query['ExecSQL'] = request.execSQL;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataCorrectExecSQL',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataCorrectExecSQL(request: ModifyDataCorrectExecSQLRequest): ModifyDataCorrectExecSQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataCorrectExecSQLWithOptions(request, runtime);
}

model ModifyDesensitizationStrategyRequest {
  columnName?: string(name='ColumnName', description='The name of the field. You can call the [ListSensitiveColumns](~~188103~~) operation to query the field name.

>  You can also call the [ListColumns](~~141870~~) operation to query the field name.', example='test_column'),
  dbId?: int32(name='DbId', description='The ID of the database. You can call the [ListDatabases](~~141873~~) operation to query the ID.', example='123'),
  isLogic?: boolean(name='IsLogic', description='Specifies whether the database is a logical database. Valid values:

*   **true:** The database is a physical database.
*   **false:** The database is a logical database.', example='false'),
  isReset?: boolean(name='IsReset', description='Specifies whether to reset the masking rule. Valid values:

*   **true**: resets the masking rule.
*   **false**: does not reset the masking rule. This is the default value.', example='false'),
  ruleId?: int32(name='RuleId', description='The ID of the masking rule.', example='53'),
  schemaName?: string(name='SchemaName', description='The name of the database. You can call the [ListSensitiveColumns](~~188103~~) operation to query the database name.

> 
*   If the database is a physical database, you can call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation to query the database name.
*   If the database is a logical database, you can call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation to query the database name.', example='test_schema'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListSensitiveColumns](~~188103~~) operation to query the table name.

>  You can also call the [ListTables](~~141878~~) operation to query the table name.', example='test_table'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ModifyDesensitizationStrategyResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='283C461F-11D8-48AA-B695-DF092DA32AF3'),
  result?: boolean(name='Result', description='The returned result.', example='True'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
}

model ModifyDesensitizationStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesensitizationStrategyResponseBody(name='body'),
}

async function modifyDesensitizationStrategyWithOptions(request: ModifyDesensitizationStrategyRequest, runtime: Util.RuntimeOptions): ModifyDesensitizationStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.isLogic)) {
    query['IsLogic'] = request.isLogic;
  }
  if (!Util.isUnset(request.isReset)) {
    query['IsReset'] = request.isReset;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesensitizationStrategy',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDesensitizationStrategy(request: ModifyDesensitizationStrategyRequest): ModifyDesensitizationStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesensitizationStrategyWithOptions(request, runtime);
}

model MoveTaskFlowToScenarioRequest {
  dagId?: long(name='DagId', example='11****'),
  scenarioId?: long(name='ScenarioId', example='1****'),
  tid?: long(name='Tid', example='3***'),
}

model MoveTaskFlowToScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D85FD18C-4322-5D49-8C14-5A10E668F86C'),
  success?: boolean(name='Success', example='true'),
}

model MoveTaskFlowToScenarioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveTaskFlowToScenarioResponseBody(name='body'),
}

async function moveTaskFlowToScenarioWithOptions(request: MoveTaskFlowToScenarioRequest, runtime: Util.RuntimeOptions): MoveTaskFlowToScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveTaskFlowToScenario',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveTaskFlowToScenario(request: MoveTaskFlowToScenarioRequest): MoveTaskFlowToScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveTaskFlowToScenarioWithOptions(request, runtime);
}

model OfflineTaskFlowRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the task flow ID.', example='7***'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the tenant ID.', example='3***'),
}

model OfflineTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A8FE12AA-300D-5FDF-806F-C2CB99161F32'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model OfflineTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineTaskFlowResponseBody(name='body'),
}

async function offlineTaskFlowWithOptions(request: OfflineTaskFlowRequest, runtime: Util.RuntimeOptions): OfflineTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OfflineTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineTaskFlow(request: OfflineTaskFlowRequest): OfflineTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineTaskFlowWithOptions(request, runtime);
}

model PauseDataCorrectSQLJobRequest {
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](~~208481~~) and [ListDBTaskSQLJob](~~207049~~) operations to obtain the value of this parameter.

>  If the Type parameter is set to SINGLE, you must pass the value of the JobId parameter to confirm the ID of the SQL task that you want to rerun.', example='43253'),
  orderId?: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the data change ticket.', example='43253'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='4325'),
  type?: string(name='Type', description='The type of the pause operation. Valid values:

*   ALL: pauses all SQL tasks.
*   SINGLE: pauses a single SQL task.', example='SINGLE'),
}

model PauseDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='335C5BC8-490C-56EF-BDDE-94A4B53FEB72'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model PauseDataCorrectSQLJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseDataCorrectSQLJobResponseBody(name='body'),
}

async function pauseDataCorrectSQLJobWithOptions(request: PauseDataCorrectSQLJobRequest, runtime: Util.RuntimeOptions): PauseDataCorrectSQLJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseDataCorrectSQLJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseDataCorrectSQLJob(request: PauseDataCorrectSQLJobRequest): PauseDataCorrectSQLJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseDataCorrectSQLJobWithOptions(request, runtime);
}

model PublishAndDeployTaskFlowRequest {
  dagId?: long(name='DagId', example='7***'),
  tid?: long(name='Tid', example='3***'),
  versionComments?: string(name='VersionComments', example='vc_test'),
}

model PublishAndDeployTaskFlowResponseBody = {
  deployId?: long(name='DeployId', example='12**'),
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='Unknown server error'),
  requestId?: string(name='RequestId', example='64E26249-B61F-51C6-B6DF-47EFF50128CC'),
  success?: boolean(name='Success', example='true'),
}

model PublishAndDeployTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishAndDeployTaskFlowResponseBody(name='body'),
}

async function publishAndDeployTaskFlowWithOptions(request: PublishAndDeployTaskFlowRequest, runtime: Util.RuntimeOptions): PublishAndDeployTaskFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.versionComments)) {
    query['VersionComments'] = request.versionComments;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishAndDeployTaskFlow',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishAndDeployTaskFlow(request: PublishAndDeployTaskFlowRequest): PublishAndDeployTaskFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishAndDeployTaskFlowWithOptions(request, runtime);
}

model ReDeployLhDagVersionRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to obtain the ID of the task flow.', example='7***'),
  dagVersion?: long(name='DagVersion', description='The ID of the task flow version. You can call the [ListDAGVersions](~~424682~~) operation to obtain the ID of the task flow version.', example='2****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to obtain the ID of the tenant.', example='3***'),
}

model ReDeployLhDagVersionResponseBody = {
  deployId?: long(name='DeployId', description='The ID of the deployment record.', example='15990'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='035C92E0-2EAD-50E5-A6DD-550F5F73D7CE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model ReDeployLhDagVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReDeployLhDagVersionResponseBody(name='body'),
}

async function reDeployLhDagVersionWithOptions(request: ReDeployLhDagVersionRequest, runtime: Util.RuntimeOptions): ReDeployLhDagVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagVersion)) {
    query['DagVersion'] = request.dagVersion;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReDeployLhDagVersion',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reDeployLhDagVersion(request: ReDeployLhDagVersionRequest): ReDeployLhDagVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return reDeployLhDagVersionWithOptions(request, runtime);
}

model ReRunTaskFlowInstanceRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='7***'),
  dagInstanceId?: long(name='DagInstanceId', description='The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to query the execution record ID.', example='47****'),
  dagVersion?: string(name='DagVersion', description='The version number of the task flow. You can call the ListTaskFlowVersions operation to query the version number of the task flow.', example='2****'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model ReRunTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='8CFF2295-8249-5287-B888-DBD4F0D76CB0'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ReRunTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReRunTaskFlowInstanceResponseBody(name='body'),
}

async function reRunTaskFlowInstanceWithOptions(request: ReRunTaskFlowInstanceRequest, runtime: Util.RuntimeOptions): ReRunTaskFlowInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.dagVersion)) {
    query['DagVersion'] = request.dagVersion;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReRunTaskFlowInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reRunTaskFlowInstance(request: ReRunTaskFlowInstanceRequest): ReRunTaskFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reRunTaskFlowInstanceWithOptions(request, runtime);
}

model RefundPayAsYouGoOrderRequest {
  orderId?: string(name='OrderId', example='2190037****'),
  tid?: long(name='Tid', example='3***'),
}

model RefundPayAsYouGoOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='C51420E3-144A-4A94-B473-8662FCF4AD10'),
  success?: boolean(name='Success', example='true'),
}

model RefundPayAsYouGoOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundPayAsYouGoOrderResponseBody(name='body'),
}

async function refundPayAsYouGoOrderWithOptions(request: RefundPayAsYouGoOrderRequest, runtime: Util.RuntimeOptions): RefundPayAsYouGoOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefundPayAsYouGoOrder',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refundPayAsYouGoOrder(request: RefundPayAsYouGoOrderRequest): RefundPayAsYouGoOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundPayAsYouGoOrderWithOptions(request, runtime);
}

model RegisterInstanceRequest {
  dataLinkName?: string(name='DataLinkName', description='The name of the data link for cross-database query.

> 
*   This parameter is required if the UseDsql parameter is set to 1.
*   The name can contain only lowercase letters and underscores (\\_).
*   The name must be unique within a tenant.', example='dblink_test'),
  databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database.', example='******'),
  databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database.', example='dmstest'),
  dbaUid?: long(name='DbaUid', description='The ID of the user who assumes the DBA role of the database instance. You can call the [ListUsers](~~141938~~) or [GetInstance](~~141567~~) operation to obtain the user ID.', example='22275482072787****'),
  ddlOnline?: int32(name='DdlOnline', description='Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:

*   0: The feature is disabled.
*   1: The native online DDL feature takes precedence.
*   2: The lock-free schema change feature of DMS takes precedence.

>  Supported database types: ApsaraDB RDS for MySQL, PolarDB for MySQL, ApsaraDB MyBase for MySQL, and MySQL databases from other sources.', example='2'),
  ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.

>  This parameter is required if the InstanceSource parameter is set to ECS_OWN.', example='i-2zei9gs1t7h8l7ac****'),
  ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.

>  This parameter is required if the InstanceSource parameter is set to RDS, ECS_OWN, or VPC_IDC.', example='cn-hangzhou'),
  enableSellSitd?: string(name='EnableSellSitd', example='Y'),
  envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   product: production environment
*   dev: development environment
*   pre: staging environment
*   test: test environment
*   sit: system integration testing (SIT) environment
*   uat: user acceptance testing (UAT) environment
*   pet: stress testing environment
*   stag: STAG environment', example='product'),
  exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance. Unit: seconds.', example='600'),
  host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='172.XX.XXX.254'),
  instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.'),
  instanceSource?: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
*   **RDS**: an ApsaraDB RDS instance
*   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='RDS'),
  instanceType?: string(name='InstanceType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MySQL'),
  networkType?: string(name='NetworkType', description='The network type of the database instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='VPC'),
  port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='3306'),
  queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance. Unit: seconds.', example='60'),
  safeRule?: string(name='SafeRule', description='The name of the security rule set for the database. You can call the [ListStandardGroups](~~417891~~) or [GetInstance](~~141567~~) operation to obtain the name of the security rule set that you want to use.'),
  sid?: string(name='Sid', description='The system ID (SID) of the database.

>  This parameter is required if the InstanceType parameter is set to ORACLE.', example='XXX'),
  skipTest?: boolean(name='SkipTest', description='Specifies whether to skip connectivity test. Valid values:

*   **true**: The connectivity test is skipped.
*   **false**: The connectivity test is not skipped.', example='true'),
  templateId?: long(name='TemplateId', example='31***'),
  templateType?: string(name='TemplateType', example='INNER'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
  useDsql?: int32(name='UseDsql', description='Specifies whether to enable the cross-database query feature for the database instance. Valid values:

*   0: The feature is disabled.
*   1: The feature is enabled.

>  Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for Oracle, and ApsaraDB for Redis.', example='1'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

>  This parameter is required if the InstanceSource parameter is set to VPC_IDC.', example='vpc-xxxxxxxxxxxxxxxxxxxxx'),
}

model RegisterInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RegisterInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterInstanceResponseBody(name='body'),
}

/**
  * Prerequisites:
  * You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain your user role from the RoleIdList parameter that is returned.
  *
  * @param request RegisterInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RegisterInstanceResponse
 */
async function registerInstanceWithOptions(request: RegisterInstanceRequest, runtime: Util.RuntimeOptions): RegisterInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataLinkName)) {
    query['DataLinkName'] = request.dataLinkName;
  }
  if (!Util.isUnset(request.databasePassword)) {
    query['DatabasePassword'] = request.databasePassword;
  }
  if (!Util.isUnset(request.databaseUser)) {
    query['DatabaseUser'] = request.databaseUser;
  }
  if (!Util.isUnset(request.dbaUid)) {
    query['DbaUid'] = request.dbaUid;
  }
  if (!Util.isUnset(request.ddlOnline)) {
    query['DdlOnline'] = request.ddlOnline;
  }
  if (!Util.isUnset(request.ecsInstanceId)) {
    query['EcsInstanceId'] = request.ecsInstanceId;
  }
  if (!Util.isUnset(request.ecsRegion)) {
    query['EcsRegion'] = request.ecsRegion;
  }
  if (!Util.isUnset(request.enableSellSitd)) {
    query['EnableSellSitd'] = request.enableSellSitd;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.exportTimeout)) {
    query['ExportTimeout'] = request.exportTimeout;
  }
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.instanceAlias)) {
    query['InstanceAlias'] = request.instanceAlias;
  }
  if (!Util.isUnset(request.instanceSource)) {
    query['InstanceSource'] = request.instanceSource;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.queryTimeout)) {
    query['QueryTimeout'] = request.queryTimeout;
  }
  if (!Util.isUnset(request.safeRule)) {
    query['SafeRule'] = request.safeRule;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.skipTest)) {
    query['SkipTest'] = request.skipTest;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.useDsql)) {
    query['UseDsql'] = request.useDsql;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Prerequisites:
  * You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to obtain your user role from the RoleIdList parameter that is returned.
  *
  * @param request RegisterInstanceRequest
  * @return RegisterInstanceResponse
 */
async function registerInstance(request: RegisterInstanceRequest): RegisterInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerInstanceWithOptions(request, runtime);
}

model RegisterUserRequest {
  mobile?: string(name='Mobile', description='The mobile number of the user.', example='130000000xx'),
  roleNames?: string(name='RoleNames', description='The role that you want to assign to the user. Valid values:

*   **USER**: a regular user role
*   **DBA**: a database administrator (DBA) role
*   **ADMIN**: a DMS administrator role
*   **SECURITY_ADMIN**: a security administrator role

>  If you do not specify this parameter, the regular user role is assigned to the user by default. You can assign one or more roles to the user. Separate multiple roles with commas (,).', example='USER,DBA'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To query ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='-1'),
  uid?: string(name='Uid', description='The UID of the Alibaba Cloud account of the user that you want to register.', example='12345678'),
  userNick?: string(name='UserNick', description='The nickname of the user.', example='dmstest'),
}

model RegisterUserResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='403'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified user already exists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34E01EDD-6A16-4CF0-9541-C644D1BE01AA'),
  success?: boolean(name='Success', description='*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model RegisterUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterUserResponseBody(name='body'),
}

/**
  * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
  *
  * @param request RegisterUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RegisterUserResponse
 */
async function registerUserWithOptions(request: RegisterUserRequest, runtime: Util.RuntimeOptions): RegisterUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.roleNames)) {
    query['RoleNames'] = request.roleNames;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userNick)) {
    query['UserNick'] = request.userNick;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
  *
  * @param request RegisterUserRequest
  * @return RegisterUserResponse
 */
async function registerUser(request: RegisterUserRequest): RegisterUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerUserWithOptions(request, runtime);
}

model RestartDataCorrectSQLJobRequest {
  jobId?: long(name='JobId', description='The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](~~208481~~) and [ListDBTaskSQLJob](~~207049~~) operations to obtain the value of this parameter.

If the Type parameter is set to SINGLE, you must pass the value of the JobId parameter to confirm the ID of the SQL task that you want to rerun.', example='43253'),
  orderId?: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the data change ticket.', example='453****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
  type?: string(name='Type', description='The type of the rerun operation. Valid values:

*   **ALL**: reruns all SQL tasks.
*   **SINGLE**: reruns a single SQL task.', example='ALL'),
}

model RestartDataCorrectSQLJobResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='809B52F2-CD2B-53DA-88C8-F7042787E673'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model RestartDataCorrectSQLJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDataCorrectSQLJobResponseBody(name='body'),
}

async function restartDataCorrectSQLJobWithOptions(request: RestartDataCorrectSQLJobRequest, runtime: Util.RuntimeOptions): RestartDataCorrectSQLJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDataCorrectSQLJob',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDataCorrectSQLJob(request: RestartDataCorrectSQLJobRequest): RestartDataCorrectSQLJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDataCorrectSQLJobWithOptions(request, runtime);
}

model ResumeTaskFlowInstanceRequest {
  dagId?: long(name='DagId', example='11****'),
  dagInstanceId?: long(name='DagInstanceId', example='3****'),
  dagVersion?: string(name='DagVersion', example='[]'),
  tid?: long(name='Tid', example='3***'),
}

model ResumeTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FF2E325-763F-5E27-9157-C3CFA02F4CBF'),
  success?: boolean(name='Success', example='true'),
}

model ResumeTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeTaskFlowInstanceResponseBody(name='body'),
}

async function resumeTaskFlowInstanceWithOptions(request: ResumeTaskFlowInstanceRequest, runtime: Util.RuntimeOptions): ResumeTaskFlowInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.dagVersion)) {
    query['DagVersion'] = request.dagVersion;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeTaskFlowInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeTaskFlowInstance(request: ResumeTaskFlowInstanceRequest): ResumeTaskFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeTaskFlowInstanceWithOptions(request, runtime);
}

model RetryDataCorrectPreCheckRequest {
  orderId?: long(name='OrderId', description='The ID of the data change ticket. You can call the [ListOrders](~~144643~~) operation to query the ID of the data change ticket.', example='414****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
}

model RetryDataCorrectPreCheckResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingOrderId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='OrderId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BC081C7-5F77-5C92-9758-E1ED17CA****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RetryDataCorrectPreCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryDataCorrectPreCheckResponseBody(name='body'),
}

async function retryDataCorrectPreCheckWithOptions(request: RetryDataCorrectPreCheckRequest, runtime: Util.RuntimeOptions): RetryDataCorrectPreCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryDataCorrectPreCheck',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryDataCorrectPreCheck(request: RetryDataCorrectPreCheckRequest): RetryDataCorrectPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryDataCorrectPreCheckWithOptions(request, runtime);
}

model RevokeUserPermissionRequest {
  dbId?: string(name='DbId', description='The ID of the database. The database can be a physical database or a logical database.

*   To query the ID of a physical database, call the [ListDatabases](~~141873~~) or [SearchDatabase](~~141876~~) operation.
*   To query the ID of a logical database, call the [ListLogicDatabases](~~141874~~) or [SearchDatabase](~~141876~~) operation.', example='1860****'),
  dsType?: string(name='DsType', description='The object type on which the permission you want to revoke from the user. Valid values:

*   **INSTANCE**: database instances
*   **DATABASE**: physical databases
*   **LOGIC_DATABASE**: logical databases
*   **TABLE**: physical tables
*   **LOGIC_TABLE**: logical tables', example='DATABASE'),
  instanceId?: long(name='InstanceId', description='The ID of the database instance. You must specify this parameter when you revoke a permission from the database instance. You can call the [ListInstances](~~141936~~) or [GetInstance](~~141567~~) operation to query the database instance ID.', example='174****'),
  logic?: boolean(name='Logic', description='Specifies whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is a physical database.

> 
*   If the database is a logical database, set this parameter to **true**.
*   If the database is a physical database, set this parameter to **false**.', example='false'),
  permTypes?: string(name='PermTypes', description='The type of the permission. Valid values:

*   **QUERY**: the data query permission
*   **EXPORT**: the data export permission
*   **CORRECT**: the data change permission', example='CORRECT'),
  tableId?: string(name='TableId', description='The ID of the table. You must specify this parameter when you revoke a permission from the table. You can call the [ListTables](~~141878~~) operation to query the table ID.', example='13****'),
  tableName?: string(name='TableName', description='The name of the table. You can call the [ListTables](~~141878~~) operation to query the table name.', example='table_name'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to query the tenant ID.', example='3***'),
  userAccessId?: string(name='UserAccessId', description='The ID of the permission. You can call the [ListUserPermission](~~146957~~) operation to query the permission ID.', example='774****'),
  userId?: string(name='UserId', description='The ID of the user. You can call the [ListUsers](~~141938~~) or [GetUser](~~147098~~) operation to query the user ID.', example='51****'),
}

model RevokeUserPermissionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MissingUserId'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UserId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RevokeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeUserPermissionResponseBody(name='body'),
}

async function revokeUserPermissionWithOptions(request: RevokeUserPermissionRequest, runtime: Util.RuntimeOptions): RevokeUserPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.dsType)) {
    query['DsType'] = request.dsType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.permTypes)) {
    query['PermTypes'] = request.permTypes;
  }
  if (!Util.isUnset(request.tableId)) {
    query['TableId'] = request.tableId;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.userAccessId)) {
    query['UserAccessId'] = request.userAccessId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeUserPermission',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeUserPermission(request: RevokeUserPermissionRequest): RevokeUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeUserPermissionWithOptions(request, runtime);
}

model SearchDatabaseRequest {
  dbType?: string(name='DbType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='MYSQL'),
  envType?: string(name='EnvType', description='The type of the environment to which the database belongs. For more information, see [Change the environment type of an instance](~~163309~~).', example='test'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword that is used to search for databases.', example='testdb'),
  searchRange?: string(name='SearchRange', description='The query range based on permissions. Valid values:

*   **HAS_PERMSSION**: searches for databases on which the current user has permissions.
*   **OWNER**: searches for databases owned by the current user.
*   **MY_FOCUS**: searches for databases that the current user follows.
*   **UNKNOWN**: searches for all databases.', example='HAS_PERMSSION'),
  searchTarget?: string(name='SearchTarget', description='The category of the database. Valid values:

*   **DB**: single database or logical database.
*   **SINGLE_DB**: single database.
*   **LOGIC_DB**: logical database.', example='SINGLE_DB'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
}

model SearchDatabaseResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0D21075-CD3E-4D98-8264-FD8AD04A63B6'),
  searchDatabaseList?: {
    searchDatabase?: [ 
    {
      alias?: string(name='Alias', description='The alias of the database.', example='test_rds'),
      databaseId?: string(name='DatabaseId', description='The ID of the database.', example='2528****'),
      datalinkName?: string(name='DatalinkName', description='The name of the data link for cross-database queries.', example='datalink_name'),
      dbType?: string(name='DbType', description='The type of the database.', example='mysql'),
      dbaId?: string(name='DbaId', description='The ID of the user who assumes the database administrator (DBA) role.', example='10****'),
      encoding?: string(name='Encoding', description='The encoding method of the database.', example='utf8'),
      envType?: string(name='EnvType', description='The type of the environment to which the database belongs. For more information, see [Change the environment type of an instance](~~163309~~).', example='test'),
      host?: string(name='Host', description='The endpoint of the instance in which the database resides.', example='rm-xxxx.mysql.rds.aliyuncs.com'),
      logic?: boolean(name='Logic', description='Indicates whether the database is a logical database. Valid values:

*   **true**: The database is a logical database.
*   **false**: The database is not a logical database.', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList', description='The IDs of the owners of the database.'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList', description='The nicknames of the database owners.'),
      port?: int32(name='Port', description='The port number of the instance in which the database resides.', example='3306'),
      schemaName?: string(name='SchemaName', description='The name of the database.', example='test'),
      searchName?: string(name='SearchName', description='The name that is used to search for the database.', example='test@xxx.xxx.xxx.xxx:3306'),
      sid?: string(name='Sid', description='The system ID (Sid) of the instance in which the database resides.', example='testSid'),
    }
  ](name='SearchDatabase')
  }(name='SearchDatabaseList', description='The information about the databases.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- **true**: The request was successful.
- **false**: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model SearchDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchDatabaseResponseBody(name='body'),
}

async function searchDatabaseWithOptions(request: SearchDatabaseRequest, runtime: Util.RuntimeOptions): SearchDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.searchRange)) {
    query['SearchRange'] = request.searchRange;
  }
  if (!Util.isUnset(request.searchTarget)) {
    query['SearchTarget'] = request.searchTarget;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchDatabase',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchDatabase(request: SearchDatabaseRequest): SearchDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchDatabaseWithOptions(request, runtime);
}

model SearchTableRequest {
  dbType?: string(name='DbType', example='MySQL'),
  envType?: string(name='EnvType', example='PRODUCT'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  returnGuid?: boolean(name='ReturnGuid', example='false'),
  searchKey?: string(name='SearchKey', example='test'),
  searchRange?: string(name='SearchRange', example='OWNER'),
  searchTarget?: string(name='SearchTarget', example='LOGIC_TABLE'),
  tid?: long(name='Tid', example='1'),
}

model SearchTableResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='1489257F-1B5D-4B5B-89EF-923C12CEEBD1'),
  searchTableList?: {
    searchTable?: [ 
    {
      DBSearchName?: string(name='DBSearchName', example='test'),
      databaseId?: string(name='DatabaseId', example='1'),
      dbName?: string(name='DbName', example='test'),
      dbType?: string(name='DbType', example='mysql'),
      description?: string(name='Description', example='test'),
      encoding?: string(name='Encoding', example='utf8'),
      engine?: string(name='Engine', example='innodb'),
      envType?: string(name='EnvType', example='test'),
      logic?: boolean(name='Logic', example='false'),
      ownerIdList?: {
        ownerIds?: [ string ](name='OwnerIds')
      }(name='OwnerIdList'),
      ownerNameList?: {
        ownerNames?: [ string ](name='OwnerNames')
      }(name='OwnerNameList'),
      tableGuid?: string(name='TableGuid', example='IDB_L_9032.db-test.yuyang_test'),
      tableId?: string(name='TableId', example='1'),
      tableName?: string(name='TableName', example='test_table'),
      tableSchemaName?: string(name='TableSchemaName', example='test@xxx.xxx.xxx.xxx:3306'),
    }
  ](name='SearchTable')
  }(name='SearchTableList'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='1'),
}

model SearchTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchTableResponseBody(name='body'),
}

async function searchTableWithOptions(request: SearchTableRequest, runtime: Util.RuntimeOptions): SearchTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.returnGuid)) {
    query['ReturnGuid'] = request.returnGuid;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.searchRange)) {
    query['SearchRange'] = request.searchRange;
  }
  if (!Util.isUnset(request.searchTarget)) {
    query['SearchTarget'] = request.searchTarget;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTable',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTable(request: SearchTableRequest): SearchTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTableWithOptions(request, runtime);
}

model SetOwnersRequest {
  ownerIds?: string(name='OwnerIds', description='The ID of the user whom you want to specify as an owner. Separate multiple IDs with commas (,). You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the ID of the user.

>  The value of the OwnerIds parameter is that of the UserId parameter.', example='51****'),
  ownerType?: string(name='OwnerType', description='The type of the owner. Valid values:

*   INSTANCE: an owner of an instance.
*   DATABASE: an owner of a physical database.
*   LOGIC_DATABASE: an owner of a logical database.
*   TABLE: an owner of a physical table.
*   LOGIC_TABLE: an owner of a logical table.', example='INSTANCE'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. The ID of the resource varies with the owner type. The owner types and resource IDs have the following mappings:

*   INSTANCE: the ID of an instance. You can call the [ListInstances](~~141936~~) operation to query the ID of the instance.
*   DATABASE: the ID of a physical database. You can call the [ListDatabases](~~141873~~) operation to query the ID of the physical database.
*   LOGIC_DATABASE: the ID of a logical database. You can call the [ListLogicDatabases](~~141874~~) operation to query the ID of the logical database.
*   TABLE: the ID of a physical table. You can call the [ListTables](~~141878~~) operation to query the ID of the physical table.
*   LOGIC_DATABASE: the ID of a logical table. You can call the [ListLogicTables](~~141875~~) operation to query the ID of the logical table.', example='174****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](~~181330~~) topic.', example='3***'),
}

model SetOwnersResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model SetOwnersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetOwnersResponseBody(name='body'),
}

async function setOwnersWithOptions(request: SetOwnersRequest, runtime: Util.RuntimeOptions): SetOwnersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerIds)) {
    query['OwnerIds'] = request.ownerIds;
  }
  if (!Util.isUnset(request.ownerType)) {
    query['OwnerType'] = request.ownerType;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetOwners',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setOwners(request: SetOwnersRequest): SetOwnersResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOwnersWithOptions(request, runtime);
}

model StopTaskFlowInstanceRequest {
  dagId?: long(name='DagId', example='7***'),
  dagInstanceId?: long(name='DagInstanceId', example='47****'),
  tid?: long(name='Tid', example='3***'),
}

model StopTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='028BF827-3801-5869-8548-F4A039256308'),
  success?: boolean(name='Success', example='true'),
}

model StopTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopTaskFlowInstanceResponseBody(name='body'),
}

async function stopTaskFlowInstanceWithOptions(request: StopTaskFlowInstanceRequest, runtime: Util.RuntimeOptions): StopTaskFlowInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTaskFlowInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopTaskFlowInstance(request: StopTaskFlowInstanceRequest): StopTaskFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTaskFlowInstanceWithOptions(request, runtime);
}

model SubmitOrderApprovalRequest {
  orderId?: long(name='OrderId', example='12345'),
  tid?: long(name='Tid', example='-1'),
}

model SubmitOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D'),
  success?: boolean(name='Success', example='true'),
}

model SubmitOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitOrderApprovalResponseBody(name='body'),
}

async function submitOrderApprovalWithOptions(request: SubmitOrderApprovalRequest, runtime: Util.RuntimeOptions): SubmitOrderApprovalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitOrderApproval',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitOrderApproval(request: SubmitOrderApprovalRequest): SubmitOrderApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitOrderApprovalWithOptions(request, runtime);
}

model SubmitStructSyncOrderApprovalRequest {
  orderId?: long(name='OrderId', example='4324535'),
  tid?: long(name='Tid', example='1'),
}

model SubmitStructSyncOrderApprovalResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='4E1D2B4D-3E53-4ABC-999D-1D2520B3471D'),
  success?: boolean(name='Success', example='true'),
  workflowInstanceId?: long(name='WorkflowInstanceId', example='432523'),
}

model SubmitStructSyncOrderApprovalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitStructSyncOrderApprovalResponseBody(name='body'),
}

async function submitStructSyncOrderApprovalWithOptions(request: SubmitStructSyncOrderApprovalRequest, runtime: Util.RuntimeOptions): SubmitStructSyncOrderApprovalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitStructSyncOrderApproval',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitStructSyncOrderApproval(request: SubmitStructSyncOrderApprovalRequest): SubmitStructSyncOrderApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitStructSyncOrderApprovalWithOptions(request, runtime);
}

model SuspendTaskFlowInstanceRequest {
  dagId?: long(name='DagId', example='7***'),
  dagInstanceId?: long(name='DagInstanceId', example='47****'),
  tid?: long(name='Tid', example='3***'),
}

model SuspendTaskFlowInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='028BF827-3801-5869-8548-F4A039256305'),
  success?: boolean(name='Success', example='true'),
}

model SuspendTaskFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuspendTaskFlowInstanceResponseBody(name='body'),
}

async function suspendTaskFlowInstanceWithOptions(request: SuspendTaskFlowInstanceRequest, runtime: Util.RuntimeOptions): SuspendTaskFlowInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagInstanceId)) {
    query['DagInstanceId'] = request.dagInstanceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuspendTaskFlowInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendTaskFlowInstance(request: SuspendTaskFlowInstanceRequest): SuspendTaskFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendTaskFlowInstanceWithOptions(request, runtime);
}

model SyncDatabaseMetaRequest {
  dbId?: string(name='DbId', example='123'),
  logic?: boolean(name='Logic', example='false'),
  tid?: long(name='Tid', example='-1'),
}

model SyncDatabaseMetaResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', example='true'),
}

model SyncDatabaseMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncDatabaseMetaResponseBody(name='body'),
}

async function syncDatabaseMetaWithOptions(request: SyncDatabaseMetaRequest, runtime: Util.RuntimeOptions): SyncDatabaseMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbId)) {
    query['DbId'] = request.dbId;
  }
  if (!Util.isUnset(request.logic)) {
    query['Logic'] = request.logic;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncDatabaseMeta',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncDatabaseMeta(request: SyncDatabaseMetaRequest): SyncDatabaseMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDatabaseMetaWithOptions(request, runtime);
}

model SyncInstanceMetaRequest {
  ignoreTable?: boolean(name='IgnoreTable', example='true'),
  instanceId?: string(name='InstanceId', example='1234'),
  tid?: long(name='Tid', example='-1'),
}

model SyncInstanceMetaResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='A99CD576-1E18-4E86-931E-C3CCE56DC030'),
  success?: boolean(name='Success', example='true'),
}

model SyncInstanceMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncInstanceMetaResponseBody(name='body'),
}

async function syncInstanceMetaWithOptions(request: SyncInstanceMetaRequest, runtime: Util.RuntimeOptions): SyncInstanceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ignoreTable)) {
    query['IgnoreTable'] = request.ignoreTable;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncInstanceMeta',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncInstanceMeta(request: SyncInstanceMetaRequest): SyncInstanceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncInstanceMetaWithOptions(request, runtime);
}

model UpdateInstanceRequest {
  dataLinkName?: string(name='DataLinkName', description='The name of the data link for cross-database query.

> 
*   This parameter is required if the UseDsql parameter is set to 1.
*   The name can contain only lowercase letters and underscores (\\_).
*   The name must be unique within a tenant.', example='datalink_test'),
  databasePassword?: string(name='DatabasePassword', description='The password that is used to log on to the database.', example='******'),
  databaseUser?: string(name='DatabaseUser', description='The account that is used to log on to the database.', example='dbuser'),
  dbaId?: string(name='DbaId', description='The ID of the user who assumes the DBA role of the database instance. You can call the [ListUsers](~~141938~~) or [GetInstance](~~141567~~) operation to obtain the user ID.', example='27****'),
  ddlOnline?: int32(name='DdlOnline', description='Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:

*   0: The feature is disabled.
*   1: The native online DDL feature takes precedence.
*   2: The lock-free schema change feature of DMS takes precedence.', example='0'),
  ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.

>  This parameter is required if the InstanceSource parameter is set to ECS_OWN.', example='i-2zei9gs1t7h8l7ac****'),
  ecsRegion?: string(name='EcsRegion', description='The ID of the region in which the database instance resides.

>  This parameter is required if the InstanceSource parameter is set to RDS, ECS_OWN, or VPC_IDC.', example='cn-hangzhou'),
  enableSellSitd?: string(name='EnableSellSitd', example='Y'),
  envType?: string(name='EnvType', description='The type of the environment to which the database instance belongs. Valid values:

*   **product**: production environment
*   **dev**: development environment
*   **pre**: staging environment
*   **test**: test environment
*   **sit**: system integration testing (SIT) environment
*   **uat**: user acceptance testing (UAT) environment
*   **pet**: stress testing environment
*   **stag**: STAG environment', example='product'),
  exportTimeout?: int32(name='ExportTimeout', description='The timeout period for exporting data from the database instance.', example='600'),
  host?: string(name='Host', description='The host address that is used to connect to the database instance.', example='192.XXX.0.56'),
  instanceAlias?: string(name='InstanceAlias', description='The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.', example='instance_test'),
  instanceId?: string(name='InstanceId', description='The ID of the database instance. You can call the [GetInstance](~~141567~~) operation to obtain the instance ID.', example='126****'),
  instanceSource?: string(name='InstanceSource', description='The source of the database instance. Valid values:

*   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
*   **RDS**: an ApsaraDB RDS instance
*   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
*   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)', example='ECS_OWN'),
  instanceType?: string(name='InstanceType', description='The type of the database. For more information about the valid values of this parameter, see [DbType parameter](~~198106~~).', example='mysql'),
  port?: int32(name='Port', description='The port number that is used to connect to the database instance.', example='3306'),
  queryTimeout?: int32(name='QueryTimeout', description='The timeout period for querying data in the database instance.', example='60'),
  safeRuleId?: string(name='SafeRuleId', description='The ID of the security rule set for the instance. You can call the [ListStandardGroups](~~417891~~) or [GetInstance](~~141567~~) operation to obtain the name of the security rule set that you want to use.', example='3****'),
  sid?: string(name='Sid', description='The system ID (SID) of the database instance.

>  This parameter is required if the InstanceType parameter is set to ORACLE.', example='XXX'),
  skipTest?: boolean(name='SkipTest', description='Specifies whether to skip connectivity test. Valid values:

*   **true**: The connectivity test is skipped.
*   **false**: The connectivity test is not skipped.', example='false'),
  templateId?: long(name='TemplateId', example='3***'),
  templateType?: string(name='TemplateType', example='INNER'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) operation to obtain the tenant ID.', example='3***'),
  useDsql?: int32(name='UseDsql', description='Specifies whether to enable the cross-database query feature for the database instance. Valid values:

*   0: The feature is disabled.
*   1: The feature is enabled.

>  Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for Oracle, and ApsaraDB for Redis.', example='0'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

>  This parameter is required if the InstanceSource parameter is set to VPC_IDC.', example='vpc-xxx'),
}

model UpdateInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

/**
  * Before you call the UpdateInstance operation, call the [GetInstance](~~141567~~) or [ListInstances](~~141936~~) operation to obtain the complete information about the instance.
  *
  * @param request UpdateInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateInstanceResponse
 */
async function updateInstanceWithOptions(request: UpdateInstanceRequest, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataLinkName)) {
    query['DataLinkName'] = request.dataLinkName;
  }
  if (!Util.isUnset(request.databasePassword)) {
    query['DatabasePassword'] = request.databasePassword;
  }
  if (!Util.isUnset(request.databaseUser)) {
    query['DatabaseUser'] = request.databaseUser;
  }
  if (!Util.isUnset(request.dbaId)) {
    query['DbaId'] = request.dbaId;
  }
  if (!Util.isUnset(request.ddlOnline)) {
    query['DdlOnline'] = request.ddlOnline;
  }
  if (!Util.isUnset(request.ecsInstanceId)) {
    query['EcsInstanceId'] = request.ecsInstanceId;
  }
  if (!Util.isUnset(request.ecsRegion)) {
    query['EcsRegion'] = request.ecsRegion;
  }
  if (!Util.isUnset(request.enableSellSitd)) {
    query['EnableSellSitd'] = request.enableSellSitd;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.exportTimeout)) {
    query['ExportTimeout'] = request.exportTimeout;
  }
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.instanceAlias)) {
    query['InstanceAlias'] = request.instanceAlias;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceSource)) {
    query['InstanceSource'] = request.instanceSource;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.queryTimeout)) {
    query['QueryTimeout'] = request.queryTimeout;
  }
  if (!Util.isUnset(request.safeRuleId)) {
    query['SafeRuleId'] = request.safeRuleId;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.skipTest)) {
    query['SkipTest'] = request.skipTest;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.useDsql)) {
    query['UseDsql'] = request.useDsql;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call the UpdateInstance operation, call the [GetInstance](~~141567~~) or [ListInstances](~~141936~~) operation to obtain the complete information about the instance.
  *
  * @param request UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceWithOptions(request, runtime);
}

model UpdateSLARulesRequest {
  dagId?: long(name='DagId', example='11****'),
  slaRuleList?: [ 
    {
      dagId?: long(name='DagId', example='15***'),
      intervalMinutes?: int32(name='IntervalMinutes', example='1080'),
      nodeId?: long(name='NodeId', example='0'),
      type?: int32(name='Type', example='0'),
    }
  ](name='SlaRuleList'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateSLARulesShrinkRequest {
  dagId?: long(name='DagId', example='11****'),
  slaRuleListShrink?: string(name='SlaRuleList'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateSLARulesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='88E053F7-347B-52DD-A186-1F340EEC0C27'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSLARulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSLARulesResponseBody(name='body'),
}

async function updateSLARulesWithOptions(tmpReq: UpdateSLARulesRequest, runtime: Util.RuntimeOptions): UpdateSLARulesResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSLARulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.slaRuleList)) {
    request.slaRuleListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slaRuleList, 'SlaRuleList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.slaRuleListShrink)) {
    query['SlaRuleList'] = request.slaRuleListShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSLARules',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSLARules(request: UpdateSLARulesRequest): UpdateSLARulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSLARulesWithOptions(request, runtime);
}

model UpdateScenarioRequest {
  description?: string(name='Description', example='test'),
  scenarioId?: string(name='ScenarioId', example='12***'),
  scenarioName?: string(name='ScenarioName'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateScenarioResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='7FAD400F-7A5C-4193-8F9A-39D86C4F0231'),
  success?: boolean(name='Success', example='true'),
}

model UpdateScenarioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateScenarioResponseBody(name='body'),
}

async function updateScenarioWithOptions(request: UpdateScenarioRequest, runtime: Util.RuntimeOptions): UpdateScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.scenarioName)) {
    query['ScenarioName'] = request.scenarioName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScenario',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScenario(request: UpdateScenarioRequest): UpdateScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScenarioWithOptions(request, runtime);
}

model UpdateTaskConfigRequest {
  nodeConfig?: string(name='NodeConfig', example='{ "rerun":{ "rerunEnable":true,  "rerunCount":1,   "rerunInterval":10 } }'),
  nodeId?: string(name='NodeId', example='43****'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateTaskConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='F4E2A94B-604F-43FF-93E7-F4EE3DCF412E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskConfigResponseBody(name='body'),
}

async function updateTaskConfigWithOptions(request: UpdateTaskConfigRequest, runtime: Util.RuntimeOptions): UpdateTaskConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeConfig)) {
    query['NodeConfig'] = request.nodeConfig;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskConfig',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskConfig(request: UpdateTaskConfigRequest): UpdateTaskConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskConfigWithOptions(request, runtime);
}

model UpdateTaskContentRequest {
  nodeContent?: string(name='NodeContent', description='The node configurations after modification.', example='{ "dbId":12****, "sql":"select * from test_table",   "dbType":"lindorm_sql"  }'),
  nodeId?: string(name='NodeId', description='The ID of the task node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node ID.', example='43****'),
  tid?: long(name='Tid', description='The ID of the tenant.

> To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the ["View information about the current tenant"](~~181330~~) section of the Manage DMS tenants topic.', example='3***'),
}

model UpdateTaskContentResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskContentResponseBody(name='body'),
}

/**
  * You can call this operation to modify node configurations.
  *
  * @param request UpdateTaskContentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateTaskContentResponse
 */
async function updateTaskContentWithOptions(request: UpdateTaskContentRequest, runtime: Util.RuntimeOptions): UpdateTaskContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeContent)) {
    query['NodeContent'] = request.nodeContent;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskContent',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to modify node configurations.
  *
  * @param request UpdateTaskContentRequest
  * @return UpdateTaskContentResponse
 */
async function updateTaskContent(request: UpdateTaskContentRequest): UpdateTaskContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskContentWithOptions(request, runtime);
}

model UpdateTaskFlowConstantsRequest {
  dagConstants?: [ 
    {
      key?: string(name='Key', description='The key name of a constant for the task flow.', example='poc_test'),
      value?: string(name='Value', description='The key value of a constant for the task flow.', example='poc_test'),
    }
  ](name='DagConstants', description='The constants for the task flow.'),
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='3****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***'),
}

model UpdateTaskFlowConstantsShrinkRequest {
  dagConstantsShrink?: string(name='DagConstants', description='The constants for the task flow.'),
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='3****'),
  tid?: long(name='Tid', description='The ID of the tenant. You can call the [GetUserActiveTenant](~~198073~~) or [ListUserTenants](~~198074~~) operation to query the tenant ID.', example='3***'),
}

model UpdateTaskFlowConstantsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='C4CCC000-C193-5A32-B701-573F497BF729'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowConstantsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowConstantsResponseBody(name='body'),
}

async function updateTaskFlowConstantsWithOptions(tmpReq: UpdateTaskFlowConstantsRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowConstantsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskFlowConstantsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dagConstants)) {
    request.dagConstantsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dagConstants, 'DagConstants', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dagConstantsShrink)) {
    query['DagConstants'] = request.dagConstantsShrink;
  }
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowConstants',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowConstants(request: UpdateTaskFlowConstantsRequest): UpdateTaskFlowConstantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowConstantsWithOptions(request, runtime);
}

model UpdateTaskFlowCooperatorsRequest {
  cooperatorIds?: [ string ](name='CooperatorIds'),
  dagId?: long(name='DagId', example='11****'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateTaskFlowCooperatorsShrinkRequest {
  cooperatorIdsShrink?: string(name='CooperatorIds'),
  dagId?: long(name='DagId', example='11****'),
  tid?: long(name='Tid', example='3***'),
}

model UpdateTaskFlowCooperatorsResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowCooperatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowCooperatorsResponseBody(name='body'),
}

async function updateTaskFlowCooperatorsWithOptions(tmpReq: UpdateTaskFlowCooperatorsRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowCooperatorsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskFlowCooperatorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cooperatorIds)) {
    request.cooperatorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cooperatorIds, 'CooperatorIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cooperatorIdsShrink)) {
    query['CooperatorIds'] = request.cooperatorIdsShrink;
  }
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowCooperators',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowCooperators(request: UpdateTaskFlowCooperatorsRequest): UpdateTaskFlowCooperatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowCooperatorsWithOptions(request, runtime);
}

model UpdateTaskFlowEdgesRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  edges?: [ 
    {
      id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
    }
  ](name='Edges', description='The list of updated task flow edges.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowEdgesShrinkRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  edgesShrink?: string(name='Edges', description='The list of updated task flow edges.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowEdgesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='You can use the ID to locate logs and troubleshoot issues.', example='93FC1AE1-EC54-52B1-B146-650180FB82E8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowEdgesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowEdgesResponseBody(name='body'),
}

/**
  * ## Usage notes
  * The edges can be updated only when the following conditions are met:
  * 1\\. The specified edge exists in the Directed Acyclic Graph (DAG) of the task flow. The DAG is identified by DagId.
  * 2\\. The end points of the specified edge exist in the DAG of the task flow. The DAG is identified by DagId.
  * 3\\. After the update, no loop appears in the DAG.
  *
  * @param tmpReq UpdateTaskFlowEdgesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateTaskFlowEdgesResponse
 */
async function updateTaskFlowEdgesWithOptions(tmpReq: UpdateTaskFlowEdgesRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowEdgesResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskFlowEdgesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.edges)) {
    request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, 'Edges', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.edgesShrink)) {
    query['Edges'] = request.edgesShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowEdges',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * The edges can be updated only when the following conditions are met:
  * 1\\. The specified edge exists in the Directed Acyclic Graph (DAG) of the task flow. The DAG is identified by DagId.
  * 2\\. The end points of the specified edge exist in the DAG of the task flow. The DAG is identified by DagId.
  * 3\\. After the update, no loop appears in the DAG.
  *
  * @param request UpdateTaskFlowEdgesRequest
  * @return UpdateTaskFlowEdgesResponse
 */
async function updateTaskFlowEdges(request: UpdateTaskFlowEdgesRequest): UpdateTaskFlowEdgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowEdgesWithOptions(request, runtime);
}

model UpdateTaskFlowNameAndDescRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  dagName?: string(name='DagName', description='The new name that you want to specify for the task flow.', example='test'),
  description?: string(name='Description', description='The description that you want to specify for the task flow.', example='test'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowNameAndDescResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='F73CCB9D-0CF3-5D3D-97B0-D852A8022663'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowNameAndDescResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowNameAndDescResponseBody(name='body'),
}

async function updateTaskFlowNameAndDescWithOptions(request: UpdateTaskFlowNameAndDescRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowNameAndDescResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagName)) {
    query['DagName'] = request.dagName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowNameAndDesc',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowNameAndDesc(request: UpdateTaskFlowNameAndDescRequest): UpdateTaskFlowNameAndDescResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowNameAndDescWithOptions(request, runtime);
}

model UpdateTaskFlowNotificationRequest {
  dagId?: long(name='DagId', description='The unique ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  dagNotificationFail?: boolean(name='DagNotificationFail', description='Specifies whether to enable notifications for failed task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='true'),
  dagNotificationSla?: boolean(name='DagNotificationSla', description='Specifies whether to enable SLA global notifications for task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='true'),
  dagNotificationSuccess?: boolean(name='DagNotificationSuccess', description='Specifies whether to enable notifications for successful task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.', example='true'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowNotificationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='3BDC762F-2525-5E47-8748-D6C58BDB3B38'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowNotificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowNotificationResponseBody(name='body'),
}

async function updateTaskFlowNotificationWithOptions(request: UpdateTaskFlowNotificationRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowNotificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.dagNotificationFail)) {
    query['DagNotificationFail'] = request.dagNotificationFail;
  }
  if (!Util.isUnset(request.dagNotificationSla)) {
    query['DagNotificationSla'] = request.dagNotificationSla;
  }
  if (!Util.isUnset(request.dagNotificationSuccess)) {
    query['DagNotificationSuccess'] = request.dagNotificationSuccess;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowNotification',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowNotification(request: UpdateTaskFlowNotificationRequest): UpdateTaskFlowNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowNotificationWithOptions(request, runtime);
}

model UpdateTaskFlowOwnerRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlowInstance](~~424689~~) operation to query the task flow ID.', example='15***'),
  newOwnerId?: string(name='NewOwnerId', description='The user ID of the new owner. You can call the [GetUser](~~147098~~) or [ListUsers](~~141938~~) operation to query the user ID.', example='51****'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowOwnerResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='482C61C1-2537-5BFB-8E58-34D9F17AD3C3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowOwnerResponseBody(name='body'),
}

/**
  * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
  *
  * @param request UpdateTaskFlowOwnerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateTaskFlowOwnerResponse
 */
async function updateTaskFlowOwnerWithOptions(request: UpdateTaskFlowOwnerRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.newOwnerId)) {
    query['NewOwnerId'] = request.newOwnerId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowOwner',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
  *
  * @param request UpdateTaskFlowOwnerRequest
  * @return UpdateTaskFlowOwnerResponse
 */
async function updateTaskFlowOwner(request: UpdateTaskFlowOwnerRequest): UpdateTaskFlowOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowOwnerWithOptions(request, runtime);
}

model UpdateTaskFlowRelationsRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  edges?: [ 
    {
      id?: long(name='Id', description='The ID of the task flow edge.', example='24***'),
      nodeEnd?: long(name='NodeEnd', description='The ID of the end node on the edge.', example='44***'),
      nodeFrom?: long(name='NodeFrom', description='The ID of the start node on the edge.', example='44***'),
    }
  ](name='Edges', description='The list of task flow edges to be updated.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowRelationsShrinkRequest {
  dagId?: long(name='DagId', description='The ID of the task flow. You can call the [ListTaskFlow](~~424565~~) or [ListLhTaskFlowAndScenario](~~426672~~) operation to query the task flow ID.', example='15***'),
  edgesShrink?: string(name='Edges', description='The list of task flow edges to be updated.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskFlowRelationsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='15D9E71C-405B-57D7-BE6E-707C2C7A8E0B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskFlowRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowRelationsResponseBody(name='body'),
}

/**
  * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
  *
  * @param tmpReq UpdateTaskFlowRelationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateTaskFlowRelationsResponse
 */
async function updateTaskFlowRelationsWithOptions(tmpReq: UpdateTaskFlowRelationsRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowRelationsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskFlowRelationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.edges)) {
    request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, 'Edges', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.edgesShrink)) {
    query['Edges'] = request.edgesShrink;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowRelations',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
  *
  * @param request UpdateTaskFlowRelationsRequest
  * @return UpdateTaskFlowRelationsResponse
 */
async function updateTaskFlowRelations(request: UpdateTaskFlowRelationsRequest): UpdateTaskFlowRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowRelationsWithOptions(request, runtime);
}

model UpdateTaskFlowScheduleRequest {
  cronBeginDate?: string(name='CronBeginDate', example='CronBeginDate_test'),
  cronEndDate?: string(name='CronEndDate', example='CronEndDate_test'),
  cronStr?: string(name='CronStr', example='CronStr_test'),
  cronType?: string(name='CronType', example='HOUR'),
  dagId?: long(name='DagId', example='7***'),
  scheduleParam?: string(name='ScheduleParam', example='ScheduleParam_test'),
  scheduleSwitch?: boolean(name='ScheduleSwitch'),
  tid?: long(name='Tid', example='3***'),
  timeZoneId?: string(name='TimeZoneId', example='Asia/Shanghai'),
  triggerType?: string(name='TriggerType', example='Event'),
}

model UpdateTaskFlowScheduleResponseBody = {
  errorCode?: string(name='ErrorCode', example='InvalidParameterValid'),
  errorMessage?: string(name='ErrorMessage', example='InvalidParameterValid'),
  requestId?: string(name='RequestId', example='7BF38A13-C181-5B5E-97F1-8643F8A10093'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowScheduleResponseBody(name='body'),
}

async function updateTaskFlowScheduleWithOptions(request: UpdateTaskFlowScheduleRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronBeginDate)) {
    query['CronBeginDate'] = request.cronBeginDate;
  }
  if (!Util.isUnset(request.cronEndDate)) {
    query['CronEndDate'] = request.cronEndDate;
  }
  if (!Util.isUnset(request.cronStr)) {
    query['CronStr'] = request.cronStr;
  }
  if (!Util.isUnset(request.cronType)) {
    query['CronType'] = request.cronType;
  }
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.scheduleParam)) {
    query['ScheduleParam'] = request.scheduleParam;
  }
  if (!Util.isUnset(request.scheduleSwitch)) {
    query['ScheduleSwitch'] = request.scheduleSwitch;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.timeZoneId)) {
    query['TimeZoneId'] = request.timeZoneId;
  }
  if (!Util.isUnset(request.triggerType)) {
    query['TriggerType'] = request.triggerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowSchedule',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowSchedule(request: UpdateTaskFlowScheduleRequest): UpdateTaskFlowScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowScheduleWithOptions(request, runtime);
}

model UpdateTaskFlowTimeVariablesRequest {
  dagId?: long(name='DagId', example='43****'),
  tid?: long(name='Tid', example='3***'),
  timeVariables?: string(name='TimeVariables', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}'),
}

model UpdateTaskFlowTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskFlowTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskFlowTimeVariablesResponseBody(name='body'),
}

async function updateTaskFlowTimeVariablesWithOptions(request: UpdateTaskFlowTimeVariablesRequest, runtime: Util.RuntimeOptions): UpdateTaskFlowTimeVariablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dagId)) {
    query['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.timeVariables)) {
    query['TimeVariables'] = request.timeVariables;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskFlowTimeVariables',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskFlowTimeVariables(request: UpdateTaskFlowTimeVariablesRequest): UpdateTaskFlowTimeVariablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskFlowTimeVariablesWithOptions(request, runtime);
}

model UpdateTaskNameRequest {
  nodeId?: string(name='NodeId', description='The ID of the node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node ID.', example='449***'),
  nodeName?: string(name='NodeName', description='The name of the node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node name.', example='Spark-test'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskNameResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='C4604178-3BE1-5973-ACF0-7D561AEEF3A8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskNameResponseBody(name='body'),
}

async function updateTaskNameWithOptions(request: UpdateTaskNameRequest, runtime: Util.RuntimeOptions): UpdateTaskNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskName',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskName(request: UpdateTaskNameRequest): UpdateTaskNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskNameWithOptions(request, runtime);
}

model UpdateTaskOutputRequest {
  nodeId?: string(name='NodeId', description='The ID of the node. You can call the [GetTaskInstanceRelation](~~424711~~) operation to query the node ID.', example='14059'),
  nodeOutput?: string(name='NodeOutput', description='The output variables for the task.'),
  tid?: long(name='Tid', description='The ID of the tenant.

>  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](~~181330~~).', example='3***'),
}

model UpdateTaskOutputResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='UnknownError'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='AB524768-8A5F-523A-91BD-1147187FCD62'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateTaskOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskOutputResponseBody(name='body'),
}

/**
  * ## Usage notes
  * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
  *
  * @param request UpdateTaskOutputRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateTaskOutputResponse
 */
async function updateTaskOutputWithOptions(request: UpdateTaskOutputRequest, runtime: Util.RuntimeOptions): UpdateTaskOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeOutput)) {
    query['NodeOutput'] = request.nodeOutput;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskOutput',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
  *
  * @param request UpdateTaskOutputRequest
  * @return UpdateTaskOutputResponse
 */
async function updateTaskOutput(request: UpdateTaskOutputRequest): UpdateTaskOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskOutputWithOptions(request, runtime);
}

model UpdateTaskTimeVariablesRequest {
  nodeId?: string(name='NodeId', example='43****'),
  tid?: long(name='Tid', example='3***'),
  timeVariables?: string(name='TimeVariables', example='{"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}'),
}

model UpdateTaskTimeVariablesResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='39557312-28D5-528F-9554-80C0700EB489'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskTimeVariablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTaskTimeVariablesResponseBody(name='body'),
}

async function updateTaskTimeVariablesWithOptions(request: UpdateTaskTimeVariablesRequest, runtime: Util.RuntimeOptions): UpdateTaskTimeVariablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.timeVariables)) {
    query['TimeVariables'] = request.timeVariables;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskTimeVariables',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTaskTimeVariables(request: UpdateTaskTimeVariablesRequest): UpdateTaskTimeVariablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskTimeVariablesWithOptions(request, runtime);
}

model UpdateUserRequest {
  maxExecuteCount?: long(name='MaxExecuteCount', example='1000'),
  maxResultCount?: long(name='MaxResultCount', example='1000'),
  mobile?: string(name='Mobile', example='188xxxxxxxx'),
  roleNames?: string(name='RoleNames', example='ADMIN,DBA'),
  tid?: long(name='Tid', example='-1'),
  uid?: long(name='Uid', example='123456789'),
  userNick?: string(name='UserNick', example='test'),
}

model UpdateUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='UnknownError'),
  errorMessage?: string(name='ErrorMessage', example='UnknownError'),
  requestId?: string(name='RequestId', example='E9BEBF41-4F69-4605-A5D5-A67955173941'),
  success?: boolean(name='Success', example='false'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxExecuteCount)) {
    query['MaxExecuteCount'] = request.maxExecuteCount;
  }
  if (!Util.isUnset(request.maxResultCount)) {
    query['MaxResultCount'] = request.maxResultCount;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.roleNames)) {
    query['RoleNames'] = request.roleNames;
  }
  if (!Util.isUnset(request.tid)) {
    query['Tid'] = request.tid;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userNick)) {
    query['UserNick'] = request.userNick;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2018-11-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

