/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'das.cn-shanghai.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('das', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataResultValue = {
  sqlId?: string(name='sqlId'),
  errorCode?: string(name='errorCode'),
  count?: long(name='count'),
}

model AddHDMInstanceRequest {
  engine?: string(name='Engine', example='MySQL'),
  flushAccount?: string(name='FlushAccount', example='None'),
  instanceAlias?: string(name='InstanceAlias', example='yuecq--test****'),
  instanceArea?: string(name='InstanceArea', example='ECS'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
  ip?: string(name='Ip', example='rm-2ze1jdv45i7l6****.mysql.rds.aliyuncs.com'),
  networkType?: string(name='NetworkType', example='VPC'),
  password?: string(name='Password', example='122****'),
  port?: string(name='Port', example='3306'),
  region?: string(name='Region', example='cn-hangzhou'),
  username?: string(name='Username', example='test****'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-m5e666n89m2bx8jar****'),
  context?: string(name='__context', example='None'),
}

model AddHDMInstanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    callerUid?: string(name='CallerUid', example='11111111111'),
    code?: int32(name='Code', example='200'),
    error?: string(name='Error', example='InvalidRequestURL'),
    instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
    ip?: string(name='Ip', example='rm-de21209****.mysql.rds.aliyuncs.com'),
    ownerId?: string(name='OwnerId', example='325352345'),
    port?: int32(name='Port', example='3306'),
    role?: string(name='Role', example='ECSAdmin'),
    tenantId?: string(name='TenantId', example='L0EPfLS****=SCE00000*****'),
    token?: string(name='Token', example='1111111'),
    uuid?: string(name='Uuid', example='hdm_3063db6792965c080a4bcb6e6304****'),
    vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-m5e666n89m2bx8jar****'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
  synchro?: string(name='Synchro', example='None'),
}

model AddHDMInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddHDMInstanceResponseBody(name='body'),
}

async function addHDMInstanceWithOptions(request: AddHDMInstanceRequest, runtime: Util.RuntimeOptions): AddHDMInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.flushAccount)) {
    query['FlushAccount'] = request.flushAccount;
  }
  if (!Util.isUnset(request.instanceAlias)) {
    query['InstanceAlias'] = request.instanceAlias;
  }
  if (!Util.isUnset(request.instanceArea)) {
    query['InstanceArea'] = request.instanceArea;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddHDMInstance',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addHDMInstance(request: AddHDMInstanceRequest): AddHDMInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addHDMInstanceWithOptions(request, runtime);
}

model CreateAdamBenchTaskRequest {
  description?: string(name='Description', example='test-das-bench-0501'),
  dstInstanceId?: string(name='DstInstanceId', example='rm-2ze1jdv45i7l6****'),
  dstSuperAccount?: string(name='DstSuperAccount', example='root***'),
  dstSuperPassword?: string(name='DstSuperPassword', example='root***1234'),
  rate?: int32(name='Rate', example='1'),
  requestDuration?: long(name='RequestDuration', example='86400000'),
  requestStartTime?: long(name='RequestStartTime', example='1588819800000'),
  srcEngine?: string(name='SrcEngine', example='MySQL'),
  srcEngineVersion?: string(name='SrcEngineVersion', example='9i'),
  srcMaxQps?: double(name='SrcMaxQps', example='2013.22'),
  srcMeanQps?: double(name='SrcMeanQps', example='312.22'),
  srcSqlOssAddr?: string(name='SrcSqlOssAddr', example='http://rdslog-hz-v3.oss-cn-hangzhou.aliyuncs.com/custins4131****'),
}

model CreateAdamBenchTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model CreateAdamBenchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAdamBenchTaskResponseBody(name='body'),
}

async function createAdamBenchTaskWithOptions(request: CreateAdamBenchTaskRequest, runtime: Util.RuntimeOptions): CreateAdamBenchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dstInstanceId)) {
    query['DstInstanceId'] = request.dstInstanceId;
  }
  if (!Util.isUnset(request.dstSuperAccount)) {
    query['DstSuperAccount'] = request.dstSuperAccount;
  }
  if (!Util.isUnset(request.dstSuperPassword)) {
    query['DstSuperPassword'] = request.dstSuperPassword;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.requestDuration)) {
    query['RequestDuration'] = request.requestDuration;
  }
  if (!Util.isUnset(request.requestStartTime)) {
    query['RequestStartTime'] = request.requestStartTime;
  }
  if (!Util.isUnset(request.srcEngine)) {
    query['SrcEngine'] = request.srcEngine;
  }
  if (!Util.isUnset(request.srcEngineVersion)) {
    query['SrcEngineVersion'] = request.srcEngineVersion;
  }
  if (!Util.isUnset(request.srcMaxQps)) {
    query['SrcMaxQps'] = request.srcMaxQps;
  }
  if (!Util.isUnset(request.srcMeanQps)) {
    query['SrcMeanQps'] = request.srcMeanQps;
  }
  if (!Util.isUnset(request.srcSqlOssAddr)) {
    query['SrcSqlOssAddr'] = request.srcSqlOssAddr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAdamBenchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAdamBenchTask(request: CreateAdamBenchTaskRequest): CreateAdamBenchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAdamBenchTaskWithOptions(request, runtime);
}

model CreateCacheAnalysisJobRequest {
  backupSetId?: string(name='BackupSetId', example='12345'),
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  nodeId?: string(name='NodeId', example='r-x****-db-0'),
}

model CreateCacheAnalysisJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    bigKeys?: {
      keyInfo?: [ 
      {
        bytes?: long(name='Bytes', example='12345'),
        count?: long(name='Count', example='127'),
        db?: int32(name='Db', example='0'),
        encoding?: string(name='Encoding', example='hashtable'),
        expirationTimeMillis?: long(name='ExpirationTimeMillis', example='1596256542547'),
        key?: string(name='Key', example='task_x****'),
        nodeId?: string(name='NodeId', example='r-x****-db-0'),
        type?: string(name='Type', example='hash'),
      }
    ](name='KeyInfo')
    }(name='BigKeys'),
    instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
    jobId?: string(name='JobId', example='sf79-sd99-sa37-****'),
    message?: string(name='Message', example='Successful'),
    nodeId?: string(name='NodeId', example='r-x****-db-0'),
    taskState?: string(name='TaskState', example='BACKUP'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model CreateCacheAnalysisJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCacheAnalysisJobResponseBody(name='body'),
}

async function createCacheAnalysisJobWithOptions(request: CreateCacheAnalysisJobRequest, runtime: Util.RuntimeOptions): CreateCacheAnalysisJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupSetId)) {
    query['BackupSetId'] = request.backupSetId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCacheAnalysisJob',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCacheAnalysisJob(request: CreateCacheAnalysisJobRequest): CreateCacheAnalysisJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCacheAnalysisJobWithOptions(request, runtime);
}

model CreateCloudBenchTasksRequest {
  amount?: string(name='Amount', example='1'),
  backupId?: string(name='BackupId', example='229132'),
  backupTime?: string(name='BackupTime', example='2021-04-23T13:22:14Z'),
  clientType?: string(name='ClientType', example='ECS'),
  description?: string(name='Description', example='test-das-bench-0501'),
  dstConnectionString?: string(name='DstConnectionString', example='rm-de21209****.mysql.rds.aliyuncs.com'),
  dstInstanceId?: string(name='DstInstanceId', example='rm-2ze1jdv45i7l6****'),
  dstPort?: string(name='DstPort', example='3306'),
  dstSuperAccount?: string(name='DstSuperAccount', example='root'),
  dstSuperPassword?: string(name='DstSuperPassword', example='test123'),
  dstType?: string(name='DstType', example='Instance'),
  dtsJobClass?: string(name='DtsJobClass', example='medium'),
  dtsJobId?: string(name='DtsJobId', example='23127'),
  endState?: string(name='EndState', example='WAIT_TARGET'),
  gatewayVpcId?: string(name='GatewayVpcId', example='vpc-t4nsnwvpbc1h76ja4****'),
  gatewayVpcIp?: string(name='GatewayVpcIp', example='172.30.XX.XX'),
  rate?: string(name='Rate', example='1'),
  requestDuration?: string(name='RequestDuration', example='86400000'),
  requestEndTime?: string(name='RequestEndTime', example='1608888296001'),
  requestStartTime?: string(name='RequestStartTime', example='1608888296000'),
  smartPressureTime?: string(name='SmartPressureTime', example='86400000'),
  srcInstanceId?: string(name='SrcInstanceId', example='rm-2ze1jdv45i7l6****'),
  srcPublicIp?: string(name='SrcPublicIp', example='None'),
  srcSuperAccount?: string(name='SrcSuperAccount', example='admin'),
  srcSuperPassword?: string(name='SrcSuperPassword', example='test123'),
  taskType?: string(name='TaskType', example='pressure test'),
  workDir?: string(name='WorkDir', example='/tmp/bench/'),
}

model CreateCloudBenchTasksResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    taskIds?: [ string ](name='taskIds')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model CreateCloudBenchTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCloudBenchTasksResponseBody(name='body'),
}

async function createCloudBenchTasksWithOptions(request: CreateCloudBenchTasksRequest, runtime: Util.RuntimeOptions): CreateCloudBenchTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.backupTime)) {
    query['BackupTime'] = request.backupTime;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dstConnectionString)) {
    query['DstConnectionString'] = request.dstConnectionString;
  }
  if (!Util.isUnset(request.dstInstanceId)) {
    query['DstInstanceId'] = request.dstInstanceId;
  }
  if (!Util.isUnset(request.dstPort)) {
    query['DstPort'] = request.dstPort;
  }
  if (!Util.isUnset(request.dstSuperAccount)) {
    query['DstSuperAccount'] = request.dstSuperAccount;
  }
  if (!Util.isUnset(request.dstSuperPassword)) {
    query['DstSuperPassword'] = request.dstSuperPassword;
  }
  if (!Util.isUnset(request.dstType)) {
    query['DstType'] = request.dstType;
  }
  if (!Util.isUnset(request.dtsJobClass)) {
    query['DtsJobClass'] = request.dtsJobClass;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.endState)) {
    query['EndState'] = request.endState;
  }
  if (!Util.isUnset(request.gatewayVpcId)) {
    query['GatewayVpcId'] = request.gatewayVpcId;
  }
  if (!Util.isUnset(request.gatewayVpcIp)) {
    query['GatewayVpcIp'] = request.gatewayVpcIp;
  }
  if (!Util.isUnset(request.rate)) {
    query['Rate'] = request.rate;
  }
  if (!Util.isUnset(request.requestDuration)) {
    query['RequestDuration'] = request.requestDuration;
  }
  if (!Util.isUnset(request.requestEndTime)) {
    query['RequestEndTime'] = request.requestEndTime;
  }
  if (!Util.isUnset(request.requestStartTime)) {
    query['RequestStartTime'] = request.requestStartTime;
  }
  if (!Util.isUnset(request.smartPressureTime)) {
    query['SmartPressureTime'] = request.smartPressureTime;
  }
  if (!Util.isUnset(request.srcInstanceId)) {
    query['SrcInstanceId'] = request.srcInstanceId;
  }
  if (!Util.isUnset(request.srcPublicIp)) {
    query['SrcPublicIp'] = request.srcPublicIp;
  }
  if (!Util.isUnset(request.srcSuperAccount)) {
    query['SrcSuperAccount'] = request.srcSuperAccount;
  }
  if (!Util.isUnset(request.srcSuperPassword)) {
    query['SrcSuperPassword'] = request.srcSuperPassword;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.workDir)) {
    query['WorkDir'] = request.workDir;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCloudBenchTasks',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCloudBenchTasks(request: CreateCloudBenchTasksRequest): CreateCloudBenchTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudBenchTasksWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest {
  DBInstanceId?: string(name='DBInstanceId', example='rm-2ze8g2am97624****'),
  endTime?: string(name='EndTime', example='1596177993001'),
  startTime?: string(name='StartTime', example='1596177993000'),
}

model CreateDiagnosticReportResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='70af71852fcdf2c5dc7b90596e2cf05b'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ac544623-f6ad-45fd-9a74-9be3db65****'),
  success?: string(name='Success', example='true'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnosticReport',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model CreateRequestDiagnosisRequest {
  database?: string(name='Database', example='das'),
  instanceId?: string(name='InstanceId', example='rm-0iwhhl8gx0ld6****'),
  nodeId?: string(name='NodeId', example='202****'),
  sql?: string(name='Sql', example='select * from test where name = \\"mockUser\\"'),
}

model CreateRequestDiagnosisResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='61820b594664275c4429****'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='800FBAF5-A539-5B97-A09E-C63AB2F7****'),
  success?: string(name='Success', example='true'),
}

model CreateRequestDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRequestDiagnosisResponseBody(name='body'),
}

async function createRequestDiagnosisWithOptions(request: CreateRequestDiagnosisRequest, runtime: Util.RuntimeOptions): CreateRequestDiagnosisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.sql)) {
    query['Sql'] = request.sql;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRequestDiagnosis',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRequestDiagnosis(request: CreateRequestDiagnosisRequest): CreateRequestDiagnosisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRequestDiagnosisWithOptions(request, runtime);
}

model DeleteCloudBenchTaskRequest {
  taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
}

model DeleteCloudBenchTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DeleteCloudBenchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudBenchTaskResponseBody(name='body'),
}

async function deleteCloudBenchTaskWithOptions(request: DeleteCloudBenchTaskRequest, runtime: Util.RuntimeOptions): DeleteCloudBenchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudBenchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudBenchTask(request: DeleteCloudBenchTaskRequest): DeleteCloudBenchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudBenchTaskWithOptions(request, runtime);
}

model DeleteStopGatewayRequest {
  gatewayId?: string(name='GatewayId', example='22938c83fcfbced4b4869b9695e3****'),
}

model DeleteStopGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='0'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='FC6C0929-29E1-59FD-8DFE-70D9D41E****'),
  success?: string(name='Success', example='true'),
}

model DeleteStopGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStopGatewayResponseBody(name='body'),
}

async function deleteStopGatewayWithOptions(request: DeleteStopGatewayRequest, runtime: Util.RuntimeOptions): DeleteStopGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStopGateway',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStopGateway(request: DeleteStopGatewayRequest): DeleteStopGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStopGatewayWithOptions(request, runtime);
}

model DescribeAutoScalingConfigRequest {
  instanceId?: string(name='InstanceId', example='pc-2ze1prap1k46r****'),
}

model DescribeAutoScalingConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    bandwidth?: {
      bandwidthUsageLowerThreshold?: int32(name='BandwidthUsageLowerThreshold', example='30'),
      bandwidthUsageUpperThreshold?: int32(name='BandwidthUsageUpperThreshold', example='70'),
      downgrade?: boolean(name='Downgrade', example='true'),
      observationWindowSize?: string(name='ObservationWindowSize', example='5m'),
      upgrade?: boolean(name='Upgrade', example='true'),
    }(name='Bandwidth'),
    resource?: {
      cpuStep?: int32(name='CpuStep', example='2'),
      cpuUsageUpperThreshold?: int32(name='CpuUsageUpperThreshold', example='70'),
      downgradeObservationWindowSize?: string(name='DowngradeObservationWindowSize', example='5m'),
      enable?: boolean(name='Enable', example='true'),
      upgradeObservationWindowSize?: string(name='UpgradeObservationWindowSize', example='5m'),
    }(name='Resource'),
    shard?: {
      downgrade?: boolean(name='Downgrade', example='true'),
      downgradeObservationWindowSize?: string(name='DowngradeObservationWindowSize', example='1d'),
      maxShards?: int32(name='MaxShards', example='16'),
      memUsageLowerThreshold?: int32(name='MemUsageLowerThreshold', example='30'),
      memUsageUpperThreshold?: int32(name='MemUsageUpperThreshold', example='70'),
      minShards?: int32(name='MinShards', example='4'),
      upgrade?: boolean(name='Upgrade', example='true'),
      upgradeObservationWindowSize?: string(name='UpgradeObservationWindowSize', example='5m'),
    }(name='Shard'),
    spec?: {
      coolDownTime?: string(name='CoolDownTime', example='5m'),
      cpuUsageUpperThreshold?: int32(name='CpuUsageUpperThreshold', example='70'),
      downgrade?: boolean(name='Downgrade', example='true'),
      maxReadOnlyNodes?: int32(name='MaxReadOnlyNodes', example='10'),
      maxSpec?: string(name='MaxSpec', example='polar.mysql.x8.12xlarge'),
      memUsageUpperThreshold?: int32(name='MemUsageUpperThreshold', example='70'),
      observationWindowSize?: string(name='ObservationWindowSize', example='5m'),
      upgrade?: boolean(name='Upgrade', example='true'),
    }(name='Spec'),
    storage?: {
      diskUsageUpperThreshold?: int32(name='DiskUsageUpperThreshold', example='70'),
      maxStorage?: int32(name='MaxStorage', example='32000'),
      upgrade?: boolean(name='Upgrade', example='true'),
    }(name='Storage'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeAutoScalingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoScalingConfigResponseBody(name='body'),
}

async function describeAutoScalingConfigWithOptions(request: DescribeAutoScalingConfigRequest, runtime: Util.RuntimeOptions): DescribeAutoScalingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoScalingConfig',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoScalingConfig(request: DescribeAutoScalingConfigRequest): DescribeAutoScalingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoScalingConfigWithOptions(request, runtime);
}

model DescribeCacheAnalysisJobRequest {
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  jobId?: string(name='JobId', example='sf79-sd99-sa37-****'),
}

model DescribeCacheAnalysisJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    bigKeys?: {
      keyInfo?: [ 
      {
        bytes?: long(name='Bytes', example='12345'),
        count?: long(name='Count', example='127'),
        db?: int32(name='Db', example='0'),
        encoding?: string(name='Encoding', example='hashtable'),
        expirationTimeMillis?: long(name='ExpirationTimeMillis', example='1596256542547'),
        key?: string(name='Key', example='task_x****'),
        nodeId?: string(name='NodeId', example='r-x****-db-0'),
        type?: string(name='Type', example='hash'),
      }
    ](name='KeyInfo')
    }(name='BigKeys'),
    instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
    jobId?: string(name='JobId', example='sf79-sd99-sa37-****'),
    keyPrefixes?: {
      prefix?: [ 
      {
        bytes?: long(name='Bytes', example='12345'),
        count?: long(name='Count', example='127'),
        keyNum?: long(name='KeyNum', example='123'),
        prefix?: string(name='Prefix', example='task_'),
        type?: string(name='Type', example='hash'),
      }
    ](name='Prefix')
    }(name='KeyPrefixes'),
    message?: string(name='Message', example='Successful'),
    nodeId?: string(name='NodeId', example='r-x****-db-0'),
    taskState?: string(name='TaskState', example='BACKUP'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeCacheAnalysisJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCacheAnalysisJobResponseBody(name='body'),
}

async function describeCacheAnalysisJobWithOptions(request: DescribeCacheAnalysisJobRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCacheAnalysisJob',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCacheAnalysisJob(request: DescribeCacheAnalysisJobRequest): DescribeCacheAnalysisJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisJobWithOptions(request, runtime);
}

model DescribeCacheAnalysisJobsRequest {
  endTime?: string(name='EndTime', example='1596177993001'),
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  startTime?: string(name='StartTime', example='1596177993000'),
}

model DescribeCacheAnalysisJobsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: {
      cacheAnalysisJob?: [ 
      {
        bigKeys?: {
          keyInfo?: [ 
          {
            bytes?: long(name='Bytes', example='12345'),
            count?: long(name='Count', example='127'),
            db?: int32(name='Db', example='0'),
            encoding?: string(name='Encoding', example='hashtable'),
            expirationTimeMillis?: long(name='ExpirationTimeMillis', example='1596256542547'),
            key?: string(name='Key', example='task_*****'),
            nodeId?: string(name='NodeId', example='r-****-db-0'),
            type?: string(name='Type', example='hash'),
          }
        ](name='KeyInfo')
        }(name='BigKeys'),
        instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
        jobId?: string(name='JobId', example='sf79-sd99-sa37-****'),
        message?: string(name='Message', example='Successful'),
        nodeId?: string(name='NodeId', example='r-x****-db-0'),
        taskState?: string(name='TaskState', example='BACKUP'),
      }
    ](name='CacheAnalysisJob')
    }(name='List'),
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    total?: long(name='Total', example='4'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeCacheAnalysisJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCacheAnalysisJobsResponseBody(name='body'),
}

async function describeCacheAnalysisJobsWithOptions(request: DescribeCacheAnalysisJobsRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCacheAnalysisJobs',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCacheAnalysisJobs(request: DescribeCacheAnalysisJobsRequest): DescribeCacheAnalysisJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisJobsWithOptions(request, runtime);
}

model DescribeCloudBenchTasksRequest {
  endTime?: string(name='EndTime', example='1596177993001'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  startTime?: string(name='StartTime', example='1596177993000'),
  status?: string(name='Status', example='SUCCESS'),
  taskType?: string(name='TaskType', example='pressure test'),
}

model DescribeCloudBenchTasksResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: {
      cloudbenchTasks?: [ 
      {
        archiveJobId?: string(name='ArchiveJobId', example='\\"202105211430070112231480820340758****'),
        archiveOssTableName?: string(name='ArchiveOssTableName', example='custins15546355_161604665****'),
        archiveState?: int32(name='ArchiveState', example='1'),
        backupId?: string(name='BackupId', example='229132'),
        backupType?: string(name='BackupType', example='TIMESTAMP'),
        benchStep?: string(name='BenchStep', example='PROCEED'),
        benchStepStatus?: string(name='BenchStepStatus', example='FINISHED'),
        clientGatewayId?: string(name='ClientGatewayId', example='58598b2af48a0193dfc16fc6964ef****'),
        clientType?: string(name='ClientType', example='ECS'),
        description?: string(name='Description', example='test-das-bench-0501'),
        dstInstanceUuid?: string(name='DstInstanceUuid', example='hdm_d887b5ccf99fa0dc9a1e5aaac368****'),
        dstIp?: string(name='DstIp', example='None'),
        dstPort?: int32(name='DstPort', example='3306'),
        dstType?: string(name='DstType', example='Instance'),
        dtsJobClass?: string(name='DtsJobClass', example='medium'),
        dtsJobId?: string(name='DtsJobId', example='i03e3zty16i****'),
        dtsJobName?: string(name='DtsJobName'),
        dtsJobState?: int32(name='DtsJobState', example='CHECKING'),
        dtsJobStatus?: string(name='DtsJobStatus', example='PRE_CHECK_FAILED'),
        ecsInstanceId?: string(name='EcsInstanceId', example='i-bp1ecr5go2go1****'),
        endState?: string(name='EndState', example='WAIT_TARGET'),
        errorCode?: string(name='ErrorCode', example='10109'),
        errorMessage?: string(name='ErrorMessage', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
        external?: string(name='External', example='Null'),
        rate?: int32(name='Rate', example='1'),
        requestDuration?: long(name='RequestDuration', example='86400000'),
        smartPressureTime?: int32(name='SmartPressureTime', example='86400000'),
        source?: string(name='Source', example='DAS'),
        sqlCompleteReuse?: string(name='SqlCompleteReuse', example='{"sqlUuid":"task_a37d2f07-45cb-4413-a2a6-c66c68****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-1800626.meta"}'),
        srcInstanceArea?: string(name='SrcInstanceArea', example='RDS'),
        srcInstanceUuid?: string(name='SrcInstanceUuid', example='hdm_3063db6792965c080a4bcb6e6304****'),
        srcPublicIp?: string(name='SrcPublicIp', example='None'),
        state?: string(name='State', example='WAIT_TARGET'),
        status?: string(name='Status', example='RUNNING'),
        tableSchema?: string(name='TableSchema', example='[{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]'),
        taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
        taskType?: string(name='TaskType', example='pressure test'),
        topic?: string(name='Topic', example='das'),
        userId?: string(name='UserId', example='1091411816252****'),
        version?: string(name='Version', example='V3.0'),
        workDir?: string(name='WorkDir', example='/tmp/bench/'),
      }
    ](name='cloudbenchTasks')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: long(name='Total', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeCloudBenchTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudBenchTasksResponseBody(name='body'),
}

async function describeCloudBenchTasksWithOptions(request: DescribeCloudBenchTasksRequest, runtime: Util.RuntimeOptions): DescribeCloudBenchTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudBenchTasks',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudBenchTasks(request: DescribeCloudBenchTasksRequest): DescribeCloudBenchTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudBenchTasksWithOptions(request, runtime);
}

model DescribeCloudbenchTaskRequest {
  taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
}

model DescribeCloudbenchTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    archiveJobId?: string(name='ArchiveJobId', example='\\"202105211430070112231480820340758****'),
    archiveOssTableName?: string(name='ArchiveOssTableName', example='custins15546355_161604665****'),
    archiveState?: int32(name='ArchiveState', example='1'),
    backupId?: string(name='BackupId', example='229132'),
    backupType?: string(name='BackupType', example='TIMESTAMP'),
    benchStep?: string(name='BenchStep', example='PROCEED'),
    benchStepStatus?: string(name='BenchStepStatus', example='FINISHED'),
    clientGatewayId?: string(name='ClientGatewayId', example='58598b2af48a0193dfc16fc6964ef****'),
    clientType?: string(name='ClientType', example='ECS'),
    description?: string(name='Description', example='test-das-bench-0501'),
    dstInstanceUuid?: string(name='DstInstanceUuid', example='hdm_d887b5ccf99fa0dc9a1e5aaac368****'),
    dstIp?: string(name='DstIp', example='None'),
    dstPort?: int32(name='DstPort', example='3306'),
    dstType?: string(name='DstType', example='Instance'),
    dtsJobClass?: string(name='DtsJobClass', example='medium'),
    dtsJobId?: string(name='DtsJobId', example='i03e3zty16i****'),
    dtsJobName?: string(name='DtsJobName'),
    dtsJobState?: int32(name='DtsJobState', example='CHECKING'),
    dtsJobStatus?: string(name='DtsJobStatus', example='PRE_CHECKING'),
    ecsInstanceId?: string(name='EcsInstanceId', example='i-bp1ecr5go2go1****'),
    endState?: string(name='EndState', example='WAIT_LOGIC'),
    errorCode?: string(name='ErrorCode', example='10910'),
    errorMessage?: string(name='ErrorMessage', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
    external?: string(name='External', example='Null'),
    rate?: long(name='Rate', example='1'),
    requestDuration?: long(name='RequestDuration', example='864000'),
    smartPressureTime?: int32(name='SmartPressureTime', example='86400000'),
    source?: string(name='Source', example='DAS'),
    sqlCompleteReuse?: string(name='SqlCompleteReuse', example='{"sqlUuid":"task_a37d2f07-45cb-****-a2a6-c66c62****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-180****.meta"}'),
    srcInstanceArea?: string(name='SrcInstanceArea', example='RDS'),
    srcInstanceUuid?: string(name='SrcInstanceUuid', example='a364e414-e68b-4e5c-9166-65b3a153****'),
    srcPublicIp?: string(name='SrcPublicIp', example='None'),
    state?: string(name='State', example='WAIT_TARGET'),
    status?: string(name='Status', example='RUNNING'),
    tableSchema?: string(name='TableSchema', example='[{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]'),
    taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
    taskType?: string(name='TaskType', example='pressure test'),
    topic?: string(name='Topic', example='das'),
    userId?: string(name='UserId', example='109141182625****'),
    version?: string(name='Version', example='V3.0'),
    workDir?: string(name='WorkDir', example='/tmp/bench/'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeCloudbenchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudbenchTaskResponseBody(name='body'),
}

async function describeCloudbenchTaskWithOptions(request: DescribeCloudbenchTaskRequest, runtime: Util.RuntimeOptions): DescribeCloudbenchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudbenchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudbenchTask(request: DescribeCloudbenchTaskRequest): DescribeCloudbenchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudbenchTaskWithOptions(request, runtime);
}

model DescribeCloudbenchTaskConfigRequest {
  taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
}

model DescribeCloudbenchTaskConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    archiveFolder?: string(name='ArchiveFolder', example='/tmp/das/cloudbench/archive-sqls/'),
    benchCmd?: string(name='BenchCmd', example='java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb**** --pwd \\"cloudbench@****\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt > /tmp/das/cloudbench/null.log'),
    clientJarPath?: string(name='ClientJarPath', example='/tmp/das/cloudbench/CloudBenchClient.jar'),
    jarOnOss?: string(name='JarOnOss', example='https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****'),
    loadCmd?: string(name='LoadCmd', example='java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc**** --rocksdb /tmp/das/cloudbench/rocksdb'),
    metaFileName?: string(name='MetaFileName', example='cl-1621353601000-360****.meta'),
    metaFileOnOss?: string(name='MetaFileOnOss', example='"https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****'),
    metaFilePath?: string(name='MetaFilePath', example='/tmp/das/cloudbench/cl-1621353601000-360****.meta'),
    parseCmd?: string(name='ParseCmd', example='cd /tmp/das/cloudbench && java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb**** --pwd \\"cloudbench@****\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null'),
    parseFilePath?: string(name='ParseFilePath', example='/tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql'),
    rocksDbPath?: string(name='RocksDbPath', example='/tmp/das/cloudbench/rocksdb'),
    sqlFileName?: string(name='SqlFileName', example='cl-1621353601000-360****.sc'),
    sqlFileOnOss?: string(name='SqlFileOnOss', example='https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****'),
    sqlFilePath?: string(name='SqlFilePath', example='/tmp/das/cloudbench/cl-1621353601000-360****.sc'),
    taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
    userId?: string(name='UserId', example='1091411816252****'),
    workDir?: string(name='WorkDir', example='/tmp/bench/'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeCloudbenchTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudbenchTaskConfigResponseBody(name='body'),
}

async function describeCloudbenchTaskConfigWithOptions(request: DescribeCloudbenchTaskConfigRequest, runtime: Util.RuntimeOptions): DescribeCloudbenchTaskConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudbenchTaskConfig',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudbenchTaskConfig(request: DescribeCloudbenchTaskConfigRequest): DescribeCloudbenchTaskConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudbenchTaskConfigWithOptions(request, runtime);
}

model DescribeDiagnosticReportListRequest {
  DBInstanceId?: string(name='DBInstanceId', example='rm-2ze8g2am97624****'),
  endTime?: string(name='EndTime', example='1668420492000'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  startTime?: string(name='StartTime', example='1668398892000'),
}

model DescribeDiagnosticReportListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{     "total": 1,     "list": [       {         "score": 100,         "diagnosticTime": "2022-11-14T08:17:00Z",         "startTime": "2022-11-14T07:16:59Z",         "endTime": "2022-11-14T08:16:59Z"       }     ]   }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='D00DB161-FEF6-5428-B37A-8D29A4C2****'),
  success?: string(name='Success', example='true'),
  synchro?: string(name='Synchro', example='None'),
}

model DescribeDiagnosticReportListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticReportListResponseBody(name='body'),
}

async function describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticReportList',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportListWithOptions(request, runtime);
}

model DescribeHotBigKeysRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  nodeId?: string(name='NodeId', example='r-****-db-0'),
}

model DescribeHotBigKeysResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    bigKeyMsg?: string(name='BigKeyMsg', example='current version doesn\\"t support'),
    bigKeys?: {
      bigKey?: [ 
      {
        db?: int32(name='Db', example='0'),
        key?: string(name='Key', example='abc:def:eng'),
        keyType?: string(name='KeyType', example='zset'),
        nodeId?: string(name='NodeId', example='r-x****-db-0'),
        size?: long(name='Size', example='2'),
      }
    ](name='BigKey')
    }(name='BigKeys'),
    hotKeyMsg?: string(name='HotKeyMsg', example='current version doesn\\"t support'),
    hotKeys?: {
      hotKey?: [ 
      {
        db?: int32(name='Db', example='0'),
        hot?: string(name='Hot', example='5500~6000'),
        key?: string(name='Key', example='abc:def:eng'),
        keyType?: string(name='KeyType', example='zset'),
        lfu?: int32(name='Lfu', example='253'),
        nodeId?: string(name='NodeId', example='r-x****-db-0'),
      }
    ](name='HotKey')
    }(name='HotKeys'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeHotBigKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHotBigKeysResponseBody(name='body'),
}

async function describeHotBigKeysWithOptions(request: DescribeHotBigKeysRequest, runtime: Util.RuntimeOptions): DescribeHotBigKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHotBigKeys',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHotBigKeys(request: DescribeHotBigKeysRequest): DescribeHotBigKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotBigKeysWithOptions(request, runtime);
}

model DescribeHotKeysRequest {
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  nodeId?: string(name='NodeId', example='r-x****-db-0'),
}

model DescribeHotKeysResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hotKey?: [ 
    {
      db?: int32(name='Db', example='0'),
      hot?: string(name='Hot', example='5500~6000'),
      key?: string(name='Key', example='abc:def:eng'),
      keyType?: string(name='KeyType', example='zset'),
      size?: long(name='Size', example='2'),
    }
  ](name='HotKey')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeHotKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHotKeysResponseBody(name='body'),
}

async function describeHotKeysWithOptions(request: DescribeHotKeysRequest, runtime: Util.RuntimeOptions): DescribeHotKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHotKeys',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHotKeys(request: DescribeHotKeysRequest): DescribeHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotKeysWithOptions(request, runtime);
}

model DescribeInstanceDasProRequest {
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
}

model DescribeInstanceDasProResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='9CB97BC4-6479-55D0-B9D0-EA925AFE****'),
  success?: string(name='Success', example='true'),
}

model DescribeInstanceDasProResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceDasProResponseBody(name='body'),
}

async function describeInstanceDasProWithOptions(request: DescribeInstanceDasProRequest, runtime: Util.RuntimeOptions): DescribeInstanceDasProResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDasPro',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDasPro(request: DescribeInstanceDasProRequest): DescribeInstanceDasProResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDasProWithOptions(request, runtime);
}

model DescribeTopBigKeysRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  endTime?: string(name='EndTime', example='1596177993001'),
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  nodeId?: string(name='NodeId', example='r-x****-db-0'),
  startTime?: string(name='StartTime', example='1596177993000'),
}

model DescribeTopBigKeysResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    bigKey?: [ 
    {
      db?: int32(name='Db', example='0'),
      key?: string(name='Key', example='abc:def:eng'),
      keyType?: string(name='KeyType', example='zset'),
      nodeId?: string(name='NodeId', example='r-x****-db-0'),
      size?: long(name='Size', example='2'),
    }
  ](name='BigKey')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeTopBigKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTopBigKeysResponseBody(name='body'),
}

async function describeTopBigKeysWithOptions(request: DescribeTopBigKeysRequest, runtime: Util.RuntimeOptions): DescribeTopBigKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTopBigKeys',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTopBigKeys(request: DescribeTopBigKeysRequest): DescribeTopBigKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopBigKeysWithOptions(request, runtime);
}

model DescribeTopHotKeysRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  endTime?: string(name='EndTime', example='1596177993001'),
  instanceId?: string(name='InstanceId', example='r-bp18ff4a195d****'),
  nodeId?: string(name='NodeId', example='r-****-db-0'),
  startTime?: string(name='StartTime', example='1596177993000'),
}

model DescribeTopHotKeysResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hotKey?: [ 
    {
      db?: int32(name='Db', example='0'),
      hot?: string(name='Hot', example='5500~6000'),
      key?: string(name='Key', example='abc:def:eng'),
      keyType?: string(name='KeyType', example='zset'),
      lfu?: int32(name='Lfu', example='253'),
      nodeId?: string(name='NodeId', example='r-x****-db-0'),
    }
  ](name='HotKey')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DescribeTopHotKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTopHotKeysResponseBody(name='body'),
}

async function describeTopHotKeysWithOptions(request: DescribeTopHotKeysRequest, runtime: Util.RuntimeOptions): DescribeTopHotKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTopHotKeys',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTopHotKeys(request: DescribeTopHotKeysRequest): DescribeTopHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopHotKeysWithOptions(request, runtime);
}

model DisableAllSqlConcurrencyControlRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
}

model DisableAllSqlConcurrencyControlRulesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DisableAllSqlConcurrencyControlRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAllSqlConcurrencyControlRulesResponseBody(name='body'),
}

async function disableAllSqlConcurrencyControlRulesWithOptions(request: DisableAllSqlConcurrencyControlRulesRequest, runtime: Util.RuntimeOptions): DisableAllSqlConcurrencyControlRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAllSqlConcurrencyControlRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAllSqlConcurrencyControlRules(request: DisableAllSqlConcurrencyControlRulesRequest): DisableAllSqlConcurrencyControlRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAllSqlConcurrencyControlRulesWithOptions(request, runtime);
}

model DisableAutoResourceOptimizeRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]'),
}

model DisableAutoResourceOptimizeRulesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    configFailInstanceCount?: long(name='ConfigFailInstanceCount', example='1'),
    configFailInstanceList?: [ 
      {
        configSuccess?: boolean(name='ConfigSuccess', example='false'),
        errorMessage?: string(name='ErrorMessage', example='cannot found instance by rm-2ze9xrhze0709****'),
        instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
      }
    ](name='ConfigFailInstanceList'),
    configSuccessInstanceCount?: long(name='ConfigSuccessInstanceCount', example='1'),
    configSuccessInstanceList?: [ 
      {
        configSuccess?: boolean(name='ConfigSuccess', example='true'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
      }
    ](name='ConfigSuccessInstanceList'),
    totalInstanceCount?: long(name='TotalInstanceCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: boolean(name='Success', example='true'),
}

model DisableAutoResourceOptimizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAutoResourceOptimizeRulesResponseBody(name='body'),
}

async function disableAutoResourceOptimizeRulesWithOptions(request: DisableAutoResourceOptimizeRulesRequest, runtime: Util.RuntimeOptions): DisableAutoResourceOptimizeRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAutoResourceOptimizeRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAutoResourceOptimizeRules(request: DisableAutoResourceOptimizeRulesRequest): DisableAutoResourceOptimizeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAutoResourceOptimizeRulesWithOptions(request, runtime);
}

model DisableAutoThrottleRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]'),
}

model DisableAutoThrottleRulesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    configFailInstanceCount?: long(name='ConfigFailInstanceCount', example='1'),
    configFailInstanceList?: [ 
      {
        configSuccess?: boolean(name='ConfigSuccess', example='false'),
        errorMessage?: string(name='ErrorMessage', example='cannot found instance by rm-2ze9xrhze0709****'),
        instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
      }
    ](name='ConfigFailInstanceList'),
    configSuccessInstanceCount?: long(name='ConfigSuccessInstanceCount', example='1'),
    configSuccessInstanceList?: [ 
      {
        configSuccess?: boolean(name='ConfigSuccess', example='true'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
      }
    ](name='ConfigSuccessInstanceList'),
    totalInstanceCount?: long(name='TotalInstanceCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: boolean(name='Success', example='true'),
}

model DisableAutoThrottleRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAutoThrottleRulesResponseBody(name='body'),
}

async function disableAutoThrottleRulesWithOptions(request: DisableAutoThrottleRulesRequest, runtime: Util.RuntimeOptions): DisableAutoThrottleRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAutoThrottleRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAutoThrottleRules(request: DisableAutoThrottleRulesRequest): DisableAutoThrottleRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAutoThrottleRulesWithOptions(request, runtime);
}

model DisableDasProRequest {
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  userId?: string(name='UserId', example='196278346919****'),
}

model DisableDasProResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: string(name='Success', example='true'),
  synchro?: string(name='Synchro', example='None'),
}

model DisableDasProResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDasProResponseBody(name='body'),
}

async function disableDasProWithOptions(request: DisableDasProRequest, runtime: Util.RuntimeOptions): DisableDasProResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDasPro',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDasPro(request: DisableDasProRequest): DisableDasProResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDasProWithOptions(request, runtime);
}

model DisableInstanceDasConfigRequest {
  engine?: string(name='Engine', example='Redis'),
  instanceId?: string(name='InstanceId', example='r-bp1nti25tc7bq5****'),
  scaleType?: string(name='ScaleType', example='bandwidthScale'),
}

model DisableInstanceDasConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: string(name='Success', example='true'),
}

model DisableInstanceDasConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableInstanceDasConfigResponseBody(name='body'),
}

async function disableInstanceDasConfigWithOptions(request: DisableInstanceDasConfigRequest, runtime: Util.RuntimeOptions): DisableInstanceDasConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.scaleType)) {
    query['ScaleType'] = request.scaleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableInstanceDasConfig',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableInstanceDasConfig(request: DisableInstanceDasConfigRequest): DisableInstanceDasConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInstanceDasConfigWithOptions(request, runtime);
}

model DisableSqlConcurrencyControlRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
  itemId?: long(name='ItemId', example='1'),
}

model DisableSqlConcurrencyControlResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='Null'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model DisableSqlConcurrencyControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSqlConcurrencyControlResponseBody(name='body'),
}

async function disableSqlConcurrencyControlWithOptions(request: DisableSqlConcurrencyControlRequest, runtime: Util.RuntimeOptions): DisableSqlConcurrencyControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSqlConcurrencyControl',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSqlConcurrencyControl(request: DisableSqlConcurrencyControlRequest): DisableSqlConcurrencyControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSqlConcurrencyControlWithOptions(request, runtime);
}

model EnableDasProRequest {
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  sqlRetention?: int32(name='SqlRetention', example='30'),
  userId?: string(name='UserId', example='196278346919****'),
}

model EnableDasProResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: string(name='Success', example='true'),
  synchro?: string(name='Synchro', example='None'),
}

model EnableDasProResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDasProResponseBody(name='body'),
}

async function enableDasProWithOptions(request: EnableDasProRequest, runtime: Util.RuntimeOptions): EnableDasProResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sqlRetention)) {
    query['SqlRetention'] = request.sqlRetention;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDasPro',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDasPro(request: EnableDasProRequest): EnableDasProResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDasProWithOptions(request, runtime);
}

model EnableSqlConcurrencyControlRequest {
  concurrencyControlTime?: long(name='ConcurrencyControlTime', example='300'),
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
  maxConcurrency?: long(name='MaxConcurrency', example='3'),
  sqlKeywords?: string(name='SqlKeywords', example='call~open~api~test~4~from~POP'),
  sqlType?: string(name='SqlType', example='SELECT'),
}

model EnableSqlConcurrencyControlResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='Null'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model EnableSqlConcurrencyControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSqlConcurrencyControlResponseBody(name='body'),
}

async function enableSqlConcurrencyControlWithOptions(request: EnableSqlConcurrencyControlRequest, runtime: Util.RuntimeOptions): EnableSqlConcurrencyControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.concurrencyControlTime)) {
    query['ConcurrencyControlTime'] = request.concurrencyControlTime;
  }
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maxConcurrency)) {
    query['MaxConcurrency'] = request.maxConcurrency;
  }
  if (!Util.isUnset(request.sqlKeywords)) {
    query['SqlKeywords'] = request.sqlKeywords;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSqlConcurrencyControl',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSqlConcurrencyControl(request: EnableSqlConcurrencyControlRequest): EnableSqlConcurrencyControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlConcurrencyControlWithOptions(request, runtime);
}

model GetAsyncErrorRequestListByCodeRequest {
  end?: long(name='End', example='1642566830000'),
  errorCode?: string(name='ErrorCode', example='1064'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  nodeId?: string(name='NodeId', example='pi-wz9s658475e58****'),
  start?: long(name='Start', example='1642556990714'),
}

model GetAsyncErrorRequestListByCodeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    complete?: boolean(name='complete', example='true'),
    fail?: boolean(name='fail', example='false'),
    isFinish?: boolean(name='isFinish', example='true'),
    result?: [ 
      {
        instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
        sqlId?: string(name='sqlId', description='SQL ID。', example='ad78a4e7d3ce81590c9dc2d5f4bc****'),
      }
    ](name='result'),
    resultId?: string(name='resultId', example='async__c39d43ece52d35267cc4b92a0c26****'),
    state?: string(name='state', example='SUCCESS'),
    timestamp?: long(name='timestamp', example='1644559407740'),
  }(name='Data', example='{         "fail": false,         "data": [             {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****"             },             {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****"             }         ],         "resultId": "async__c39d43ece52d35267cc4b92a0c26****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644559407740     }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='9CB97BC4-6479-55D0-B9D0-EA925AFE****'),
  success?: boolean(name='Success', example='true'),
}

model GetAsyncErrorRequestListByCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncErrorRequestListByCodeResponseBody(name='body'),
}

async function getAsyncErrorRequestListByCodeWithOptions(request: GetAsyncErrorRequestListByCodeRequest, runtime: Util.RuntimeOptions): GetAsyncErrorRequestListByCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncErrorRequestListByCode',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncErrorRequestListByCode(request: GetAsyncErrorRequestListByCodeRequest): GetAsyncErrorRequestListByCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncErrorRequestListByCodeWithOptions(request, runtime);
}

model GetAsyncErrorRequestStatByCodeRequest {
  dbName?: string(name='DbName', example='testdb01'),
  end?: long(name='End', example='1642566830000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  nodeId?: string(name='NodeId', example='pi-wz9s658475e58****'),
  start?: long(name='Start', example='1642556990714'),
}

model GetAsyncErrorRequestStatByCodeResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    complete?: boolean(name='complete', example='true'),
    fail?: boolean(name='fail', example='false'),
    isFinish?: boolean(name='isFinish', example='true'),
    result?: [ 
      {
        count?: int32(name='count', example='1'),
        errorCode?: string(name='errorCode', example='1062'),
        instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
      }
    ](name='result'),
    resultId?: string(name='resultId', example='async__fcd7c35788e62324622c3b4a03de****'),
    state?: string(name='state', example='SUCCESS'),
    timestamp?: long(name='timestamp', example='1644560866961'),
  }(name='Data', example='{     "fail": false,     "data": [       {         "instanceId": "rm-2ze8g2am97624****",         "count": 1,         "errorCode": "1062"       },       {         "instanceId": "rm-2ze8g2am97624****",         "count": 2,         "errorCode": "1064"      }     ],     "resultId": "async__fcd7c35788e62324622c3b4a03de****",     "isFinish": true,     "state": "SUCCESS",     "complete": true,     "timestamp": 1644560866961   }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='840F51F7-9C01-538D-94F6-AE712905****'),
  success?: boolean(name='Success', example='true'),
}

model GetAsyncErrorRequestStatByCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncErrorRequestStatByCodeResponseBody(name='body'),
}

async function getAsyncErrorRequestStatByCodeWithOptions(request: GetAsyncErrorRequestStatByCodeRequest, runtime: Util.RuntimeOptions): GetAsyncErrorRequestStatByCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncErrorRequestStatByCode',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncErrorRequestStatByCode(request: GetAsyncErrorRequestStatByCodeRequest): GetAsyncErrorRequestStatByCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncErrorRequestStatByCodeWithOptions(request, runtime);
}

model GetAsyncErrorRequestStatResultRequest {
  dbName?: string(name='DbName', example='testdb01'),
  end?: long(name='End', example='1642566830000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  nodeId?: string(name='NodeId', example='pi-bp179lg03445l****'),
  sqlIdList?: string(name='SqlIdList', example='ad78a4e7d3ce81590c9dc2d5f4bc****,0f92feacd92c048b06a16617a633****'),
  start?: long(name='Start', example='1642556990714'),
}

model GetAsyncErrorRequestStatResultResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    complete?: boolean(name='complete', example='true'),
    fail?: boolean(name='fail', example='false'),
    isFinish?: boolean(name='isFinish', example='true'),
    result?: map[string]DataResultValue(name='result'),
    resultId?: string(name='resultId', example='async__61f45ee381b2fa4e8a6545e3bee9****'),
    state?: string(name='state', example='SUCCESS'),
    timestamp?: long(name='timestamp', example='1644558576717'),
  }(name='Data', example='{         "fail": false,         "data": {             "ad78a4e7d3ce81590c9dc2d5f4bc****": {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 1             },             "0f92feacd92c048b06a16617a633****": {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 2             }         },         "resultId": "async__61f45ee381b2fa4e8a6545e3bee9****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644558576717     }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='3FC3F8EB-3564-5D1A-B187-3B03E5B0****'),
  success?: boolean(name='Success', example='true'),
}

model GetAsyncErrorRequestStatResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncErrorRequestStatResultResponseBody(name='body'),
}

async function getAsyncErrorRequestStatResultWithOptions(request: GetAsyncErrorRequestStatResultRequest, runtime: Util.RuntimeOptions): GetAsyncErrorRequestStatResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.sqlIdList)) {
    query['SqlIdList'] = request.sqlIdList;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncErrorRequestStatResult',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncErrorRequestStatResult(request: GetAsyncErrorRequestStatResultRequest): GetAsyncErrorRequestStatResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncErrorRequestStatResultWithOptions(request, runtime);
}

model GetAutoResourceOptimizeRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\",\\"rm-2ze8g2am97627****\\"]'),
}

model GetAutoResourceOptimizeRulesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    enableAutoResourceOptimizeCount?: long(name='EnableAutoResourceOptimizeCount', example='1'),
    enableAutoResourceOptimizeList?: [ 
      {
        autoDefragment?: boolean(name='AutoDefragment', example='true'),
        dasProOn?: boolean(name='DasProOn', example='true'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        tableFragmentationRatio?: double(name='TableFragmentationRatio', example='0.2'),
        tableSpaceSize?: double(name='TableSpaceSize', example='10'),
        userId?: string(name='UserId', example='140692647406****'),
      }
    ](name='EnableAutoResourceOptimizeList'),
    hasEnableRuleButNotDasProCount?: long(name='HasEnableRuleButNotDasProCount', example='1'),
    hasEnableRuleButNotDasProList?: [ 
      {
        autoDefragment?: boolean(name='AutoDefragment', example='true'),
        dasProOn?: boolean(name='DasProOn', example='false'),
        instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
        tableFragmentationRatio?: double(name='TableFragmentationRatio', example='0.2'),
        tableSpaceSize?: double(name='TableSpaceSize', example='10'),
        userId?: string(name='UserId', example='140692647406****'),
      }
    ](name='HasEnableRuleButNotDasProList'),
    neverEnableAutoResourceOptimizeOrReleasedInstanceCount?: long(name='NeverEnableAutoResourceOptimizeOrReleasedInstanceCount', example='1'),
    neverEnableAutoResourceOptimizeOrReleasedInstanceIdList?: [ string ](name='NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList'),
    totalAutoResourceOptimizeRulesCount?: long(name='TotalAutoResourceOptimizeRulesCount', example='3'),
    turnOffAutoResourceOptimizeCount?: long(name='TurnOffAutoResourceOptimizeCount', example='1'),
    turnOffAutoResourceOptimizeList?: [ 
      {
        autoDefragment?: boolean(name='AutoDefragment', example='false'),
        dasProOn?: boolean(name='DasProOn', example='true'),
        instanceId?: string(name='InstanceId', example='rm-2vc54m2a6pd6p****'),
        tableFragmentationRatio?: double(name='TableFragmentationRatio', example='0.2'),
        tableSpaceSize?: double(name='TableSpaceSize', example='10'),
        userId?: string(name='UserId', example='140692647406****'),
      }
    ](name='TurnOffAutoResourceOptimizeList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: boolean(name='Success', example='true'),
}

model GetAutoResourceOptimizeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAutoResourceOptimizeRulesResponseBody(name='body'),
}

async function getAutoResourceOptimizeRulesWithOptions(request: GetAutoResourceOptimizeRulesRequest, runtime: Util.RuntimeOptions): GetAutoResourceOptimizeRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAutoResourceOptimizeRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAutoResourceOptimizeRules(request: GetAutoResourceOptimizeRulesRequest): GetAutoResourceOptimizeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutoResourceOptimizeRulesWithOptions(request, runtime);
}

model GetAutoThrottleRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\"]'),
}

model GetAutoThrottleRulesResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    enableAutoThrottleCount?: long(name='EnableAutoThrottleCount', example='1'),
    enableAutoThrottleList?: [ 
      {
        abnormalDuration?: double(name='AbnormalDuration', example='2'),
        activeSessions?: long(name='ActiveSessions', example='32'),
        allowThrottleEndTime?: string(name='AllowThrottleEndTime', example='23:59Z'),
        allowThrottleStartTime?: string(name='AllowThrottleStartTime', example='00:00Z'),
        autoKillSession?: boolean(name='AutoKillSession', example='true'),
        cpuSessionRelation?: string(name='CpuSessionRelation', example='AND'),
        cpuUsage?: double(name='CpuUsage', example='70'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        maxThrottleTime?: double(name='MaxThrottleTime', example='10'),
        userId?: string(name='UserId', example='140692647406****'),
        visible?: boolean(name='Visible', example='true'),
      }
    ](name='EnableAutoThrottleList'),
    neverEnableAutoThrottleOrReleasedInstanceCount?: long(name='NeverEnableAutoThrottleOrReleasedInstanceCount', example='1'),
    neverEnableAutoThrottleOrReleasedInstanceIdList?: [ string ](name='NeverEnableAutoThrottleOrReleasedInstanceIdList'),
    totalAutoThrottleRulesCount?: long(name='TotalAutoThrottleRulesCount', example='3'),
    turnOffAutoThrottleCount?: long(name='TurnOffAutoThrottleCount', example='1'),
    turnOffAutoThrottleList?: [ 
      {
        abnormalDuration?: double(name='AbnormalDuration', example='2'),
        activeSessions?: long(name='ActiveSessions', example='64'),
        allowThrottleEndTime?: string(name='AllowThrottleEndTime', example='23:59Z'),
        allowThrottleStartTime?: string(name='AllowThrottleStartTime', example='00:00Z'),
        autoKillSession?: boolean(name='AutoKillSession', example='true'),
        cpuSessionRelation?: string(name='CpuSessionRelation', example='OR'),
        cpuUsage?: double(name='CpuUsage', example='80'),
        instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
        maxThrottleTime?: double(name='MaxThrottleTime', example='10'),
        userId?: string(name='UserId', example='140692647406****'),
        visible?: boolean(name='Visible', example='false'),
      }
    ](name='TurnOffAutoThrottleList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: boolean(name='Success', example='true'),
}

model GetAutoThrottleRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAutoThrottleRulesResponseBody(name='body'),
}

async function getAutoThrottleRulesWithOptions(request: GetAutoThrottleRulesRequest, runtime: Util.RuntimeOptions): GetAutoThrottleRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAutoThrottleRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAutoThrottleRules(request: GetAutoThrottleRulesRequest): GetAutoThrottleRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutoThrottleRulesWithOptions(request, runtime);
}

model GetAutonomousNotifyEventContentRequest {
  instanceId?: string(name='InstanceId', example='rm-18ff4a195d****'),
  spanId?: string(name='SpanId', example='7e7b2774-95b8-4fa3-bd9c-0ab47cb7****'),
  context?: string(name='__context', example='None'),
}

model GetAutonomousNotifyEventContentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetAutonomousNotifyEventContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAutonomousNotifyEventContentResponseBody(name='body'),
}

async function getAutonomousNotifyEventContentWithOptions(request: GetAutonomousNotifyEventContentRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.spanId)) {
    query['SpanId'] = request.spanId;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAutonomousNotifyEventContent',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAutonomousNotifyEventContent(request: GetAutonomousNotifyEventContentRequest): GetAutonomousNotifyEventContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventContentWithOptions(request, runtime);
}

model GetAutonomousNotifyEventsInRangeRequest {
  endTime?: string(name='EndTime', example='1568265711221'),
  eventContext?: string(name='EventContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-18ff4a195d****'),
  level?: string(name='Level', example='Notice'),
  minLevel?: string(name='MinLevel', example='Notice'),
  nodeId?: string(name='NodeId', example='r-x****-db-0'),
  pageOffset?: string(name='PageOffset', example='1'),
  pageSize?: string(name='PageSize', example='30'),
  startTime?: string(name='StartTime', example='1568269711000'),
  context?: string(name='__context', example='None'),
}

model GetAutonomousNotifyEventsInRangeResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: {
      t?: [ string ](name='T')
    }(name='List'),
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    total?: long(name='Total', example='4'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetAutonomousNotifyEventsInRangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAutonomousNotifyEventsInRangeResponseBody(name='body'),
}

async function getAutonomousNotifyEventsInRangeWithOptions(request: GetAutonomousNotifyEventsInRangeRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventsInRangeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventContext)) {
    query['EventContext'] = request.eventContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.minLevel)) {
    query['MinLevel'] = request.minLevel;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageOffset)) {
    query['PageOffset'] = request.pageOffset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAutonomousNotifyEventsInRange',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAutonomousNotifyEventsInRange(request: GetAutonomousNotifyEventsInRangeRequest): GetAutonomousNotifyEventsInRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventsInRangeWithOptions(request, runtime);
}

model GetDasProServiceUsageRequest {
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  userId?: string(name='UserId', example='196278346919****'),
}

model GetDasProServiceUsageResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      commodityInstanceId?: string(name='commodityInstanceId', example='daspro-cn-v0h1l6i****'),
      custinsId?: long(name='custinsId', example='57369374'),
      engine?: string(name='engine', example='MySQL'),
      expireTime?: long(name='expireTime', example='1648742400000'),
      instanceAlias?: string(name='instanceAlias', example='TESTDB01'),
      instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
      ip?: string(name='ip', example='rm-2ze8g2am97624****.mysql.****.com'),
      isSpare?: boolean(name='isSpare', example='false'),
      port?: int32(name='port', example='3306'),
      region?: string(name='region', example='cn-shanghai'),
      serviceUnitId?: string(name='serviceUnitId', example='4'),
      sqlRetention?: string(name='sqlRetention', example='180'),
      startTime?: long(name='startTime', example='1646100892000'),
      storageFreeQuotaInMB?: double(name='storageFreeQuotaInMB', example='5120'),
      storageUsed?: long(name='storageUsed', example='35903498'),
      userId?: string(name='userId', example='196278346919****'),
      uuid?: string(name='uuid', example='hdm_b0ae36343407609bf3e8df8709d8****'),
      vpcId?: string(name='vpcId', description='VPC ID。', example='vpc-2zentqj1sk4qmolci****'),
    }
  ](name='Data', example='{         "storageFreeQuotaInMB": 5120,         "ip": "rm-2ze8g2am97624****.mysql.****.com",         "custinsId": 12448331,         "userId": "196278346919****",         "uuid": "hdm_b0ae36343407609bf3e8df8709d8****",         "expireTime": 1924963200000,         "instanceId": "rm-2ze8g2am97624****",         "storageUsed": 10773752667393,         "engine": "MySQL",         "instanceAlias": "TESTDB01_PROD",         "port": 3310,         "vpcId": "hdm_****",         "commodityInstanceId": "daspro-****",         "startTime": 1606381940000,         "isSpare": false,         "region": "cn-shanghai",         "serviceUnitId": "5",         "sqlRetention": 30     }'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: boolean(name='Success', example='true'),
}

model GetDasProServiceUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDasProServiceUsageResponseBody(name='body'),
}

async function getDasProServiceUsageWithOptions(request: GetDasProServiceUsageRequest, runtime: Util.RuntimeOptions): GetDasProServiceUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDasProServiceUsage',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDasProServiceUsage(request: GetDasProServiceUsageRequest): GetDasProServiceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDasProServiceUsageWithOptions(request, runtime);
}

model GetEndpointSwitchTaskRequest {
  taskId?: string(name='TaskId'),
  uid?: string(name='Uid'),
  userId?: string(name='UserId'),
  context?: string(name='__context'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  skipAuth?: string(name='skipAuth'),
  timestamp?: string(name='timestamp'),
}

model GetEndpointSwitchTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountId?: string(name='AccountId'),
    dbLinkId?: long(name='DbLinkId'),
    errMsg?: string(name='ErrMsg'),
    oriUuid?: string(name='OriUuid'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    uuid?: string(name='Uuid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchro?: string(name='Synchro'),
}

model GetEndpointSwitchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEndpointSwitchTaskResponseBody(name='body'),
}

async function getEndpointSwitchTaskWithOptions(request: GetEndpointSwitchTaskRequest, runtime: Util.RuntimeOptions): GetEndpointSwitchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  if (!Util.isUnset(request.accessKey)) {
    query['accessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.signature)) {
    query['signature'] = request.signature;
  }
  if (!Util.isUnset(request.skipAuth)) {
    query['skipAuth'] = request.skipAuth;
  }
  if (!Util.isUnset(request.timestamp)) {
    query['timestamp'] = request.timestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEndpointSwitchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEndpointSwitchTask(request: GetEndpointSwitchTaskRequest): GetEndpointSwitchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndpointSwitchTaskWithOptions(request, runtime);
}

model GetErrorRequestSampleRequest {
  dbName?: string(name='DbName', example='testdb01'),
  end?: long(name='End', example='1642566830000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  nodeId?: string(name='NodeId', example='pi-bp179lg03445l****'),
  sqlId?: string(name='SqlId', example='2cd4432556c3dab9d825ba363637****'),
  start?: long(name='Start', example='1642556990714'),
}

model GetErrorRequestSampleResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      database?: string(name='database', example='dbgateway'),
      errorCode?: string(name='errorCode', example='1062'),
      instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
      originHost?: string(name='originHost', example='172.16.1****'),
      sql?: string(name='sql', example='insert into meter_****'),
      sqlId?: string(name='sqlId', description='SQL ID。', example='2cd4432556c3dab9d825ba363637****'),
      tables?: [ string ](name='tables'),
      timestamp?: long(name='timestamp', example='1644476100435'),
      user?: string(name='user', example='dbgat****'),
    }
  ](name='Data', example='[         {             "sqlId": "2cd4432556c3dab9d825ba363637****",             "database": "dbgateway",             "originHost": "172.16.1****",             "tables": [                 "meter_****"             ],             "instanceId": "rm-2ze8g2am97624****",             "errorCode": "1062",             "user": "dbgat****",             "sql": "insert into meter_****\\n        ( \\n        ****\\n     )\\n        values (now(), now(), \\"bbbc8624-5e19-455a-9714-8466f688****\\", \\"2022-02-10 14:00:00\\", \\"{\\"endTime\\":\\"2022-02-10 14:00:00\\",\\"endTimestamp\\":1644472800,\\"startTime\\":\\"2022-02-10 13:00:00\\",\\"startTimestamp\\":1644469200}\\", null, null)",             "timestamp": 1644476100435         }]'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: boolean(name='Success', example='true'),
}

model GetErrorRequestSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetErrorRequestSampleResponseBody(name='body'),
}

async function getErrorRequestSampleWithOptions(request: GetErrorRequestSampleRequest, runtime: Util.RuntimeOptions): GetErrorRequestSampleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.sqlId)) {
    query['SqlId'] = request.sqlId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetErrorRequestSample',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getErrorRequestSample(request: GetErrorRequestSampleRequest): GetErrorRequestSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getErrorRequestSampleWithOptions(request, runtime);
}

model GetEventSubscriptionRequest {
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
}

model GetEventSubscriptionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    active?: int32(name='active', example='1'),
    channelType?: string(name='channelType', example='hdm_alarm_sms,dingtalk'),
    contactGroupName?: string(name='contactGroupName'),
    contactGroups?: [ 
      {
        contacts?: string(name='contacts'),
        description?: string(name='description'),
        name?: string(name='name'),
        userId?: string(name='userId', example='1088760496****'),
      }
    ](name='contactGroups'),
    contactName?: string(name='contactName'),
    contacts?: [ 
      {
        dingtalkHook?: string(name='dingtalkHook', example='https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****'),
        email?: string(name='email', example='zhangxyzw****@163.com'),
        groups?: [ string ](name='groups'),
        isCmsReduplicated?: boolean(name='isCmsReduplicated', example='true'),
        name?: string(name='name'),
        phone?: string(name='phone', example='1771051****'),
        userId?: string(name='userId', example='1088760496****'),
      }
    ](name='contacts'),
    eventContext?: string(name='eventContext', example='AllContext'),
    eventSendGroup?: [ string ](name='eventSendGroup'),
    gmtCreate?: long(name='gmtCreate', example='1633071840000'),
    gmtModified?: long(name='gmtModified', example='1633071850000'),
    id?: long(name='id', example='1'),
    instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
    lang?: string(name='lang', example='zh_CN'),
    level?: string(name='level', example='Optimization'),
    minInterval?: string(name='minInterval', example='60'),
    userId?: string(name='userId', example='1088760496****'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetEventSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEventSubscriptionResponseBody(name='body'),
}

async function getEventSubscriptionWithOptions(request: GetEventSubscriptionRequest, runtime: Util.RuntimeOptions): GetEventSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEventSubscription',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEventSubscription(request: GetEventSubscriptionRequest): GetEventSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventSubscriptionWithOptions(request, runtime);
}

model GetFullRequestOriginStatByInstanceIdRequest {
  asc?: boolean(name='Asc'),
  end?: long(name='End', example='1644803409000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  nodeId?: string(name='NodeId', example='pi-bp12v7243x012****'),
  orderBy?: string(name='OrderBy', example='count'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  role?: string(name='Role', example='polarx_cn'),
  sqlType?: string(name='SqlType', example='SELECT'),
  start?: long(name='Start', example='1644716649000'),
  userId?: string(name='UserId', example='196278346919****'),
}

model GetFullRequestOriginStatByInstanceIdResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        avgExaminedRows?: double(name='AvgExaminedRows', example='10000'),
        avgFetchRows?: long(name='AvgFetchRows', example='0'),
        avgLockWaitTime?: double(name='AvgLockWaitTime', example='0.00009589874265269765'),
        avgLogicalRead?: double(name='AvgLogicalRead', example='654.4470327860251'),
        avgPhysicalAsyncRead?: long(name='AvgPhysicalAsyncRead', example='0'),
        avgPhysicalSyncRead?: double(name='AvgPhysicalSyncRead', example='0'),
        avgReturnedRows?: double(name='AvgReturnedRows', example='10000'),
        avgRows?: long(name='AvgRows', example='0'),
        avgRt?: double(name='AvgRt', example='2.499'),
        avgSqlCount?: long(name='AvgSqlCount', example='10000'),
        avgUpdatedRows?: double(name='AvgUpdatedRows', example='10000'),
        count?: long(name='Count', example='100000'),
        countRate?: double(name='CountRate', example='0.0586'),
        database?: string(name='Database', example='dbtest01'),
        errorCount?: long(name='ErrorCount', example='1'),
        examinedRows?: long(name='ExaminedRows', example='10000'),
        fetchRows?: long(name='FetchRows', example='200'),
        ip?: string(name='Ip', example='rm-uf6dyi58dm6****.mysql.rds.aliy****.com'),
        key?: string(name='Key', example='172.26.6****'),
        lockWaitTime?: double(name='LockWaitTime', example='1089.4177720290281'),
        logicalRead?: long(name='LogicalRead', example='7.434573266E9'),
        originHost?: string(name='OriginHost', example='172.26.6****'),
        physicalAsyncRead?: long(name='PhysicalAsyncRead', example='0'),
        physicalSyncRead?: long(name='PhysicalSyncRead', example='0'),
        port?: long(name='Port', example='3306'),
        rows?: long(name='Rows', example='0'),
        rtGreaterThanOneSecondCount?: long(name='RtGreaterThanOneSecondCount', example='2'),
        rtRate?: double(name='RtRate', example='0.1384'),
        sqlCount?: long(name='SqlCount', example='200'),
        sumUpdatedRows?: long(name='SumUpdatedRows', example='200'),
        version?: long(name='Version', example='1'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2zentqj1sk4qmolci****'),
      }
    ](name='List'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: boolean(name='Success', example='true'),
}

model GetFullRequestOriginStatByInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFullRequestOriginStatByInstanceIdResponseBody(name='body'),
}

async function getFullRequestOriginStatByInstanceIdWithOptions(request: GetFullRequestOriginStatByInstanceIdRequest, runtime: Util.RuntimeOptions): GetFullRequestOriginStatByInstanceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFullRequestOriginStatByInstanceId',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFullRequestOriginStatByInstanceId(request: GetFullRequestOriginStatByInstanceIdRequest): GetFullRequestOriginStatByInstanceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFullRequestOriginStatByInstanceIdWithOptions(request, runtime);
}

model GetFullRequestSampleByInstanceIdRequest {
  end?: long(name='End', example='1660104621000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  role?: string(name='Role', example='polarx_cn'),
  sqlId?: string(name='SqlId', description='SQL ID。', example='651b56fe9418d48edb8fdf0980ec****'),
  start?: long(name='Start', example='1660097421000'),
  userId?: string(name='UserId', example='196278346919****'),
}

model GetFullRequestSampleByInstanceIdResponseBody = {
  code?: long(name='Code', example='200'),
  data?: [ 
    {
      database?: string(name='Database', example='dbtest'),
      frows?: long(name='Frows', example='0'),
      lockWaitTime?: double(name='LockWaitTime', example='0.0137'),
      logicalRead?: double(name='LogicalRead', example='165848'),
      originHost?: string(name='OriginHost', example='172.17.XX.XX'),
      physicalAsyncRead?: double(name='PhysicalAsyncRead', example='0'),
      physicalSyncRead?: double(name='PhysicalSyncRead', example='0'),
      rows?: long(name='Rows', example='0'),
      rowsExamined?: long(name='RowsExamined', example='2048576'),
      rowsReturned?: long(name='RowsReturned', example='14'),
      rt?: double(name='Rt', example='0.409789'),
      scanRows?: long(name='ScanRows', example='0'),
      scnt?: long(name='Scnt', example='0'),
      sql?: string(name='Sql', example='select * from testdb01 where ****'),
      sqlId?: string(name='SqlId', description='SQL ID。', example='651b56fe9418d48edb8fdf0980ec****'),
      sqlType?: string(name='SqlType', example='SELECT'),
      timestamp?: long(name='Timestamp', example='1660100753556'),
      updateRows?: long(name='UpdateRows', example='0'),
      user?: string(name='User', example='testuser'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='0A74B755-98B7-59DB-8724-1321B394****'),
  success?: boolean(name='Success', example='true'),
}

model GetFullRequestSampleByInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFullRequestSampleByInstanceIdResponseBody(name='body'),
}

async function getFullRequestSampleByInstanceIdWithOptions(request: GetFullRequestSampleByInstanceIdRequest, runtime: Util.RuntimeOptions): GetFullRequestSampleByInstanceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.end)) {
    body['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sqlId)) {
    body['SqlId'] = request.sqlId;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFullRequestSampleByInstanceId',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFullRequestSampleByInstanceId(request: GetFullRequestSampleByInstanceIdRequest): GetFullRequestSampleByInstanceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFullRequestSampleByInstanceIdWithOptions(request, runtime);
}

model GetFullRequestStatResultByInstanceIdRequest {
  asc?: boolean(name='Asc'),
  dbName?: string(name='DbName', example='dbtest01'),
  end?: long(name='End', example='1645668213000'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  keyword?: string(name='Keyword', example='dbtest01'),
  nodeId?: string(name='NodeId', example='pi-bp12v7243x012****'),
  orderBy?: string(name='OrderBy', example='count'),
  originHost?: string(name='OriginHost', example='172.26.XX.XXX'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  role?: string(name='Role', example='polarx_cn'),
  sqlId?: string(name='SqlId', example='d71f82be1eef72bd105128204d2e****'),
  sqlType?: string(name='SqlType', example='SELECT'),
  start?: long(name='Start', example='1645581813000'),
  userId?: string(name='UserId', example='196278346919****'),
}

model GetFullRequestStatResultByInstanceIdResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    fail?: boolean(name='Fail', example='false'),
    isFinish?: boolean(name='IsFinish', example='true'),
    result?: {
      list?: [ 
        {
          avgExaminedRows?: double(name='AvgExaminedRows', example='10000'),
          avgFetchRows?: long(name='AvgFetchRows', example='0'),
          avgLockWaitTime?: double(name='AvgLockWaitTime', example='0.00009589874265269765'),
          avgLogicalRead?: double(name='AvgLogicalRead', example='654.4470327860251'),
          avgPhysicalAsyncRead?: long(name='AvgPhysicalAsyncRead', example='0'),
          avgPhysicalSyncRead?: long(name='AvgPhysicalSyncRead', example='0'),
          avgReturnedRows?: double(name='AvgReturnedRows', example='10000'),
          avgRt?: double(name='AvgRt', example='2.499'),
          avgSqlCount?: long(name='AvgSqlCount', example='10000'),
          avgUpdatedRows?: long(name='AvgUpdatedRows', example='10000'),
          count?: long(name='Count', example='100000'),
          countRate?: double(name='CountRate', example='0.0586'),
          database?: string(name='Database', example='dbtest01'),
          errorCount?: long(name='ErrorCount', example='1'),
          examinedRows?: long(name='ExaminedRows', example='10000'),
          fetchRows?: long(name='FetchRows', example='0'),
          ip?: string(name='Ip', example='rm-uf6dyi58dm6****.mysql.rds.aliy****.com'),
          lockWaitTime?: double(name='LockWaitTime', example='1089.4177720290281'),
          logicalRead?: long(name='LogicalRead', example='7.434573266E9'),
          physicalAsyncRead?: long(name='PhysicalAsyncRead', example='0'),
          physicalSyncRead?: long(name='PhysicalSyncRead', example='0'),
          port?: long(name='Port', example='3306'),
          psql?: string(name='Psql', example='select * from dbtest01 where ****'),
          rows?: long(name='Rows', example='0'),
          rtGreaterThanOneSecondCount?: long(name='RtGreaterThanOneSecondCount', example='20'),
          rtRate?: double(name='RtRate', example='2.499'),
          sqlCount?: long(name='SqlCount', example='200'),
          sqlId?: string(name='SqlId', description='SQL ID。', example='d71f82be1eef72bd105128204d2e****'),
          sumUpdatedRows?: long(name='SumUpdatedRows', example='100'),
          tables?: [ string ](name='Tables'),
          version?: long(name='Version', example='1'),
          vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2zentqj1sk4qmolci****'),
        }
      ](name='List'),
      total?: long(name='Total', example='1'),
    }(name='Result'),
    resultId?: string(name='ResultId', example='9CB97BC4-6479-55D0-B9D0-EA925AFE****'),
    state?: string(name='State', example='SUCCESS'),
    timestamp?: long(name='Timestamp', example='1645668213000'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7172BECE-588A-5961-8126-C216E16B****'),
  success?: boolean(name='Success', example='true'),
}

model GetFullRequestStatResultByInstanceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFullRequestStatResultByInstanceIdResponseBody(name='body'),
}

async function getFullRequestStatResultByInstanceIdWithOptions(request: GetFullRequestStatResultByInstanceIdRequest, runtime: Util.RuntimeOptions): GetFullRequestStatResultByInstanceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.originHost)) {
    query['OriginHost'] = request.originHost;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.sqlId)) {
    query['SqlId'] = request.sqlId;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFullRequestStatResultByInstanceId',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFullRequestStatResultByInstanceId(request: GetFullRequestStatResultByInstanceIdRequest): GetFullRequestStatResultByInstanceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFullRequestStatResultByInstanceIdWithOptions(request, runtime);
}

model GetHDMAliyunResourceSyncResultRequest {
  taskId?: string(name='TaskId'),
  uid?: string(name='Uid'),
  userId?: string(name='UserId'),
  context?: string(name='__context'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  skipAuth?: string(name='skipAuth'),
  timestamp?: string(name='timestamp'),
}

model GetHDMAliyunResourceSyncResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    errorMsg?: string(name='ErrorMsg'),
    results?: string(name='Results'),
    subResults?: {
      resourceSyncSubResult?: [ 
      {
        errMsg?: string(name='ErrMsg'),
        resourceType?: string(name='ResourceType'),
        success?: boolean(name='Success'),
        syncCount?: int32(name='SyncCount'),
      }
    ](name='ResourceSyncSubResult')
    }(name='SubResults'),
    syncStatus?: string(name='SyncStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchro?: string(name='Synchro'),
}

model GetHDMAliyunResourceSyncResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHDMAliyunResourceSyncResultResponseBody(name='body'),
}

async function getHDMAliyunResourceSyncResultWithOptions(request: GetHDMAliyunResourceSyncResultRequest, runtime: Util.RuntimeOptions): GetHDMAliyunResourceSyncResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  if (!Util.isUnset(request.accessKey)) {
    query['accessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.signature)) {
    query['signature'] = request.signature;
  }
  if (!Util.isUnset(request.skipAuth)) {
    query['skipAuth'] = request.skipAuth;
  }
  if (!Util.isUnset(request.timestamp)) {
    query['timestamp'] = request.timestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHDMAliyunResourceSyncResult',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHDMAliyunResourceSyncResult(request: GetHDMAliyunResourceSyncResultRequest): GetHDMAliyunResourceSyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHDMAliyunResourceSyncResultWithOptions(request, runtime);
}

model GetHDMLastAliyunResourceSyncResultRequest {
  uid?: string(name='Uid'),
  userId?: string(name='UserId'),
  context?: string(name='__context'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  skipAuth?: string(name='skipAuth'),
  timestamp?: string(name='timestamp'),
}

model GetHDMLastAliyunResourceSyncResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    errorMsg?: string(name='ErrorMsg'),
    results?: string(name='Results'),
    subResults?: {
      resourceSyncSubResult?: [ 
      {
        errMsg?: string(name='ErrMsg'),
        resourceType?: string(name='ResourceType'),
        success?: boolean(name='Success'),
        syncCount?: int32(name='SyncCount'),
      }
    ](name='ResourceSyncSubResult')
    }(name='SubResults'),
    syncStatus?: string(name='SyncStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchro?: string(name='Synchro'),
}

model GetHDMLastAliyunResourceSyncResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHDMLastAliyunResourceSyncResultResponseBody(name='body'),
}

async function getHDMLastAliyunResourceSyncResultWithOptions(request: GetHDMLastAliyunResourceSyncResultRequest, runtime: Util.RuntimeOptions): GetHDMLastAliyunResourceSyncResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  if (!Util.isUnset(request.accessKey)) {
    query['accessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.signature)) {
    query['signature'] = request.signature;
  }
  if (!Util.isUnset(request.skipAuth)) {
    query['skipAuth'] = request.skipAuth;
  }
  if (!Util.isUnset(request.timestamp)) {
    query['timestamp'] = request.timestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHDMLastAliyunResourceSyncResult',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHDMLastAliyunResourceSyncResult(request: GetHDMLastAliyunResourceSyncResultRequest): GetHDMLastAliyunResourceSyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHDMLastAliyunResourceSyncResultWithOptions(request, runtime);
}

model GetInstanceInspectionsRequest {
  endTime?: string(name='EndTime', example='1655427625000'),
  engine?: string(name='Engine', example='MySQL'),
  instanceArea?: string(name='InstanceArea', example='RDS'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2eil6npi****'),
  searchMap?: string(name='SearchMap', example='{"InstanceId":"rm-bp10usoc1erj7****"}'),
  startTime?: string(name='StartTime', example='1655416825000'),
}

model GetInstanceInspectionsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        autoFunction?: {
          autoIndex?: int32(name='AutoIndex'),
          autoLimitedSql?: int32(name='AutoLimitedSql'),
          autoResourceOptimize?: int32(name='AutoResourceOptimize'),
          autoScale?: int32(name='AutoScale'),
          eventSubscription?: int32(name='EventSubscription'),
        }(name='AutoFunction'),
        data?: map[string]any(name='Data', example='"data": { "hasDeadLock": false, "exceptionTableMap": {}, "bigTransactionCount": 0, "cpu": 4, "isRds": true, "rdsEnable": true, "enable": false, "activeSessions": [], "bigTransactionList": [], "bigSessionList": [ { "blockDuration": 0, "active": false, "Time": 0, "db": "" },'),
        enableDasPro?: int32(name='EnableDasPro'),
        endTime?: long(name='EndTime', example='1608888296001'),
        gmtCreate?: long(name='GmtCreate', example='1603247192000'),
        instance?: {
          accountId?: string(name='AccountId', example='108398049688****'),
          category?: string(name='Category'),
          cpu?: string(name='Cpu'),
          engine?: string(name='Engine', example='MySQL'),
          engineVersion?: string(name='EngineVersion', example='5.7'),
          instanceAlias?: string(name='InstanceAlias'),
          instanceArea?: string(name='InstanceArea', example='RDS'),
          instanceClass?: string(name='InstanceClass', example='rds.mysql.s2.xlarge'),
          instanceId?: string(name='InstanceId', example='rm-bp10usoc1erj7****'),
          memory?: int32(name='Memory'),
          networkType?: string(name='NetworkType', example='VPC'),
          nodeId?: string(name='NodeId', example='rm-bp10usoc1erj7****'),
          region?: string(name='Region', example='cn-hangzhou'),
          storage?: int32(name='Storage'),
          uuid?: string(name='Uuid', example='hdm_3063db6792965c080a4bcb6e6304****'),
          vpcId?: string(name='VpcId', example='vpc-bp1knt7m55z9exoo7****'),
        }(name='Instance'),
        score?: int32(name='Score', example='100'),
        scoreMap?: map[string]any(name='ScoreMap'),
        startTime?: long(name='StartTime', example='1608888296000'),
        state?: int32(name='State'),
        taskType?: int32(name='TaskType'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    total?: long(name='Total', example='4'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetInstanceInspectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceInspectionsResponseBody(name='body'),
}

async function getInstanceInspectionsWithOptions(request: GetInstanceInspectionsRequest, runtime: Util.RuntimeOptions): GetInstanceInspectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.instanceArea)) {
    query['InstanceArea'] = request.instanceArea;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.searchMap)) {
    query['SearchMap'] = request.searchMap;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceInspections',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceInspections(request: GetInstanceInspectionsRequest): GetInstanceInspectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceInspectionsWithOptions(request, runtime);
}

model GetInstanceSqlOptimizeStatisticRequest {
  endTime?: string(name='EndTime', example='1662518540764'),
  filterEnable?: string(name='FilterEnable', example='false'),
  instanceId?: string(name='InstanceId', example='pc-wz90h9560rvdz****'),
  nodeId?: string(name='NodeId', example='pi-bp12v7243x012****'),
  startTime?: string(name='StartTime', example='1661308902060'),
  threshold?: string(name='Threshold', example='None'),
  useMerging?: string(name='UseMerging', example='true'),
}

model GetInstanceSqlOptimizeStatisticResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    count?: int32(name='count', example='16'),
    improvement?: double(name='improvement', example='1003'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetInstanceSqlOptimizeStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceSqlOptimizeStatisticResponseBody(name='body'),
}

async function getInstanceSqlOptimizeStatisticWithOptions(request: GetInstanceSqlOptimizeStatisticRequest, runtime: Util.RuntimeOptions): GetInstanceSqlOptimizeStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filterEnable)) {
    query['FilterEnable'] = request.filterEnable;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  if (!Util.isUnset(request.useMerging)) {
    query['UseMerging'] = request.useMerging;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceSqlOptimizeStatistic',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceSqlOptimizeStatistic(request: GetInstanceSqlOptimizeStatisticRequest): GetInstanceSqlOptimizeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceSqlOptimizeStatisticWithOptions(request, runtime);
}

model GetPartitionsHeatmapRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='pxc-hzrciqy62c****'),
  timeRange?: string(name='TimeRange', example='LAST_SIX_HOURS'),
  type?: string(name='Type', example='WRITTEN_ROWS_WITH_DN'),
}

model GetPartitionsHeatmapResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{
    "boundAxis": [
        {
            "bound": "A,B,C,D",
            "labels": [
                "L1",
                "L2",
                "L3",
                "L4"
            ],
            "rows": 3171
        },
        {
            "bound": "A,B,C,D",
            "labels": [
                "L1",
                "L2",
                "L3",
                "L4"
            ],
            "rows": 277128
        }
    ],
    "dataMap": {
        "READ_WRITTEN_ROWS": [
            [
                0,
                0,
                0
            ],
            [
                0,
                0,
                0
            ]
        ]
    },
    "timeAxis": [
        1671701056070,
        1671701116551,
        1671701177020
    ]
}'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='D00DB161-FEF6-5428-B37A-8D29A4C2****'),
  success?: string(name='Success', example='true'),
}

model GetPartitionsHeatmapResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPartitionsHeatmapResponseBody(name='body'),
}

async function getPartitionsHeatmapWithOptions(request: GetPartitionsHeatmapRequest, runtime: Util.RuntimeOptions): GetPartitionsHeatmapResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.timeRange)) {
    query['TimeRange'] = request.timeRange;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPartitionsHeatmap',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPartitionsHeatmap(request: GetPartitionsHeatmapRequest): GetPartitionsHeatmapResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPartitionsHeatmapWithOptions(request, runtime);
}

model GetQueryOptimizeDataStatsRequest {
  asc?: string(name='Asc', example='true'),
  dbNames?: string(name='DbNames', example='testdb01'),
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze8g2am97624****'),
  keywords?: string(name='Keywords', example='select update'),
  logicalOperator?: string(name='LogicalOperator', example='or'),
  onlyOptimizedSql?: string(name='OnlyOptimizedSql', example='false'),
  orderBy?: string(name='OrderBy', example='count'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  rules?: string(name='Rules', example='DAS_NOT_IMPORTANT'),
  sqlIds?: string(name='SqlIds', example='2e8147b5ca2dfc640dfd5e43d96a****'),
  tagNames?: string(name='TagNames', example='None'),
  time?: string(name='Time', example='1642953600000'),
}

model GetQueryOptimizeDataStatsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        avgLockTime?: double(name='AvgLockTime', example='0.1'),
        avgQueryTime?: double(name='AvgQueryTime', example='1.1'),
        avgRowsAffected?: double(name='AvgRowsAffected', example='100.1'),
        avgRowsExamined?: double(name='AvgRowsExamined', example='100.1'),
        avgRowsSent?: double(name='AvgRowsSent', example='100.1'),
        count?: int32(name='Count', example='100'),
        dbname?: string(name='Dbname', example='testdb01'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        maxLockTime?: double(name='MaxLockTime', example='0.1'),
        maxQueryTime?: double(name='MaxQueryTime', example='1.1'),
        maxRowsAffected?: long(name='MaxRowsAffected', example='10000'),
        maxRowsExamined?: long(name='MaxRowsExamined', example='100000'),
        maxRowsSent?: long(name='MaxRowsSent', example='10000'),
        psql?: string(name='Psql', example='select 1'),
        ruleList?: [ 
          {
            name?: string(name='Name', example='DAS_NOT_IMPORTANT'),
            type?: string(name='Type', example='Predefined'),
          }
        ](name='RuleList'),
        sqlId?: string(name='SqlId', example='2e8147b5ca2dfc640dfd5e43d96a****'),
        sqlSample?: string(name='SqlSample', example='select 2'),
        sqlType?: string(name='SqlType', example='INSERT'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeDataStatsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeDataStatsResponseBody(name='body'),
}

async function getQueryOptimizeDataStatsWithOptions(request: GetQueryOptimizeDataStatsRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeDataStatsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeDataStats',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeDataStats(request: GetQueryOptimizeDataStatsRequest): GetQueryOptimizeDataStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeDataStatsWithOptions(request, runtime);
}

model GetQueryOptimizeDataTopRequest {
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze8g2am97624****'),
  tagNames?: string(name='TagNames', example='None'),
  time?: string(name='Time', example='1642953600000'),
  type?: string(name='Type', example='RED'),
}

model GetQueryOptimizeDataTopResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        type?: string(name='Type', example='sqlExecuteCount'),
        value?: double(name='Value', example='100'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeDataTopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeDataTopResponseBody(name='body'),
}

async function getQueryOptimizeDataTopWithOptions(request: GetQueryOptimizeDataTopRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeDataTopResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeDataTop',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeDataTop(request: GetQueryOptimizeDataTopRequest): GetQueryOptimizeDataTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeDataTopWithOptions(request, runtime);
}

model GetQueryOptimizeDataTrendRequest {
  end?: string(name='End', example='1643040000000'),
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze8g2am97624****'),
  start?: string(name='Start', example='1642435200000'),
  tagNames?: string(name='TagNames', example='None'),
}

model GetQueryOptimizeDataTrendResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        kpi?: string(name='Kpi', example='sqlExecuteCount'),
        timestamp?: long(name='Timestamp', example='1643040000000'),
        value?: double(name='Value', example='1000'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeDataTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeDataTrendResponseBody(name='body'),
}

async function getQueryOptimizeDataTrendWithOptions(request: GetQueryOptimizeDataTrendRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeDataTrendResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeDataTrend',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeDataTrend(request: GetQueryOptimizeDataTrendRequest): GetQueryOptimizeDataTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeDataTrendWithOptions(request, runtime);
}

model GetQueryOptimizeExecErrorSampleRequest {
  engine?: string(name='Engine', example='MySQL'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  sqlId?: string(name='SqlId', example='2e8147b5ca2dfc640dfd5e43d96a****'),
  time?: string(name='Time', example='1642953600000'),
}

model GetQueryOptimizeExecErrorSampleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        dbname?: string(name='Dbname', example='testdb01'),
        errorCode?: string(name='ErrorCode', example='1146'),
        origHost?: string(name='OrigHost', example='100.104.XX.XX'),
        sqlId?: string(name='SqlId', example='2e8147b5ca2dfc640dfd5e43d96a****'),
        sqlText?: string(name='SqlText', example='select * from test1'),
        timestamp?: long(name='Timestamp', example='1643020306739'),
        user?: string(name='User', example='test01'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeExecErrorSampleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeExecErrorSampleResponseBody(name='body'),
}

async function getQueryOptimizeExecErrorSampleWithOptions(request: GetQueryOptimizeExecErrorSampleRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeExecErrorSampleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeExecErrorSample',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeExecErrorSample(request: GetQueryOptimizeExecErrorSampleRequest): GetQueryOptimizeExecErrorSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeExecErrorSampleWithOptions(request, runtime);
}

model GetQueryOptimizeExecErrorStatsRequest {
  asc?: string(name='Asc', example='true'),
  dbNames?: string(name='DbNames', example='testdb01'),
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze8g2am97624****'),
  keywords?: string(name='Keywords', example='select update'),
  logicalOperator?: string(name='LogicalOperator', example='or'),
  orderBy?: string(name='OrderBy', example='error_count'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  time?: string(name='Time', example='1642953600000'),
}

model GetQueryOptimizeExecErrorStatsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        dbname?: string(name='Dbname', example='testdb01'),
        errorCode?: string(name='ErrorCode', example='1146'),
        errorCount?: long(name='ErrorCount', example='10'),
        instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        instanceName?: string(name='InstanceName'),
        sqlId?: string(name='SqlId', example='2e8147b5ca2dfc640dfd5e43d96a****'),
        sqlText?: string(name='SqlText', example='select * from test1'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: long(name='Total', example='19'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeExecErrorStatsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeExecErrorStatsResponseBody(name='body'),
}

async function getQueryOptimizeExecErrorStatsWithOptions(request: GetQueryOptimizeExecErrorStatsRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeExecErrorStatsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeExecErrorStats',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeExecErrorStats(request: GetQueryOptimizeExecErrorStatsRequest): GetQueryOptimizeExecErrorStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeExecErrorStatsWithOptions(request, runtime);
}

model GetQueryOptimizeRuleListRequest {
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze8g2am97624****'),
  tagNames?: string(name='TagNames', example='None'),
}

model GetQueryOptimizeRuleListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        name?: string(name='Name', example='LARGE_ROWS_EXAMINED'),
        ruleId?: string(name='RuleId', example='None'),
        type?: string(name='Type', example='Predefined'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeRuleListResponseBody(name='body'),
}

async function getQueryOptimizeRuleListWithOptions(request: GetQueryOptimizeRuleListRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeRuleListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeRuleList',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeRuleList(request: GetQueryOptimizeRuleListRequest): GetQueryOptimizeRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeRuleListWithOptions(request, runtime);
}

model GetQueryOptimizeSolutionRequest {
  engine?: string(name='Engine', example='MySQL'),
  ruleIds?: string(name='RuleIds', example='LARGE_ROWS_EXAMINED'),
  sqlId?: string(name='SqlId', example='05fecf7e7b3efd123c4d5197035f****'),
}

model GetQueryOptimizeSolutionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='Extra', example='None'),
    list?: [ 
      {
        level?: string(name='Level', example='INFO'),
        ruleId?: string(name='RuleId', example='LARGE_ROWS_EXAMINED'),
        solution?: string(name='Solution', example='LARGE_ROWS_EXAMINED_SOLUTION'),
        solutionExt?: string(name='SolutionExt', example='None'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='None'),
    pageSize?: int32(name='PageSize', example='None'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='30FF4E40-17F3-5A51-AB23-43F30D9B****'),
  success?: string(name='Success', example='true'),
}

model GetQueryOptimizeSolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQueryOptimizeSolutionResponseBody(name='body'),
}

async function getQueryOptimizeSolutionWithOptions(request: GetQueryOptimizeSolutionRequest, runtime: Util.RuntimeOptions): GetQueryOptimizeSolutionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueryOptimizeSolution',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQueryOptimizeSolution(request: GetQueryOptimizeSolutionRequest): GetQueryOptimizeSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueryOptimizeSolutionWithOptions(request, runtime);
}

model GetRedisAllSessionRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='r-2zemyfd1sh1u2i****'),
}

model GetRedisAllSessionResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    sessions?: [ 
      {
        addr?: string(name='Addr', example='172.16.XX.XX:53458'),
        age?: string(name='Age', example='12'),
        client?: string(name='Client', example='172.16.XX.XX'),
        clientDesc?: string(name='ClientDesc', example='prod ip'),
        cmd?: string(name='Cmd', example='PING'),
        db?: long(name='Db', example='0'),
        events?: string(name='Events', example='r'),
        fd?: long(name='Fd', example='73'),
        flags?: string(name='Flags', example='N'),
        id?: long(name='Id', example='9080586'),
        idle?: long(name='Idle', example='8'),
        multi?: long(name='Multi', example='-1'),
        name?: string(name='Name', example='test'),
        nodeId?: string(name='NodeId', example='r-2zemyfd1sh1u2i****-proxy-14#1679****'),
        obl?: long(name='Obl', example='0'),
        oll?: long(name='Oll', example='0'),
        omem?: long(name='Omem', example='0'),
        psub?: long(name='Psub', example='0'),
        qbuf?: long(name='Qbuf', example='0'),
        qbufFree?: long(name='QbufFree', example='0'),
        sub?: long(name='Sub', example='0'),
      }
    ](name='Sessions'),
    sourceStats?: [ 
      {
        count?: string(name='Count', example='1'),
        ids?: [ long ](name='Ids'),
        key?: string(name='Key', example='172.16.XX.XX'),
      }
    ](name='SourceStats'),
    timestamp?: long(name='Timestamp', example='1660100753556'),
    total?: long(name='Total', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='40C6E9AF-6C23-5614-AA83-34344CC6****'),
  success?: boolean(name='Success', example='true'),
}

model GetRedisAllSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRedisAllSessionResponseBody(name='body'),
}

async function getRedisAllSessionWithOptions(request: GetRedisAllSessionRequest, runtime: Util.RuntimeOptions): GetRedisAllSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRedisAllSession',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRedisAllSession(request: GetRedisAllSessionRequest): GetRedisAllSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRedisAllSessionWithOptions(request, runtime);
}

model GetRequestDiagnosisPageRequest {
  endTime?: long(name='EndTime', example='1634972640000'),
  instanceId?: string(name='InstanceId', example='rm-0iwhhl8gx0ld6****'),
  nodeId?: string(name='NodeId', example='202****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  startTime?: long(name='StartTime', example='1633071840000'),
}

model GetRequestDiagnosisPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    extra?: string(name='extra', example='{"":""}'),
    list?: [ 
      {
        accountId?: string(name='accountId', example='2093****'),
        dbSchema?: string(name='dbSchema', example='das'),
        engine?: string(name='engine', example='MySQL'),
        gmtCreate?: string(name='gmtCreate', example='1633071840000'),
        gmtModified?: string(name='gmtModified', example='1633071850000'),
        messageId?: string(name='messageId', example='61820b594664275c4429****'),
        param?: string(name='param', example='{"":""}'),
        result?: string(name='result'),
        sqlId?: string(name='sqlId', example='0c95dae3afef77be06572612df9b****'),
        state?: int32(name='state', example='2'),
        uuid?: string(name='uuid', example='hdm_51fe9bc19ec413f4d530431af87a****'),
      }
    ](name='list'),
    pageNo?: long(name='pageNo', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    total?: long(name='total', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='800FBAF5-A539-5B97-A09E-C63AB2F7****'),
  success?: string(name='Success', example='true'),
}

model GetRequestDiagnosisPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRequestDiagnosisPageResponseBody(name='body'),
}

async function getRequestDiagnosisPageWithOptions(request: GetRequestDiagnosisPageRequest, runtime: Util.RuntimeOptions): GetRequestDiagnosisPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRequestDiagnosisPage',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRequestDiagnosisPage(request: GetRequestDiagnosisPageRequest): GetRequestDiagnosisPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRequestDiagnosisPageWithOptions(request, runtime);
}

model GetRequestDiagnosisResultRequest {
  instanceId?: string(name='InstanceId', example='rm-0iwhhl8gx0ld6****'),
  messageId?: string(name='MessageId', example='61820b594664275c4429****'),
  nodeId?: string(name='NodeId', example='202****'),
}

model GetRequestDiagnosisResultResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountId?: string(name='accountId', example='2093****'),
    dbSchema?: string(name='dbSchema', example='das'),
    engine?: string(name='engine', example='MySQL'),
    gmtCreate?: string(name='gmtCreate', example='1633071840000'),
    gmtModified?: string(name='gmtModified', example='1633071850000'),
    messageId?: string(name='messageId', example='61820b594664275c4429****'),
    param?: string(name='param', example='{"":""}'),
    result?: string(name='result'),
    sqlId?: string(name='sqlId', example='0c95dae3afef77be06572612df9b****'),
    state?: int32(name='state', example='2'),
    uuid?: string(name='uuid', example='hdm_51fe9bc19ec413f4d530431af87a****'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='800FBAF5-A539-5B97-A09E-C63AB2F7****'),
  success?: string(name='Success', example='true'),
}

model GetRequestDiagnosisResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRequestDiagnosisResultResponseBody(name='body'),
}

async function getRequestDiagnosisResultWithOptions(request: GetRequestDiagnosisResultRequest, runtime: Util.RuntimeOptions): GetRequestDiagnosisResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRequestDiagnosisResult',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRequestDiagnosisResult(request: GetRequestDiagnosisResultRequest): GetRequestDiagnosisResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRequestDiagnosisResultWithOptions(request, runtime);
}

model GetRunningSqlConcurrencyControlRulesRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
}

model GetRunningSqlConcurrencyControlRulesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: {
      runningRules?: [ 
      {
        concurrencyControlTime?: long(name='ConcurrencyControlTime', example='600'),
        instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
        itemId?: long(name='ItemId', example='16'),
        keywordsHash?: string(name='KeywordsHash', example='b0b8aceeb43baea87b219c81767b****'),
        maxConcurrency?: string(name='MaxConcurrency', example='2'),
        sqlKeywords?: string(name='SqlKeywords', example='call~open~api~test~4~from~POP'),
        sqlType?: string(name='SqlType', example='SELECT'),
        startTime?: long(name='StartTime', example='1608888296000'),
        status?: string(name='Status', example='Open'),
        userId?: string(name='UserId', example='testxxx'),
      }
    ](name='runningRules')
    }(name='List'),
    total?: long(name='Total', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetRunningSqlConcurrencyControlRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRunningSqlConcurrencyControlRulesResponseBody(name='body'),
}

async function getRunningSqlConcurrencyControlRulesWithOptions(request: GetRunningSqlConcurrencyControlRulesRequest, runtime: Util.RuntimeOptions): GetRunningSqlConcurrencyControlRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRunningSqlConcurrencyControlRules',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRunningSqlConcurrencyControlRules(request: GetRunningSqlConcurrencyControlRulesRequest): GetRunningSqlConcurrencyControlRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRunningSqlConcurrencyControlRulesWithOptions(request, runtime);
}

model GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze5hpn2b99d2****'),
  sqlText?: string(name='SqlText', example='SELECT * FROM test where name = \\"das\\"'),
}

model GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SELECT~FROM~test~where~name'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='30A643F5-D7A6-55F5-AB75-DF501427****'),
  success?: string(name='Success', example='true'),
}

model GetSqlConcurrencyControlKeywordsFromSqlTextResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody(name='body'),
}

async function getSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request: GetSqlConcurrencyControlKeywordsFromSqlTextRequest, runtime: Util.RuntimeOptions): GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sqlText)) {
    query['SqlText'] = request.sqlText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSqlConcurrencyControlKeywordsFromSqlText',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSqlConcurrencyControlKeywordsFromSqlText(request: GetSqlConcurrencyControlKeywordsFromSqlTextRequest): GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request, runtime);
}

model GetSqlConcurrencyControlRulesHistoryRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
  pageNo?: long(name='PageNo', example='1'),
  pageSize?: long(name='PageSize', example='10'),
}

model GetSqlConcurrencyControlRulesHistoryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: {
      rules?: [ 
      {
        concurrencyControlTime?: long(name='ConcurrencyControlTime', example='600'),
        instanceId?: string(name='InstanceId', example='rm-2ze1jdv45i7l6****'),
        itemId?: long(name='ItemId', example='16'),
        keywordsHash?: string(name='KeywordsHash', example='b0b8aceeb43baea87b219c81767b****'),
        maxConcurrency?: long(name='MaxConcurrency', example='2'),
        sqlKeywords?: string(name='SqlKeywords', example='call~open~api~test~4~from~POP'),
        sqlType?: string(name='SqlType', example='SELECT'),
        startTime?: long(name='StartTime', example='1608888296000'),
        status?: string(name='Status', example='Open'),
        userId?: string(name='UserId', example='testxxx'),
      }
    ](name='rules')
    }(name='List'),
    total?: long(name='Total', example='4'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetSqlConcurrencyControlRulesHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSqlConcurrencyControlRulesHistoryResponseBody(name='body'),
}

async function getSqlConcurrencyControlRulesHistoryWithOptions(request: GetSqlConcurrencyControlRulesHistoryRequest, runtime: Util.RuntimeOptions): GetSqlConcurrencyControlRulesHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSqlConcurrencyControlRulesHistory',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSqlConcurrencyControlRulesHistory(request: GetSqlConcurrencyControlRulesHistoryRequest): GetSqlConcurrencyControlRulesHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSqlConcurrencyControlRulesHistoryWithOptions(request, runtime);
}

model GetSqlOptimizeAdviceRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  endDt?: string(name='EndDt', example='20210917'),
  engine?: string(name='Engine', example='MySQL'),
  instanceIds?: string(name='InstanceIds', example='rm-2ze1jdv45i7l6****'),
  startDt?: string(name='StartDt', example='20210916'),
}

model GetSqlOptimizeAdviceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    createTime?: string(name='CreateTime', example='1632303861000'),
    downloadUrl?: string(name='DownloadUrl', example='https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******'),
    expireTime?: string(name='ExpireTime', example='1632563061000'),
    status?: string(name='Status', example='FINISH'),
    statusCode?: string(name='StatusCode', example='SUCCESS'),
    taskId?: string(name='TaskId', example='2021091710461519216****'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model GetSqlOptimizeAdviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSqlOptimizeAdviceResponseBody(name='body'),
}

async function getSqlOptimizeAdviceWithOptions(request: GetSqlOptimizeAdviceRequest, runtime: Util.RuntimeOptions): GetSqlOptimizeAdviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.endDt)) {
    query['EndDt'] = request.endDt;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.startDt)) {
    query['StartDt'] = request.startDt;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSqlOptimizeAdvice',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSqlOptimizeAdvice(request: GetSqlOptimizeAdviceRequest): GetSqlOptimizeAdviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSqlOptimizeAdviceWithOptions(request, runtime);
}

model KillInstanceAllSessionRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceId?: string(name='InstanceId', example='r-8vbcyr4sw0c4yc****'),
}

model KillInstanceAllSessionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model KillInstanceAllSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillInstanceAllSessionResponseBody(name='body'),
}

async function killInstanceAllSessionWithOptions(request: KillInstanceAllSessionRequest, runtime: Util.RuntimeOptions): KillInstanceAllSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'KillInstanceAllSession',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killInstanceAllSession(request: KillInstanceAllSessionRequest): KillInstanceAllSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return killInstanceAllSessionWithOptions(request, runtime);
}

model ModifyAutoScalingConfigRequest {
  bandwidth?: {
    apply?: boolean(name='Apply', example='true'),
    bandwidthUsageLowerThreshold?: int32(name='BandwidthUsageLowerThreshold', example='30'),
    bandwidthUsageUpperThreshold?: int32(name='BandwidthUsageUpperThreshold', example='70'),
    downgrade?: boolean(name='Downgrade', example='true'),
    observationWindowSize?: string(name='ObservationWindowSize', example='5m'),
    upgrade?: boolean(name='Upgrade', example='true'),
  }(name='Bandwidth'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  resource?: {
    apply?: boolean(name='Apply', example='true'),
    cpuUsageUpperThreshold?: int32(name='CpuUsageUpperThreshold', example='70'),
    downgradeObservationWindowSize?: string(name='DowngradeObservationWindowSize', example='5m'),
    enable?: boolean(name='Enable', example='true'),
    upgradeObservationWindowSize?: string(name='UpgradeObservationWindowSize', example='5m'),
  }(name='Resource'),
  shard?: {
    apply?: boolean(name='Apply', example='true'),
    downgrade?: boolean(name='Downgrade', example='true'),
    downgradeObservationWindowSize?: string(name='DowngradeObservationWindowSize', example='1h'),
    maxShards?: int32(name='MaxShards', example='16'),
    memUsageLowerThreshold?: int32(name='MemUsageLowerThreshold', example='30'),
    memUsageUpperThreshold?: int32(name='MemUsageUpperThreshold', example='70'),
    minShards?: int32(name='MinShards', example='4'),
    upgrade?: boolean(name='Upgrade', example='true'),
    upgradeObservationWindowSize?: string(name='UpgradeObservationWindowSize', example='5m'),
  }(name='Shard'),
  spec?: {
    apply?: boolean(name='Apply', example='true'),
    coolDownTime?: string(name='CoolDownTime', example='5m'),
    cpuUsageUpperThreshold?: int32(name='CpuUsageUpperThreshold', example='70'),
    downgrade?: boolean(name='Downgrade', example='true'),
    maxReadOnlyNodes?: int32(name='MaxReadOnlyNodes', example='10'),
    maxSpec?: string(name='MaxSpec', example='polar.mysql.x8.12xlarge'),
    memUsageUpperThreshold?: int32(name='MemUsageUpperThreshold', example='70'),
    observationWindowSize?: string(name='ObservationWindowSize', example='5m'),
    upgrade?: boolean(name='Upgrade', example='true'),
  }(name='Spec'),
  storage?: {
    apply?: boolean(name='Apply', example='true'),
    diskUsageUpperThreshold?: int32(name='DiskUsageUpperThreshold', example='70'),
    maxStorage?: int32(name='MaxStorage', example='32000'),
    upgrade?: boolean(name='Upgrade', example='true'),
  }(name='Storage'),
}

model ModifyAutoScalingConfigResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model ModifyAutoScalingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoScalingConfigResponseBody(name='body'),
}

async function modifyAutoScalingConfigWithOptions(request: ModifyAutoScalingConfigRequest, runtime: Util.RuntimeOptions): ModifyAutoScalingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.shard)) {
    query['Shard'] = request.shard;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.storage)) {
    query['Storage'] = request.storage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoScalingConfig',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoScalingConfig(request: ModifyAutoScalingConfigRequest): ModifyAutoScalingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoScalingConfigWithOptions(request, runtime);
}

model RunCloudBenchTaskRequest {
  taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
}

model RunCloudBenchTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    preCheckItem?: [ 
    {
      code?: int32(name='Code', example='200'),
      details?: string(name='Details', example='"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }'),
      message?: string(name='Message', example='Successful'),
      name?: string(name='Name', example='BenchTargetChecker'),
      order?: int32(name='Order', example='0'),
      status?: string(name='Status', example='SUCCESS'),
    }
  ](name='PreCheckItem')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model RunCloudBenchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCloudBenchTaskResponseBody(name='body'),
}

async function runCloudBenchTaskWithOptions(request: RunCloudBenchTaskRequest, runtime: Util.RuntimeOptions): RunCloudBenchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCloudBenchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCloudBenchTask(request: RunCloudBenchTaskRequest): RunCloudBenchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCloudBenchTaskWithOptions(request, runtime);
}

model SetEventSubscriptionRequest {
  active?: string(name='Active', example='1'),
  channelType?: string(name='ChannelType', example='hdm_alarm_sms,dingtalk'),
  contactGroupName?: string(name='ContactGroupName'),
  contactName?: string(name='ContactName'),
  eventContext?: string(name='EventContext', example='AllContext'),
  instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
  lang?: string(name='Lang', example='zh-CN'),
  level?: string(name='Level', example='Optimization'),
  minInterval?: string(name='MinInterval', example='60'),
}

model SetEventSubscriptionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    active?: int32(name='active', example='1'),
    channelType?: string(name='channelType', example='hdm_alarm_sms,dingtalk'),
    contactGroupName?: string(name='contactGroupName'),
    contactName?: string(name='contactName'),
    eventContext?: string(name='eventContext', example='AllContext'),
    instanceId?: string(name='instanceId', example='rm-2ze8g2am97624****'),
    lang?: string(name='lang', example='zh_CN'),
    level?: string(name='level', example='Optimization'),
    minInterval?: int32(name='minInterval', example='60'),
    userId?: string(name='userId', example='1088760496****'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='097F0C56-B252-515A-B602-FC56EF93EF8A'),
  success?: string(name='Success', example='True'),
}

model SetEventSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetEventSubscriptionResponseBody(name='body'),
}

async function setEventSubscriptionWithOptions(request: SetEventSubscriptionRequest, runtime: Util.RuntimeOptions): SetEventSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.active)) {
    query['Active'] = request.active;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contactGroupName)) {
    query['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.eventContext)) {
    query['EventContext'] = request.eventContext;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.minInterval)) {
    query['MinInterval'] = request.minInterval;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetEventSubscription',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setEventSubscription(request: SetEventSubscriptionRequest): SetEventSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEventSubscriptionWithOptions(request, runtime);
}

model StopCloudBenchTaskRequest {
  taskId?: string(name='TaskId', example='e5cec704-0518-430f-8263-76f4dcds****'),
}

model StopCloudBenchTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: string(name='Success', example='true'),
}

model StopCloudBenchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCloudBenchTaskResponseBody(name='body'),
}

async function stopCloudBenchTaskWithOptions(request: StopCloudBenchTaskRequest, runtime: Util.RuntimeOptions): StopCloudBenchTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopCloudBenchTask',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopCloudBenchTask(request: StopCloudBenchTaskRequest): StopCloudBenchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCloudBenchTaskWithOptions(request, runtime);
}

model SyncHDMAliyunResourceRequest {
  async?: string(name='Async'),
  resourceTypes?: string(name='ResourceTypes'),
  uid?: string(name='Uid'),
  userId?: string(name='UserId'),
  waitForModifySecurityIps?: string(name='WaitForModifySecurityIps'),
  context?: string(name='__context'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  skipAuth?: string(name='skipAuth'),
  timestamp?: string(name='timestamp'),
}

model SyncHDMAliyunResourceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchro?: string(name='Synchro'),
}

model SyncHDMAliyunResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncHDMAliyunResourceResponseBody(name='body'),
}

async function syncHDMAliyunResourceWithOptions(request: SyncHDMAliyunResourceRequest, runtime: Util.RuntimeOptions): SyncHDMAliyunResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.async)) {
    query['Async'] = request.async;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.waitForModifySecurityIps)) {
    query['WaitForModifySecurityIps'] = request.waitForModifySecurityIps;
  }
  if (!Util.isUnset(request.context)) {
    query['__context'] = request.context;
  }
  if (!Util.isUnset(request.accessKey)) {
    query['accessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.signature)) {
    query['signature'] = request.signature;
  }
  if (!Util.isUnset(request.skipAuth)) {
    query['skipAuth'] = request.skipAuth;
  }
  if (!Util.isUnset(request.timestamp)) {
    query['timestamp'] = request.timestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncHDMAliyunResource',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncHDMAliyunResource(request: SyncHDMAliyunResourceRequest): SyncHDMAliyunResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncHDMAliyunResourceWithOptions(request, runtime);
}

model UpdateAutoResourceOptimizeRulesAsyncRequest {
  consoleContext?: string(name='ConsoleContext', example='None'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]'),
  resultId?: string(name='ResultId', example='async__507044db6c4eadfa2dab9b084e80****'),
  tableFragmentationRatio?: double(name='TableFragmentationRatio', example='0.2'),
  tableSpaceSize?: double(name='TableSpaceSize', example='10'),
}

model UpdateAutoResourceOptimizeRulesAsyncResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    complete?: boolean(name='Complete', example='true'),
    configResponse?: {
      configFailInstanceCount?: long(name='ConfigFailInstanceCount', example='1'),
      configFailInstanceList?: [ 
        {
          configSuccess?: boolean(name='ConfigSuccess', example='false'),
          errorMessage?: string(name='ErrorMessage', example='Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores >= 4, innodb_file_per_table=ON'),
          instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
        }
      ](name='ConfigFailInstanceList'),
      configSuccessInstanceCount?: long(name='ConfigSuccessInstanceCount', example='1'),
      configSuccessInstanceList?: [ 
        {
          configSuccess?: boolean(name='ConfigSuccess', example='true'),
          instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        }
      ](name='ConfigSuccessInstanceList'),
      totalInstanceCount?: long(name='TotalInstanceCount', example='2'),
    }(name='ConfigResponse'),
    fail?: boolean(name='Fail', example='false'),
    isFinish?: boolean(name='IsFinish', example='true'),
    resultId?: string(name='ResultId', example='async__20ee808e72257f16a4fe024057ca****'),
    state?: string(name='State', example='SUCCESS'),
    timestamp?: long(name='Timestamp', example='1645668213000'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='9CB97BC4-6479-55D0-B9D0-EA925AFE****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutoResourceOptimizeRulesAsyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoResourceOptimizeRulesAsyncResponseBody(name='body'),
}

async function updateAutoResourceOptimizeRulesAsyncWithOptions(request: UpdateAutoResourceOptimizeRulesAsyncRequest, runtime: Util.RuntimeOptions): UpdateAutoResourceOptimizeRulesAsyncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.resultId)) {
    query['ResultId'] = request.resultId;
  }
  if (!Util.isUnset(request.tableFragmentationRatio)) {
    query['TableFragmentationRatio'] = request.tableFragmentationRatio;
  }
  if (!Util.isUnset(request.tableSpaceSize)) {
    query['TableSpaceSize'] = request.tableSpaceSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutoResourceOptimizeRulesAsync',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutoResourceOptimizeRulesAsync(request: UpdateAutoResourceOptimizeRulesAsyncRequest): UpdateAutoResourceOptimizeRulesAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoResourceOptimizeRulesAsyncWithOptions(request, runtime);
}

model UpdateAutoSqlOptimizeStatusRequest {
  instances?: string(name='Instances', example='rm-bp10usoc1erj7****,rm-bp10usoc1erj7****'),
  status?: int32(name='Status', example='1'),
}

model UpdateAutoSqlOptimizeStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    errorCode?: string(name='ErrorCode', example='-1001'),
    errorMsg?: string(name='ErrorMsg', example='invalid param'),
    success?: string(name='Success', example='false'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='A52AD37C-35ED-581A-AC23-2232BE54****'),
  success?: string(name='Success', example='true'),
}

model UpdateAutoSqlOptimizeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoSqlOptimizeStatusResponseBody(name='body'),
}

async function updateAutoSqlOptimizeStatusWithOptions(request: UpdateAutoSqlOptimizeStatusRequest, runtime: Util.RuntimeOptions): UpdateAutoSqlOptimizeStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instances)) {
    query['Instances'] = request.instances;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutoSqlOptimizeStatus',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutoSqlOptimizeStatus(request: UpdateAutoSqlOptimizeStatusRequest): UpdateAutoSqlOptimizeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoSqlOptimizeStatusWithOptions(request, runtime);
}

model UpdateAutoThrottleRulesAsyncRequest {
  abnormalDuration?: double(name='AbnormalDuration', example='2'),
  activeSessions?: long(name='ActiveSessions', example='16'),
  allowThrottleEndTime?: string(name='AllowThrottleEndTime', example='23:59Z'),
  allowThrottleStartTime?: string(name='AllowThrottleStartTime', example='00:00Z'),
  autoKillSession?: boolean(name='AutoKillSession', example='true'),
  consoleContext?: string(name='ConsoleContext', example='None'),
  cpuSessionRelation?: string(name='CpuSessionRelation', example='OR'),
  cpuUsage?: double(name='CpuUsage', example='70'),
  instanceIds?: string(name='InstanceIds', example='[\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]'),
  maxThrottleTime?: double(name='MaxThrottleTime', example='10'),
  resultId?: string(name='ResultId', example='async__507044db6c4eadfa2dab9b084e80****'),
}

model UpdateAutoThrottleRulesAsyncResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    complete?: boolean(name='Complete', example='true'),
    configResponse?: {
      configFailInstanceCount?: long(name='ConfigFailInstanceCount', example='1'),
      configFailInstanceList?: [ 
        {
          configSuccess?: boolean(name='ConfigSuccess', example='false'),
          errorMessage?: string(name='ErrorMessage', example='instance das autonomy service is off or can not find instance'),
          instanceId?: string(name='InstanceId', example='rm-2ze9xrhze0709****'),
        }
      ](name='ConfigFailInstanceList'),
      configSuccessInstanceCount?: long(name='ConfigSuccessInstanceCount', example='1'),
      configSuccessInstanceList?: [ 
        {
          configSuccess?: boolean(name='ConfigSuccess', example='true'),
          instanceId?: string(name='InstanceId', example='rm-2ze8g2am97624****'),
        }
      ](name='ConfigSuccessInstanceList'),
      totalInstanceCount?: long(name='TotalInstanceCount', example='2'),
    }(name='ConfigResponse'),
    fail?: boolean(name='Fail', example='false'),
    isFinish?: boolean(name='IsFinish', example='true'),
    resultId?: string(name='ResultId', example='async__665ee69612f1627c7fd9f3c85075****'),
    state?: string(name='State', example='SUCCESS'),
    timestamp?: long(name='Timestamp', example='1645668213000'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='B6D17591-B48B-4D31-9CD6-9B9796B2****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutoThrottleRulesAsyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAutoThrottleRulesAsyncResponseBody(name='body'),
}

async function updateAutoThrottleRulesAsyncWithOptions(request: UpdateAutoThrottleRulesAsyncRequest, runtime: Util.RuntimeOptions): UpdateAutoThrottleRulesAsyncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.abnormalDuration)) {
    query['AbnormalDuration'] = request.abnormalDuration;
  }
  if (!Util.isUnset(request.activeSessions)) {
    query['ActiveSessions'] = request.activeSessions;
  }
  if (!Util.isUnset(request.allowThrottleEndTime)) {
    query['AllowThrottleEndTime'] = request.allowThrottleEndTime;
  }
  if (!Util.isUnset(request.allowThrottleStartTime)) {
    query['AllowThrottleStartTime'] = request.allowThrottleStartTime;
  }
  if (!Util.isUnset(request.autoKillSession)) {
    query['AutoKillSession'] = request.autoKillSession;
  }
  if (!Util.isUnset(request.consoleContext)) {
    query['ConsoleContext'] = request.consoleContext;
  }
  if (!Util.isUnset(request.cpuSessionRelation)) {
    query['CpuSessionRelation'] = request.cpuSessionRelation;
  }
  if (!Util.isUnset(request.cpuUsage)) {
    query['CpuUsage'] = request.cpuUsage;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.maxThrottleTime)) {
    query['MaxThrottleTime'] = request.maxThrottleTime;
  }
  if (!Util.isUnset(request.resultId)) {
    query['ResultId'] = request.resultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAutoThrottleRulesAsync',
    version = '2020-01-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAutoThrottleRulesAsync(request: UpdateAutoThrottleRulesAsyncRequest): UpdateAutoThrottleRulesAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoThrottleRulesAsyncWithOptions(request, runtime);
}

