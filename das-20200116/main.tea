/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    cn-shanghai = 'das.cn-shanghai.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('das', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AccessHDMInstanceRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  instanceArea?: string(name='InstanceArea'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  port?: string(name='Port'),
  engine?: string(name='Engine'),
  username?: string(name='Username'),
  password?: string(name='Password'),
  instanceAlias?: string(name='InstanceAlias'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  region?: string(name='Region'),
  callerBid?: string(name='CallerBid'),
  ownerId?: string(name='OwnerId'),
  tenantId?: string(name='TenantId'),
  ownerIdSignature?: string(name='OwnerIdSignature'),
  callerType?: string(name='CallerType'),
  callerUid?: string(name='CallerUid'),
  target?: string(name='Target'),
  product?: string(name='Product'),
  external?: string(name='External'),
}

model AccessHDMInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model AccessHDMInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AccessHDMInstanceResponseBody(name='body'),
}

async function accessHDMInstanceWithOptions(request: AccessHDMInstanceRequest, runtime: Util.RuntimeOptions): AccessHDMInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AccessHDMInstance', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function accessHDMInstance(request: AccessHDMInstanceRequest): AccessHDMInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return accessHDMInstanceWithOptions(request, runtime);
}

model AddHDMInstanceRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  instanceArea?: string(name='InstanceArea'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  port?: string(name='Port'),
  engine?: string(name='Engine'),
  username?: string(name='Username'),
  password?: string(name='Password'),
  instanceAlias?: string(name='InstanceAlias'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  region?: string(name='Region'),
  flushAccount?: string(name='FlushAccount'),
}

model AddHDMInstanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  synchro?: string(name='Synchro'),
  data?: {
    vpcId?: string(name='VpcId'),
    token?: string(name='Token'),
    ip?: string(name='Ip'),
    callerUid?: string(name='CallerUid'),
    instanceId?: string(name='InstanceId'),
    port?: int32(name='Port'),
    ownerId?: string(name='OwnerId'),
    uuid?: string(name='Uuid'),
    error?: string(name='Error'),
    code?: int32(name='Code'),
    role?: string(name='Role'),
    tenantId?: string(name='TenantId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model AddHDMInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AddHDMInstanceResponseBody(name='body'),
}

async function addHDMInstanceWithOptions(request: AddHDMInstanceRequest, runtime: Util.RuntimeOptions): AddHDMInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddHDMInstance', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addHDMInstance(request: AddHDMInstanceRequest): AddHDMInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addHDMInstanceWithOptions(request, runtime);
}

model CreateCacheAnalysisJobRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  backupSetId?: string(name='BackupSetId'),
}

model CreateCacheAnalysisJobResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    taskState?: string(name='TaskState'),
    jobId?: string(name='JobId'),
    message?: string(name='Message'),
    bigKeys?: {
      keyInfo?: [ 
      {
        type?: string(name='Type'),
        db?: int32(name='Db'),
        expirationTimeMillis?: long(name='ExpirationTimeMillis'),
        key?: string(name='Key'),
        encoding?: string(name='Encoding'),
        bytes?: long(name='Bytes'),
        nodeId?: string(name='NodeId'),
        count?: long(name='Count'),
      }
    ](name='KeyInfo')
    }(name='BigKeys'),
    instanceId?: string(name='InstanceId'),
    nodeId?: string(name='NodeId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model CreateCacheAnalysisJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCacheAnalysisJobResponseBody(name='body'),
}

async function createCacheAnalysisJobWithOptions(request: CreateCacheAnalysisJobRequest, runtime: Util.RuntimeOptions): CreateCacheAnalysisJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCacheAnalysisJob', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCacheAnalysisJob(request: CreateCacheAnalysisJobRequest): CreateCacheAnalysisJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCacheAnalysisJobWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateDiagnosticReportResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDiagnosticReport', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model DescribeCacheAnalysisJobRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model DescribeCacheAnalysisJobResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    taskState?: string(name='TaskState'),
    jobId?: string(name='JobId'),
    keyPrefixes?: {
      prefix?: [ 
      {
        keyNum?: long(name='KeyNum'),
        type?: string(name='Type'),
        bytes?: long(name='Bytes'),
        prefix?: string(name='Prefix'),
        count?: long(name='Count'),
      }
    ](name='Prefix')
    }(name='KeyPrefixes'),
    message?: string(name='Message'),
    bigKeys?: {
      keyInfo?: [ 
      {
        type?: string(name='Type'),
        db?: int32(name='Db'),
        expirationTimeMillis?: long(name='ExpirationTimeMillis'),
        key?: string(name='Key'),
        encoding?: string(name='Encoding'),
        bytes?: long(name='Bytes'),
        nodeId?: string(name='NodeId'),
        count?: long(name='Count'),
      }
    ](name='KeyInfo')
    }(name='BigKeys'),
    instanceId?: string(name='InstanceId'),
    nodeId?: string(name='NodeId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model DescribeCacheAnalysisJobResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisJobResponseBody(name='body'),
}

async function describeCacheAnalysisJobWithOptions(request: DescribeCacheAnalysisJobRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCacheAnalysisJob', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCacheAnalysisJob(request: DescribeCacheAnalysisJobRequest): DescribeCacheAnalysisJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisJobWithOptions(request, runtime);
}

model DescribeCacheAnalysisJobsRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
}

model DescribeCacheAnalysisJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    list?: {
      cacheAnalysisJob?: [ 
      {
        taskState?: string(name='TaskState'),
        jobId?: string(name='JobId'),
        message?: string(name='Message'),
        bigKeys?: {
          keyInfo?: [ 
          {
            type?: string(name='Type'),
            db?: int32(name='Db'),
            expirationTimeMillis?: long(name='ExpirationTimeMillis'),
            key?: string(name='Key'),
            encoding?: string(name='Encoding'),
            bytes?: long(name='Bytes'),
            nodeId?: string(name='NodeId'),
            count?: long(name='Count'),
          }
        ](name='KeyInfo')
        }(name='BigKeys'),
        instanceId?: string(name='InstanceId'),
        nodeId?: string(name='NodeId'),
      }
    ](name='CacheAnalysisJob')
    }(name='List'),
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    extra?: string(name='Extra'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model DescribeCacheAnalysisJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisJobsResponseBody(name='body'),
}

async function describeCacheAnalysisJobsWithOptions(request: DescribeCacheAnalysisJobsRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCacheAnalysisJobs', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCacheAnalysisJobs(request: DescribeCacheAnalysisJobsRequest): DescribeCacheAnalysisJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisJobsWithOptions(request, runtime);
}

model DescribeDiagnosticReportListRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDiagnosticReportListResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model DescribeDiagnosticReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportListResponseBody(name='body'),
}

async function describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiagnosticReportList', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportListWithOptions(request, runtime);
}

model DescribeHotKeysRequest {
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
}

model DescribeHotKeysResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    hotKey?: [ 
    {
      key?: string(name='Key'),
      db?: int32(name='Db'),
      hot?: string(name='Hot'),
      keyType?: string(name='KeyType'),
      size?: long(name='Size'),
    }
  ](name='HotKey')
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model DescribeHotKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHotKeysResponseBody(name='body'),
}

async function describeHotKeysWithOptions(request: DescribeHotKeysRequest, runtime: Util.RuntimeOptions): DescribeHotKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHotKeys', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHotKeys(request: DescribeHotKeysRequest): DescribeHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotKeysWithOptions(request, runtime);
}

model GetAutonomousNotifyEventContentRequest {
  context?: string(name='__context'),
  instanceId?: string(name='InstanceId'),
  spanId?: string(name='SpanId'),
}

model GetAutonomousNotifyEventContentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetAutonomousNotifyEventContentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutonomousNotifyEventContentResponseBody(name='body'),
}

async function getAutonomousNotifyEventContentWithOptions(request: GetAutonomousNotifyEventContentRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAutonomousNotifyEventContent', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAutonomousNotifyEventContent(request: GetAutonomousNotifyEventContentRequest): GetAutonomousNotifyEventContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventContentWithOptions(request, runtime);
}

model GetAutonomousNotifyEventDetailRequest {
  context?: string(name='__context'),
  instanceId?: string(name='InstanceId'),
  spanId?: string(name='SpanId'),
}

model GetAutonomousNotifyEventDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetAutonomousNotifyEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutonomousNotifyEventDetailResponseBody(name='body'),
}

async function getAutonomousNotifyEventDetailWithOptions(request: GetAutonomousNotifyEventDetailRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAutonomousNotifyEventDetail', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAutonomousNotifyEventDetail(request: GetAutonomousNotifyEventDetailRequest): GetAutonomousNotifyEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventDetailWithOptions(request, runtime);
}

model GetAutonomousNotifyEventsRequest {
  context?: string(name='__context'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  nodeId?: string(name='NodeId'),
  eventContext?: string(name='EventContext'),
  level?: string(name='Level'),
  minLevel?: string(name='MinLevel'),
  pageOffset?: string(name='PageOffset'),
  pageSize?: string(name='PageSize'),
}

model GetAutonomousNotifyEventsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetAutonomousNotifyEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutonomousNotifyEventsResponseBody(name='body'),
}

async function getAutonomousNotifyEventsWithOptions(request: GetAutonomousNotifyEventsRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAutonomousNotifyEvents', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAutonomousNotifyEvents(request: GetAutonomousNotifyEventsRequest): GetAutonomousNotifyEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventsWithOptions(request, runtime);
}

model GetAutonomousNotifyEventsInRangeRequest {
  context?: string(name='__context'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  nodeId?: string(name='NodeId'),
  eventContext?: string(name='EventContext'),
  level?: string(name='Level'),
  minLevel?: string(name='MinLevel'),
  pageOffset?: string(name='PageOffset'),
  pageSize?: string(name='PageSize'),
}

model GetAutonomousNotifyEventsInRangeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    list?: {
      t?: [ string ](name='T')
    }(name='List'),
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    extra?: string(name='Extra'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetAutonomousNotifyEventsInRangeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutonomousNotifyEventsInRangeResponseBody(name='body'),
}

async function getAutonomousNotifyEventsInRangeWithOptions(request: GetAutonomousNotifyEventsInRangeRequest, runtime: Util.RuntimeOptions): GetAutonomousNotifyEventsInRangeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAutonomousNotifyEventsInRange', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAutonomousNotifyEventsInRange(request: GetAutonomousNotifyEventsInRangeRequest): GetAutonomousNotifyEventsInRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutonomousNotifyEventsInRangeWithOptions(request, runtime);
}

model GetAutoResourceOptimizeConfigRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='AccessKey'),
  signature?: string(name='Signature'),
  userId?: string(name='UserId'),
  instanceId?: string(name='InstanceId'),
  context?: string(name='__context'),
}

model GetAutoResourceOptimizeConfigResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetAutoResourceOptimizeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutoResourceOptimizeConfigResponseBody(name='body'),
}

async function getAutoResourceOptimizeConfigWithOptions(request: GetAutoResourceOptimizeConfigRequest, runtime: Util.RuntimeOptions): GetAutoResourceOptimizeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAutoResourceOptimizeConfig', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAutoResourceOptimizeConfig(request: GetAutoResourceOptimizeConfigRequest): GetAutoResourceOptimizeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAutoResourceOptimizeConfigWithOptions(request, runtime);
}

model GetEndpointSwitchTaskRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  taskId?: string(name='TaskId'),
}

model GetEndpointSwitchTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  synchro?: string(name='Synchro'),
  data?: {
    status?: string(name='Status'),
    uuid?: string(name='Uuid'),
    oriUuid?: string(name='OriUuid'),
    accountId?: string(name='AccountId'),
    errMsg?: string(name='ErrMsg'),
    taskId?: string(name='TaskId'),
    dbLinkId?: long(name='DbLinkId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetEndpointSwitchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetEndpointSwitchTaskResponseBody(name='body'),
}

async function getEndpointSwitchTaskWithOptions(request: GetEndpointSwitchTaskRequest, runtime: Util.RuntimeOptions): GetEndpointSwitchTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEndpointSwitchTask', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEndpointSwitchTask(request: GetEndpointSwitchTaskRequest): GetEndpointSwitchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndpointSwitchTaskWithOptions(request, runtime);
}

model GetEventOverviewRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  minLevel?: string(name='MinLevel'),
}

model GetEventOverviewResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetEventOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventOverviewResponseBody(name='body'),
}

async function getEventOverviewWithOptions(request: GetEventOverviewRequest, runtime: Util.RuntimeOptions): GetEventOverviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEventOverview', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEventOverview(request: GetEventOverviewRequest): GetEventOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventOverviewWithOptions(request, runtime);
}

model GetHDMAliyunResourceSyncResultRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  taskId?: string(name='TaskId'),
}

model GetHDMAliyunResourceSyncResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  synchro?: string(name='Synchro'),
  data?: {
    syncStatus?: string(name='SyncStatus'),
    errorMsg?: string(name='ErrorMsg'),
    subResults?: {
      resourceSyncSubResult?: [ 
      {
        syncCount?: int32(name='SyncCount'),
        resourceType?: string(name='ResourceType'),
        success?: boolean(name='Success'),
        errMsg?: string(name='ErrMsg'),
      }
    ](name='ResourceSyncSubResult')
    }(name='SubResults'),
    results?: string(name='Results'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetHDMAliyunResourceSyncResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetHDMAliyunResourceSyncResultResponseBody(name='body'),
}

async function getHDMAliyunResourceSyncResultWithOptions(request: GetHDMAliyunResourceSyncResultRequest, runtime: Util.RuntimeOptions): GetHDMAliyunResourceSyncResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHDMAliyunResourceSyncResult', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHDMAliyunResourceSyncResult(request: GetHDMAliyunResourceSyncResultRequest): GetHDMAliyunResourceSyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHDMAliyunResourceSyncResultWithOptions(request, runtime);
}

model GetHDMLastAliyunResourceSyncResultRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
}

model GetHDMLastAliyunResourceSyncResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  synchro?: string(name='Synchro'),
  data?: {
    syncStatus?: string(name='SyncStatus'),
    errorMsg?: string(name='ErrorMsg'),
    subResults?: {
      resourceSyncSubResult?: [ 
      {
        syncCount?: int32(name='SyncCount'),
        resourceType?: string(name='ResourceType'),
        success?: boolean(name='Success'),
        errMsg?: string(name='ErrMsg'),
      }
    ](name='ResourceSyncSubResult')
    }(name='SubResults'),
    results?: string(name='Results'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetHDMLastAliyunResourceSyncResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetHDMLastAliyunResourceSyncResultResponseBody(name='body'),
}

async function getHDMLastAliyunResourceSyncResultWithOptions(request: GetHDMLastAliyunResourceSyncResultRequest, runtime: Util.RuntimeOptions): GetHDMLastAliyunResourceSyncResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHDMLastAliyunResourceSyncResult', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHDMLastAliyunResourceSyncResult(request: GetHDMLastAliyunResourceSyncResultRequest): GetHDMLastAliyunResourceSyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHDMLastAliyunResourceSyncResultWithOptions(request, runtime);
}

model GetInstanceInspectionsRequest {
  engine?: string(name='Engine'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  instanceArea?: string(name='InstanceArea'),
  searchMap?: string(name='SearchMap'),
}

model GetInstanceInspectionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    list?: {
      baseInspection?: [ 
      {
        endTime?: long(name='EndTime'),
        startTime?: long(name='StartTime'),
        data?: string(name='Data'),
        instance?: {
          vpcId?: string(name='VpcId'),
          uuid?: string(name='Uuid'),
          instanceArea?: string(name='InstanceArea'),
          instanceClass?: string(name='InstanceClass'),
          region?: string(name='Region'),
          accountId?: string(name='AccountId'),
          networkType?: string(name='NetworkType'),
          engine?: string(name='Engine'),
          instanceId?: string(name='InstanceId'),
          nodeId?: string(name='NodeId'),
          engineVersion?: string(name='EngineVersion'),
        }(name='Instance'),
        scoreMap?: string(name='ScoreMap'),
        gmtCreate?: long(name='GmtCreate'),
        score?: int32(name='Score'),
      }
    ](name='BaseInspection')
    }(name='List'),
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetInstanceInspectionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceInspectionsResponseBody(name='body'),
}

async function getInstanceInspectionsWithOptions(request: GetInstanceInspectionsRequest, runtime: Util.RuntimeOptions): GetInstanceInspectionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceInspections', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceInspections(request: GetInstanceInspectionsRequest): GetInstanceInspectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceInspectionsWithOptions(request, runtime);
}

model GetResourceOptimizeHistoryListRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='AccessKey'),
  signature?: string(name='Signature'),
  userId?: string(name='UserId'),
  instanceId?: string(name='InstanceId'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  context?: string(name='__context'),
}

model GetResourceOptimizeHistoryListResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetResourceOptimizeHistoryListResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceOptimizeHistoryListResponseBody(name='body'),
}

async function getResourceOptimizeHistoryListWithOptions(request: GetResourceOptimizeHistoryListRequest, runtime: Util.RuntimeOptions): GetResourceOptimizeHistoryListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetResourceOptimizeHistoryList', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourceOptimizeHistoryList(request: GetResourceOptimizeHistoryListRequest): GetResourceOptimizeHistoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceOptimizeHistoryListWithOptions(request, runtime);
}

model StopOrRollbackOptimizeTaskRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='AccessKey'),
  signature?: string(name='Signature'),
  userId?: string(name='UserId'),
  instanceId?: string(name='InstanceId'),
  taskType?: string(name='TaskType'),
  taskUuid?: string(name='TaskUuid'),
  stopOrRollback?: string(name='StopOrRollback'),
  context?: string(name='__context'),
}

model StopOrRollbackOptimizeTaskResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model StopOrRollbackOptimizeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopOrRollbackOptimizeTaskResponseBody(name='body'),
}

async function stopOrRollbackOptimizeTaskWithOptions(request: StopOrRollbackOptimizeTaskRequest, runtime: Util.RuntimeOptions): StopOrRollbackOptimizeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopOrRollbackOptimizeTask', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopOrRollbackOptimizeTask(request: StopOrRollbackOptimizeTaskRequest): StopOrRollbackOptimizeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopOrRollbackOptimizeTaskWithOptions(request, runtime);
}

model SyncHDMAliyunResourceRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='accessKey'),
  signature?: string(name='signature'),
  timestamp?: string(name='timestamp'),
  context?: string(name='__context'),
  skipAuth?: string(name='skipAuth'),
  userId?: string(name='UserId'),
  async?: string(name='Async'),
  waitForModifySecurityIps?: string(name='WaitForModifySecurityIps'),
  resourceTypes?: string(name='ResourceTypes'),
}

model SyncHDMAliyunResourceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model SyncHDMAliyunResourceResponse = {
  headers: map[string]string(name='headers'),
  body: SyncHDMAliyunResourceResponseBody(name='body'),
}

async function syncHDMAliyunResourceWithOptions(request: SyncHDMAliyunResourceRequest, runtime: Util.RuntimeOptions): SyncHDMAliyunResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncHDMAliyunResource', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncHDMAliyunResource(request: SyncHDMAliyunResourceRequest): SyncHDMAliyunResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncHDMAliyunResourceWithOptions(request, runtime);
}

model TurnOffAutoResourceOptimizeRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='AccessKey'),
  signature?: string(name='Signature'),
  userId?: string(name='UserId'),
  instanceId?: string(name='InstanceId'),
  context?: string(name='__context'),
}

model TurnOffAutoResourceOptimizeResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model TurnOffAutoResourceOptimizeResponse = {
  headers: map[string]string(name='headers'),
  body: TurnOffAutoResourceOptimizeResponseBody(name='body'),
}

async function turnOffAutoResourceOptimizeWithOptions(request: TurnOffAutoResourceOptimizeRequest, runtime: Util.RuntimeOptions): TurnOffAutoResourceOptimizeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TurnOffAutoResourceOptimize', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function turnOffAutoResourceOptimize(request: TurnOffAutoResourceOptimizeRequest): TurnOffAutoResourceOptimizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return turnOffAutoResourceOptimizeWithOptions(request, runtime);
}

model UpdateAutoResourceOptimizeConfigRequest {
  uid?: string(name='Uid'),
  accessKey?: string(name='AccessKey'),
  signature?: string(name='Signature'),
  userId?: string(name='UserId'),
  instanceId?: string(name='InstanceId'),
  autoDefragment?: int32(name='AutoDefragment'),
  tableSpaceSize?: float(name='TableSpaceSize'),
  tableFragmentationRatio?: float(name='TableFragmentationRatio'),
  autoDuplicateIndexDelete?: int32(name='AutoDuplicateIndexDelete'),
  context?: string(name='__context'),
}

model UpdateAutoResourceOptimizeConfigResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  synchro?: string(name='Synchro'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model UpdateAutoResourceOptimizeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAutoResourceOptimizeConfigResponseBody(name='body'),
}

async function updateAutoResourceOptimizeConfigWithOptions(request: UpdateAutoResourceOptimizeConfigRequest, runtime: Util.RuntimeOptions): UpdateAutoResourceOptimizeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAutoResourceOptimizeConfig', '2020-01-16', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAutoResourceOptimizeConfig(request: UpdateAutoResourceOptimizeConfigRequest): UpdateAutoResourceOptimizeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAutoResourceOptimizeConfigWithOptions(request, runtime);
}

