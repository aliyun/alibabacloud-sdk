/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-hangzhou = 'cloudwf.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('cloudwifi-pop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListJobOrdersWithSizeRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  handler?: string(name='Handler'),
  clientSystem?: string(name='ClientSystem'),
  pageSize?: int32(name='PageSize'),
  title?: string(name='Title'),
  orderStatus?: string(name='OrderStatus'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  id?: string(name='Id'),
  endTime?: string(name='EndTime'),
  changingType?: string(name='ChangingType'),
  status?: string(name='Status'),
}

model ListJobOrdersWithSizeResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: {
    count?: long(name='Count'),
    data?: [  map[string]any ](name='Data'),
  }(name='Data'),
}

model ListJobOrdersWithSizeResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobOrdersWithSizeResponseBody(name='body'),
}

async function listJobOrdersWithSizeWithOptions(request: ListJobOrdersWithSizeRequest, runtime: Util.RuntimeOptions): ListJobOrdersWithSizeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobOrdersWithSize', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobOrdersWithSize(request: ListJobOrdersWithSizeRequest): ListJobOrdersWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithSizeWithOptions(request, runtime);
}

model GetApgroupConfigByIdentityRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  apgroupId?: long(name='ApgroupId', description='apgroupId'),
  apgroupUuid?: string(name='ApgroupUuid', description='apgroupUuid'),
}

model GetApgroupConfigByIdentityResponseBody = {
  data?: map[string]any(name='Data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetApgroupConfigByIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: GetApgroupConfigByIdentityResponseBody(name='body'),
}

async function getApgroupConfigByIdentityWithOptions(request: GetApgroupConfigByIdentityRequest, runtime: Util.RuntimeOptions): GetApgroupConfigByIdentityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApgroupConfigByIdentity', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApgroupConfigByIdentity(request: GetApgroupConfigByIdentityRequest): GetApgroupConfigByIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupConfigByIdentityWithOptions(request, runtime);
}

model GetNetDeviceInfoWithSizeRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  role?: string(name='Role'),
  serviceTag?: string(name='ServiceTag'),
  idc?: string(name='Idc'),
  pageSize?: int32(name='PageSize'),
  mgnIp?: string(name='MgnIp'),
  manufacturer?: string(name='Manufacturer'),
  logicNetPod?: string(name='LogicNetPod'),
  password?: string(name='Password'),
  netPod?: string(name='NetPod'),
  requestId?: string(name='RequestId'),
  model?: string(name='Model'),
  id?: long(name='Id'),
  hostName?: string(name='HostName'),
  username?: string(name='Username'),
}

model GetNetDeviceInfoWithSizeResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: {
    count?: long(name='Count'),
    data?: [  map[string]any ](name='Data'),
  }(name='Data'),
}

model GetNetDeviceInfoWithSizeResponse = {
  headers: map[string]string(name='headers'),
  body: GetNetDeviceInfoWithSizeResponseBody(name='body'),
}

async function getNetDeviceInfoWithSizeWithOptions(request: GetNetDeviceInfoWithSizeRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoWithSizeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNetDeviceInfoWithSize', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNetDeviceInfoWithSize(request: GetNetDeviceInfoWithSizeRequest): GetNetDeviceInfoWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithSizeWithOptions(request, runtime);
}

model PutAppConfigAndSaveRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  configureType?: string(name='ConfigureType'),
  data?: string(name='Data'),
  apMac?: string(name='ApMac'),
  currentTime?: long(name='CurrentTime'),
}

model PutAppConfigAndSaveResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model PutAppConfigAndSaveResponse = {
  headers: map[string]string(name='headers'),
  body: PutAppConfigAndSaveResponseBody(name='body'),
}

async function putAppConfigAndSaveWithOptions(request: PutAppConfigAndSaveRequest, runtime: Util.RuntimeOptions): PutAppConfigAndSaveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutAppConfigAndSave', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putAppConfigAndSave(request: PutAppConfigAndSaveRequest): PutAppConfigAndSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAppConfigAndSaveWithOptions(request, runtime);
}

model UpdateNetDeviceInfoRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  devices?: [ 
    {
      logicNetPod?: string(name='LogicNetPod'),
      serviceTag?: string(name='ServiceTag'),
      netPod?: string(name='NetPod'),
      hostName?: string(name='HostName'),
      manufacturer?: string(name='Manufacturer'),
      mgnIp?: string(name='MgnIp'),
      model?: string(name='Model'),
      password?: string(name='Password'),
      idc?: string(name='Idc'),
      role?: string(name='Role'),
      id?: long(name='Id'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
}

model UpdateNetDeviceInfoResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: [ long ](name='Data'),
}

model UpdateNetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNetDeviceInfoResponseBody(name='body'),
}

async function updateNetDeviceInfoWithOptions(request: UpdateNetDeviceInfoRequest, runtime: Util.RuntimeOptions): UpdateNetDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateNetDeviceInfo', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateNetDeviceInfo(request: UpdateNetDeviceInfoRequest): UpdateNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNetDeviceInfoWithOptions(request, runtime);
}

model GetGroupMiscAggTimeSerRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  start?: long(name='Start'),
  end?: long(name='End'),
  apgroupUuid?: string(name='ApgroupUuid'),
}

model GetGroupMiscAggTimeSerResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetGroupMiscAggTimeSerResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupMiscAggTimeSerResponseBody(name='body'),
}

async function getGroupMiscAggTimeSerWithOptions(request: GetGroupMiscAggTimeSerRequest, runtime: Util.RuntimeOptions): GetGroupMiscAggTimeSerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetGroupMiscAggTimeSer', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getGroupMiscAggTimeSer(request: GetGroupMiscAggTimeSerRequest): GetGroupMiscAggTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupMiscAggTimeSerWithOptions(request, runtime);
}

model GetApDetailedConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model GetApDetailedConfigResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApDetailedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetApDetailedConfigResponseBody(name='body'),
}

async function getApDetailedConfigWithOptions(request: GetApDetailedConfigRequest, runtime: Util.RuntimeOptions): GetApDetailedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApDetailedConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApDetailedConfig(request: GetApDetailedConfigRequest): GetApDetailedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailedConfigWithOptions(request, runtime);
}

model SaveApRadioConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  htmode?: string(name='Htmode'),
  frag?: int32(name='Frag'),
  minrate?: int32(name='Minrate'),
  probereq?: string(name='Probereq'),
  channel?: string(name='Channel'),
  shortgi?: string(name='Shortgi'),
  hwmode?: string(name='Hwmode'),
  mgmtRate?: int32(name='MgmtRate'),
  bcastRate?: int32(name='BcastRate'),
  uapsd?: int32(name='Uapsd'),
  beaconInt?: int32(name='BeaconInt'),
  rts?: int32(name='Rts'),
  requireMode?: string(name='RequireMode'),
  mcastRate?: int32(name='McastRate'),
  txpower?: string(name='Txpower'),
  noscan?: string(name='Noscan'),
  disabled?: string(name='Disabled'),
  id?: long(name='Id'),
}

model SaveApRadioConfigResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model SaveApRadioConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApRadioConfigResponseBody(name='body'),
}

async function saveApRadioConfigWithOptions(request: SaveApRadioConfigRequest, runtime: Util.RuntimeOptions): SaveApRadioConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveApRadioConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveApRadioConfig(request: SaveApRadioConfigRequest): SaveApRadioConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApRadioConfigWithOptions(request, runtime);
}

model SaveApgroupPortalConfigRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  authKey?: string(name='AuthKey', description='authKey'),
  totalDownload?: int32(name='TotalDownload', description='totalDownload'),
  apgroupId?: long(name='ApgroupId', description='apgroupId'),
  portalTypes?: [ string ](name='PortalTypes', description='portalTypes'),
  clientUpload?: int32(name='ClientUpload', description='clientUpload'),
  countdown?: int32(name='Countdown', description='countdown'),
  whitelist?: string(name='Whitelist', description='whitelist'),
  network?: int32(name='Network', description='network'),
  timeStamp?: long(name='TimeStamp', description='timeStamp'),
  appAuthUrl?: string(name='AppAuthUrl', description='appAuthUrl'),
  totalUpload?: int32(name='TotalUpload', description='totalUpload'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  webAuthUrl?: string(name='WebAuthUrl', description='webAuthUrl'),
  portalUrl?: string(name='PortalUrl', description='portalUrl'),
  clientDownload?: int32(name='ClientDownload', description='clientDownload'),
  checkUrl?: string(name='CheckUrl', description='checkUrl'),
}

model SaveApgroupPortalConfigShrinkRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  authKey?: string(name='AuthKey', description='authKey'),
  totalDownload?: int32(name='TotalDownload', description='totalDownload'),
  apgroupId?: long(name='ApgroupId', description='apgroupId'),
  portalTypesShrink?: string(name='PortalTypes', description='portalTypes'),
  clientUpload?: int32(name='ClientUpload', description='clientUpload'),
  countdown?: int32(name='Countdown', description='countdown'),
  whitelist?: string(name='Whitelist', description='whitelist'),
  network?: int32(name='Network', description='network'),
  timeStamp?: long(name='TimeStamp', description='timeStamp'),
  appAuthUrl?: string(name='AppAuthUrl', description='appAuthUrl'),
  totalUpload?: int32(name='TotalUpload', description='totalUpload'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  webAuthUrl?: string(name='WebAuthUrl', description='webAuthUrl'),
  portalUrl?: string(name='PortalUrl', description='portalUrl'),
  clientDownload?: int32(name='ClientDownload', description='clientDownload'),
  checkUrl?: string(name='CheckUrl', description='checkUrl'),
}

model SaveApgroupPortalConfigResponseBody = {
  data?: [ long ](name='Data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model SaveApgroupPortalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApgroupPortalConfigResponseBody(name='body'),
}

async function saveApgroupPortalConfigWithOptions(tmpReq: SaveApgroupPortalConfigRequest, runtime: Util.RuntimeOptions): SaveApgroupPortalConfigResponse {
  Util.validateModel(tmpReq);
  var request = new SaveApgroupPortalConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.portalTypes)) {
    request.portalTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.portalTypes, 'PortalTypes', 'simple');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveApgroupPortalConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveApgroupPortalConfig(request: SaveApgroupPortalConfigRequest): SaveApgroupPortalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApgroupPortalConfigWithOptions(request, runtime);
}

model SaveApPortalConfigRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  authKey?: string(name='AuthKey', description='authKey'),
  totalDownload?: int32(name='TotalDownload', description='totalDownload'),
  portalTypes?: [ string ](name='PortalTypes', description='portalTypes'),
  apConfigId?: long(name='ApConfigId', description='apConfigId'),
  clientUpload?: int32(name='ClientUpload', description='clientUpload'),
  countdown?: int32(name='Countdown', description='countdown'),
  whitelist?: string(name='Whitelist', description='whitelist'),
  network?: int32(name='Network', description='network'),
  timeStamp?: long(name='TimeStamp', description='timeStamp'),
  appAuthUrl?: string(name='AppAuthUrl', description='appAuthUrl'),
  totalUpload?: int32(name='TotalUpload', description='totalUpload'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  webAuthUrl?: string(name='WebAuthUrl', description='webAuthUrl'),
  portalUrl?: string(name='PortalUrl', description='portalUrl'),
  clientDownload?: int32(name='ClientDownload', description='clientDownload'),
  checkUrl?: string(name='CheckUrl', description='checkUrl'),
}

model SaveApPortalConfigShrinkRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  authKey?: string(name='AuthKey', description='authKey'),
  totalDownload?: int32(name='TotalDownload', description='totalDownload'),
  portalTypesShrink?: string(name='PortalTypes', description='portalTypes'),
  apConfigId?: long(name='ApConfigId', description='apConfigId'),
  clientUpload?: int32(name='ClientUpload', description='clientUpload'),
  countdown?: int32(name='Countdown', description='countdown'),
  whitelist?: string(name='Whitelist', description='whitelist'),
  network?: int32(name='Network', description='network'),
  timeStamp?: long(name='TimeStamp', description='timeStamp'),
  appAuthUrl?: string(name='AppAuthUrl', description='appAuthUrl'),
  totalUpload?: int32(name='TotalUpload', description='totalUpload'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  webAuthUrl?: string(name='WebAuthUrl', description='webAuthUrl'),
  portalUrl?: string(name='PortalUrl', description='portalUrl'),
  clientDownload?: int32(name='ClientDownload', description='clientDownload'),
  checkUrl?: string(name='CheckUrl', description='checkUrl'),
}

model SaveApPortalConfigResponseBody = {
  data?: map[string]any(name='Data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model SaveApPortalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApPortalConfigResponseBody(name='body'),
}

async function saveApPortalConfigWithOptions(tmpReq: SaveApPortalConfigRequest, runtime: Util.RuntimeOptions): SaveApPortalConfigResponse {
  Util.validateModel(tmpReq);
  var request = new SaveApPortalConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.portalTypes)) {
    request.portalTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.portalTypes, 'PortalTypes', 'simple');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveApPortalConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveApPortalConfig(request: SaveApPortalConfigRequest): SaveApPortalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApPortalConfigWithOptions(request, runtime);
}

model GetApDetailStatusRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  needRadioStatus?: boolean(name='NeedRadioStatus'),
  mac?: string(name='Mac'),
  needApgroupInfo?: boolean(name='NeedApgroupInfo'),
}

model GetApDetailStatusResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApDetailStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetApDetailStatusResponseBody(name='body'),
}

async function getApDetailStatusWithOptions(request: GetApDetailStatusRequest, runtime: Util.RuntimeOptions): GetApDetailStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApDetailStatus', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApDetailStatus(request: GetApDetailStatusRequest): GetApDetailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailStatusWithOptions(request, runtime);
}

model GetNetDeviceInfoRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  role?: string(name='Role'),
  serviceTag?: string(name='ServiceTag'),
  idc?: string(name='Idc'),
  pageSize?: int32(name='PageSize'),
  mgnIp?: string(name='MgnIp'),
  manufacturer?: string(name='Manufacturer'),
  logicNetPod?: string(name='LogicNetPod'),
  password?: string(name='Password'),
  netPod?: string(name='NetPod'),
  requestId?: string(name='RequestId'),
  model?: string(name='Model'),
  id?: long(name='Id'),
  hostName?: string(name='HostName'),
  username?: string(name='Username'),
}

model GetNetDeviceInfoResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: [  map[string]any ](name='Data'),
}

model GetNetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetNetDeviceInfoResponseBody(name='body'),
}

async function getNetDeviceInfoWithOptions(request: GetNetDeviceInfoRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNetDeviceInfo', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNetDeviceInfo(request: GetNetDeviceInfoRequest): GetNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithOptions(request, runtime);
}

model EffectApConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model EffectApConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model EffectApConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EffectApConfigResponseBody(name='body'),
}

async function effectApConfigWithOptions(request: EffectApConfigRequest, runtime: Util.RuntimeOptions): EffectApConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EffectApConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function effectApConfig(request: EffectApConfigRequest): EffectApConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApConfigWithOptions(request, runtime);
}

model RepairApRadioRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
  radioIndex?: string(name='RadioIndex'),
}

model RepairApRadioResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: boolean(name='ErrorCode'),
}

model RepairApRadioResponse = {
  headers: map[string]string(name='headers'),
  body: RepairApRadioResponseBody(name='body'),
}

async function repairApRadioWithOptions(request: RepairApRadioRequest, runtime: Util.RuntimeOptions): RepairApRadioResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RepairApRadio', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function repairApRadio(request: RepairApRadioRequest): RepairApRadioResponse {
  var runtime = new Util.RuntimeOptions{};
  return repairApRadioWithOptions(request, runtime);
}

model GetRadioRunHistoryTimeSerRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  start?: long(name='Start'),
  apMac?: string(name='ApMac'),
  end?: long(name='End'),
}

model GetRadioRunHistoryTimeSerResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetRadioRunHistoryTimeSerResponse = {
  headers: map[string]string(name='headers'),
  body: GetRadioRunHistoryTimeSerResponseBody(name='body'),
}

async function getRadioRunHistoryTimeSerWithOptions(request: GetRadioRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetRadioRunHistoryTimeSerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRadioRunHistoryTimeSer', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRadioRunHistoryTimeSer(request: GetRadioRunHistoryTimeSerRequest): GetRadioRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRadioRunHistoryTimeSerWithOptions(request, runtime);
}

model RebootApRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model RebootApResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model RebootApResponse = {
  headers: map[string]string(name='headers'),
  body: RebootApResponseBody(name='body'),
}

async function rebootApWithOptions(request: RebootApRequest, runtime: Util.RuntimeOptions): RebootApResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootAp', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootAp(request: RebootApRequest): RebootApResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootApWithOptions(request, runtime);
}

model NewJobOrderRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  callbackUrl?: string(name='CallbackUrl'),
  clientSystem?: string(name='ClientSystem'),
  creator?: string(name='Creator'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId?: string(name='RequestId'),
  referUrl?: string(name='ReferUrl'),
  changeType?: string(name='ChangeType'),
  title?: string(name='Title'),
  params?: map[string]any(name='Params'),
}

model NewJobOrderShrinkRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  callbackUrl?: string(name='CallbackUrl'),
  clientSystem?: string(name='ClientSystem'),
  creator?: string(name='Creator'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId?: string(name='RequestId'),
  referUrl?: string(name='ReferUrl'),
  changeType?: string(name='ChangeType'),
  title?: string(name='Title'),
  paramsShrink?: string(name='Params'),
}

model NewJobOrderResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: {
    orderId?: long(name='OrderId'),
  }(name='Data'),
}

model NewJobOrderResponse = {
  headers: map[string]string(name='headers'),
  body: NewJobOrderResponseBody(name='body'),
}

async function newJobOrderWithOptions(tmpReq: NewJobOrderRequest, runtime: Util.RuntimeOptions): NewJobOrderResponse {
  Util.validateModel(tmpReq);
  var request = new NewJobOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.params)) {
    request.paramsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.params, 'Params', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('NewJobOrder', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function newJobOrder(request: NewJobOrderRequest): NewJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return newJobOrderWithOptions(request, runtime);
}

model NewNetDeviceInfoRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  devices?: [ 
    {
      mgnIp?: string(name='MgnIp'),
      password?: string(name='Password'),
      model?: string(name='Model'),
      logicNetPod?: string(name='LogicNetPod'),
      serviceTag?: string(name='ServiceTag'),
      netPod?: string(name='NetPod'),
      hostName?: string(name='HostName'),
      role?: string(name='Role'),
      idc?: string(name='Idc'),
      manufacturer?: string(name='Manufacturer'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
}

model NewNetDeviceInfoResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: [ long ](name='Data'),
}

model NewNetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: NewNetDeviceInfoResponseBody(name='body'),
}

async function newNetDeviceInfoWithOptions(request: NewNetDeviceInfoRequest, runtime: Util.RuntimeOptions): NewNetDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('NewNetDeviceInfo', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function newNetDeviceInfo(request: NewNetDeviceInfoRequest): NewNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return newNetDeviceInfoWithOptions(request, runtime);
}

model SaveApgroupSsidConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  newSsid?: string(name='NewSsid'),
  nasid?: string(name='Nasid'),
  ignoreWeakProbe?: int32(name='IgnoreWeakProbe'),
  daePort?: int32(name='DaePort'),
  apgroupId?: string(name='ApgroupId'),
  hidden?: string(name='Hidden'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret'),
  binding?: string(name='Binding'),
  maxInactivity?: int32(name='MaxInactivity'),
  type?: int32(name='Type'),
  ssid?: string(name='Ssid'),
  cir?: long(name='Cir'),
  network?: int32(name='Network'),
  ieee80211w?: string(name='Ieee80211w'),
  isolate?: string(name='Isolate'),
  ssidLb?: int32(name='SsidLb'),
  disassocWeakRssi?: int32(name='DisassocWeakRssi'),
  encryption?: string(name='Encryption'),
  vlanDhcp?: int32(name='VlanDhcp'),
  authPort?: int32(name='AuthPort'),
  wmm?: string(name='Wmm'),
  dynamicVlan?: int32(name='DynamicVlan'),
  authServer?: string(name='AuthServer'),
  disabled?: string(name='Disabled'),
  daeSecret?: string(name='DaeSecret'),
  id?: long(name='Id'),
  maxassoc?: string(name='Maxassoc'),
  secondaryAuthPort?: int32(name='SecondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret'),
  acctPort?: int32(name='AcctPort'),
  shortPreamble?: string(name='ShortPreamble'),
  liteEffect?: boolean(name='LiteEffect'),
  daeClient?: string(name='DaeClient'),
  acctServer?: string(name='AcctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer'),
  encKey?: string(name='EncKey'),
  acctSecret?: string(name='AcctSecret'),
  authSecret?: string(name='AuthSecret'),
  effect?: boolean(name='Effect'),
  authCache?: string(name='AuthCache'),
  multicastForward?: int32(name='MulticastForward'),
  secondaryAcctPort?: int32(name='SecondaryAcctPort'),
  disassocLowAck?: string(name='DisassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer'),
  ownip?: string(name='Ownip'),
}

model SaveApgroupSsidConfigResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: int32(name='ErrorCode'),
  data?: [ long ](name='Data'),
}

model SaveApgroupSsidConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApgroupSsidConfigResponseBody(name='body'),
}

async function saveApgroupSsidConfigWithOptions(request: SaveApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApgroupSsidConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveApgroupSsidConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveApgroupSsidConfig(request: SaveApgroupSsidConfigRequest): SaveApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApgroupSsidConfigWithOptions(request, runtime);
}

model DeleteApgroupConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apGroupUUId?: string(name='ApGroupUUId'),
}

model DeleteApgroupConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model DeleteApgroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApgroupConfigResponseBody(name='body'),
}

async function deleteApgroupConfigWithOptions(request: DeleteApgroupConfigRequest, runtime: Util.RuntimeOptions): DeleteApgroupConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApgroupConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApgroupConfig(request: DeleteApgroupConfigRequest): DeleteApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApgroupConfigWithOptions(request, runtime);
}

model KickStaRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  staMac?: string(name='StaMac'),
}

model KickStaResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model KickStaResponse = {
  headers: map[string]string(name='headers'),
  body: KickStaResponseBody(name='body'),
}

async function kickStaWithOptions(request: KickStaRequest, runtime: Util.RuntimeOptions): KickStaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KickSta', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function kickSta(request: KickStaRequest): KickStaResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickStaWithOptions(request, runtime);
}

model DeleteApSsidConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
  ssid?: string(name='Ssid'),
  radioIndex?: string(name='RadioIndex'),
}

model DeleteApSsidConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model DeleteApSsidConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApSsidConfigResponseBody(name='body'),
}

async function deleteApSsidConfigWithOptions(request: DeleteApSsidConfigRequest, runtime: Util.RuntimeOptions): DeleteApSsidConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApSsidConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApSsidConfig(request: DeleteApSsidConfigRequest): DeleteApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApSsidConfigWithOptions(request, runtime);
}

model GetApAddressByMacRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  language?: string(name='Language'),
  mac?: string(name='Mac'),
}

model GetApAddressByMacResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApAddressByMacResponse = {
  headers: map[string]string(name='headers'),
  body: GetApAddressByMacResponseBody(name='body'),
}

async function getApAddressByMacWithOptions(request: GetApAddressByMacRequest, runtime: Util.RuntimeOptions): GetApAddressByMacResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApAddressByMac', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApAddressByMac(request: GetApAddressByMacRequest): GetApAddressByMacResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAddressByMacWithOptions(request, runtime);
}

model GetApInfoFromPoolRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model GetApInfoFromPoolResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApInfoFromPoolResponse = {
  headers: map[string]string(name='headers'),
  body: GetApInfoFromPoolResponseBody(name='body'),
}

async function getApInfoFromPoolWithOptions(request: GetApInfoFromPoolRequest, runtime: Util.RuntimeOptions): GetApInfoFromPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApInfoFromPool', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApInfoFromPool(request: GetApInfoFromPoolRequest): GetApInfoFromPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApInfoFromPoolWithOptions(request, runtime);
}

model DeleteNetDeviceInfoRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  requestId?: string(name='RequestId'),
  ids?: string(name='Ids'),
}

model DeleteNetDeviceInfoResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: [ long ](name='Data'),
}

model DeleteNetDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetDeviceInfoResponseBody(name='body'),
}

async function deleteNetDeviceInfoWithOptions(request: DeleteNetDeviceInfoRequest, runtime: Util.RuntimeOptions): DeleteNetDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNetDeviceInfo', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNetDeviceInfo(request: DeleteNetDeviceInfoRequest): DeleteNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetDeviceInfoWithOptions(request, runtime);
}

model AddApListToApgroupRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMacList?: map[string]any(name='ApMacList'),
  apGroupId?: string(name='ApGroupId'),
}

model AddApListToApgroupShrinkRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMacListShrink?: string(name='ApMacList'),
  apGroupId?: string(name='ApGroupId'),
}

model AddApListToApgroupResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model AddApListToApgroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddApListToApgroupResponseBody(name='body'),
}

async function addApListToApgroupWithOptions(tmpReq: AddApListToApgroupRequest, runtime: Util.RuntimeOptions): AddApListToApgroupResponse {
  Util.validateModel(tmpReq);
  var request = new AddApListToApgroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.apMacList)) {
    request.apMacListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.apMacList, 'ApMacList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddApListToApgroup', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addApListToApgroup(request: AddApListToApgroupRequest): AddApListToApgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addApListToApgroupWithOptions(request, runtime);
}

model GetApgroupSsidConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apGroupUUId?: string(name='ApGroupUUId'),
}

model GetApgroupSsidConfigResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  errorMessage?: string(name='ErrorMessage'),
  errorCode?: int32(name='ErrorCode'),
  data?: [  map[string]any ](name='Data'),
}

model GetApgroupSsidConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetApgroupSsidConfigResponseBody(name='body'),
}

async function getApgroupSsidConfigWithOptions(request: GetApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): GetApgroupSsidConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApgroupSsidConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApgroupSsidConfig(request: GetApgroupSsidConfigRequest): GetApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupSsidConfigWithOptions(request, runtime);
}

model SaveApSsidConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  nasid?: string(name='Nasid'),
  ignoreWeakProbe?: int32(name='IgnoreWeakProbe'),
  fourthAuthPort?: int32(name='FourthAuthPort'),
  cirType?: int32(name='CirType'),
  ieee80211r?: int32(name='Ieee80211r'),
  mobilityDomain?: string(name='MobilityDomain'),
  daePort?: int32(name='DaePort'),
  fourthAuthServer?: string(name='FourthAuthServer'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret'),
  type?: int32(name='Type'),
  fourthAuthSecret?: string(name='FourthAuthSecret'),
  acctStatusServerWork?: int32(name='AcctStatusServerWork'),
  ieee80211w?: string(name='Ieee80211w'),
  ssidLb?: int32(name='SsidLb'),
  authPort?: int32(name='AuthPort'),
  authServer?: string(name='AuthServer'),
  daeSecret?: string(name='DaeSecret'),
  id?: long(name='Id'),
  cirStep?: long(name='CirStep'),
  authStatusServerWork?: int32(name='AuthStatusServerWork'),
  secondaryAuthPort?: int32(name='SecondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret'),
  shortPreamble?: string(name='ShortPreamble'),
  cirUl?: long(name='CirUl'),
  daeClient?: string(name='DaeClient'),
  liteEffect?: boolean(name='LiteEffect'),
  thirdAuthSecret?: string(name='ThirdAuthSecret'),
  thirdAuthPort?: int32(name='ThirdAuthPort'),
  acctServer?: string(name='AcctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer'),
  encKey?: string(name='EncKey'),
  acctSecret?: string(name='AcctSecret'),
  authCache?: string(name='AuthCache'),
  multicastForward?: int32(name='MulticastForward'),
  secondaryAcctPort?: int32(name='SecondaryAcctPort'),
  radioIndex?: string(name='RadioIndex'),
  ndProxyWork?: int32(name='NdProxyWork'),
  hidden?: string(name='Hidden'),
  maxInactivity?: int32(name='MaxInactivity'),
  thirdAuthServer?: string(name='ThirdAuthServer'),
  sendConfigToAp?: boolean(name='SendConfigToAp'),
  ssid?: string(name='Ssid'),
  cir?: long(name='Cir'),
  mac?: string(name='Mac'),
  network?: int32(name='Network'),
  isolate?: string(name='Isolate'),
  disassocWeakRssi?: int32(name='DisassocWeakRssi'),
  apAssetId?: long(name='ApAssetId'),
  encryption?: string(name='Encryption'),
  vlanDhcp?: int32(name='VlanDhcp'),
  wmm?: string(name='Wmm'),
  dynamicVlan?: int32(name='DynamicVlan'),
  disabled?: string(name='Disabled'),
  maxassoc?: int32(name='Maxassoc'),
  acctPort?: int32(name='AcctPort'),
  authSecret?: string(name='AuthSecret'),
  ftOverDs?: int32(name='FtOverDs'),
  arpProxyEnable?: int32(name='ArpProxyEnable'),
  disassocLowAck?: string(name='DisassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer'),
  ownip?: string(name='Ownip'),
}

model SaveApSsidConfigResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model SaveApSsidConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApSsidConfigResponseBody(name='body'),
}

async function saveApSsidConfigWithOptions(request: SaveApSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApSsidConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveApSsidConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveApSsidConfig(request: SaveApSsidConfigRequest): SaveApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApSsidConfigWithOptions(request, runtime);
}

model EffectApgroupConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apGroupUUId?: string(name='ApGroupUUId'),
}

model EffectApgroupConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model EffectApgroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EffectApgroupConfigResponseBody(name='body'),
}

async function effectApgroupConfigWithOptions(request: EffectApgroupConfigRequest, runtime: Util.RuntimeOptions): EffectApgroupConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EffectApgroupConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function effectApgroupConfig(request: EffectApgroupConfigRequest): EffectApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApgroupConfigWithOptions(request, runtime);
}

model GetApRunHistoryTimeSerRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  start?: long(name='Start'),
  apMac?: string(name='ApMac'),
  end?: long(name='End'),
}

model GetApRunHistoryTimeSerResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApRunHistoryTimeSerResponse = {
  headers: map[string]string(name='headers'),
  body: GetApRunHistoryTimeSerResponseBody(name='body'),
}

async function getApRunHistoryTimeSerWithOptions(request: GetApRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetApRunHistoryTimeSerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApRunHistoryTimeSer', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApRunHistoryTimeSer(request: GetApRunHistoryTimeSerRequest): GetApRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApRunHistoryTimeSerWithOptions(request, runtime);
}

model ListApgroupDescendantRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  cursor?: long(name='Cursor', description='cursor'),
  apgroupId?: long(name='ApgroupId', description='apgroupId'),
  level?: long(name='Level', description='level'),
  pageSize?: int32(name='PageSize', description='pageSize'),
  apgroupUuid?: string(name='ApgroupUuid', description='apgroupUuid'),
}

model ListApgroupDescendantResponseBody = {
  data?: map[string]any(name='Data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListApgroupDescendantResponse = {
  headers: map[string]string(name='headers'),
  body: ListApgroupDescendantResponseBody(name='body'),
}

async function listApgroupDescendantWithOptions(request: ListApgroupDescendantRequest, runtime: Util.RuntimeOptions): ListApgroupDescendantResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApgroupDescendant', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApgroupDescendant(request: ListApgroupDescendantRequest): ListApgroupDescendantResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApgroupDescendantWithOptions(request, runtime);
}

model SetApAddressRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apCityName?: string(name='ApCityName'),
  lng?: string(name='Lng'),
  apCampusName?: string(name='ApCampusName'),
  apGroup?: string(name='ApGroup'),
  language?: string(name='Language'),
  apAreaName?: string(name='ApAreaName'),
  apProvinceName?: string(name='ApProvinceName'),
  mac?: string(name='Mac'),
  apName?: string(name='ApName'),
  apUnitName?: string(name='ApUnitName'),
  apFloor?: string(name='ApFloor'),
  apBuildingName?: string(name='ApBuildingName'),
  apUnitId?: long(name='ApUnitId'),
  apNationName?: string(name='ApNationName'),
  lat?: string(name='Lat'),
  direction?: string(name='Direction'),
}

model SetApAddressResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model SetApAddressResponse = {
  headers: map[string]string(name='headers'),
  body: SetApAddressResponseBody(name='body'),
}

async function setApAddressWithOptions(request: SetApAddressRequest, runtime: Util.RuntimeOptions): SetApAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetApAddress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setApAddress(request: SetApAddressRequest): SetApAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApAddressWithOptions(request, runtime);
}

model GetApAssetRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model GetApAssetResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApAssetResponse = {
  headers: map[string]string(name='headers'),
  body: GetApAssetResponseBody(name='body'),
}

async function getApAssetWithOptions(request: GetApAssetRequest, runtime: Util.RuntimeOptions): GetApAssetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApAsset', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApAsset(request: GetApAssetRequest): GetApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAssetWithOptions(request, runtime);
}

model SetApNameRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  name?: string(name='Name'),
  apMac?: string(name='ApMac'),
}

model SetApNameResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model SetApNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetApNameResponseBody(name='body'),
}

async function setApNameWithOptions(request: SetApNameRequest, runtime: Util.RuntimeOptions): SetApNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetApName', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setApName(request: SetApNameRequest): SetApNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApNameWithOptions(request, runtime);
}

model GetApgroupIdRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  apMac?: string(name='ApMac'),
}

model GetApgroupIdResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApgroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetApgroupIdResponseBody(name='body'),
}

async function getApgroupIdWithOptions(request: GetApgroupIdRequest, runtime: Util.RuntimeOptions): GetApgroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApgroupId', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApgroupId(request: GetApgroupIdRequest): GetApgroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupIdWithOptions(request, runtime);
}

model GetStaStatusListByApRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  pageSize?: int32(name='PageSize'),
  apMac?: string(name='ApMac'),
}

model GetStaStatusListByApResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetStaStatusListByApResponse = {
  headers: map[string]string(name='headers'),
  body: GetStaStatusListByApResponseBody(name='body'),
}

async function getStaStatusListByApWithOptions(request: GetStaStatusListByApRequest, runtime: Util.RuntimeOptions): GetStaStatusListByApResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetStaStatusListByAp', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getStaStatusListByAp(request: GetStaStatusListByApRequest): GetStaStatusListByApResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStaStatusListByApWithOptions(request, runtime);
}

model ListJobOrdersRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  handler?: string(name='Handler'),
  clientSystem?: string(name='ClientSystem'),
  pageSize?: int32(name='PageSize'),
  title?: string(name='Title'),
  orderStatus?: string(name='OrderStatus'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  id?: string(name='Id'),
  endTime?: string(name='EndTime'),
  changingType?: string(name='ChangingType'),
  status?: string(name='Status'),
}

model ListJobOrdersResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  data?: [  map[string]any ](name='Data'),
}

model ListJobOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobOrdersResponseBody(name='body'),
}

async function listJobOrdersWithOptions(request: ListJobOrdersRequest, runtime: Util.RuntimeOptions): ListJobOrdersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobOrders', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobOrders(request: ListJobOrdersRequest): ListJobOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithOptions(request, runtime);
}

model NewApgroupConfigRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  parentApgroupId?: string(name='ParentApgroupId'),
  name?: string(name='Name'),
}

model NewApgroupConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model NewApgroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: NewApgroupConfigResponseBody(name='body'),
}

async function newApgroupConfigWithOptions(request: NewApgroupConfigRequest, runtime: Util.RuntimeOptions): NewApgroupConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('NewApgroupConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function newApgroupConfig(request: NewApgroupConfigRequest): NewApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return newApgroupConfigWithOptions(request, runtime);
}

model GetApStatusByGroupIdRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  apgroupId?: string(name='ApgroupId'),
  pageSize?: int32(name='PageSize'),
}

model GetApStatusByGroupIdResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model GetApStatusByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetApStatusByGroupIdResponseBody(name='body'),
}

async function getApStatusByGroupIdWithOptions(request: GetApStatusByGroupIdRequest, runtime: Util.RuntimeOptions): GetApStatusByGroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApStatusByGroupId', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApStatusByGroupId(request: GetApStatusByGroupIdRequest): GetApStatusByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApStatusByGroupIdWithOptions(request, runtime);
}

model GetApgroupDetailedConfigRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  apgroupId?: long(name='ApgroupId', description='apgroupId'),
  apgroupUuid?: string(name='ApgroupUuid', description='apgroupUuid'),
}

model GetApgroupDetailedConfigResponseBody = {
  data?: map[string]any(name='Data', description='data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetApgroupDetailedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetApgroupDetailedConfigResponseBody(name='body'),
}

async function getApgroupDetailedConfigWithOptions(request: GetApgroupDetailedConfigRequest, runtime: Util.RuntimeOptions): GetApgroupDetailedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApgroupDetailedConfig', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApgroupDetailedConfig(request: GetApgroupDetailedConfigRequest): GetApgroupDetailedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupDetailedConfigWithOptions(request, runtime);
}

model QueryJobOrderRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model QueryJobOrderResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  errorCode?: int32(name='ErrorCode'),
}

model QueryJobOrderResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobOrderResponseBody(name='body'),
}

async function queryJobOrderWithOptions(request: QueryJobOrderRequest, runtime: Util.RuntimeOptions): QueryJobOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryJobOrder', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryJobOrder(request: QueryJobOrderRequest): QueryJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobOrderWithOptions(request, runtime);
}

model RegisterApAssetRequest {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  id?: long(name='Id'),
  mac?: string(name='Mac'),
  apGroupUUId?: string(name='ApGroupUUId'),
  serialNo?: string(name='SerialNo'),
}

model RegisterApAssetResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
}

model RegisterApAssetResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterApAssetResponseBody(name='body'),
}

async function registerApAssetWithOptions(request: RegisterApAssetRequest, runtime: Util.RuntimeOptions): RegisterApAssetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterApAsset', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerApAsset(request: RegisterApAssetRequest): RegisterApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerApAssetWithOptions(request, runtime);
}

model UnRegisterApAssetRequest {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  useFor?: int32(name='UseFor', description='useFor'),
  id?: long(name='Id', description='id'),
  category?: int32(name='Category', description='category'),
  mac?: string(name='Mac', description='mac'),
  assetApgroupId?: long(name='AssetApgroupId', description='assetApgroupId'),
  serialNo?: string(name='SerialNo', description='serialNo'),
}

model UnRegisterApAssetResponseBody = {
  data?: map[string]any(name='Data'),
  isSuccess?: boolean(name='IsSuccess'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model UnRegisterApAssetResponse = {
  headers: map[string]string(name='headers'),
  body: UnRegisterApAssetResponseBody(name='body'),
}

async function unRegisterApAssetWithOptions(request: UnRegisterApAssetRequest, runtime: Util.RuntimeOptions): UnRegisterApAssetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnRegisterApAsset', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unRegisterApAsset(request: UnRegisterApAssetRequest): UnRegisterApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return unRegisterApAssetWithOptions(request, runtime);
}

