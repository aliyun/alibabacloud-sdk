/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'mssp';
  @version = '2016-12-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateServiceWorkOrderRequest {
  creator: string(name='Creator', description='This parameter is required.', example='426556', position='Body'),
  customerId: string(name='CustomerId', description='This parameter is required.', example='1477832102462645', position='Body'),
  durationDay: string(name='DurationDay', description='This parameter is required.', example='5', position='Body'),
  isAttachment: string(name='IsAttachment', description='This parameter is required.', example='Y', position='Body'),
  isWorkOrderNotify: string(name='IsWorkOrderNotify', description='This parameter is required.', example='Y', position='Body'),
  notifyDay?: string(name='NotifyDay', example='5', position='Body'),
  notifyId?: long(name='NotifyId', example='10', position='Body'),
  operateRemark: string(name='OperateRemark', description='This parameter is required.', position='Body'),
  operateType: string(name='OperateType', description='This parameter is required.', example='CREATE', position='Body'),
  operator: string(name='Operator', description='This parameter is required.', example='426556', position='Body'),
  ownerId: string(name='OwnerId', description='This parameter is required.', position='Body'),
  startTime: long(name='StartTime', description='This parameter is required.', example='2021-01-21 15:25:25', position='Body'),
  workOrderDetail: string(name='WorkOrderDetail', description='This parameter is required.', position='Body'),
  workOrderName: string(name='WorkOrderName', description='This parameter is required.', position='Body'),
  workOrderSource: string(name='WorkOrderSource', description='This parameter is required.', position='Body'),
  workOrderStatus: string(name='WorkOrderStatus', description='This parameter is required.', example='UNPROCESSED', position='Body'),
  workOrderType: string(name='WorkOrderType', description='This parameter is required.', example='MONTH_REPORT', position='Body'),
}

model CreateServiceWorkOrderResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completeTime?: long(name='CompleteTime', example='2024-03-07 16:45:01'),
    createTime?: long(name='CreateTime', example='2024-10-04T02:19:55Z'),
    creator?: string(name='Creator', example='426556'),
    customerId?: string(name='CustomerId', example='1477832102462645'),
    endTime?: long(name='EndTime', example='24-03-11 00:00:00'),
    id?: long(name='Id', example='1978941'),
    ownerId?: string(name='OwnerId', example='426556'),
    startTime?: long(name='StartTime', example='2021-01-21 15:25:25'),
    workOrderDetail?: string(name='WorkOrderDetail'),
    workOrderName?: string(name='WorkOrderName'),
    workOrderSource?: string(name='WorkOrderSource'),
    workOrderStatus?: string(name='WorkOrderStatus', example='UNPROCESSED'),
    workOrderType?: string(name='WorkOrderType', example='MONTH_REPORT'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='7DC44321-7AAE-51CD-8E5F-CEB968569042'),
  success?: boolean(name='Success', example='true'),
}

model CreateServiceWorkOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceWorkOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceWorkOrder  CreateServiceWorkOrderRequest
  * @return CreateServiceWorkOrderResponse
 */
async function createServiceWorkOrder(request: CreateServiceWorkOrderRequest): CreateServiceWorkOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceWorkOrder', 'POST', '/', 'json', true, 'form', request);
}

model DisposeServiceWorkOrderRequest {
  attachmentName?: string(name='AttachmentName', position='Body'),
  endTime?: long(name='EndTime', example='2024-04-14 00:00:00', position='Body'),
  forwardOwnerId?: string(name='ForwardOwnerId', example='405639', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='23172', position='Body'),
  isAttachment?: string(name='IsAttachment', example='Y', position='Body'),
  isWorkOrderNotify?: string(name='IsWorkOrderNotify', example='Y', position='Body'),
  notifyId?: long(name='NotifyId', example='10', position='Body'),
  operateRemark: string(name='OperateRemark', description='This parameter is required.', position='Body'),
  operateType: string(name='OperateType', description='This parameter is required.', example='PROCESSED', position='Body'),
  operator: string(name='Operator', description='This parameter is required.', example='396120', position='Body'),
  startTime?: long(name='StartTime', example='2024-04-02 00:00:00', position='Body'),
  upgradeOwnerId?: string(name='UpgradeOwnerId', example='336333', position='Body'),
  workOrderDetail?: string(name='WorkOrderDetail', position='Body'),
  workOrderName: string(name='WorkOrderName', description='This parameter is required.', position='Body'),
  workOrderStatus?: string(name='WorkOrderStatus', example='PROCESSED', position='Body'),
}

model DisposeServiceWorkOrderResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='ED520610-6231-5D80-BADD-A8CDC7BBC809'),
  success?: boolean(name='Success', example='true'),
}

model DisposeServiceWorkOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisposeServiceWorkOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisposeServiceWorkOrder  DisposeServiceWorkOrderRequest
  * @return DisposeServiceWorkOrderResponse
 */
async function disposeServiceWorkOrder(request: DisposeServiceWorkOrderRequest): DisposeServiceWorkOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisposeServiceWorkOrder', 'POST', '/', 'json', true, 'form', request);
}

model DisposeWorkTaskRequest {
  operator: string(name='Operator', description='This parameter is required.', example='WB01089929', position='Body'),
  optRemark: string(name='OptRemark', description='This parameter is required.', position='Body'),
  status: int32(name='Status', description='This parameter is required.', example='8', position='Body'),
  taskIds: string(name='TaskIds', description='This parameter is required.', example='10310', position='Body'),
}

model DisposeWorkTaskResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success.'),
  requestId: string(name='RequestId', description='This parameter is required.', example='86786E4C-6416-55CF-9AB6-5E275B68801D'),
  success?: boolean(name='Success', example='true'),
}

model DisposeWorkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisposeWorkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisposeWorkTask  DisposeWorkTaskRequest
  * @return DisposeWorkTaskResponse
 */
async function disposeWorkTask(request: DisposeWorkTaskRequest): DisposeWorkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisposeWorkTask', 'POST', '/', 'json', true, 'form', request);
}

model GetAttackedAssetDealRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732268720000', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1732268720000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetAttackedAssetDealResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    ecsTrendList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='2'),
        findCount?: long(name='FindCount'),
      }
    ](name='EcsTrendList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='1E74F11C-B4A8-5774-962C-02003BA8504E'),
  success?: boolean(name='Success', example='true'),
}

model GetAttackedAssetDealResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAttackedAssetDealResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAttackedAssetDeal  GetAttackedAssetDealRequest
  * @return GetAttackedAssetDealResponse
 */
async function getAttackedAssetDeal(request: GetAttackedAssetDealRequest): GetAttackedAssetDealResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAttackedAssetDeal', 'POST', '/', 'json', true, 'form', request);
}

model GetBaselineSummaryRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732156885986', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1729478485000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetBaselineSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    trendDTOList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='10'),
        findCount?: long(name='FindCount', example='12'),
      }
    ](name='TrendDTOList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='67D61738-5E38-5164-947A-34E3850D493A'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBaselineSummary  GetBaselineSummaryRequest
  * @return GetBaselineSummaryResponse
 */
async function getBaselineSummary(request: GetBaselineSummaryRequest): GetBaselineSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBaselineSummary', 'POST', '/', 'json', true, 'form', request);
}

model GetDetailByIdRequest {
  id: long(name='Id', description='This parameter is required.', example='22', position='Body'),
}

model GetDetailByIdResponseBody = {
  code?: string(name='Code', example='404'),
  data?: {
    vulDetails?: [ 
      {
        cveId?: string(name='CveId', example='CVE-2022-21291'),
        cvssScore?: string(name='CvssScore', example='10.0'),
        fixSuggestion?: string(name='FixSuggestion', example='https://avd.aliyun.com/detail/CVE-2022-21291'),
        title?: string(name='Title', example='Chanjet T-Plus SetupAccount/Upload. Aspx file upload vulnerability(CNVD-2022-60632)'),
      }
    ](name='VulDetails'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId: string(name='RequestId', description='This parameter is required.', example='DAB46EC5-3746-59C4-B6D2-469F442EC73F'),
  success?: boolean(name='Success', example='true'),
}

model GetDetailByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetailByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDetailById  GetDetailByIdRequest
  * @return GetDetailByIdResponse
 */
async function getDetailById(request: GetDetailByIdRequest): GetDetailByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetailById', 'POST', '/', 'json', true, 'form', request);
}

model GetDocumentDownloadUrlRequest {
  id: long(name='Id', description='This parameter is required.', example='175815', position='Body'),
}

model GetDocumentDownloadUrlResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='https://oos-cn.ctyunapi.cn/example-bucket/test/1.jpg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='C7BE80B4-7692-54FA-AB22-2A7DF08C4754'),
  success?: boolean(name='Success', example='true'),
}

model GetDocumentDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocumentDownloadUrl  GetDocumentDownloadUrlRequest
  * @return GetDocumentDownloadUrlResponse
 */
async function getDocumentDownloadUrl(request: GetDocumentDownloadUrlRequest): GetDocumentDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentDownloadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetDocumentPageRequest {
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Body'),
  deliveredBy?: string(name='DeliveredBy', position='Body'),
  documentName?: string(name='DocumentName', position='Body'),
  documentType?: string(name='DocumentType', example='0', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Body'),
  reportType: string(name='ReportType', description='This parameter is required.', example='1', position='Body'),
}

model GetDocumentPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      deliveredBy?: string(name='DeliveredBy'),
      documentName?: string(name='DocumentName'),
      documentType?: string(name='DocumentType', example='3'),
      id?: long(name='Id', example='346409'),
      uploadTime?: string(name='UploadTime', example='2023-03-21 17:26:34'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='3149'),
  }(name='PageInfo'),
  requestId: string(name='RequestId', description='This parameter is required.', example='04DAD7B4-E1DA-5C2C-8E5C-A1EDC880CF60'),
  success?: boolean(name='Success', example='true'),
}

model GetDocumentPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocumentPage  GetDocumentPageRequest
  * @return GetDocumentPageResponse
 */
async function getDocumentPage(request: GetDocumentPageRequest): GetDocumentPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentPage', 'POST', '/', 'json', true, 'form', request);
}

model GetDocumentSummaryRequest {
  reportType?: string(name='ReportType', example='1', position='Body'),
}

model GetDocumentSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    documentCount?: long(name='DocumentCount', example='10'),
    frequency?: long(name='Frequency', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='7903F2DE-D9EE-5D16-8A08-E9223E54B281'),
  success?: boolean(name='Success', example='True'),
}

model GetDocumentSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocumentSummary  GetDocumentSummaryRequest
  * @return GetDocumentSummaryResponse
 */
async function getDocumentSummary(request: GetDocumentSummaryRequest): GetDocumentSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentSummary', 'POST', '/', 'json', true, 'form', request);
}

model GetRecentDocumentRequest {
  dateType: string(name='DateType', description='This parameter is required.', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetRecentDocumentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      id?: long(name='Id', example='360491'),
      name?: string(name='Name'),
      uploadTime?: string(name='UploadTime', example='2023-03-20 14:30:38'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='4916FA8D-F294-518D-B373-8B59D63CAB19'),
  success?: boolean(name='Success', example='true'),
}

model GetRecentDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecentDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRecentDocument  GetRecentDocumentRequest
  * @return GetRecentDocumentResponse
 */
async function getRecentDocument(request: GetRecentDocumentRequest): GetRecentDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecentDocument', 'POST', '/', 'json', true, 'form', request);
}

model GetSafetyCoverRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732268720000', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1732255620000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetSafetyCoverResponseBody = {
  code?: string(name='Code', example='404'),
  data?: {
    cfwProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='CfwProtection'),
    ecsProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='EcsProtection'),
    wafProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='WafProtection'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  requestId: string(name='RequestId', description='This parameter is required.', example='564f8bb9-df3c-42a0-877a-b35d48f66603'),
  success?: boolean(name='Success', example='True'),
}

model GetSafetyCoverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSafetyCoverResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSafetyCover  GetSafetyCoverRequest
  * @return GetSafetyCoverResponse
 */
async function getSafetyCover(request: GetSafetyCoverRequest): GetSafetyCoverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSafetyCover', 'POST', '/', 'json', true, 'form', request);
}

model GetSuspEventPageRequest {
  alarmEndTime?: long(name='AlarmEndTime', example='1732515522000', position='Body'),
  alarmStartTime?: long(name='AlarmStartTime', example='1722515522000', position='Body'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Body'),
  source?: string(name='Source', example='SUSP_EVENT', position='Body'),
  status?: int32(name='Status', example='1', position='Body'),
}

model GetSuspEventPageResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      alarmEventType?: string(name='AlarmEventType'),
      alarmId?: long(name='AlarmId', example='5b1eeebe4f22daa2b177298234214fa3'),
      alarmName?: string(name='AlarmName'),
      alarmSource?: string(name='AlarmSource', example='SUSP_EVENT'),
      alarmTime?: string(name='AlarmTime', example='1722515522000'),
      analysisResult?: string(name='AnalysisResult'),
      dealTime?: string(name='DealTime', example='1732515522000'),
      eventLevel?: string(name='EventLevel', example='suspicious'),
      id?: long(name='Id', example='9947'),
      instanceName?: string(name='InstanceName', example='shells-azhou'),
      internetIp?: string(name='InternetIp', example='47.99.188.31'),
      intranetIp?: string(name='IntranetIp', example='172.16.109.130'),
      occurrenceTime?: string(name='OccurrenceTime'),
      ownerId?: string(name='OwnerId'),
      remark?: string(name='Remark'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId: string(name='RequestId', description='This parameter is required.', example='AFA6F7B7-7C4B-58BB-B8FB-E0FFA4483561'),
  success?: boolean(name='Success', example='true'),
}

model GetSuspEventPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspEventPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSuspEventPage  GetSuspEventPageRequest
  * @return GetSuspEventPageResponse
 */
async function getSuspEventPage(request: GetSuspEventPageRequest): GetSuspEventPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuspEventPage', 'POST', '/', 'json', true, 'form', request);
}

model GetSuspEventSummaryRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732156885986', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1729478485000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', example='SUSP_EVENT', position='Body'),
}

model GetSuspEventSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    networkAttackTrendDTO?: {
      trendList?: [ 
        {
          date?: string(name='Date'),
          ddosCount?: long(name='DdosCount', example='10'),
          eipCount?: long(name='EipCount', example='10'),
          wafCount?: long(name='WafCount', example='10'),
        }
      ](name='TrendList'),
    }(name='NetworkAttackTrendDTO'),
    suspEventDealSummaryDTO?: {
      completedCount?: long(name='CompletedCount', example='20'),
      handingCount?: long(name='HandingCount', example='5'),
      handingRate?: string(name='HandingRate', example='90'),
      totalCount?: long(name='TotalCount', example='35'),
      totalGrowthRate?: string(name='TotalGrowthRate', example='10'),
      waitHandleCount?: long(name='WaitHandleCount', example='10'),
    }(name='SuspEventDealSummaryDTO'),
    suspEventTopDTO?: {
      suspEventList?: [ 
        {
          eventName?: string(name='EventName'),
          taskCount?: long(name='TaskCount', example='7'),
        }
      ](name='SuspEventList'),
    }(name='SuspEventTopDTO'),
    suspEventTrendDTO?: {
      trendList?: [ 
        {
          date?: string(name='Date'),
          dealCount?: long(name='DealCount', example='10'),
          findCount?: long(name='FindCount', example='15'),
        }
      ](name='TrendList'),
    }(name='SuspEventTrendDTO'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful!'),
  requestId: string(name='RequestId', description='This parameter is required.', example='9B2DAE9B-B901-5818-AFEF-E5637D938280'),
  success?: boolean(name='Success', example='true'),
}

model GetSuspEventSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspEventSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSuspEventSummary  GetSuspEventSummaryRequest
  * @return GetSuspEventSummaryResponse
 */
async function getSuspEventSummary(request: GetSuspEventSummaryRequest): GetSuspEventSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuspEventSummary', 'POST', '/', 'json', true, 'form', request);
}

model GetSuspPageSummaryRequest {
}

model GetSuspPageSummaryResponseBody = {
  code?: string(name='Code'),
  data?: {
    completedCount?: long(name='CompletedCount'),
    handingCount?: long(name='HandingCount'),
    highCount?: long(name='HighCount'),
    lowCount?: long(name='LowCount'),
    mediumCount?: long(name='MediumCount'),
    totalCount?: long(name='TotalCount'),
    waitHandleCount?: long(name='WaitHandleCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId: string(name='RequestId', description='Id of the request

This parameter is required.'),
  success?: boolean(name='Success'),
}

model GetSuspPageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspPageSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSuspPageSummary  GetSuspPageSummaryRequest
  * @return GetSuspPageSummaryResponse
 */
async function getSuspPageSummary(request: GetSuspPageSummaryRequest): GetSuspPageSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSuspPageSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetUserStatusRequest {
}

model GetUserStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    customerType?: string(name='CustomerType', example='official'),
    endDate?: string(name='EndDate', example='2023-09-28 00:00:00'),
    instanceId?: string(name='InstanceId', example='726cec3c-4887-4354-8c21-c0ad12e10fc2'),
    startDate?: string(name='StartDate', example='2023-09-20 00:00:00'),
    status?: string(name='Status', example='FirstLogin'),
    version?: string(name='Version', example='mdrjichu'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId: string(name='RequestId', description='This parameter is required.', example='D8DBD769-613E-5E6B-A9FD-B622375B152D'),
  success?: boolean(name='Success', example='true'),
}

model GetUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserStatus  GetUserStatusRequest
  * @return GetUserStatusResponse
 */
async function getUserStatus(request: GetUserStatusRequest): GetUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetVulItemPageRequest {
  aliasName?: string(name='AliasName', example='RHSA-2018:3665-Important: NetworkManager security update', position='Body'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Body'),
  dealed?: string(name='Dealed', example='n', position='Body'),
  level?: string(name='Level', example='later', position='Body'),
  name?: string(name='Name', example='oval:com.redhat.rhsa:def:20183665', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Body'),
  scanType?: string(name='ScanType', example='sca', position='Body'),
}

model GetVulItemPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount', example='74'),
      customerId?: string(name='CustomerId', example='1940494487193744'),
      cveUrlPrefix?: string(name='CveUrlPrefix', example='https://avd.aliyun.com/detail/'),
      dealed?: string(name='Dealed', example='y'),
      findTime?: string(name='FindTime', example='2023-04-23 14:47:34'),
      handledCount?: int32(name='HandledCount', example='20'),
      id?: long(name='Id', example='353845'),
      laterCount?: int32(name='LaterCount', example='10'),
      level?: string(name='Level', example='later'),
      name?: string(name='Name', example='oval:com.redhat.rhsa:def:20205002'),
      nntfCount?: int32(name='NntfCount', example='8'),
      related?: string(name='Related', example='CVE-2019-20907'),
      relatedCveCount?: int32(name='RelatedCveCount', example='20'),
      scanType?: string(name='ScanType', example='sca'),
      tags?: string(name='Tags', example='Elevation of Privilege'),
      totalFixCount?: long(name='TotalFixCount', example='50'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='163'),
  }(name='PageInfo'),
  requestId: string(name='RequestId', description='This parameter is required.', example='02F8BBF3-2D61-5982-8911-EEB387BE3AF8'),
  success?: boolean(name='Success', example='true'),
}

model GetVulItemPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulItemPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVulItemPage  GetVulItemPageRequest
  * @return GetVulItemPageResponse
 */
async function getVulItemPage(request: GetVulItemPageRequest): GetVulItemPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulItemPage', 'POST', '/', 'json', true, 'form', request);
}

model GetVulPageSummaryRequest {
}

model GetVulPageSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completedCount?: long(name='CompletedCount', example='1990'),
    handingCount?: long(name='HandingCount', example='6'),
    highCount?: long(name='HighCount', example='500'),
    lowCount?: long(name='LowCount', example='1000'),
    mediumCount?: long(name='MediumCount', example='500'),
    totalCount?: long(name='TotalCount', example='2000'),
    waitHandleCount?: long(name='WaitHandleCount', example='4'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId: string(name='RequestId', description='This parameter is required.', example='A3A575C8-80F9-5F04-AA24-CCAC246884A3'),
  success?: boolean(name='Success', example='true'),
}

model GetVulPageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulPageSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVulPageSummary  GetVulPageSummaryRequest
  * @return GetVulPageSummaryResponse
 */
async function getVulPageSummary(request: GetVulPageSummaryRequest): GetVulPageSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulPageSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetVulSummaryRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732156885986', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1729478485000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetVulSummaryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    completedCount?: long(name='CompletedCount', example='10'),
    dealRate?: string(name='DealRate', example='50'),
    trendList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='10'),
        findCount?: long(name='FindCount', example='15'),
      }
    ](name='TrendList'),
    waitHandleCount?: long(name='WaitHandleCount', example='5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  requestId: string(name='RequestId', description='This parameter is required.', example='EF801DD1-D934-51B3-92D4-776CE17B184F'),
  success?: boolean(name='Success', example='true'),
}

model GetVulSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVulSummary  GetVulSummaryRequest
  * @return GetVulSummaryResponse
 */
async function getVulSummary(request: GetVulSummaryRequest): GetVulSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVulSummary', 'POST', '/', 'json', true, 'form', request);
}

model GetWorkTaskSummaryRequest {
  dateType: string(name='DateType', description='This parameter is required.', example='month', position='Body'),
  endDate: long(name='EndDate', description='This parameter is required.', example='1732156885986', position='Body'),
  startDate: long(name='StartDate', description='This parameter is required.', example='1729478485000', position='Body'),
  suspEventSource?: string(name='SuspEventSource', position='Body'),
}

model GetWorkTaskSummaryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    dealAverageDuration?: long(name='DealAverageDuration', example='60'),
    dealAverageDurationGrowthRate?: string(name='DealAverageDurationGrowthRate', example='20'),
    dealWorkTaskCount?: long(name='DealWorkTaskCount', example='100'),
    dealWorkTaskCountRate?: string(name='DealWorkTaskCountRate', example='20'),
    workTaskCount?: long(name='WorkTaskCount', example='10'),
    workTaskDealRate?: string(name='WorkTaskDealRate', example='90'),
    workTaskDealRateGrowthRate?: string(name='WorkTaskDealRateGrowthRate', example='20'),
    workTaskGrowthRate?: string(name='WorkTaskGrowthRate', example='20'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful!'),
  requestId: string(name='RequestId', description='This parameter is required.', example='EF801DD1-D934-51B3-92D4-776CE17B184F'),
  success?: boolean(name='Success', example='true'),
}

model GetWorkTaskSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkTaskSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkTaskSummary  GetWorkTaskSummaryRequest
  * @return GetWorkTaskSummaryResponse
 */
async function getWorkTaskSummary(request: GetWorkTaskSummaryRequest): GetWorkTaskSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkTaskSummary', 'POST', '/', 'json', true, 'form', request);
}

model PageServiceCustomerRequest {
  authStatus?: int32(name='AuthStatus', position='Body'),
  cmAuthStatus?: int32(name='CmAuthStatus', position='Body'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', position='Body'),
  endTime?: long(name='EndTime', position='Body'),
  monitorAuthStatus?: int32(name='MonitorAuthStatus', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', position='Body'),
  startTime?: long(name='StartTime', position='Body'),
}

model PageServiceCustomerResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aliuid?: string(name='Aliuid'),
      authStatus?: int32(name='AuthStatus'),
      cmAuthStatus?: int32(name='CmAuthStatus'),
      endTime?: long(name='EndTime'),
      level?: string(name='Level'),
      monitorAuthStatus?: int32(name='MonitorAuthStatus'),
      name?: string(name='Name'),
      ownId?: string(name='OwnId'),
      startTime?: long(name='StartTime'),
      userId?: string(name='UserId'),
      version?: string(name='Version'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId: string(name='RequestId', description='Id of the request

This parameter is required.'),
  success?: boolean(name='Success'),
}

model PageServiceCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageServiceCustomerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageServiceCustomer  PageServiceCustomerRequest
  * @return PageServiceCustomerResponse
 */
async function pageServiceCustomer(request: PageServiceCustomerRequest): PageServiceCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageServiceCustomer', 'POST', '/', 'json', true, 'form', request);
}

model SendCustomEventRequest {
  customerId: string(name='CustomerId', description='This parameter is required.', example='1214484929940219', position='Body'),
  dataSource?: string(name='DataSource', example='aegis_suspicious_event', position='Body'),
  eventDescription?: string(name='EventDescription', position='Body'),
  eventDetails?: string(name='EventDetails', position='Body'),
  eventName: string(name='EventName', description='This parameter is required.', position='Body'),
  eventType: string(name='EventType', description='This parameter is required.', example='SUSP_CUSTOM_CFW', position='Body'),
  findTime: long(name='FindTime', description='This parameter is required.', example='2023-04-23 14:47:34', position='Body'),
  instanceId?: string(name='InstanceId', example='i-uf60h3ns25bzq9eyf8ps', position='Body'),
  instanceName?: string(name='InstanceName', position='Body'),
  isSend: string(name='IsSend', description='This parameter is required.', example='0', position='Body'),
  level: string(name='Level', description='This parameter is required.', example='serious', position='Body'),
  occurrenceTime?: long(name='OccurrenceTime', example='1724956996000', position='Body'),
  ownerId?: string(name='OwnerId', position='Body'),
  product?: string(name='Product', example='CloudSecCenter', position='Body'),
  uniqueId: string(name='UniqueId', description='This parameter is required.', example='68888f02-98f2-492b-a2b2-5b13295755b7', position='Body'),
  uuid?: string(name='Uuid', description='UUID。', example='93B6CDAB-7D2E-33D2-9EBA-25D561A2E95F', position='Body'),
}

model SendCustomEventResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    customerId?: string(name='CustomerId', example='1601097845544644'),
    customerName?: string(name='CustomerName'),
    eventId?: string(name='EventId', example='c0dc71d1-8a1d-4043-9767-f6c420e34901-81bd'),
    eventType?: string(name='EventType', example='SUSP_CUSTOM_WAF'),
    id?: long(name='Id', example='1914348'),
    ownerId?: string(name='OwnerId', example='352675'),
    ownerName?: string(name='OwnerName'),
    workTaskName?: string(name='WorkTaskName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId: string(name='RequestId', description='This parameter is required.', example='606EB377-155D-5AEB-AC4F-F013444A4C45'),
  success?: boolean(name='Success', example='true'),
}

model SendCustomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendCustomEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendCustomEvent  SendCustomEventRequest
  * @return SendCustomEventResponse
 */
async function sendCustomEvent(request: SendCustomEventRequest): SendCustomEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCustomEvent', 'POST', '/', 'json', true, 'form', request);
}

