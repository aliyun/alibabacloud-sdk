/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mssp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateServiceWorkOrderRequest {
  creator?: string(name='Creator', description='This parameter is required.', example='426556'),
  customerId?: string(name='CustomerId', description='This parameter is required.', example='1477832102462645'),
  durationDay?: string(name='DurationDay', description='This parameter is required.', example='5'),
  isAttachment?: string(name='IsAttachment', description='This parameter is required.', example='Y'),
  isWorkOrderNotify?: string(name='IsWorkOrderNotify', description='This parameter is required.', example='Y'),
  notifyDay?: string(name='NotifyDay', example='5'),
  notifyId?: long(name='NotifyId', example='10'),
  operateRemark?: string(name='OperateRemark', description='This parameter is required.'),
  operateType?: string(name='OperateType', description='This parameter is required.', example='CREATE'),
  operator?: string(name='Operator', description='This parameter is required.', example='426556'),
  ownerId?: string(name='OwnerId', description='This parameter is required.'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='2021-01-21 15:25:25'),
  workOrderDetail?: string(name='WorkOrderDetail', description='This parameter is required.'),
  workOrderName?: string(name='WorkOrderName', description='This parameter is required.'),
  workOrderSource?: string(name='WorkOrderSource', description='This parameter is required.'),
  workOrderStatus?: string(name='WorkOrderStatus', description='This parameter is required.', example='UNPROCESSED'),
  workOrderType?: string(name='WorkOrderType', description='This parameter is required.', example='MONTH_REPORT'),
}

model CreateServiceWorkOrderResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completeTime?: long(name='CompleteTime', example='2024-03-07 16:45:01'),
    createTime?: long(name='CreateTime', example='2024-10-04T02:19:55Z'),
    creator?: string(name='Creator', example='426556'),
    customerId?: string(name='CustomerId', example='1477832102462645'),
    endTime?: long(name='EndTime', example='24-03-11 00:00:00'),
    id?: long(name='Id', example='1978941'),
    ownerId?: string(name='OwnerId', example='426556'),
    startTime?: long(name='StartTime', example='2021-01-21 15:25:25'),
    workOrderDetail?: string(name='WorkOrderDetail'),
    workOrderName?: string(name='WorkOrderName'),
    workOrderSource?: string(name='WorkOrderSource'),
    workOrderStatus?: string(name='WorkOrderStatus', example='UNPROCESSED'),
    workOrderType?: string(name='WorkOrderType', example='MONTH_REPORT'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='7DC44321-7AAE-51CD-8E5F-CEB968569042'),
  success?: boolean(name='Success', example='true'),
}

model CreateServiceWorkOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceWorkOrderResponseBody(name='body'),
}

/**
 * @summary 创建服务工单
 *
 * @param request CreateServiceWorkOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServiceWorkOrderResponse
 */
async function createServiceWorkOrderWithOptions(request: CreateServiceWorkOrderRequest, runtime: Util.RuntimeOptions): CreateServiceWorkOrderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.customerId)) {
    body['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.durationDay)) {
    body['DurationDay'] = request.durationDay;
  }
  if (!Util.isUnset(request.isAttachment)) {
    body['IsAttachment'] = request.isAttachment;
  }
  if (!Util.isUnset(request.isWorkOrderNotify)) {
    body['IsWorkOrderNotify'] = request.isWorkOrderNotify;
  }
  if (!Util.isUnset(request.notifyDay)) {
    body['NotifyDay'] = request.notifyDay;
  }
  if (!Util.isUnset(request.notifyId)) {
    body['NotifyId'] = request.notifyId;
  }
  if (!Util.isUnset(request.operateRemark)) {
    body['OperateRemark'] = request.operateRemark;
  }
  if (!Util.isUnset(request.operateType)) {
    body['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.ownerId)) {
    body['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.workOrderDetail)) {
    body['WorkOrderDetail'] = request.workOrderDetail;
  }
  if (!Util.isUnset(request.workOrderName)) {
    body['WorkOrderName'] = request.workOrderName;
  }
  if (!Util.isUnset(request.workOrderSource)) {
    body['WorkOrderSource'] = request.workOrderSource;
  }
  if (!Util.isUnset(request.workOrderStatus)) {
    body['WorkOrderStatus'] = request.workOrderStatus;
  }
  if (!Util.isUnset(request.workOrderType)) {
    body['WorkOrderType'] = request.workOrderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceWorkOrder',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建服务工单
 *
 * @param request CreateServiceWorkOrderRequest
 * @return CreateServiceWorkOrderResponse
 */
async function createServiceWorkOrder(request: CreateServiceWorkOrderRequest): CreateServiceWorkOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWorkOrderWithOptions(request, runtime);
}

model DisposeServiceWorkOrderRequest {
  attachmentName?: string(name='AttachmentName'),
  endTime?: long(name='EndTime', example='2024-04-14 00:00:00'),
  forwardOwnerId?: string(name='ForwardOwnerId', example='405639'),
  id?: long(name='Id', description='This parameter is required.', example='23172'),
  isAttachment?: string(name='IsAttachment', example='Y'),
  isWorkOrderNotify?: string(name='IsWorkOrderNotify', example='Y'),
  notifyId?: long(name='NotifyId', example='10'),
  operateRemark?: string(name='OperateRemark', description='This parameter is required.'),
  operateType?: string(name='OperateType', description='This parameter is required.', example='PROCESSED'),
  operator?: string(name='Operator', description='This parameter is required.', example='396120'),
  startTime?: long(name='StartTime', example='2024-04-02 00:00:00'),
  upgradeOwnerId?: string(name='UpgradeOwnerId', example='336333'),
  workOrderDetail?: string(name='WorkOrderDetail'),
  workOrderName?: string(name='WorkOrderName', description='This parameter is required.'),
  workOrderStatus?: string(name='WorkOrderStatus', example='PROCESSED'),
}

model DisposeServiceWorkOrderResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='ED520610-6231-5D80-BADD-A8CDC7BBC809'),
  success?: boolean(name='Success', example='true'),
}

model DisposeServiceWorkOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisposeServiceWorkOrderResponseBody(name='body'),
}

/**
 * @summary 处理服务工单
 *
 * @param request DisposeServiceWorkOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisposeServiceWorkOrderResponse
 */
async function disposeServiceWorkOrderWithOptions(request: DisposeServiceWorkOrderRequest, runtime: Util.RuntimeOptions): DisposeServiceWorkOrderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attachmentName)) {
    body['AttachmentName'] = request.attachmentName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.forwardOwnerId)) {
    body['ForwardOwnerId'] = request.forwardOwnerId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.isAttachment)) {
    body['IsAttachment'] = request.isAttachment;
  }
  if (!Util.isUnset(request.isWorkOrderNotify)) {
    body['IsWorkOrderNotify'] = request.isWorkOrderNotify;
  }
  if (!Util.isUnset(request.notifyId)) {
    body['NotifyId'] = request.notifyId;
  }
  if (!Util.isUnset(request.operateRemark)) {
    body['OperateRemark'] = request.operateRemark;
  }
  if (!Util.isUnset(request.operateType)) {
    body['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.upgradeOwnerId)) {
    body['UpgradeOwnerId'] = request.upgradeOwnerId;
  }
  if (!Util.isUnset(request.workOrderDetail)) {
    body['WorkOrderDetail'] = request.workOrderDetail;
  }
  if (!Util.isUnset(request.workOrderName)) {
    body['WorkOrderName'] = request.workOrderName;
  }
  if (!Util.isUnset(request.workOrderStatus)) {
    body['WorkOrderStatus'] = request.workOrderStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisposeServiceWorkOrder',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处理服务工单
 *
 * @param request DisposeServiceWorkOrderRequest
 * @return DisposeServiceWorkOrderResponse
 */
async function disposeServiceWorkOrder(request: DisposeServiceWorkOrderRequest): DisposeServiceWorkOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return disposeServiceWorkOrderWithOptions(request, runtime);
}

model DisposeWorkTaskRequest {
  operator?: string(name='Operator', description='This parameter is required.', example='WB01089929'),
  optRemark?: string(name='OptRemark', description='This parameter is required.'),
  status?: int32(name='Status', description='This parameter is required.', example='8'),
  taskIds?: string(name='TaskIds', description='This parameter is required.', example='10310'),
}

model DisposeWorkTaskResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='86786E4C-6416-55CF-9AB6-5E275B68801D'),
  success?: boolean(name='Success', example='true'),
}

model DisposeWorkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisposeWorkTaskResponseBody(name='body'),
}

/**
 * @summary 处理告警工单
 *
 * @param request DisposeWorkTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisposeWorkTaskResponse
 */
async function disposeWorkTaskWithOptions(request: DisposeWorkTaskRequest, runtime: Util.RuntimeOptions): DisposeWorkTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.optRemark)) {
    body['OptRemark'] = request.optRemark;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskIds)) {
    body['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisposeWorkTask',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处理告警工单
 *
 * @param request DisposeWorkTaskRequest
 * @return DisposeWorkTaskResponse
 */
async function disposeWorkTask(request: DisposeWorkTaskRequest): DisposeWorkTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return disposeWorkTaskWithOptions(request, runtime);
}

model GetAttackedAssetDealRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732268720000'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1732268720000'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetAttackedAssetDealResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    ecsTrendList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='2'),
        findCount?: long(name='FindCount'),
      }
    ](name='EcsTrendList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='1E74F11C-B4A8-5774-962C-02003BA8504E'),
  success?: boolean(name='Success', example='true'),
}

model GetAttackedAssetDealResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAttackedAssetDealResponseBody(name='body'),
}

/**
 * @summary 被攻击资产收敛趋势
 *
 * @param request GetAttackedAssetDealRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAttackedAssetDealResponse
 */
async function getAttackedAssetDealWithOptions(request: GetAttackedAssetDealRequest, runtime: Util.RuntimeOptions): GetAttackedAssetDealResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAttackedAssetDeal',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 被攻击资产收敛趋势
 *
 * @param request GetAttackedAssetDealRequest
 * @return GetAttackedAssetDealResponse
 */
async function getAttackedAssetDeal(request: GetAttackedAssetDealRequest): GetAttackedAssetDealResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAttackedAssetDealWithOptions(request, runtime);
}

model GetBaselineSummaryRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732156885986'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1729478485000'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetBaselineSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    trendDTOList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='10'),
        findCount?: long(name='FindCount', example='12'),
      }
    ](name='TrendDTOList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='67D61738-5E38-5164-947A-34E3850D493A'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineSummaryResponseBody(name='body'),
}

/**
 * @summary 合规风险收敛趋势
 *
 * @param request GetBaselineSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBaselineSummaryResponse
 */
async function getBaselineSummaryWithOptions(request: GetBaselineSummaryRequest, runtime: Util.RuntimeOptions): GetBaselineSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合规风险收敛趋势
 *
 * @param request GetBaselineSummaryRequest
 * @return GetBaselineSummaryResponse
 */
async function getBaselineSummary(request: GetBaselineSummaryRequest): GetBaselineSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineSummaryWithOptions(request, runtime);
}

model GetDetailByIdRequest {
  id?: long(name='Id', description='This parameter is required.', example='22'),
}

model GetDetailByIdResponseBody = {
  code?: string(name='Code', example='404'),
  data?: {
    vulDetails?: [ 
      {
        cveId?: string(name='CveId', example='CVE-2022-21291'),
        cvssScore?: string(name='CvssScore', example='10.0'),
        fixSuggestion?: string(name='FixSuggestion', example='https://avd.aliyun.com/detail/CVE-2022-21291'),
        title?: string(name='Title', example='Chanjet T-Plus SetupAccount/Upload. Aspx file upload vulnerability(CNVD-2022-60632)'),
      }
    ](name='VulDetails'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='DAB46EC5-3746-59C4-B6D2-469F442EC73F'),
  success?: boolean(name='Success', example='true'),
}

model GetDetailByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetailByIdResponseBody(name='body'),
}

/**
 * @summary 查询风险详情
 *
 * @param request GetDetailByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDetailByIdResponse
 */
async function getDetailByIdWithOptions(request: GetDetailByIdRequest, runtime: Util.RuntimeOptions): GetDetailByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDetailById',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询风险详情
 *
 * @param request GetDetailByIdRequest
 * @return GetDetailByIdResponse
 */
async function getDetailById(request: GetDetailByIdRequest): GetDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetailByIdWithOptions(request, runtime);
}

model GetDocumentDownloadUrlRequest {
  id?: long(name='Id', description='This parameter is required.', example='175815'),
}

model GetDocumentDownloadUrlResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='https://oos-cn.ctyunapi.cn/example-bucket/test/1.jpg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='C7BE80B4-7692-54FA-AB22-2A7DF08C4754'),
  success?: boolean(name='Success', example='true'),
}

model GetDocumentDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentDownloadUrlResponseBody(name='body'),
}

/**
 * @summary 服务报告单个下载
 *
 * @param request GetDocumentDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentDownloadUrlResponse
 */
async function getDocumentDownloadUrlWithOptions(request: GetDocumentDownloadUrlRequest, runtime: Util.RuntimeOptions): GetDocumentDownloadUrlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDocumentDownloadUrl',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务报告单个下载
 *
 * @param request GetDocumentDownloadUrlRequest
 * @return GetDocumentDownloadUrlResponse
 */
async function getDocumentDownloadUrl(request: GetDocumentDownloadUrlRequest): GetDocumentDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDocumentDownloadUrlWithOptions(request, runtime);
}

model GetDocumentPageRequest {
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  deliveredBy?: string(name='DeliveredBy'),
  documentName?: string(name='DocumentName'),
  documentType?: string(name='DocumentType', example='0'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='20'),
  reportType?: string(name='ReportType', description='This parameter is required.', example='1'),
}

model GetDocumentPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      deliveredBy?: string(name='DeliveredBy'),
      documentName?: string(name='DocumentName'),
      documentType?: string(name='DocumentType', example='3'),
      id?: long(name='Id', example='346409'),
      uploadTime?: string(name='UploadTime', example='2023-03-21 17:26:34'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='3149'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='04DAD7B4-E1DA-5C2C-8E5C-A1EDC880CF60'),
  success?: boolean(name='Success', example='true'),
}

model GetDocumentPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentPageResponseBody(name='body'),
}

/**
 * @summary 服务报告查询
 *
 * @param request GetDocumentPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentPageResponse
 */
async function getDocumentPageWithOptions(request: GetDocumentPageRequest, runtime: Util.RuntimeOptions): GetDocumentPageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deliveredBy)) {
    body['DeliveredBy'] = request.deliveredBy;
  }
  if (!Util.isUnset(request.documentName)) {
    body['DocumentName'] = request.documentName;
  }
  if (!Util.isUnset(request.documentType)) {
    body['DocumentType'] = request.documentType;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reportType)) {
    body['ReportType'] = request.reportType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDocumentPage',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务报告查询
 *
 * @param request GetDocumentPageRequest
 * @return GetDocumentPageResponse
 */
async function getDocumentPage(request: GetDocumentPageRequest): GetDocumentPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDocumentPageWithOptions(request, runtime);
}

model GetDocumentSummaryRequest {
  reportType?: string(name='ReportType', example='1'),
}

model GetDocumentSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    documentCount?: long(name='DocumentCount', example='10'),
    frequency?: long(name='Frequency', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='7903F2DE-D9EE-5D16-8A08-E9223E54B281'),
  success?: boolean(name='Success', example='True'),
}

model GetDocumentSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentSummaryResponseBody(name='body'),
}

/**
 * @summary 服务报告首页统计项获取
 *
 * @param request GetDocumentSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDocumentSummaryResponse
 */
async function getDocumentSummaryWithOptions(request: GetDocumentSummaryRequest, runtime: Util.RuntimeOptions): GetDocumentSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.reportType)) {
    body['ReportType'] = request.reportType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDocumentSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务报告首页统计项获取
 *
 * @param request GetDocumentSummaryRequest
 * @return GetDocumentSummaryResponse
 */
async function getDocumentSummary(request: GetDocumentSummaryRequest): GetDocumentSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDocumentSummaryWithOptions(request, runtime);
}

model GetRecentDocumentRequest {
  dateType?: string(name='DateType', description='This parameter is required.'),
  endDate?: long(name='EndDate', description='This parameter is required.'),
  startDate?: long(name='StartDate', description='This parameter is required.'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetRecentDocumentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      id?: long(name='Id', example='360491'),
      name?: string(name='Name'),
      uploadTime?: string(name='UploadTime', example='2023-03-20 14:30:38'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='4916FA8D-F294-518D-B373-8B59D63CAB19'),
  success?: boolean(name='Success', example='true'),
}

model GetRecentDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecentDocumentResponseBody(name='body'),
}

/**
 * @summary 得到最近上传的服务报告
 *
 * @param request GetRecentDocumentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRecentDocumentResponse
 */
async function getRecentDocumentWithOptions(request: GetRecentDocumentRequest, runtime: Util.RuntimeOptions): GetRecentDocumentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRecentDocument',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 得到最近上传的服务报告
 *
 * @param request GetRecentDocumentRequest
 * @return GetRecentDocumentResponse
 */
async function getRecentDocument(request: GetRecentDocumentRequest): GetRecentDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecentDocumentWithOptions(request, runtime);
}

model GetSafetyCoverRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732268720000'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1732255620000'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetSafetyCoverResponseBody = {
  code?: string(name='Code', example='404'),
  data?: {
    cfwProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='CfwProtection'),
    ecsProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='EcsProtection'),
    wafProtection?: {
      noProtectionCount?: long(name='NoProtectionCount', example='5'),
      protectionCount?: long(name='ProtectionCount', example='5'),
      protectionGrowthRate?: string(name='ProtectionGrowthRate', example='35.00'),
      protectionRate?: string(name='ProtectionRate', example='50.00'),
      totalCount?: long(name='TotalCount', example='10'),
    }(name='WafProtection'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='564f8bb9-df3c-42a0-877a-b35d48f66603'),
  success?: boolean(name='Success', example='True'),
}

model GetSafetyCoverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSafetyCoverResponseBody(name='body'),
}

/**
 * @summary 得到安全防护覆盖度
 *
 * @param request GetSafetyCoverRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSafetyCoverResponse
 */
async function getSafetyCoverWithOptions(request: GetSafetyCoverRequest, runtime: Util.RuntimeOptions): GetSafetyCoverResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSafetyCover',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 得到安全防护覆盖度
 *
 * @param request GetSafetyCoverRequest
 * @return GetSafetyCoverResponse
 */
async function getSafetyCover(request: GetSafetyCoverRequest): GetSafetyCoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSafetyCoverWithOptions(request, runtime);
}

model GetSuspEventPageRequest {
  alarmEndTime?: long(name='AlarmEndTime', example='1732515522000'),
  alarmStartTime?: long(name='AlarmStartTime', example='1722515522000'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  source?: string(name='Source', example='SUSP_EVENT'),
  status?: int32(name='Status', example='1'),
}

model GetSuspEventPageResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      alarmEventType?: string(name='AlarmEventType'),
      alarmId?: long(name='AlarmId', example='5b1eeebe4f22daa2b177298234214fa3'),
      alarmName?: string(name='AlarmName'),
      alarmSource?: string(name='AlarmSource', example='SUSP_EVENT'),
      alarmTime?: string(name='AlarmTime', example='1722515522000'),
      analysisResult?: string(name='AnalysisResult'),
      dealTime?: string(name='DealTime', example='1732515522000'),
      eventLevel?: string(name='EventLevel', example='suspicious'),
      id?: long(name='Id', example='9947'),
      instanceName?: string(name='InstanceName', example='shells-azhou'),
      internetIp?: string(name='InternetIp', example='47.99.188.31'),
      intranetIp?: string(name='IntranetIp', example='172.16.109.130'),
      occurrenceTime?: string(name='OccurrenceTime'),
      ownerId?: string(name='OwnerId'),
      remark?: string(name='Remark'),
      status?: string(name='Status'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='AFA6F7B7-7C4B-58BB-B8FB-E0FFA4483561'),
  success?: boolean(name='Success', example='true'),
}

model GetSuspEventPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspEventPageResponseBody(name='body'),
}

/**
 * @summary 告警处置查询
 *
 * @param request GetSuspEventPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSuspEventPageResponse
 */
async function getSuspEventPageWithOptions(request: GetSuspEventPageRequest, runtime: Util.RuntimeOptions): GetSuspEventPageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmEndTime)) {
    body['AlarmEndTime'] = request.alarmEndTime;
  }
  if (!Util.isUnset(request.alarmStartTime)) {
    body['AlarmStartTime'] = request.alarmStartTime;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuspEventPage',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 告警处置查询
 *
 * @param request GetSuspEventPageRequest
 * @return GetSuspEventPageResponse
 */
async function getSuspEventPage(request: GetSuspEventPageRequest): GetSuspEventPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspEventPageWithOptions(request, runtime);
}

model GetSuspEventSummaryRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732156885986'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1729478485000'),
  suspEventSource?: string(name='SuspEventSource', example='SUSP_EVENT'),
}

model GetSuspEventSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    networkAttackTrendDTO?: {
      trendList?: [ 
        {
          date?: string(name='Date'),
          ddosCount?: long(name='DdosCount', example='10'),
          eipCount?: long(name='EipCount', example='10'),
          wafCount?: long(name='WafCount', example='10'),
        }
      ](name='TrendList'),
    }(name='NetworkAttackTrendDTO'),
    suspEventDealSummaryDTO?: {
      completedCount?: long(name='CompletedCount', example='20'),
      handingCount?: long(name='HandingCount', example='5'),
      handingRate?: string(name='HandingRate', example='90'),
      totalCount?: long(name='TotalCount', example='35'),
      totalGrowthRate?: string(name='TotalGrowthRate', example='10'),
      waitHandleCount?: long(name='WaitHandleCount', example='10'),
    }(name='SuspEventDealSummaryDTO'),
    suspEventTopDTO?: {
      suspEventList?: [ 
        {
          eventName?: string(name='EventName'),
          taskCount?: long(name='TaskCount', example='7'),
        }
      ](name='SuspEventList'),
    }(name='SuspEventTopDTO'),
    suspEventTrendDTO?: {
      trendList?: [ 
        {
          date?: string(name='Date'),
          dealCount?: long(name='DealCount', example='10'),
          findCount?: long(name='FindCount', example='15'),
        }
      ](name='TrendList'),
    }(name='SuspEventTrendDTO'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='9B2DAE9B-B901-5818-AFEF-E5637D938280'),
  success?: boolean(name='Success', example='true'),
}

model GetSuspEventSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspEventSummaryResponseBody(name='body'),
}

/**
 * @summary 得到告警的统计项
 *
 * @param request GetSuspEventSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSuspEventSummaryResponse
 */
async function getSuspEventSummaryWithOptions(request: GetSuspEventSummaryRequest, runtime: Util.RuntimeOptions): GetSuspEventSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuspEventSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 得到告警的统计项
 *
 * @param request GetSuspEventSummaryRequest
 * @return GetSuspEventSummaryResponse
 */
async function getSuspEventSummary(request: GetSuspEventSummaryRequest): GetSuspEventSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspEventSummaryWithOptions(request, runtime);
}

model GetSuspPageSummaryResponseBody = {
  code?: string(name='Code'),
  data?: {
    completedCount?: long(name='CompletedCount'),
    handingCount?: long(name='HandingCount'),
    highCount?: long(name='HighCount'),
    lowCount?: long(name='LowCount'),
    mediumCount?: long(name='MediumCount'),
    totalCount?: long(name='TotalCount'),
    waitHandleCount?: long(name='WaitHandleCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request

This parameter is required.'),
  success?: boolean(name='Success'),
}

model GetSuspPageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuspPageSummaryResponseBody(name='body'),
}

/**
 * @summary 告警页统计
 *
 * @param request GetSuspPageSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSuspPageSummaryResponse
 */
async function getSuspPageSummaryWithOptions(runtime: Util.RuntimeOptions): GetSuspPageSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetSuspPageSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 告警页统计
 *
 * @return GetSuspPageSummaryResponse
 */
async function getSuspPageSummary(): GetSuspPageSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspPageSummaryWithOptions(runtime);
}

model GetUserStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    customerType?: string(name='CustomerType', example='official'),
    endDate?: string(name='EndDate', example='2023-09-28 00:00:00'),
    instanceId?: string(name='InstanceId', example='726cec3c-4887-4354-8c21-c0ad12e10fc2'),
    startDate?: string(name='StartDate', example='2023-09-20 00:00:00'),
    status?: string(name='Status', example='FirstLogin'),
    version?: string(name='Version', example='mdrjichu'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='D8DBD769-613E-5E6B-A9FD-B622375B152D'),
  success?: boolean(name='Success', example='true'),
}

model GetUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserStatusResponseBody(name='body'),
}

/**
 * @summary 查询用户开通状态
 *
 * @param request GetUserStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserStatusResponse
 */
async function getUserStatusWithOptions(runtime: Util.RuntimeOptions): GetUserStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetUserStatus',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户开通状态
 *
 * @return GetUserStatusResponse
 */
async function getUserStatus(): GetUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserStatusWithOptions(runtime);
}

model GetVulItemPageRequest {
  aliasName?: string(name='AliasName', example='RHSA-2018:3665-Important: NetworkManager security update'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.', example='1'),
  dealed?: string(name='Dealed', example='n'),
  level?: string(name='Level', example='later'),
  name?: string(name='Name', example='oval:com.redhat.rhsa:def:20183665'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  scanType?: string(name='ScanType', example='sca'),
}

model GetVulItemPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount', example='74'),
      customerId?: string(name='CustomerId', example='1940494487193744'),
      cveUrlPrefix?: string(name='CveUrlPrefix', example='https://avd.aliyun.com/detail/'),
      dealed?: string(name='Dealed', example='y'),
      findTime?: string(name='FindTime', example='2023-04-23 14:47:34'),
      handledCount?: int32(name='HandledCount', example='20'),
      id?: long(name='Id', example='353845'),
      laterCount?: int32(name='LaterCount', example='10'),
      level?: string(name='Level', example='later'),
      name?: string(name='Name', example='oval:com.redhat.rhsa:def:20205002'),
      nntfCount?: int32(name='NntfCount', example='8'),
      related?: string(name='Related', example='CVE-2019-20907'),
      relatedCveCount?: int32(name='RelatedCveCount', example='20'),
      scanType?: string(name='ScanType', example='sca'),
      tags?: string(name='Tags', example='Elevation of Privilege'),
      totalFixCount?: long(name='TotalFixCount', example='50'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='163'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='02F8BBF3-2D61-5982-8911-EEB387BE3AF8'),
  success?: boolean(name='Success', example='true'),
}

model GetVulItemPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulItemPageResponseBody(name='body'),
}

/**
 * @summary 风险查询
 *
 * @param request GetVulItemPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVulItemPageResponse
 */
async function getVulItemPageWithOptions(request: GetVulItemPageRequest, runtime: Util.RuntimeOptions): GetVulItemPageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliasName)) {
    body['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    body['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanType)) {
    body['ScanType'] = request.scanType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVulItemPage',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 风险查询
 *
 * @param request GetVulItemPageRequest
 * @return GetVulItemPageResponse
 */
async function getVulItemPage(request: GetVulItemPageRequest): GetVulItemPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulItemPageWithOptions(request, runtime);
}

model GetVulPageSummaryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    completedCount?: long(name='CompletedCount', example='1990'),
    handingCount?: long(name='HandingCount', example='6'),
    highCount?: long(name='HighCount', example='500'),
    lowCount?: long(name='LowCount', example='1000'),
    mediumCount?: long(name='MediumCount', example='500'),
    totalCount?: long(name='TotalCount', example='2000'),
    waitHandleCount?: long(name='WaitHandleCount', example='4'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='A3A575C8-80F9-5F04-AA24-CCAC246884A3'),
  success?: boolean(name='Success', example='true'),
}

model GetVulPageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulPageSummaryResponseBody(name='body'),
}

/**
 * @summary 风险页统计
 *
 * @param request GetVulPageSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVulPageSummaryResponse
 */
async function getVulPageSummaryWithOptions(runtime: Util.RuntimeOptions): GetVulPageSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetVulPageSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 风险页统计
 *
 * @return GetVulPageSummaryResponse
 */
async function getVulPageSummary(): GetVulPageSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulPageSummaryWithOptions(runtime);
}

model GetVulSummaryRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732156885986'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1729478485000'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetVulSummaryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    completedCount?: long(name='CompletedCount', example='10'),
    dealRate?: string(name='DealRate', example='50'),
    trendList?: [ 
      {
        date?: string(name='Date'),
        dealCount?: long(name='DealCount', example='10'),
        findCount?: long(name='FindCount', example='15'),
      }
    ](name='TrendList'),
    waitHandleCount?: long(name='WaitHandleCount', example='5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='system error'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='EF801DD1-D934-51B3-92D4-776CE17B184F'),
  success?: boolean(name='Success', example='true'),
}

model GetVulSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVulSummaryResponseBody(name='body'),
}

/**
 * @summary 得到风险的统计项
 *
 * @param request GetVulSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVulSummaryResponse
 */
async function getVulSummaryWithOptions(request: GetVulSummaryRequest, runtime: Util.RuntimeOptions): GetVulSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVulSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 得到风险的统计项
 *
 * @param request GetVulSummaryRequest
 * @return GetVulSummaryResponse
 */
async function getVulSummary(request: GetVulSummaryRequest): GetVulSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulSummaryWithOptions(request, runtime);
}

model GetWorkTaskSummaryRequest {
  dateType?: string(name='DateType', description='This parameter is required.', example='month'),
  endDate?: long(name='EndDate', description='This parameter is required.', example='1732156885986'),
  startDate?: long(name='StartDate', description='This parameter is required.', example='1729478485000'),
  suspEventSource?: string(name='SuspEventSource'),
}

model GetWorkTaskSummaryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    dealAverageDuration?: long(name='DealAverageDuration', example='60'),
    dealAverageDurationGrowthRate?: string(name='DealAverageDurationGrowthRate', example='20'),
    dealWorkTaskCount?: long(name='DealWorkTaskCount', example='100'),
    dealWorkTaskCountRate?: string(name='DealWorkTaskCountRate', example='20'),
    workTaskCount?: long(name='WorkTaskCount', example='10'),
    workTaskDealRate?: string(name='WorkTaskDealRate', example='90'),
    workTaskDealRateGrowthRate?: string(name='WorkTaskDealRateGrowthRate', example='20'),
    workTaskGrowthRate?: string(name='WorkTaskGrowthRate', example='20'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='EF801DD1-D934-51B3-92D4-776CE17B184F'),
  success?: boolean(name='Success', example='true'),
}

model GetWorkTaskSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkTaskSummaryResponseBody(name='body'),
}

/**
 * @summary 得到首行工单的统计项
 *
 * @param request GetWorkTaskSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkTaskSummaryResponse
 */
async function getWorkTaskSummaryWithOptions(request: GetWorkTaskSummaryRequest, runtime: Util.RuntimeOptions): GetWorkTaskSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dateType)) {
    body['DateType'] = request.dateType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.suspEventSource)) {
    body['SuspEventSource'] = request.suspEventSource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkTaskSummary',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 得到首行工单的统计项
 *
 * @param request GetWorkTaskSummaryRequest
 * @return GetWorkTaskSummaryResponse
 */
async function getWorkTaskSummary(request: GetWorkTaskSummaryRequest): GetWorkTaskSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkTaskSummaryWithOptions(request, runtime);
}

model PageServiceCustomerRequest {
  authStatus?: int32(name='AuthStatus'),
  cmAuthStatus?: int32(name='CmAuthStatus'),
  currentPage?: int32(name='CurrentPage', description='This parameter is required.'),
  endTime?: long(name='EndTime'),
  monitorAuthStatus?: int32(name='MonitorAuthStatus'),
  pageSize?: int32(name='PageSize', description='This parameter is required.'),
  startTime?: long(name='StartTime'),
}

model PageServiceCustomerResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aliuid?: string(name='Aliuid'),
      authStatus?: int32(name='AuthStatus'),
      cmAuthStatus?: int32(name='CmAuthStatus'),
      endTime?: long(name='EndTime'),
      level?: string(name='Level'),
      monitorAuthStatus?: int32(name='MonitorAuthStatus'),
      name?: string(name='Name'),
      ownId?: string(name='OwnId'),
      startTime?: long(name='StartTime'),
      userId?: string(name='UserId'),
      version?: string(name='Version'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', description='Id of the request

This parameter is required.'),
  success?: boolean(name='Success'),
}

model PageServiceCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageServiceCustomerResponseBody(name='body'),
}

/**
 * @summary 服务客户信息查询
 *
 * @param request PageServiceCustomerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PageServiceCustomerResponse
 */
async function pageServiceCustomerWithOptions(request: PageServiceCustomerRequest, runtime: Util.RuntimeOptions): PageServiceCustomerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.authStatus)) {
    body['AuthStatus'] = request.authStatus;
  }
  if (!Util.isUnset(request.cmAuthStatus)) {
    body['CmAuthStatus'] = request.cmAuthStatus;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.monitorAuthStatus)) {
    body['MonitorAuthStatus'] = request.monitorAuthStatus;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageServiceCustomer',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务客户信息查询
 *
 * @param request PageServiceCustomerRequest
 * @return PageServiceCustomerResponse
 */
async function pageServiceCustomer(request: PageServiceCustomerRequest): PageServiceCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageServiceCustomerWithOptions(request, runtime);
}

model SendCustomEventRequest {
  customerId?: string(name='CustomerId', description='This parameter is required.', example='1214484929940219'),
  dataSource?: string(name='DataSource', example='aegis_suspicious_event'),
  eventDescription?: string(name='EventDescription'),
  eventDetails?: string(name='EventDetails'),
  eventName?: string(name='EventName', description='This parameter is required.'),
  eventType?: string(name='EventType', description='This parameter is required.', example='SUSP_CUSTOM_CFW'),
  findTime?: long(name='FindTime', description='This parameter is required.', example='2023-04-23 14:47:34'),
  instanceId?: string(name='InstanceId', example='i-uf60h3ns25bzq9eyf8ps'),
  instanceName?: string(name='InstanceName'),
  isSend?: string(name='IsSend', description='This parameter is required.', example='0'),
  level?: string(name='Level', description='This parameter is required.', example='serious'),
  occurrenceTime?: long(name='OccurrenceTime', example='1724956996000'),
  ownerId?: string(name='OwnerId'),
  product?: string(name='Product', example='CloudSecCenter'),
  uniqueId?: string(name='UniqueId', description='This parameter is required.', example='68888f02-98f2-492b-a2b2-5b13295755b7'),
  uuid?: string(name='Uuid', description='UUID。', example='93B6CDAB-7D2E-33D2-9EBA-25D561A2E95F'),
}

model SendCustomEventResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    customerId?: string(name='CustomerId', example='1601097845544644'),
    customerName?: string(name='CustomerName'),
    eventId?: string(name='EventId', example='c0dc71d1-8a1d-4043-9767-f6c420e34901-81bd'),
    eventType?: string(name='EventType', example='SUSP_CUSTOM_WAF'),
    id?: long(name='Id', example='1914348'),
    ownerId?: string(name='OwnerId', example='352675'),
    ownerName?: string(name='OwnerName'),
    workTaskName?: string(name='WorkTaskName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='This parameter is required.', example='606EB377-155D-5AEB-AC4F-F013444A4C45'),
  success?: boolean(name='Success', example='true'),
}

model SendCustomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendCustomEventResponseBody(name='body'),
}

/**
 * @summary 发送自定义告警事件
 *
 * @param request SendCustomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendCustomEventResponse
 */
async function sendCustomEventWithOptions(request: SendCustomEventRequest, runtime: Util.RuntimeOptions): SendCustomEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customerId)) {
    body['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.dataSource)) {
    body['DataSource'] = request.dataSource;
  }
  if (!Util.isUnset(request.eventDescription)) {
    body['EventDescription'] = request.eventDescription;
  }
  if (!Util.isUnset(request.eventDetails)) {
    body['EventDetails'] = request.eventDetails;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.eventType)) {
    body['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.findTime)) {
    body['FindTime'] = request.findTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.isSend)) {
    body['IsSend'] = request.isSend;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.occurrenceTime)) {
    body['OccurrenceTime'] = request.occurrenceTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    body['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    body['Product'] = request.product;
  }
  if (!Util.isUnset(request.uniqueId)) {
    body['UniqueId'] = request.uniqueId;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendCustomEvent',
    version = '2016-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送自定义告警事件
 *
 * @param request SendCustomEventRequest
 * @return SendCustomEventResponse
 */
async function sendCustomEvent(request: SendCustomEventRequest): SendCustomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendCustomEventWithOptions(request, runtime);
}

