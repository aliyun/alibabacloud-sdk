/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'yunjian';
  @version = '2021-12-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateDemandPlanRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='262940', position='Header'),
  accountId: string(name='accountId', description='This parameter is required.', example='1065737167271819', position='Body'),
  demandType?: string(name='demandType', position='Body'),
  description?: string(name='description', position='Body'),
  name: string(name='name', description='This parameter is required.', position='Body'),
  period: string(name='period', description='This parameter is required.', example='FY2022', position='Body'),
  source?: string(name='source', position='Body'),
  targetCid?: long(name='targetCid', position='Body'),
  type: string(name='type', description='This parameter is required.', example='URGENT', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='262940', position='Query'),
}

model CreateDemandPlanResponseBody = {
  code?: long(name='code', description='code', example='0'),
  data?: long(name='data', example='111223'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', description='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='1e2b798516402440016572132e1459'),
}

model CreateDemandPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDemandPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDemandPlan  CreateDemandPlanRequest
  * @return CreateDemandPlanResponse
 */
async function createDemandPlan(request: CreateDemandPlanRequest): CreateDemandPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDemandPlan', 'POST', '/api/demand/urgent/saveUrgentDemandPlanItem', 'json', false, 'json', request);
}

model CreateDemandPlanV2Request {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', position='Header'),
  accountId: string(name='accountId', description='This parameter is required.', position='Body'),
  demandType?: string(name='demandType', position='Body'),
  description?: string(name='description', position='Body'),
  name: string(name='name', description='This parameter is required.', position='Body'),
  productType?: string(name='productType', position='Body'),
  targetCid?: long(name='targetCid', position='Body'),
  type: string(name='type', description='This parameter is required.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', position='Query'),
}

model CreateDemandPlanV2ResponseBody = {
  code?: long(name='code'),
  data?: long(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CreateDemandPlanV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDemandPlanV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDemandPlanV2  CreateDemandPlanV2Request
  * @return CreateDemandPlanV2Response
 */
async function createDemandPlanV2(request: CreateDemandPlanV2Request): CreateDemandPlanV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDemandPlanV2', 'POST', '/api/demand/urgent/saveDemandPlan', 'json', false, 'json', request);
}

model DeleteUrgentDemandItemRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='111222', position='Header'),
  id: long(name='id', description='This parameter is required.', example='111222', position='Query'),
  modifier: string(name='modifier', description='This parameter is required.', example='111222', position='Query'),
}

model DeleteUrgentDemandItemResponseBody = {
  code?: long(name='code', example='0'),
  data?: long(name='data', example='1'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='212cf01016405759151137225e83cd'),
}

model DeleteUrgentDemandItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUrgentDemandItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUrgentDemandItem  DeleteUrgentDemandItemRequest
  * @return DeleteUrgentDemandItemResponse
 */
async function deleteUrgentDemandItem(request: DeleteUrgentDemandItemRequest): DeleteUrgentDemandItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUrgentDemandItem', 'POST', '/api/demand/urgent/deleteUrgentDemandItem', 'json', false, 'json', request);
}

model DeleteUrgentDemandPlanRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='111222', position='Header'),
  id: long(name='id', description='This parameter is required.', example='111111', position='Query'),
  modifier: string(name='modifier', description='This parameter is required.', example='222111', position='Query'),
}

model DeleteUrgentDemandPlanResponseBody = {
  code?: long(name='code', example='0'),
  data?: long(name='data', example='1'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='212cf01016405759151137225e83cd'),
}

model DeleteUrgentDemandPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUrgentDemandPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUrgentDemandPlan  DeleteUrgentDemandPlanRequest
  * @return DeleteUrgentDemandPlanResponse
 */
async function deleteUrgentDemandPlan(request: DeleteUrgentDemandPlanRequest): DeleteUrgentDemandPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUrgentDemandPlan', 'POST', '/api/demand/urgent/deleteUrgentDemandPlan', 'json', false, 'json', request);
}

model DeliveryItemDetailSynRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', position='Header'),
  channel?: string(name='channel', position='Body'),
  deliveryItemDetailDTOS?: [ 
    {
      actualSupplyTime?: string(name='actualSupplyTime'),
      amount?: long(name='amount'),
      comment?: string(name='comment'),
      deliveredAmount?: long(name='deliveredAmount'),
      deliveryItemId?: string(name='deliveryItemId'),
      deliveryPlanId?: string(name='deliveryPlanId'),
      lastSupplyTime?: string(name='lastSupplyTime'),
      status?: string(name='status'),
      subDemandSupplyPerformerName?: string(name='subDemandSupplyPerformerName'),
      subDemandSupplyPerformerUid?: string(name='subDemandSupplyPerformerUid'),
      subDemandSupplyPmName?: string(name='subDemandSupplyPmName'),
      subDemandSupplyPmUid?: string(name='subDemandSupplyPmUid'),
      subOrderId?: long(name='subOrderId'),
      supplyStatus?: string(name='supplyStatus'),
      totalOrderId?: long(name='totalOrderId'),
    }
  ](name='deliveryItemDetailDTOS', position='Body'),
  deliveryItemId?: string(name='deliveryItemId', position='Body'),
  deliveryPlanId?: string(name='deliveryPlanId', position='Body'),
}

model DeliveryItemDetailSynResponseBody = {
  code?: long(name='code', example='0'),
  data?: boolean(name='data', example='true'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='212cf01016405759151137225e83cd'),
}

model DeliveryItemDetailSynResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeliveryItemDetailSynResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeliveryItemDetailSyn  DeliveryItemDetailSynRequest
  * @return DeliveryItemDetailSynResponse
 */
async function deliveryItemDetailSyn(request: DeliveryItemDetailSynRequest): DeliveryItemDetailSynResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeliveryItemDetailSyn', 'POST', '/api/supply/deliveryItemDataSync', 'json', false, 'json', request);
}

model GetUrgentDemandItemListRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='111222', position='Header'),
  commodityCode?: string(name='commodityCode', position='Body'),
  commodityTypeCode?: string(name='commodityTypeCode', example='ecs/yundisk', position='Body'),
  current?: long(name='current', example='1', position='Body'),
  planId?: long(name='planId', position='Body'),
  region?: string(name='region', position='Body'),
  size?: long(name='size', example='10', position='Body'),
  zone?: string(name='zone', position='Body'),
}

model GetUrgentDemandItemListResponseBody = {
  code?: long(name='code'),
  data?: {
    current?: long(name='current'),
    pages?: long(name='pages'),
    records?: [ 
      {
        zone?: string(name='Zone'),
        accountId?: string(name='accountId'),
        commodityCode?: string(name='commodityCode'),
        commodityNum?: long(name='commodityNum'),
        commodityTypeCode?: string(name='commodityTypeCode'),
        creator?: string(name='creator'),
        creatorName?: string(name='creatorName'),
        effectTime?: string(name='effectTime'),
        gmtModified?: string(name='gmtModified'),
        id?: long(name='id'),
        modifier?: string(name='modifier'),
        modifierName?: string(name='modifierName'),
        networkType?: string(name='networkType'),
        payDuration?: long(name='payDuration'),
        payDurationUnit?: string(name='payDurationUnit'),
        payType?: string(name='payType'),
        planId?: long(name='planId'),
        region?: string(name='region'),
        urgentDemandEbsRequest?: {
          commodityCode?: string(name='commodityCode', example='cloud_essd'),
          commodityNum?: long(name='commodityNum', example='1'),
          commodityTypeCode?: string(name='commodityTypeCode', example='yundisk'),
          dataDiskSize?: long(name='dataDiskSize', example='1'),
          itemId?: long(name='itemId', example='111222'),
          performanceLevel?: long(name='performanceLevel', example='1'),
        }(name='urgentDemandEbsRequest'),
        urgentDemandEcsRequest?: {
          commodityCode?: string(name='commodityCode'),
          commodityNum?: long(name='commodityNum'),
          commodityTypeCode?: string(name='commodityTypeCode'),
          itemId?: long(name='itemId'),
          vcpuCount?: long(name='vcpuCount'),
        }(name='urgentDemandEcsRequest'),
      }
    ](name='records'),
    size?: long(name='size'),
    total?: long(name='total'),
  }(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model GetUrgentDemandItemListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrgentDemandItemListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUrgentDemandItemList  GetUrgentDemandItemListRequest
  * @return GetUrgentDemandItemListResponse
 */
async function getUrgentDemandItemList(request: GetUrgentDemandItemListRequest): GetUrgentDemandItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUrgentDemandItemList', 'POST', '/api/demand/urgent/getUrgentDemandItemList', 'json', false, 'json', request);
}

model GetUrgentDemandPlanDetailRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='262940', position='Header'),
  planId: string(name='planId', description='This parameter is required.', example='111223', position='Body'),
}

model GetUrgentDemandPlanDetailResponseBody = {
  code?: long(name='code', description='code', example='0'),
  data?: {
    accountDept?: string(name='accountDept'),
    accountId?: string(name='accountId', example='1065737167271819'),
    accountName?: string(name='accountName', example='larus_prd'),
    approvalUrl?: string(name='approvalUrl', example='https://xxxxx'),
    bpmSubstate?: map[string]any(name='bpmSubstate', example='{}'),
    commodityTypeCodeList?: [ string ](name='commodityTypeCodeList'),
    creator?: string(name='creator', example='262940'),
    creatorName?: string(name='creatorName', example='xxx'),
    description?: string(name='description', example='xxx'),
    detailType?: string(name='detailType', example='URGENT'),
    gmtCreate?: string(name='gmtCreate', example='2021-12-17 16:53:21'),
    gmtModified?: string(name='gmtModified', example='2021-12-17 16:53:21'),
    modifier?: string(name='modifier', example='262940'),
    modifierName?: string(name='modifierName', example='xx'),
    planId?: long(name='planId', example='11223'),
    planName?: string(name='planName'),
    status?: long(name='status', example='220'),
    yunzhiProductName?: string(name='yunzhiProductName'),
  }(name='data', description='body'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', description='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='1e2b798516402440016572132e1459'),
}

model GetUrgentDemandPlanDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrgentDemandPlanDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUrgentDemandPlanDetail  GetUrgentDemandPlanDetailRequest
  * @return GetUrgentDemandPlanDetailResponse
 */
async function getUrgentDemandPlanDetail(request: GetUrgentDemandPlanDetailRequest): GetUrgentDemandPlanDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUrgentDemandPlanDetail', 'POST', '/api/demand/urgent/getUrgentDemandPlanDetail', 'json', false, 'json', request);
}

model GetUrgentDemandPlanListRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='111222', position='Header'),
  current: long(name='current', description='This parameter is required.', example='1', position='Body'),
  period: string(name='period', description='This parameter is required.', example='FY2022', position='Body'),
  planType: long(name='planType', description='This parameter is required.', example='0', position='Body'),
  size: long(name='size', description='This parameter is required.', example='10', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='111222', position='Body'),
}

model GetUrgentDemandPlanListResponseBody = {
  code?: long(name='code', example='0'),
  data?: {
    current?: long(name='current', example='1'),
    pages?: long(name='pages', example='2'),
    records?: [ 
      {
        accountId?: string(name='accountId', example='1705524002740212'),
        accountName?: string(name='accountName', example='xxxx'),
        accountType?: string(name='accountType', example='ALIYUN'),
        approvalUrl?: string(name='approvalUrl', example='https://xxx'),
        creator?: string(name='creator', example='1111'),
        creatorName?: string(name='creatorName', example='xxxx'),
        description?: string(name='description', example='xxxx'),
        gmtCreate?: string(name='gmtCreate', example='2021-12-20 10:29:50'),
        gmtModified?: string(name='gmtModified', example='2021-12-20 10:29:50'),
        modifier?: string(name='modifier', example='xxxx'),
        modifierName?: string(name='modifierName', example='xxxx'),
        planId?: long(name='planId'),
        planName?: string(name='planName'),
        status?: long(name='status'),
      }
    ](name='records'),
    size?: long(name='size', example='10'),
    total?: long(name='total', example='15'),
  }(name='data'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='2127968716405850615204514e9332'),
}

model GetUrgentDemandPlanListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUrgentDemandPlanListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUrgentDemandPlanList  GetUrgentDemandPlanListRequest
  * @return GetUrgentDemandPlanListResponse
 */
async function getUrgentDemandPlanList(request: GetUrgentDemandPlanListRequest): GetUrgentDemandPlanListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUrgentDemandPlanList', 'POST', '/api/demand/urgent/getUrgentDemandPlanList', 'json', false, 'json', request);
}

model PageDemandPlanWithDemandInfoRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', position='Header'),
  approvalStatus?: string(name='approvalStatus', position='Body'),
  createTimeEnd?: string(name='createTimeEnd', position='Body'),
  createTimeStart?: string(name='createTimeStart', position='Body'),
  creatorStaffId?: string(name='creatorStaffId', position='Body'),
  demandDeliveryStatus?: string(name='demandDeliveryStatus', position='Body'),
  demandId?: [ long ](name='demandId', position='Body'),
  demandPlanId?: [ long ](name='demandPlanId', position='Body'),
  demandPlanStatus?: string(name='demandPlanStatus', position='Body'),
  operator: string(name='operator', description='This parameter is required.', position='Body'),
  pageNum: int32(name='pageNum', description='This parameter is required.', position='Body'),
  pageSize: int32(name='pageSize', description='This parameter is required.', position='Body'),
  roCode?: string(name='roCode', position='Body'),
}

model PageDemandPlanWithDemandInfoResponseBody = {
  data?: {
    data?: [ 
      {
        accountId?: string(name='accountId'),
        accountName?: string(name='accountName'),
        approvalNodeStatus?: string(name='approvalNodeStatus'),
        approvalStatus?: string(name='approvalStatus'),
        creator?: string(name='creator'),
        deliveryPlanId?: string(name='deliveryPlanId'),
        deliveryStatus?: string(name='deliveryStatus'),
        demandDesc?: string(name='demandDesc'),
        demandId?: long(name='demandId'),
        demandName?: string(name='demandName'),
        demandPlanId?: double(name='demandPlanId'),
        gmtCreate?: string(name='gmtCreate'),
        gmtModified?: string(name='gmtModified'),
        modifier?: string(name='modifier'),
        requirementObjectCode?: string(name='requirementObjectCode'),
        uid?: long(name='uid'),
      }
    ](name='data'),
    pageNum?: int32(name='pageNum'),
    pageSize?: int32(name='pageSize'),
    total?: long(name='total'),
  }(name='data'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model PageDemandPlanWithDemandInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageDemandPlanWithDemandInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageDemandPlanWithDemandInfo  PageDemandPlanWithDemandInfoRequest
  * @return PageDemandPlanWithDemandInfoResponse
 */
async function pageDemandPlanWithDemandInfo(request: PageDemandPlanWithDemandInfoRequest): PageDemandPlanWithDemandInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PageDemandPlanWithDemandInfo', 'POST', '/api/demand/getDemandPlanList', 'json', false, 'json', request);
}

model PushResourcePlanRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', position='Header'),
  bufferCnt?: long(name='bufferCnt', position='Body'),
  demandCount?: long(name='demandCount', position='Body'),
  demandId?: string(name='demandId', position='Body'),
  methodList?: [ 
    {
      azone?: string(name='azone'),
      bufferCnt?: long(name='bufferCnt'),
      cluster?: string(name='cluster'),
      comment?: string(name='comment'),
      convertHostCnt?: long(name='convertHostCnt'),
      convertHostType?: string(name='convertHostType'),
      dataList?: [ 
        {
          classZone?: string(name='classZone'),
          convertHostType?: string(name='convertHostType'),
          logicZone?: string(name='logicZone'),
          netArch?: string(name='netArch'),
          nic?: string(name='nic'),
          product3?: string(name='product3'),
          safeZone?: string(name='safeZone'),
          scenario?: string(name='scenario'),
          supplyAmount?: long(name='supplyAmount'),
          supplyDate: string(name='supplyDate', description='This parameter is required.'),
          supplyType?: long(name='supplyType'),
          supplyVmAmount?: int32(name='supplyVmAmount'),
        }
      ](name='dataList'),
      denamdCount?: long(name='denamdCount'),
      gapCnt?: long(name='gapCnt'),
      promiseDate?: string(name='promiseDate'),
      region?: string(name='region'),
      resourceMethodId?: long(name='resourceMethodId'),
      roomCode?: string(name='roomCode'),
    }
  ](name='methodList', position='Body'),
  requestId?: string(name='requestId', position='Body'),
  requireCnt?: long(name='requireCnt', position='Body'),
  subDemandId?: string(name='subDemandId', position='Body'),
}

model PushResourcePlanResponseBody = {
  code?: long(name='code'),
  data?: boolean(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model PushResourcePlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushResourcePlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushResourcePlan  PushResourcePlanRequest
  * @return PushResourcePlanResponse
 */
async function pushResourcePlan(request: PushResourcePlanRequest): PushResourcePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushResourcePlan', 'POST', '/api/supply/resourcePlan/push', 'json', false, 'json', request);
}

model QueryDeliveredSupplyItemsRequest {
  accountId?: string(name='accountId', position='Query'),
  commodityTypeCode?: string(name='commodityTypeCode', position='Query'),
}

model QueryDeliveredSupplyItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      accountId?: string(name='accountId'),
      commodityTypeCode?: string(name='commodityTypeCode'),
      demandPlanId?: long(name='demandPlanId'),
      planTitle?: string(name='planTitle'),
      region?: string(name='region'),
      zone?: string(name='zone'),
      commodityCode?: string(name='commodityCode'),
      demandCount?: int32(name='demandCount'),
      deliveredAmount?: int32(name='deliveredAmount'),
      openCount?: int32(name='openCount'),
    }
  ](name='body'),
}

/**
  * @param request  the request parameters of QueryDeliveredSupplyItems  QueryDeliveredSupplyItemsRequest
  * @return QueryDeliveredSupplyItemsResponse
 */
async function queryDeliveredSupplyItems(request: QueryDeliveredSupplyItemsRequest): QueryDeliveredSupplyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDeliveredSupplyItems', 'GET', '/api/supply/queryDeliveredSupplyItems', 'array', false, 'json', request);
}

model QueryPeriodBudgetBillRequest {
  objectIds?: string(name='objectIds', position='Query'),
  objectType?: string(name='objectType', position='Query'),
  period?: string(name='period', position='Query'),
}

model QueryPeriodBudgetBillResponseBody = {
  periodBudgetBillDTOS?: [ 
    {
      bill?: double(name='bill'),
      budget?: double(name='budget'),
      lastYearBill?: double(name='lastYearBill'),
      month?: string(name='month'),
    }
  ](name='periodBudgetBillDTOS'),
}

model QueryPeriodBudgetBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPeriodBudgetBillResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPeriodBudgetBill  QueryPeriodBudgetBillRequest
  * @return QueryPeriodBudgetBillResponse
 */
async function queryPeriodBudgetBill(request: QueryPeriodBudgetBillRequest): QueryPeriodBudgetBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryPeriodBudgetBill', 'GET', '/api/annual/budget/queryPeriodBudgetBill', 'json', false, 'json', request);
}

model SaveUrgentDemandItemRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='111222', position='Header'),
  accountId?: string(name='accountId', example='12321312', position='Body'),
  creator?: string(name='creator', example='111222', position='Body'),
  effectTime?: string(name='effectTime', example='2021-12-27 00:00:00', position='Body'),
  modifier?: string(name='modifier', example='111222', position='Body'),
  networkType?: string(name='networkType', example='网络类型 vpc（私有网络）/classic（经典网络）', position='Body'),
  payDuration?: string(name='payDuration', example='10', position='Body'),
  payDurationUnit?: string(name='payDurationUnit', example='购买时长单位(month(月)，week(周)，day(天))', position='Body'),
  payType?: string(name='payType', example='付费类型 prepay(预付费)/postpay（后付费）', position='Body'),
  planId?: long(name='planId', example='111222', position='Body'),
  region?: string(name='region', example='cn-beijing', position='Body'),
  urgentDemandEbsRequest?: {
    commodityCode?: string(name='commodityCode', example='cloud_essd'),
    commodityNum?: long(name='commodityNum', example='1'),
    commodityTypeCode?: string(name='commodityTypeCode', example='yundisk'),
    itemId?: long(name='itemId', example='111222'),
    performanceLevel?: long(name='performanceLevel', example='1'),
  }(name='urgentDemandEbsRequest', position='Body'),
  urgentDemandEcsRequest?: {
    commodityCode?: string(name='commodityCode', example='ecs.sn2ne.6xlarge'),
    commodityNum?: long(name='commodityNum', example='2'),
    commodityTypeCode?: string(name='commodityTypeCode', example='ecs'),
    itemId?: long(name='itemId', example='111222'),
    vCpuCount?: long(name='vCpuCount', example='2'),
  }(name='urgentDemandEcsRequest', position='Body'),
  zone?: string(name='zone', example='cn-beijing-a', position='Body'),
}

model SaveUrgentDemandItemResponseBody = {
  code?: long(name='code', example='0'),
  data?: [ long ](name='data'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='2107d95616405752026995105e83b0'),
}

model SaveUrgentDemandItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveUrgentDemandItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveUrgentDemandItem  SaveUrgentDemandItemRequest
  * @return SaveUrgentDemandItemResponse
 */
async function saveUrgentDemandItem(request: SaveUrgentDemandItemRequest): SaveUrgentDemandItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveUrgentDemandItem', 'POST', '/api/demand/urgent/saveUrgentDemandItem', 'json', false, 'json', request);
}

model SubmitUrgentDemandPlanRequest {
  yunUserId: string(name='Yun-User-Id', description='This parameter is required.', example='262940', position='Header'),
  planId: string(name='planId', description='This parameter is required.', example='111223', position='Query'),
  userId: string(name='userId', description='This parameter is required.', example='262940', position='Query'),
}

model SubmitUrgentDemandPlanResponseBody = {
  code?: long(name='code', description='code', example='0'),
  data?: boolean(name='data', example='true'),
  message?: string(name='message', example='msg'),
  success?: boolean(name='success', description='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='1e2b798516402440016572132e1459'),
}

model SubmitUrgentDemandPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitUrgentDemandPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitUrgentDemandPlan  SubmitUrgentDemandPlanRequest
  * @return SubmitUrgentDemandPlanResponse
 */
async function submitUrgentDemandPlan(request: SubmitUrgentDemandPlanRequest): SubmitUrgentDemandPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitUrgentDemandPlan', 'POST', '/api/demand/urgent/submitUrgentDemandPlan', 'json', false, 'json', request);
}

model AcceptFulfillmentDecisionRequest {
  decisionConclusion?: string(name='DecisionConclusion', position='Body'),
  decisionType?: string(name='DecisionType', position='Body'),
  orderId?: string(name='OrderId', position='Body'),
}

model AcceptFulfillmentDecisionResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model AcceptFulfillmentDecisionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptFulfillmentDecisionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of acceptFulfillmentDecision  AcceptFulfillmentDecisionRequest
  * @return AcceptFulfillmentDecisionResponse
 */
async function acceptFulfillmentDecision(request: AcceptFulfillmentDecisionRequest): AcceptFulfillmentDecisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'acceptFulfillmentDecision', 'POST', '/acceptFulfillmentDecision', 'json', true, 'form', request);
}

