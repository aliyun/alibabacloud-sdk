/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'linkedmall.aliyuncs.com',
    cn-shanghai = 'linkedmall.aliyuncs.com',
    ap-northeast-1 = 'linkedmall.aliyuncs.com',
    ap-northeast-2-pop = 'linkedmall.aliyuncs.com',
    ap-south-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-2 = 'linkedmall.aliyuncs.com',
    ap-southeast-3 = 'linkedmall.aliyuncs.com',
    ap-southeast-5 = 'linkedmall.aliyuncs.com',
    cn-beijing = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-pop = 'linkedmall.aliyuncs.com',
    cn-beijing-gov-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkedmall.aliyuncs.com',
    cn-chengdu = 'linkedmall.aliyuncs.com',
    cn-edge-1 = 'linkedmall.aliyuncs.com',
    cn-fujian = 'linkedmall.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-finance = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkedmall.aliyuncs.com',
    cn-hongkong = 'linkedmall.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkedmall.aliyuncs.com',
    cn-huhehaote = 'linkedmall.aliyuncs.com',
    cn-north-2-gov-1 = 'linkedmall.aliyuncs.com',
    cn-qingdao = 'linkedmall.aliyuncs.com',
    cn-qingdao-nebula = 'linkedmall.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shanghai-inner = 'linkedmall.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen = 'linkedmall.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-inner = 'linkedmall.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkedmall.aliyuncs.com',
    cn-wuhan = 'linkedmall.aliyuncs.com',
    cn-yushanfang = 'linkedmall.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkedmall.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkedmall.aliyuncs.com',
    eu-central-1 = 'linkedmall.aliyuncs.com',
    eu-west-1 = 'linkedmall.aliyuncs.com',
    eu-west-1-oxs = 'linkedmall.aliyuncs.com',
    me-east-1 = 'linkedmall.aliyuncs.com',
    rus-west-1-pop = 'linkedmall.aliyuncs.com',
    us-east-1 = 'linkedmall.aliyuncs.com',
    us-west-1 = 'linkedmall.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('linkedmall', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApplyCreateDistributionOrderRequest {
  buyerId?: string(name='BuyerId'),
  deliveryAddress?: string(name='DeliveryAddress'),
  distributionOutTradeId?: string(name='DistributionOutTradeId'),
  distributionSupplierId?: string(name='DistributionSupplierId'),
  distributorId?: string(name='DistributorId'),
  extInfo?: string(name='ExtInfo'),
  itemInfoLists?: [ 
    {
      distributionMallId?: string(name='DistributionMallId'),
      lmItemId?: string(name='LmItemId'),
      quantity?: int32(name='Quantity'),
      skuId?: string(name='SkuId'),
    }
  ](name='ItemInfoLists'),
  tenantId?: string(name='TenantId'),
}

model ApplyCreateDistributionOrderShrinkRequest {
  buyerId?: string(name='BuyerId'),
  deliveryAddress?: string(name='DeliveryAddress'),
  distributionOutTradeId?: string(name='DistributionOutTradeId'),
  distributionSupplierId?: string(name='DistributionSupplierId'),
  distributorId?: string(name='DistributorId'),
  extInfo?: string(name='ExtInfo'),
  itemInfoListsShrink?: string(name='ItemInfoLists'),
  tenantId?: string(name='TenantId'),
}

model ApplyCreateDistributionOrderResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: string(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ApplyCreateDistributionOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCreateDistributionOrderResponseBody(name='body'),
}

async function applyCreateDistributionOrderWithOptions(tmpReq: ApplyCreateDistributionOrderRequest, runtime: Util.RuntimeOptions): ApplyCreateDistributionOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyCreateDistributionOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemInfoLists)) {
    request.itemInfoListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemInfoLists, 'ItemInfoLists', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.buyerId)) {
    body['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.deliveryAddress)) {
    body['DeliveryAddress'] = request.deliveryAddress;
  }
  if (!Util.isUnset(request.distributionOutTradeId)) {
    body['DistributionOutTradeId'] = request.distributionOutTradeId;
  }
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.itemInfoListsShrink)) {
    body['ItemInfoLists'] = request.itemInfoListsShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCreateDistributionOrder',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCreateDistributionOrder(request: ApplyCreateDistributionOrderRequest): ApplyCreateDistributionOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCreateDistributionOrderWithOptions(request, runtime);
}

model ApplyRefund4DistributionRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId'),
  applyRefundCount?: int32(name='ApplyRefundCount'),
  applyRefundFee?: long(name='ApplyRefundFee'),
  bizClaimType?: int32(name='BizClaimType'),
  distributorId?: string(name='DistributorId'),
  goodsStatus?: int32(name='GoodsStatus'),
  leaveMessage?: string(name='LeaveMessage'),
  leavePictureLists?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture'),
    }
  ](name='LeavePictureLists'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model ApplyRefund4DistributionShrinkRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId'),
  applyRefundCount?: int32(name='ApplyRefundCount'),
  applyRefundFee?: long(name='ApplyRefundFee'),
  bizClaimType?: int32(name='BizClaimType'),
  distributorId?: string(name='DistributorId'),
  goodsStatus?: int32(name='GoodsStatus'),
  leaveMessage?: string(name='LeaveMessage'),
  leavePictureListsShrink?: string(name='LeavePictureLists'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model ApplyRefund4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ApplyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyRefund4DistributionResponseBody(name='body'),
}

async function applyRefund4DistributionWithOptions(tmpReq: ApplyRefund4DistributionRequest, runtime: Util.RuntimeOptions): ApplyRefund4DistributionResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyRefund4DistributionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.leavePictureLists)) {
    request.leavePictureListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.leavePictureLists, 'LeavePictureLists', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyReasonTextId)) {
    body['ApplyReasonTextId'] = request.applyReasonTextId;
  }
  if (!Util.isUnset(request.applyRefundCount)) {
    body['ApplyRefundCount'] = request.applyRefundCount;
  }
  if (!Util.isUnset(request.applyRefundFee)) {
    body['ApplyRefundFee'] = request.applyRefundFee;
  }
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.leaveMessage)) {
    body['LeaveMessage'] = request.leaveMessage;
  }
  if (!Util.isUnset(request.leavePictureListsShrink)) {
    body['LeavePictureLists'] = request.leavePictureListsShrink;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyRefund4Distribution(request: ApplyRefund4DistributionRequest): ApplyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRefund4DistributionWithOptions(request, runtime);
}

model CancelDistributionTradeRequest {
  distributionTradeId?: string(name='DistributionTradeId'),
  distributorId?: string(name='DistributorId'),
  tenantId?: string(name='TenantId'),
}

model CancelDistributionTradeResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model CancelDistributionTradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDistributionTradeResponseBody(name='body'),
}

async function cancelDistributionTradeWithOptions(request: CancelDistributionTradeRequest, runtime: Util.RuntimeOptions): CancelDistributionTradeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelDistributionTrade',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelDistributionTrade(request: CancelDistributionTradeRequest): CancelDistributionTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDistributionTradeWithOptions(request, runtime);
}

model CancelRefund4DistributionRequest {
  disputeId?: long(name='DisputeId'),
  distributorId?: string(name='DistributorId'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model CancelRefund4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model CancelRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelRefund4DistributionResponseBody(name='body'),
}

async function cancelRefund4DistributionWithOptions(request: CancelRefund4DistributionRequest, runtime: Util.RuntimeOptions): CancelRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRefund4Distribution(request: CancelRefund4DistributionRequest): CancelRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRefund4DistributionWithOptions(request, runtime);
}

model ConfirmDisburse4DistributionRequest {
  distributionTradeId?: string(name='DistributionTradeId'),
  distributorId?: string(name='DistributorId'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model ConfirmDisburse4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ConfirmDisburse4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmDisburse4DistributionResponseBody(name='body'),
}

async function confirmDisburse4DistributionWithOptions(request: ConfirmDisburse4DistributionRequest, runtime: Util.RuntimeOptions): ConfirmDisburse4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmDisburse4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmDisburse4Distribution(request: ConfirmDisburse4DistributionRequest): ConfirmDisburse4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmDisburse4DistributionWithOptions(request, runtime);
}

model InitApplyRefund4DistributionRequest {
  bizClaimType?: int32(name='BizClaimType'),
  distributorId?: string(name='DistributorId'),
  goodsStatus?: int32(name='GoodsStatus'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model InitApplyRefund4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    bizClaimType?: int32(name='BizClaimType'),
    mainOrderRefund?: boolean(name='MainOrderRefund'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee'),
      minRefundFee?: long(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired'),
        reasonTextId?: string(name='ReasonTextId'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired'),
      }
    ](name='RefundReasonList'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model InitApplyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitApplyRefund4DistributionResponseBody(name='body'),
}

async function initApplyRefund4DistributionWithOptions(request: InitApplyRefund4DistributionRequest, runtime: Util.RuntimeOptions): InitApplyRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitApplyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initApplyRefund4Distribution(request: InitApplyRefund4DistributionRequest): InitApplyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initApplyRefund4DistributionWithOptions(request, runtime);
}

model InitModifyRefund4DistributionRequest {
  bizClaimType?: int32(name='BizClaimType'),
  disputeId?: long(name='DisputeId'),
  distributorId?: string(name='DistributorId'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model InitModifyRefund4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    bizClaimType?: int32(name='BizClaimType'),
    mainOrderRefund?: boolean(name='MainOrderRefund'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee'),
      minRefundFee?: long(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired'),
        reasonTextId?: string(name='ReasonTextId'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired'),
      }
    ](name='RefundReasonList'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model InitModifyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitModifyRefund4DistributionResponseBody(name='body'),
}

async function initModifyRefund4DistributionWithOptions(request: InitModifyRefund4DistributionRequest, runtime: Util.RuntimeOptions): InitModifyRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitModifyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initModifyRefund4Distribution(request: InitModifyRefund4DistributionRequest): InitModifyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initModifyRefund4DistributionWithOptions(request, runtime);
}

model ListDistributionItemRequest {
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  itemStatus?: int32(name='ItemStatus'),
  lmItemId?: string(name='LmItemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tenantId?: string(name='TenantId'),
}

model ListDistributionItemResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      category?: string(name='Category'),
      categoryChain?: [ 
        {
          categoryId?: long(name='CategoryId'),
          leaf?: boolean(name='Leaf'),
          level?: int32(name='Level'),
          name?: string(name='Name'),
          parentId?: long(name='ParentId'),
        }
      ](name='CategoryChain'),
      categoryId?: long(name='CategoryId'),
      descOption?: string(name='DescOption'),
      distributionMallId?: string(name='DistributionMallId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      hasQuantity?: boolean(name='HasQuantity'),
      isCanSell?: boolean(name='IsCanSell'),
      itemDesc?: string(name='ItemDesc'),
      itemId?: long(name='ItemId'),
      itemIdStr?: string(name='ItemIdStr'),
      itemImages?: [ string ](name='ItemImages'),
      itemName?: string(name='ItemName'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId'),
      mainPicUrl?: string(name='MainPicUrl'),
      picUrl?: string(name='PicUrl'),
      priceCentScope?: string(name='PriceCentScope'),
      propertiesJson?: string(name='PropertiesJson'),
      quantity?: int32(name='Quantity'),
      reservedPrice?: long(name='ReservedPrice'),
      reservedPriceScope?: string(name='ReservedPriceScope'),
      simpleQuantity?: string(name='SimpleQuantity'),
      simpleTotalSoldQuantity?: string(name='SimpleTotalSoldQuantity'),
      skuList?: [ 
        {
          canSell?: boolean(name='CanSell'),
          customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
          extInfo?: string(name='ExtInfo'),
          gmtModified?: string(name='GmtModified'),
          hasQuantity?: boolean(name='HasQuantity'),
          itemId?: long(name='ItemId'),
          lmAttributeModels?: [ 
            {
              attrId?: long(name='AttrId'),
              category?: int32(name='Category'),
              dataType?: string(name='DataType'),
              description?: string(name='Description'),
              name?: string(name='Name'),
              restriction?: string(name='Restriction'),
              scopeList?: [ string ](name='ScopeList'),
              value?: string(name='Value'),
            }
          ](name='LmAttributeModels'),
          lmItemId?: string(name='LmItemId'),
          priceCent?: long(name='PriceCent'),
          quantity?: long(name='Quantity'),
          reservedPrice?: long(name='ReservedPrice'),
          simpleQuantity?: string(name='SimpleQuantity'),
          skuDesc?: string(name='SkuDesc'),
          skuId?: long(name='SkuId'),
          skuPicUrl?: string(name='SkuPicUrl'),
          skuProperties?: map[string]string(name='SkuProperties'),
          skuPropertiesJson?: string(name='SkuPropertiesJson'),
          skuTitle?: string(name='SkuTitle'),
          status?: int32(name='Status'),
          tips?: string(name='Tips'),
        }
      ](name='SkuList'),
      status?: int32(name='Status'),
      tips?: string(name='Tips'),
      totalSoldQuantity?: int32(name='TotalSoldQuantity'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListDistributionItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributionItemResponseBody(name='body'),
}

async function listDistributionItemWithOptions(request: ListDistributionItemRequest, runtime: Util.RuntimeOptions): ListDistributionItemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.itemStatus)) {
    body['ItemStatus'] = request.itemStatus;
  }
  if (!Util.isUnset(request.lmItemId)) {
    body['LmItemId'] = request.lmItemId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributionItem',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributionItem(request: ListDistributionItemRequest): ListDistributionItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributionItemWithOptions(request, runtime);
}

model ListDistributionMallRequest {
  channelSupplierId?: string(name='ChannelSupplierId'),
  distributionMallId?: string(name='DistributionMallId'),
  distributionMallName?: string(name='DistributionMallName'),
  distributorId?: string(name='DistributorId'),
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
  tenantId?: string(name='TenantId'),
}

model ListDistributionMallResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      channelSupplierId?: string(name='ChannelSupplierId'),
      distributionMallId?: string(name='DistributionMallId'),
      distributionMallName?: string(name='DistributionMallName'),
      distributionMallType?: string(name='DistributionMallType'),
      endDate?: string(name='EndDate'),
      startDate?: string(name='StartDate'),
      status?: string(name='Status'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListDistributionMallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributionMallResponseBody(name='body'),
}

async function listDistributionMallWithOptions(request: ListDistributionMallRequest, runtime: Util.RuntimeOptions): ListDistributionMallResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelSupplierId)) {
    body['ChannelSupplierId'] = request.channelSupplierId;
  }
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributionMallName)) {
    body['DistributionMallName'] = request.distributionMallName;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributionMall',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributionMall(request: ListDistributionMallRequest): ListDistributionMallResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributionMallWithOptions(request, runtime);
}

model ModifyRefund4DistributionRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId'),
  applyRefundCount?: int32(name='ApplyRefundCount'),
  applyRefundFee?: long(name='ApplyRefundFee'),
  bizClaimType?: int32(name='BizClaimType'),
  disputeId?: long(name='DisputeId'),
  distributorId?: string(name='DistributorId'),
  goodsStatus?: int32(name='GoodsStatus'),
  leaveMessage?: string(name='LeaveMessage'),
  leavePictureLists?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture'),
    }
  ](name='LeavePictureLists'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model ModifyRefund4DistributionShrinkRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId'),
  applyRefundCount?: int32(name='ApplyRefundCount'),
  applyRefundFee?: long(name='ApplyRefundFee'),
  bizClaimType?: int32(name='BizClaimType'),
  disputeId?: long(name='DisputeId'),
  distributorId?: string(name='DistributorId'),
  goodsStatus?: int32(name='GoodsStatus'),
  leaveMessage?: string(name='LeaveMessage'),
  leavePictureListsShrink?: string(name='LeavePictureLists'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model ModifyRefund4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ModifyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRefund4DistributionResponseBody(name='body'),
}

async function modifyRefund4DistributionWithOptions(tmpReq: ModifyRefund4DistributionRequest, runtime: Util.RuntimeOptions): ModifyRefund4DistributionResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyRefund4DistributionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.leavePictureLists)) {
    request.leavePictureListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.leavePictureLists, 'LeavePictureLists', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyReasonTextId)) {
    body['ApplyReasonTextId'] = request.applyReasonTextId;
  }
  if (!Util.isUnset(request.applyRefundCount)) {
    body['ApplyRefundCount'] = request.applyRefundCount;
  }
  if (!Util.isUnset(request.applyRefundFee)) {
    body['ApplyRefundFee'] = request.applyRefundFee;
  }
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.leaveMessage)) {
    body['LeaveMessage'] = request.leaveMessage;
  }
  if (!Util.isUnset(request.leavePictureListsShrink)) {
    body['LeavePictureLists'] = request.leavePictureListsShrink;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRefund4Distribution(request: ModifyRefund4DistributionRequest): ModifyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRefund4DistributionWithOptions(request, runtime);
}

model QueryChildDivisionCodeByIdRequest {
  distributorId?: string(name='DistributorId'),
  divisionCode?: string(name='DivisionCode'),
  tenantId?: string(name='TenantId'),
}

model QueryChildDivisionCodeByIdResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    divisionList?: [ 
      {
        divisionCode?: long(name='DivisionCode'),
        divisionLevel?: long(name='DivisionLevel'),
        divisionName?: string(name='DivisionName'),
        parentId?: long(name='ParentId'),
        pinyin?: string(name='Pinyin'),
      }
    ](name='DivisionList'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryChildDivisionCodeByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChildDivisionCodeByIdResponseBody(name='body'),
}

async function queryChildDivisionCodeByIdWithOptions(request: QueryChildDivisionCodeByIdRequest, runtime: Util.RuntimeOptions): QueryChildDivisionCodeByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.divisionCode)) {
    body['DivisionCode'] = request.divisionCode;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryChildDivisionCodeById',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryChildDivisionCodeById(request: QueryChildDivisionCodeByIdRequest): QueryChildDivisionCodeByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChildDivisionCodeByIdWithOptions(request, runtime);
}

model QueryDistributionBillDetailRequest {
  billId?: string(name='BillId'),
  billPeriod?: string(name='BillPeriod'),
  billStatus?: string(name='BillStatus'),
  distributionMallId?: string(name='DistributionMallId'),
  distributionMallName?: string(name='DistributionMallName'),
  distributorId?: string(name='DistributorId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tenantId?: string(name='TenantId'),
}

model QueryDistributionBillDetailResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    data?: [ string ](name='Data'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
}

model QueryDistributionBillDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDistributionBillDetailResponseBody(name='body'),
}

async function queryDistributionBillDetailWithOptions(request: QueryDistributionBillDetailRequest, runtime: Util.RuntimeOptions): QueryDistributionBillDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billId)) {
    body['BillId'] = request.billId;
  }
  if (!Util.isUnset(request.billPeriod)) {
    body['BillPeriod'] = request.billPeriod;
  }
  if (!Util.isUnset(request.billStatus)) {
    body['BillStatus'] = request.billStatus;
  }
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributionMallName)) {
    body['DistributionMallName'] = request.distributionMallName;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDistributionBillDetail',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDistributionBillDetail(request: QueryDistributionBillDetailRequest): QueryDistributionBillDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDistributionBillDetailWithOptions(request, runtime);
}

model QueryDistributionMallRequest {
  distributionMallId?: string(name='DistributionMallId'),
  tenantId?: string(name='TenantId'),
}

model QueryDistributionMallResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    channelSupplierId?: string(name='ChannelSupplierId'),
    distributionMallId?: string(name='DistributionMallId'),
    distributionMallName?: string(name='DistributionMallName'),
    distributionMallType?: string(name='DistributionMallType'),
    distributorId?: string(name='DistributorId'),
    endDate?: string(name='EndDate'),
    startDate?: string(name='StartDate'),
    status?: string(name='Status'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryDistributionMallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDistributionMallResponseBody(name='body'),
}

async function queryDistributionMallWithOptions(request: QueryDistributionMallRequest, runtime: Util.RuntimeOptions): QueryDistributionMallResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDistributionMall',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDistributionMall(request: QueryDistributionMallRequest): QueryDistributionMallResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDistributionMallWithOptions(request, runtime);
}

model QueryDistributionTradeStatusRequest {
  distributionSupplierId?: string(name='DistributionSupplierId'),
  distributionTradeId?: string(name='DistributionTradeId'),
  distributorId?: string(name='DistributorId'),
  tenantId?: string(name='TenantId'),
}

model QueryDistributionTradeStatusResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: string(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryDistributionTradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDistributionTradeStatusResponseBody(name='body'),
}

async function queryDistributionTradeStatusWithOptions(request: QueryDistributionTradeStatusRequest, runtime: Util.RuntimeOptions): QueryDistributionTradeStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDistributionTradeStatus',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDistributionTradeStatus(request: QueryDistributionTradeStatusRequest): QueryDistributionTradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDistributionTradeStatusWithOptions(request, runtime);
}

model QueryItemDetailRequest {
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  lmItemId?: string(name='LmItemId'),
  tenantId?: string(name='TenantId'),
}

model QueryItemDetailResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
    canNotBeSoldMessage?: string(name='CanNotBeSoldMessage'),
    categoryId?: long(name='CategoryId'),
    categoryIds?: [ long ](name='CategoryIds'),
    city?: string(name='City'),
    current?: string(name='Current'),
    customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
    descOption?: string(name='DescOption'),
    descPath?: string(name='DescPath'),
    distributionMallId?: string(name='DistributionMallId'),
    features?: map[string]string(name='Features'),
    firstPicUrl?: string(name='FirstPicUrl'),
    hasQuantity?: boolean(name='HasQuantity'),
    iforestProps?: [ map[string]string ](name='IforestProps'),
    invoiceType?: int32(name='InvoiceType'),
    isCanSell?: boolean(name='IsCanSell'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee'),
    itemId?: long(name='ItemId'),
    itemImages?: [ string ](name='ItemImages'),
    itemTitle?: string(name='ItemTitle'),
    itemTotalSimpleValue?: string(name='ItemTotalSimpleValue'),
    itemTotalValue?: int32(name='ItemTotalValue'),
    lmItemAttributeMap?: map[string]string(name='LmItemAttributeMap'),
    lmItemCategory?: string(name='LmItemCategory'),
    lmItemId?: string(name='LmItemId'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPrice?: long(name='MinPrice'),
    properties?: map[string][ string ](name='Properties'),
    prov?: string(name='Prov'),
    quantity?: int32(name='Quantity'),
    reservedPrice?: long(name='ReservedPrice'),
    simpleQuantity?: string(name='SimpleQuantity'),
    skuModels?: [ 
      {
        canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
        canNotBeSoldMessage?: string(name='CanNotBeSoldMessage'),
        customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
        distributionMallId?: string(name='DistributionMallId'),
        extJson?: string(name='ExtJson'),
        hasQuantity?: boolean(name='HasQuantity'),
        invoiceType?: int32(name='InvoiceType'),
        itemId?: long(name='ItemId'),
        lmItemId?: string(name='LmItemId'),
        lmSkuAttributeMap?: map[string]string(name='LmSkuAttributeMap'),
        priceCent?: long(name='PriceCent'),
        quantity?: int32(name='Quantity'),
        reservedPrice?: long(name='ReservedPrice'),
        simpleQuantity?: string(name='SimpleQuantity'),
        skuId?: long(name='SkuId'),
        skuPicUrl?: string(name='SkuPicUrl'),
        skuPvs?: string(name='SkuPvs'),
        skuTitle?: string(name='SkuTitle'),
        status?: int32(name='Status'),
      }
    ](name='SkuModels'),
    skuPropertys?: [ 
      {
        id?: long(name='Id'),
        text?: string(name='Text'),
        values?: [ 
          {
            id?: long(name='Id'),
            text?: string(name='Text'),
          }
        ](name='Values'),
      }
    ](name='SkuPropertys'),
    thirdPartyItemId?: string(name='ThirdPartyItemId'),
    thirdPartyName?: string(name='ThirdPartyName'),
    videoPicUrl?: string(name='VideoPicUrl'),
    videoUrl?: string(name='VideoUrl'),
    virtualItemType?: string(name='VirtualItemType'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryItemDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryItemDetailResponseBody(name='body'),
}

async function queryItemDetailWithOptions(request: QueryItemDetailRequest, runtime: Util.RuntimeOptions): QueryItemDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.lmItemId)) {
    body['LmItemId'] = request.lmItemId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemDetail',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemDetail(request: QueryItemDetailRequest): QueryItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemDetailWithOptions(request, runtime);
}

model QueryItemDetailWithDivisionRequest {
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  divisionCode?: string(name='DivisionCode'),
  lmItemId?: string(name='LmItemId'),
  tenantId?: string(name='TenantId'),
}

model QueryItemDetailWithDivisionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
    canNotBeSoldMassage?: string(name='CanNotBeSoldMassage'),
    canSell?: boolean(name='CanSell'),
    categoryId?: long(name='CategoryId'),
    categoryIds?: [ long ](name='CategoryIds'),
    city?: string(name='City'),
    current?: string(name='Current'),
    customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
    descOption?: string(name='DescOption'),
    descPath?: string(name='DescPath'),
    distributionMallId?: string(name='DistributionMallId'),
    features?: map[string]string(name='Features'),
    firstPicUrl?: string(name='FirstPicUrl'),
    hasQuantity?: boolean(name='HasQuantity'),
    iforestProps?: [ map[string]string ](name='IforestProps'),
    invoiceType?: int32(name='InvoiceType'),
    itemId?: long(name='ItemId'),
    itemImages?: [ string ](name='ItemImages'),
    itemTitle?: string(name='ItemTitle'),
    itemTotalSimpleValue?: string(name='ItemTotalSimpleValue'),
    itemTotalValue?: int32(name='ItemTotalValue'),
    lmItemAttributeMap?: map[string]string(name='LmItemAttributeMap'),
    lmItemCategory?: string(name='LmItemCategory'),
    lmItemId?: string(name='LmItemId'),
    mainPicUrl?: string(name='MainPicUrl'),
    minPrice?: long(name='MinPrice'),
    properties?: map[string][ string ](name='Properties'),
    prov?: string(name='Prov'),
    quantity?: int32(name='Quantity'),
    reservePrice?: long(name='ReservePrice'),
    securedTransactions?: int32(name='SecuredTransactions'),
    sellerPayPostfee?: boolean(name='SellerPayPostfee'),
    simpleQuantity?: string(name='SimpleQuantity'),
    skuModels?: [ 
      {
        canNotBeSoldCode?: string(name='CanNotBeSoldCode'),
        canNotBeSoldMassage?: string(name='CanNotBeSoldMassage'),
        customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap'),
        distributionMallId?: string(name='DistributionMallId'),
        extJson?: string(name='ExtJson'),
        hasQuantity?: boolean(name='HasQuantity'),
        invoiceType?: int32(name='InvoiceType'),
        itemId?: long(name='ItemId'),
        lmItemId?: string(name='LmItemId'),
        lmSkuAttributeMap?: map[string]string(name='LmSkuAttributeMap'),
        priceCent?: long(name='PriceCent'),
        quantity?: int32(name='Quantity'),
        reservePrice?: long(name='ReservePrice'),
        simpleQuantity?: string(name='SimpleQuantity'),
        skuId?: long(name='SkuId'),
        skuPicUrl?: string(name='SkuPicUrl'),
        skuPvs?: string(name='SkuPvs'),
        skuTitle?: string(name='SkuTitle'),
        status?: int32(name='Status'),
        supplierPrice?: long(name='SupplierPrice'),
      }
    ](name='SkuModels'),
    skuPropertys?: [ 
      {
        id?: long(name='Id'),
        text?: string(name='Text'),
        values?: [ 
          {
            id?: long(name='Id'),
            text?: string(name='Text'),
          }
        ](name='Values'),
      }
    ](name='SkuPropertys'),
    thirdPartyItemId?: string(name='ThirdPartyItemId'),
    thirdPartyName?: string(name='ThirdPartyName'),
    userType?: int32(name='UserType'),
    videoPicUrl?: string(name='VideoPicUrl'),
    videoUrl?: string(name='VideoUrl'),
    virtualItemType?: string(name='VirtualItemType'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryItemDetailWithDivisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryItemDetailWithDivisionResponseBody(name='body'),
}

async function queryItemDetailWithDivisionWithOptions(request: QueryItemDetailWithDivisionRequest, runtime: Util.RuntimeOptions): QueryItemDetailWithDivisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.divisionCode)) {
    body['DivisionCode'] = request.divisionCode;
  }
  if (!Util.isUnset(request.lmItemId)) {
    body['LmItemId'] = request.lmItemId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemDetailWithDivision',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemDetailWithDivision(request: QueryItemDetailWithDivisionRequest): QueryItemDetailWithDivisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemDetailWithDivisionWithOptions(request, runtime);
}

model QueryItemGuideRetailPriceRequest {
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  lmItemIds?: [ string ](name='LmItemIds'),
  tenantId?: string(name='TenantId'),
}

model QueryItemGuideRetailPriceShrinkRequest {
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  lmItemIdsShrink?: string(name='LmItemIds'),
  tenantId?: string(name='TenantId'),
}

model QueryItemGuideRetailPriceResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      distributionMallId?: string(name='DistributionMallId'),
      guideRetailPriceScope?: string(name='GuideRetailPriceScope'),
      itemId?: long(name='ItemId'),
      itemTitle?: string(name='ItemTitle'),
      lmItemId?: string(name='LmItemId'),
      reservedPrice?: long(name='ReservedPrice'),
      reservedPriceScope?: string(name='ReservedPriceScope'),
      skuModels?: [ 
        {
          distributionMallId?: string(name='DistributionMallId'),
          guideRetailPrice?: long(name='GuideRetailPrice'),
          itemId?: long(name='ItemId'),
          lmItemId?: string(name='LmItemId'),
          priceCent?: long(name='PriceCent'),
          reservedPrice?: long(name='ReservedPrice'),
          skuId?: long(name='SkuId'),
          skuTitle?: string(name='SkuTitle'),
          status?: int32(name='Status'),
        }
      ](name='SkuModels'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
}

model QueryItemGuideRetailPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryItemGuideRetailPriceResponseBody(name='body'),
}

async function queryItemGuideRetailPriceWithOptions(tmpReq: QueryItemGuideRetailPriceRequest, runtime: Util.RuntimeOptions): QueryItemGuideRetailPriceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryItemGuideRetailPriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lmItemIds)) {
    request.lmItemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lmItemIds, 'LmItemIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.lmItemIdsShrink)) {
    body['LmItemIds'] = request.lmItemIdsShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemGuideRetailPrice',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemGuideRetailPrice(request: QueryItemGuideRetailPriceRequest): QueryItemGuideRetailPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemGuideRetailPriceWithOptions(request, runtime);
}

model QueryLogistics4DistributionRequest {
  distributorId?: string(name='DistributorId'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model QueryLogistics4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      dataProvider?: string(name='DataProvider'),
      dataProviderTitle?: string(name='DataProviderTitle'),
      goods?: [ 
        {
          goodName?: string(name='GoodName'),
          itemId?: string(name='ItemId'),
          quantity?: int32(name='Quantity'),
        }
      ](name='Goods'),
      logisticsCompanyCode?: string(name='LogisticsCompanyCode'),
      logisticsCompanyName?: string(name='LogisticsCompanyName'),
      logisticsDetailList?: [ 
        {
          ocurrTimeStr?: string(name='OcurrTimeStr'),
          standerdDesc?: string(name='StanderdDesc'),
        }
      ](name='LogisticsDetailList'),
      mailNo?: string(name='MailNo'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryLogistics4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLogistics4DistributionResponseBody(name='body'),
}

async function queryLogistics4DistributionWithOptions(request: QueryLogistics4DistributionRequest, runtime: Util.RuntimeOptions): QueryLogistics4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLogistics4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLogistics4Distribution(request: QueryLogistics4DistributionRequest): QueryLogistics4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLogistics4DistributionWithOptions(request, runtime);
}

model QueryMallCategoryListRequest {
  categoryId?: long(name='CategoryId'),
  distributionMallId?: string(name='DistributionMallId'),
  distributorId?: string(name='DistributorId'),
  tenantId?: string(name='TenantId'),
}

model QueryMallCategoryListResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      categoryId?: long(name='CategoryId'),
      leaf?: boolean(name='Leaf'),
      name?: string(name='Name'),
      parentId?: long(name='ParentId'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
}

model QueryMallCategoryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMallCategoryListResponseBody(name='body'),
}

async function queryMallCategoryListWithOptions(request: QueryMallCategoryListRequest, runtime: Util.RuntimeOptions): QueryMallCategoryListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMallCategoryList',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMallCategoryList(request: QueryMallCategoryListRequest): QueryMallCategoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMallCategoryListWithOptions(request, runtime);
}

model QueryOrderDetail4DistributionRequest {
  distributorId?: string(name='DistributorId'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model QueryOrderDetail4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    createDate?: string(name='CreateDate'),
    distributionOrderId?: string(name='DistributionOrderId'),
    distributorId?: string(name='DistributorId'),
    logisticsStatus?: string(name='LogisticsStatus'),
    orderAmount?: string(name='OrderAmount'),
    orderStatus?: string(name='OrderStatus'),
    subOrderList?: [ 
      {
        itemId?: string(name='ItemId'),
        itemPic?: string(name='ItemPic'),
        itemPrice?: [ 
          {
            fundAmountMoney?: string(name='FundAmountMoney'),
          }
        ](name='ItemPrice'),
        itemTitle?: string(name='ItemTitle'),
        logisticsStatus?: string(name='LogisticsStatus'),
        mainDistributionOrderId?: string(name='MainDistributionOrderId'),
        number?: string(name='Number'),
        orderStatus?: string(name='OrderStatus'),
        skuId?: string(name='SkuId'),
        skuName?: string(name='SkuName'),
        subDistributionOrderId?: string(name='SubDistributionOrderId'),
      }
    ](name='SubOrderList'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryOrderDetail4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderDetail4DistributionResponseBody(name='body'),
}

async function queryOrderDetail4DistributionWithOptions(request: QueryOrderDetail4DistributionRequest, runtime: Util.RuntimeOptions): QueryOrderDetail4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderDetail4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderDetail4Distribution(request: QueryOrderDetail4DistributionRequest): QueryOrderDetail4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderDetail4DistributionWithOptions(request, runtime);
}

model QueryOrderList4DistributionRequest {
  distributorId?: string(name='DistributorId'),
  filterOption?: string(name='FilterOption'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tenantId?: string(name='TenantId'),
}

model QueryOrderList4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: [ 
    {
      createDate?: string(name='CreateDate'),
      distributionOrderId?: string(name='DistributionOrderId'),
      distributorId?: string(name='DistributorId'),
      logisticsStatus?: string(name='LogisticsStatus'),
      orderAmount?: string(name='OrderAmount'),
      orderStatus?: string(name='OrderStatus'),
      subOrderList?: [ 
        {
          itemId?: string(name='ItemId'),
          itemPic?: string(name='ItemPic'),
          itemPrice?: [ 
            {
              fundAmountMoney?: string(name='FundAmountMoney'),
            }
          ](name='ItemPrice'),
          itemTitle?: string(name='ItemTitle'),
          logisticsStatus?: string(name='LogisticsStatus'),
          mainDistributionOrderId?: string(name='MainDistributionOrderId'),
          number?: string(name='Number'),
          orderStatus?: string(name='OrderStatus'),
          skuId?: string(name='SkuId'),
          skuName?: string(name='SkuName'),
          subDistributionOrderId?: string(name='SubDistributionOrderId'),
        }
      ](name='SubOrderList'),
    }
  ](name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryOrderList4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderList4DistributionResponseBody(name='body'),
}

async function queryOrderList4DistributionWithOptions(request: QueryOrderList4DistributionRequest, runtime: Util.RuntimeOptions): QueryOrderList4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.filterOption)) {
    body['FilterOption'] = request.filterOption;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderList4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderList4Distribution(request: QueryOrderList4DistributionRequest): QueryOrderList4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderList4DistributionWithOptions(request, runtime);
}

model QueryRefundApplicationDetail4DistributionRequest {
  distributorId?: string(name='DistributorId'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model QueryRefundApplicationDetail4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    applyDisputeDesc?: string(name='ApplyDisputeDesc'),
    applyReason?: {
      reasonTextId?: long(name='ReasonTextId'),
      reasonTips?: string(name='ReasonTips'),
    }(name='ApplyReason'),
    bizClaimType?: int32(name='BizClaimType'),
    disputeCreateTime?: string(name='DisputeCreateTime'),
    disputeDesc?: string(name='DisputeDesc'),
    disputeEndTime?: string(name='DisputeEndTime'),
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    distributionOrderId?: string(name='DistributionOrderId'),
    orderLogisticsStatus?: int32(name='OrderLogisticsStatus'),
    realRefundFee?: long(name='RealRefundFee'),
    refundFee?: long(name='RefundFee'),
    refundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee'),
      minRefundFee?: long(name='MinRefundFee'),
    }(name='RefundFeeData'),
    refunderAddress?: string(name='RefunderAddress'),
    refunderName?: string(name='RefunderName'),
    refunderTel?: string(name='RefunderTel'),
    refunderZipCode?: string(name='RefunderZipCode'),
    returnGoodCount?: long(name='ReturnGoodCount'),
    returnGoodLogisticsStatus?: int32(name='ReturnGoodLogisticsStatus'),
    sellerAgreeMsg?: string(name='SellerAgreeMsg'),
    sellerRefuseAgreementMessage?: string(name='SellerRefuseAgreementMessage'),
    sellerRefuseReason?: string(name='SellerRefuseReason'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryRefundApplicationDetail4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRefundApplicationDetail4DistributionResponseBody(name='body'),
}

async function queryRefundApplicationDetail4DistributionWithOptions(request: QueryRefundApplicationDetail4DistributionRequest, runtime: Util.RuntimeOptions): QueryRefundApplicationDetail4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRefundApplicationDetail4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRefundApplicationDetail4Distribution(request: QueryRefundApplicationDetail4DistributionRequest): QueryRefundApplicationDetail4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRefundApplicationDetail4DistributionWithOptions(request, runtime);
}

model RenderDistributionOrderRequest {
  buyerId?: string(name='BuyerId'),
  deliveryAddress?: string(name='DeliveryAddress'),
  distributionSupplierId?: string(name='DistributionSupplierId'),
  distributorId?: string(name='DistributorId'),
  extInfo?: string(name='ExtInfo'),
  itemInfoLists?: [ 
    {
      distributionMallId?: string(name='DistributionMallId'),
      lmItemId?: string(name='LmItemId'),
      quantity?: int32(name='Quantity'),
      skuId?: string(name='SkuId'),
    }
  ](name='ItemInfoLists'),
  tenantId?: string(name='TenantId'),
}

model RenderDistributionOrderShrinkRequest {
  buyerId?: string(name='BuyerId'),
  deliveryAddress?: string(name='DeliveryAddress'),
  distributionSupplierId?: string(name='DistributionSupplierId'),
  distributorId?: string(name='DistributorId'),
  extInfo?: string(name='ExtInfo'),
  itemInfoListsShrink?: string(name='ItemInfoLists'),
  tenantId?: string(name='TenantId'),
}

model RenderDistributionOrderResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  model?: {
    addressInfos?: [ 
      {
        addressDetail?: string(name='AddressDetail'),
        addressId?: long(name='AddressId'),
        divisionCode?: string(name='DivisionCode'),
        isDefault?: boolean(name='IsDefault'),
        receiver?: string(name='Receiver'),
        receiverPhone?: string(name='ReceiverPhone'),
        townDivisionCode?: string(name='TownDivisionCode'),
      }
    ](name='AddressInfos'),
    canSell?: boolean(name='CanSell'),
    extInfo?: map[string]string(name='ExtInfo'),
    message?: string(name='Message'),
    renderOrderInfos?: [ 
      {
        canSell?: boolean(name='CanSell'),
        deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            id?: string(name='Id'),
            postFee?: long(name='PostFee'),
            serviceType?: long(name='ServiceType'),
          }
        ](name='DeliveryInfos'),
        extInfo?: map[string]string(name='ExtInfo'),
        invoiceInfo?: {
          desc?: string(name='Desc'),
          type?: string(name='Type'),
        }(name='InvoiceInfo'),
        itemInfos?: [ 
          {
            canSell?: boolean(name='CanSell'),
            distributionMallId?: string(name='DistributionMallId'),
            distributionSupplierId?: string(name='DistributionSupplierId'),
            distributorId?: string(name='DistributorId'),
            features?: map[string]string(name='Features'),
            itemId?: string(name='ItemId'),
            itemName?: string(name='ItemName'),
            itemPicUrl?: string(name='ItemPicUrl'),
            itemPromInstVOS?: [ 
              {
                availableItems?: [ 
                  {
                    itemId?: long(name='ItemId'),
                    lmItemId?: string(name='LmItemId'),
                    lmShopId?: long(name='LmShopId'),
                    number?: int32(name='Number'),
                    points?: long(name='Points'),
                    pointsAmount?: long(name='PointsAmount'),
                    priceCent?: long(name='PriceCent'),
                    removed?: boolean(name='Removed'),
                    skuId?: long(name='SkuId'),
                    tbSellerId?: long(name='TbSellerId'),
                    userPayFee?: long(name='UserPayFee'),
                  }
                ](name='AvailableItems'),
                canUse?: boolean(name='CanUse'),
                discountPrice?: long(name='DiscountPrice'),
                expireTime?: long(name='ExpireTime'),
                instanceId?: string(name='InstanceId'),
                level?: string(name='Level'),
                lmItemId?: string(name='LmItemId'),
                promotionName?: string(name='PromotionName'),
                promotionType?: string(name='PromotionType'),
                reason?: string(name='Reason'),
                selected?: boolean(name='Selected'),
                skuIds?: [ long ](name='SkuIds'),
                specialPrice?: long(name='SpecialPrice'),
                subBizCode?: string(name='SubBizCode'),
                tbSellerId?: long(name='TbSellerId'),
                thresholdPrice?: long(name='ThresholdPrice'),
                useStartTime?: long(name='UseStartTime'),
              }
            ](name='ItemPromInstVOS'),
            itemUrl?: string(name='ItemUrl'),
            message?: string(name='Message'),
            price?: long(name='Price'),
            promotionFee?: long(name='PromotionFee'),
            quantity?: int32(name='Quantity'),
            reservePrice?: long(name='ReservePrice'),
            skuId?: long(name='SkuId'),
            skuName?: string(name='SkuName'),
            virtualItemType?: string(name='VirtualItemType'),
          }
        ](name='ItemInfos'),
        message?: string(name='Message'),
        shopPromInstVOS?: [ 
          {
            availableItems?: [ 
              {
                itemId?: long(name='ItemId'),
                lmItemId?: string(name='LmItemId'),
                lmShopId?: long(name='LmShopId'),
                number?: int32(name='Number'),
                points?: long(name='Points'),
                pointsAmount?: long(name='PointsAmount'),
                priceCent?: long(name='PriceCent'),
                removed?: boolean(name='Removed'),
                skuId?: long(name='SkuId'),
                tbSellerId?: long(name='TbSellerId'),
                userPayFee?: long(name='UserPayFee'),
              }
            ](name='AvailableItems'),
            canUse?: boolean(name='CanUse'),
            discountPrice?: long(name='DiscountPrice'),
            expireTime?: long(name='ExpireTime'),
            instanceId?: string(name='InstanceId'),
            level?: string(name='Level'),
            lmItemId?: string(name='LmItemId'),
            promotionName?: string(name='PromotionName'),
            promotionType?: string(name='PromotionType'),
            reason?: string(name='Reason'),
            selected?: boolean(name='Selected'),
            skuIds?: [ long ](name='SkuIds'),
            specialPrice?: long(name='SpecialPrice'),
            subBizCode?: string(name='SubBizCode'),
            tbSellerId?: long(name='TbSellerId'),
            thresholdPrice?: long(name='ThresholdPrice'),
            useStartTime?: long(name='UseStartTime'),
          }
        ](name='ShopPromInstVOS'),
      }
    ](name='RenderOrderInfos'),
    unsellableRenderOrderInfos?: [ 
      {
        canSell?: boolean(name='CanSell'),
        deliveryInfos?: [ 
          {
            displayName?: string(name='DisplayName'),
            id?: string(name='Id'),
            postFee?: long(name='PostFee'),
            serviceType?: long(name='ServiceType'),
          }
        ](name='DeliveryInfos'),
        extInfo?: map[string]string(name='ExtInfo'),
        invoiceInfo?: {
          desc?: string(name='Desc'),
          type?: string(name='Type'),
        }(name='InvoiceInfo'),
        itemInfos?: [ 
          {
            canSell?: boolean(name='CanSell'),
            distributionMallId?: string(name='DistributionMallId'),
            distributionSupplierId?: string(name='DistributionSupplierId'),
            distributorId?: string(name='DistributorId'),
            features?: map[string]string(name='Features'),
            itemId?: string(name='ItemId'),
            itemName?: string(name='ItemName'),
            itemPicUrl?: string(name='ItemPicUrl'),
            itemPromInstVOS?: [ 
              {
                availableItems?: [ 
                  {
                    itemId?: long(name='ItemId'),
                    lmItemId?: string(name='LmItemId'),
                    lmShopId?: long(name='LmShopId'),
                    number?: int32(name='Number'),
                    points?: long(name='Points'),
                    pointsAmount?: long(name='PointsAmount'),
                    priceCent?: long(name='PriceCent'),
                    removed?: boolean(name='Removed'),
                    skuId?: long(name='SkuId'),
                    tbSellerId?: long(name='TbSellerId'),
                    userPayFee?: long(name='UserPayFee'),
                  }
                ](name='AvailableItems'),
                canUse?: boolean(name='CanUse'),
                discountPrice?: long(name='DiscountPrice'),
                expireTime?: long(name='ExpireTime'),
                instanceId?: string(name='InstanceId'),
                level?: string(name='Level'),
                lmItemId?: string(name='LmItemId'),
                promotionName?: string(name='PromotionName'),
                promotionType?: string(name='PromotionType'),
                reason?: string(name='Reason'),
                selected?: boolean(name='Selected'),
                skuIds?: [ long ](name='SkuIds'),
                specialPrice?: long(name='SpecialPrice'),
                subBizCode?: string(name='SubBizCode'),
                tbSellerId?: long(name='TbSellerId'),
                thresholdPrice?: long(name='ThresholdPrice'),
                useStartTime?: long(name='UseStartTime'),
              }
            ](name='ItemPromInstVOS'),
            itemUrl?: string(name='ItemUrl'),
            message?: string(name='Message'),
            price?: long(name='Price'),
            promotionFee?: long(name='PromotionFee'),
            quantity?: int32(name='Quantity'),
            reservePrice?: long(name='ReservePrice'),
            skuId?: long(name='SkuId'),
            skuName?: string(name='SkuName'),
            virtualItemType?: string(name='VirtualItemType'),
          }
        ](name='ItemInfos'),
        message?: string(name='Message'),
        shopPromInstVOS?: [ 
          {
            availableItems?: [ 
              {
                itemId?: long(name='ItemId'),
                lmItemId?: string(name='LmItemId'),
                lmShopId?: long(name='LmShopId'),
                number?: int32(name='Number'),
                points?: long(name='Points'),
                pointsAmount?: long(name='PointsAmount'),
                priceCent?: long(name='PriceCent'),
                removed?: boolean(name='Removed'),
                skuId?: long(name='SkuId'),
                tbSellerId?: long(name='TbSellerId'),
                userPayFee?: long(name='UserPayFee'),
              }
            ](name='AvailableItems'),
            canUse?: boolean(name='CanUse'),
            discountPrice?: long(name='DiscountPrice'),
            expireTime?: long(name='ExpireTime'),
            instanceId?: string(name='InstanceId'),
            level?: string(name='Level'),
            lmItemId?: string(name='LmItemId'),
            promotionName?: string(name='PromotionName'),
            promotionType?: string(name='PromotionType'),
            reason?: string(name='Reason'),
            selected?: boolean(name='Selected'),
            skuIds?: [ long ](name='SkuIds'),
            specialPrice?: long(name='SpecialPrice'),
            subBizCode?: string(name='SubBizCode'),
            tbSellerId?: long(name='TbSellerId'),
            thresholdPrice?: long(name='ThresholdPrice'),
            useStartTime?: long(name='UseStartTime'),
          }
        ](name='ShopPromInstVOS'),
      }
    ](name='UnsellableRenderOrderInfos'),
  }(name='Model'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model RenderDistributionOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenderDistributionOrderResponseBody(name='body'),
}

async function renderDistributionOrderWithOptions(tmpReq: RenderDistributionOrderRequest, runtime: Util.RuntimeOptions): RenderDistributionOrderResponse {
  Util.validateModel(tmpReq);
  var request = new RenderDistributionOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemInfoLists)) {
    request.itemInfoListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemInfoLists, 'ItemInfoLists', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.buyerId)) {
    body['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.deliveryAddress)) {
    body['DeliveryAddress'] = request.deliveryAddress;
  }
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.itemInfoListsShrink)) {
    body['ItemInfoLists'] = request.itemInfoListsShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenderDistributionOrder',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renderDistributionOrder(request: RenderDistributionOrderRequest): RenderDistributionOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return renderDistributionOrderWithOptions(request, runtime);
}

model SubmitReturnGoodLogistics4DistributionRequest {
  cpCode?: string(name='CpCode'),
  disputeId?: long(name='DisputeId'),
  distributorId?: string(name='DistributorId'),
  logisticsNo?: string(name='LogisticsNo'),
  subDistributionOrderId?: string(name='SubDistributionOrderId'),
  tenantId?: string(name='TenantId'),
}

model SubmitReturnGoodLogistics4DistributionResponseBody = {
  code?: string(name='Code'),
  logsId?: string(name='LogsId'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  subCode?: string(name='SubCode'),
  subMessage?: string(name='SubMessage'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model SubmitReturnGoodLogistics4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitReturnGoodLogistics4DistributionResponseBody(name='body'),
}

async function submitReturnGoodLogistics4DistributionWithOptions(request: SubmitReturnGoodLogistics4DistributionRequest, runtime: Util.RuntimeOptions): SubmitReturnGoodLogistics4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpCode)) {
    body['CpCode'] = request.cpCode;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.logisticsNo)) {
    body['LogisticsNo'] = request.logisticsNo;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitReturnGoodLogistics4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitReturnGoodLogistics4Distribution(request: SubmitReturnGoodLogistics4DistributionRequest): SubmitReturnGoodLogistics4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitReturnGoodLogistics4DistributionWithOptions(request, runtime);
}

