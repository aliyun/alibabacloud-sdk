/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'linkedmall.aliyuncs.com',
    cn-shanghai = 'linkedmall.aliyuncs.com',
    ap-northeast-1 = 'linkedmall.aliyuncs.com',
    ap-northeast-2-pop = 'linkedmall.aliyuncs.com',
    ap-south-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-2 = 'linkedmall.aliyuncs.com',
    ap-southeast-3 = 'linkedmall.aliyuncs.com',
    ap-southeast-5 = 'linkedmall.aliyuncs.com',
    cn-beijing = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-pop = 'linkedmall.aliyuncs.com',
    cn-beijing-gov-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkedmall.aliyuncs.com',
    cn-chengdu = 'linkedmall.aliyuncs.com',
    cn-edge-1 = 'linkedmall.aliyuncs.com',
    cn-fujian = 'linkedmall.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-finance = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkedmall.aliyuncs.com',
    cn-hongkong = 'linkedmall.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkedmall.aliyuncs.com',
    cn-huhehaote = 'linkedmall.aliyuncs.com',
    cn-north-2-gov-1 = 'linkedmall.aliyuncs.com',
    cn-qingdao = 'linkedmall.aliyuncs.com',
    cn-qingdao-nebula = 'linkedmall.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shanghai-inner = 'linkedmall.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen = 'linkedmall.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-inner = 'linkedmall.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkedmall.aliyuncs.com',
    cn-wuhan = 'linkedmall.aliyuncs.com',
    cn-yushanfang = 'linkedmall.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkedmall.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkedmall.aliyuncs.com',
    eu-central-1 = 'linkedmall.aliyuncs.com',
    eu-west-1 = 'linkedmall.aliyuncs.com',
    eu-west-1-oxs = 'linkedmall.aliyuncs.com',
    me-east-1 = 'linkedmall.aliyuncs.com',
    rus-west-1-pop = 'linkedmall.aliyuncs.com',
    us-east-1 = 'linkedmall.aliyuncs.com',
    us-west-1 = 'linkedmall.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('linkedmall', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApplyCreateDistributionOrderRequest {
  buyerId?: string(name='BuyerId', description='分销真实买家ID'),
  deliveryAddress?: string(name='DeliveryAddress', description='收货地址'),
  distributionSupplierId?: string(name='DistributionSupplierId', description='渠道供应商ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  extInfo?: string(name='ExtInfo', description='扩展信息'),
  itemInfoLists?: [ 
    {
      distributionMallId?: string(name='DistributionMallId'),
      lmItemId?: string(name='LmItemId'),
      quantity?: int32(name='Quantity'),
      skuId?: string(name='SkuId'),
    }
  ](name='ItemInfoLists', description='商品信息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ApplyCreateDistributionOrderShrinkRequest {
  buyerId?: string(name='BuyerId', description='分销真实买家ID'),
  deliveryAddress?: string(name='DeliveryAddress', description='收货地址'),
  distributionSupplierId?: string(name='DistributionSupplierId', description='渠道供应商ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  extInfo?: string(name='ExtInfo', description='扩展信息'),
  itemInfoListsShrink?: string(name='ItemInfoLists', description='商品信息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ApplyCreateDistributionOrderResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: string(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ApplyCreateDistributionOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCreateDistributionOrderResponseBody(name='body'),
}

async function applyCreateDistributionOrderWithOptions(tmpReq: ApplyCreateDistributionOrderRequest, runtime: Util.RuntimeOptions): ApplyCreateDistributionOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyCreateDistributionOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemInfoLists)) {
    request.itemInfoListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemInfoLists, 'ItemInfoLists', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.buyerId)) {
    body['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.deliveryAddress)) {
    body['DeliveryAddress'] = request.deliveryAddress;
  }
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.itemInfoListsShrink)) {
    body['ItemInfoLists'] = request.itemInfoListsShrink;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCreateDistributionOrder',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCreateDistributionOrder(request: ApplyCreateDistributionOrderRequest): ApplyCreateDistributionOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCreateDistributionOrderWithOptions(request, runtime);
}

model ApplyRefund4DistributionRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId', description='退款原因ID'),
  applyRefundCount?: int32(name='ApplyRefundCount', description='退货数量'),
  applyRefundFee?: long(name='ApplyRefundFee', description='申请退款金额'),
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  goodsStatus?: int32(name='GoodsStatus', description='货物状态'),
  leaveMessage?: string(name='LeaveMessage', description='留言'),
  leavePictureLists?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture'),
    }
  ](name='LeavePictureLists', description='凭证'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model ApplyRefund4DistributionShrinkRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId', description='退款原因ID'),
  applyRefundCount?: int32(name='ApplyRefundCount', description='退货数量'),
  applyRefundFee?: long(name='ApplyRefundFee', description='申请退款金额'),
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  goodsStatus?: int32(name='GoodsStatus', description='货物状态'),
  leaveMessage?: string(name='LeaveMessage', description='留言'),
  leavePictureListsShrink?: string(name='LeavePictureLists', description='凭证'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model ApplyRefund4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    disputeStatus?: int32(name='DisputeStatus', description='逆向的状态'),
    disputeType?: int32(name='DisputeType', description='退款类型'),
    subDistributionOrderId?: string(name='SubDistributionOrderId', description='当前发起逆向的子分销订单号'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ApplyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyRefund4DistributionResponseBody(name='body'),
}

async function applyRefund4DistributionWithOptions(tmpReq: ApplyRefund4DistributionRequest, runtime: Util.RuntimeOptions): ApplyRefund4DistributionResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyRefund4DistributionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.leavePictureLists)) {
    request.leavePictureListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.leavePictureLists, 'LeavePictureLists', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.applyReasonTextId)) {
    body['ApplyReasonTextId'] = request.applyReasonTextId;
  }
  if (!Util.isUnset(request.applyRefundCount)) {
    body['ApplyRefundCount'] = request.applyRefundCount;
  }
  if (!Util.isUnset(request.applyRefundFee)) {
    body['ApplyRefundFee'] = request.applyRefundFee;
  }
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.leaveMessage)) {
    body['LeaveMessage'] = request.leaveMessage;
  }
  if (!Util.isUnset(request.leavePictureListsShrink)) {
    body['LeavePictureLists'] = request.leavePictureListsShrink;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyRefund4Distribution(request: ApplyRefund4DistributionRequest): ApplyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRefund4DistributionWithOptions(request, runtime);
}

model CancelDistributionTradeRequest {
  distributionTradeId?: string(name='DistributionTradeId', description='分销交易号'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CancelDistributionTradeResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model CancelDistributionTradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDistributionTradeResponseBody(name='body'),
}

async function cancelDistributionTradeWithOptions(request: CancelDistributionTradeRequest, runtime: Util.RuntimeOptions): CancelDistributionTradeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelDistributionTrade',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelDistributionTrade(request: CancelDistributionTradeRequest): CancelDistributionTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDistributionTradeWithOptions(request, runtime);
}

model CancelRefund4DistributionRequest {
  disputeId?: long(name='DisputeId', description='纠纷ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model CancelRefund4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    disputeStatus?: int32(name='DisputeStatus', description='逆向的状态'),
    disputeType?: int32(name='DisputeType', description='退款类型'),
    subDistributionOrderId?: string(name='SubDistributionOrderId', description='当前发起逆向的子分销订单号'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model CancelRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelRefund4DistributionResponseBody(name='body'),
}

async function cancelRefund4DistributionWithOptions(request: CancelRefund4DistributionRequest, runtime: Util.RuntimeOptions): CancelRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRefund4Distribution(request: CancelRefund4DistributionRequest): CancelRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRefund4DistributionWithOptions(request, runtime);
}

model ConfirmDisburse4DistributionRequest {
  distributionTradeId?: string(name='DistributionTradeId', description='分销交易号'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId', description='主分销订单号'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ConfirmDisburse4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ConfirmDisburse4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmDisburse4DistributionResponseBody(name='body'),
}

async function confirmDisburse4DistributionWithOptions(request: ConfirmDisburse4DistributionRequest, runtime: Util.RuntimeOptions): ConfirmDisburse4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmDisburse4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmDisburse4Distribution(request: ConfirmDisburse4DistributionRequest): ConfirmDisburse4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmDisburse4DistributionWithOptions(request, runtime);
}

model InitApplyRefund4DistributionRequest {
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  goodsStatus?: int32(name='GoodsStatus', description='货物状态'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model InitApplyRefund4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    bizClaimType?: int32(name='BizClaimType', description='支持的订单退货方式'),
    mainOrderRefund?: boolean(name='MainOrderRefund', description='是否是整单退'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee', description='本单最大可退款金额'),
      minRefundFee?: long(name='MinRefundFee', description='本单最小可退款金额'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', description='是否要求上传凭证'),
        reasonTextId?: string(name='ReasonTextId'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', description='是否要求留言'),
      }
    ](name='RefundReasonList'),
    subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单号'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model InitApplyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitApplyRefund4DistributionResponseBody(name='body'),
}

async function initApplyRefund4DistributionWithOptions(request: InitApplyRefund4DistributionRequest, runtime: Util.RuntimeOptions): InitApplyRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitApplyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initApplyRefund4Distribution(request: InitApplyRefund4DistributionRequest): InitApplyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initApplyRefund4DistributionWithOptions(request, runtime);
}

model InitModifyRefund4DistributionRequest {
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  disputeId?: long(name='DisputeId', description='纠纷ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model InitModifyRefund4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    bizClaimType?: int32(name='BizClaimType', description='支持的订单退货方式'),
    mainOrderRefund?: boolean(name='MainOrderRefund', description='是否是整单退'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee', description='本单最大可退款金额'),
      minRefundFee?: long(name='MinRefundFee', description='本单最小可退款金额'),
    }(name='MaxRefundFeeData'),
    refundReasonList?: [ 
      {
        proofRequired?: boolean(name='ProofRequired', description='是否要求上传凭证'),
        reasonTextId?: string(name='ReasonTextId'),
        reasonTips?: string(name='ReasonTips'),
        refundDescRequired?: boolean(name='RefundDescRequired', description='是否要求留言'),
      }
    ](name='RefundReasonList'),
    subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单号'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model InitModifyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitModifyRefund4DistributionResponseBody(name='body'),
}

async function initModifyRefund4DistributionWithOptions(request: InitModifyRefund4DistributionRequest, runtime: Util.RuntimeOptions): InitModifyRefund4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitModifyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initModifyRefund4Distribution(request: InitModifyRefund4DistributionRequest): InitModifyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initModifyRefund4DistributionWithOptions(request, runtime);
}

model ListDistributionItemRequest {
  distributionMallId?: string(name='DistributionMallId', description='分销商商城id'),
  distributorId?: string(name='DistributorId', description='分销商id'),
  itemStatus?: int32(name='ItemStatus', description='商品状态'),
  lmItemId?: string(name='LmItemId', description='商品id'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  tenantId?: string(name='TenantId', description='租户Id'),
}

model ListDistributionItemResponseBody = {
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: [ 
    {
      auctionStatus?: int32(name='AuctionStatus', description='淘宝 IC 商品状态：0-正常，-1-用户删除，-2-用户下架，-3-小二下架，－4-小二删除，-5-从未上架，-9-CC，'),
      bizId?: string(name='BizId', description='业务ID'),
      bizTotalSaleNum?: long(name='BizTotalSaleNum', description='当前业务累计销量'),
      category?: string(name='Category', description='商品在linkedmall平台上的分类：实物商品（entity），猫超卡券（aliComBenifit），电影票（movieTicket）'),
      categoryChain?: [ 
        {
          categoryId?: long(name='CategoryId'),
          leaf?: boolean(name='Leaf'),
          level?: int32(name='Level'),
          name?: string(name='Name'),
          parentId?: long(name='ParentId'),
        }
      ](name='CategoryChain', description='类目链，父类目在前，子类目在后，叶子类目最后'),
      categoryId?: long(name='CategoryId', description='类目ID'),
      cumulativeSaleNum?: long(name='CumulativeSaleNum', description='累计销量'),
      descOption?: string(name='DescOption', description='商品详情介绍-图片介绍信息'),
      discountRateScope?: string(name='DiscountRateScope', description='折扣比范围'),
      disparityPriceScope?: string(name='DisparityPriceScope', description='差价范围'),
      distributionMallId?: string(name='DistributionMallId', description='分销商城ID'),
      gmtCreate?: string(name='GmtCreate', description='创建时间'),
      gmtModified?: string(name='GmtModified', description='最后修改/生效时间'),
      icQuantity?: long(name='IcQuantity'),
      isCanSell?: boolean(name='IsCanSell', description='是否可销售，目前追要判断了商品的状态是否正常，同时库存要求大于0;'),
      isInventoryZero?: boolean(name='IsInventoryZero', description='ic库存或者bbq限购库存是否为0'),
      itemDesc?: string(name='ItemDesc', description='商品描述信息'),
      itemId?: long(name='ItemId', description='商品Id'),
      itemIdStr?: string(name='ItemIdStr', description='String类型商品Id，用于解决前端number类型超出长度限制'),
      itemImages?: [ string ](name='ItemImages', description='商品图片URL，最多5张，一般是Detail上轮播，从itemDO.commonItemImageList属性转换而来。对应EPP的silders'),
      itemName?: string(name='ItemName', description='商品名称'),
      itemTitle?: string(name='ItemTitle', description='商品名称'),
      linkRatio?: string(name='LinkRatio', description='环比'),
      lmAttributeModels?: [ 
        {
          attrId?: long(name='AttrId'),
          category?: int32(name='Category'),
          dataType?: string(name='DataType'),
          description?: string(name='Description'),
          name?: string(name='Name'),
          restriction?: string(name='Restriction'),
          scopeList?: [ string ](name='ScopeList'),
          value?: string(name='Value'),
        }
      ](name='LmAttributeModels', description='item的扩展属性list'),
      lmItemId?: string(name='LmItemId', description='LM商品ID'),
      lmShopId?: long(name='LmShopId', description='LM店铺ID'),
      mainBizStatus?: int32(name='MainBizStatus', description='linkedmall主业务库商品状态'),
      mainBizTotalSaleNum?: long(name='MainBizTotalSaleNum', description='主业务库累计销量'),
      mainPicUrl?: string(name='MainPicUrl', description='主图'),
      mainPriceCentScope?: string(name='MainPriceCentScope', description='主业务库商品当前售价范围'),
      maxAllowedCount?: int32(name='MaxAllowedCount', description='商品或SKU最大允许售卖数量,支付宝全积分商品的采买数量'),
      monthSaleNum?: long(name='MonthSaleNum', description='月销量'),
      picUrl?: string(name='PicUrl', description='图片url'),
      premiumRateScope?: string(name='PremiumRateScope', description='溢价率范围'),
      priceCentScope?: string(name='PriceCentScope'),
      propertiesJson?: string(name='PropertiesJson'),
      quantity?: int32(name='Quantity', description='商品剩余库存：MIN'),
      reservedPrice?: long(name='ReservedPrice', description='IC划线价'),
      reservedPriceScope?: string(name='ReservedPriceScope'),
      sellerId?: long(name='SellerId', description='卖家ID'),
      sessionQuantity?: long(name='SessionQuantity', description='场次库存'),
      shopId?: long(name='ShopId', description='店铺ID'),
      skuList?: [ 
        {
          adminStatus?: int32(name='AdminStatus', description='记录admin操作商品状态'),
          aliyunPriceCent?: long(name='AliyunPriceCent', description='阿里云供货价(分)'),
          benefitId?: string(name='BenefitId', description='权益id'),
          canSell?: boolean(name='CanSell'),
          customerStatus?: int32(name='CustomerStatus', description='记录顾客操作商品状态'),
          customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap', description='客户自定义属性'),
          discountRate?: double(name='DiscountRate', description='折扣比 =   供货价/淘宝当前售价'),
          disparityPrice?: long(name='DisparityPrice', description='差价 = 淘宝当前售价 - 供货价'),
          extInfo?: string(name='ExtInfo', description='存放买断权益对接模式下：promotionId（权益ID），securityCode（安全码）'),
          gmtModified?: string(name='GmtModified', description='最后修改/生效时间'),
          icStatus?: int32(name='IcStatus', description='记录ic操作商品状态'),
          itemId?: long(name='ItemId'),
          lmAttributeModels?: [ 
            {
              attrId?: long(name='AttrId'),
              category?: int32(name='Category'),
              dataType?: string(name='DataType'),
              description?: string(name='Description'),
              name?: string(name='Name'),
              restriction?: string(name='Restriction'),
              scopeList?: [ string ](name='ScopeList'),
              value?: string(name='Value'),
            }
          ](name='LmAttributeModels', description='sku的扩展属性list'),
          lmItemId?: string(name='LmItemId'),
          mainPriceCent?: long(name='MainPriceCent', description='主业务库当前售价（分）'),
          maxAllowedCount?: int32(name='MaxAllowedCount', description='商品或SKU最大允许售卖数量,支付宝全积分商品的采买数量'),
          originalPriceCent?: long(name='OriginalPriceCent', description='原始售价（分）'),
          pointPrice?: long(name='PointPrice', description='积分价格（分），给用户显示时使用，以及在用户自己支付时需要真实支付的金额。'),
          points?: long(name='Points', description='积分，单位：个'),
          pointsAmount?: long(name='PointsAmount', description='积分抵扣的金额，单位：分'),
          pointsInfo?: string(name='PointsInfo', description='积分活动信息说明，长度建议不要超过256'),
          pointsKey?: string(name='PointsKey', description='积分活动Key，长度建议不要超过64'),
          premiumRate?: double(name='PremiumRate', description='溢价率 = （供货价 - 淘宝当前售价）/ 淘宝当前售价 = 折扣比 - 1'),
          priceCent?: long(name='PriceCent', description='当前售价（分）'),
          quantity?: long(name='Quantity', description='商品剩余库存：MIN'),
          reservePrice?: long(name='ReservePrice', description='IC SKU 一口价'),
          skuDesc?: string(name='SkuDesc', description='sku描述信息'),
          skuId?: long(name='SkuId', description='没有sku的商品，skuId填-1'),
          skuPicUrl?: string(name='SkuPicUrl', description='sku图片'),
          skuProperties?: map[string]string(name='SkuProperties', description='设置基础库/系统扩展属性'),
          skuPropertiesJson?: string(name='SkuPropertiesJson'),
          skuTitle?: string(name='SkuTitle', description='sku标题'),
          status?: int32(name='Status', description='状态'),
          stepPrices?: [ 
            {
              max?: int32(name='Max'),
              min?: int32(name='Min'),
              priceCent?: long(name='PriceCent'),
            }
          ](name='StepPrices', description='阶梯价'),
          supplierStatus?: int32(name='SupplierStatus', description='记录供应商操作商品状态'),
          supplyPriceCent?: long(name='SupplyPriceCent', description='供应商供货价(分)'),
          taoBaoCurrentPrice?: long(name='TaoBaoCurrentPrice', description='淘宝当前售价'),
          tips?: string(name='Tips'),
          userLabel?: [ string ](name='UserLabel', description='客户侧用户标签'),
        }
      ](name='SkuList', description='sku列表'),
      status?: int32(name='Status', description='linkedmall商品状态'),
      supplyPriceCentScope?: string(name='SupplyPriceCentScope', description='供应商当前供货价格范围'),
      taoBaoCurrentPriceScope?: string(name='TaoBaoCurrentPriceScope', description='当前售价范围'),
      tbShopName?: string(name='TbShopName', description='商品的所属的店铺名称'),
      tips?: string(name='Tips', description='对商品不可售的原因描述'),
      totalSoldQuantity?: int32(name='TotalSoldQuantity', description='累计售出数量'),
      type?: int32(name='Type', description='类型 @see com.linkedmall.itemcenter.client.enums.ItemGroupType'),
      userCashPointsScope?: string(name='UserCashPointsScope'),
    }
  ](name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ListDistributionItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributionItemResponseBody(name='body'),
}

async function listDistributionItemWithOptions(request: ListDistributionItemRequest, runtime: Util.RuntimeOptions): ListDistributionItemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.itemStatus)) {
    body['ItemStatus'] = request.itemStatus;
  }
  if (!Util.isUnset(request.lmItemId)) {
    body['LmItemId'] = request.lmItemId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributionItem',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributionItem(request: ListDistributionItemRequest): ListDistributionItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributionItemWithOptions(request, runtime);
}

model ListDistributionMallRequest {
  channelSupplierId?: string(name='ChannelSupplierId', description='渠道供应商id'),
  distributionMallId?: string(name='DistributionMallId', description='分销商城id'),
  distributionMallName?: string(name='DistributionMallName', description='商城名称'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  endDate?: string(name='EndDate', description='结束时间'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  startDate?: string(name='StartDate', description='开始时间'),
  tenantId?: string(name='TenantId', description='租户Id'),
}

model ListDistributionMallResponseBody = {
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: [ 
    {
      channelSupplierId?: string(name='ChannelSupplierId', description='渠道供应商id'),
      distributionMallId?: string(name='DistributionMallId', description='分销商城id'),
      distributionMallName?: string(name='DistributionMallName', description='分销商城名称'),
      distributionMallType?: string(name='DistributionMallType', description='商城模式'),
      endDate?: string(name='EndDate', description='结束时间'),
      startDate?: string(name='StartDate', description='开始时间'),
      status?: string(name='Status', description='分销商城状态'),
    }
  ](name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ListDistributionMallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributionMallResponseBody(name='body'),
}

async function listDistributionMallWithOptions(request: ListDistributionMallRequest, runtime: Util.RuntimeOptions): ListDistributionMallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.channelSupplierId)) {
    body['ChannelSupplierId'] = request.channelSupplierId;
  }
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributionMallName)) {
    body['DistributionMallName'] = request.distributionMallName;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributionMall',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributionMall(request: ListDistributionMallRequest): ListDistributionMallResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributionMallWithOptions(request, runtime);
}

model ModifyRefund4DistributionRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId', description='退款原因ID'),
  applyRefundCount?: int32(name='ApplyRefundCount', description='退货数量'),
  applyRefundFee?: long(name='ApplyRefundFee', description='申请退款金额'),
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  disputeId?: long(name='DisputeId', description='纠纷id'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  goodsStatus?: int32(name='GoodsStatus', description='货物状态'),
  leaveMessage?: string(name='LeaveMessage', description='留言'),
  leavePictureLists?: [ 
    {
      desc?: string(name='Desc'),
      picture?: string(name='Picture'),
    }
  ](name='LeavePictureLists', description='凭证'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model ModifyRefund4DistributionShrinkRequest {
  applyReasonTextId?: long(name='ApplyReasonTextId', description='退款原因ID'),
  applyRefundCount?: int32(name='ApplyRefundCount', description='退货数量'),
  applyRefundFee?: long(name='ApplyRefundFee', description='申请退款金额'),
  bizClaimType?: int32(name='BizClaimType', description='退款类型'),
  disputeId?: long(name='DisputeId', description='纠纷id'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  goodsStatus?: int32(name='GoodsStatus', description='货物状态'),
  leaveMessage?: string(name='LeaveMessage', description='留言'),
  leavePictureListsShrink?: string(name='LeavePictureLists', description='凭证'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model ModifyRefund4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    disputeStatus?: int32(name='DisputeStatus', description='逆向的状态'),
    disputeType?: int32(name='DisputeType', description='退款类型'),
    subDistributionOrderId?: string(name='SubDistributionOrderId', description='当前发起逆向的子分销订单号'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model ModifyRefund4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRefund4DistributionResponseBody(name='body'),
}

async function modifyRefund4DistributionWithOptions(tmpReq: ModifyRefund4DistributionRequest, runtime: Util.RuntimeOptions): ModifyRefund4DistributionResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyRefund4DistributionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.leavePictureLists)) {
    request.leavePictureListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.leavePictureLists, 'LeavePictureLists', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.applyReasonTextId)) {
    body['ApplyReasonTextId'] = request.applyReasonTextId;
  }
  if (!Util.isUnset(request.applyRefundCount)) {
    body['ApplyRefundCount'] = request.applyRefundCount;
  }
  if (!Util.isUnset(request.applyRefundFee)) {
    body['ApplyRefundFee'] = request.applyRefundFee;
  }
  if (!Util.isUnset(request.bizClaimType)) {
    body['BizClaimType'] = request.bizClaimType;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.goodsStatus)) {
    body['GoodsStatus'] = request.goodsStatus;
  }
  if (!Util.isUnset(request.leaveMessage)) {
    body['LeaveMessage'] = request.leaveMessage;
  }
  if (!Util.isUnset(request.leavePictureListsShrink)) {
    body['LeavePictureLists'] = request.leavePictureListsShrink;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRefund4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRefund4Distribution(request: ModifyRefund4DistributionRequest): ModifyRefund4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRefund4DistributionWithOptions(request, runtime);
}

model QueryChildDivisionCodeByIdRequest {
  distributorId?: string(name='DistributorId', description='分销商ID'),
  divisionCode?: string(name='DivisionCode'),
  tenantId?: string(name='TenantId', description='租户Id'),
}

model QueryChildDivisionCodeByIdResponseBody = {
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    divisionList?: [ 
      {
        divisionCode?: long(name='DivisionCode'),
        divisionLevel?: long(name='DivisionLevel'),
        divisionName?: string(name='DivisionName'),
        parentId?: long(name='ParentId'),
        pinyin?: string(name='Pinyin'),
      }
    ](name='DivisionList'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryChildDivisionCodeByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChildDivisionCodeByIdResponseBody(name='body'),
}

async function queryChildDivisionCodeByIdWithOptions(request: QueryChildDivisionCodeByIdRequest, runtime: Util.RuntimeOptions): QueryChildDivisionCodeByIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.divisionCode)) {
    body['DivisionCode'] = request.divisionCode;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryChildDivisionCodeById',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryChildDivisionCodeById(request: QueryChildDivisionCodeByIdRequest): QueryChildDivisionCodeByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChildDivisionCodeByIdWithOptions(request, runtime);
}

model QueryDistributionMallRequest {
  distributionMallId?: string(name='DistributionMallId', description='分销商城id'),
  tenantId?: string(name='TenantId', description='租户Id'),
}

model QueryDistributionMallResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    channelSupplierId?: string(name='ChannelSupplierId', description='渠道供应商id'),
    distributionMallId?: string(name='DistributionMallId', description='分销商城id'),
    distributionMallName?: string(name='DistributionMallName', description='分销商城名称'),
    distributionMallType?: string(name='DistributionMallType', description='商城模式'),
    distributorId?: string(name='DistributorId', description='分销商id'),
    endDate?: string(name='EndDate', description='结束时间'),
    startDate?: string(name='StartDate', description='开始时间'),
    status?: string(name='Status', description='分销商城状态'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryDistributionMallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDistributionMallResponseBody(name='body'),
}

async function queryDistributionMallWithOptions(request: QueryDistributionMallRequest, runtime: Util.RuntimeOptions): QueryDistributionMallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDistributionMall',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDistributionMall(request: QueryDistributionMallRequest): QueryDistributionMallResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDistributionMallWithOptions(request, runtime);
}

model QueryDistributionTradeStatusRequest {
  distributionSupplierId?: string(name='DistributionSupplierId', description='渠道供应商ID'),
  distributionTradeId?: string(name='DistributionTradeId', description='分销交易号'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model QueryDistributionTradeStatusResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: string(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryDistributionTradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDistributionTradeStatusResponseBody(name='body'),
}

async function queryDistributionTradeStatusWithOptions(request: QueryDistributionTradeStatusRequest, runtime: Util.RuntimeOptions): QueryDistributionTradeStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributionTradeId)) {
    body['DistributionTradeId'] = request.distributionTradeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDistributionTradeStatus',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDistributionTradeStatus(request: QueryDistributionTradeStatusRequest): QueryDistributionTradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDistributionTradeStatusWithOptions(request, runtime);
}

model QueryItemDetailRequest {
  distributionMallId?: string(name='DistributionMallId', description='分销商商城id'),
  distributorId?: string(name='DistributorId', description='分销商id'),
  lmItemId?: string(name='LmItemId', description='lm商品ID'),
  tenantId?: string(name='TenantId', description='租户Id'),
}

model QueryItemDetailResponseBody = {
  bizViewData?: map[string]any(name='BizViewData'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    auctionStatus?: int32(name='AuctionStatus', description='状态'),
    canNotBeSoldCode?: string(name='CanNotBeSoldCode', description='不可售code  可售时为null'),
    canNotBeSoldMassage?: string(name='CanNotBeSoldMassage', description='不可售Massage 可售时为null'),
    categoryId?: long(name='CategoryId', description='类目ID'),
    categoryIds?: [ long ](name='CategoryIds', description='类目ID，父类目在前，子类目在后'),
    centerInventory?: boolean(name='CenterInventory', description='true：中心库存；false：区域库存'),
    city?: string(name='City', description='商品所在省份：如浙江'),
    current?: string(name='Current', description='当前时间'),
    customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap', description='客户自定义属性'),
    descOption?: string(name='DescOption', description='商品详情介绍-图片介绍信息'),
    descPath?: string(name='DescPath', description='商品详情介绍-图片介绍，URL'),
    distributionMallId?: string(name='DistributionMallId', description='分销商城ID'),
    features?: map[string]string(name='Features', description='产品特征，从itemDO.Features转换而来'),
    firstPicUrl?: string(name='FirstPicUrl', description='itemDO.commonItemImageList第一张'),
    gmtModified?: string(name='GmtModified', description='修改时间'),
    hasQuantity?: boolean(name='HasQuantity', description='是否有库存，返回的是库存状态，有或者没有'),
    iforestProps?: [ map[string]string ](name='IforestProps', description='宝石路属性，关键属性，供Detail页面显示使用，从itemDO.itemProperties转换而来'),
    invoiceType?: int32(name='InvoiceType', description='发票类型,见 com.aliyun.linkedmall.itemservice.client.enums.BasicItemInvoiceTypeEnum'),
    isCanSell?: boolean(name='IsCanSell', description='是否可销售，目前追要判断了商品的状态是否正常，同时库存要求大于0;'),
    isSellerPayPostfee?: boolean(name='IsSellerPayPostfee', description='是否包邮'),
    itemDesc?: string(name='ItemDesc', description='描述'),
    itemExtendedPropModelMap?: map[string]ModelItemExtendedPropModelMapValue(name='ItemExtendedPropModelMap', description='商品扩展属性信息'),
    itemId?: long(name='ItemId', description='IC商品ID'),
    itemImages?: [ string ](name='ItemImages', description='商品图片URL，最多5张，一般是Detail上轮播，从itemDO.commonItemImageList属性转换而来。对应EPP的silders'),
    itemName?: string(name='ItemName'),
    itemTitle?: string(name='ItemTitle', description='商品名称'),
    itemTotalSimpleValue?: string(name='ItemTotalSimpleValue'),
    itemTotalValue?: int32(name='ItemTotalValue', description='总量库存值'),
    lmItemAttributeMap?: map[string]string(name='LmItemAttributeMap', description='Linkedmall 平台商品属性'),
    lmItemCategory?: string(name='LmItemCategory', description='商品在linkedmall平台的类型'),
    lmItemId?: string(name='LmItemId', description='LM商品ID'),
    lmShopId?: long(name='LmShopId', description='LM店铺ID'),
    mainPicUrl?: string(name='MainPicUrl', description='主图'),
    message?: string(name='Message', description='不可售原因'),
    minPoints?: long(name='MinPoints', description='商品最低价格（minPrice）对应的SKU中积分数量'),
    minPrice?: long(name='MinPrice', description='商品最低价格（分）。如果只有一个SKU，则直接为SKU上的销售价（减掉积分抵扣后），一般用在Detail页面，没有选择Sku时，显示的SKU里的最低价（减掉积分抵扣后）'),
    properties?: map[string][ string ](name='Properties', description='产品属性，产品参数，供Detail页面显示使用，从itemDO.itemProperties转换而来'),
    prov?: string(name='Prov', description='商品所在城市：如杭州'),
    quantity?: int32(name='Quantity', description='商品库存，如果只有一个SKU，则直接是SKU上的库存。如果商品有配送区域库存，且查询接口里指定了配送区域，则返回的是对应区域库存'),
    reservePrice?: long(name='ReservePrice', description='商品原价，可用于显示划线价'),
    securedTransactions?: int32(name='SecuredTransactions', description='是否开通担保交易 0 未开通，1 已开通，2 未设置, 3 审核中, 4 开通失败'),
    simpleQuantity?: string(name='SimpleQuantity', description='模糊化库存'),
    skuModels?: [ 
      {
        canNotBeSoldCode?: string(name='CanNotBeSoldCode', description='不可售code  可售时为null'),
        canNotBeSoldMassage?: string(name='CanNotBeSoldMassage', description='不可售Massage 可售时为null'),
        customizedAttributeMap?: map[string]string(name='CustomizedAttributeMap', description='客户自定义属性'),
        distributionMallId?: string(name='DistributionMallId', description='分销商城ID'),
        extJson?: string(name='ExtJson', description='预留扩展字段,JSON-Map结构'),
        gradePriceModels?: [ 
          {
            accessUrl?: string(name='AccessUrl'),
            canBuy?: boolean(name='CanBuy'),
            characteristicCode?: string(name='CharacteristicCode'),
            characteristicName?: string(name='CharacteristicName'),
            exclusive?: boolean(name='Exclusive'),
            icon?: string(name='Icon'),
            pointPrice?: long(name='PointPrice'),
            points?: long(name='Points'),
            pointsAmount?: long(name='PointsAmount'),
            priceCent?: long(name='PriceCent'),
            recommend?: boolean(name='Recommend'),
            showName?: string(name='ShowName'),
            subBizCode?: string(name='SubBizCode'),
            userLabelList?: [ string ](name='UserLabelList'),
          }
        ](name='GradePriceModels', description='sku维度  不同用户标签 不同价格'),
        hasQuantity?: boolean(name='HasQuantity', description='是否有库存，返回的是库存状态，有或者没有'),
        invoiceType?: int32(name='InvoiceType', description='发票类型,见 com.aliyun.linkedmall.itemservice.client.enums.BasicItemInvoiceTypeEnum'),
        itemId?: long(name='ItemId', description='IC商品ID'),
        lmItemId?: string(name='LmItemId', description='LM商品ID'),
        lmItemSkuStepPriceModels?: [ 
          {
            max?: int32(name='Max'),
            min?: int32(name='Min'),
            priceCent?: long(name='PriceCent'),
          }
        ](name='LmItemSkuStepPriceModels'),
        lmSkuAttributeMap?: map[string]string(name='LmSkuAttributeMap', description='Linkedmall 平台SKU的属性'),
        priceCent?: long(name='PriceCent', description='商品销售价格（分）'),
        quantity?: int32(name='Quantity', description='SKU库存。如果商品有配送区域库存，且查询接口里指定了配送区域，则返回的是对应区域库存'),
        reservePrice?: long(name='ReservePrice', description='IC SKU 一口价'),
        simpleQuantity?: string(name='SimpleQuantity', description='SKU模糊化库存'),
        skuDesc?: string(name='SkuDesc', description='规格描述'),
        skuId?: long(name='SkuId', description='skuId(如果一个品没有sku，则构造一个id为-1的sku。数量库里0和-1都是表示没有SKU的商品，DB 中统一使用-1)，如 3428785463017'),
        skuPicUrl?: string(name='SkuPicUrl', description='Sku图片'),
        skuPvs?: string(name='SkuPvs', description='Sku对应的属性PV值组合，如 1627207:28320;5919063:6536025;12304035:75366283;122216431:27772'),
        skuTitle?: string(name='SkuTitle', description='SKU对应的属性显示Title。多个属性组合值之间用斜线分隔。'),
        status?: int32(name='Status', description='商品规格对应的售卖状态'),
        supplierPrice?: long(name='SupplierPrice', description='供货价（分）'),
      }
    ](name='SkuModels', description='sku list'),
    skuPropertys?: [ 
      {
        id?: long(name='Id'),
        text?: string(name='Text'),
        values?: [ 
          {
            id?: long(name='Id'),
            text?: string(name='Text'),
          }
        ](name='Values'),
      }
    ](name='SkuPropertys', description='Sku属性PV对列表，用于渲染页面下单时，选择下单参数'),
    thirdPartyItemId?: string(name='ThirdPartyItemId', description='外部商品id (来自第三方的商品)'),
    thirdPartyName?: string(name='ThirdPartyName', description='商品来源 (标记第三方商品的来源)'),
    type?: int32(name='Type'),
    userType?: int32(name='UserType', description='卖家类型：可以用于区分商品类型，null或是0-集市卖家，1-天猫卖家，2-1688卖家，4-后端商家，8-1688云电商卖家'),
    videoPicUrl?: string(name='VideoPicUrl', description='视频封面url'),
    videoUrl?: string(name='VideoUrl', description='视频url'),
    virtualItemType?: string(name='VirtualItemType', description='虚拟商品类型,该字段为枚举类型，值为cardRoll（卡券）、rechageableCard（充值卡）、fuelCard（油卡）'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryItemDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryItemDetailResponseBody(name='body'),
}

async function queryItemDetailWithOptions(request: QueryItemDetailRequest, runtime: Util.RuntimeOptions): QueryItemDetailResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributionMallId)) {
    body['DistributionMallId'] = request.distributionMallId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.lmItemId)) {
    body['LmItemId'] = request.lmItemId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryItemDetail',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryItemDetail(request: QueryItemDetailRequest): QueryItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemDetailWithOptions(request, runtime);
}

model QueryLogistics4DistributionRequest {
  distributorId?: string(name='DistributorId', description='分销商ID'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId', description='主分销订单号'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model QueryLogistics4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: [ 
    {
      dataProvider?: string(name='DataProvider'),
      dataProviderTitle?: string(name='DataProviderTitle'),
      goods?: [ 
        {
          goodName?: string(name='GoodName'),
          lmItemid?: string(name='LmItemid'),
          quantity?: int32(name='Quantity'),
        }
      ](name='Goods'),
      logisticsCompanyCode?: string(name='LogisticsCompanyCode'),
      logisticsCompanyName?: string(name='LogisticsCompanyName'),
      logisticsDetailList?: [ 
        {
          ocurrTimeStr?: string(name='OcurrTimeStr'),
          standerdDesc?: string(name='StanderdDesc'),
        }
      ](name='LogisticsDetailList'),
      mailNo?: string(name='MailNo'),
    }
  ](name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryLogistics4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLogistics4DistributionResponseBody(name='body'),
}

async function queryLogistics4DistributionWithOptions(request: QueryLogistics4DistributionRequest, runtime: Util.RuntimeOptions): QueryLogistics4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryLogistics4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLogistics4Distribution(request: QueryLogistics4DistributionRequest): QueryLogistics4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLogistics4DistributionWithOptions(request, runtime);
}

model QueryOrderDetail4DistributionRequest {
  distributorId?: string(name='DistributorId', description='分销商ID'),
  mainDistributionOrderId?: string(name='MainDistributionOrderId', description='主分销订单号'),
  requestId?: string(name='RequestId', description='请求标识'),
}

model QueryOrderDetail4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    createDate?: string(name='CreateDate'),
    distributionOrderId?: string(name='DistributionOrderId'),
    distributorId?: string(name='DistributorId'),
    logisticsStatus?: string(name='LogisticsStatus'),
    mainDistributionOrderId?: string(name='MainDistributionOrderId'),
    orderAmount?: string(name='OrderAmount'),
    orderStatus?: string(name='OrderStatus'),
    subOrderList?: [ 
      {
        itemPic?: string(name='ItemPic'),
        itemPriceList?: [ 
          {
            fundAmountMoney?: string(name='FundAmountMoney'),
          }
        ](name='ItemPriceList'),
        itemTitle?: string(name='ItemTitle'),
        lmItemId?: string(name='LmItemId'),
        mainDistributionOrderId?: string(name='MainDistributionOrderId'),
        number?: string(name='Number'),
        orderStatus?: string(name='OrderStatus'),
        skuId?: string(name='SkuId'),
        skuName?: string(name='SkuName'),
        subDistributionOrderId?: string(name='SubDistributionOrderId'),
      }
    ](name='SubOrderList'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryOrderDetail4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderDetail4DistributionResponseBody(name='body'),
}

async function queryOrderDetail4DistributionWithOptions(request: QueryOrderDetail4DistributionRequest, runtime: Util.RuntimeOptions): QueryOrderDetail4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.mainDistributionOrderId)) {
    body['MainDistributionOrderId'] = request.mainDistributionOrderId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderDetail4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderDetail4Distribution(request: QueryOrderDetail4DistributionRequest): QueryOrderDetail4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderDetail4DistributionWithOptions(request, runtime);
}

model QueryOrderList4DistributionRequest {
  distributorId?: string(name='DistributorId', description='分销商ID'),
  filterOption?: string(name='FilterOption', description='订单过滤条件'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页行数'),
  requestId?: string(name='RequestId', description='请求标识'),
}

model QueryOrderList4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: [ 
    {
      createDate?: string(name='CreateDate'),
      distributionOrderId?: string(name='DistributionOrderId'),
      distributorId?: string(name='DistributorId'),
      logisticsStatus?: string(name='LogisticsStatus'),
      mainDistributionOrderId?: string(name='MainDistributionOrderId'),
      orderAmount?: string(name='OrderAmount'),
      orderStatus?: string(name='OrderStatus'),
      subOrderList?: [ 
        {
          itemPic?: string(name='ItemPic'),
          itemPriceList?: [ 
            {
              fundAmountMoney?: string(name='FundAmountMoney'),
            }
          ](name='ItemPriceList'),
          itemTitle?: string(name='ItemTitle'),
          lmItemId?: string(name='LmItemId'),
          mainDistributionOrderId?: string(name='MainDistributionOrderId'),
          number?: string(name='Number'),
          orderStatus?: string(name='OrderStatus'),
          skuId?: string(name='SkuId'),
          skuName?: string(name='SkuName'),
          subDistributionOrderId?: string(name='SubDistributionOrderId'),
        }
      ](name='SubOrderList'),
    }
  ](name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryOrderList4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderList4DistributionResponseBody(name='body'),
}

async function queryOrderList4DistributionWithOptions(request: QueryOrderList4DistributionRequest, runtime: Util.RuntimeOptions): QueryOrderList4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.filterOption)) {
    body['FilterOption'] = request.filterOption;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrderList4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrderList4Distribution(request: QueryOrderList4DistributionRequest): QueryOrderList4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrderList4DistributionWithOptions(request, runtime);
}

model QueryRefundApplicationDetail4DistributionRequest {
  distributorId?: string(name='DistributorId', description='分销商ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model QueryRefundApplicationDetail4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: {
    applyDisputeDesc?: string(name='ApplyDisputeDesc'),
    applyReasonText?: {
      reasonTextId?: string(name='ReasonTextId'),
      reasonTips?: string(name='ReasonTips'),
    }(name='ApplyReasonText'),
    bizClaimType?: int32(name='BizClaimType'),
    disputeCreateTime?: string(name='DisputeCreateTime'),
    disputeDesc?: string(name='DisputeDesc'),
    disputeEndTime?: string(name='DisputeEndTime'),
    disputeId?: long(name='DisputeId'),
    disputeStatus?: int32(name='DisputeStatus'),
    disputeType?: int32(name='DisputeType'),
    distributionOrderId?: string(name='DistributionOrderId'),
    maxRefundFeeData?: {
      maxRefundFee?: long(name='MaxRefundFee'),
      minRefundFee?: long(name='MinRefundFee'),
    }(name='MaxRefundFeeData'),
    orderLogisticsStatus?: int32(name='OrderLogisticsStatus'),
    realRefundFee?: long(name='RealRefundFee'),
    refundFee?: long(name='RefundFee'),
    refunderAddress?: string(name='RefunderAddress'),
    refunderName?: string(name='RefunderName'),
    refunderTel?: string(name='RefunderTel'),
    refunderZipCode?: string(name='RefunderZipCode'),
    returnGoodCount?: long(name='ReturnGoodCount'),
    returnGoodLogisticsStatus?: int32(name='ReturnGoodLogisticsStatus'),
    sellerAgreeMsg?: string(name='SellerAgreeMsg'),
    sellerRefuseAgreementMessage?: string(name='SellerRefuseAgreementMessage'),
    sellerRefuseReason?: string(name='SellerRefuseReason'),
    subDistributionOrderId?: string(name='SubDistributionOrderId'),
  }(name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model QueryRefundApplicationDetail4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRefundApplicationDetail4DistributionResponseBody(name='body'),
}

async function queryRefundApplicationDetail4DistributionWithOptions(request: QueryRefundApplicationDetail4DistributionRequest, runtime: Util.RuntimeOptions): QueryRefundApplicationDetail4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRefundApplicationDetail4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRefundApplicationDetail4Distribution(request: QueryRefundApplicationDetail4DistributionRequest): QueryRefundApplicationDetail4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRefundApplicationDetail4DistributionWithOptions(request, runtime);
}

model RenderDistributionOrderRequest {
  buyerId?: string(name='BuyerId', description='分销真实买家ID'),
  deliveryAddress?: string(name='DeliveryAddress', description='收货地址'),
  distributionSupplierId?: string(name='DistributionSupplierId', description='渠道供应商ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  extInfo?: string(name='ExtInfo', description='扩展信息'),
  itemInfoLists?: [ 
    {
      distributionMallId?: string(name='DistributionMallId'),
      lmItemId?: string(name='LmItemId'),
      quantity?: int32(name='Quantity'),
      skuId?: string(name='SkuId'),
    }
  ](name='ItemInfoLists', description='商品信息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model RenderDistributionOrderShrinkRequest {
  buyerId?: string(name='BuyerId', description='分销真实买家ID'),
  deliveryAddress?: string(name='DeliveryAddress', description='收货地址'),
  distributionSupplierId?: string(name='DistributionSupplierId', description='渠道供应商ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  extInfo?: string(name='ExtInfo', description='扩展信息'),
  itemInfoListsShrink?: string(name='ItemInfoLists', description='商品信息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model RenderDistributionOrderResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  model?: [ 
    {
      deliveryInfos?: [ 
        {
          displayName?: string(name='DisplayName'),
          id?: string(name='Id'),
          postFee?: long(name='PostFee'),
          serviceType?: string(name='ServiceType'),
        }
      ](name='DeliveryInfos'),
      lmItemInfos?: [ 
        {
          canSell?: string(name='CanSell'),
          lmItemId?: string(name='LmItemId'),
          message?: string(name='Message'),
          quantity?: int32(name='Quantity'),
          skuId?: string(name='SkuId'),
        }
      ](name='LmItemInfos'),
    }
  ](name='Model', description='请求结果数据'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model RenderDistributionOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenderDistributionOrderResponseBody(name='body'),
}

async function renderDistributionOrderWithOptions(tmpReq: RenderDistributionOrderRequest, runtime: Util.RuntimeOptions): RenderDistributionOrderResponse {
  Util.validateModel(tmpReq);
  var request = new RenderDistributionOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemInfoLists)) {
    request.itemInfoListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemInfoLists, 'ItemInfoLists', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.buyerId)) {
    body['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.deliveryAddress)) {
    body['DeliveryAddress'] = request.deliveryAddress;
  }
  if (!Util.isUnset(request.distributionSupplierId)) {
    body['DistributionSupplierId'] = request.distributionSupplierId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.itemInfoListsShrink)) {
    body['ItemInfoLists'] = request.itemInfoListsShrink;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenderDistributionOrder',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renderDistributionOrder(request: RenderDistributionOrderRequest): RenderDistributionOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return renderDistributionOrderWithOptions(request, runtime);
}

model SubmitReturnGoodLogistics4DistributionRequest {
  cpCode?: string(name='CpCode', description='公司代码'),
  disputeId?: long(name='DisputeId', description='纠纷ID'),
  distributorId?: string(name='DistributorId', description='分销商ID'),
  logisticsNo?: string(name='LogisticsNo', description='物流单号'),
  requestId?: string(name='RequestId', description='请求ID'),
  subDistributionOrderId?: string(name='SubDistributionOrderId', description='子分销订单ID'),
}

model SubmitReturnGoodLogistics4DistributionResponseBody = {
  bizViewData?: map[string]any(name='BizViewData', description='渠道公共数据'),
  code?: string(name='Code', description='返回的执行结果码， 正确为字符串 0000'),
  logsId?: string(name='LogsId', description='每次请求操作对应的操作日志号，由系统自动生成，返回给租户，可用于排查问题，双方日志中统一透出此标识'),
  message?: string(name='Message', description='错误消息'),
  pageNumber?: long(name='PageNumber', description='当前页'),
  pageSize?: long(name='PageSize', description='pageSize'),
  requestId?: string(name='RequestId', description='POP请求流水号，建议租户日志中也输出此流水号，双方排查问题方便'),
  subCode?: string(name='SubCode', description='错误子代码。一般用于显示业务类的错误代码，一般建议关注此类错误'),
  subMessage?: string(name='SubMessage', description='业务处理相关的错误信息，一般建议关注此类错误'),
  success?: boolean(name='Success', description='本次执行的结果成功与否'),
  totalCount?: long(name='TotalCount', description='总数量'),
}

model SubmitReturnGoodLogistics4DistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitReturnGoodLogistics4DistributionResponseBody(name='body'),
}

async function submitReturnGoodLogistics4DistributionWithOptions(request: SubmitReturnGoodLogistics4DistributionRequest, runtime: Util.RuntimeOptions): SubmitReturnGoodLogistics4DistributionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cpCode)) {
    body['CpCode'] = request.cpCode;
  }
  if (!Util.isUnset(request.disputeId)) {
    body['DisputeId'] = request.disputeId;
  }
  if (!Util.isUnset(request.distributorId)) {
    body['DistributorId'] = request.distributorId;
  }
  if (!Util.isUnset(request.logisticsNo)) {
    body['LogisticsNo'] = request.logisticsNo;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.subDistributionOrderId)) {
    body['SubDistributionOrderId'] = request.subDistributionOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitReturnGoodLogistics4Distribution',
    version = '2022-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitReturnGoodLogistics4Distribution(request: SubmitReturnGoodLogistics4DistributionRequest): SubmitReturnGoodLogistics4DistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitReturnGoodLogistics4DistributionWithOptions(request, runtime);
}

model ModelItemExtendedPropModelMapValue = {
  name?: string(name='Name'),
  valueStart?: string(name='ValueStart'),
  valueEnd?: string(name='ValueEnd'),
  key?: string(name='Key'),
  childProps?: map[string]any(name='ChildProps'),
}

