/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-chengdu = 'nas.aliyuncs.com',
    me-east-1 = 'nas.ap-northeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'nas.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('nas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddClientToBlackListRequest {
  regionId?: string(name='RegionId'),
  fileSystemId?: string(name='FileSystemId'),
  clientIP?: string(name='ClientIP'),
  clientToken?: string(name='ClientToken'),
}

model AddClientToBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddClientToBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: AddClientToBlackListResponseBody(name='body'),
}

async function addClientToBlackListWithOptions(request: AddClientToBlackListRequest, runtime: Util.RuntimeOptions): AddClientToBlackListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddClientToBlackList', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addClientToBlackList(request: AddClientToBlackListRequest): AddClientToBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addClientToBlackListWithOptions(request, runtime);
}

model AddTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model AddTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsResponseBody(name='body'),
}

async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTags', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  fileSystemIds?: string(name='FileSystemIds'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyAutoSnapshotPolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  fileSystemIds?: string(name='FileSystemIds'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelAutoSnapshotPolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelDirQuotaRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  userType?: string(name='UserType'),
  userId?: string(name='UserId'),
}

model CancelDirQuotaResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model CancelDirQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CancelDirQuotaResponseBody(name='body'),
}

async function cancelDirQuotaWithOptions(request: CancelDirQuotaRequest, runtime: Util.RuntimeOptions): CancelDirQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelDirQuota', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelDirQuota(request: CancelDirQuotaRequest): CancelDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDirQuotaWithOptions(request, runtime);
}

model CancelLifecycleRetrieveJobRequest {
  jobId?: string(name='JobId'),
}

model CancelLifecycleRetrieveJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelLifecycleRetrieveJobResponseBody(name='body'),
}

async function cancelLifecycleRetrieveJobWithOptions(request: CancelLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): CancelLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelLifecycleRetrieveJob', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelLifecycleRetrieveJob(request: CancelLifecycleRetrieveJobRequest): CancelLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelLifecycleRetrieveJobWithOptions(request, runtime);
}

model CancelRecycleBinJobRequest {
  jobId?: string(name='JobId'),
}

model CancelRecycleBinJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelRecycleBinJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRecycleBinJobResponseBody(name='body'),
}

async function cancelRecycleBinJobWithOptions(request: CancelRecycleBinJobRequest, runtime: Util.RuntimeOptions): CancelRecycleBinJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CancelRecycleBinJob', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function cancelRecycleBinJob(request: CancelRecycleBinJobRequest): CancelRecycleBinJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRecycleBinJobWithOptions(request, runtime);
}

model CreateAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessGroupType?: string(name='AccessGroupType'),
  description?: string(name='Description'),
  fileSystemType?: string(name='FileSystemType'),
}

model CreateAccessGroupResponseBody = {
  accessGroupName?: string(name='AccessGroupName'),
  requestId?: string(name='RequestId'),
}

model CreateAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccessGroupResponseBody(name='body'),
}

async function createAccessGroupWithOptions(request: CreateAccessGroupRequest, runtime: Util.RuntimeOptions): CreateAccessGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccessGroup', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccessGroup(request: CreateAccessGroupRequest): CreateAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessGroupWithOptions(request, runtime);
}

model CreateAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  RWAccessType?: string(name='RWAccessType'),
  userAccessType?: string(name='UserAccessType'),
  priority?: int32(name='Priority'),
  fileSystemType?: string(name='FileSystemType'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
}

model CreateAccessRuleResponseBody = {
  accessRuleId?: string(name='AccessRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccessRuleResponseBody(name='body'),
}

async function createAccessRuleWithOptions(request: CreateAccessRuleRequest, runtime: Util.RuntimeOptions): CreateAccessRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccessRule', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccessRule(request: CreateAccessRuleRequest): CreateAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessRuleWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  repeatWeekdays?: string(name='RepeatWeekdays'),
  timePoints?: string(name='TimePoints'),
  retentionDays?: int32(name='RetentionDays'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
  fileSystemType?: string(name='FileSystemType'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  requestId?: string(name='RequestId'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAutoSnapshotPolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateFileSystemRequest {
  fileSystemType?: string(name='FileSystemType'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration'),
  capacity?: long(name='Capacity'),
  bandwidth?: long(name='Bandwidth'),
  storageType?: string(name='StorageType'),
  zoneId?: string(name='ZoneId'),
  protocolType?: string(name='ProtocolType'),
  encryptType?: int32(name='EncryptType'),
  snapshotId?: string(name='SnapshotId'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  kmsKeyId?: string(name='KmsKeyId'),
  dryRun?: boolean(name='DryRun'),
}

model CreateFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
  fileSystemId?: string(name='FileSystemId'),
}

model CreateFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileSystemResponseBody(name='body'),
}

async function createFileSystemWithOptions(request: CreateFileSystemRequest, runtime: Util.RuntimeOptions): CreateFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFileSystem', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileSystemWithOptions(request, runtime);
}

model CreateLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
  URI?: string(name='URI'),
  bindDN?: string(name='BindDN'),
  searchBase?: string(name='SearchBase'),
}

model CreateLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLDAPConfigResponseBody(name='body'),
}

async function createLDAPConfigWithOptions(request: CreateLDAPConfigRequest, runtime: Util.RuntimeOptions): CreateLDAPConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLDAPConfig', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLDAPConfig(request: CreateLDAPConfigRequest): CreateLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLDAPConfigWithOptions(request, runtime);
}

model CreateLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
  path?: string(name='Path'),
  lifecycleRuleName?: string(name='LifecycleRuleName'),
  storageType?: string(name='StorageType'),
  paths?: [ string ](name='Paths'),
}

model CreateLifecyclePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLifecyclePolicyResponseBody(name='body'),
}

async function createLifecyclePolicyWithOptions(request: CreateLifecyclePolicyRequest, runtime: Util.RuntimeOptions): CreateLifecyclePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLifecyclePolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLifecyclePolicy(request: CreateLifecyclePolicyRequest): CreateLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecyclePolicyWithOptions(request, runtime);
}

model CreateLifecycleRetrieveJobRequest {
  fileSystemId?: string(name='FileSystemId'),
  paths?: [ string ](name='Paths'),
}

model CreateLifecycleRetrieveJobResponseBody = {
  requestId?: string(name='RequestId'),
  jobId?: string(name='JobId'),
}

model CreateLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLifecycleRetrieveJobResponseBody(name='body'),
}

async function createLifecycleRetrieveJobWithOptions(request: CreateLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): CreateLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLifecycleRetrieveJob', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLifecycleRetrieveJob(request: CreateLifecycleRetrieveJobRequest): CreateLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecycleRetrieveJobWithOptions(request, runtime);
}

model CreateMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  accessGroupName?: string(name='AccessGroupName'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  securityGroupId?: string(name='SecurityGroupId'),
  enableIpv6?: boolean(name='EnableIpv6'),
  dryRun?: boolean(name='DryRun'),
}

model CreateMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  mountTargetExtra?: {
    dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
  }(name='MountTargetExtra'),
}

model CreateMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMountTargetResponseBody(name='body'),
}

async function createMountTargetWithOptions(request: CreateMountTargetRequest, runtime: Util.RuntimeOptions): CreateMountTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMountTarget', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMountTarget(request: CreateMountTargetRequest): CreateMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMountTargetWithOptions(request, runtime);
}

model CreateRecycleBinDeleteJobRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileId?: string(name='FileId'),
  clientToken?: string(name='ClientToken'),
}

model CreateRecycleBinDeleteJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
}

model CreateRecycleBinDeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecycleBinDeleteJobResponseBody(name='body'),
}

async function createRecycleBinDeleteJobWithOptions(request: CreateRecycleBinDeleteJobRequest, runtime: Util.RuntimeOptions): CreateRecycleBinDeleteJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateRecycleBinDeleteJob', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createRecycleBinDeleteJob(request: CreateRecycleBinDeleteJobRequest): CreateRecycleBinDeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecycleBinDeleteJobWithOptions(request, runtime);
}

model CreateRecycleBinRestoreJobRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileId?: string(name='FileId'),
  targetFileId?: string(name='TargetFileId'),
  clientToken?: string(name='ClientToken'),
}

model CreateRecycleBinRestoreJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  jobId?: string(name='JobId'),
}

model CreateRecycleBinRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecycleBinRestoreJobResponseBody(name='body'),
}

async function createRecycleBinRestoreJobWithOptions(request: CreateRecycleBinRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRecycleBinRestoreJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateRecycleBinRestoreJob', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createRecycleBinRestoreJob(request: CreateRecycleBinRestoreJobRequest): CreateRecycleBinRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecycleBinRestoreJobWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  fileSystemId?: string(name='FileSystemId'),
  snapshotName?: string(name='SnapshotName'),
  description?: string(name='Description'),
  retentionDays?: int32(name='RetentionDays'),
}

model CreateSnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  requestId?: string(name='RequestId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshot', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  fileSystemType?: string(name='FileSystemType'),
}

model DeleteAccessGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessGroupResponseBody(name='body'),
}

async function deleteAccessGroupWithOptions(request: DeleteAccessGroupRequest, runtime: Util.RuntimeOptions): DeleteAccessGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccessGroup', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccessGroup(request: DeleteAccessGroupRequest): DeleteAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessGroupWithOptions(request, runtime);
}

model DeleteAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  fileSystemType?: string(name='FileSystemType'),
}

model DeleteAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessRuleResponseBody(name='body'),
}

async function deleteAccessRuleWithOptions(request: DeleteAccessRuleRequest, runtime: Util.RuntimeOptions): DeleteAccessRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccessRule', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccessRule(request: DeleteAccessRuleRequest): DeleteAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessRuleWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAutoSnapshotPolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileSystemResponseBody(name='body'),
}

async function deleteFileSystemWithOptions(request: DeleteFileSystemRequest, runtime: Util.RuntimeOptions): DeleteFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFileSystem', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileSystemWithOptions(request, runtime);
}

model DeleteLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DeleteLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLDAPConfigResponseBody(name='body'),
}

async function deleteLDAPConfigWithOptions(request: DeleteLDAPConfigRequest, runtime: Util.RuntimeOptions): DeleteLDAPConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLDAPConfig', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLDAPConfig(request: DeleteLDAPConfigRequest): DeleteLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLDAPConfigWithOptions(request, runtime);
}

model DeleteLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
}

model DeleteLifecyclePolicyResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model DeleteLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLifecyclePolicyResponseBody(name='body'),
}

async function deleteLifecyclePolicyWithOptions(request: DeleteLifecyclePolicyRequest, runtime: Util.RuntimeOptions): DeleteLifecyclePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLifecyclePolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLifecyclePolicy(request: DeleteLifecyclePolicyRequest): DeleteLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLifecyclePolicyWithOptions(request, runtime);
}

model DeleteMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
}

model DeleteMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMountTargetResponseBody(name='body'),
}

async function deleteMountTargetWithOptions(request: DeleteMountTargetRequest, runtime: Util.RuntimeOptions): DeleteMountTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMountTarget', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMountTarget(request: DeleteMountTargetRequest): DeleteMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMountTargetWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  snapshotId?: string(name='SnapshotId'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshot', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DescribeAccessGroupsRequest {
  accessGroupName?: string(name='AccessGroupName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  useUTCDateTime?: boolean(name='UseUTCDateTime'),
  fileSystemType?: string(name='FileSystemType'),
}

model DescribeAccessGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  accessGroups?: {
    accessGroup?: [ 
    {
      accessGroupName?: string(name='AccessGroupName'),
      description?: string(name='Description'),
      accessGroupType?: string(name='AccessGroupType'),
      ruleCount?: int32(name='RuleCount'),
      mountTargetCount?: int32(name='MountTargetCount'),
    }
  ](name='AccessGroup')
  }(name='AccessGroups'),
}

model DescribeAccessGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessGroupsResponseBody(name='body'),
}

async function describeAccessGroupsWithOptions(request: DescribeAccessGroupsRequest, runtime: Util.RuntimeOptions): DescribeAccessGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccessGroups', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccessGroups(request: DescribeAccessGroupsRequest): DescribeAccessGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessGroupsWithOptions(request, runtime);
}

model DescribeAccessRulesRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  fileSystemType?: string(name='FileSystemType'),
}

model DescribeAccessRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  accessRules?: {
    accessRule?: [ 
    {
      accessRuleId?: string(name='AccessRuleId'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      RWAccess?: string(name='RWAccess'),
      userAccess?: string(name='UserAccess'),
      priority?: int32(name='Priority'),
    }
  ](name='AccessRule')
  }(name='AccessRules'),
}

model DescribeAccessRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessRulesResponseBody(name='body'),
}

async function describeAccessRulesWithOptions(request: DescribeAccessRulesRequest, runtime: Util.RuntimeOptions): DescribeAccessRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccessRules', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccessRules(request: DescribeAccessRulesRequest): DescribeAccessRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessRulesWithOptions(request, runtime);
}

model DescribeAutoSnapshotPoliciesRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  fileSystemType?: string(name='FileSystemType'),
}

model DescribeAutoSnapshotPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  autoSnapshotPolicies?: {
    autoSnapshotPolicy?: [ 
    {
      timePoints?: string(name='TimePoints'),
      status?: string(name='Status'),
      repeatWeekdays?: string(name='RepeatWeekdays'),
      autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
      createTime?: string(name='CreateTime'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      retentionDays?: int32(name='RetentionDays'),
      fileSystemNums?: int32(name='FileSystemNums'),
      regionId?: string(name='RegionId'),
    }
  ](name='AutoSnapshotPolicy')
  }(name='AutoSnapshotPolicies'),
}

model DescribeAutoSnapshotPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoSnapshotPoliciesResponseBody(name='body'),
}

async function describeAutoSnapshotPoliciesWithOptions(request: DescribeAutoSnapshotPoliciesRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoSnapshotPolicies', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoSnapshotPolicies(request: DescribeAutoSnapshotPoliciesRequest): DescribeAutoSnapshotPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPoliciesWithOptions(request, runtime);
}

model DescribeAutoSnapshotTasksRequest {
  fileSystemIds?: string(name='FileSystemIds'),
  autoSnapshotPolicyIds?: string(name='AutoSnapshotPolicyIds'),
  fileSystemType?: string(name='FileSystemType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAutoSnapshotTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  autoSnapshotTasks?: {
    autoSnapshotTask?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      sourceFileSystemId?: string(name='SourceFileSystemId'),
    }
  ](name='AutoSnapshotTask')
  }(name='AutoSnapshotTasks'),
}

model DescribeAutoSnapshotTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoSnapshotTasksResponseBody(name='body'),
}

async function describeAutoSnapshotTasksWithOptions(request: DescribeAutoSnapshotTasksRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoSnapshotTasks', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoSnapshotTasks(request: DescribeAutoSnapshotTasksRequest): DescribeAutoSnapshotTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotTasksWithOptions(request, runtime);
}

model DescribeBlackListClientsRequest {
  regionId?: string(name='RegionId'),
  fileSystemId?: string(name='FileSystemId'),
  clientIP?: string(name='ClientIP'),
}

model DescribeBlackListClientsResponseBody = {
  clients?: string(name='Clients'),
  requestId?: string(name='RequestId'),
}

model DescribeBlackListClientsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlackListClientsResponseBody(name='body'),
}

async function describeBlackListClientsWithOptions(request: DescribeBlackListClientsRequest, runtime: Util.RuntimeOptions): DescribeBlackListClientsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBlackListClients', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBlackListClients(request: DescribeBlackListClientsRequest): DescribeBlackListClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlackListClientsWithOptions(request, runtime);
}

model DescribeDirQuotasRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDirQuotasResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  dirQuotaInfos?: [ 
    {
      path?: string(name='Path'),
      status?: string(name='Status'),
      dirInode?: string(name='DirInode'),
      userQuotaInfos?: [ 
        {
          fileCountReal?: long(name='FileCountReal'),
          userType?: string(name='UserType'),
          fileCountLimit?: long(name='FileCountLimit'),
          userId?: string(name='UserId'),
          sizeLimit?: long(name='SizeLimit'),
          quotaType?: string(name='QuotaType'),
          sizeReal?: long(name='SizeReal'),
        }
      ](name='UserQuotaInfos'),
    }
  ](name='DirQuotaInfos'),
}

model DescribeDirQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirQuotasResponseBody(name='body'),
}

async function describeDirQuotasWithOptions(request: DescribeDirQuotasRequest, runtime: Util.RuntimeOptions): DescribeDirQuotasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDirQuotas', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDirQuotas(request: DescribeDirQuotasRequest): DescribeDirQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirQuotasWithOptions(request, runtime);
}

model DescribeFileSystemsRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileSystemType?: string(name='FileSystemType'),
  vpcId?: string(name='VpcId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeFileSystemsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  fileSystems?: {
    fileSystem?: [ 
    {
      status?: string(name='Status'),
      capacity?: long(name='Capacity'),
      meteredIASize?: long(name='MeteredIASize'),
      createTime?: string(name='CreateTime'),
      chargeType?: string(name='ChargeType'),
      storageType?: string(name='StorageType'),
      regionId?: string(name='RegionId'),
      fileSystemType?: string(name='FileSystemType'),
      fileSystemId?: string(name='FileSystemId'),
      meteredSize?: long(name='MeteredSize'),
      encryptType?: int32(name='EncryptType'),
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      version?: string(name='Version'),
      expiredTime?: string(name='ExpiredTime'),
      zoneId?: string(name='ZoneId'),
      protocolType?: string(name='ProtocolType'),
      KMSKeyId?: string(name='KMSKeyId'),
      mountTargets?: {
        mountTarget?: [ 
        {
          vpcId?: string(name='VpcId'),
          status?: string(name='Status'),
          mountTargetDomain?: string(name='MountTargetDomain'),
          accessGroupName?: string(name='AccessGroupName'),
          dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
          vswId?: string(name='VswId'),
          networkType?: string(name='NetworkType'),
          clientMasterNodes?: {
            clientMasterNode?: [ 
            {
              ecsIp?: string(name='EcsIp'),
              ecsId?: string(name='EcsId'),
              defaultPasswd?: string(name='DefaultPasswd'),
            }
          ](name='ClientMasterNode')
          }(name='ClientMasterNodes'),
          tags?: {
            tag?: [ 
            {
              key?: string(name='Key'),
              value?: string(name='Value'),
            }
          ](name='Tag')
          }(name='Tags'),
        }
      ](name='MountTarget')
      }(name='MountTargets'),
      packages?: {
        package?: [ 
        {
          startTime?: string(name='StartTime'),
          packageId?: string(name='PackageId'),
          expiredTime?: string(name='ExpiredTime'),
          size?: long(name='Size'),
          packageType?: string(name='PackageType'),
        }
      ](name='Package')
      }(name='Packages'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      supportedFeatures?: {
        supportedFeature?: [ string ](name='SupportedFeature')
      }(name='SupportedFeatures'),
      ldap?: {
        searchBase?: string(name='SearchBase'),
        URI?: string(name='URI'),
        bindDN?: string(name='BindDN'),
      }(name='Ldap'),
    }
  ](name='FileSystem')
  }(name='FileSystems'),
}

model DescribeFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileSystemsResponseBody(name='body'),
}

async function describeFileSystemsWithOptions(request: DescribeFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFileSystems', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFileSystems(request: DescribeFileSystemsRequest): DescribeFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemsWithOptions(request, runtime);
}

model DescribeFileSystemStatisticsRequest {
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeFileSystemStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  fileSystemStatistics?: {
    fileSystemStatistic?: [ 
    {
      expiringCount?: int32(name='ExpiringCount'),
      fileSystemType?: string(name='FileSystemType'),
      meteredSize?: long(name='MeteredSize'),
      totalCount?: int32(name='TotalCount'),
      expiredCount?: int32(name='ExpiredCount'),
    }
  ](name='FileSystemStatistic')
  }(name='FileSystemStatistics'),
  fileSystems?: {
    fileSystem?: [ 
    {
      status?: string(name='Status'),
      meteredIASize?: long(name='MeteredIASize'),
      capacity?: long(name='Capacity'),
      createTime?: string(name='CreateTime'),
      chargeType?: string(name='ChargeType'),
      storageType?: string(name='StorageType'),
      regionId?: string(name='RegionId'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemType?: string(name='FileSystemType'),
      meteredSize?: long(name='MeteredSize'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      zoneId?: string(name='ZoneId'),
      protocolType?: string(name='ProtocolType'),
      packages?: {
        package?: [ 
        {
          startTime?: string(name='StartTime'),
          packageId?: string(name='PackageId'),
          expiredTime?: string(name='ExpiredTime'),
          size?: long(name='Size'),
        }
      ](name='Package')
      }(name='Packages'),
    }
  ](name='FileSystem')
  }(name='FileSystems'),
}

model DescribeFileSystemStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileSystemStatisticsResponseBody(name='body'),
}

async function describeFileSystemStatisticsWithOptions(request: DescribeFileSystemStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFileSystemStatistics', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFileSystemStatistics(request: DescribeFileSystemStatisticsRequest): DescribeFileSystemStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemStatisticsWithOptions(request, runtime);
}

model DescribeLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DescribeLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
  ldap?: {
    searchBase?: string(name='SearchBase'),
    URI?: string(name='URI'),
    bindDN?: string(name='BindDN'),
  }(name='Ldap'),
}

model DescribeLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLDAPConfigResponseBody(name='body'),
}

async function describeLDAPConfigWithOptions(request: DescribeLDAPConfigRequest, runtime: Util.RuntimeOptions): DescribeLDAPConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLDAPConfig', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLDAPConfig(request: DescribeLDAPConfigRequest): DescribeLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLDAPConfigWithOptions(request, runtime);
}

model DescribeLifecyclePoliciesRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeLifecyclePoliciesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  lifecyclePolicies?: [ 
    {
      fileSystemId?: string(name='FileSystemId'),
      lifecycleRuleName?: string(name='LifecycleRuleName'),
      createTime?: string(name='CreateTime'),
      path?: string(name='Path'),
      storageType?: string(name='StorageType'),
      lifecyclePolicyName?: string(name='LifecyclePolicyName'),
      paths?: [ string ](name='Paths'),
    }
  ](name='LifecyclePolicies'),
}

model DescribeLifecyclePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLifecyclePoliciesResponseBody(name='body'),
}

async function describeLifecyclePoliciesWithOptions(request: DescribeLifecyclePoliciesRequest, runtime: Util.RuntimeOptions): DescribeLifecyclePoliciesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeLifecyclePolicies', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeLifecyclePolicies(request: DescribeLifecyclePoliciesRequest): DescribeLifecyclePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLifecyclePoliciesWithOptions(request, runtime);
}

model DescribeLogAnalysisRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeLogAnalysisResponseBody = {
  code?: string(name='Code'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  analyses?: {
    analysis?: [ 
    {
      metaKey?: string(name='MetaKey'),
      metaValue?: {
        logstore?: string(name='Logstore'),
        roleArn?: string(name='RoleArn'),
        project?: string(name='Project'),
        region?: string(name='Region'),
      }(name='MetaValue'),
    }
  ](name='Analysis')
  }(name='Analyses'),
}

model DescribeLogAnalysisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogAnalysisResponseBody(name='body'),
}

async function describeLogAnalysisWithOptions(request: DescribeLogAnalysisRequest, runtime: Util.RuntimeOptions): DescribeLogAnalysisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogAnalysis', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogAnalysis(request: DescribeLogAnalysisRequest): DescribeLogAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogAnalysisWithOptions(request, runtime);
}

model DescribeMountedClientsRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  fileSystemId?: string(name='FileSystemId'),
  clientIP?: string(name='ClientIP'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeMountedClientsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  clients?: {
    client?: [ 
    {
      clientIP?: string(name='ClientIP'),
    }
  ](name='Client')
  }(name='Clients'),
}

model DescribeMountedClientsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMountedClientsResponseBody(name='body'),
}

async function describeMountedClientsWithOptions(request: DescribeMountedClientsRequest, runtime: Util.RuntimeOptions): DescribeMountedClientsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMountedClients', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMountedClients(request: DescribeMountedClientsRequest): DescribeMountedClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountedClientsWithOptions(request, runtime);
}

model DescribeMountTargetsRequest {
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
}

model DescribeMountTargetsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  mountTargets?: {
    mountTarget?: [ 
    {
      vpcId?: string(name='VpcId'),
      status?: string(name='Status'),
      mountTargetDomain?: string(name='MountTargetDomain'),
      accessGroup?: string(name='AccessGroup'),
      dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
      vswId?: string(name='VswId'),
      networkType?: string(name='NetworkType'),
      clientMasterNodes?: {
        clientMasterNode?: [ 
        {
          ecsIp?: string(name='EcsIp'),
          ecsId?: string(name='EcsId'),
          defaultPasswd?: string(name='DefaultPasswd'),
        }
      ](name='ClientMasterNode')
      }(name='ClientMasterNodes'),
    }
  ](name='MountTarget')
  }(name='MountTargets'),
}

model DescribeMountTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMountTargetsResponseBody(name='body'),
}

async function describeMountTargetsWithOptions(request: DescribeMountTargetsRequest, runtime: Util.RuntimeOptions): DescribeMountTargetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMountTargets', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMountTargets(request: DescribeMountTargetsRequest): DescribeMountTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountTargetsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  fileSystemType?: string(name='FileSystemType'),
}

model DescribeRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  regions?: {
    region?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  fileSystemType?: string(name='FileSystemType'),
  fileSystemId?: string(name='FileSystemId'),
  snapshotIds?: string(name='SnapshotIds'),
  snapshotName?: string(name='SnapshotName'),
  snapshotType?: string(name='SnapshotType'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  snapshots?: {
    snapshot?: [ 
    {
      status?: string(name='Status'),
      progress?: string(name='Progress'),
      createTime?: string(name='CreateTime'),
      sourceFileSystemId?: string(name='SourceFileSystemId'),
      remainTime?: int32(name='RemainTime'),
      retentionDays?: int32(name='RetentionDays'),
      sourceFileSystemSize?: long(name='SourceFileSystemSize'),
      snapshotName?: string(name='SnapshotName'),
      sourceFileSystemVersion?: string(name='SourceFileSystemVersion'),
      encryptType?: int32(name='EncryptType'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
    }
  ](name='Snapshot')
  }(name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshots', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeStoragePackagesRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  useUTCDateTime?: boolean(name='UseUTCDateTime'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeStoragePackagesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  packages?: {
    package?: [ 
    {
      status?: string(name='Status'),
      fileSystemId?: string(name='FileSystemId'),
      startTime?: string(name='StartTime'),
      expiredTime?: string(name='ExpiredTime'),
      size?: long(name='Size'),
      storageType?: string(name='StorageType'),
      packageId?: string(name='PackageId'),
    }
  ](name='Package')
  }(name='Packages'),
}

model DescribeStoragePackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStoragePackagesResponseBody(name='body'),
}

async function describeStoragePackagesWithOptions(request: DescribeStoragePackagesRequest, runtime: Util.RuntimeOptions): DescribeStoragePackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStoragePackages', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStoragePackages(request: DescribeStoragePackagesRequest): DescribeStoragePackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoragePackagesWithOptions(request, runtime);
}

model DescribeTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
      fileSystemIds?: {
        fileSystemId?: [ string ](name='FileSystemId')
      }(name='FileSystemIds'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTags', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId'),
  fileSystemType?: string(name='FileSystemType'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      performance?: {
        protocol?: [ string ](name='Protocol')
      }(name='Performance'),
      capacity?: {
        protocol?: [ string ](name='Protocol')
      }(name='Capacity'),
      zoneId?: string(name='ZoneId'),
      instanceTypes?: {
        instanceType?: [ 
        {
          storageType?: string(name='StorageType'),
          protocolType?: string(name='ProtocolType'),
        }
      ](name='InstanceType')
      }(name='InstanceTypes'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DisableAndCleanRecycleBinRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DisableAndCleanRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DisableAndCleanRecycleBinResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAndCleanRecycleBinResponseBody(name='body'),
}

async function disableAndCleanRecycleBinWithOptions(request: DisableAndCleanRecycleBinRequest, runtime: Util.RuntimeOptions): DisableAndCleanRecycleBinResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DisableAndCleanRecycleBin', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function disableAndCleanRecycleBin(request: DisableAndCleanRecycleBinRequest): DisableAndCleanRecycleBinResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAndCleanRecycleBinWithOptions(request, runtime);
}

model EnableRecycleBinRequest {
  fileSystemId?: string(name='FileSystemId'),
  reservedDays?: long(name='ReservedDays'),
}

model EnableRecycleBinResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model EnableRecycleBinResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRecycleBinResponseBody(name='body'),
}

async function enableRecycleBinWithOptions(request: EnableRecycleBinRequest, runtime: Util.RuntimeOptions): EnableRecycleBinResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableRecycleBin', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableRecycleBin(request: EnableRecycleBinRequest): EnableRecycleBinResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRecycleBinWithOptions(request, runtime);
}

model GetDirectoryOrFilePropertiesRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
}

model GetDirectoryOrFilePropertiesResponseBody = {
  entry?: {
    type?: string(name='Type'),
    hasInfrequentAccessFile?: boolean(name='HasInfrequentAccessFile'),
    MTime?: string(name='MTime'),
    ATime?: string(name='ATime'),
    size?: long(name='Size'),
    CTime?: string(name='CTime'),
    storageType?: string(name='StorageType'),
    name?: string(name='Name'),
    retrieveTime?: string(name='RetrieveTime'),
    inode?: string(name='Inode'),
  }(name='Entry'),
  requestId?: string(name='RequestId'),
}

model GetDirectoryOrFilePropertiesResponse = {
  headers: map[string]string(name='headers'),
  body: GetDirectoryOrFilePropertiesResponseBody(name='body'),
}

async function getDirectoryOrFilePropertiesWithOptions(request: GetDirectoryOrFilePropertiesRequest, runtime: Util.RuntimeOptions): GetDirectoryOrFilePropertiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDirectoryOrFileProperties', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDirectoryOrFileProperties(request: GetDirectoryOrFilePropertiesRequest): GetDirectoryOrFilePropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectoryOrFilePropertiesWithOptions(request, runtime);
}

model GetRecycleBinAttributeRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model GetRecycleBinAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  recycleBinAttribute?: {
    size?: long(name='Size'),
    status?: string(name='Status'),
    reservedDays?: long(name='ReservedDays'),
    enableTime?: string(name='EnableTime'),
  }(name='RecycleBinAttribute'),
}

model GetRecycleBinAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecycleBinAttributeResponseBody(name='body'),
}

async function getRecycleBinAttributeWithOptions(request: GetRecycleBinAttributeRequest, runtime: Util.RuntimeOptions): GetRecycleBinAttributeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetRecycleBinAttribute', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getRecycleBinAttribute(request: GetRecycleBinAttributeRequest): GetRecycleBinAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecycleBinAttributeWithOptions(request, runtime);
}

model ListDirectoriesAndFilesRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  nextToken?: string(name='NextToken'),
  storageType?: string(name='StorageType'),
  directoryOnly?: boolean(name='DirectoryOnly'),
  maxResults?: long(name='MaxResults'),
}

model ListDirectoriesAndFilesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  entries?: [ 
    {
      type?: string(name='Type'),
      hasInfrequentAccessFile?: boolean(name='HasInfrequentAccessFile'),
      ctime?: string(name='Ctime'),
      mtime?: string(name='Mtime'),
      size?: long(name='Size'),
      storageType?: string(name='StorageType'),
      atime?: string(name='Atime'),
      name?: string(name='Name'),
      retrieveTime?: string(name='RetrieveTime'),
      inode?: string(name='Inode'),
      fileId?: string(name='FileId'),
    }
  ](name='Entries'),
}

model ListDirectoriesAndFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectoriesAndFilesResponseBody(name='body'),
}

async function listDirectoriesAndFilesWithOptions(request: ListDirectoriesAndFilesRequest, runtime: Util.RuntimeOptions): ListDirectoriesAndFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDirectoriesAndFiles', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDirectoriesAndFiles(request: ListDirectoriesAndFilesRequest): ListDirectoriesAndFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoriesAndFilesWithOptions(request, runtime);
}

model ListLifecycleRetrieveJobsRequest {
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  fileSystemId?: string(name='FileSystemId'),
  status?: string(name='Status'),
}

model ListLifecycleRetrieveJobsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  lifecycleRetrieveJobs?: [ 
    {
      fileSystemId?: string(name='FileSystemId'),
      status?: string(name='Status'),
      discoveredFileCount?: long(name='DiscoveredFileCount'),
      updateTime?: string(name='UpdateTime'),
      paths?: [ string ](name='Paths'),
      retrievedFileCount?: long(name='RetrievedFileCount'),
      jobId?: string(name='JobId'),
      createTime?: string(name='CreateTime'),
    }
  ](name='LifecycleRetrieveJobs'),
}

model ListLifecycleRetrieveJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLifecycleRetrieveJobsResponseBody(name='body'),
}

async function listLifecycleRetrieveJobsWithOptions(request: ListLifecycleRetrieveJobsRequest, runtime: Util.RuntimeOptions): ListLifecycleRetrieveJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLifecycleRetrieveJobs', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLifecycleRetrieveJobs(request: ListLifecycleRetrieveJobsRequest): ListLifecycleRetrieveJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLifecycleRetrieveJobsWithOptions(request, runtime);
}

model ListRecentlyRecycledDirectoriesRequest {
  fileSystemId?: string(name='FileSystemId'),
  nextToken?: string(name='NextToken'),
  maxResults?: long(name='MaxResults'),
}

model ListRecentlyRecycledDirectoriesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='Id of the request'),
  entries?: [ 
    {
      fileId?: string(name='FileId'),
      path?: string(name='Path'),
      name?: string(name='Name'),
      lastDeleteTime?: string(name='LastDeleteTime'),
    }
  ](name='Entries'),
}

model ListRecentlyRecycledDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecentlyRecycledDirectoriesResponseBody(name='body'),
}

async function listRecentlyRecycledDirectoriesWithOptions(request: ListRecentlyRecycledDirectoriesRequest, runtime: Util.RuntimeOptions): ListRecentlyRecycledDirectoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRecentlyRecycledDirectories', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRecentlyRecycledDirectories(request: ListRecentlyRecycledDirectoriesRequest): ListRecentlyRecycledDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecentlyRecycledDirectoriesWithOptions(request, runtime);
}

model ListRecycleBinJobsRequest {
  fileSystemId?: string(name='FileSystemId'),
  jobId?: string(name='JobId'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  status?: string(name='Status'),
}

model ListRecycleBinJobsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  jobs?: [ 
    {
      id?: string(name='Id'),
      type?: string(name='Type'),
      fileId?: string(name='FileId'),
      status?: string(name='Status'),
      errorCode?: string(name='ErrorCode'),
      progress?: string(name='Progress'),
      createTime?: string(name='CreateTime'),
      fileName?: string(name='FileName'),
      errorMessage?: string(name='ErrorMessage'),
    }
  ](name='Jobs'),
}

model ListRecycleBinJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecycleBinJobsResponseBody(name='body'),
}

async function listRecycleBinJobsWithOptions(request: ListRecycleBinJobsRequest, runtime: Util.RuntimeOptions): ListRecycleBinJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRecycleBinJobs', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRecycleBinJobs(request: ListRecycleBinJobsRequest): ListRecycleBinJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecycleBinJobsWithOptions(request, runtime);
}

model ListRecycledDirectoriesAndFilesRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileId?: string(name='FileId'),
  nextToken?: string(name='NextToken'),
  maxResults?: long(name='MaxResults'),
}

model ListRecycledDirectoriesAndFilesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken', description='Id of the request'),
  entries?: [ 
    {
      fileId?: string(name='FileId'),
      type?: string(name='Type'),
      name?: string(name='Name'),
      deleteTime?: string(name='DeleteTime'),
      inode?: string(name='Inode'),
      ATime?: string(name='ATime'),
      MTime?: string(name='MTime'),
      CTime?: string(name='CTime'),
      size?: long(name='Size'),
    }
  ](name='Entries'),
}

model ListRecycledDirectoriesAndFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecycledDirectoriesAndFilesResponseBody(name='body'),
}

async function listRecycledDirectoriesAndFilesWithOptions(request: ListRecycledDirectoriesAndFilesRequest, runtime: Util.RuntimeOptions): ListRecycledDirectoriesAndFilesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRecycledDirectoriesAndFiles', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRecycledDirectoriesAndFiles(request: ListRecycledDirectoriesAndFilesRequest): ListRecycledDirectoriesAndFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecycledDirectoriesAndFilesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  description?: string(name='Description'),
  fileSystemType?: string(name='FileSystemType'),
}

model ModifyAccessGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccessGroupResponseBody(name='body'),
}

async function modifyAccessGroupWithOptions(request: ModifyAccessGroupRequest, runtime: Util.RuntimeOptions): ModifyAccessGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccessGroup', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccessGroup(request: ModifyAccessGroupRequest): ModifyAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessGroupWithOptions(request, runtime);
}

model ModifyAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  RWAccessType?: string(name='RWAccessType'),
  userAccessType?: string(name='UserAccessType'),
  priority?: int32(name='Priority'),
  fileSystemType?: string(name='FileSystemType'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
}

model ModifyAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccessRuleResponseBody(name='body'),
}

async function modifyAccessRuleWithOptions(request: ModifyAccessRuleRequest, runtime: Util.RuntimeOptions): ModifyAccessRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccessRule', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccessRule(request: ModifyAccessRuleRequest): ModifyAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessRuleWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
  repeatWeekdays?: string(name='RepeatWeekdays'),
  retentionDays?: int32(name='RetentionDays'),
  timePoints?: string(name='TimePoints'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoSnapshotPolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  description?: string(name='Description'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFileSystemResponseBody(name='body'),
}

async function modifyFileSystemWithOptions(request: ModifyFileSystemRequest, runtime: Util.RuntimeOptions): ModifyFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyFileSystem', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFileSystemWithOptions(request, runtime);
}

model ModifyLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
  URI?: string(name='URI'),
  bindDN?: string(name='BindDN'),
  searchBase?: string(name='SearchBase'),
}

model ModifyLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLDAPConfigResponseBody(name='body'),
}

async function modifyLDAPConfigWithOptions(request: ModifyLDAPConfigRequest, runtime: Util.RuntimeOptions): ModifyLDAPConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLDAPConfig', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLDAPConfig(request: ModifyLDAPConfigRequest): ModifyLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLDAPConfigWithOptions(request, runtime);
}

model ModifyLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
  path?: string(name='Path'),
  lifecycleRuleName?: string(name='LifecycleRuleName'),
  storageType?: string(name='StorageType'),
}

model ModifyLifecyclePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLifecyclePolicyResponseBody(name='body'),
}

async function modifyLifecyclePolicyWithOptions(request: ModifyLifecyclePolicyRequest, runtime: Util.RuntimeOptions): ModifyLifecyclePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLifecyclePolicy', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLifecyclePolicy(request: ModifyLifecyclePolicyRequest): ModifyLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLifecyclePolicyWithOptions(request, runtime);
}

model ModifyMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  accessGroupName?: string(name='AccessGroupName'),
  status?: string(name='Status'),
  dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
}

model ModifyMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMountTargetResponseBody(name='body'),
}

async function modifyMountTargetWithOptions(request: ModifyMountTargetRequest, runtime: Util.RuntimeOptions): ModifyMountTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyMountTarget', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyMountTarget(request: ModifyMountTargetRequest): ModifyMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMountTargetWithOptions(request, runtime);
}

model OpenNASServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenNASServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenNASServiceResponseBody(name='body'),
}

async function openNASServiceWithOptions(runtime: Util.RuntimeOptions): OpenNASServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('OpenNASService', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openNASService(): OpenNASServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openNASServiceWithOptions(runtime);
}

model RemoveClientFromBlackListRequest {
  regionId?: string(name='RegionId'),
  fileSystemId?: string(name='FileSystemId'),
  clientIP?: string(name='ClientIP'),
  clientToken?: string(name='ClientToken'),
}

model RemoveClientFromBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveClientFromBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveClientFromBlackListResponseBody(name='body'),
}

async function removeClientFromBlackListWithOptions(request: RemoveClientFromBlackListRequest, runtime: Util.RuntimeOptions): RemoveClientFromBlackListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveClientFromBlackList', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeClientFromBlackList(request: RemoveClientFromBlackListRequest): RemoveClientFromBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeClientFromBlackListWithOptions(request, runtime);
}

model RemoveTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model RemoveTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTags', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model ResetFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  snapshotId?: string(name='SnapshotId'),
}

model ResetFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ResetFileSystemResponseBody(name='body'),
}

async function resetFileSystemWithOptions(request: ResetFileSystemRequest, runtime: Util.RuntimeOptions): ResetFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetFileSystem', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetFileSystem(request: ResetFileSystemRequest): ResetFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetFileSystemWithOptions(request, runtime);
}

model RetryLifecycleRetrieveJobRequest {
  jobId?: string(name='JobId'),
}

model RetryLifecycleRetrieveJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model RetryLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  body: RetryLifecycleRetrieveJobResponseBody(name='body'),
}

async function retryLifecycleRetrieveJobWithOptions(request: RetryLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): RetryLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RetryLifecycleRetrieveJob', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function retryLifecycleRetrieveJob(request: RetryLifecycleRetrieveJobRequest): RetryLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryLifecycleRetrieveJobWithOptions(request, runtime);
}

model SetDirQuotaRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  quotaType?: string(name='QuotaType'),
  userType?: string(name='UserType'),
  userId?: string(name='UserId'),
  sizeLimit?: long(name='SizeLimit'),
  fileCountLimit?: long(name='FileCountLimit'),
}

model SetDirQuotaResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model SetDirQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: SetDirQuotaResponseBody(name='body'),
}

async function setDirQuotaWithOptions(request: SetDirQuotaRequest, runtime: Util.RuntimeOptions): SetDirQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDirQuota', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDirQuota(request: SetDirQuotaRequest): SetDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirQuotaWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateRecycleBinAttributeRequest {
  fileSystemId?: string(name='FileSystemId'),
  reservedDays?: long(name='ReservedDays'),
}

model UpdateRecycleBinAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateRecycleBinAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecycleBinAttributeResponseBody(name='body'),
}

async function updateRecycleBinAttributeWithOptions(request: UpdateRecycleBinAttributeRequest, runtime: Util.RuntimeOptions): UpdateRecycleBinAttributeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('UpdateRecycleBinAttribute', '2017-06-26', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function updateRecycleBinAttribute(request: UpdateRecycleBinAttributeRequest): UpdateRecycleBinAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecycleBinAttributeWithOptions(request, runtime);
}

model UpgradeFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  capacity?: long(name='Capacity'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model UpgradeFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeFileSystemResponseBody(name='body'),
}

async function upgradeFileSystemWithOptions(request: UpgradeFileSystemRequest, runtime: Util.RuntimeOptions): UpgradeFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeFileSystem', '2017-06-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeFileSystem(request: UpgradeFileSystemRequest): UpgradeFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeFileSystemWithOptions(request, runtime);
}

