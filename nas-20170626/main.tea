/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-chengdu = 'nas.aliyuncs.com',
    me-east-1 = 'nas.ap-northeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'nas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('nas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddClientToBlackListRequest {
  clientIP?: string(name='ClientIP'),
  clientToken?: string(name='ClientToken'),
  fileSystemId?: string(name='FileSystemId'),
  regionId?: string(name='RegionId'),
}

model AddClientToBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddClientToBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddClientToBlackListResponseBody(name='body'),
}

async function addClientToBlackListWithOptions(request: AddClientToBlackListRequest, runtime: Util.RuntimeOptions): AddClientToBlackListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIP)) {
    query['ClientIP'] = request.clientIP;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddClientToBlackList',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addClientToBlackList(request: AddClientToBlackListRequest): AddClientToBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addClientToBlackListWithOptions(request, runtime);
}

model AddTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model AddTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagsResponseBody(name='body'),
}

async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTags',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  fileSystemIds?: string(name='FileSystemIds'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.fileSystemIds)) {
    query['FileSystemIds'] = request.fileSystemIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAutoSnapshotPolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ApplyDataFlowAutoRefreshRequest {
  autoRefreshInterval?: long(name='AutoRefreshInterval'),
  autoRefreshPolicy?: string(name='AutoRefreshPolicy'),
  autoRefreshs?: [ 
    {
      refreshPath?: string(name='RefreshPath'),
    }
  ](name='AutoRefreshs'),
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model ApplyDataFlowAutoRefreshResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApplyDataFlowAutoRefreshResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyDataFlowAutoRefreshResponseBody(name='body'),
}

async function applyDataFlowAutoRefreshWithOptions(request: ApplyDataFlowAutoRefreshRequest, runtime: Util.RuntimeOptions): ApplyDataFlowAutoRefreshResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRefreshInterval)) {
    query['AutoRefreshInterval'] = request.autoRefreshInterval;
  }
  if (!Util.isUnset(request.autoRefreshPolicy)) {
    query['AutoRefreshPolicy'] = request.autoRefreshPolicy;
  }
  if (!Util.isUnset(request.autoRefreshs)) {
    query['AutoRefreshs'] = request.autoRefreshs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyDataFlowAutoRefresh',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyDataFlowAutoRefresh(request: ApplyDataFlowAutoRefreshRequest): ApplyDataFlowAutoRefreshResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDataFlowAutoRefreshWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  fileSystemIds?: string(name='FileSystemIds'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemIds)) {
    query['FileSystemIds'] = request.fileSystemIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAutoSnapshotPolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelDataFlowAutoRefreshRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  refreshPath?: string(name='RefreshPath'),
}

model CancelDataFlowAutoRefreshResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelDataFlowAutoRefreshResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDataFlowAutoRefreshResponseBody(name='body'),
}

async function cancelDataFlowAutoRefreshWithOptions(request: CancelDataFlowAutoRefreshRequest, runtime: Util.RuntimeOptions): CancelDataFlowAutoRefreshResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.refreshPath)) {
    query['RefreshPath'] = request.refreshPath;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelDataFlowAutoRefresh',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelDataFlowAutoRefresh(request: CancelDataFlowAutoRefreshRequest): CancelDataFlowAutoRefreshResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDataFlowAutoRefreshWithOptions(request, runtime);
}

model CancelDataFlowTaskRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  taskId?: string(name='TaskId'),
}

model CancelDataFlowTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelDataFlowTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDataFlowTaskResponseBody(name='body'),
}

async function cancelDataFlowTaskWithOptions(request: CancelDataFlowTaskRequest, runtime: Util.RuntimeOptions): CancelDataFlowTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelDataFlowTask',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelDataFlowTask(request: CancelDataFlowTaskRequest): CancelDataFlowTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDataFlowTaskWithOptions(request, runtime);
}

model CancelDirQuotaRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  userId?: string(name='UserId'),
  userType?: string(name='UserType'),
}

model CancelDirQuotaResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelDirQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelDirQuotaResponseBody(name='body'),
}

async function cancelDirQuotaWithOptions(request: CancelDirQuotaRequest, runtime: Util.RuntimeOptions): CancelDirQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelDirQuota',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelDirQuota(request: CancelDirQuotaRequest): CancelDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDirQuotaWithOptions(request, runtime);
}

model CancelLifecycleRetrieveJobRequest {
  jobId?: string(name='JobId'),
}

model CancelLifecycleRetrieveJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelLifecycleRetrieveJobResponseBody(name='body'),
}

async function cancelLifecycleRetrieveJobWithOptions(request: CancelLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): CancelLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelLifecycleRetrieveJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelLifecycleRetrieveJob(request: CancelLifecycleRetrieveJobRequest): CancelLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelLifecycleRetrieveJobWithOptions(request, runtime);
}

model CancelRecycleBinJobRequest {
  jobId?: string(name='JobId'),
}

model CancelRecycleBinJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelRecycleBinJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelRecycleBinJobResponseBody(name='body'),
}

async function cancelRecycleBinJobWithOptions(request: CancelRecycleBinJobRequest, runtime: Util.RuntimeOptions): CancelRecycleBinJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelRecycleBinJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRecycleBinJob(request: CancelRecycleBinJobRequest): CancelRecycleBinJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRecycleBinJobWithOptions(request, runtime);
}

model CreateAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessGroupType?: string(name='AccessGroupType'),
  description?: string(name='Description'),
  fileSystemType?: string(name='FileSystemType'),
}

model CreateAccessGroupResponseBody = {
  accessGroupName?: string(name='AccessGroupName'),
  requestId?: string(name='RequestId'),
}

model CreateAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessGroupResponseBody(name='body'),
}

async function createAccessGroupWithOptions(request: CreateAccessGroupRequest, runtime: Util.RuntimeOptions): CreateAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.accessGroupType)) {
    query['AccessGroupType'] = request.accessGroupType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessGroup',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccessGroup(request: CreateAccessGroupRequest): CreateAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessGroupWithOptions(request, runtime);
}

model CreateAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  fileSystemType?: string(name='FileSystemType'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  priority?: int32(name='Priority'),
  RWAccessType?: string(name='RWAccessType'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  userAccessType?: string(name='UserAccessType'),
}

model CreateAccessRuleResponseBody = {
  accessRuleId?: string(name='AccessRuleId'),
  requestId?: string(name='RequestId'),
}

model CreateAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessRuleResponseBody(name='body'),
}

async function createAccessRuleWithOptions(request: CreateAccessRuleRequest, runtime: Util.RuntimeOptions): CreateAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.RWAccessType)) {
    query['RWAccessType'] = request.RWAccessType;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.userAccessType)) {
    query['UserAccessType'] = request.userAccessType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessRule',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccessRule(request: CreateAccessRuleRequest): CreateAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessRuleWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
  fileSystemType?: string(name='FileSystemType'),
  repeatWeekdays?: string(name='RepeatWeekdays'),
  retentionDays?: int32(name='RetentionDays'),
  timePoints?: string(name='TimePoints'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  requestId?: string(name='RequestId'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyName)) {
    query['AutoSnapshotPolicyName'] = request.autoSnapshotPolicyName;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.repeatWeekdays)) {
    query['RepeatWeekdays'] = request.repeatWeekdays;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.timePoints)) {
    query['TimePoints'] = request.timePoints;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoSnapshotPolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateDataFlowRequest {
  autoRefreshInterval?: long(name='AutoRefreshInterval'),
  autoRefreshPolicy?: string(name='AutoRefreshPolicy'),
  autoRefreshs?: [ 
    {
      refreshPath?: string(name='RefreshPath'),
    }
  ](name='AutoRefreshs'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  fsetId?: string(name='FsetId'),
  sourceSecurityType?: string(name='SourceSecurityType'),
  sourceStorage?: string(name='SourceStorage'),
  throughput?: long(name='Throughput'),
}

model CreateDataFlowResponseBody = {
  dataFlowId?: string(name='DataFlowId'),
  requestId?: string(name='RequestId'),
}

model CreateDataFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataFlowResponseBody(name='body'),
}

async function createDataFlowWithOptions(request: CreateDataFlowRequest, runtime: Util.RuntimeOptions): CreateDataFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRefreshInterval)) {
    query['AutoRefreshInterval'] = request.autoRefreshInterval;
  }
  if (!Util.isUnset(request.autoRefreshPolicy)) {
    query['AutoRefreshPolicy'] = request.autoRefreshPolicy;
  }
  if (!Util.isUnset(request.autoRefreshs)) {
    query['AutoRefreshs'] = request.autoRefreshs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fsetId)) {
    query['FsetId'] = request.fsetId;
  }
  if (!Util.isUnset(request.sourceSecurityType)) {
    query['SourceSecurityType'] = request.sourceSecurityType;
  }
  if (!Util.isUnset(request.sourceStorage)) {
    query['SourceStorage'] = request.sourceStorage;
  }
  if (!Util.isUnset(request.throughput)) {
    query['Throughput'] = request.throughput;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataFlow',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataFlow(request: CreateDataFlowRequest): CreateDataFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataFlowWithOptions(request, runtime);
}

model CreateDataFlowTaskRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dataType?: string(name='DataType'),
  directory?: string(name='Directory'),
  dryRun?: boolean(name='DryRun'),
  entryList?: string(name='EntryList'),
  fileSystemId?: string(name='FileSystemId'),
  srcTaskId?: string(name='SrcTaskId'),
  taskAction?: string(name='TaskAction'),
}

model CreateDataFlowTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateDataFlowTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataFlowTaskResponseBody(name='body'),
}

async function createDataFlowTaskWithOptions(request: CreateDataFlowTaskRequest, runtime: Util.RuntimeOptions): CreateDataFlowTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.directory)) {
    query['Directory'] = request.directory;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.entryList)) {
    query['EntryList'] = request.entryList;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.srcTaskId)) {
    query['SrcTaskId'] = request.srcTaskId;
  }
  if (!Util.isUnset(request.taskAction)) {
    query['TaskAction'] = request.taskAction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataFlowTask',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataFlowTask(request: CreateDataFlowTaskRequest): CreateDataFlowTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataFlowTaskWithOptions(request, runtime);
}

model CreateFileRequest {
  fileSystemId?: string(name='FileSystemId'),
  owner?: string(name='Owner'),
  ownerAccessInheritable?: boolean(name='OwnerAccessInheritable'),
  path?: string(name='Path'),
  type?: string(name='Type'),
}

model CreateFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileResponseBody(name='body'),
}

async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.ownerAccessInheritable)) {
    query['OwnerAccessInheritable'] = request.ownerAccessInheritable;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFileSystemRequest {
  bandwidth?: long(name='Bandwidth'),
  capacity?: long(name='Capacity'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  duration?: int32(name='Duration'),
  encryptType?: int32(name='EncryptType'),
  fileSystemType?: string(name='FileSystemType'),
  kmsKeyId?: string(name='KmsKeyId'),
  protocolType?: string(name='ProtocolType'),
  snapshotId?: string(name='SnapshotId'),
  storageType?: string(name='StorageType'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model CreateFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId'),
  requestId?: string(name='RequestId'),
}

model CreateFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileSystemResponseBody(name='body'),
}

async function createFileSystemWithOptions(request: CreateFileSystemRequest, runtime: Util.RuntimeOptions): CreateFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.kmsKeyId)) {
    query['KmsKeyId'] = request.kmsKeyId;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileSystem',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileSystemWithOptions(request, runtime);
}

model CreateFilesetRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  fileSystemPath?: string(name='FileSystemPath'),
}

model CreateFilesetResponseBody = {
  fsetId?: string(name='FsetId'),
  requestId?: string(name='RequestId'),
}

model CreateFilesetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFilesetResponseBody(name='body'),
}

async function createFilesetWithOptions(request: CreateFilesetRequest, runtime: Util.RuntimeOptions): CreateFilesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fileSystemPath)) {
    query['FileSystemPath'] = request.fileSystemPath;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileset',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFileset(request: CreateFilesetRequest): CreateFilesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFilesetWithOptions(request, runtime);
}

model CreateLDAPConfigRequest {
  bindDN?: string(name='BindDN'),
  fileSystemId?: string(name='FileSystemId'),
  searchBase?: string(name='SearchBase'),
  URI?: string(name='URI'),
}

model CreateLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLDAPConfigResponseBody(name='body'),
}

async function createLDAPConfigWithOptions(request: CreateLDAPConfigRequest, runtime: Util.RuntimeOptions): CreateLDAPConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindDN)) {
    query['BindDN'] = request.bindDN;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.searchBase)) {
    query['SearchBase'] = request.searchBase;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLDAPConfig',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLDAPConfig(request: CreateLDAPConfigRequest): CreateLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLDAPConfigWithOptions(request, runtime);
}

model CreateLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
  lifecycleRuleName?: string(name='LifecycleRuleName'),
  path?: string(name='Path'),
  paths?: [ string ](name='Paths'),
  storageType?: string(name='StorageType'),
}

model CreateLifecyclePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLifecyclePolicyResponseBody(name='body'),
}

async function createLifecyclePolicyWithOptions(request: CreateLifecyclePolicyRequest, runtime: Util.RuntimeOptions): CreateLifecyclePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.lifecyclePolicyName)) {
    query['LifecyclePolicyName'] = request.lifecyclePolicyName;
  }
  if (!Util.isUnset(request.lifecycleRuleName)) {
    query['LifecycleRuleName'] = request.lifecycleRuleName;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.paths)) {
    query['Paths'] = request.paths;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLifecyclePolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLifecyclePolicy(request: CreateLifecyclePolicyRequest): CreateLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecyclePolicyWithOptions(request, runtime);
}

model CreateLifecycleRetrieveJobRequest {
  fileSystemId?: string(name='FileSystemId'),
  paths?: [ string ](name='Paths'),
}

model CreateLifecycleRetrieveJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLifecycleRetrieveJobResponseBody(name='body'),
}

async function createLifecycleRetrieveJobWithOptions(request: CreateLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): CreateLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.paths)) {
    query['Paths'] = request.paths;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLifecycleRetrieveJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLifecycleRetrieveJob(request: CreateLifecycleRetrieveJobRequest): CreateLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecycleRetrieveJobWithOptions(request, runtime);
}

model CreateMountTargetRequest {
  accessGroupName?: string(name='AccessGroupName'),
  dryRun?: boolean(name='DryRun'),
  enableIpv6?: boolean(name='EnableIpv6'),
  fileSystemId?: string(name='FileSystemId'),
  networkType?: string(name='NetworkType'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
}

model CreateMountTargetResponseBody = {
  mountTargetDomain?: string(name='MountTargetDomain'),
  mountTargetExtra?: {
    dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
  }(name='MountTargetExtra'),
  requestId?: string(name='RequestId'),
}

model CreateMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMountTargetResponseBody(name='body'),
}

async function createMountTargetWithOptions(request: CreateMountTargetRequest, runtime: Util.RuntimeOptions): CreateMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enableIpv6)) {
    query['EnableIpv6'] = request.enableIpv6;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMountTarget(request: CreateMountTargetRequest): CreateMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMountTargetWithOptions(request, runtime);
}

model CreateProtocolMountTargetRequest {
  accessGroupName?: string(name='AccessGroupName'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  fsetId?: string(name='FsetId'),
  path?: string(name='Path'),
  protocolServiceId?: string(name='ProtocolServiceId'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
}

model CreateProtocolMountTargetResponseBody = {
  exportId?: string(name='ExportId'),
  requestId?: string(name='RequestId'),
}

model CreateProtocolMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProtocolMountTargetResponseBody(name='body'),
}

async function createProtocolMountTargetWithOptions(request: CreateProtocolMountTargetRequest, runtime: Util.RuntimeOptions): CreateProtocolMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fsetId)) {
    query['FsetId'] = request.fsetId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.protocolServiceId)) {
    query['ProtocolServiceId'] = request.protocolServiceId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProtocolMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProtocolMountTarget(request: CreateProtocolMountTargetRequest): CreateProtocolMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProtocolMountTargetWithOptions(request, runtime);
}

model CreateProtocolServiceRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  protocolSpec?: string(name='ProtocolSpec'),
  protocolType?: string(name='ProtocolType'),
  throughput?: int32(name='Throughput'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
}

model CreateProtocolServiceResponseBody = {
  protocolServiceId?: string(name='ProtocolServiceId'),
  requestId?: string(name='RequestId'),
}

model CreateProtocolServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProtocolServiceResponseBody(name='body'),
}

async function createProtocolServiceWithOptions(request: CreateProtocolServiceRequest, runtime: Util.RuntimeOptions): CreateProtocolServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.protocolSpec)) {
    query['ProtocolSpec'] = request.protocolSpec;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.throughput)) {
    query['Throughput'] = request.throughput;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProtocolService',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProtocolService(request: CreateProtocolServiceRequest): CreateProtocolServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProtocolServiceWithOptions(request, runtime);
}

model CreateRecycleBinDeleteJobRequest {
  clientToken?: string(name='ClientToken'),
  fileId?: string(name='FileId'),
  fileSystemId?: string(name='FileSystemId'),
}

model CreateRecycleBinDeleteJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateRecycleBinDeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRecycleBinDeleteJobResponseBody(name='body'),
}

async function createRecycleBinDeleteJobWithOptions(request: CreateRecycleBinDeleteJobRequest, runtime: Util.RuntimeOptions): CreateRecycleBinDeleteJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecycleBinDeleteJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRecycleBinDeleteJob(request: CreateRecycleBinDeleteJobRequest): CreateRecycleBinDeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecycleBinDeleteJobWithOptions(request, runtime);
}

model CreateRecycleBinRestoreJobRequest {
  clientToken?: string(name='ClientToken'),
  fileId?: string(name='FileId'),
  fileSystemId?: string(name='FileSystemId'),
  targetFileId?: string(name='TargetFileId'),
}

model CreateRecycleBinRestoreJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateRecycleBinRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRecycleBinRestoreJobResponseBody(name='body'),
}

async function createRecycleBinRestoreJobWithOptions(request: CreateRecycleBinRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRecycleBinRestoreJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecycleBinRestoreJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRecycleBinRestoreJob(request: CreateRecycleBinRestoreJobRequest): CreateRecycleBinRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecycleBinRestoreJobWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
  retentionDays?: int32(name='RetentionDays'),
  snapshotName?: string(name='SnapshotName'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  fileSystemType?: string(name='FileSystemType'),
}

model DeleteAccessGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessGroupResponseBody(name='body'),
}

async function deleteAccessGroupWithOptions(request: DeleteAccessGroupRequest, runtime: Util.RuntimeOptions): DeleteAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessGroup',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccessGroup(request: DeleteAccessGroupRequest): DeleteAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessGroupWithOptions(request, runtime);
}

model DeleteAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  fileSystemType?: string(name='FileSystemType'),
}

model DeleteAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessRuleResponseBody(name='body'),
}

async function deleteAccessRuleWithOptions(request: DeleteAccessRuleRequest, runtime: Util.RuntimeOptions): DeleteAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessRule',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccessRule(request: DeleteAccessRuleRequest): DeleteAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessRuleWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoSnapshotPolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteDataFlowRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model DeleteDataFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataFlowResponseBody(name='body'),
}

async function deleteDataFlowWithOptions(request: DeleteDataFlowRequest, runtime: Util.RuntimeOptions): DeleteDataFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataFlow',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataFlow(request: DeleteDataFlowRequest): DeleteDataFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataFlowWithOptions(request, runtime);
}

model DeleteFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileSystemResponseBody(name='body'),
}

async function deleteFileSystemWithOptions(request: DeleteFileSystemRequest, runtime: Util.RuntimeOptions): DeleteFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileSystem',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileSystemWithOptions(request, runtime);
}

model DeleteFilesetRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  fsetId?: string(name='FsetId'),
}

model DeleteFilesetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFilesetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFilesetResponseBody(name='body'),
}

async function deleteFilesetWithOptions(request: DeleteFilesetRequest, runtime: Util.RuntimeOptions): DeleteFilesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fsetId)) {
    query['FsetId'] = request.fsetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileset',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFileset(request: DeleteFilesetRequest): DeleteFilesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFilesetWithOptions(request, runtime);
}

model DeleteLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DeleteLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLDAPConfigResponseBody(name='body'),
}

async function deleteLDAPConfigWithOptions(request: DeleteLDAPConfigRequest, runtime: Util.RuntimeOptions): DeleteLDAPConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLDAPConfig',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLDAPConfig(request: DeleteLDAPConfigRequest): DeleteLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLDAPConfigWithOptions(request, runtime);
}

model DeleteLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
}

model DeleteLifecyclePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLifecyclePolicyResponseBody(name='body'),
}

async function deleteLifecyclePolicyWithOptions(request: DeleteLifecyclePolicyRequest, runtime: Util.RuntimeOptions): DeleteLifecyclePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.lifecyclePolicyName)) {
    query['LifecyclePolicyName'] = request.lifecyclePolicyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLifecyclePolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLifecyclePolicy(request: DeleteLifecyclePolicyRequest): DeleteLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLifecyclePolicyWithOptions(request, runtime);
}

model DeleteMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
}

model DeleteMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMountTargetResponseBody(name='body'),
}

async function deleteMountTargetWithOptions(request: DeleteMountTargetRequest, runtime: Util.RuntimeOptions): DeleteMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMountTarget(request: DeleteMountTargetRequest): DeleteMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMountTargetWithOptions(request, runtime);
}

model DeleteProtocolMountTargetRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  exportId?: string(name='ExportId'),
  fileSystemId?: string(name='FileSystemId'),
  protocolServiceId?: string(name='ProtocolServiceId'),
}

model DeleteProtocolMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProtocolMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProtocolMountTargetResponseBody(name='body'),
}

async function deleteProtocolMountTargetWithOptions(request: DeleteProtocolMountTargetRequest, runtime: Util.RuntimeOptions): DeleteProtocolMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.protocolServiceId)) {
    query['ProtocolServiceId'] = request.protocolServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProtocolMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProtocolMountTarget(request: DeleteProtocolMountTargetRequest): DeleteProtocolMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProtocolMountTargetWithOptions(request, runtime);
}

model DeleteProtocolServiceRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  protocolServiceId?: string(name='ProtocolServiceId'),
}

model DeleteProtocolServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProtocolServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProtocolServiceResponseBody(name='body'),
}

async function deleteProtocolServiceWithOptions(request: DeleteProtocolServiceRequest, runtime: Util.RuntimeOptions): DeleteProtocolServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.protocolServiceId)) {
    query['ProtocolServiceId'] = request.protocolServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProtocolService',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProtocolService(request: DeleteProtocolServiceRequest): DeleteProtocolServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProtocolServiceWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  snapshotId?: string(name='SnapshotId'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DescribeAccessGroupsRequest {
  accessGroupName?: string(name='AccessGroupName'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  useUTCDateTime?: boolean(name='UseUTCDateTime'),
}

model DescribeAccessGroupsResponseBody = {
  accessGroups?: {
    accessGroup?: [ 
    {
      accessGroupName?: string(name='AccessGroupName'),
      accessGroupType?: string(name='AccessGroupType'),
      description?: string(name='Description'),
      mountTargetCount?: int32(name='MountTargetCount'),
      ruleCount?: int32(name='RuleCount'),
    }
  ](name='AccessGroup')
  }(name='AccessGroups'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccessGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessGroupsResponseBody(name='body'),
}

async function describeAccessGroupsWithOptions(request: DescribeAccessGroupsRequest, runtime: Util.RuntimeOptions): DescribeAccessGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.useUTCDateTime)) {
    query['UseUTCDateTime'] = request.useUTCDateTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessGroups',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessGroups(request: DescribeAccessGroupsRequest): DescribeAccessGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessGroupsWithOptions(request, runtime);
}

model DescribeAccessRulesRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAccessRulesResponseBody = {
  accessRules?: {
    accessRule?: [ 
    {
      accessRuleId?: string(name='AccessRuleId'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      priority?: int32(name='Priority'),
      RWAccess?: string(name='RWAccess'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      userAccess?: string(name='UserAccess'),
    }
  ](name='AccessRule')
  }(name='AccessRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccessRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessRulesResponseBody(name='body'),
}

async function describeAccessRulesWithOptions(request: DescribeAccessRulesRequest, runtime: Util.RuntimeOptions): DescribeAccessRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessRules',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessRules(request: DescribeAccessRulesRequest): DescribeAccessRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessRulesWithOptions(request, runtime);
}

model DescribeAutoSnapshotPoliciesRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAutoSnapshotPoliciesResponseBody = {
  autoSnapshotPolicies?: {
    autoSnapshotPolicy?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
      createTime?: string(name='CreateTime'),
      fileSystemNums?: int32(name='FileSystemNums'),
      regionId?: string(name='RegionId'),
      repeatWeekdays?: string(name='RepeatWeekdays'),
      retentionDays?: int32(name='RetentionDays'),
      status?: string(name='Status'),
      timePoints?: string(name='TimePoints'),
    }
  ](name='AutoSnapshotPolicy')
  }(name='AutoSnapshotPolicies'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAutoSnapshotPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoSnapshotPoliciesResponseBody(name='body'),
}

async function describeAutoSnapshotPoliciesWithOptions(request: DescribeAutoSnapshotPoliciesRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoSnapshotPolicies',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoSnapshotPolicies(request: DescribeAutoSnapshotPoliciesRequest): DescribeAutoSnapshotPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPoliciesWithOptions(request, runtime);
}

model DescribeAutoSnapshotTasksRequest {
  autoSnapshotPolicyIds?: string(name='AutoSnapshotPolicyIds'),
  fileSystemIds?: string(name='FileSystemIds'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAutoSnapshotTasksResponseBody = {
  autoSnapshotTasks?: {
    autoSnapshotTask?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      sourceFileSystemId?: string(name='SourceFileSystemId'),
    }
  ](name='AutoSnapshotTask')
  }(name='AutoSnapshotTasks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAutoSnapshotTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoSnapshotTasksResponseBody(name='body'),
}

async function describeAutoSnapshotTasksWithOptions(request: DescribeAutoSnapshotTasksRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyIds)) {
    query['AutoSnapshotPolicyIds'] = request.autoSnapshotPolicyIds;
  }
  if (!Util.isUnset(request.fileSystemIds)) {
    query['FileSystemIds'] = request.fileSystemIds;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoSnapshotTasks',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoSnapshotTasks(request: DescribeAutoSnapshotTasksRequest): DescribeAutoSnapshotTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotTasksWithOptions(request, runtime);
}

model DescribeBlackListClientsRequest {
  clientIP?: string(name='ClientIP'),
  fileSystemId?: string(name='FileSystemId'),
  regionId?: string(name='RegionId'),
}

model DescribeBlackListClientsResponseBody = {
  clients?: string(name='Clients'),
  requestId?: string(name='RequestId'),
}

model DescribeBlackListClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBlackListClientsResponseBody(name='body'),
}

async function describeBlackListClientsWithOptions(request: DescribeBlackListClientsRequest, runtime: Util.RuntimeOptions): DescribeBlackListClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIP)) {
    query['ClientIP'] = request.clientIP;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlackListClients',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBlackListClients(request: DescribeBlackListClientsRequest): DescribeBlackListClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlackListClientsWithOptions(request, runtime);
}

model DescribeDataFlowTasksRequest {
  fileSystemId?: string(name='FileSystemId'),
  filters?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeDataFlowTasksResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  taskInfo?: {
    task?: [ 
    {
      createTime?: string(name='CreateTime'),
      dataFlowId?: string(name='DataFlowId'),
      dataType?: string(name='DataType'),
      endTime?: string(name='EndTime'),
      fileSystemPath?: string(name='FileSystemPath'),
      filesystemId?: string(name='FilesystemId'),
      fsPath?: string(name='FsPath'),
      originator?: string(name='Originator'),
      progress?: long(name='Progress'),
      reportPath?: string(name='ReportPath'),
      sourceStorage?: string(name='SourceStorage'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      taskAction?: string(name='TaskAction'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='TaskInfo'),
}

model DescribeDataFlowTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataFlowTasksResponseBody(name='body'),
}

async function describeDataFlowTasksWithOptions(request: DescribeDataFlowTasksRequest, runtime: Util.RuntimeOptions): DescribeDataFlowTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataFlowTasks',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataFlowTasks(request: DescribeDataFlowTasksRequest): DescribeDataFlowTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataFlowTasksWithOptions(request, runtime);
}

model DescribeDataFlowsRequest {
  fileSystemId?: string(name='FileSystemId'),
  filters?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeDataFlowsResponseBody = {
  dataFlowInfo?: {
    dataFlow?: [ 
    {
      autoRefresh?: {
        autoRefresh?: [ 
        {
          refreshPath?: string(name='RefreshPath'),
        }
      ](name='AutoRefresh')
      }(name='AutoRefresh'),
      autoRefreshInterval?: long(name='AutoRefreshInterval'),
      autoRefreshPolicy?: string(name='AutoRefreshPolicy'),
      createTime?: string(name='CreateTime'),
      dataFlowId?: string(name='DataFlowId'),
      description?: string(name='Description'),
      errorMessage?: string(name='ErrorMessage'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemPath?: string(name='FileSystemPath'),
      fsetDescription?: string(name='FsetDescription'),
      fsetId?: string(name='FsetId'),
      sourceSecurityType?: string(name='SourceSecurityType'),
      sourceStorage?: string(name='SourceStorage'),
      status?: string(name='Status'),
      throughput?: long(name='Throughput'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='DataFlow')
  }(name='DataFlowInfo'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDataFlowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataFlowsResponseBody(name='body'),
}

async function describeDataFlowsWithOptions(request: DescribeDataFlowsRequest, runtime: Util.RuntimeOptions): DescribeDataFlowsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataFlows',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataFlows(request: DescribeDataFlowsRequest): DescribeDataFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataFlowsWithOptions(request, runtime);
}

model DescribeDirQuotasRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  path?: string(name='Path'),
}

model DescribeDirQuotasResponseBody = {
  dirQuotaInfos?: [ 
    {
      dirInode?: string(name='DirInode'),
      path?: string(name='Path'),
      status?: string(name='Status'),
      userQuotaInfos?: [ 
        {
          fileCountLimit?: long(name='FileCountLimit'),
          fileCountReal?: long(name='FileCountReal'),
          quotaType?: string(name='QuotaType'),
          sizeLimit?: long(name='SizeLimit'),
          sizeReal?: long(name='SizeReal'),
          userId?: string(name='UserId'),
          userType?: string(name='UserType'),
        }
      ](name='UserQuotaInfos'),
    }
  ](name='DirQuotaInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDirQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDirQuotasResponseBody(name='body'),
}

async function describeDirQuotasWithOptions(request: DescribeDirQuotasRequest, runtime: Util.RuntimeOptions): DescribeDirQuotasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirQuotas',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirQuotas(request: DescribeDirQuotasRequest): DescribeDirQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirQuotasWithOptions(request, runtime);
}

model DescribeFileSystemStatisticsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeFileSystemStatisticsResponseBody = {
  fileSystemStatistics?: {
    fileSystemStatistic?: [ 
    {
      expiredCount?: int32(name='ExpiredCount'),
      expiringCount?: int32(name='ExpiringCount'),
      fileSystemType?: string(name='FileSystemType'),
      meteredSize?: long(name='MeteredSize'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='FileSystemStatistic')
  }(name='FileSystemStatistics'),
  fileSystems?: {
    fileSystem?: [ 
    {
      capacity?: long(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemType?: string(name='FileSystemType'),
      meteredIASize?: long(name='MeteredIASize'),
      meteredSize?: long(name='MeteredSize'),
      packages?: {
        package?: [ 
        {
          expiredTime?: string(name='ExpiredTime'),
          packageId?: string(name='PackageId'),
          size?: long(name='Size'),
          startTime?: string(name='StartTime'),
        }
      ](name='Package')
      }(name='Packages'),
      protocolType?: string(name='ProtocolType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      storageType?: string(name='StorageType'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='FileSystem')
  }(name='FileSystems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeFileSystemStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFileSystemStatisticsResponseBody(name='body'),
}

async function describeFileSystemStatisticsWithOptions(request: DescribeFileSystemStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFileSystemStatistics',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFileSystemStatistics(request: DescribeFileSystemStatisticsRequest): DescribeFileSystemStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemStatisticsWithOptions(request, runtime);
}

model DescribeFileSystemsRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId'),
}

model DescribeFileSystemsResponseBody = {
  fileSystems?: {
    fileSystem?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      capacity?: long(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      encryptType?: int32(name='EncryptType'),
      expiredTime?: string(name='ExpiredTime'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemType?: string(name='FileSystemType'),
      guiInfo?: {
        endpoint?: string(name='Endpoint'),
        password?: string(name='Password'),
        user?: string(name='User'),
      }(name='GuiInfo'),
      KMSKeyId?: string(name='KMSKeyId'),
      ldap?: {
        bindDN?: string(name='BindDN'),
        searchBase?: string(name='SearchBase'),
        URI?: string(name='URI'),
      }(name='Ldap'),
      meteredIASize?: long(name='MeteredIASize'),
      meteredSize?: long(name='MeteredSize'),
      mountTargets?: {
        mountTarget?: [ 
        {
          accessGroupName?: string(name='AccessGroupName'),
          clientMasterNodes?: {
            clientMasterNode?: [ 
            {
              defaultPasswd?: string(name='DefaultPasswd'),
              ecsId?: string(name='EcsId'),
              ecsIp?: string(name='EcsIp'),
            }
          ](name='ClientMasterNode')
          }(name='ClientMasterNodes'),
          dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
          mountTargetDomain?: string(name='MountTargetDomain'),
          networkType?: string(name='NetworkType'),
          status?: string(name='Status'),
          tags?: {
            tag?: [ 
            {
              key?: string(name='Key'),
              value?: string(name='Value'),
            }
          ](name='Tag')
          }(name='Tags'),
          vpcId?: string(name='VpcId'),
          vswId?: string(name='VswId'),
        }
      ](name='MountTarget')
      }(name='MountTargets'),
      nodeNum?: int32(name='NodeNum'),
      packages?: {
        package?: [ 
        {
          expiredTime?: string(name='ExpiredTime'),
          packageId?: string(name='PackageId'),
          packageType?: string(name='PackageType'),
          size?: long(name='Size'),
          startTime?: string(name='StartTime'),
        }
      ](name='Package')
      }(name='Packages'),
      protocolType?: string(name='ProtocolType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      storageType?: string(name='StorageType'),
      supportedFeatures?: {
        supportedFeature?: [ string ](name='SupportedFeature')
      }(name='SupportedFeatures'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      version?: string(name='Version'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='FileSystem')
  }(name='FileSystems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFileSystemsResponseBody(name='body'),
}

async function describeFileSystemsWithOptions(request: DescribeFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFileSystems',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFileSystems(request: DescribeFileSystemsRequest): DescribeFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemsWithOptions(request, runtime);
}

model DescribeFilesetsRequest {
  fileSystemId?: string(name='FileSystemId'),
  filters?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeFilesetsResponseBody = {
  entries?: {
    entrie?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemPath?: string(name='FileSystemPath'),
      fsetId?: string(name='FsetId'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Entrie')
  }(name='Entries'),
  fileSystemId?: string(name='FileSystemId'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeFilesetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFilesetsResponseBody(name='body'),
}

async function describeFilesetsWithOptions(request: DescribeFilesetsRequest, runtime: Util.RuntimeOptions): DescribeFilesetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFilesets',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFilesets(request: DescribeFilesetsRequest): DescribeFilesetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFilesetsWithOptions(request, runtime);
}

model DescribeLDAPConfigRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DescribeLDAPConfigResponseBody = {
  ldap?: {
    bindDN?: string(name='BindDN'),
    searchBase?: string(name='SearchBase'),
    URI?: string(name='URI'),
  }(name='Ldap'),
  requestId?: string(name='RequestId'),
}

model DescribeLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLDAPConfigResponseBody(name='body'),
}

async function describeLDAPConfigWithOptions(request: DescribeLDAPConfigRequest, runtime: Util.RuntimeOptions): DescribeLDAPConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLDAPConfig',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLDAPConfig(request: DescribeLDAPConfigRequest): DescribeLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLDAPConfigWithOptions(request, runtime);
}

model DescribeLifecyclePoliciesRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeLifecyclePoliciesResponseBody = {
  lifecyclePolicies?: [ 
    {
      createTime?: string(name='CreateTime'),
      fileSystemId?: string(name='FileSystemId'),
      lifecyclePolicyName?: string(name='LifecyclePolicyName'),
      lifecycleRuleName?: string(name='LifecycleRuleName'),
      path?: string(name='Path'),
      paths?: [ string ](name='Paths'),
      storageType?: string(name='StorageType'),
    }
  ](name='LifecyclePolicies'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLifecyclePoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLifecyclePoliciesResponseBody(name='body'),
}

async function describeLifecyclePoliciesWithOptions(request: DescribeLifecyclePoliciesRequest, runtime: Util.RuntimeOptions): DescribeLifecyclePoliciesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLifecyclePolicies',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLifecyclePolicies(request: DescribeLifecyclePoliciesRequest): DescribeLifecyclePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLifecyclePoliciesWithOptions(request, runtime);
}

model DescribeLogAnalysisRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeLogAnalysisResponseBody = {
  analyses?: {
    analysis?: [ 
    {
      metaKey?: string(name='MetaKey'),
      metaValue?: {
        logstore?: string(name='Logstore'),
        project?: string(name='Project'),
        region?: string(name='Region'),
        roleArn?: string(name='RoleArn'),
      }(name='MetaValue'),
    }
  ](name='Analysis')
  }(name='Analyses'),
  code?: string(name='Code'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLogAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogAnalysisResponseBody(name='body'),
}

async function describeLogAnalysisWithOptions(request: DescribeLogAnalysisRequest, runtime: Util.RuntimeOptions): DescribeLogAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogAnalysis',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogAnalysis(request: DescribeLogAnalysisRequest): DescribeLogAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogAnalysisWithOptions(request, runtime);
}

model DescribeMountTargetsRequest {
  dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeMountTargetsResponseBody = {
  mountTargets?: {
    mountTarget?: [ 
    {
      accessGroup?: string(name='AccessGroup'),
      clientMasterNodes?: {
        clientMasterNode?: [ 
        {
          defaultPasswd?: string(name='DefaultPasswd'),
          ecsId?: string(name='EcsId'),
          ecsIp?: string(name='EcsIp'),
        }
      ](name='ClientMasterNode')
      }(name='ClientMasterNodes'),
      dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
      IPVersion?: string(name='IPVersion'),
      mountTargetDomain?: string(name='MountTargetDomain'),
      networkType?: string(name='NetworkType'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vswId?: string(name='VswId'),
    }
  ](name='MountTarget')
  }(name='MountTargets'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeMountTargetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMountTargetsResponseBody(name='body'),
}

async function describeMountTargetsWithOptions(request: DescribeMountTargetsRequest, runtime: Util.RuntimeOptions): DescribeMountTargetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dualStackMountTargetDomain)) {
    query['DualStackMountTargetDomain'] = request.dualStackMountTargetDomain;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMountTargets',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMountTargets(request: DescribeMountTargetsRequest): DescribeMountTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountTargetsWithOptions(request, runtime);
}

model DescribeMountedClientsRequest {
  clientIP?: string(name='ClientIP'),
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeMountedClientsResponseBody = {
  clients?: {
    client?: [ 
    {
      clientIP?: string(name='ClientIP'),
    }
  ](name='Client')
  }(name='Clients'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeMountedClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMountedClientsResponseBody(name='body'),
}

async function describeMountedClientsWithOptions(request: DescribeMountedClientsRequest, runtime: Util.RuntimeOptions): DescribeMountedClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIP)) {
    query['ClientIP'] = request.clientIP;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMountedClients',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMountedClients(request: DescribeMountedClientsRequest): DescribeMountedClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountedClientsWithOptions(request, runtime);
}

model DescribeProtocolMountTargetRequest {
  clientToken?: string(name='ClientToken'),
  fileSystemId?: string(name='FileSystemId'),
  filters?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeProtocolMountTargetResponseBody = {
  nextToken?: string(name='NextToken'),
  protocolMountTargets?: [ 
    {
      accessGroupName?: string(name='AccessGroupName'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      exportId?: string(name='ExportId'),
      fsetId?: string(name='FsetId'),
      path?: string(name='Path'),
      protocolMountTargetDomain?: string(name='ProtocolMountTargetDomain'),
      protocolServiceId?: string(name='ProtocolServiceId'),
      protocolType?: string(name='ProtocolType'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='ProtocolMountTargets'),
  requestId?: string(name='RequestId'),
}

model DescribeProtocolMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtocolMountTargetResponseBody(name='body'),
}

async function describeProtocolMountTargetWithOptions(request: DescribeProtocolMountTargetRequest, runtime: Util.RuntimeOptions): DescribeProtocolMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtocolMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtocolMountTarget(request: DescribeProtocolMountTargetRequest): DescribeProtocolMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtocolMountTargetWithOptions(request, runtime);
}

model DescribeProtocolServiceRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  protocolServiceIds?: string(name='ProtocolServiceIds'),
  status?: string(name='Status'),
}

model DescribeProtocolServiceResponseBody = {
  nextToken?: string(name='NextToken'),
  protocolServices?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      instanceBaseThroughput?: int32(name='InstanceBaseThroughput'),
      instanceBurstThroughput?: int32(name='InstanceBurstThroughput'),
      instanceRAM?: int32(name='InstanceRAM'),
      modifyTime?: string(name='ModifyTime'),
      mountTargetCount?: int32(name='MountTargetCount'),
      protocolServiceId?: string(name='ProtocolServiceId'),
      protocolSpec?: string(name='ProtocolSpec'),
      protocolThroughput?: int32(name='ProtocolThroughput'),
      protocolType?: string(name='ProtocolType'),
      status?: string(name='Status'),
    }
  ](name='ProtocolServices'),
  requestId?: string(name='RequestId'),
}

model DescribeProtocolServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProtocolServiceResponseBody(name='body'),
}

async function describeProtocolServiceWithOptions(request: DescribeProtocolServiceRequest, runtime: Util.RuntimeOptions): DescribeProtocolServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.protocolServiceIds)) {
    query['ProtocolServiceIds'] = request.protocolServiceIds;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProtocolService',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProtocolService(request: DescribeProtocolServiceRequest): DescribeProtocolServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtocolServiceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSmbAclRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DescribeSmbAclResponseBody = {
  acl?: {
    enableAnonymousAccess?: boolean(name='EnableAnonymousAccess'),
    enabled?: boolean(name='Enabled'),
    encryptData?: boolean(name='EncryptData'),
    homeDirPath?: string(name='HomeDirPath'),
    rejectUnencryptedAccess?: boolean(name='RejectUnencryptedAccess'),
    superAdminSid?: string(name='SuperAdminSid'),
  }(name='Acl'),
  requestId?: string(name='RequestId'),
}

model DescribeSmbAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmbAclResponseBody(name='body'),
}

async function describeSmbAclWithOptions(request: DescribeSmbAclRequest, runtime: Util.RuntimeOptions): DescribeSmbAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmbAcl',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmbAcl(request: DescribeSmbAclRequest): DescribeSmbAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmbAclWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  fileSystemId?: string(name='FileSystemId'),
  fileSystemType?: string(name='FileSystemType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  snapshotIds?: string(name='SnapshotIds'),
  snapshotName?: string(name='SnapshotName'),
  snapshotType?: string(name='SnapshotType'),
  status?: string(name='Status'),
}

model DescribeSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshots?: {
    snapshot?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      encryptType?: int32(name='EncryptType'),
      progress?: string(name='Progress'),
      remainTime?: int32(name='RemainTime'),
      retentionDays?: int32(name='RetentionDays'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      sourceFileSystemId?: string(name='SourceFileSystemId'),
      sourceFileSystemSize?: long(name='SourceFileSystemSize'),
      sourceFileSystemVersion?: string(name='SourceFileSystemVersion'),
      status?: string(name='Status'),
    }
  ](name='Snapshot')
  }(name='Snapshots'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.snapshotType)) {
    query['SnapshotType'] = request.snapshotType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeStoragePackagesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  useUTCDateTime?: boolean(name='UseUTCDateTime'),
}

model DescribeStoragePackagesResponseBody = {
  packages?: {
    package?: [ 
    {
      expiredTime?: string(name='ExpiredTime'),
      fileSystemId?: string(name='FileSystemId'),
      packageId?: string(name='PackageId'),
      size?: long(name='Size'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      storageType?: string(name='StorageType'),
    }
  ](name='Package')
  }(name='Packages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStoragePackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStoragePackagesResponseBody(name='body'),
}

async function describeStoragePackagesWithOptions(request: DescribeStoragePackagesRequest, runtime: Util.RuntimeOptions): DescribeStoragePackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.useUTCDateTime)) {
    query['UseUTCDateTime'] = request.useUTCDateTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStoragePackages',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStoragePackages(request: DescribeStoragePackagesRequest): DescribeStoragePackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoragePackagesWithOptions(request, runtime);
}

model DescribeTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ 
    {
      fileSystemIds?: {
        fileSystemId?: [ string ](name='FileSystemId')
      }(name='FileSystemIds'),
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tags'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  fileSystemType?: string(name='FileSystemType'),
  regionId?: string(name='RegionId'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      capacity?: {
        protocol?: [ string ](name='Protocol')
      }(name='Capacity'),
      instanceTypes?: {
        instanceType?: [ 
        {
          protocolType?: string(name='ProtocolType'),
          storageType?: string(name='StorageType'),
        }
      ](name='InstanceType')
      }(name='InstanceTypes'),
      performance?: {
        protocol?: [ string ](name='Protocol')
      }(name='Performance'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DisableAndCleanRecycleBinRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DisableAndCleanRecycleBinResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableAndCleanRecycleBinResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableAndCleanRecycleBinResponseBody(name='body'),
}

async function disableAndCleanRecycleBinWithOptions(request: DisableAndCleanRecycleBinRequest, runtime: Util.RuntimeOptions): DisableAndCleanRecycleBinResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableAndCleanRecycleBin',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableAndCleanRecycleBin(request: DisableAndCleanRecycleBinRequest): DisableAndCleanRecycleBinResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAndCleanRecycleBinWithOptions(request, runtime);
}

model DisableSmbAclRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model DisableSmbAclResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableSmbAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSmbAclResponseBody(name='body'),
}

async function disableSmbAclWithOptions(request: DisableSmbAclRequest, runtime: Util.RuntimeOptions): DisableSmbAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSmbAcl',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSmbAcl(request: DisableSmbAclRequest): DisableSmbAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSmbAclWithOptions(request, runtime);
}

model EnableRecycleBinRequest {
  fileSystemId?: string(name='FileSystemId'),
  reservedDays?: long(name='ReservedDays'),
}

model EnableRecycleBinResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableRecycleBinResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableRecycleBinResponseBody(name='body'),
}

async function enableRecycleBinWithOptions(request: EnableRecycleBinRequest, runtime: Util.RuntimeOptions): EnableRecycleBinResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.reservedDays)) {
    query['ReservedDays'] = request.reservedDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableRecycleBin',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableRecycleBin(request: EnableRecycleBinRequest): EnableRecycleBinResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRecycleBinWithOptions(request, runtime);
}

model EnableSmbAclRequest {
  fileSystemId?: string(name='FileSystemId'),
  keytab?: string(name='Keytab'),
  keytabMd5?: string(name='KeytabMd5'),
}

model EnableSmbAclResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableSmbAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSmbAclResponseBody(name='body'),
}

async function enableSmbAclWithOptions(request: EnableSmbAclRequest, runtime: Util.RuntimeOptions): EnableSmbAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.keytab)) {
    query['Keytab'] = request.keytab;
  }
  if (!Util.isUnset(request.keytabMd5)) {
    query['KeytabMd5'] = request.keytabMd5;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSmbAcl',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSmbAcl(request: EnableSmbAclRequest): EnableSmbAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSmbAclWithOptions(request, runtime);
}

model GetDirectoryOrFilePropertiesRequest {
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
}

model GetDirectoryOrFilePropertiesResponseBody = {
  entry?: {
    ATime?: string(name='ATime'),
    CTime?: string(name='CTime'),
    hasInfrequentAccessFile?: boolean(name='HasInfrequentAccessFile'),
    inode?: string(name='Inode'),
    MTime?: string(name='MTime'),
    name?: string(name='Name'),
    retrieveTime?: string(name='RetrieveTime'),
    size?: long(name='Size'),
    storageType?: string(name='StorageType'),
    type?: string(name='Type'),
  }(name='Entry'),
  requestId?: string(name='RequestId'),
}

model GetDirectoryOrFilePropertiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDirectoryOrFilePropertiesResponseBody(name='body'),
}

async function getDirectoryOrFilePropertiesWithOptions(request: GetDirectoryOrFilePropertiesRequest, runtime: Util.RuntimeOptions): GetDirectoryOrFilePropertiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDirectoryOrFileProperties',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDirectoryOrFileProperties(request: GetDirectoryOrFilePropertiesRequest): GetDirectoryOrFilePropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectoryOrFilePropertiesWithOptions(request, runtime);
}

model GetRecycleBinAttributeRequest {
  fileSystemId?: string(name='FileSystemId'),
}

model GetRecycleBinAttributeResponseBody = {
  recycleBinAttribute?: {
    enableTime?: string(name='EnableTime'),
    reservedDays?: long(name='ReservedDays'),
    secondarySize?: long(name='SecondarySize'),
    size?: long(name='Size'),
    status?: string(name='Status'),
  }(name='RecycleBinAttribute'),
  requestId?: string(name='RequestId'),
}

model GetRecycleBinAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRecycleBinAttributeResponseBody(name='body'),
}

async function getRecycleBinAttributeWithOptions(request: GetRecycleBinAttributeRequest, runtime: Util.RuntimeOptions): GetRecycleBinAttributeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRecycleBinAttribute',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRecycleBinAttribute(request: GetRecycleBinAttributeRequest): GetRecycleBinAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecycleBinAttributeWithOptions(request, runtime);
}

model ListDirectoriesAndFilesRequest {
  directoryOnly?: boolean(name='DirectoryOnly'),
  fileSystemId?: string(name='FileSystemId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  path?: string(name='Path'),
  storageType?: string(name='StorageType'),
}

model ListDirectoriesAndFilesResponseBody = {
  entries?: [ 
    {
      atime?: string(name='Atime'),
      ctime?: string(name='Ctime'),
      fileId?: string(name='FileId'),
      hasInfrequentAccessFile?: boolean(name='HasInfrequentAccessFile'),
      inode?: string(name='Inode'),
      mtime?: string(name='Mtime'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      retrieveTime?: string(name='RetrieveTime'),
      size?: long(name='Size'),
      storageType?: string(name='StorageType'),
      type?: string(name='Type'),
    }
  ](name='Entries'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListDirectoriesAndFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDirectoriesAndFilesResponseBody(name='body'),
}

async function listDirectoriesAndFilesWithOptions(request: ListDirectoriesAndFilesRequest, runtime: Util.RuntimeOptions): ListDirectoriesAndFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryOnly)) {
    query['DirectoryOnly'] = request.directoryOnly;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDirectoriesAndFiles',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDirectoriesAndFiles(request: ListDirectoriesAndFilesRequest): ListDirectoriesAndFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoriesAndFilesWithOptions(request, runtime);
}

model ListLifecycleRetrieveJobsRequest {
  fileSystemId?: string(name='FileSystemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model ListLifecycleRetrieveJobsResponseBody = {
  lifecycleRetrieveJobs?: [ 
    {
      createTime?: string(name='CreateTime'),
      discoveredFileCount?: long(name='DiscoveredFileCount'),
      fileSystemId?: string(name='FileSystemId'),
      jobId?: string(name='JobId'),
      paths?: [ string ](name='Paths'),
      retrievedFileCount?: long(name='RetrievedFileCount'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='LifecycleRetrieveJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListLifecycleRetrieveJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLifecycleRetrieveJobsResponseBody(name='body'),
}

async function listLifecycleRetrieveJobsWithOptions(request: ListLifecycleRetrieveJobsRequest, runtime: Util.RuntimeOptions): ListLifecycleRetrieveJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLifecycleRetrieveJobs',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLifecycleRetrieveJobs(request: ListLifecycleRetrieveJobsRequest): ListLifecycleRetrieveJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLifecycleRetrieveJobsWithOptions(request, runtime);
}

model ListRecentlyRecycledDirectoriesRequest {
  fileSystemId?: string(name='FileSystemId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListRecentlyRecycledDirectoriesResponseBody = {
  entries?: [ 
    {
      fileId?: string(name='FileId'),
      lastDeleteTime?: string(name='LastDeleteTime'),
      name?: string(name='Name'),
      path?: string(name='Path'),
    }
  ](name='Entries'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListRecentlyRecycledDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecentlyRecycledDirectoriesResponseBody(name='body'),
}

async function listRecentlyRecycledDirectoriesWithOptions(request: ListRecentlyRecycledDirectoriesRequest, runtime: Util.RuntimeOptions): ListRecentlyRecycledDirectoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecentlyRecycledDirectories',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRecentlyRecycledDirectories(request: ListRecentlyRecycledDirectoriesRequest): ListRecentlyRecycledDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecentlyRecycledDirectoriesWithOptions(request, runtime);
}

model ListRecycleBinJobsRequest {
  fileSystemId?: string(name='FileSystemId'),
  jobId?: string(name='JobId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  status?: string(name='Status'),
}

model ListRecycleBinJobsResponseBody = {
  jobs?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      fileId?: string(name='FileId'),
      fileName?: string(name='FileName'),
      id?: string(name='Id'),
      progress?: string(name='Progress'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Jobs'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListRecycleBinJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecycleBinJobsResponseBody(name='body'),
}

async function listRecycleBinJobsWithOptions(request: ListRecycleBinJobsRequest, runtime: Util.RuntimeOptions): ListRecycleBinJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecycleBinJobs',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRecycleBinJobs(request: ListRecycleBinJobsRequest): ListRecycleBinJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecycleBinJobsWithOptions(request, runtime);
}

model ListRecycledDirectoriesAndFilesRequest {
  fileId?: string(name='FileId'),
  fileSystemId?: string(name='FileSystemId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListRecycledDirectoriesAndFilesResponseBody = {
  entries?: [ 
    {
      ATime?: string(name='ATime'),
      CTime?: string(name='CTime'),
      deleteTime?: string(name='DeleteTime'),
      fileId?: string(name='FileId'),
      inode?: string(name='Inode'),
      MTime?: string(name='MTime'),
      name?: string(name='Name'),
      size?: long(name='Size'),
      type?: string(name='Type'),
    }
  ](name='Entries'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListRecycledDirectoriesAndFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecycledDirectoriesAndFilesResponseBody(name='body'),
}

async function listRecycledDirectoriesAndFilesWithOptions(request: ListRecycledDirectoriesAndFilesRequest, runtime: Util.RuntimeOptions): ListRecycledDirectoriesAndFilesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecycledDirectoriesAndFiles',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRecycledDirectoriesAndFiles(request: ListRecycledDirectoriesAndFilesRequest): ListRecycledDirectoriesAndFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecycledDirectoriesAndFilesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName'),
  description?: string(name='Description'),
  fileSystemType?: string(name='FileSystemType'),
}

model ModifyAccessGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessGroupResponseBody(name='body'),
}

async function modifyAccessGroupWithOptions(request: ModifyAccessGroupRequest, runtime: Util.RuntimeOptions): ModifyAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessGroup',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessGroup(request: ModifyAccessGroupRequest): ModifyAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessGroupWithOptions(request, runtime);
}

model ModifyAccessRuleRequest {
  accessGroupName?: string(name='AccessGroupName'),
  accessRuleId?: string(name='AccessRuleId'),
  fileSystemType?: string(name='FileSystemType'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  priority?: int32(name='Priority'),
  RWAccessType?: string(name='RWAccessType'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  userAccessType?: string(name='UserAccessType'),
}

model ModifyAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessRuleResponseBody(name='body'),
}

async function modifyAccessRuleWithOptions(request: ModifyAccessRuleRequest, runtime: Util.RuntimeOptions): ModifyAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.RWAccessType)) {
    query['RWAccessType'] = request.RWAccessType;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.userAccessType)) {
    query['UserAccessType'] = request.userAccessType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessRule',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessRule(request: ModifyAccessRuleRequest): ModifyAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessRuleWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
  repeatWeekdays?: string(name='RepeatWeekdays'),
  retentionDays?: int32(name='RetentionDays'),
  timePoints?: string(name='TimePoints'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyName)) {
    query['AutoSnapshotPolicyName'] = request.autoSnapshotPolicyName;
  }
  if (!Util.isUnset(request.repeatWeekdays)) {
    query['RepeatWeekdays'] = request.repeatWeekdays;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.timePoints)) {
    query['TimePoints'] = request.timePoints;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoSnapshotPolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyDataFlowRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  throughput?: long(name='Throughput'),
}

model ModifyDataFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataFlowResponseBody(name='body'),
}

async function modifyDataFlowWithOptions(request: ModifyDataFlowRequest, runtime: Util.RuntimeOptions): ModifyDataFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.throughput)) {
    query['Throughput'] = request.throughput;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataFlow',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataFlow(request: ModifyDataFlowRequest): ModifyDataFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataFlowWithOptions(request, runtime);
}

model ModifyDataFlowAutoRefreshRequest {
  autoRefreshInterval?: long(name='AutoRefreshInterval'),
  autoRefreshPolicy?: string(name='AutoRefreshPolicy'),
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model ModifyDataFlowAutoRefreshResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataFlowAutoRefreshResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDataFlowAutoRefreshResponseBody(name='body'),
}

async function modifyDataFlowAutoRefreshWithOptions(request: ModifyDataFlowAutoRefreshRequest, runtime: Util.RuntimeOptions): ModifyDataFlowAutoRefreshResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRefreshInterval)) {
    query['AutoRefreshInterval'] = request.autoRefreshInterval;
  }
  if (!Util.isUnset(request.autoRefreshPolicy)) {
    query['AutoRefreshPolicy'] = request.autoRefreshPolicy;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataFlowAutoRefresh',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataFlowAutoRefresh(request: ModifyDataFlowAutoRefreshRequest): ModifyDataFlowAutoRefreshResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataFlowAutoRefreshWithOptions(request, runtime);
}

model ModifyFileSystemRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFileSystemResponseBody(name='body'),
}

async function modifyFileSystemWithOptions(request: ModifyFileSystemRequest, runtime: Util.RuntimeOptions): ModifyFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFileSystem',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFileSystemWithOptions(request, runtime);
}

model ModifyFilesetRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  fsetId?: string(name='FsetId'),
}

model ModifyFilesetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFilesetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFilesetResponseBody(name='body'),
}

async function modifyFilesetWithOptions(request: ModifyFilesetRequest, runtime: Util.RuntimeOptions): ModifyFilesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fsetId)) {
    query['FsetId'] = request.fsetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFileset',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFileset(request: ModifyFilesetRequest): ModifyFilesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFilesetWithOptions(request, runtime);
}

model ModifyLDAPConfigRequest {
  bindDN?: string(name='BindDN'),
  fileSystemId?: string(name='FileSystemId'),
  searchBase?: string(name='SearchBase'),
  URI?: string(name='URI'),
}

model ModifyLDAPConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLDAPConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLDAPConfigResponseBody(name='body'),
}

async function modifyLDAPConfigWithOptions(request: ModifyLDAPConfigRequest, runtime: Util.RuntimeOptions): ModifyLDAPConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindDN)) {
    query['BindDN'] = request.bindDN;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.searchBase)) {
    query['SearchBase'] = request.searchBase;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLDAPConfig',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLDAPConfig(request: ModifyLDAPConfigRequest): ModifyLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLDAPConfigWithOptions(request, runtime);
}

model ModifyLifecyclePolicyRequest {
  fileSystemId?: string(name='FileSystemId'),
  lifecyclePolicyName?: string(name='LifecyclePolicyName'),
  lifecycleRuleName?: string(name='LifecycleRuleName'),
  path?: string(name='Path'),
  storageType?: string(name='StorageType'),
}

model ModifyLifecyclePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyLifecyclePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLifecyclePolicyResponseBody(name='body'),
}

async function modifyLifecyclePolicyWithOptions(request: ModifyLifecyclePolicyRequest, runtime: Util.RuntimeOptions): ModifyLifecyclePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.lifecyclePolicyName)) {
    query['LifecyclePolicyName'] = request.lifecyclePolicyName;
  }
  if (!Util.isUnset(request.lifecycleRuleName)) {
    query['LifecycleRuleName'] = request.lifecycleRuleName;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLifecyclePolicy',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLifecyclePolicy(request: ModifyLifecyclePolicyRequest): ModifyLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLifecyclePolicyWithOptions(request, runtime);
}

model ModifyMountTargetRequest {
  accessGroupName?: string(name='AccessGroupName'),
  dualStackMountTargetDomain?: string(name='DualStackMountTargetDomain'),
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  status?: string(name='Status'),
}

model ModifyMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMountTargetResponseBody(name='body'),
}

async function modifyMountTargetWithOptions(request: ModifyMountTargetRequest, runtime: Util.RuntimeOptions): ModifyMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.dualStackMountTargetDomain)) {
    query['DualStackMountTargetDomain'] = request.dualStackMountTargetDomain;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMountTarget(request: ModifyMountTargetRequest): ModifyMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMountTargetWithOptions(request, runtime);
}

model ModifyProtocolMountTargetRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  exportId?: string(name='ExportId'),
  fileSystemId?: string(name='FileSystemId'),
  protocolServiceId?: string(name='ProtocolServiceId'),
}

model ModifyProtocolMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtocolMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtocolMountTargetResponseBody(name='body'),
}

async function modifyProtocolMountTargetWithOptions(request: ModifyProtocolMountTargetRequest, runtime: Util.RuntimeOptions): ModifyProtocolMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.protocolServiceId)) {
    query['ProtocolServiceId'] = request.protocolServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtocolMountTarget',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtocolMountTarget(request: ModifyProtocolMountTargetRequest): ModifyProtocolMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtocolMountTargetWithOptions(request, runtime);
}

model ModifyProtocolServiceRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
  protocolServiceId?: string(name='ProtocolServiceId'),
}

model ModifyProtocolServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyProtocolServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProtocolServiceResponseBody(name='body'),
}

async function modifyProtocolServiceWithOptions(request: ModifyProtocolServiceRequest, runtime: Util.RuntimeOptions): ModifyProtocolServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.protocolServiceId)) {
    query['ProtocolServiceId'] = request.protocolServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProtocolService',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProtocolService(request: ModifyProtocolServiceRequest): ModifyProtocolServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtocolServiceWithOptions(request, runtime);
}

model ModifySmbAclRequest {
  enableAnonymousAccess?: boolean(name='EnableAnonymousAccess'),
  encryptData?: boolean(name='EncryptData'),
  fileSystemId?: string(name='FileSystemId'),
  homeDirPath?: string(name='HomeDirPath'),
  keytab?: string(name='Keytab'),
  keytabMd5?: string(name='KeytabMd5'),
  rejectUnencryptedAccess?: boolean(name='RejectUnencryptedAccess'),
  superAdminSid?: string(name='SuperAdminSid'),
}

model ModifySmbAclResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySmbAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmbAclResponseBody(name='body'),
}

async function modifySmbAclWithOptions(request: ModifySmbAclRequest, runtime: Util.RuntimeOptions): ModifySmbAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableAnonymousAccess)) {
    query['EnableAnonymousAccess'] = request.enableAnonymousAccess;
  }
  if (!Util.isUnset(request.encryptData)) {
    query['EncryptData'] = request.encryptData;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.homeDirPath)) {
    query['HomeDirPath'] = request.homeDirPath;
  }
  if (!Util.isUnset(request.keytab)) {
    query['Keytab'] = request.keytab;
  }
  if (!Util.isUnset(request.keytabMd5)) {
    query['KeytabMd5'] = request.keytabMd5;
  }
  if (!Util.isUnset(request.rejectUnencryptedAccess)) {
    query['RejectUnencryptedAccess'] = request.rejectUnencryptedAccess;
  }
  if (!Util.isUnset(request.superAdminSid)) {
    query['SuperAdminSid'] = request.superAdminSid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmbAcl',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmbAcl(request: ModifySmbAclRequest): ModifySmbAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmbAclWithOptions(request, runtime);
}

model OpenNASServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenNASServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenNASServiceResponseBody(name='body'),
}

async function openNASServiceWithOptions(runtime: Util.RuntimeOptions): OpenNASServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OpenNASService',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openNASService(): OpenNASServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openNASServiceWithOptions(runtime);
}

model RemoveClientFromBlackListRequest {
  clientIP?: string(name='ClientIP'),
  clientToken?: string(name='ClientToken'),
  fileSystemId?: string(name='FileSystemId'),
  regionId?: string(name='RegionId'),
}

model RemoveClientFromBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveClientFromBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveClientFromBlackListResponseBody(name='body'),
}

async function removeClientFromBlackListWithOptions(request: RemoveClientFromBlackListRequest, runtime: Util.RuntimeOptions): RemoveClientFromBlackListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIP)) {
    query['ClientIP'] = request.clientIP;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveClientFromBlackList',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeClientFromBlackList(request: RemoveClientFromBlackListRequest): RemoveClientFromBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeClientFromBlackListWithOptions(request, runtime);
}

model RemoveTagsRequest {
  fileSystemId?: string(name='FileSystemId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model RemoveTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTags',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model ResetFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  snapshotId?: string(name='SnapshotId'),
}

model ResetFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetFileSystemResponseBody(name='body'),
}

async function resetFileSystemWithOptions(request: ResetFileSystemRequest, runtime: Util.RuntimeOptions): ResetFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetFileSystem',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetFileSystem(request: ResetFileSystemRequest): ResetFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetFileSystemWithOptions(request, runtime);
}

model RetryLifecycleRetrieveJobRequest {
  jobId?: string(name='JobId'),
}

model RetryLifecycleRetrieveJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model RetryLifecycleRetrieveJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryLifecycleRetrieveJobResponseBody(name='body'),
}

async function retryLifecycleRetrieveJobWithOptions(request: RetryLifecycleRetrieveJobRequest, runtime: Util.RuntimeOptions): RetryLifecycleRetrieveJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryLifecycleRetrieveJob',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryLifecycleRetrieveJob(request: RetryLifecycleRetrieveJobRequest): RetryLifecycleRetrieveJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryLifecycleRetrieveJobWithOptions(request, runtime);
}

model SetDirQuotaRequest {
  fileCountLimit?: long(name='FileCountLimit'),
  fileSystemId?: string(name='FileSystemId'),
  path?: string(name='Path'),
  quotaType?: string(name='QuotaType'),
  sizeLimit?: long(name='SizeLimit'),
  userId?: string(name='UserId'),
  userType?: string(name='UserType'),
}

model SetDirQuotaResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDirQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDirQuotaResponseBody(name='body'),
}

async function setDirQuotaWithOptions(request: SetDirQuotaRequest, runtime: Util.RuntimeOptions): SetDirQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileCountLimit)) {
    query['FileCountLimit'] = request.fileCountLimit;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.quotaType)) {
    query['QuotaType'] = request.quotaType;
  }
  if (!Util.isUnset(request.sizeLimit)) {
    query['SizeLimit'] = request.sizeLimit;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDirQuota',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDirQuota(request: SetDirQuotaRequest): SetDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirQuotaWithOptions(request, runtime);
}

model StartDataFlowRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model StartDataFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDataFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDataFlowResponseBody(name='body'),
}

async function startDataFlowWithOptions(request: StartDataFlowRequest, runtime: Util.RuntimeOptions): StartDataFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDataFlow',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDataFlow(request: StartDataFlowRequest): StartDataFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDataFlowWithOptions(request, runtime);
}

model StopDataFlowRequest {
  clientToken?: string(name='ClientToken'),
  dataFlowId?: string(name='DataFlowId'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model StopDataFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDataFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDataFlowResponseBody(name='body'),
}

async function stopDataFlowWithOptions(request: StopDataFlowRequest, runtime: Util.RuntimeOptions): StopDataFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataFlowId)) {
    query['DataFlowId'] = request.dataFlowId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDataFlow',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDataFlow(request: StopDataFlowRequest): StopDataFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDataFlowWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateRecycleBinAttributeRequest {
  fileSystemId?: string(name='FileSystemId'),
  reservedDays?: long(name='ReservedDays'),
}

model UpdateRecycleBinAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRecycleBinAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRecycleBinAttributeResponseBody(name='body'),
}

async function updateRecycleBinAttributeWithOptions(request: UpdateRecycleBinAttributeRequest, runtime: Util.RuntimeOptions): UpdateRecycleBinAttributeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecycleBinAttribute',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecycleBinAttribute(request: UpdateRecycleBinAttributeRequest): UpdateRecycleBinAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecycleBinAttributeWithOptions(request, runtime);
}

model UpgradeFileSystemRequest {
  capacity?: long(name='Capacity'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  fileSystemId?: string(name='FileSystemId'),
}

model UpgradeFileSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeFileSystemResponseBody(name='body'),
}

async function upgradeFileSystemWithOptions(request: UpgradeFileSystemRequest, runtime: Util.RuntimeOptions): UpgradeFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeFileSystem',
    version = '2017-06-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeFileSystem(request: UpgradeFileSystemRequest): UpgradeFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeFileSystemWithOptions(request, runtime);
}

