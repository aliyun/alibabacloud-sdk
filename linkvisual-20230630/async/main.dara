/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Linkvisual';
  @version = '2023-06-30';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'linkvisual.aliyuncs.com',
    ap-northeast-2-pop = 'linkvisual.aliyuncs.com',
    ap-south-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-2 = 'linkvisual.aliyuncs.com',
    ap-southeast-3 = 'linkvisual.aliyuncs.com',
    ap-southeast-5 = 'linkvisual.aliyuncs.com',
    cn-beijing = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-pop = 'linkvisual.aliyuncs.com',
    cn-beijing-gov-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkvisual.aliyuncs.com',
    cn-chengdu = 'linkvisual.aliyuncs.com',
    cn-edge-1 = 'linkvisual.aliyuncs.com',
    cn-fujian = 'linkvisual.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-finance = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkvisual.aliyuncs.com',
    cn-hongkong = 'linkvisual.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkvisual.aliyuncs.com',
    cn-huhehaote = 'linkvisual.aliyuncs.com',
    cn-north-2-gov-1 = 'linkvisual.aliyuncs.com',
    cn-qingdao = 'linkvisual.aliyuncs.com',
    cn-qingdao-nebula = 'linkvisual.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shanghai-inner = 'linkvisual.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen = 'linkvisual.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-inner = 'linkvisual.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkvisual.aliyuncs.com',
    cn-wuhan = 'linkvisual.aliyuncs.com',
    cn-yushanfang = 'linkvisual.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkvisual.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkvisual.aliyuncs.com',
    eu-central-1 = 'linkvisual.aliyuncs.com',
    eu-west-1 = 'linkvisual.aliyuncs.com',
    eu-west-1-oxs = 'linkvisual.aliyuncs.com',
    me-east-1 = 'linkvisual.aliyuncs.com',
    rus-west-1-pop = 'linkvisual.aliyuncs.com',
    us-east-1 = 'linkvisual.aliyuncs.com',
    us-west-1 = 'linkvisual.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model BatchBindDeviceRequest {
  deviceList: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
    }
  ](name='DeviceList', position='Query'),
  identityId?: string(name='IdentityId', position='Query'),
  openId?: string(name='OpenId', position='Query'),
  openIdAppKey?: string(name='OpenIdAppKey', position='Query'),
}

model BatchBindDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    bindDeviceList?: [ 
      {
        bindResultCode?: int32(name='BindResultCode'),
        bindResultMessage?: string(name='BindResultMessage'),
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
      }
    ](name='BindDeviceList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchBindDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindDeviceResponseBody(name='body'),
}

async function batchBindDevice(request: BatchBindDeviceRequest): BatchBindDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDevice', 'POST', '/', 'json', false, 'json', request);
}

model BindStorageOrderRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  enableDefaultPlan?: boolean(name='EnableDefaultPlan', position='Query'),
  eventRecordDuration?: int32(name='EventRecordDuration', minimum=0, maximum=30, position='Query'),
  eventRecordProlong?: boolean(name='EventRecordProlong', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  maxRecordFileDuration?: int32(name='MaxRecordFileDuration', minimum=600, maximum=3600, position='Query'),
  orderId: string(name='OrderId', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', minimum=0, maximum=5, position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model BindStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindStorageOrderResponseBody(name='body'),
}

async function bindStorageOrder(request: BindStorageOrderRequest): BindStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model CheckFreeStorageValidRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model CheckFreeStorageValidResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckFreeStorageValidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckFreeStorageValidResponseBody(name='body'),
}

async function checkFreeStorageValid(request: CheckFreeStorageValidRequest): CheckFreeStorageValidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFreeStorageValid', 'POST', '/', 'json', false, 'json', request);
}

model ConsumeFreeStorageRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  enableDefaultPlan?: boolean(name='EnableDefaultPlan', position='Query'),
  eventRecordDuration?: int32(name='EventRecordDuration', minimum=0, maximum=30, position='Query'),
  eventRecordProlong?: boolean(name='EventRecordProlong', position='Query'),
  immediateUse?: boolean(name='ImmediateUse', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', minimum=0, maximum=5, position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  quota?: int32(name='Quota', minimum=1, maximum=100, position='Query'),
}

model ConsumeFreeStorageResponseBody = {
  code?: string(name='Code'),
  data?: {
    consumed?: int32(name='Consumed'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    expired?: int32(name='Expired'),
    lifecycle?: int32(name='Lifecycle'),
    months?: int32(name='Months'),
    remainQuota?: int32(name='RemainQuota'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    type?: int32(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConsumeFreeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConsumeFreeStorageResponseBody(name='body'),
}

async function consumeFreeStorage(request: ConsumeFreeStorageRequest): ConsumeFreeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConsumeFreeStorage', 'POST', '/', 'json', false, 'json', request);
}

model CreateAndPayStorageOrderRequest {
  commodityCode: string(name='CommodityCode', position='Query'),
  copies: int32(name='Copies', minimum=1, maximum=100, position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  deviceNoOwner?: boolean(name='DeviceNoOwner', position='Query'),
  enableDefaultPlan?: boolean(name='EnableDefaultPlan', position='Query'),
  eventRecordDuration?: int32(name='EventRecordDuration', minimum=0, maximum=30, position='Query'),
  eventRecordProlong?: boolean(name='EventRecordProlong', position='Query'),
  immediateUse?: boolean(name='ImmediateUse', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  maxRecordFileDuration?: int32(name='MaxRecordFileDuration', minimum=600, maximum=3600, position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', minimum=0, maximum=5, position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  specification: string(name='Specification', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model CreateAndPayStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAndPayStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAndPayStorageOrderResponseBody(name='body'),
}

async function createAndPayStorageOrder(request: CreateAndPayStorageOrderRequest): CreateAndPayStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndPayStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model EnableFreeStorageRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model EnableFreeStorageResponseBody = {
  code?: string(name='Code'),
  data?: {
    consumed?: int32(name='Consumed'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    expired?: int32(name='Expired'),
    lifecycle?: int32(name='Lifecycle'),
    months?: int32(name='Months'),
    remainQuota?: int32(name='RemainQuota'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    type?: int32(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableFreeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableFreeStorageResponseBody(name='body'),
}

async function enableFreeStorage(request: EnableFreeStorageRequest): EnableFreeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableFreeStorage', 'POST', '/', 'json', false, 'json', request);
}

model EnableStorageOrderRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  orderId: string(name='OrderId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model EnableStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableStorageOrderResponseBody(name='body'),
}

async function enableStorageOrder(request: EnableStorageOrderRequest): EnableStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model FreezeFreeStorageRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model FreezeFreeStorageResponseBody = {
  code?: string(name='Code'),
  data?: {
    consumed?: int32(name='Consumed'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    expired?: int32(name='Expired'),
    lifecycle?: int32(name='Lifecycle'),
    months?: int32(name='Months'),
    remainQuota?: int32(name='RemainQuota'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    type?: int32(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FreezeFreeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FreezeFreeStorageResponseBody(name='body'),
}

async function freezeFreeStorage(request: FreezeFreeStorageRequest): FreezeFreeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeFreeStorage', 'POST', '/', 'json', false, 'json', request);
}

model FreezeStorageOrderRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  deviceNoOwner?: boolean(name='DeviceNoOwner', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  orderId: string(name='OrderId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model FreezeStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FreezeStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FreezeStorageOrderResponseBody(name='body'),
}

async function freezeStorageOrder(request: FreezeStorageOrderRequest): FreezeStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model GenerateDeviceRequest {
  amount: long(name='Amount', minimum=1, maximum=10000, position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model GenerateDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    batchId?: string(name='BatchId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceResponseBody(name='body'),
}

async function generateDevice(request: GenerateDeviceRequest): GenerateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateDevice', 'POST', '/', 'json', false, 'json', request);
}

model GenerateDeviceByBatchIdRequest {
  batchId: string(name='BatchId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model GenerateDeviceByBatchIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    batchId?: string(name='BatchId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateDeviceByBatchIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceByBatchIdResponseBody(name='body'),
}

async function generateDeviceByBatchId(request: GenerateDeviceByBatchIdRequest): GenerateDeviceByBatchIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateDeviceByBatchId', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountByIdRequest {
  identityId?: string(name='IdentityId', example='5035op97******************a63994', position='Query'),
  openId?: string(name='OpenId', example='60yqjd1**************************561da00851', position='Query'),
  openIdAppKey?: string(name='OpenIdAppKey', example='76****57', position='Query'),
}

model GetAccountByIdResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    email?: string(name='Email', example='******'),
    gmtCreate?: long(name='GmtCreate', example='1700189358000'),
    gmtModified?: long(name='GmtModified', example='1700209499000'),
    identityId?: string(name='IdentityId', example='5035op97******************a63994'),
    lastLoginTime?: long(name='LastLoginTime', example='1700209499000'),
    loginName?: string(name='LoginName', example='18*******20'),
    nickName?: string(name='NickName', example='18*******20'),
    phone?: string(name='Phone', example='18*******20'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Unexpected internal error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model GetAccountByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountByIdResponseBody(name='body'),
}

async function getAccountById(request: GetAccountByIdRequest): GetAccountByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountById', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceStatusRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model GetDeviceStatusResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    status?: string(name='Status', example='ONLINE'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Unexpected internal error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceStatusResponseBody(name='body'),
}

async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSubDeviceListRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', example='5', minimum=1, maximum=50, position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model GetSubDeviceListResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    subDeviceList?: [ 
      {
        deviceName?: string(name='DeviceName', example='device-test'),
        iotId?: string(name='IotId', example='qswdfrttgg*********'),
        productKey?: string(name='ProductKey', example='wse5******'),
      }
    ](name='SubDeviceList'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model GetSubDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubDeviceListResponseBody(name='body'),
}

async function getSubDeviceList(request: GetSubDeviceListRequest): GetSubDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubDeviceList', 'POST', '/', 'json', false, 'json', request);
}

model GetThingEventSnapshotRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  identifier: string(name='Identifier', example='AlarmType', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model GetThingEventSnapshotResponseBody = {
  code?: string(name='Code', example='400'),
  data?: [ 
    {
      eventBody?: string(name='EventBody', example='{\\"EventList \\":[{\\"AlarmPicID \\":\\"\\",\\"EventTime \\":\\"1700010288542 \\",\\"AlarmType \\":1,\\"AlarmPicSize \\":1,\\"Data \\":\\"test \\"}]}'),
      eventCode?: string(name='EventCode', example='IntelligentAlarm'),
      eventType?: string(name='EventType', example='alert'),
      identifier?: string(name='Identifier', example='IntelligentAlarm'),
      iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****'),
      timestamp?: long(name='Timestamp', example='1700010288668'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Unexpected internal error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingEventSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingEventSnapshotResponseBody(name='body'),
}

async function getThingEventSnapshot(request: GetThingEventSnapshotRequest): GetThingEventSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingEventSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model GetThingPropertySnapshotRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model GetThingPropertySnapshotResponseBody = {
  code?: string(name='Code', example='400'),
  data?: string(name='Data', example='{\\"StreamVideoQuality\\":{\\"time\\":1699951400324,\\"value\\":\\"0\\"},\\"MotionDetectSensitivity\\":{\\"time\\":1699951400324,\\"value\\":\\"0\\"},\\"ImageFlipState\\":{\\"time\\":1699951400324,\\"value\\":\\"0\\"},\\"SubStreamVideoQuality\\":{\\"time\\":1699951400324,\\"value\\":\\"0\\"},\\"AlarmSwitch\\":{\\"time\\":1699951400324,\\"value\\":\\"0\\"},\\"AlarmFrequencyLevel\\":{\\"time\\":1700009930921,\\"value\\":\\"10\\"}}'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingPropertySnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingPropertySnapshotResponseBody(name='body'),
}

async function getThingPropertySnapshot(request: GetThingPropertySnapshotRequest): GetThingPropertySnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingPropertySnapshot', 'POST', '/', 'json', false, 'json', request);
}

model InvokeThingServiceRequest {
  args?: string(name='Args', example='{"param1":1}', position='Query'),
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  identifier: string(name='Identifier', example='SetNum', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model InvokeThingServiceResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    data?: string(name='Data', example='{"param1":1}'),
    messageId?: string(name='MessageId', example='abcabcabc1234****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeThingServiceResponseBody(name='body'),
}

async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeThingService', 'POST', '/', 'json', false, 'json', request);
}

model ListBindingAccountByDeviceRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  owned?: int32(name='Owned', example='0', minimum=0, maximum=1, position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', example='5', minimum=1, maximum=50, position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model ListBindingAccountByDeviceResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    accountList?: [ 
      {
        bindTime?: long(name='BindTime', example='2222220000000'),
        identityAlias?: string(name='IdentityAlias', example='18*******20'),
        identityId?: string(name='IdentityId', example='5035op97******************a63994'),
      }
    ](name='AccountList'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Unexpected internal error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model ListBindingAccountByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindingAccountByDeviceResponseBody(name='body'),
}

async function listBindingAccountByDevice(request: ListBindingAccountByDeviceRequest): ListBindingAccountByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindingAccountByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListBindingDeviceByAccountRequest {
  identityId?: string(name='IdentityId', position='Query'),
  openId?: string(name='OpenId', position='Query'),
  openIdAppKey?: string(name='OpenIdAppKey', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  subDevice?: boolean(name='SubDevice', position='Query'),
}

model ListBindingDeviceByAccountResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceList?: [ 
      {
        bindTime?: long(name='BindTime'),
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
        nodeType?: string(name='NodeType'),
        owned?: int32(name='Owned'),
        productKey?: string(name='ProductKey'),
      }
    ](name='DeviceList'),
    pageCount?: int32(name='PageCount'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBindingDeviceByAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindingDeviceByAccountResponseBody(name='body'),
}

async function listBindingDeviceByAccount(request: ListBindingDeviceByAccountRequest): ListBindingDeviceByAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindingDeviceByAccount', 'POST', '/', 'json', false, 'json', request);
}

model QueryBatchStatusRequest {
  batchId: string(name='BatchId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model QueryBatchStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
      }
    ](name='InvalidDetailList'),
    invalidList?: [ string ](name='InvalidList'),
    status?: string(name='Status'),
    validList?: [ string ](name='ValidList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBatchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBatchStatusResponseBody(name='body'),
}

async function queryBatchStatus(request: QueryBatchStatusRequest): QueryBatchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBatchStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDetailRequest {
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
  projectId: string(name='ProjectId', example='a123qs*****sy4QU', position='Query'),
}

model QueryDeviceDetailResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    activeTime?: long(name='ActiveTime', example='1934500000000'),
    createTime?: long(name='CreateTime', example='1834500000000'),
    deviceName?: string(name='DeviceName', example='Device01'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    firmwareVersion?: string(name='FirmwareVersion', example='V1.0.0.0'),
    iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****'),
    ipAddress?: string(name='IpAddress', example='10.***.***.***'),
    nickname?: string(name='Nickname', example='detectors_in_beijing'),
    nodeType?: int32(name='NodeType', example='0'),
    onlineTime?: long(name='OnlineTime', example='2298700000000'),
    productKey?: string(name='ProductKey', example='a1Bw******'),
    productName?: string(name='ProductName', example='test'),
    region?: string(name='Region', example='cn-shanghai'),
    status?: string(name='Status', example='ONLINE'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesDownloadUrlRequest {
  batchId: string(name='BatchId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryDevicesDownloadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    ossDownloadUrl?: string(name='OssDownloadUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicesDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesDownloadUrlResponseBody(name='body'),
}

async function queryDevicesDownloadUrl(request: QueryDevicesDownloadUrlRequest): QueryDevicesDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryFreeStorageRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryFreeStorageResponseBody = {
  code?: string(name='Code'),
  data?: {
    consumed?: int32(name='Consumed'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    expired?: int32(name='Expired'),
    lifecycle?: int32(name='Lifecycle'),
    months?: int32(name='Months'),
    remainQuota?: int32(name='RemainQuota'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    type?: int32(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFreeStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFreeStorageResponseBody(name='body'),
}

async function queryFreeStorage(request: QueryFreeStorageRequest): QueryFreeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFreeStorage', 'POST', '/', 'json', false, 'json', request);
}

model QueryGenerateDevicesInfoListRequest {
  batchId: string(name='BatchId', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model QueryGenerateDevicesInfoListResponseBody = {
  code?: string(name='Code'),
  data?: {
    listData?: [ 
      {
        deviceName?: string(name='DeviceName'),
        deviceSecret?: string(name='DeviceSecret'),
        iotId?: string(name='IotId'),
      }
    ](name='ListData'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGenerateDevicesInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGenerateDevicesInfoListResponseBody(name='body'),
}

async function queryGenerateDevicesInfoList(request: QueryGenerateDevicesInfoListRequest): QueryGenerateDevicesInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGenerateDevicesInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryGenerateDevicesRecordRequest {
  endTime: long(name='EndTime', example='1659283200000', minimum=1, maximum=9999999999999, position='Body'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=1000, position='Body'),
  pageSize: int32(name='PageSize', example='1', minimum=1, maximum=100, position='Body'),
  startTime: long(name='StartTime', example='1690819200000', minimum=1, maximum=9999999999999, position='Body'),
}

model QueryGenerateDevicesRecordResponseBody = {
  code?: string(name='Code', example='400'),
  data?: {
    listData?: [ 
      {
        applyDeviceCount?: long(name='ApplyDeviceCount', example='133'),
        batchId?: string(name='BatchId', example='1508******195'),
        batchStatus?: string(name='BatchStatus', example='CREATE'),
        createTime?: long(name='CreateTime', example='1690819200000'),
        networkType?: string(name='NetworkType', example='WIFI'),
        operateUid?: long(name='OperateUid', example='110000000000'),
        productKey?: string(name='ProductKey', example='a3w******'),
        productName?: string(name='ProductName'),
        specCode?: string(name='SpecCode', example='Consumer_IPC_512Kbps'),
        successCount?: long(name='SuccessCount', example='5'),
      }
    ](name='ListData'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    total?: int32(name='Total', example='5'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E5******-4***-***B-8**E-D3********65'),
  success?: boolean(name='Success', example='true'),
}

model QueryGenerateDevicesRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGenerateDevicesRecordResponseBody(name='body'),
}

async function queryGenerateDevicesRecord(request: QueryGenerateDevicesRecordRequest): QueryGenerateDevicesRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGenerateDevicesRecord', 'POST', '/', 'json', true, 'form', request);
}

model QueryStorageCommodityListRequest {
}

model QueryStorageCommodityListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityName?: string(name='CommodityName'),
      lifecycle?: int32(name='Lifecycle'),
      months?: int32(name='Months'),
      price?: string(name='Price'),
      recordType?: int32(name='RecordType'),
      specification?: string(name='Specification'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStorageCommodityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStorageCommodityListResponseBody(name='body'),
}

async function queryStorageCommodityList(request: QueryStorageCommodityListRequest): QueryStorageCommodityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStorageCommodityList', 'POST', '/', 'json', false, 'json', request);
}

model QueryStorageOrderRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  deviceNoOwner?: boolean(name='DeviceNoOwner', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  orderId: string(name='OrderId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStorageOrderResponseBody(name='body'),
}

async function queryStorageOrder(request: QueryStorageOrderRequest): QueryStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model QueryStorageOrderListRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  deviceNoOwner?: boolean(name='DeviceNoOwner', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  pageNo: int32(name='PageNo', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryStorageOrderListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageCount?: int32(name='PageCount'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    storageOrderList?: [ 
      {
        commodityCode?: string(name='CommodityCode'),
        copies?: int32(name='Copies'),
        endTime?: string(name='EndTime'),
        endTimeUTC?: string(name='EndTimeUTC'),
        identityId?: string(name='IdentityId'),
        iotId?: string(name='IotId'),
        orderId?: string(name='OrderId'),
        orderType?: int32(name='OrderType'),
        outOrderNo?: string(name='OutOrderNo'),
        paymentStatus?: int32(name='PaymentStatus'),
        preConsume?: int32(name='PreConsume'),
        price?: string(name='Price'),
        recordType?: int32(name='RecordType'),
        specification?: string(name='Specification'),
        startTime?: string(name='StartTime'),
        startTimeUTC?: string(name='StartTimeUTC'),
        status?: int32(name='Status'),
        userId?: string(name='UserId'),
        userName?: string(name='UserName'),
      }
    ](name='StorageOrderList'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStorageOrderListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStorageOrderListResponseBody(name='body'),
}

async function queryStorageOrderList(request: QueryStorageOrderListRequest): QueryStorageOrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStorageOrderList', 'POST', '/', 'json', false, 'json', request);
}

model SetThingPropertyRequest {
  args: string(name='Args', example='{"Switch":1,"Color":"blue"}', position='Query'),
  deviceName?: string(name='DeviceName', example='Device01', position='Query'),
  iotId?: string(name='IotId', example='C47T6xwp6ms4bNlkHRWCg4****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw******', position='Query'),
}

model SetThingPropertyResponseBody = {
  code?: string(name='Code', example='400'),
  errorMessage?: string(name='ErrorMessage', example='Request parameter error.'),
  requestId?: string(name='RequestId', example='E55***B7-4***-4***-8***-D3******F565'),
  success?: boolean(name='Success', example='true'),
}

model SetThingPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetThingPropertyResponseBody(name='body'),
}

async function setThingProperty(request: SetThingPropertyRequest): SetThingPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetThingProperty', 'POST', '/', 'json', false, 'json', request);
}

model TransferStorageOrderRequest {
  dstIotId: string(name='DstIotId', position='Query'),
  enableDefaultPlan?: boolean(name='EnableDefaultPlan', position='Query'),
  eventRecordDuration?: int32(name='EventRecordDuration', minimum=0, maximum=30, position='Query'),
  eventRecordProlong?: boolean(name='EventRecordProlong', position='Query'),
  immediateUse?: boolean(name='ImmediateUse', position='Query'),
  preRecordDuration?: int32(name='PreRecordDuration', minimum=0, maximum=5, position='Query'),
  srcIotId: string(name='SrcIotId', position='Query'),
  srcOrderId: string(name='SrcOrderId', position='Query'),
  supportCrossIdentityTransfer?: boolean(name='SupportCrossIdentityTransfer', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model TransferStorageOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    copies?: int32(name='Copies'),
    endTime?: string(name='EndTime'),
    endTimeUTC?: string(name='EndTimeUTC'),
    identityId?: string(name='IdentityId'),
    iotId?: string(name='IotId'),
    orderId?: string(name='OrderId'),
    orderType?: int32(name='OrderType'),
    outOrderNo?: string(name='OutOrderNo'),
    paymentStatus?: int32(name='PaymentStatus'),
    preConsume?: int32(name='PreConsume'),
    price?: string(name='Price'),
    recordType?: int32(name='RecordType'),
    specification?: string(name='Specification'),
    startTime?: string(name='StartTime'),
    startTimeUTC?: string(name='StartTimeUTC'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferStorageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransferStorageOrderResponseBody(name='body'),
}

async function transferStorageOrder(request: TransferStorageOrderRequest): TransferStorageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferStorageOrder', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAllUserByDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  unbindSubDevice?: boolean(name='UnbindSubDevice', position='Query'),
}

model UnbindAllUserByDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    subDeviceUnbindResult?: [ 
      {
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
        unbindResultCode?: int32(name='UnbindResultCode'),
        unbindResultMessage?: string(name='UnbindResultMessage'),
      }
    ](name='SubDeviceUnbindResult'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindAllUserByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAllUserByDeviceResponseBody(name='body'),
}

async function unbindAllUserByDevice(request: UnbindAllUserByDeviceRequest): UnbindAllUserByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAllUserByDevice', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  identityId?: string(name='IdentityId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  openId?: string(name='OpenId', position='Query'),
  openIdAppKey?: string(name='OpenIdAppKey', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  unbindSubDevice?: boolean(name='UnbindSubDevice', position='Query'),
}

model UnbindDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    subDeviceUnbindResult?: [ 
      {
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
        unbindResultCode?: int32(name='UnbindResultCode'),
        unbindResultMessage?: string(name='UnbindResultMessage'),
      }
    ](name='SubDeviceUnbindResult'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindDeviceResponseBody(name='body'),
}

async function unbindDevice(request: UnbindDeviceRequest): UnbindDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDevice', 'POST', '/', 'json', false, 'json', request);
}

model UploadDeviceNameListRequest {
  deviceNames: [ string ](name='DeviceNames', position='Body'),
  productKey: string(name='ProductKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
}

model UploadDeviceNameListResponseBody = {
  code?: string(name='Code'),
  data?: {
    batchId?: string(name='BatchId'),
    invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
      }
    ](name='InvalidDetailList'),
    invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList'),
    repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadDeviceNameListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadDeviceNameListResponseBody(name='body'),
}

async function uploadDeviceNameList(request: UploadDeviceNameListRequest): UploadDeviceNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadDeviceNameList', 'POST', '/', 'json', true, 'form', request);
}

