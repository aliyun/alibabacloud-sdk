/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  

  checkConfig(config);
  @endpoint = getEndpoint('dyplsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAxnTrackNoRequest {
  ownerId?: long(name='OwnerId'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subsId?: string(name='SubsId'),
  trackNo?: string(name='trackNo'),
}

model AddAxnTrackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddAxnTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: AddAxnTrackNoResponseBody(name='body'),
}

async function addAxnTrackNoWithOptions(request: AddAxnTrackNoRequest, runtime: Util.RuntimeOptions): AddAxnTrackNoResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SubsId"] = request.subsId;
  query["trackNo"] = request.trackNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddAxnTrackNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAxnTrackNo(request: AddAxnTrackNoRequest): AddAxnTrackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAxnTrackNoWithOptions(request, runtime);
}

model AddSecretBlacklistRequest {
  blackNo?: string(name='BlackNo'),
  blackType?: string(name='BlackType'),
  poolKey?: string(name='PoolKey'),
  remark?: string(name='Remark'),
  wayControl?: string(name='WayControl'),
}

model AddSecretBlacklistResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecretBlacklistResponseBody(name='body'),
}

async function addSecretBlacklistWithOptions(request: AddSecretBlacklistRequest, runtime: Util.RuntimeOptions): AddSecretBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["BlackNo"] = request.blackNo;
  query["BlackType"] = request.blackType;
  query["PoolKey"] = request.poolKey;
  query["Remark"] = request.remark;
  query["WayControl"] = request.wayControl;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddSecretBlacklist',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSecretBlacklist(request: AddSecretBlacklistRequest): AddSecretBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSecretBlacklistWithOptions(request, runtime);
}

model BindAxbRequest {
  ASRModelId?: string(name='ASRModelId'),
  ASRStatus?: boolean(name='ASRStatus'),
  callDisplayType?: int32(name='CallDisplayType'),
  callRestrict?: string(name='CallRestrict'),
  callTimeout?: int32(name='CallTimeout'),
  expectCity?: string(name='ExpectCity'),
  expiration?: string(name='Expiration'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  ownerId?: long(name='OwnerId'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ringConfig?: string(name='RingConfig'),
}

model BindAxbResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxbResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxbResponseBody(name='body'),
}

async function bindAxbWithOptions(request: BindAxbRequest, runtime: Util.RuntimeOptions): BindAxbResponse {
  Util.validateModel(request);
  var query = {};
  query["ASRModelId"] = request.ASRModelId;
  query["ASRStatus"] = request.ASRStatus;
  query["CallDisplayType"] = request.callDisplayType;
  query["CallRestrict"] = request.callRestrict;
  query["CallTimeout"] = request.callTimeout;
  query["ExpectCity"] = request.expectCity;
  query["Expiration"] = request.expiration;
  query["IsRecordingEnabled"] = request.isRecordingEnabled;
  query["OutId"] = request.outId;
  query["OutOrderId"] = request.outOrderId;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoA"] = request.phoneNoA;
  query["PhoneNoB"] = request.phoneNoB;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["RingConfig"] = request.ringConfig;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindAxb',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAxb(request: BindAxbRequest): BindAxbResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxbWithOptions(request, runtime);
}

model BindAxgRequest {
  ASRModelId?: string(name='ASRModelId'),
  ASRStatus?: boolean(name='ASRStatus'),
  callDisplayType?: int32(name='CallDisplayType'),
  callRestrict?: string(name='CallRestrict'),
  expectCity?: string(name='ExpectCity'),
  expiration?: string(name='Expiration'),
  groupId?: string(name='GroupId'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  ownerId?: long(name='OwnerId'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ringConfig?: string(name='RingConfig'),
}

model BindAxgResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxgResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxgResponseBody(name='body'),
}

async function bindAxgWithOptions(request: BindAxgRequest, runtime: Util.RuntimeOptions): BindAxgResponse {
  Util.validateModel(request);
  var query = {};
  query["ASRModelId"] = request.ASRModelId;
  query["ASRStatus"] = request.ASRStatus;
  query["CallDisplayType"] = request.callDisplayType;
  query["CallRestrict"] = request.callRestrict;
  query["ExpectCity"] = request.expectCity;
  query["Expiration"] = request.expiration;
  query["GroupId"] = request.groupId;
  query["IsRecordingEnabled"] = request.isRecordingEnabled;
  query["OutId"] = request.outId;
  query["OutOrderId"] = request.outOrderId;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoA"] = request.phoneNoA;
  query["PhoneNoB"] = request.phoneNoB;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["RingConfig"] = request.ringConfig;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindAxg',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAxg(request: BindAxgRequest): BindAxgResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxgWithOptions(request, runtime);
}

model BindAxnRequest {
  ASRModelId?: string(name='ASRModelId'),
  ASRStatus?: boolean(name='ASRStatus'),
  callDisplayType?: int32(name='CallDisplayType'),
  callRestrict?: string(name='CallRestrict'),
  callTimeout?: int32(name='CallTimeout'),
  expectCity?: string(name='ExpectCity'),
  expiration?: string(name='Expiration'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  noType?: string(name='NoType'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  ownerId?: long(name='OwnerId'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ringConfig?: string(name='RingConfig'),
}

model BindAxnResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxnResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnResponseBody(name='body'),
}

async function bindAxnWithOptions(request: BindAxnRequest, runtime: Util.RuntimeOptions): BindAxnResponse {
  Util.validateModel(request);
  var query = {};
  query["ASRModelId"] = request.ASRModelId;
  query["ASRStatus"] = request.ASRStatus;
  query["CallDisplayType"] = request.callDisplayType;
  query["CallRestrict"] = request.callRestrict;
  query["CallTimeout"] = request.callTimeout;
  query["ExpectCity"] = request.expectCity;
  query["Expiration"] = request.expiration;
  query["IsRecordingEnabled"] = request.isRecordingEnabled;
  query["NoType"] = request.noType;
  query["OutId"] = request.outId;
  query["OutOrderId"] = request.outOrderId;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoA"] = request.phoneNoA;
  query["PhoneNoB"] = request.phoneNoB;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["RingConfig"] = request.ringConfig;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindAxn',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAxn(request: BindAxnRequest): BindAxnResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxnWithOptions(request, runtime);
}

model BindAxnExtensionRequest {
  ASRModelId?: string(name='ASRModelId'),
  ASRStatus?: boolean(name='ASRStatus'),
  callDisplayType?: int32(name='CallDisplayType'),
  callRestrict?: string(name='CallRestrict'),
  expectCity?: string(name='ExpectCity'),
  expiration?: string(name='Expiration'),
  extension?: string(name='Extension'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  ownerId?: long(name='OwnerId'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ringConfig?: string(name='RingConfig'),
}

model BindAxnExtensionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxnExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnExtensionResponseBody(name='body'),
}

async function bindAxnExtensionWithOptions(request: BindAxnExtensionRequest, runtime: Util.RuntimeOptions): BindAxnExtensionResponse {
  Util.validateModel(request);
  var query = {};
  query["ASRModelId"] = request.ASRModelId;
  query["ASRStatus"] = request.ASRStatus;
  query["CallDisplayType"] = request.callDisplayType;
  query["CallRestrict"] = request.callRestrict;
  query["ExpectCity"] = request.expectCity;
  query["Expiration"] = request.expiration;
  query["Extension"] = request.extension;
  query["IsRecordingEnabled"] = request.isRecordingEnabled;
  query["OutId"] = request.outId;
  query["OutOrderId"] = request.outOrderId;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoA"] = request.phoneNoA;
  query["PhoneNoB"] = request.phoneNoB;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["RingConfig"] = request.ringConfig;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindAxnExtension',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAxnExtension(request: BindAxnExtensionRequest): BindAxnExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxnExtensionWithOptions(request, runtime);
}

model BuySecretNoRequest {
  city?: string(name='City'),
  displayPool?: boolean(name='DisplayPool'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  specId?: long(name='SpecId'),
}

model BuySecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBuyInfoDTO?: {
    secretNo?: string(name='SecretNo'),
  }(name='SecretBuyInfoDTO'),
}

model BuySecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: BuySecretNoResponseBody(name='body'),
}

async function buySecretNoWithOptions(request: BuySecretNoRequest, runtime: Util.RuntimeOptions): BuySecretNoResponse {
  Util.validateModel(request);
  var query = {};
  query["City"] = request.city;
  query["DisplayPool"] = request.displayPool;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SpecId"] = request.specId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BuySecretNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function buySecretNo(request: BuySecretNoRequest): BuySecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return buySecretNoWithOptions(request, runtime);
}

model CancelPickUpWaybillRequest {
  cancelDesc?: string(name='CancelDesc'),
  outerOrderCode?: string(name='OuterOrderCode'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelPickUpWaybillResponseBody = {
  code?: string(name='Code'),
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelPickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPickUpWaybillResponseBody(name='body'),
}

async function cancelPickUpWaybillWithOptions(request: CancelPickUpWaybillRequest, runtime: Util.RuntimeOptions): CancelPickUpWaybillResponse {
  Util.validateModel(request);
  var query = {};
  query["CancelDesc"] = request.cancelDesc;
  query["OuterOrderCode"] = request.outerOrderCode;
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CancelPickUpWaybill',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelPickUpWaybill(request: CancelPickUpWaybillRequest): CancelPickUpWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPickUpWaybillWithOptions(request, runtime);
}

model ConfirmSendSmsRequest {
  callId?: string(name='CallId'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model ConfirmSendSmsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ConfirmSendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmSendSmsResponseBody(name='body'),
}

async function confirmSendSmsWithOptions(request: ConfirmSendSmsRequest, runtime: Util.RuntimeOptions): ConfirmSendSmsResponse {
  Util.validateModel(request);
  var query = {};
  query["CallId"] = request.callId;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmSendSms',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmSendSms(request: ConfirmSendSmsRequest): ConfirmSendSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmSendSmsWithOptions(request, runtime);
}

model CreateAxgGroupRequest {
  name?: string(name='Name'),
  numbers?: string(name='Numbers'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateAxgGroupResponseBody = {
  code?: string(name='Code'),
  groupId?: long(name='GroupId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAxgGroupResponseBody(name='body'),
}

async function createAxgGroupWithOptions(request: CreateAxgGroupRequest, runtime: Util.RuntimeOptions): CreateAxgGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["Numbers"] = request.numbers;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["Remark"] = request.remark;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAxgGroup',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAxgGroup(request: CreateAxgGroupRequest): CreateAxgGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAxgGroupWithOptions(request, runtime);
}

model CreatePickUpWaybillRequest {
  consigneeAddress?: {
    addressDetail?: string(name='AddressDetail'),
    areaName?: string(name='AreaName'),
    cityName?: string(name='CityName'),
    provinceName?: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='ConsigneeAddress'),
  consigneeMobile?: string(name='ConsigneeMobile'),
  consigneeName?: string(name='ConsigneeName'),
  consigneePhone?: string(name='ConsigneePhone'),
  cpCode?: string(name='CpCode'),
  goodsInfos?: [ 
    {
      name?: string(name='Name'),
      quantity?: string(name='Quantity'),
      weight?: string(name='Weight'),
    }
  ](name='GoodsInfos'),
  orderChannels?: string(name='OrderChannels'),
  outerOrderCode?: string(name='OuterOrderCode'),
  remark?: string(name='Remark'),
  sendAddress?: {
    addressDetail?: string(name='AddressDetail'),
    areaName?: string(name='AreaName'),
    cityName?: string(name='CityName'),
    provinceName?: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='SendAddress'),
  sendMobile?: string(name='SendMobile'),
  sendName?: string(name='SendName'),
  sendPhone?: string(name='SendPhone'),
}

model CreatePickUpWaybillShrinkRequest {
  consigneeAddressShrink?: string(name='ConsigneeAddress'),
  consigneeMobile?: string(name='ConsigneeMobile'),
  consigneeName?: string(name='ConsigneeName'),
  consigneePhone?: string(name='ConsigneePhone'),
  cpCode?: string(name='CpCode'),
  goodsInfosShrink?: string(name='GoodsInfos'),
  orderChannels?: string(name='OrderChannels'),
  outerOrderCode?: string(name='OuterOrderCode'),
  remark?: string(name='Remark'),
  sendAddressShrink?: string(name='SendAddress'),
  sendMobile?: string(name='SendMobile'),
  sendName?: string(name='SendName'),
  sendPhone?: string(name='SendPhone'),
}

model CreatePickUpWaybillResponseBody = {
  data?: {
    cpCode?: string(name='CpCode'),
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    mailNo?: string(name='MailNo'),
    success?: string(name='Success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePickUpWaybillResponseBody(name='body'),
}

async function createPickUpWaybillWithOptions(tmpReq: CreatePickUpWaybillRequest, runtime: Util.RuntimeOptions): CreatePickUpWaybillResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePickUpWaybillShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.consigneeAddress)) {
    request.consigneeAddressShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.consigneeAddress, 'ConsigneeAddress', 'json');
  }
  if (!Util.isUnset(tmpReq.goodsInfos)) {
    request.goodsInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.goodsInfos, 'GoodsInfos', 'json');
  }
  if (!Util.isUnset(tmpReq.sendAddress)) {
    request.sendAddressShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sendAddress, 'SendAddress', 'json');
  }
  var query = {};
  query["ConsigneeAddress"] = request.consigneeAddressShrink;
  query["ConsigneeMobile"] = request.consigneeMobile;
  query["ConsigneeName"] = request.consigneeName;
  query["ConsigneePhone"] = request.consigneePhone;
  query["CpCode"] = request.cpCode;
  query["GoodsInfos"] = request.goodsInfosShrink;
  query["OrderChannels"] = request.orderChannels;
  query["OuterOrderCode"] = request.outerOrderCode;
  query["Remark"] = request.remark;
  query["SendAddress"] = request.sendAddressShrink;
  query["SendMobile"] = request.sendMobile;
  query["SendName"] = request.sendName;
  query["SendPhone"] = request.sendPhone;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreatePickUpWaybill',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPickUpWaybill(request: CreatePickUpWaybillRequest): CreatePickUpWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPickUpWaybillWithOptions(request, runtime);
}

model CreateSubscriptionRequest {
  bindToken?: string(name='BindToken'),
  ownerId?: long(name='OwnerId'),
  phoneNo?: string(name='PhoneNo'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model CreateSubscriptionResponseBody = {
  code?: string(name='Code'),
  data?: {
    subsId?: string(name='SubsId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionResponseBody(name='body'),
}

async function createSubscriptionWithOptions(request: CreateSubscriptionRequest, runtime: Util.RuntimeOptions): CreateSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  query["BindToken"] = request.bindToken;
  query["OwnerId"] = request.ownerId;
  query["PhoneNo"] = request.phoneNo;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscription',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubscription(request: CreateSubscriptionRequest): CreateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscriptionWithOptions(request, runtime);
}

model DeleteSecretBlacklistRequest {
  blackNo?: string(name='BlackNo'),
  blackType?: string(name='BlackType'),
  poolKey?: string(name='PoolKey'),
  remark?: string(name='Remark'),
  wayControl?: string(name='WayControl'),
}

model DeleteSecretBlacklistResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecretBlacklistResponseBody(name='body'),
}

async function deleteSecretBlacklistWithOptions(request: DeleteSecretBlacklistRequest, runtime: Util.RuntimeOptions): DeleteSecretBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["BlackNo"] = request.blackNo;
  query["BlackType"] = request.blackType;
  query["PoolKey"] = request.poolKey;
  query["Remark"] = request.remark;
  query["WayControl"] = request.wayControl;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecretBlacklist',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecretBlacklist(request: DeleteSecretBlacklistRequest): DeleteSecretBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecretBlacklistWithOptions(request, runtime);
}

model GetFaceVerifyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verifyToken?: string(name='VerifyToken'),
}

model GetFaceVerifyResponseBody = {
  code?: string(name='Code'),
  data?: {
    verifyResult?: string(name='VerifyResult'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceVerifyResponseBody(name='body'),
}

async function getFaceVerifyWithOptions(request: GetFaceVerifyRequest, runtime: Util.RuntimeOptions): GetFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["VerifyToken"] = request.verifyToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetFaceVerify',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFaceVerify(request: GetFaceVerifyRequest): GetFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceVerifyWithOptions(request, runtime);
}

model GetSecretAsrDetailRequest {
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
  poolKey?: string(name='PoolKey'),
}

model GetSecretAsrDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizDuration?: long(name='BizDuration'),
    businessId?: string(name='BusinessId'),
    businessKey?: string(name='BusinessKey'),
    code?: string(name='Code'),
    msg?: string(name='Msg'),
    requestId?: string(name='RequestId'),
    sentences?: [ 
      {
        beginTime?: long(name='BeginTime'),
        channelId?: int32(name='ChannelId'),
        emotionValue?: string(name='EmotionValue'),
        endTime?: long(name='EndTime'),
        silenceDuration?: long(name='SilenceDuration'),
        speechRate?: int32(name='SpeechRate'),
        text?: string(name='Text'),
      }
    ](name='Sentences'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSecretAsrDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecretAsrDetailResponseBody(name='body'),
}

async function getSecretAsrDetailWithOptions(request: GetSecretAsrDetailRequest, runtime: Util.RuntimeOptions): GetSecretAsrDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["CallId"] = request.callId;
  query["CallTime"] = request.callTime;
  query["PoolKey"] = request.poolKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetSecretAsrDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSecretAsrDetail(request: GetSecretAsrDetailRequest): GetSecretAsrDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSecretAsrDetailWithOptions(request, runtime);
}

model GetSubscriptionDetailRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  subsId?: long(name='SubsId'),
}

model GetSubscriptionDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    city?: string(name='City'),
    phoneNo?: string(name='PhoneNo'),
    province?: string(name='Province'),
    secretNo?: string(name='SecretNo'),
    subsId?: long(name='SubsId'),
    switchStatus?: int32(name='SwitchStatus'),
    vendor?: string(name='Vendor'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionDetailResponseBody(name='body'),
}

async function getSubscriptionDetailWithOptions(request: GetSubscriptionDetailRequest, runtime: Util.RuntimeOptions): GetSubscriptionDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubscriptionDetail(request: GetSubscriptionDetailRequest): GetSubscriptionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionDetailWithOptions(request, runtime);
}

model GetTotalPublicUrlRequest {
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
  checkSubs?: boolean(name='CheckSubs'),
  ownerId?: long(name='OwnerId'),
  partnerKey?: string(name='PartnerKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetTotalPublicUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    phonePublicUrl?: string(name='PhonePublicUrl'),
    ringPublicUrl?: string(name='RingPublicUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTotalPublicUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalPublicUrlResponseBody(name='body'),
}

async function getTotalPublicUrlWithOptions(request: GetTotalPublicUrlRequest, runtime: Util.RuntimeOptions): GetTotalPublicUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["CallId"] = request.callId;
  query["CallTime"] = request.callTime;
  query["CheckSubs"] = request.checkSubs;
  query["OwnerId"] = request.ownerId;
  query["PartnerKey"] = request.partnerKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetTotalPublicUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTotalPublicUrl(request: GetTotalPublicUrlRequest): GetTotalPublicUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTotalPublicUrlWithOptions(request, runtime);
}

model InitFaceVerifyRequest {
  metaInfo?: string(name='MetaInfo'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model InitFaceVerifyResponseBody = {
  code?: string(name='Code'),
  data?: {
    certifyId?: string(name='CertifyId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model InitFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: InitFaceVerifyResponseBody(name='body'),
}

async function initFaceVerifyWithOptions(request: InitFaceVerifyRequest, runtime: Util.RuntimeOptions): InitFaceVerifyResponse {
  Util.validateModel(request);
  var query = {};
  query["MetaInfo"] = request.metaInfo;
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'InitFaceVerify',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFaceVerifyWithOptions(request, runtime);
}

model LockSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model LockSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model LockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: LockSecretNoResponseBody(name='body'),
}

async function lockSecretNoWithOptions(request: LockSecretNoRequest, runtime: Util.RuntimeOptions): LockSecretNoResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'LockSecretNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lockSecretNo(request: LockSecretNoRequest): LockSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockSecretNoWithOptions(request, runtime);
}

model OperateAxgGroupRequest {
  groupId?: long(name='GroupId'),
  numbers?: string(name='Numbers'),
  operateType?: string(name='OperateType'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OperateAxgGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model OperateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAxgGroupResponseBody(name='body'),
}

async function operateAxgGroupWithOptions(request: OperateAxgGroupRequest, runtime: Util.RuntimeOptions): OperateAxgGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["GroupId"] = request.groupId;
  query["Numbers"] = request.numbers;
  query["OperateType"] = request.operateType;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'OperateAxgGroup',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateAxgGroup(request: OperateAxgGroupRequest): OperateAxgGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAxgGroupWithOptions(request, runtime);
}

model OperateBlackNoRequest {
  blackNo?: string(name='BlackNo'),
  operateType?: string(name='OperateType'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tips?: string(name='Tips'),
}

model OperateBlackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model OperateBlackNoResponse = {
  headers: map[string]string(name='headers'),
  body: OperateBlackNoResponseBody(name='body'),
}

async function operateBlackNoWithOptions(request: OperateBlackNoRequest, runtime: Util.RuntimeOptions): OperateBlackNoResponse {
  Util.validateModel(request);
  var query = {};
  query["BlackNo"] = request.blackNo;
  query["OperateType"] = request.operateType;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["Tips"] = request.tips;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'OperateBlackNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateBlackNo(request: OperateBlackNoRequest): OperateBlackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateBlackNoWithOptions(request, runtime);
}

model QueryCallStatusRequest {
  callNo?: string(name='CallNo'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subsId?: string(name='SubsId'),
}

model QueryCallStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretCallStatusDTO?: {
    calledNo?: string(name='CalledNo'),
    extension?: string(name='Extension'),
    status?: int32(name='Status'),
  }(name='SecretCallStatusDTO'),
}

model QueryCallStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallStatusResponseBody(name='body'),
}

async function queryCallStatusWithOptions(request: QueryCallStatusRequest, runtime: Util.RuntimeOptions): QueryCallStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["CallNo"] = request.callNo;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryCallStatus',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCallStatus(request: QueryCallStatusRequest): QueryCallStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallStatusWithOptions(request, runtime);
}

model QueryPhoneNoAByTrackNoRequest {
  cabinetNo?: string(name='CabinetNo'),
  ownerId?: long(name='OwnerId'),
  phoneNoX?: string(name='PhoneNoX'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trackNo?: string(name='trackNo'),
}

model QueryPhoneNoAByTrackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: [ 
    {
      extension?: string(name='Extension'),
      phoneNoA?: string(name='PhoneNoA'),
      phoneNoX?: string(name='PhoneNoX'),
    }
  ](name='Module'),
  requestId?: string(name='RequestId'),
}

model QueryPhoneNoAByTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPhoneNoAByTrackNoResponseBody(name='body'),
}

async function queryPhoneNoAByTrackNoWithOptions(request: QueryPhoneNoAByTrackNoRequest, runtime: Util.RuntimeOptions): QueryPhoneNoAByTrackNoResponse {
  Util.validateModel(request);
  var query = {};
  query["CabinetNo"] = request.cabinetNo;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoX"] = request.phoneNoX;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["trackNo"] = request.trackNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryPhoneNoAByTrackNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPhoneNoAByTrackNo(request: QueryPhoneNoAByTrackNoRequest): QueryPhoneNoAByTrackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPhoneNoAByTrackNoWithOptions(request, runtime);
}

model QueryRecordFileDownloadUrlRequest {
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRecordFileDownloadUrlResponseBody = {
  code?: string(name='Code'),
  downloadUrl?: string(name='DownloadUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRecordFileDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordFileDownloadUrlResponseBody(name='body'),
}

async function queryRecordFileDownloadUrlWithOptions(request: QueryRecordFileDownloadUrlRequest, runtime: Util.RuntimeOptions): QueryRecordFileDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["CallId"] = request.callId;
  query["CallTime"] = request.callTime;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ProductType"] = request.productType;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordFileDownloadUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordFileDownloadUrl(request: QueryRecordFileDownloadUrlRequest): QueryRecordFileDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordFileDownloadUrlWithOptions(request, runtime);
}

model QuerySecretNoDetailRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model QuerySecretNoDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretNoInfoDTO?: {
    certifyStatus?: int32(name='CertifyStatus'),
    city?: string(name='City'),
    province?: string(name='Province'),
    purchaseTime?: string(name='PurchaseTime'),
    secretStatus?: long(name='SecretStatus'),
    vendor?: long(name='Vendor'),
  }(name='SecretNoInfoDTO'),
}

model QuerySecretNoDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoDetailResponseBody(name='body'),
}

async function querySecretNoDetailWithOptions(request: QuerySecretNoDetailRequest, runtime: Util.RuntimeOptions): QuerySecretNoDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QuerySecretNoDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySecretNoDetail(request: QuerySecretNoDetailRequest): QuerySecretNoDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySecretNoDetailWithOptions(request, runtime);
}

model QuerySecretNoRemainRequest {
  city?: string(name='City'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  specId?: long(name='SpecId'),
}

model QuerySecretNoRemainResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretRemainDTO?: {
    amount?: long(name='Amount'),
    city?: string(name='City'),
    remainDTOList?: {
      remainDTO?: [ 
      {
        amount?: long(name='Amount'),
        city?: string(name='City'),
      }
    ](name='remainDTO')
    }(name='RemainDTOList'),
  }(name='SecretRemainDTO'),
}

model QuerySecretNoRemainResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoRemainResponseBody(name='body'),
}

async function querySecretNoRemainWithOptions(request: QuerySecretNoRemainRequest, runtime: Util.RuntimeOptions): QuerySecretNoRemainResponse {
  Util.validateModel(request);
  var query = {};
  query["City"] = request.city;
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SpecId"] = request.specId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QuerySecretNoRemain',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySecretNoRemain(request: QuerySecretNoRemainRequest): QuerySecretNoRemainResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySecretNoRemainWithOptions(request, runtime);
}

model QuerySubsIdRequest {
  ownerId?: long(name='OwnerId'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySubsIdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subsId?: string(name='SubsId'),
}

model QuerySubsIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubsIdResponseBody(name='body'),
}

async function querySubsIdWithOptions(request: QuerySubsIdRequest, runtime: Util.RuntimeOptions): QuerySubsIdResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QuerySubsId',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySubsId(request: QuerySubsIdRequest): QuerySubsIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubsIdWithOptions(request, runtime);
}

model QuerySubscriptionDetailRequest {
  ownerId?: long(name='OwnerId'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subsId?: string(name='SubsId'),
}

model QuerySubscriptionDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDetailDTO?: {
    ASRModelId?: string(name='ASRModelId'),
    ASRStatus?: boolean(name='ASRStatus'),
    callRestrict?: string(name='CallRestrict'),
    expireDate?: string(name='ExpireDate'),
    extension?: string(name='Extension'),
    gmtCreate?: string(name='GmtCreate'),
    groupId?: long(name='GroupId'),
    needRecord?: boolean(name='NeedRecord'),
    phoneNoA?: string(name='PhoneNoA'),
    phoneNoB?: string(name='PhoneNoB'),
    phoneNoX?: string(name='PhoneNoX'),
    status?: long(name='Status'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDetailDTO'),
}

model QuerySubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscriptionDetailResponseBody(name='body'),
}

async function querySubscriptionDetailWithOptions(request: QuerySubscriptionDetailRequest, runtime: Util.RuntimeOptions): QuerySubscriptionDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ProductType"] = request.productType;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QuerySubscriptionDetail',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySubscriptionDetail(request: QuerySubscriptionDetailRequest): QuerySubscriptionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubscriptionDetailWithOptions(request, runtime);
}

model ReleaseSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model ReleaseSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReleaseSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSecretNoResponseBody(name='body'),
}

async function releaseSecretNoWithOptions(request: ReleaseSecretNoRequest, runtime: Util.RuntimeOptions): ReleaseSecretNoResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseSecretNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseSecretNo(request: ReleaseSecretNoRequest): ReleaseSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseSecretNoWithOptions(request, runtime);
}

model UnbindSubscriptionRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  subsId?: string(name='SubsId'),
}

model UnbindSubscriptionResponseBody = {
  chargeId?: string(name='ChargeId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnbindSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSubscriptionResponseBody(name='body'),
}

async function unbindSubscriptionWithOptions(request: UnbindSubscriptionRequest, runtime: Util.RuntimeOptions): UnbindSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ProductType"] = request.productType;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSubscription',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSubscription(request: UnbindSubscriptionRequest): UnbindSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSubscriptionWithOptions(request, runtime);
}

model UnlockSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
}

model UnlockSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnlockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockSecretNoResponseBody(name='body'),
}

async function unlockSecretNoWithOptions(request: UnlockSecretNoRequest, runtime: Util.RuntimeOptions): UnlockSecretNoResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnlockSecretNo',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockSecretNo(request: UnlockSecretNoRequest): UnlockSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockSecretNoWithOptions(request, runtime);
}

model UpdateDefaultBRequest {
  ownerId?: long(name='OwnerId'),
  phoneNo?: string(name='PhoneNo'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  subsId?: long(name='SubsId'),
}

model UpdateDefaultBResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDefaultBResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDefaultBResponseBody(name='body'),
}

async function updateDefaultBWithOptions(request: UpdateDefaultBRequest, runtime: Util.RuntimeOptions): UpdateDefaultBResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PhoneNo"] = request.phoneNo;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDefaultB',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDefaultB(request: UpdateDefaultBRequest): UpdateDefaultBResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDefaultBWithOptions(request, runtime);
}

model UpdatePhoneNumberRequest {
  bindToken?: string(name='BindToken'),
  newPhoneNo?: string(name='NewPhoneNo'),
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  subsId?: long(name='SubsId'),
}

model UpdatePhoneNumberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdatePhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhoneNumberResponseBody(name='body'),
}

async function updatePhoneNumberWithOptions(request: UpdatePhoneNumberRequest, runtime: Util.RuntimeOptions): UpdatePhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  query["BindToken"] = request.bindToken;
  query["NewPhoneNo"] = request.newPhoneNo;
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneNumber',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePhoneNumber(request: UpdatePhoneNumberRequest): UpdatePhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneNumberWithOptions(request, runtime);
}

model UpdatePhoneSwitchRequest {
  ownerId?: long(name='OwnerId'),
  poolKey?: string(name='PoolKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secretNo?: string(name='SecretNo'),
  subsId?: long(name='SubsId'),
  switchStatus?: int32(name='SwitchStatus'),
}

model UpdatePhoneSwitchResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdatePhoneSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhoneSwitchResponseBody(name='body'),
}

async function updatePhoneSwitchWithOptions(request: UpdatePhoneSwitchRequest, runtime: Util.RuntimeOptions): UpdatePhoneSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["PoolKey"] = request.poolKey;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["SecretNo"] = request.secretNo;
  query["SubsId"] = request.subsId;
  query["SwitchStatus"] = request.switchStatus;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneSwitch',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePhoneSwitch(request: UpdatePhoneSwitchRequest): UpdatePhoneSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneSwitchWithOptions(request, runtime);
}

model UpdateSubscriptionRequest {
  ASRModelId?: string(name='ASRModelId'),
  ASRStatus?: boolean(name='ASRStatus'),
  callDisplayType?: int32(name='CallDisplayType'),
  callRestrict?: string(name='CallRestrict'),
  expiration?: string(name='Expiration'),
  groupId?: string(name='GroupId'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  operateType?: string(name='OperateType'),
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ringConfig?: string(name='RingConfig'),
  subsId?: string(name='SubsId'),
}

model UpdateSubscriptionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscriptionWithOptions(request: UpdateSubscriptionRequest, runtime: Util.RuntimeOptions): UpdateSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  query["ASRModelId"] = request.ASRModelId;
  query["ASRStatus"] = request.ASRStatus;
  query["CallDisplayType"] = request.callDisplayType;
  query["CallRestrict"] = request.callRestrict;
  query["Expiration"] = request.expiration;
  query["GroupId"] = request.groupId;
  query["IsRecordingEnabled"] = request.isRecordingEnabled;
  query["OperateType"] = request.operateType;
  query["OutId"] = request.outId;
  query["OwnerId"] = request.ownerId;
  query["PhoneNoA"] = request.phoneNoA;
  query["PhoneNoB"] = request.phoneNoB;
  query["PhoneNoX"] = request.phoneNoX;
  query["PoolKey"] = request.poolKey;
  query["ProductType"] = request.productType;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  query["RingConfig"] = request.ringConfig;
  query["SubsId"] = request.subsId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubscription',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscriptionWithOptions(request, runtime);
}

