/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('dyplsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAxnTrackNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoX?: string(name='PhoneNoX'),
  trackNo?: string(name='trackNo'),
  subsId?: string(name='SubsId'),
}

model AddAxnTrackNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model AddAxnTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: AddAxnTrackNoResponseBody(name='body'),
}

async function addAxnTrackNoWithOptions(request: AddAxnTrackNoRequest, runtime: Util.RuntimeOptions): AddAxnTrackNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAxnTrackNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAxnTrackNo(request: AddAxnTrackNoRequest): AddAxnTrackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAxnTrackNoWithOptions(request, runtime);
}

model AddSecretBlacklistRequest {
  poolKey?: string(name='PoolKey'),
  blackNo?: string(name='BlackNo'),
  remark?: string(name='Remark'),
  blackType?: string(name='BlackType'),
  wayControl?: string(name='WayControl'),
}

model AddSecretBlacklistResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model AddSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecretBlacklistResponseBody(name='body'),
}

async function addSecretBlacklistWithOptions(request: AddSecretBlacklistRequest, runtime: Util.RuntimeOptions): AddSecretBlacklistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddSecretBlacklist', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addSecretBlacklist(request: AddSecretBlacklistRequest): AddSecretBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSecretBlacklistWithOptions(request, runtime);
}

model BindAxbRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  expiration?: string(name='Expiration'),
  expectCity?: string(name='ExpectCity'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  callRestrict?: string(name='CallRestrict'),
  callDisplayType?: int32(name='CallDisplayType'),
  ringConfig?: string(name='RingConfig'),
  ASRStatus?: boolean(name='ASRStatus'),
  ASRModelId?: string(name='ASRModelId'),
  callTimeout?: int32(name='CallTimeout'),
}

model BindAxbResponseBody = {
  secretBindDTO?: {
    extension?: string(name='Extension'),
    subsId?: string(name='SubsId'),
    secretNo?: string(name='SecretNo'),
  }(name='SecretBindDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model BindAxbResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxbResponseBody(name='body'),
}

async function bindAxbWithOptions(request: BindAxbRequest, runtime: Util.RuntimeOptions): BindAxbResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindAxb', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindAxb(request: BindAxbRequest): BindAxbResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxbWithOptions(request, runtime);
}

model BindAxgRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoA?: string(name='PhoneNoA'),
  groupId?: string(name='GroupId'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  expiration?: string(name='Expiration'),
  expectCity?: string(name='ExpectCity'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  callDisplayType?: int32(name='CallDisplayType'),
  ringConfig?: string(name='RingConfig'),
  ASRStatus?: boolean(name='ASRStatus'),
  ASRModelId?: string(name='ASRModelId'),
  callRestrict?: string(name='CallRestrict'),
}

model BindAxgResponseBody = {
  secretBindDTO?: {
    extension?: string(name='Extension'),
    subsId?: string(name='SubsId'),
    secretNo?: string(name='SecretNo'),
  }(name='SecretBindDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model BindAxgResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxgResponseBody(name='body'),
}

async function bindAxgWithOptions(request: BindAxgRequest, runtime: Util.RuntimeOptions): BindAxgResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindAxg', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindAxg(request: BindAxgRequest): BindAxgResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxgWithOptions(request, runtime);
}

model BindAxnRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  expiration?: string(name='Expiration'),
  expectCity?: string(name='ExpectCity'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  noType?: string(name='NoType'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  callDisplayType?: int32(name='CallDisplayType'),
  ringConfig?: string(name='RingConfig'),
  ASRStatus?: boolean(name='ASRStatus'),
  ASRModelId?: string(name='ASRModelId'),
  callTimeout?: int32(name='CallTimeout'),
  callRestrict?: string(name='CallRestrict'),
}

model BindAxnResponseBody = {
  secretBindDTO?: {
    extension?: string(name='Extension'),
    subsId?: string(name='SubsId'),
    secretNo?: string(name='SecretNo'),
  }(name='SecretBindDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model BindAxnResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnResponseBody(name='body'),
}

async function bindAxnWithOptions(request: BindAxnRequest, runtime: Util.RuntimeOptions): BindAxnResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindAxn', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindAxn(request: BindAxnRequest): BindAxnResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxnWithOptions(request, runtime);
}

model BindAxnExtensionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoA?: string(name='PhoneNoA'),
  extension?: string(name='Extension'),
  phoneNoB?: string(name='PhoneNoB'),
  phoneNoX?: string(name='PhoneNoX'),
  expiration?: string(name='Expiration'),
  expectCity?: string(name='ExpectCity'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  outId?: string(name='OutId'),
  outOrderId?: string(name='OutOrderId'),
  callDisplayType?: int32(name='CallDisplayType'),
  ringConfig?: string(name='RingConfig'),
  ASRStatus?: boolean(name='ASRStatus'),
  ASRModelId?: string(name='ASRModelId'),
  callRestrict?: string(name='CallRestrict'),
}

model BindAxnExtensionResponseBody = {
  secretBindDTO?: {
    extension?: string(name='Extension'),
    subsId?: string(name='SubsId'),
    secretNo?: string(name='SecretNo'),
  }(name='SecretBindDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model BindAxnExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnExtensionResponseBody(name='body'),
}

async function bindAxnExtensionWithOptions(request: BindAxnExtensionRequest, runtime: Util.RuntimeOptions): BindAxnExtensionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindAxnExtension', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindAxnExtension(request: BindAxnExtensionRequest): BindAxnExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAxnExtensionWithOptions(request, runtime);
}

model BuySecretNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  specId?: long(name='SpecId'),
  city?: string(name='City'),
  secretNo?: string(name='SecretNo'),
  displayPool?: boolean(name='DisplayPool'),
}

model BuySecretNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBuyInfoDTO?: {
    secretNo?: string(name='SecretNo'),
  }(name='SecretBuyInfoDTO'),
  code?: string(name='Code'),
}

model BuySecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: BuySecretNoResponseBody(name='body'),
}

async function buySecretNoWithOptions(request: BuySecretNoRequest, runtime: Util.RuntimeOptions): BuySecretNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BuySecretNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function buySecretNo(request: BuySecretNoRequest): BuySecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return buySecretNoWithOptions(request, runtime);
}

model CreateAxgGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  name?: string(name='Name'),
  remark?: string(name='Remark'),
  numbers?: string(name='Numbers'),
}

model CreateAxgGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  groupId?: long(name='GroupId'),
}

model CreateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAxgGroupResponseBody(name='body'),
}

async function createAxgGroupWithOptions(request: CreateAxgGroupRequest, runtime: Util.RuntimeOptions): CreateAxgGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAxgGroup', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAxgGroup(request: CreateAxgGroupRequest): CreateAxgGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAxgGroupWithOptions(request, runtime);
}

model CreateSubscriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  secretNo?: string(name='SecretNo'),
  phoneNo?: string(name='PhoneNo'),
  bindToken?: string(name='BindToken'),
}

model CreateSubscriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    subsId?: string(name='SubsId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model CreateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionResponseBody(name='body'),
}

async function createSubscriptionWithOptions(request: CreateSubscriptionRequest, runtime: Util.RuntimeOptions): CreateSubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSubscription', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSubscription(request: CreateSubscriptionRequest): CreateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscriptionWithOptions(request, runtime);
}

model DeleteSecretBlacklistRequest {
  poolKey?: string(name='PoolKey'),
  blackNo?: string(name='BlackNo'),
  remark?: string(name='Remark'),
  blackType?: string(name='BlackType'),
  wayControl?: string(name='WayControl'),
}

model DeleteSecretBlacklistResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeleteSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecretBlacklistResponseBody(name='body'),
}

async function deleteSecretBlacklistWithOptions(request: DeleteSecretBlacklistRequest, runtime: Util.RuntimeOptions): DeleteSecretBlacklistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSecretBlacklist', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSecretBlacklist(request: DeleteSecretBlacklistRequest): DeleteSecretBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecretBlacklistWithOptions(request, runtime);
}

model GetFaceVerifyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verifyToken?: string(name='VerifyToken'),
}

model GetFaceVerifyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    verifyResult?: string(name='VerifyResult'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceVerifyResponseBody(name='body'),
}

async function getFaceVerifyWithOptions(request: GetFaceVerifyRequest, runtime: Util.RuntimeOptions): GetFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFaceVerify', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFaceVerify(request: GetFaceVerifyRequest): GetFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceVerifyWithOptions(request, runtime);
}

model GetSecretAsrDetailRequest {
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
  poolKey?: string(name='PoolKey'),
}

model GetSecretAsrDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model GetSecretAsrDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecretAsrDetailResponseBody(name='body'),
}

async function getSecretAsrDetailWithOptions(request: GetSecretAsrDetailRequest, runtime: Util.RuntimeOptions): GetSecretAsrDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSecretAsrDetail', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSecretAsrDetail(request: GetSecretAsrDetailRequest): GetSecretAsrDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSecretAsrDetailWithOptions(request, runtime);
}

model GetSubscriptionDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  subsId?: long(name='SubsId'),
  secretNo?: string(name='SecretNo'),
}

model GetSubscriptionDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    phoneNo?: string(name='PhoneNo'),
    city?: string(name='City'),
    switchStatus?: int32(name='SwitchStatus'),
    subsId?: long(name='SubsId'),
    secretNo?: string(name='SecretNo'),
    vendor?: string(name='Vendor'),
    province?: string(name='Province'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetSubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionDetailResponseBody(name='body'),
}

async function getSubscriptionDetailWithOptions(request: GetSubscriptionDetailRequest, runtime: Util.RuntimeOptions): GetSubscriptionDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSubscriptionDetail', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSubscriptionDetail(request: GetSubscriptionDetailRequest): GetSubscriptionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionDetailWithOptions(request, runtime);
}

model GetTotalPublicUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  checkSubs?: boolean(name='CheckSubs'),
  partnerKey?: string(name='PartnerKey'),
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
}

model GetTotalPublicUrlResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    ringPublicUrl?: string(name='RingPublicUrl'),
    phonePublicUrl?: string(name='PhonePublicUrl'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetTotalPublicUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalPublicUrlResponseBody(name='body'),
}

async function getTotalPublicUrlWithOptions(request: GetTotalPublicUrlRequest, runtime: Util.RuntimeOptions): GetTotalPublicUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTotalPublicUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTotalPublicUrl(request: GetTotalPublicUrlRequest): GetTotalPublicUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTotalPublicUrlWithOptions(request, runtime);
}

model InitFaceVerifyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  metaInfo?: string(name='MetaInfo'),
}

model InitFaceVerifyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    certifyId?: string(name='CertifyId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model InitFaceVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: InitFaceVerifyResponseBody(name='body'),
}

async function initFaceVerifyWithOptions(request: InitFaceVerifyRequest, runtime: Util.RuntimeOptions): InitFaceVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitFaceVerify', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initFaceVerify(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFaceVerifyWithOptions(request, runtime);
}

model LockSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  secretNo?: string(name='SecretNo'),
}

model LockSecretNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model LockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: LockSecretNoResponseBody(name='body'),
}

async function lockSecretNoWithOptions(request: LockSecretNoRequest, runtime: Util.RuntimeOptions): LockSecretNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockSecretNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockSecretNo(request: LockSecretNoRequest): LockSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockSecretNoWithOptions(request, runtime);
}

model OperateAxgGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  groupId?: long(name='GroupId'),
  operateType?: string(name='OperateType'),
  numbers?: string(name='Numbers'),
}

model OperateAxgGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model OperateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAxgGroupResponseBody(name='body'),
}

async function operateAxgGroupWithOptions(request: OperateAxgGroupRequest, runtime: Util.RuntimeOptions): OperateAxgGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateAxgGroup', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateAxgGroup(request: OperateAxgGroupRequest): OperateAxgGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAxgGroupWithOptions(request, runtime);
}

model OperateBlackNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  blackNo?: string(name='BlackNo'),
  operateType?: string(name='OperateType'),
  tips?: string(name='Tips'),
}

model OperateBlackNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model OperateBlackNoResponse = {
  headers: map[string]string(name='headers'),
  body: OperateBlackNoResponseBody(name='body'),
}

async function operateBlackNoWithOptions(request: OperateBlackNoRequest, runtime: Util.RuntimeOptions): OperateBlackNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateBlackNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateBlackNo(request: OperateBlackNoRequest): OperateBlackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateBlackNoWithOptions(request, runtime);
}

model QueryCallStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  subsId?: string(name='SubsId'),
  callNo?: string(name='CallNo'),
}

model QueryCallStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  secretCallStatusDTO?: {
    status?: int32(name='Status'),
    calledNo?: string(name='CalledNo'),
  }(name='SecretCallStatusDTO'),
}

model QueryCallStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallStatusResponseBody(name='body'),
}

async function queryCallStatusWithOptions(request: QueryCallStatusRequest, runtime: Util.RuntimeOptions): QueryCallStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCallStatus', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCallStatus(request: QueryCallStatusRequest): QueryCallStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallStatusWithOptions(request, runtime);
}

model QueryPhoneNoAByTrackNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trackNo?: string(name='trackNo'),
  cabinetNo?: string(name='CabinetNo'),
  phoneNoX?: string(name='PhoneNoX'),
}

model QueryPhoneNoAByTrackNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  module?: [ 
    {
      extension?: string(name='Extension'),
      phoneNoX?: string(name='PhoneNoX'),
      phoneNoA?: string(name='PhoneNoA'),
    }
  ](name='Module'),
  code?: string(name='Code'),
}

model QueryPhoneNoAByTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPhoneNoAByTrackNoResponseBody(name='body'),
}

async function queryPhoneNoAByTrackNoWithOptions(request: QueryPhoneNoAByTrackNoRequest, runtime: Util.RuntimeOptions): QueryPhoneNoAByTrackNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPhoneNoAByTrackNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPhoneNoAByTrackNo(request: QueryPhoneNoAByTrackNoRequest): QueryPhoneNoAByTrackNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPhoneNoAByTrackNoWithOptions(request, runtime);
}

model QueryRecordFileDownloadUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  callId?: string(name='CallId'),
  callTime?: string(name='CallTime'),
}

model QueryRecordFileDownloadUrlResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  downloadUrl?: string(name='DownloadUrl'),
}

model QueryRecordFileDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordFileDownloadUrlResponseBody(name='body'),
}

async function queryRecordFileDownloadUrlWithOptions(request: QueryRecordFileDownloadUrlRequest, runtime: Util.RuntimeOptions): QueryRecordFileDownloadUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRecordFileDownloadUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRecordFileDownloadUrl(request: QueryRecordFileDownloadUrlRequest): QueryRecordFileDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordFileDownloadUrlWithOptions(request, runtime);
}

model QuerySecretNoRemainRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  specId?: long(name='SpecId'),
  city?: string(name='City'),
  secretNo?: string(name='SecretNo'),
}

model QuerySecretNoRemainResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretRemainDTO?: {
    amount?: long(name='Amount'),
    city?: string(name='City'),
    remainDTOList?: {
      remainDTO?: [ 
      {
        amount?: long(name='Amount'),
        city?: string(name='City'),
      }
    ](name='remainDTO')
    }(name='RemainDTOList'),
  }(name='SecretRemainDTO'),
  code?: string(name='Code'),
}

model QuerySecretNoRemainResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoRemainResponseBody(name='body'),
}

async function querySecretNoRemainWithOptions(request: QuerySecretNoRemainRequest, runtime: Util.RuntimeOptions): QuerySecretNoRemainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySecretNoRemain', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySecretNoRemain(request: QuerySecretNoRemainRequest): QuerySecretNoRemainResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySecretNoRemainWithOptions(request, runtime);
}

model QuerySubscriptionDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  subsId?: string(name='SubsId'),
  phoneNoX?: string(name='PhoneNoX'),
}

model QuerySubscriptionDetailResponseBody = {
  secretBindDetailDTO?: {
    status?: long(name='Status'),
    extension?: string(name='Extension'),
    groupId?: long(name='GroupId'),
    phoneNoB?: string(name='PhoneNoB'),
    ASRStatus?: boolean(name='ASRStatus'),
    needRecord?: boolean(name='NeedRecord'),
    gmtCreate?: string(name='GmtCreate'),
    expireDate?: string(name='ExpireDate'),
    subsId?: string(name='SubsId'),
    callRestrict?: string(name='CallRestrict'),
    phoneNoX?: string(name='PhoneNoX'),
    ASRModelId?: string(name='ASRModelId'),
    phoneNoA?: string(name='PhoneNoA'),
  }(name='SecretBindDetailDTO'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model QuerySubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscriptionDetailResponseBody(name='body'),
}

async function querySubscriptionDetailWithOptions(request: QuerySubscriptionDetailRequest, runtime: Util.RuntimeOptions): QuerySubscriptionDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySubscriptionDetail', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySubscriptionDetail(request: QuerySubscriptionDetailRequest): QuerySubscriptionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubscriptionDetailWithOptions(request, runtime);
}

model QuerySubsIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  phoneNoX?: string(name='PhoneNoX'),
}

model QuerySubsIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  subsId?: string(name='SubsId'),
}

model QuerySubsIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubsIdResponseBody(name='body'),
}

async function querySubsIdWithOptions(request: QuerySubsIdRequest, runtime: Util.RuntimeOptions): QuerySubsIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySubsId', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySubsId(request: QuerySubsIdRequest): QuerySubsIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubsIdWithOptions(request, runtime);
}

model ReleaseSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  secretNo?: string(name='SecretNo'),
}

model ReleaseSecretNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model ReleaseSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSecretNoResponseBody(name='body'),
}

async function releaseSecretNoWithOptions(request: ReleaseSecretNoRequest, runtime: Util.RuntimeOptions): ReleaseSecretNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseSecretNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseSecretNo(request: ReleaseSecretNoRequest): ReleaseSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseSecretNoWithOptions(request, runtime);
}

model UnbindSubscriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  subsId?: string(name='SubsId'),
  secretNo?: string(name='SecretNo'),
}

model UnbindSubscriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  chargeId?: string(name='ChargeId'),
  code?: string(name='Code'),
}

model UnbindSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSubscriptionResponseBody(name='body'),
}

async function unbindSubscriptionWithOptions(request: UnbindSubscriptionRequest, runtime: Util.RuntimeOptions): UnbindSubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindSubscription', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindSubscription(request: UnbindSubscriptionRequest): UnbindSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSubscriptionWithOptions(request, runtime);
}

model UnlockSecretNoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  secretNo?: string(name='SecretNo'),
}

model UnlockSecretNoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model UnlockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockSecretNoResponseBody(name='body'),
}

async function unlockSecretNoWithOptions(request: UnlockSecretNoRequest, runtime: Util.RuntimeOptions): UnlockSecretNoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockSecretNo', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockSecretNo(request: UnlockSecretNoRequest): UnlockSecretNoResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockSecretNoWithOptions(request, runtime);
}

model UpdateDefaultBRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  subsId?: long(name='SubsId'),
  secretNo?: string(name='SecretNo'),
  phoneNo?: string(name='PhoneNo'),
}

model UpdateDefaultBResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateDefaultBResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDefaultBResponseBody(name='body'),
}

async function updateDefaultBWithOptions(request: UpdateDefaultBRequest, runtime: Util.RuntimeOptions): UpdateDefaultBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDefaultB', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDefaultB(request: UpdateDefaultBRequest): UpdateDefaultBResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDefaultBWithOptions(request, runtime);
}

model UpdatePhoneNumberRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  subsId?: long(name='SubsId'),
  secretNo?: string(name='SecretNo'),
  newPhoneNo?: string(name='NewPhoneNo'),
  bindToken?: string(name='BindToken'),
}

model UpdatePhoneNumberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdatePhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhoneNumberResponseBody(name='body'),
}

async function updatePhoneNumberWithOptions(request: UpdatePhoneNumberRequest, runtime: Util.RuntimeOptions): UpdatePhoneNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePhoneNumber', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePhoneNumber(request: UpdatePhoneNumberRequest): UpdatePhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneNumberWithOptions(request, runtime);
}

model UpdatePhoneSwitchRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  subsId?: long(name='SubsId'),
  secretNo?: string(name='SecretNo'),
  switchStatus?: int32(name='SwitchStatus'),
}

model UpdatePhoneSwitchResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdatePhoneSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhoneSwitchResponseBody(name='body'),
}

async function updatePhoneSwitchWithOptions(request: UpdatePhoneSwitchRequest, runtime: Util.RuntimeOptions): UpdatePhoneSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePhoneSwitch', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePhoneSwitch(request: UpdatePhoneSwitchRequest): UpdatePhoneSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneSwitchWithOptions(request, runtime);
}

model UpdateSubscriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  poolKey?: string(name='PoolKey'),
  productType?: string(name='ProductType'),
  subsId?: string(name='SubsId'),
  phoneNoX?: string(name='PhoneNoX'),
  phoneNoA?: string(name='PhoneNoA'),
  phoneNoB?: string(name='PhoneNoB'),
  groupId?: string(name='GroupId'),
  callRestrict?: string(name='CallRestrict'),
  expiration?: string(name='Expiration'),
  callDisplayType?: int32(name='CallDisplayType'),
  outId?: string(name='OutId'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
  operateType?: string(name='OperateType'),
  ringConfig?: string(name='RingConfig'),
  ASRStatus?: boolean(name='ASRStatus'),
  ASRModelId?: string(name='ASRModelId'),
}

model UpdateSubscriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscriptionWithOptions(request: UpdateSubscriptionRequest, runtime: Util.RuntimeOptions): UpdateSubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSubscription', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscriptionWithOptions(request, runtime);
}

