/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dyplsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAxnTrackNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subsId: string(name='SubsId', position='Query'),
  trackNo: string(name='trackNo', position='Query'),
}

model AddAxnTrackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddAxnTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: AddAxnTrackNoResponseBody(name='body'),
}

async function addAxnTrackNo(request: AddAxnTrackNoRequest): AddAxnTrackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAxnTrackNo', 'POST', '/', 'json', false, 'json', request);
}

model AddSecretBlacklistRequest {
  blackNo: string(name='BlackNo', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  remark?: string(name='Remark', position='Query'),
  wayControl?: string(name='WayControl', position='Query'),
}

model AddSecretBlacklistResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecretBlacklistResponseBody(name='body'),
}

async function addSecretBlacklist(request: AddSecretBlacklistRequest): AddSecretBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSecretBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model BindAxbRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', position='Query'),
  callRestrict?: string(name='CallRestrict', position='Query'),
  callTimeout?: int32(name='CallTimeout', minimum=0, maximum=180, position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', position='Query'),
  outId?: string(name='OutId', position='Query'),
  outOrderId?: string(name='OutOrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  phoneNoX?: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', position='Query'),
}

model BindAxbResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxbResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxbResponseBody(name='body'),
}

async function bindAxb(request: BindAxbRequest): BindAxbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxb', 'POST', '/', 'json', false, 'json', request);
}

model BindAxgRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', position='Query'),
  callRestrict?: string(name='CallRestrict', position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', position='Query'),
  outId?: string(name='OutId', position='Query'),
  outOrderId?: string(name='OutOrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  phoneNoX?: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', position='Query'),
}

model BindAxgResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxgResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxgResponseBody(name='body'),
}

async function bindAxg(request: BindAxgRequest): BindAxgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxg', 'POST', '/', 'json', false, 'json', request);
}

model BindAxnRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', position='Query'),
  callRestrict?: string(name='CallRestrict', position='Query'),
  callTimeout?: int32(name='CallTimeout', minimum=5, maximum=20, position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', position='Query'),
  noType?: string(name='NoType', position='Query'),
  outId?: string(name='OutId', position='Query'),
  outOrderId?: string(name='OutOrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  phoneNoX?: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', position='Query'),
}

model BindAxnResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxnResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnResponseBody(name='body'),
}

async function bindAxn(request: BindAxnRequest): BindAxnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxn', 'POST', '/', 'json', false, 'json', request);
}

model BindAxnExtensionRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', position='Query'),
  callRestrict?: string(name='CallRestrict', position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', position='Query'),
  extension?: string(name='Extension', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', position='Query'),
  outId?: string(name='OutId', position='Query'),
  outOrderId?: string(name='OutOrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  phoneNoX?: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', position='Query'),
}

model BindAxnExtensionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDTO?: {
    extension?: string(name='Extension'),
    secretNo?: string(name='SecretNo'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDTO'),
}

model BindAxnExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnExtensionResponseBody(name='body'),
}

async function bindAxnExtension(request: BindAxnExtensionRequest): BindAxnExtensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxnExtension', 'POST', '/', 'json', false, 'json', request);
}

model BuySecretNoRequest {
  city: string(name='City', position='Query'),
  displayPool?: boolean(name='DisplayPool', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
  specId: long(name='SpecId', position='Query'),
}

model BuySecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBuyInfoDTO?: {
    secretNo?: string(name='SecretNo'),
  }(name='SecretBuyInfoDTO'),
}

model BuySecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: BuySecretNoResponseBody(name='body'),
}

async function buySecretNo(request: BuySecretNoRequest): BuySecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BuySecretNo', 'POST', '/', 'json', false, 'json', request);
}

model CancelPickUpWaybillRequest {
  cancelDesc: string(name='CancelDesc', position='Query'),
  contentType?: string(name='Content-Type', position='Header'),
  outerOrderCode: string(name='OuterOrderCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelPickUpWaybillResponseBody = {
  code?: string(name='Code'),
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    message?: string(name='Message'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelPickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPickUpWaybillResponseBody(name='body'),
}

async function cancelPickUpWaybill(request: CancelPickUpWaybillRequest): CancelPickUpWaybillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPickUpWaybill', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmSendSmsRequest {
  callId: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model ConfirmSendSmsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ConfirmSendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmSendSmsResponseBody(name='body'),
}

async function confirmSendSms(request: ConfirmSendSmsRequest): ConfirmSendSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmSendSms', 'POST', '/', 'json', false, 'json', request);
}

model CreateAxgGroupRequest {
  name?: string(name='Name', position='Query'),
  numbers?: string(name='Numbers', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAxgGroupResponseBody = {
  code?: string(name='Code'),
  groupId?: long(name='GroupId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAxgGroupResponseBody(name='body'),
}

async function createAxgGroup(request: CreateAxgGroupRequest): CreateAxgGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAxgGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePickUpWaybillRequest {
  consigneeAddress: {
    addressDetail: string(name='AddressDetail'),
    areaName: string(name='AreaName'),
    cityName: string(name='CityName'),
    provinceName: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='ConsigneeAddress', position='Query'),
  consigneeMobile?: string(name='ConsigneeMobile', position='Query'),
  consigneeName: string(name='ConsigneeName', position='Query'),
  consigneePhone?: string(name='ConsigneePhone', position='Query'),
  contentType?: string(name='Content-Type', position='Header'),
  cpCode?: string(name='CpCode', position='Query'),
  goodsInfos?: [ 
    {
      name?: string(name='Name'),
      quantity?: string(name='Quantity'),
      weight?: string(name='Weight'),
    }
  ](name='GoodsInfos', position='Query'),
  orderChannels: string(name='OrderChannels', position='Query'),
  outerOrderCode: string(name='OuterOrderCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  sendAddress: {
    addressDetail: string(name='AddressDetail'),
    areaName: string(name='AreaName'),
    cityName: string(name='CityName'),
    provinceName: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='SendAddress', position='Query'),
  sendMobile?: string(name='SendMobile', position='Query'),
  sendName: string(name='SendName', position='Query'),
  sendPhone?: string(name='SendPhone', position='Query'),
}

model CreatePickUpWaybillResponseBody = {
  data?: {
    cpCode?: string(name='CpCode'),
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    mailNo?: string(name='MailNo'),
    success?: string(name='Success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePickUpWaybillResponseBody(name='body'),
}

async function createPickUpWaybill(request: CreatePickUpWaybillRequest): CreatePickUpWaybillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePickUpWaybill', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretBlacklistRequest {
  blackNo: string(name='BlackNo', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  remark?: string(name='Remark', position='Query'),
  wayControl?: string(name='WayControl', position='Query'),
}

model DeleteSecretBlacklistResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecretBlacklistResponseBody(name='body'),
}

async function deleteSecretBlacklist(request: DeleteSecretBlacklistRequest): DeleteSecretBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecretBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model GetSecretAsrDetailRequest {
  callId: string(name='CallId', position='Query'),
  callTime: string(name='CallTime', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
}

model GetSecretAsrDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizDuration?: long(name='BizDuration'),
    businessId?: string(name='BusinessId'),
    businessKey?: string(name='BusinessKey'),
    code?: string(name='Code'),
    msg?: string(name='Msg'),
    requestId?: string(name='RequestId'),
    sentences?: [ 
      {
        beginTime?: long(name='BeginTime'),
        channelId?: int32(name='ChannelId'),
        emotionValue?: string(name='EmotionValue'),
        endTime?: long(name='EndTime'),
        silenceDuration?: long(name='SilenceDuration'),
        speechRate?: int32(name='SpeechRate'),
        text?: string(name='Text'),
      }
    ](name='Sentences'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSecretAsrDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecretAsrDetailResponseBody(name='body'),
}

async function getSecretAsrDetail(request: GetSecretAsrDetailRequest): GetSecretAsrDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretAsrDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
  subsId: long(name='SubsId', minimum=0, maximum=99999999999999999, position='Query'),
}

model GetSubscriptionDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    city?: string(name='City'),
    phoneNo?: string(name='PhoneNo'),
    province?: string(name='Province'),
    secretNo?: string(name='SecretNo'),
    subsId?: long(name='SubsId'),
    switchStatus?: int32(name='SwitchStatus'),
    vendor?: string(name='Vendor'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionDetailResponseBody(name='body'),
}

async function getSubscriptionDetail(request: GetSubscriptionDetailRequest): GetSubscriptionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTotalPublicUrlRequest {
  callId: string(name='CallId', position='Query'),
  callTime: string(name='CallTime', position='Query'),
  checkSubs: boolean(name='CheckSubs', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  partnerKey: string(name='PartnerKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetTotalPublicUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    phonePublicUrl?: string(name='PhonePublicUrl'),
    ringPublicUrl?: string(name='RingPublicUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTotalPublicUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalPublicUrlResponseBody(name='body'),
}

async function getTotalPublicUrl(request: GetTotalPublicUrlRequest): GetTotalPublicUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTotalPublicUrl', 'POST', '/', 'json', false, 'json', request);
}

model LockSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model LockSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model LockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: LockSecretNoResponseBody(name='body'),
}

async function lockSecretNo(request: LockSecretNoRequest): LockSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model OperateAxgGroupRequest {
  groupId: long(name='GroupId', position='Query'),
  numbers: string(name='Numbers', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OperateAxgGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model OperateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAxgGroupResponseBody(name='body'),
}

async function operateAxgGroup(request: OperateAxgGroupRequest): OperateAxgGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAxgGroup', 'POST', '/', 'json', false, 'json', request);
}

model OperateBlackNoRequest {
  blackNo: string(name='BlackNo', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tips?: string(name='Tips', position='Query'),
}

model OperateBlackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model OperateBlackNoResponse = {
  headers: map[string]string(name='headers'),
  body: OperateBlackNoResponseBody(name='body'),
}

async function operateBlackNo(request: OperateBlackNoRequest): OperateBlackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateBlackNo', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallStatusRequest {
  callNo?: string(name='CallNo', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subsId: string(name='SubsId', position='Query'),
}

model QueryCallStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretCallStatusDTO?: {
    calledNo?: string(name='CalledNo'),
    extension?: string(name='Extension'),
    status?: int32(name='Status'),
  }(name='SecretCallStatusDTO'),
}

model QueryCallStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCallStatusResponseBody(name='body'),
}

async function queryCallStatus(request: QueryCallStatusRequest): QueryCallStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneNoAByTrackNoRequest {
  cabinetNo?: string(name='CabinetNo', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX?: string(name='PhoneNoX', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trackNo: string(name='trackNo', position='Query'),
}

model QueryPhoneNoAByTrackNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  module?: [ 
    {
      extension?: string(name='Extension'),
      phoneNoA?: string(name='PhoneNoA'),
      phoneNoX?: string(name='PhoneNoX'),
    }
  ](name='Module'),
  requestId?: string(name='RequestId'),
}

model QueryPhoneNoAByTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPhoneNoAByTrackNoResponseBody(name='body'),
}

async function queryPhoneNoAByTrackNo(request: QueryPhoneNoAByTrackNoRequest): QueryPhoneNoAByTrackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneNoAByTrackNo', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordFileDownloadUrlRequest {
  callId: string(name='CallId', position='Query'),
  callTime?: string(name='CallTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRecordFileDownloadUrlResponseBody = {
  code?: string(name='Code'),
  downloadUrl?: string(name='DownloadUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRecordFileDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordFileDownloadUrlResponseBody(name='body'),
}

async function queryRecordFileDownloadUrl(request: QueryRecordFileDownloadUrlRequest): QueryRecordFileDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordFileDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model QuerySecretNoDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model QuerySecretNoDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretNoInfoDTO?: {
    certifyStatus?: int32(name='CertifyStatus'),
    city?: string(name='City'),
    province?: string(name='Province'),
    purchaseTime?: string(name='PurchaseTime'),
    secretStatus?: long(name='SecretStatus'),
    vendor?: long(name='Vendor'),
  }(name='SecretNoInfoDTO'),
}

model QuerySecretNoDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoDetailResponseBody(name='body'),
}

async function querySecretNoDetail(request: QuerySecretNoDetailRequest): QuerySecretNoDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySecretNoDetail', 'POST', '/', 'json', false, 'json', request);
}

model QuerySecretNoRemainRequest {
  city: string(name='City', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
  specId: long(name='SpecId', position='Query'),
}

model QuerySecretNoRemainResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretRemainDTO?: {
    amount?: long(name='Amount'),
    city?: string(name='City'),
    remainDTOList?: {
      remainDTO?: [ 
      {
        amount?: long(name='Amount'),
        city?: string(name='City'),
      }
    ](name='remainDTO')
    }(name='RemainDTOList'),
  }(name='SecretRemainDTO'),
}

model QuerySecretNoRemainResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoRemainResponseBody(name='body'),
}

async function querySecretNoRemain(request: QuerySecretNoRemainRequest): QuerySecretNoRemainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySecretNoRemain', 'POST', '/', 'json', false, 'json', request);
}

model QuerySubsIdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySubsIdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subsId?: string(name='SubsId'),
}

model QuerySubsIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubsIdResponseBody(name='body'),
}

async function querySubsId(request: QuerySubsIdRequest): QuerySubsIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubsId', 'POST', '/', 'json', false, 'json', request);
}

model QuerySubscriptionDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subsId: string(name='SubsId', position='Query'),
}

model QuerySubscriptionDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindDetailDTO?: {
    ASRModelId?: string(name='ASRModelId'),
    ASRStatus?: boolean(name='ASRStatus'),
    callRestrict?: string(name='CallRestrict'),
    expireDate?: string(name='ExpireDate'),
    extension?: string(name='Extension'),
    gmtCreate?: string(name='GmtCreate'),
    groupId?: long(name='GroupId'),
    needRecord?: boolean(name='NeedRecord'),
    phoneNoA?: string(name='PhoneNoA'),
    phoneNoB?: string(name='PhoneNoB'),
    phoneNoX?: string(name='PhoneNoX'),
    status?: long(name='Status'),
    subsId?: string(name='SubsId'),
  }(name='SecretBindDetailDTO'),
}

model QuerySubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscriptionDetailResponseBody(name='body'),
}

async function querySubscriptionDetail(request: QuerySubscriptionDetailRequest): QuerySubscriptionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubscriptionDetail', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model ReleaseSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReleaseSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSecretNoResponseBody(name='body'),
}

async function releaseSecretNo(request: ReleaseSecretNoRequest): ReleaseSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model UnbindSubscriptionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
  subsId: string(name='SubsId', position='Query'),
}

model UnbindSubscriptionResponseBody = {
  chargeId?: string(name='ChargeId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnbindSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSubscriptionResponseBody(name='body'),
}

async function unbindSubscription(request: UnbindSubscriptionRequest): UnbindSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindSubscription', 'POST', '/', 'json', false, 'json', request);
}

model UnlockSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model UnlockSecretNoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnlockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockSecretNoResponseBody(name='body'),
}

async function unlockSecretNo(request: UnlockSecretNoRequest): UnlockSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubscriptionRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', position='Query'),
  callRestrict?: string(name='CallRestrict', position='Query'),
  expiration?: string(name='Expiration', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA?: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  phoneNoX: string(name='PhoneNoX', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', position='Query'),
  subsId: string(name='SubsId', position='Query'),
}

model UpdateSubscriptionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubscription', 'POST', '/', 'json', false, 'json', request);
}

