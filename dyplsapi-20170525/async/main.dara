/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dyplsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAxnTrackNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', example='1700000****', position='Query'),
  poolKey: string(name='PoolKey', example='FC2235****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subsId: string(name='SubsId', example='15678890****', position='Query'),
  trackNo: string(name='trackNo', example='abcde*****', position='Query'),
}

model AddAxnTrackNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model AddAxnTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: AddAxnTrackNoResponseBody(name='body'),
}

async function addAxnTrackNo(request: AddAxnTrackNoRequest): AddAxnTrackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAxnTrackNo', 'POST', '/', 'json', false, 'json', request);
}

model AddSecretBlacklistRequest {
  blackNo: string(name='BlackNo', example='1825638****:1825248****', position='Query'),
  blackType: string(name='BlackType', example='POINT_TO_POINT_BLACK', position='Query'),
  poolKey: string(name='PoolKey', example='FC2235****', position='Query'),
  remark?: string(name='Remark', position='Query'),
  wayControl?: string(name='WayControl', example='PHONEA_REJECT', position='Query'),
}

model AddSecretBlacklistResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model AddSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecretBlacklistResponseBody(name='body'),
}

async function addSecretBlacklist(request: AddSecretBlacklistRequest): AddSecretBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSecretBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model BindAxbRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', example='false', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', example='1', position='Query'),
  callRestrict?: string(name='CallRestrict', example='CONTROL_AX_DISABLE', position='Query'),
  callTimeout?: int32(name='CallTimeout', example='10', minimum=0, maximum=180, position='Query'),
  dtmfConfig?: string(name='DtmfConfig', position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', example='2021-09-05 12:00:00', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', example='true', position='Query'),
  outId?: string(name='OutId', example='abcdef', position='Query'),
  outOrderId?: string(name='OutOrderId', example='34553330****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', example='139****0000', position='Query'),
  phoneNoB?: string(name='PhoneNoB', example='139****0000', position='Query'),
  phoneNoX?: string(name='PhoneNoX', example='139****0000', position='Query'),
  poolKey?: string(name='PoolKey', example='FC5526*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', example='{"AXBRing_B":"1000****1","AXBRing_A":"1000****1"}', position='Query'),
}

model BindAxbResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='9297B722-A016-43FB-B51A-E54050D9369D'),
  secretBindDTO?: {
    extension?: string(name='Extension', example='130'),
    secretNo?: string(name='SecretNo', example='139****0000'),
    subsId?: string(name='SubsId', example='1**************3'),
  }(name='SecretBindDTO'),
}

model BindAxbResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxbResponseBody(name='body'),
}

async function bindAxb(request: BindAxbRequest): BindAxbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxb', 'POST', '/', 'json', false, 'json', request);
}

model BindAxgRequest {
  ASRModelId?: string(name='ASRModelId', example='123456', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', example='False', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', example='1', position='Query'),
  callRestrict?: string(name='CallRestrict', example='CONTROL_AX_DISABLE', position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', example='2019-09-05 12:00:00', position='Query'),
  groupId: string(name='GroupId', example='1234', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', example='true', position='Query'),
  outId?: string(name='OutId', example='abcdef', position='Query'),
  outOrderId?: string(name='OutOrderId', example='abcdef', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', example='139****0000', position='Query'),
  phoneNoB?: string(name='PhoneNoB', example='139****0000', position='Query'),
  phoneNoX?: string(name='PhoneNoX', example='139****0000', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', example='{"AXGRing_AB":"100000001","AXGRing_A":"100000002","AXGRing_G":"100000003"}', position='Query'),
}

model BindAxgResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  secretBindDTO?: {
    extension?: string(name='Extension', example='139****0000'),
    secretNo?: string(name='SecretNo', example='139****0000'),
    subsId?: string(name='SubsId', example='1************3'),
  }(name='SecretBindDTO'),
}

model BindAxgResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxgResponseBody(name='body'),
}

async function bindAxg(request: BindAxgRequest): BindAxgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxg', 'POST', '/', 'json', false, 'json', request);
}

model BindAxnRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', example='true', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', example='1', position='Query'),
  callRestrict?: string(name='CallRestrict', example='CONTROL_AX_DISABLE', position='Query'),
  callTimeout?: int32(name='CallTimeout', example='10', minimum=5, maximum=20, position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', example='2021-09-05 12:00:00', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', example='true', position='Query'),
  noType?: string(name='NoType', example='AXB_170', position='Query'),
  outId?: string(name='OutId', example='abcdef', position='Query'),
  outOrderId?: string(name='OutOrderId', example='34553330****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', example='139****0000', position='Query'),
  phoneNoB?: string(name='PhoneNoB', example='138****0000', position='Query'),
  phoneNoX?: string(name='PhoneNoX', example='139****0000', position='Query'),
  poolKey?: string(name='PoolKey', example='FC2256****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', example='{"AXNRing_N":"100000001","AXNRing_A":"100000001"}', position='Query'),
}

model BindAxnResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  secretBindDTO?: {
    extension?: string(name='Extension', example='130'),
    secretNo?: string(name='SecretNo', example='139****0000'),
    subsId?: string(name='SubsId', example='1***************3'),
  }(name='SecretBindDTO'),
}

model BindAxnResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnResponseBody(name='body'),
}

async function bindAxn(request: BindAxnRequest): BindAxnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxn', 'POST', '/', 'json', false, 'json', request);
}

model BindAxnExtensionRequest {
  ASRModelId?: string(name='ASRModelId', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', example='True', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', example='1', position='Query'),
  callRestrict?: string(name='CallRestrict', example='CONTROL_AX_DISABLE', position='Query'),
  expectCity?: string(name='ExpectCity', position='Query'),
  expiration: string(name='Expiration', example='2019-09-05 12:00:00', position='Query'),
  extension?: string(name='Extension', example='130', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', example='true', position='Query'),
  outId?: string(name='OutId', example='abcdef', position='Query'),
  outOrderId?: string(name='OutOrderId', example='abcdef', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA: string(name='PhoneNoA', example='139****0000', position='Query'),
  phoneNoB?: string(name='PhoneNoB', example='139****0000', position='Query'),
  phoneNoX?: string(name='PhoneNoX', example='139****0000', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', example='{"AXNRing_N":"100000001","AXNRing_A":"100000001"}', position='Query'),
}

model BindAxnExtensionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='9297B722-A016-43FB-B51A-E54050D9369D'),
  secretBindDTO?: {
    extension?: string(name='Extension', example='130'),
    secretNo?: string(name='SecretNo', example='139*****0000'),
    subsId?: string(name='SubsId', example='1***************3'),
  }(name='SecretBindDTO'),
}

model BindAxnExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: BindAxnExtensionResponseBody(name='body'),
}

async function bindAxnExtension(request: BindAxnExtensionRequest): BindAxnExtensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAxnExtension', 'POST', '/', 'json', false, 'json', request);
}

model BindBatchAxgRequest {
  axgBindList: [ 
    {
      ASRModelId?: string(name='ASRModelId'),
      ASRStatus?: boolean(name='ASRStatus'),
      callDisplayType?: int32(name='CallDisplayType'),
      callRestrict?: string(name='CallRestrict'),
      expectCity?: string(name='ExpectCity'),
      expiration?: string(name='Expiration'),
      groupId: string(name='GroupId'),
      isRecordingEnabled?: boolean(name='IsRecordingEnabled'),
      outId?: string(name='OutId'),
      outOrderId?: string(name='OutOrderId'),
      phoneNoA: string(name='PhoneNoA'),
      phoneNoB?: string(name='PhoneNoB'),
      phoneNoX?: string(name='PhoneNoX'),
      ringConfig?: string(name='RingConfig'),
    }
  ](name='AxgBindList', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BindBatchAxgResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  secretBindList?: {
    secretBind?: [ 
    {
      code?: string(name='Code'),
      extension?: string(name='Extension'),
      groupId?: string(name='GroupId'),
      message?: string(name='Message'),
      phoneNoA?: string(name='PhoneNoA'),
      secretNo?: string(name='SecretNo'),
      subsId?: string(name='SubsId'),
    }
  ](name='SecretBind')
  }(name='SecretBindList'),
}

model BindBatchAxgResponse = {
  headers: map[string]string(name='headers'),
  body: BindBatchAxgResponseBody(name='body'),
}

async function bindBatchAxg(request: BindBatchAxgRequest): BindBatchAxgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindBatchAxg', 'POST', '/', 'json', false, 'json', request);
}

model BuySecretNoRequest {
  city: string(name='City', position='Query'),
  displayPool?: boolean(name='DisplayPool', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', example='130', position='Query'),
  specId: long(name='SpecId', example='1', position='Query'),
}

model BuySecretNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='2D1AEB96-96D0-454E-B0DC-AE2A8DF08020'),
  secretBuyInfoDTO?: {
    secretNo?: string(name='SecretNo', example='1390000****'),
  }(name='SecretBuyInfoDTO'),
}

model BuySecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: BuySecretNoResponseBody(name='body'),
}

async function buySecretNo(request: BuySecretNoRequest): BuySecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BuySecretNo', 'POST', '/', 'json', false, 'json', request);
}

model CancelPickUpWaybillRequest {
  cancelDesc: string(name='CancelDesc', position='Query'),
  contentType?: string(name='Content-Type', position='Header'),
  outerOrderCode: string(name='OuterOrderCode', example='1145678823****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelPickUpWaybillResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9FC30594-3841-43AD-9008-03393BCB5CD2'),
}

model CancelPickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPickUpWaybillResponseBody(name='body'),
}

async function cancelPickUpWaybill(request: CancelPickUpWaybillRequest): CancelPickUpWaybillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPickUpWaybill', 'POST', '/', 'json', false, 'json', request);
}

model CreateAxgGroupRequest {
  name?: string(name='Name', position='Query'),
  numbers?: string(name='Numbers', example='1390000****,1380000****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123456', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAxgGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  groupId?: long(name='GroupId', example='2000000000001'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='635C0FDA-9EBC-43D7-B368-9F583C08A126'),
}

model CreateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAxgGroupResponseBody(name='body'),
}

async function createAxgGroup(request: CreateAxgGroupRequest): CreateAxgGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAxgGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePickUpWaybillRequest {
  appointGotEndTime?: string(name='AppointGotEndTime', example='2021-01-01 12:00:00', position='Query'),
  appointGotStartTime?: string(name='AppointGotStartTime', example='2021-01-01 10:00:00', position='Query'),
  bizType?: int32(name='BizType', example='0', position='Query'),
  consigneeAddress: {
    addressDetail: string(name='AddressDetail'),
    areaName: string(name='AreaName'),
    cityName: string(name='CityName'),
    provinceName: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='ConsigneeAddress', shrink='json', position='Query'),
  consigneeMobile?: string(name='ConsigneeMobile', example='1580000****', position='Query'),
  consigneeName: string(name='ConsigneeName', position='Query'),
  consigneePhone?: string(name='ConsigneePhone', example='0570000****', position='Query'),
  contentType?: string(name='Content-Type', example='application/json;chatset=UTF-8', position='Header'),
  cpCode?: string(name='CpCode', example='YTO', position='Query'),
  goodsInfos?: [ 
    {
      name?: string(name='Name'),
      quantity?: string(name='Quantity', example='1'),
      weight?: string(name='Weight', example='1000'),
    }
  ](name='GoodsInfos', shrink='json', position='Query'),
  orderChannels: string(name='OrderChannels', example='YUN_DIAN_SHANG', position='Query'),
  outerOrderCode: string(name='OuterOrderCode', example='143234234266****', position='Query'),
  remark?: string(name='Remark', position='Query'),
  sendAddress: {
    addressDetail: string(name='AddressDetail'),
    areaName: string(name='AreaName'),
    cityName: string(name='CityName'),
    provinceName: string(name='ProvinceName'),
    townName?: string(name='TownName'),
  }(name='SendAddress', shrink='json', position='Query'),
  sendMobile?: string(name='SendMobile', example='1596714****', position='Query'),
  sendName: string(name='SendName', position='Query'),
  sendPhone?: string(name='SendPhone', example='05718845****', position='Query'),
}

model CreatePickUpWaybillResponseBody = {
  data?: {
    cpCode?: string(name='CpCode', example='YTO'),
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    gotCode?: string(name='GotCode', example='3524'),
    mailNo?: string(name='MailNo', example='77312345629****'),
    success?: string(name='Success', example='true'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='9FC30594-3841-43AD-9008-03393BCB5CD2'),
}

model CreatePickUpWaybillResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePickUpWaybillResponseBody(name='body'),
}

async function createPickUpWaybill(request: CreatePickUpWaybillRequest): CreatePickUpWaybillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePickUpWaybill', 'POST', '/', 'json', false, 'json', request);
}

model CreatePickUpWaybillPreQueryRequest {
  consigneeInfo: {
    addressInfo?: {
      addressDetail?: string(name='AddressDetail'),
      areaName?: string(name='AreaName'),
      cityName?: string(name='CityName'),
      provinceName?: string(name='ProvinceName'),
      townName?: string(name='TownName'),
    }(name='AddressInfo'),
    mobile: string(name='Mobile', example='1390000****'),
    name: string(name='Name'),
  }(name='ConsigneeInfo', shrink='json', position='Query'),
  contentType?: string(name='Content-Type', example='application/json;chatset=UTF-8', position='Header'),
  cpCode?: string(name='CpCode', example='YTO', position='Query'),
  orderChannels: string(name='OrderChannels', example='Test', position='Query'),
  outerOrderCode?: string(name='OuterOrderCode', example='787DFHHDS989****', position='Query'),
  preWeight?: string(name='PreWeight', example='2000', position='Query'),
  senderInfo: {
    addressInfo?: {
      addressDetail?: string(name='AddressDetail'),
      areaName?: string(name='AreaName'),
      cityName?: string(name='CityName'),
      provinceName?: string(name='ProvinceName'),
      townName?: string(name='TownName'),
    }(name='AddressInfo'),
    mobile: string(name='Mobile', example='1390000****'),
    name: string(name='Name'),
  }(name='SenderInfo', shrink='json', position='Query'),
}

model CreatePickUpWaybillPreQueryResponseBody = {
  data?: {
    code?: string(name='Code', example='0'),
    cpTimeSelectList?: [ 
      {
        appointTimes?: [ 
          {
            date?: string(name='Date', example='2022-04-28'),
            dateSelectable?: boolean(name='DateSelectable', example='true'),
            timeList?: [ 
              {
                endTime?: string(name='EndTime', example='12:00:00'),
                selectDisableTip?: string(name='SelectDisableTip'),
                selectable?: boolean(name='Selectable', example='true'),
                startTime?: string(name='StartTime', example='10:00:00'),
              }
            ](name='TimeList'),
          }
        ](name='AppointTimes'),
        prePrice?: string(name='PrePrice', example='12.50'),
        realTime?: {
          name?: string(name='Name'),
          selectDisableTip?: string(name='SelectDisableTip'),
          selectable?: boolean(name='Selectable', example='false'),
        }(name='RealTime'),
      }
    ](name='CpTimeSelectList'),
    errorCode?: string(name='ErrorCode'),
    errorMsg?: string(name='ErrorMsg'),
    message?: string(name='Message', example='Success'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='9FC30594-3841-43AD-9008-03393BCB5CD2'),
}

model CreatePickUpWaybillPreQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePickUpWaybillPreQueryResponseBody(name='body'),
}

async function createPickUpWaybillPreQuery(request: CreatePickUpWaybillPreQueryRequest): CreatePickUpWaybillPreQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePickUpWaybillPreQuery', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAxgGroupRequest {
  groupId: long(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAxgGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAxgGroupResponseBody(name='body'),
}

async function deleteAxgGroup(request: DeleteAxgGroupRequest): DeleteAxgGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAxgGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretBlacklistRequest {
  blackNo: string(name='BlackNo', example='18252***383:18252***483', position='Query'),
  blackType: string(name='BlackType', example='POINT_TO_POINT_BLACK', position='Query'),
  poolKey: string(name='PoolKey', example='FC1232****', position='Query'),
  remark?: string(name='Remark', position='Query'),
  wayControl?: string(name='WayControl', example='PHONEA_REJECT', position='Query'),
}

model DeleteSecretBlacklistResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model DeleteSecretBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecretBlacklistResponseBody(name='body'),
}

async function deleteSecretBlacklist(request: DeleteSecretBlacklistRequest): DeleteSecretBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecretBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model GetSecretAsrDetailRequest {
  callId: string(name='CallId', example='225625****', position='Query'),
  callTime: string(name='CallTime', example='2019-03-05 12:00:00', position='Query'),
  poolKey: string(name='PoolKey', example='FC2267****', position='Query'),
}

model GetSecretAsrDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizDuration?: long(name='BizDuration', example='10944'),
    businessId?: string(name='BusinessId', example='435ee78c7a019650@!FC100000074672458@!2020061522****'),
    businessKey?: string(name='BusinessKey', example='JCGTncltuNao****'),
    code?: string(name='Code', example='21050000'),
    msg?: string(name='Msg', example='SUCCESS'),
    requestId?: string(name='RequestId', example='8d2329d407a83447a83be441681f4872ac74nE'),
    sentences?: [ 
      {
        beginTime?: long(name='BeginTime', example='1020'),
        channelId?: int32(name='ChannelId', example='0'),
        emotionValue?: string(name='EmotionValue', example='5.7'),
        endTime?: long(name='EndTime', example='1770'),
        silenceDuration?: long(name='SilenceDuration', example='0'),
        speechRate?: int32(name='SpeechRate', example='80'),
        text?: string(name='Text'),
      }
    ](name='Sentences'),
    type?: string(name='Type', example='asrResult'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model GetSecretAsrDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecretAsrDetailResponseBody(name='body'),
}

async function getSecretAsrDetail(request: GetSecretAsrDetailRequest): GetSecretAsrDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretAsrDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTotalPublicUrlRequest {
  callId: string(name='CallId', example='2568900****', position='Query'),
  callTime: string(name='CallTime', example='2019-03-05 12:00:00', position='Query'),
  checkSubs: boolean(name='CheckSubs', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  partnerKey: string(name='PartnerKey', example='FC12256****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetTotalPublicUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    phonePublicUrl?: string(name='PhonePublicUrl', example='http://secret-axb-reco****cn-shanghai.aliyuncs.com/1000000820257625_66647243838006067251551752068865.mp3?Expires=1551****07&OSSAccessKeyId=LTAIP00vvvv****v&Signature=tK6Yq9KusU4n%2BZQWX****4/WmEA%3D'),
    ringPublicUrl?: string(name='RingPublicUrl', example='http://secret-ab-reco****cn-shanghai.aliyuncs.com/1000000820257625_66647243838006067251551752068865.mp3?Expires=155175****&OSSAccessKeyId=LTAIP00vvv****vv&Signature=tK6Yq9KusU4n%2BZQW****g4/WmEA%3D'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='1AB3CEF7-DCBE-488C-9C33-D180982CE031'),
}

model GetTotalPublicUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalPublicUrlResponseBody(name='body'),
}

async function getTotalPublicUrl(request: GetTotalPublicUrlRequest): GetTotalPublicUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTotalPublicUrl', 'POST', '/', 'json', false, 'json', request);
}

model LockSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', example='1300000****', position='Query'),
}

model LockSecretNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='2D1AEB96-96D0-454E-B0DC-AE2A8DF08020'),
}

model LockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: LockSecretNoResponseBody(name='body'),
}

async function lockSecretNo(request: LockSecretNoRequest): LockSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model OperateAxgGroupRequest {
  groupId: long(name='GroupId', example='1234', position='Query'),
  numbers: string(name='Numbers', example='1390000****,1380000****', position='Query'),
  operateType: string(name='OperateType', example='addNumbers', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OperateAxgGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='986BCB6D-C9BF-42F9-91CE-3A9901233D36'),
}

model OperateAxgGroupResponse = {
  headers: map[string]string(name='headers'),
  body: OperateAxgGroupResponseBody(name='body'),
}

async function operateAxgGroup(request: OperateAxgGroupRequest): OperateAxgGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateAxgGroup', 'POST', '/', 'json', false, 'json', request);
}

model OperateBlackNoRequest {
  blackNo: string(name='BlackNo', example='150****0000', position='Query'),
  operateType: string(name='OperateType', example='AddBlack', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123456****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tips?: string(name='Tips', example='abcdef', position='Query'),
}

model OperateBlackNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='2D1AEB96-96D0-454E-B0DC-AE2A8DF08020'),
}

model OperateBlackNoResponse = {
  headers: map[string]string(name='headers'),
  body: OperateBlackNoResponseBody(name='body'),
}

async function operateBlackNo(request: OperateBlackNoRequest): OperateBlackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateBlackNo', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneNoAByTrackNoRequest {
  cabinetNo?: string(name='CabinetNo', example='25689****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX?: string(name='PhoneNoX', example='1710000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trackNo: string(name='trackNo', example='22573****', position='Query'),
}

model QueryPhoneNoAByTrackNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  module?: [ 
    {
      extension?: string(name='Extension', example='130'),
      phoneNoA?: string(name='PhoneNoA', example='1310000****'),
      phoneNoX?: string(name='PhoneNoX', example='1710000****'),
    }
  ](name='Module'),
  requestId?: string(name='RequestId', example='8906582E-6722'),
}

model QueryPhoneNoAByTrackNoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPhoneNoAByTrackNoResponseBody(name='body'),
}

async function queryPhoneNoAByTrackNo(request: QueryPhoneNoAByTrackNoRequest): QueryPhoneNoAByTrackNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneNoAByTrackNo', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordFileDownloadUrlRequest {
  callId: string(name='CallId', example='abcedf1234', position='Query'),
  callTime?: string(name='CallTime', example='2019-03-05 12:00:00', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  productType?: string(name='ProductType', example='AXB_170', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRecordFileDownloadUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  downloadUrl?: string(name='DownloadUrl', example='http://secret-axb-reco****cn-shanghai.aliyuncs.com/1000000820257625_66647243838006067251551752068865.mp3?Expires=155175****&OSSAccessKeyId=LTAIP00vvvv****v&Signature=tK6Yq9KusU4n%2BZ****7lg4/WmEA%3D'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='1AB3CEF7-DCBE-488C-9C33-D180982CE031'),
}

model QueryRecordFileDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRecordFileDownloadUrlResponseBody(name='body'),
}

async function queryRecordFileDownloadUrl(request: QueryRecordFileDownloadUrlRequest): QueryRecordFileDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordFileDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model QuerySecretNoDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC2258****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', example='1390000****', position='Query'),
}

model QuerySecretNoDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='066E6E47-04CB-4774-A976-4F73CB76D4A3'),
  secretNoInfoDTO?: {
    certifyStatus?: int32(name='CertifyStatus', example='0'),
    city?: string(name='City'),
    province?: string(name='Province'),
    purchaseTime?: string(name='PurchaseTime', example='2021-12-03 15:19:27'),
    secretStatus?: long(name='SecretStatus', example='0'),
    vendor?: long(name='Vendor', example='1'),
  }(name='SecretNoInfoDTO'),
}

model QuerySecretNoDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoDetailResponseBody(name='body'),
}

async function querySecretNoDetail(request: QuerySecretNoDetailRequest): QuerySecretNoDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySecretNoDetail', 'POST', '/', 'json', false, 'json', request);
}

model QuerySecretNoRemainRequest {
  city: string(name='City', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', example='130', position='Query'),
  specId: long(name='SpecId', example='1', position='Query'),
}

model QuerySecretNoRemainResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='9FC30594-3841-43AD-9008-03393BCB5CD2'),
  secretRemainDTO?: {
    amount?: long(name='Amount', example='0'),
    city?: string(name='City'),
    remainDTOList?: {
      remainDTO?: [ 
      {
        amount?: long(name='Amount', example='120'),
        city?: string(name='City'),
      }
    ](name='remainDTO')
    }(name='RemainDTOList'),
  }(name='SecretRemainDTO'),
}

model QuerySecretNoRemainResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySecretNoRemainResponseBody(name='body'),
}

async function querySecretNoRemain(request: QuerySecretNoRemainRequest): QuerySecretNoRemainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySecretNoRemain', 'POST', '/', 'json', false, 'json', request);
}

model QuerySubsIdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', example='1390000****', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySubsIdResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='E7F99446-8191-43C0-99B5-F58A6AEAD779'),
  subsId?: string(name='SubsId', example='11111111****'),
}

model QuerySubsIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubsIdResponseBody(name='body'),
}

async function querySubsId(request: QuerySubsIdRequest): QuerySubsIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubsId', 'POST', '/', 'json', false, 'json', request);
}

model QuerySubscriptionDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoX: string(name='PhoneNoX', example='13900001234', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  productType?: string(name='ProductType', example='AXB_170', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subsId: string(name='SubsId', example='100000076879****', position='Query'),
}

model QuerySubscriptionDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='066E6E47-04CB-4774-A976-4F73CB76D4A3'),
  secretBindDetailDTO?: {
    ASRModelId?: string(name='ASRModelId', example='123456'),
    ASRStatus?: boolean(name='ASRStatus', example='true'),
    callRestrict?: string(name='CallRestrict', example='CONTROL_BX_DISABLE'),
    expireDate?: string(name='ExpireDate', example='2019-09-05 12:00:00'),
    extension?: string(name='Extension', example='130'),
    gmtCreate?: string(name='GmtCreate', example='2019-03-05 12:00:00'),
    groupId?: long(name='GroupId', example='2000000130001'),
    needRecord?: boolean(name='NeedRecord', example='true'),
    phoneNoA?: string(name='PhoneNoA', example='13900001111'),
    phoneNoB?: string(name='PhoneNoB', example='13900002222'),
    phoneNoX?: string(name='PhoneNoX', example='13900001234'),
    status?: long(name='Status', example='1'),
    subsId?: string(name='SubsId', example='100000076879****'),
  }(name='SecretBindDetailDTO'),
}

model QuerySubscriptionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscriptionDetailResponseBody(name='body'),
}

async function querySubscriptionDetail(request: QuerySubscriptionDetailRequest): QuerySubscriptionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubscriptionDetail', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC123456', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', example='130', position='Query'),
}

model ReleaseSecretNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='986BCB6D-C9BF-42F9-91CE-3A990121232'),
}

model ReleaseSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSecretNoResponseBody(name='body'),
}

async function releaseSecretNo(request: ReleaseSecretNoRequest): ReleaseSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model UnbindSubscriptionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', example='FC123456', position='Query'),
  productType?: string(name='ProductType', example='AXB_170', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', example='1390000****', position='Query'),
  subsId: string(name='SubsId', example='1************2', position='Query'),
}

model UnbindSubscriptionResponseBody = {
  chargeId?: string(name='ChargeId', example='true'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='986BCB6D-C9BF-42F9-91CE-3A9901233D36'),
}

model UnbindSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSubscriptionResponseBody(name='body'),
}

async function unbindSubscription(request: UnbindSubscriptionRequest): UnbindSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindSubscription', 'POST', '/', 'json', false, 'json', request);
}

model UnlockSecretNoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', example='FC2256****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', example='1300000****', position='Query'),
}

model UnlockSecretNoResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='2D1AEB96-96D0-454E-B0DC-AE2A8DF08020'),
}

model UnlockSecretNoResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockSecretNoResponseBody(name='body'),
}

async function unlockSecretNo(request: UnlockSecretNoRequest): UnlockSecretNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockSecretNo', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubscriptionRequest {
  ASRModelId?: string(name='ASRModelId', example='980abddb908f48e8b987cb2cd303****', position='Query'),
  ASRStatus?: boolean(name='ASRStatus', example='false', position='Query'),
  callDisplayType?: int32(name='CallDisplayType', example='1', position='Query'),
  callRestrict?: string(name='CallRestrict', example='CONTROL_BX_DISABLE', position='Query'),
  expiration?: string(name='Expiration', example='2019-09-05 12:00:00', position='Query'),
  groupId?: string(name='GroupId', example='1234', position='Query'),
  isRecordingEnabled?: boolean(name='IsRecordingEnabled', example='true', position='Query'),
  operateType: string(name='OperateType', example='updateNoA', position='Query'),
  outId?: string(name='OutId', example='abcdef', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA?: string(name='PhoneNoA', example='1390000****', position='Query'),
  phoneNoB?: string(name='PhoneNoB', example='1390000****', position='Query'),
  phoneNoX: string(name='PhoneNoX', example='1390000****', position='Query'),
  poolKey?: string(name='PoolKey', example='FC122356****', position='Query'),
  productType?: string(name='ProductType', example='AXB_170', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringConfig?: string(name='RingConfig', example='{"AXBRing_B":"100000001","AXBRing_A":"100000001"}', position='Query'),
  subsId: string(name='SubsId', example='100000076879****', position='Query'),
}

model UpdateSubscriptionResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='986BCB6D-C9BF-42F9-91CE-3A9901233D36'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubscription', 'POST', '/', 'json', false, 'json', request);
}

