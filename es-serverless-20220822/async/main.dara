/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'es-serverless';
  @version = '2022-08-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DataStreamMapping {
  caseSensitive?: boolean(name='caseSensitive', description='大小写敏感'),
  docValues?: boolean(name='docValues', description='是否聚合'),
  index?: boolean(name='index', description='是否索引'),
  key: string(name='key', description='字段名'),
  properties?: [
    DataStreamMapping
  ](name='properties', description='嵌套索引字段'),
  tokenizeOnChars?: [ string ](name='tokenizeOnChars', description='识别分隔符列表'),
  type: string(name='type', description='字段类型'),
}

model CreateAppRequest {
  appName: string(name='appName', description='应用名', position='Body'),
  chargeType?: string(name='chargeType', position='Body'),
  description?: string(name='description', description='应用备注', position='Body'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApp', 'POST', '/openapi/xops/instances', 'json', false, 'json', request);
}

model CreateDataStreamRequest {
  appName: string(name='appName', example='es-severless-test-app', position='Path'),
  dataStreamName: string(name='dataStreamName', description='代表资源名称的资源属性字段', example='metrics-logs-online', position='Body'),
  deletePhase: string(name='deletePhase', description='删除时间', example='150d', position='Body'),
  dynamic?: string(name='dynamic', example='false', position='Body'),
  regionId?: string(name='regionId', example='cn-hangzhou', position='Body'),
  template?: {
    mappings?: [
      DataStreamMapping
    ](name='mappings', description='索引字段设置'),
  }(name='template', description='数据流模板', position='Body'),
  timeStampKey?: string(name='timeStampKey', example='@timestamp', position='Body'),
  type: string(name='type', description='数据流类型', example='logs', position='Body'),
}

model CreateDataStreamResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2A386D4E-****-558E-95FB-C1EF22DDF420'),
}

model CreateDataStreamResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataStreamResponseBody(name='body'),
}

async function createDataStream(request: CreateDataStreamRequest): CreateDataStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataStream', 'POST', '/openapi/xops/instances/{appName}/data-streams', 'json', false, 'json', request);
}

model DeleteAccessTokenRequest {
  tokenId: string(name='tokenId', position='Path'),
}

model DeleteAccessTokenResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessTokenResponseBody(name='body'),
}

async function deleteAccessToken(request: DeleteAccessTokenRequest): DeleteAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAccessToken', 'DELETE', '/openapi/xops/tokens/{tokenId}', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appName: string(name='appName', position='Path'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    instanceId?: string(name='instanceId'),
  }(name='result'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApp', 'DELETE', '/openapi/xops/instances/{appName}', 'json', false, 'json', request);
}

model DeleteDataStreamRequest {
  appName: string(name='appName', example='es-severless-test-app', position='Path'),
  dataStreamName: string(name='dataStreamName', example='metrics-logs-online', position='Path'),
}

model DeleteDataStreamResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: boolean(name='result', example='true'),
}

model DeleteDataStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataStreamResponseBody(name='body'),
}

async function deleteDataStream(request: DeleteDataStreamRequest): DeleteDataStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataStream', 'DELETE', '/openapi/xops/instances/{appName}/data-streams/{dataStreamName}', 'json', false, 'json', request);
}

model DescibeRegionsRequest {
}

model DescibeRegionsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      endpoint?: string(name='endpoint'),
      localName?: string(name='localName'),
      regionId?: string(name='regionId'),
    }
  ](name='result'),
}

model DescibeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescibeRegionsResponseBody(name='body'),
}

async function descibeRegions(request: DescibeRegionsRequest): DescibeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescibeRegions', 'GET', '/openapi/xops/regions', 'json', false, 'json', request);
}

model DisableAccessTokenRequest {
  tokenId: string(name='tokenId', position='Path'),
}

model DisableAccessTokenResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
}

model DisableAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAccessTokenResponseBody(name='body'),
}

async function disableAccessToken(request: DisableAccessTokenRequest): DisableAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableAccessToken', 'POST', '/openapi/xops/tokens/{tokenId}/actions/disable', 'json', false, 'json', request);
}

model EnableAccessTokenRequest {
  tokenId: string(name='tokenId', position='Path'),
}

model EnableAccessTokenResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model EnableAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAccessTokenResponseBody(name='body'),
}

async function enableAccessToken(request: EnableAccessTokenRequest): EnableAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableAccessToken', 'POST', '/openapi/xops/tokens/{tokenId}/actions/enable', 'json', false, 'json', request);
}

model GenerateAcccessTokenRequest {
}

model GenerateAcccessTokenResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model GenerateAcccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAcccessTokenResponseBody(name='body'),
}

async function generateAcccessToken(request: GenerateAcccessTokenRequest): GenerateAcccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateAcccessToken', 'POST', '/openapi/xops/tokens', 'json', false, 'json', request);
}

model GetAppRequest {
  appName: string(name='appName', position='Path'),
}

model GetAppResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    appName?: string(name='appName', description='代表资源名称的资源属性字段'),
    createTime?: string(name='createTime', description='代表创建时间的资源属性字段'),
    description?: string(name='description', description='应用备注'),
    flowQuota?: string(name='flowQuota', description='流量限流额'),
    ownerId?: string(name='ownerId', description='OwnerID账号ID'),
    regionId?: string(name='regionId', description='代表region的资源属性字段'),
    status?: string(name='status', description='代表资源状态的资源属性字段'),
    storageQuota?: string(name='storageQuota', description='存储限流额'),
  }(name='result'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppResponseBody(name='body'),
}

async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApp', 'GET', '/openapi/xops/instances/{appName}', 'json', false, 'json', request);
}

model GetDataStreamRequest {
  appName: string(name='appName', position='Path'),
  dataStreamName: string(name='dataStreamName', position='Path'),
}

model GetDataStreamResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    appName?: string(name='appName', description='关联的应用AppId'),
    createTime?: string(name='createTime', description='代表创建时间的资源属性字段'),
    dataStreamId?: string(name='dataStreamId', description='代表资源一级ID的资源属性字段'),
    dataStreamName?: string(name='dataStreamName', description='代表资源名称的资源属性字段'),
    deletePhase?: string(name='deletePhase', description='删除时间'),
    regionId?: string(name='regionId', description='代表region的资源属性字段'),
    template?: {
      mappings?: [
        DataStreamMapping
      ](name='mappings', description='索引字段设置'),
    }(name='template', description='数据流模板'),
    timeStampKey?: string(name='timeStampKey'),
    type?: string(name='type', description='数据流类型'),
  }(name='result'),
}

model GetDataStreamResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataStreamResponseBody(name='body'),
}

async function getDataStream(request: GetDataStreamRequest): GetDataStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataStream', 'GET', '/openapi/xops/instances/{appName}/data-streams/{dataStreamName}', 'json', false, 'json', request);
}

model GetRegionInfoRequest {
}

model GetRegionInfoResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetRegionInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetRegionInfoResponseBody(name='body'),
}

async function getRegionInfo(request: GetRegionInfoRequest): GetRegionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionInfo', 'GET', '/openapi/xops/regions/info', 'json', false, 'json', request);
}

model ListAccessTokensRequest {
  tokenId?: string(name='tokenId', position='Query'),
}

model ListAccessTokensResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListAccessTokensResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccessTokensResponseBody(name='body'),
}

async function listAccessTokens(request: ListAccessTokensRequest): ListAccessTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAccessTokens', 'GET', '/openapi/xops/tokens', 'json', false, 'json', request);
}

model ListAppsRequest {
  appName?: string(name='appName', example='es-severless-test-app', position='Query'),
  description?: string(name='description', example='metrics-logs-online', position='Query'),
  pageNumber?: int32(name='pageNumber', example='2', position='Query'),
  pageSize?: int32(name='pageSize', example='20', position='Query'),
}

model ListAppsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
  result?: [ 
    {
      appName?: string(name='appName', description='代表资源名称的资源属性字段', example='es-severless-test-app'),
      createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='2022-12-27T07:09:11.000Z'),
      description?: string(name='description', description='应用备注'),
      flowQuota?: string(name='flowQuota', description='流量限流额', example='***'),
      ownerId?: string(name='ownerId', description='OwnerID账号ID', example='*********7595'),
      regionId?: string(name='regionId', description='代表region的资源属性字段', example='cn-hangzhou'),
      status?: string(name='status', description='代表资源状态的资源属性字段', example='ACTIVE'),
      storageQuota?: string(name='storageQuota', description='存储限流额', example='***'),
    }
  ](name='result', description='数组，返回示例目录。'),
  totalCount: int32(name='totalCount', description='总记录数。', example='68', minimum=0),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApps', 'GET', '/openapi/xops/instances', 'json', false, 'json', request);
}

model ListDataStreamsRequest {
  appName: string(name='appName', position='Path'),
  dataStreamName?: string(name='dataStreamName', position='Query'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  regionId?: string(name='regionId', position='Query'),
}

model ListDataStreamsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      appName?: string(name='appName', description='关联的应用AppId'),
      createTime?: string(name='createTime', description='代表创建时间的资源属性字段'),
      dataStreamId?: string(name='dataStreamId', description='代表资源一级ID的资源属性字段'),
      dataStreamName?: string(name='dataStreamName', description='代表资源名称的资源属性字段'),
      deletePhase?: string(name='deletePhase', description='删除时间'),
      regionId?: string(name='regionId', description='代表region的资源属性字段'),
      template?: {
        mappings?: [
          DataStreamMapping
        ](name='mappings', description='索引字段设置'),
      }(name='template', description='数据流模板'),
      timeStampKey?: string(name='timeStampKey'),
      type?: string(name='type', description='数据流类型'),
    }
  ](name='result', description='数组，返回示例目录。'),
  totalCount?: int32(name='totalCount'),
}

model ListDataStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataStreamsResponseBody(name='body'),
}

async function listDataStreams(request: ListDataStreamsRequest): ListDataStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataStreams', 'GET', '/openapi/xops/instances/{appName}/data-streams', 'json', false, 'json', request);
}

model UpdateAppRequest {
  appName: string(name='appName', description='实例 ID。', example='es-severless-test-app', position='Path'),
  description?: string(name='description', description='应用备注', position='Body'),
}

model UpdateAppResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='2C5DAA30-****-5181-9B87-9D6181016197'),
}

model UpdateAppResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppResponseBody(name='body'),
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateApp', 'PUT', '/openapi/xops/instances/{appName}', 'json', false, 'json', request);
}

model UpdateDataStreamRequest {
  dataStreamName: string(name='dataStreamName', description='实例 ID。', position='Path'),
  appName: string(name='appName', position='Path'),
  deletePhase?: string(name='deletePhase', description='删除时间', position='Body'),
  dynamic?: string(name='dynamic', position='Body'),
  template?: {
    mappings?: [
      DataStreamMapping
    ](name='mappings'),
  }(name='template', position='Body'),
  timeStampKey?: string(name='timeStampKey', position='Body'),
}

model UpdateDataStreamResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: {
    appName?: string(name='appName'),
  }(name='result'),
}

model UpdateDataStreamResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDataStreamResponseBody(name='body'),
}

async function updateDataStream(request: UpdateDataStreamRequest): UpdateDataStreamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDataStream', 'PUT', '/openapi/xops/instances/{appName}/data-streams/{dataStreamName}', 'json', false, 'json', request);
}

