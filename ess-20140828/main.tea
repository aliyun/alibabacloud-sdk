/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'ess.aliyuncs.com',
    cn-beijing = 'ess.aliyuncs.com',
    cn-hangzhou = 'ess.aliyuncs.com',
    cn-shanghai = 'ess.aliyuncs.com',
    cn-shenzhen = 'ess.aliyuncs.com',
    cn-hongkong = 'ess.aliyuncs.com',
    ap-southeast-1 = 'ess.aliyuncs.com',
    us-west-1 = 'ess.aliyuncs.com',
    us-east-1 = 'ess.aliyuncs.com',
    cn-shanghai-finance-1 = 'ess.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ess.aliyuncs.com',
    cn-north-2-gov-1 = 'ess.aliyuncs.com',
    ap-northeast-2-pop = 'ess.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ess.aliyuncs.com',
    cn-beijing-finance-pop = 'ess.aliyuncs.com',
    cn-beijing-gov-1 = 'ess.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ess.aliyuncs.com',
    cn-edge-1 = 'ess.aliyuncs.com',
    cn-fujian = 'ess.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ess.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ess.aliyuncs.com',
    cn-hangzhou-finance = 'ess.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ess.aliyuncs.com',
    cn-hangzhou-test-306 = 'ess.aliyuncs.com',
    cn-hongkong-finance-pop = 'ess.aliyuncs.com',
    cn-qingdao-nebula = 'ess.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ess.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ess.aliyuncs.com',
    cn-shanghai-inner = 'ess.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ess.aliyuncs.com',
    cn-shenzhen-inner = 'ess.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ess.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ess.aliyuncs.com',
    cn-wuhan = 'ess.aliyuncs.com',
    cn-yushanfang = 'ess.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ess.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ess.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ess.aliyuncs.com',
    eu-west-1-oxs = 'ess.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'ess.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ess', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AttachDBInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  forceAttach?: boolean(name='ForceAttach'),
  clientToken?: string(name='ClientToken'),
  DBInstance?: [ string ](name='DBInstance'),
}

model AttachDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDBInstancesResponseBody(name='body'),
}

async function attachDBInstancesWithOptions(request: AttachDBInstancesRequest, runtime: Util.RuntimeOptions): AttachDBInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachDBInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachDBInstances(request: AttachDBInstancesRequest): AttachDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDBInstancesWithOptions(request, runtime);
}

model AttachInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  entrusted?: boolean(name='Entrusted'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: [ string ](name='InstanceId'),
  loadBalancerWeight?: [ integer ](name='LoadBalancerWeight'),
}

model AttachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstancesWithOptions(request: AttachInstancesRequest, runtime: Util.RuntimeOptions): AttachInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachInstances(request: AttachInstancesRequest): AttachInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachInstancesWithOptions(request, runtime);
}

model AttachLoadBalancersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  forceAttach?: boolean(name='ForceAttach'),
  clientToken?: string(name='ClientToken'),
  loadBalancer?: [ string ](name='LoadBalancer'),
}

model AttachLoadBalancersResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: AttachLoadBalancersResponseBody(name='body'),
}

async function attachLoadBalancersWithOptions(request: AttachLoadBalancersRequest, runtime: Util.RuntimeOptions): AttachLoadBalancersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachLoadBalancers', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachLoadBalancers(request: AttachLoadBalancersRequest): AttachLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachLoadBalancersWithOptions(request, runtime);
}

model AttachVServerGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  forceAttach?: boolean(name='ForceAttach'),
  VServerGroup?: [ 
    {
      VServerGroupAttribute?: [ 
        {
          VServerGroupId?: string(name='VServerGroupId'),
          weight?: int32(name='Weight'),
          port?: int32(name='Port'),
        }
      ](name='VServerGroupAttribute'),
      loadBalancerId?: string(name='LoadBalancerId'),
    }
  ](name='VServerGroup'),
}

model AttachVServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachVServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AttachVServerGroupsResponseBody(name='body'),
}

async function attachVServerGroupsWithOptions(request: AttachVServerGroupsRequest, runtime: Util.RuntimeOptions): AttachVServerGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachVServerGroups', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachVServerGroups(request: AttachVServerGroupsRequest): AttachVServerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachVServerGroupsWithOptions(request, runtime);
}

model CompleteLifecycleActionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  lifecycleHookId?: string(name='LifecycleHookId'),
  lifecycleActionToken?: string(name='LifecycleActionToken'),
  lifecycleActionResult?: string(name='LifecycleActionResult'),
  clientToken?: string(name='ClientToken'),
}

model CompleteLifecycleActionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CompleteLifecycleActionResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteLifecycleActionResponseBody(name='body'),
}

async function completeLifecycleActionWithOptions(request: CompleteLifecycleActionRequest, runtime: Util.RuntimeOptions): CompleteLifecycleActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteLifecycleAction', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeLifecycleAction(request: CompleteLifecycleActionRequest): CompleteLifecycleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeLifecycleActionWithOptions(request, runtime);
}

model CreateAlarmRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  scalingGroupId?: string(name='ScalingGroupId'),
  metricName?: string(name='MetricName'),
  metricType?: string(name='MetricType'),
  period?: int32(name='Period'),
  statistics?: string(name='Statistics'),
  threshold?: float(name='Threshold'),
  comparisonOperator?: string(name='ComparisonOperator'),
  evaluationCount?: int32(name='EvaluationCount'),
  groupId?: int32(name='GroupId'),
  effective?: string(name='Effective'),
  alarmAction?: [ string ](name='AlarmAction'),
  dimension?: [ 
    {
      dimensionKey?: string(name='DimensionKey'),
      dimensionValue?: string(name='DimensionValue'),
    }
  ](name='Dimension'),
}

model CreateAlarmResponseBody = {
  requestId?: string(name='RequestId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model CreateAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlarmResponseBody(name='body'),
}

async function createAlarmWithOptions(request: CreateAlarmRequest, runtime: Util.RuntimeOptions): CreateAlarmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAlarm', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAlarm(request: CreateAlarmRequest): CreateAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlarmWithOptions(request, runtime);
}

model CreateLifecycleHookRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  lifecycleHookName?: string(name='LifecycleHookName'),
  lifecycleTransition?: string(name='LifecycleTransition'),
  defaultResult?: string(name='DefaultResult'),
  heartbeatTimeout?: int32(name='HeartbeatTimeout'),
  notificationMetadata?: string(name='NotificationMetadata'),
  notificationArn?: string(name='NotificationArn'),
}

model CreateLifecycleHookResponseBody = {
  requestId?: string(name='RequestId'),
  lifecycleHookId?: string(name='LifecycleHookId'),
}

model CreateLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLifecycleHookResponseBody(name='body'),
}

async function createLifecycleHookWithOptions(request: CreateLifecycleHookRequest, runtime: Util.RuntimeOptions): CreateLifecycleHookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLifecycleHook', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLifecycleHook(request: CreateLifecycleHookRequest): CreateLifecycleHookResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecycleHookWithOptions(request, runtime);
}

model CreateNotificationConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  notificationArn?: string(name='NotificationArn'),
  notificationType?: [ string ](name='NotificationType'),
}

model CreateNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNotificationConfigurationResponseBody(name='body'),
}

async function createNotificationConfigurationWithOptions(request: CreateNotificationConfigurationRequest, runtime: Util.RuntimeOptions): CreateNotificationConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNotificationConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNotificationConfiguration(request: CreateNotificationConfigurationRequest): CreateNotificationConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNotificationConfigurationWithOptions(request, runtime);
}

model CreateScalingConfigurationRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  instanceType?: string(name='InstanceType'),
  cpu?: int32(name='Cpu'),
  memory?: int32(name='Memory'),
  deploymentSetId?: string(name='DeploymentSetId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ioOptimized?: string(name='IoOptimized'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  scalingConfigurationName?: string(name='ScalingConfigurationName'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight'),
  ownerAccount?: string(name='OwnerAccount'),
  tags?: string(name='Tags'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  instanceName?: string(name='InstanceName'),
  hostName?: string(name='HostName'),
  spotStrategy?: string(name='SpotStrategy'),
  passwordInherit?: boolean(name='PasswordInherit'),
  password?: string(name='Password'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  instanceDescription?: string(name='InstanceDescription'),
  clientToken?: string(name='ClientToken'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  creditSpecification?: string(name='CreditSpecification'),
  imageFamily?: string(name='ImageFamily'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  schedulerOptions?: map[string]any(name='SchedulerOptions'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      category?: string(name='Category'),
      KMSKeyId?: string(name='KMSKeyId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  spotPriceLimit?: [ 
    {
      priceLimit?: float(name='PriceLimit'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='SpotPriceLimit'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model CreateScalingConfigurationShrinkRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  instanceType?: string(name='InstanceType'),
  cpu?: int32(name='Cpu'),
  memory?: int32(name='Memory'),
  deploymentSetId?: string(name='DeploymentSetId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ioOptimized?: string(name='IoOptimized'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  scalingConfigurationName?: string(name='ScalingConfigurationName'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight'),
  ownerAccount?: string(name='OwnerAccount'),
  tags?: string(name='Tags'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  instanceName?: string(name='InstanceName'),
  hostName?: string(name='HostName'),
  spotStrategy?: string(name='SpotStrategy'),
  passwordInherit?: boolean(name='PasswordInherit'),
  password?: string(name='Password'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  instanceDescription?: string(name='InstanceDescription'),
  clientToken?: string(name='ClientToken'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  creditSpecification?: string(name='CreditSpecification'),
  imageFamily?: string(name='ImageFamily'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  schedulerOptionsShrink?: string(name='SchedulerOptions'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      category?: string(name='Category'),
      KMSKeyId?: string(name='KMSKeyId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  spotPriceLimit?: [ 
    {
      priceLimit?: float(name='PriceLimit'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='SpotPriceLimit'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model CreateScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
}

model CreateScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingConfigurationResponseBody(name='body'),
}

async function createScalingConfigurationWithOptions(tmpReq: CreateScalingConfigurationRequest, runtime: Util.RuntimeOptions): CreateScalingConfigurationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScalingConfigurationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.schedulerOptions)) {
    request.schedulerOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedulerOptions, 'SchedulerOptions', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScalingConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScalingConfiguration(request: CreateScalingConfigurationRequest): CreateScalingConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScalingConfigurationWithOptions(request, runtime);
}

model CreateScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupName?: string(name='ScalingGroupName'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  minSize?: int32(name='MinSize'),
  maxSize?: int32(name='MaxSize'),
  defaultCooldown?: int32(name='DefaultCooldown'),
  loadBalancerIds?: string(name='LoadBalancerIds'),
  DBInstanceIds?: string(name='DBInstanceIds'),
  ownerAccount?: string(name='OwnerAccount'),
  vSwitchId?: string(name='VSwitchId'),
  multiAZPolicy?: string(name='MultiAZPolicy'),
  healthCheckType?: string(name='HealthCheckType'),
  scalingPolicy?: string(name='ScalingPolicy'),
  clientToken?: string(name='ClientToken'),
  onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity'),
  onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
  compensateWithOnDemand?: boolean(name='CompensateWithOnDemand'),
  spotInstancePools?: int32(name='SpotInstancePools'),
  desiredCapacity?: int32(name='DesiredCapacity'),
  groupDeletionProtection?: boolean(name='GroupDeletionProtection'),
  scaleOutAmountCheck?: boolean(name='ScaleOutAmountCheck'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  lifecycleHook?: [ 
    {
      defaultResult?: string(name='DefaultResult'),
      lifecycleHookName?: string(name='LifecycleHookName'),
      lifecycleTransition?: string(name='LifecycleTransition'),
      notificationMetadata?: string(name='NotificationMetadata'),
      notificationArn?: string(name='NotificationArn'),
      heartbeatTimeout?: int32(name='HeartbeatTimeout'),
    }
  ](name='LifecycleHook'),
  VServerGroup?: [ 
    {
      VServerGroupAttribute?: [ 
        {
          VServerGroupId?: string(name='VServerGroupId'),
          weight?: int32(name='Weight'),
          port?: int32(name='Port'),
        }
      ](name='VServerGroupAttribute'),
      loadBalancerId?: string(name='LoadBalancerId'),
    }
  ](name='VServerGroup'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride'),
}

model CreateScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model CreateScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingGroupResponseBody(name='body'),
}

async function createScalingGroupWithOptions(request: CreateScalingGroupRequest, runtime: Util.RuntimeOptions): CreateScalingGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScalingGroup', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScalingGroup(request: CreateScalingGroupRequest): CreateScalingGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScalingGroupWithOptions(request, runtime);
}

model CreateScalingRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingRuleName?: string(name='ScalingRuleName'),
  cooldown?: int32(name='Cooldown'),
  minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude'),
  adjustmentType?: string(name='AdjustmentType'),
  adjustmentValue?: int32(name='AdjustmentValue'),
  scalingRuleType?: string(name='ScalingRuleType'),
  estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup'),
  metricName?: string(name='MetricName'),
  targetValue?: float(name='TargetValue'),
  disableScaleIn?: boolean(name='DisableScaleIn'),
  scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount'),
  scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount'),
  ownerAccount?: string(name='OwnerAccount'),
  predictiveScalingMode?: string(name='PredictiveScalingMode'),
  predictiveValueBehavior?: string(name='PredictiveValueBehavior'),
  predictiveValueBuffer?: int32(name='PredictiveValueBuffer'),
  predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime'),
  initialMaxSize?: int32(name='InitialMaxSize'),
  stepAdjustment?: [ 
    {
      metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
      scalingAdjustment?: int32(name='ScalingAdjustment'),
      metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
    }
  ](name='StepAdjustment'),
}

model CreateScalingRuleResponseBody = {
  scalingRuleAri?: string(name='ScalingRuleAri'),
  requestId?: string(name='RequestId'),
  scalingRuleId?: string(name='ScalingRuleId'),
}

model CreateScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingRuleResponseBody(name='body'),
}

async function createScalingRuleWithOptions(request: CreateScalingRuleRequest, runtime: Util.RuntimeOptions): CreateScalingRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScalingRule', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScalingRule(request: CreateScalingRuleRequest): CreateScalingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScalingRuleWithOptions(request, runtime);
}

model CreateScheduledTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  scheduledTaskName?: string(name='ScheduledTaskName'),
  description?: string(name='Description'),
  scheduledAction?: string(name='ScheduledAction'),
  recurrenceEndTime?: string(name='RecurrenceEndTime'),
  launchTime?: string(name='LaunchTime'),
  recurrenceType?: string(name='RecurrenceType'),
  recurrenceValue?: string(name='RecurrenceValue'),
  taskEnabled?: boolean(name='TaskEnabled'),
  launchExpirationTime?: int32(name='LaunchExpirationTime'),
  ownerAccount?: string(name='OwnerAccount'),
  minValue?: int32(name='MinValue'),
  maxValue?: int32(name='MaxValue'),
  desiredCapacity?: int32(name='DesiredCapacity'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model CreateScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scheduledTaskId?: string(name='ScheduledTaskId'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTaskWithOptions(request: CreateScheduledTaskRequest, runtime: Util.RuntimeOptions): CreateScheduledTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScheduledTask', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScheduledTask(request: CreateScheduledTaskRequest): CreateScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledTaskWithOptions(request, runtime);
}

model DeactivateScalingConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeactivateScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactivateScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeactivateScalingConfigurationResponseBody(name='body'),
}

async function deactivateScalingConfigurationWithOptions(request: DeactivateScalingConfigurationRequest, runtime: Util.RuntimeOptions): DeactivateScalingConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeactivateScalingConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deactivateScalingConfiguration(request: DeactivateScalingConfigurationRequest): DeactivateScalingConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactivateScalingConfigurationWithOptions(request, runtime);
}

model DeleteAlarmRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model DeleteAlarmResponseBody = {
  requestId?: string(name='RequestId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model DeleteAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlarmResponseBody(name='body'),
}

async function deleteAlarmWithOptions(request: DeleteAlarmRequest, runtime: Util.RuntimeOptions): DeleteAlarmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlarm', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlarm(request: DeleteAlarmRequest): DeleteAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlarmWithOptions(request, runtime);
}

model DeleteLifecycleHookRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  lifecycleHookId?: string(name='LifecycleHookId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  lifecycleHookName?: string(name='LifecycleHookName'),
}

model DeleteLifecycleHookResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLifecycleHookResponseBody(name='body'),
}

async function deleteLifecycleHookWithOptions(request: DeleteLifecycleHookRequest, runtime: Util.RuntimeOptions): DeleteLifecycleHookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLifecycleHook', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLifecycleHook(request: DeleteLifecycleHookRequest): DeleteLifecycleHookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLifecycleHookWithOptions(request, runtime);
}

model DeleteNotificationConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  notificationArn?: string(name='NotificationArn'),
}

model DeleteNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNotificationConfigurationResponseBody(name='body'),
}

async function deleteNotificationConfigurationWithOptions(request: DeleteNotificationConfigurationRequest, runtime: Util.RuntimeOptions): DeleteNotificationConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNotificationConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNotificationConfiguration(request: DeleteNotificationConfigurationRequest): DeleteNotificationConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNotificationConfigurationWithOptions(request, runtime);
}

model DeleteScalingConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingConfigurationResponseBody(name='body'),
}

async function deleteScalingConfigurationWithOptions(request: DeleteScalingConfigurationRequest, runtime: Util.RuntimeOptions): DeleteScalingConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScalingConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScalingConfiguration(request: DeleteScalingConfigurationRequest): DeleteScalingConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScalingConfigurationWithOptions(request, runtime);
}

model DeleteScalingGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  forceDelete?: boolean(name='ForceDelete'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingGroupResponseBody(name='body'),
}

async function deleteScalingGroupWithOptions(request: DeleteScalingGroupRequest, runtime: Util.RuntimeOptions): DeleteScalingGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScalingGroup', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScalingGroup(request: DeleteScalingGroupRequest): DeleteScalingGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScalingGroupWithOptions(request, runtime);
}

model DeleteScalingRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingRuleId?: string(name='ScalingRuleId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingRuleResponseBody(name='body'),
}

async function deleteScalingRuleWithOptions(request: DeleteScalingRuleRequest, runtime: Util.RuntimeOptions): DeleteScalingRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScalingRule', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScalingRule(request: DeleteScalingRuleRequest): DeleteScalingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScalingRuleWithOptions(request, runtime);
}

model DeleteScheduledTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scheduledTaskId?: string(name='ScheduledTaskId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduledTaskResponseBody(name='body'),
}

async function deleteScheduledTaskWithOptions(request: DeleteScheduledTaskRequest, runtime: Util.RuntimeOptions): DeleteScheduledTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScheduledTask', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScheduledTask(request: DeleteScheduledTaskRequest): DeleteScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduledTaskWithOptions(request, runtime);
}

model DescribeAlarmsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  alarmTaskId?: string(name='AlarmTaskId'),
  state?: string(name='State'),
  isEnable?: boolean(name='IsEnable'),
  metricType?: string(name='MetricType'),
  metricName?: string(name='MetricName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAlarmsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  alarmList?: {
    alarm?: [ 
    {
      alarmTaskId?: string(name='AlarmTaskId'),
      metricName?: string(name='MetricName'),
      evaluationCount?: int32(name='EvaluationCount'),
      state?: string(name='State'),
      alarmActions?: {
        alarmAction?: [ string ](name='AlarmAction')
      }(name='AlarmActions'),
      scalingGroupId?: string(name='ScalingGroupId'),
      period?: int32(name='Period'),
      comparisonOperator?: string(name='ComparisonOperator'),
      effective?: string(name='Effective'),
      description?: string(name='Description'),
      dimensions?: {
        dimension?: [ 
        {
          dimensionKey?: string(name='DimensionKey'),
          dimensionValue?: string(name='DimensionValue'),
        }
      ](name='Dimension')
      }(name='Dimensions'),
      metricType?: string(name='MetricType'),
      name?: string(name='Name'),
      threshold?: float(name='Threshold'),
      enable?: boolean(name='Enable'),
      statistics?: string(name='Statistics'),
    }
  ](name='Alarm')
  }(name='AlarmList'),
}

model DescribeAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmsResponseBody(name='body'),
}

async function describeAlarmsWithOptions(request: DescribeAlarmsRequest, runtime: Util.RuntimeOptions): DescribeAlarmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlarms', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlarms(request: DescribeAlarmsRequest): DescribeAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmsWithOptions(request, runtime);
}

model DescribeLifecycleActionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingActivityId?: string(name='ScalingActivityId'),
  lifecycleActionStatus?: string(name='LifecycleActionStatus'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model DescribeLifecycleActionsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
  lifecycleActions?: {
    lifecycleAction?: [ 
    {
      lifecycleHookId?: string(name='LifecycleHookId'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds'),
      lifecycleActionToken?: string(name='LifecycleActionToken'),
      lifecycleActionStatus?: string(name='LifecycleActionStatus'),
      lifecycleActionResult?: string(name='LifecycleActionResult'),
    }
  ](name='LifecycleAction')
  }(name='LifecycleActions'),
}

model DescribeLifecycleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLifecycleActionsResponseBody(name='body'),
}

async function describeLifecycleActionsWithOptions(request: DescribeLifecycleActionsRequest, runtime: Util.RuntimeOptions): DescribeLifecycleActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLifecycleActions', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLifecycleActions(request: DescribeLifecycleActionsRequest): DescribeLifecycleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLifecycleActionsWithOptions(request, runtime);
}

model DescribeLifecycleHooksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  lifecycleHookName?: string(name='LifecycleHookName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  lifecycleHookId?: [ string ](name='LifecycleHookId'),
}

model DescribeLifecycleHooksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  lifecycleHooks?: {
    lifecycleHook?: [ 
    {
      defaultResult?: string(name='DefaultResult'),
      lifecycleHookId?: string(name='LifecycleHookId'),
      lifecycleHookName?: string(name='LifecycleHookName'),
      lifecycleTransition?: string(name='LifecycleTransition'),
      notificationMetadata?: string(name='NotificationMetadata'),
      notificationArn?: string(name='NotificationArn'),
      heartbeatTimeout?: int32(name='HeartbeatTimeout'),
      scalingGroupId?: string(name='ScalingGroupId'),
    }
  ](name='LifecycleHook')
  }(name='LifecycleHooks'),
}

model DescribeLifecycleHooksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLifecycleHooksResponseBody(name='body'),
}

async function describeLifecycleHooksWithOptions(request: DescribeLifecycleHooksRequest, runtime: Util.RuntimeOptions): DescribeLifecycleHooksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLifecycleHooks', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLifecycleHooks(request: DescribeLifecycleHooksRequest): DescribeLifecycleHooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLifecycleHooksWithOptions(request, runtime);
}

model DescribeLimitationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeLimitationResponseBody = {
  maxNumberOfLifecycleHooks?: int32(name='MaxNumberOfLifecycleHooks'),
  maxNumberOfScalingRules?: int32(name='MaxNumberOfScalingRules'),
  maxNumberOfScalingInstances?: int32(name='MaxNumberOfScalingInstances'),
  maxNumberOfScheduledTasks?: int32(name='MaxNumberOfScheduledTasks'),
  maxNumberOfVServerGroups?: int32(name='MaxNumberOfVServerGroups'),
  maxNumberOfLoadBalancers?: int32(name='MaxNumberOfLoadBalancers'),
  maxNumberOfMinSize?: int32(name='MaxNumberOfMinSize'),
  maxNumberOfScalingGroups?: int32(name='MaxNumberOfScalingGroups'),
  maxNumberOfNotificationConfigurations?: int32(name='MaxNumberOfNotificationConfigurations'),
  maxNumberOfMaxSize?: int32(name='MaxNumberOfMaxSize'),
  maxNumberOfDBInstances?: int32(name='MaxNumberOfDBInstances'),
  maxNumberOfScalingConfigurations?: int32(name='MaxNumberOfScalingConfigurations'),
}

model DescribeLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLimitationResponseBody(name='body'),
}

async function describeLimitationWithOptions(request: DescribeLimitationRequest, runtime: Util.RuntimeOptions): DescribeLimitationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLimitation', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLimitationWithOptions(request, runtime);
}

model DescribeNotificationConfigurationsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model DescribeNotificationConfigurationsResponseBody = {
  requestId?: string(name='RequestId'),
  notificationConfigurationModels?: {
    notificationConfigurationModel?: [ 
    {
      notificationArn?: string(name='NotificationArn'),
      notificationTypes?: {
        notificationType?: [ string ](name='NotificationType')
      }(name='NotificationTypes'),
      scalingGroupId?: string(name='ScalingGroupId'),
    }
  ](name='NotificationConfigurationModel')
  }(name='NotificationConfigurationModels'),
}

model DescribeNotificationConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNotificationConfigurationsResponseBody(name='body'),
}

async function describeNotificationConfigurationsWithOptions(request: DescribeNotificationConfigurationsRequest, runtime: Util.RuntimeOptions): DescribeNotificationConfigurationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNotificationConfigurations', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNotificationConfigurations(request: DescribeNotificationConfigurationsRequest): DescribeNotificationConfigurationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNotificationConfigurationsWithOptions(request, runtime);
}

model DescribeNotificationTypesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeNotificationTypesResponseBody = {
  requestId?: string(name='RequestId'),
  notificationTypes?: {
    notificationType?: [ string ](name='NotificationType')
  }(name='NotificationTypes'),
}

model DescribeNotificationTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNotificationTypesResponseBody(name='body'),
}

async function describeNotificationTypesWithOptions(request: DescribeNotificationTypesRequest, runtime: Util.RuntimeOptions): DescribeNotificationTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNotificationTypes', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNotificationTypes(request: DescribeNotificationTypesRequest): DescribeNotificationTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNotificationTypesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      vpcUnavailable?: boolean(name='VpcUnavailable'),
      classicUnavailable?: boolean(name='ClassicUnavailable'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeScalingActivitiesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  scalingGroupId?: string(name='ScalingGroupId'),
  statusCode?: string(name='StatusCode'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingActivityId?: [ string ](name='ScalingActivityId'),
}

model DescribeScalingActivitiesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  scalingActivities?: {
    scalingActivity?: [ 
    {
      progress?: int32(name='Progress'),
      attachedCapacity?: string(name='AttachedCapacity'),
      scalingInstanceNumber?: int32(name='ScalingInstanceNumber'),
      totalCapacity?: string(name='TotalCapacity'),
      autoCreatedCapacity?: string(name='AutoCreatedCapacity'),
      scalingGroupId?: string(name='ScalingGroupId'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      description?: string(name='Description'),
      statusCode?: string(name='StatusCode'),
      cause?: string(name='Cause'),
      scalingActivityId?: string(name='ScalingActivityId'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='ScalingActivity')
  }(name='ScalingActivities'),
}

model DescribeScalingActivitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingActivitiesResponseBody(name='body'),
}

async function describeScalingActivitiesWithOptions(request: DescribeScalingActivitiesRequest, runtime: Util.RuntimeOptions): DescribeScalingActivitiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScalingActivities', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScalingActivities(request: DescribeScalingActivitiesRequest): DescribeScalingActivitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScalingActivitiesWithOptions(request, runtime);
}

model DescribeScalingActivityDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DescribeScalingActivityDetailResponseBody = {
  scalingActivityId?: string(name='ScalingActivityId'),
  detail?: string(name='Detail'),
}

model DescribeScalingActivityDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingActivityDetailResponseBody(name='body'),
}

async function describeScalingActivityDetailWithOptions(request: DescribeScalingActivityDetailRequest, runtime: Util.RuntimeOptions): DescribeScalingActivityDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScalingActivityDetail', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScalingActivityDetail(request: DescribeScalingActivityDetailRequest): DescribeScalingActivityDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScalingActivityDetailWithOptions(request, runtime);
}

model DescribeScalingConfigurationsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  scalingGroupId?: string(name='ScalingGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingConfigurationId?: [ string ](name='ScalingConfigurationId'),
  scalingConfigurationName?: [ string ](name='ScalingConfigurationName'),
}

model DescribeScalingConfigurationsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  scalingConfigurations?: {
    scalingConfiguration?: [ 
    {
      privatePoolOptions: {
        id?: string(name='Id'),
        matchCriteria?: string(name='MatchCriteria'),
      }(name='PrivatePoolOptions'),
      creationTime?: string(name='CreationTime'),
      scalingConfigurationName?: string(name='ScalingConfigurationName'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      dataDisks?: {
        dataDisk?: [ 
        {
          performanceLevel?: string(name='PerformanceLevel'),
          description?: string(name='Description'),
          snapshotId?: string(name='SnapshotId'),
          device?: string(name='Device'),
          size?: int32(name='Size'),
          diskName?: string(name='DiskName'),
          autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
          category?: string(name='Category'),
          KMSKeyId?: string(name='KMSKeyId'),
          deleteWithInstance?: boolean(name='DeleteWithInstance'),
          encrypted?: string(name='Encrypted'),
        }
      ](name='DataDisk')
      }(name='DataDisks'),
      systemDiskAutoSnapshotPolicyId?: string(name='SystemDiskAutoSnapshotPolicyId'),
      spotStrategy?: string(name='SpotStrategy'),
      affinity?: string(name='Affinity'),
      spotDuration?: int32(name='SpotDuration'),
      instanceName?: string(name='InstanceName'),
      userData?: string(name='UserData'),
      spotPriceLimit?: {
        spotPriceModel?: [ 
        {
          priceLimit?: float(name='PriceLimit'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='SpotPriceModel')
      }(name='SpotPriceLimit'),
      imageId?: string(name='ImageId'),
      loadBalancerWeight?: int32(name='LoadBalancerWeight'),
      hostName?: string(name='HostName'),
      systemDiskName?: string(name='SystemDiskName'),
      instanceType?: string(name='InstanceType'),
      systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel'),
      imageName?: string(name='ImageName'),
      internetChargeType?: string(name='InternetChargeType'),
      zoneId?: string(name='ZoneId'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      creditSpecification?: string(name='CreditSpecification'),
      spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
      deploymentSetId?: string(name='DeploymentSetId'),
      systemDiskDescription?: string(name='SystemDiskDescription'),
      keyPairName?: string(name='KeyPairName'),
      securityGroupId?: string(name='SecurityGroupId'),
      scalingGroupId?: string(name='ScalingGroupId'),
      tenancy?: string(name='Tenancy'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      ipv6AddressCount?: int32(name='Ipv6AddressCount'),
      lifecycleState?: string(name='LifecycleState'),
      securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      instanceGeneration?: string(name='InstanceGeneration'),
      hpcClusterId?: string(name='HpcClusterId'),
      passwordInherit?: boolean(name='PasswordInherit'),
      memory?: int32(name='Memory'),
      imageFamily?: string(name='ImageFamily'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      weightedCapacities?: {
        weightedCapacity?: [ string ](name='WeightedCapacity')
      }(name='WeightedCapacities'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
      instanceDescription?: string(name='InstanceDescription'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      ioOptimized?: string(name='IoOptimized'),
      ramRoleName?: string(name='RamRoleName'),
      cpu?: int32(name='Cpu'),
      resourceGroupId?: string(name='ResourceGroupId'),
      schedulerOptions?: {
        managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
      }(name='SchedulerOptions'),
      instanceTypes?: {
        instanceType?: [ string ](name='InstanceType')
      }(name='InstanceTypes'),
    }
  ](name='ScalingConfiguration')
  }(name='ScalingConfigurations'),
}

model DescribeScalingConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingConfigurationsResponseBody(name='body'),
}

async function describeScalingConfigurationsWithOptions(request: DescribeScalingConfigurationsRequest, runtime: Util.RuntimeOptions): DescribeScalingConfigurationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScalingConfigurations', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScalingConfigurations(request: DescribeScalingConfigurationsRequest): DescribeScalingConfigurationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScalingConfigurationsWithOptions(request, runtime);
}

model DescribeScalingInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
  healthStatus?: string(name='HealthStatus'),
  lifecycleState?: string(name='LifecycleState'),
  creationType?: string(name='CreationType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: [ string ](name='InstanceId'),
}

model DescribeScalingInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  scalingInstances?: {
    scalingInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      loadBalancerWeight?: int32(name='LoadBalancerWeight'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      instanceId?: string(name='InstanceId'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion'),
      healthStatus?: string(name='HealthStatus'),
      spotStrategy?: string(name='SpotStrategy'),
      scalingGroupId?: string(name='ScalingGroupId'),
      warmupState?: string(name='WarmupState'),
      lifecycleState?: string(name='LifecycleState'),
      creationType?: string(name='CreationType'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      entrusted?: boolean(name='Entrusted'),
      weightedCapacity?: int32(name='WeightedCapacity'),
      createdTime?: string(name='CreatedTime'),
    }
  ](name='ScalingInstance')
  }(name='ScalingInstances'),
  totalSpotCount?: int32(name='TotalSpotCount'),
}

model DescribeScalingInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingInstancesResponseBody(name='body'),
}

async function describeScalingInstancesWithOptions(request: DescribeScalingInstancesRequest, runtime: Util.RuntimeOptions): DescribeScalingInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScalingInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScalingInstances(request: DescribeScalingInstancesRequest): DescribeScalingInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScalingInstancesWithOptions(request, runtime);
}

model DescribeScalingRulesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingRuleType?: string(name='ScalingRuleType'),
  showAlarmRules?: boolean(name='ShowAlarmRules'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingRuleId?: [ string ](name='ScalingRuleId'),
  scalingRuleName?: [ string ](name='ScalingRuleName'),
  scalingRuleAri?: [ string ](name='ScalingRuleAri'),
}

model DescribeScalingRulesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  scalingRules?: {
    scalingRule?: [ 
    {
      metricName?: string(name='MetricName'),
      initialMaxSize?: int32(name='InitialMaxSize'),
      alarms?: {
        alarm?: [ 
        {
          alarmTaskId?: string(name='AlarmTaskId'),
          comparisonOperator?: string(name='ComparisonOperator'),
          metricName?: string(name='MetricName'),
          evaluationCount?: int32(name='EvaluationCount'),
          alarmTaskName?: string(name='AlarmTaskName'),
          dimensions?: {
            dimension?: [ 
            {
              dimensionKey?: string(name='DimensionKey'),
              dimensionValue?: string(name='DimensionValue'),
            }
          ](name='Dimension')
          }(name='Dimensions'),
          metricType?: string(name='MetricType'),
          threshold?: float(name='Threshold'),
          statistics?: string(name='Statistics'),
        }
      ](name='Alarm')
      }(name='Alarms'),
      scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount'),
      predictiveScalingMode?: string(name='PredictiveScalingMode'),
      minSize?: int32(name='MinSize'),
      predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime'),
      scalingGroupId?: string(name='ScalingGroupId'),
      predictiveValueBehavior?: string(name='PredictiveValueBehavior'),
      cooldown?: int32(name='Cooldown'),
      scalingRuleType?: string(name='ScalingRuleType'),
      predictiveValueBuffer?: int32(name='PredictiveValueBuffer'),
      scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount'),
      disableScaleIn?: boolean(name='DisableScaleIn'),
      scalingRuleName?: string(name='ScalingRuleName'),
      adjustmentType?: string(name='AdjustmentType'),
      estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup'),
      minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude'),
      scalingRuleAri?: string(name='ScalingRuleAri'),
      stepAdjustments?: {
        stepAdjustment?: [ 
        {
          metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
          scalingAdjustment?: int32(name='ScalingAdjustment'),
          metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
        }
      ](name='StepAdjustment')
      }(name='StepAdjustments'),
      targetValue?: float(name='TargetValue'),
      maxSize?: int32(name='MaxSize'),
      adjustmentValue?: int32(name='AdjustmentValue'),
      scalingRuleId?: string(name='ScalingRuleId'),
    }
  ](name='ScalingRule')
  }(name='ScalingRules'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeScalingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingRulesResponseBody(name='body'),
}

async function describeScalingRulesWithOptions(request: DescribeScalingRulesRequest, runtime: Util.RuntimeOptions): DescribeScalingRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScalingRules', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScalingRules(request: DescribeScalingRulesRequest): DescribeScalingRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScalingRulesWithOptions(request, runtime);
}

model DescribeScheduledTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scheduledAction?: [ string ](name='ScheduledAction'),
  scheduledTaskId?: [ string ](name='ScheduledTaskId'),
  scheduledTaskName?: [ string ](name='ScheduledTaskName'),
}

model DescribeScheduledTasksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  scheduledTasks?: {
    scheduledTask?: [ 
    {
      taskEnabled?: boolean(name='TaskEnabled'),
      recurrenceValue?: string(name='RecurrenceValue'),
      maxValue?: int32(name='MaxValue'),
      recurrenceType?: string(name='RecurrenceType'),
      scheduledTaskName?: string(name='ScheduledTaskName'),
      recurrenceEndTime?: string(name='RecurrenceEndTime'),
      scheduledTaskId?: string(name='ScheduledTaskId'),
      desiredCapacity?: int32(name='DesiredCapacity'),
      minValue?: int32(name='MinValue'),
      scalingGroupId?: string(name='ScalingGroupId'),
      launchExpirationTime?: int32(name='LaunchExpirationTime'),
      description?: string(name='Description'),
      scheduledAction?: string(name='ScheduledAction'),
      launchTime?: string(name='LaunchTime'),
    }
  ](name='ScheduledTask')
  }(name='ScheduledTasks'),
}

model DescribeScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduledTasksResponseBody(name='body'),
}

async function describeScheduledTasksWithOptions(request: DescribeScheduledTasksRequest, runtime: Util.RuntimeOptions): DescribeScheduledTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScheduledTasks', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScheduledTasks(request: DescribeScheduledTasksRequest): DescribeScheduledTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduledTasksWithOptions(request, runtime);
}

model DetachDBInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  forceDetach?: boolean(name='ForceDetach'),
  clientToken?: string(name='ClientToken'),
  DBInstance?: [ string ](name='DBInstance'),
}

model DetachDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDBInstancesResponseBody(name='body'),
}

async function detachDBInstancesWithOptions(request: DetachDBInstancesRequest, runtime: Util.RuntimeOptions): DetachDBInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachDBInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachDBInstances(request: DetachDBInstancesRequest): DetachDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDBInstancesWithOptions(request, runtime);
}

model DetachInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  decreaseDesiredCapacity?: boolean(name='DecreaseDesiredCapacity'),
  detachOption?: string(name='DetachOption'),
  instanceId?: [ string ](name='InstanceId'),
}

model DetachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DetachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DetachInstancesResponseBody(name='body'),
}

async function detachInstancesWithOptions(request: DetachInstancesRequest, runtime: Util.RuntimeOptions): DetachInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachInstances(request: DetachInstancesRequest): DetachInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachInstancesWithOptions(request, runtime);
}

model DetachLoadBalancersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  forceDetach?: boolean(name='ForceDetach'),
  clientToken?: string(name='ClientToken'),
  loadBalancer?: [ string ](name='LoadBalancer'),
}

model DetachLoadBalancersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: DetachLoadBalancersResponseBody(name='body'),
}

async function detachLoadBalancersWithOptions(request: DetachLoadBalancersRequest, runtime: Util.RuntimeOptions): DetachLoadBalancersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachLoadBalancers', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachLoadBalancers(request: DetachLoadBalancersRequest): DetachLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachLoadBalancersWithOptions(request, runtime);
}

model DetachVServerGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  forceDetach?: boolean(name='ForceDetach'),
  VServerGroup?: [ 
    {
      VServerGroupAttribute?: [ 
        {
          VServerGroupId?: string(name='VServerGroupId'),
          port?: int32(name='Port'),
        }
      ](name='VServerGroupAttribute'),
      loadBalancerId?: string(name='LoadBalancerId'),
    }
  ](name='VServerGroup'),
}

model DetachVServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachVServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DetachVServerGroupsResponseBody(name='body'),
}

async function detachVServerGroupsWithOptions(request: DetachVServerGroupsRequest, runtime: Util.RuntimeOptions): DetachVServerGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachVServerGroups', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachVServerGroups(request: DetachVServerGroupsRequest): DetachVServerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachVServerGroupsWithOptions(request, runtime);
}

model DisableAlarmRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model DisableAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAlarmResponseBody(name='body'),
}

async function disableAlarmWithOptions(request: DisableAlarmRequest, runtime: Util.RuntimeOptions): DisableAlarmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableAlarm', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableAlarm(request: DisableAlarmRequest): DisableAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableAlarmWithOptions(request, runtime);
}

model DisableScalingGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DisableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DisableScalingGroupResponseBody(name='body'),
}

async function disableScalingGroupWithOptions(request: DisableScalingGroupRequest, runtime: Util.RuntimeOptions): DisableScalingGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableScalingGroup', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableScalingGroup(request: DisableScalingGroupRequest): DisableScalingGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableScalingGroupWithOptions(request, runtime);
}

model EnableAlarmRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model EnableAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAlarmResponseBody(name='body'),
}

async function enableAlarmWithOptions(request: EnableAlarmRequest, runtime: Util.RuntimeOptions): EnableAlarmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableAlarm', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableAlarm(request: EnableAlarmRequest): EnableAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAlarmWithOptions(request, runtime);
}

model EnableScalingGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId'),
  ownerAccount?: string(name='OwnerAccount'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion'),
  instanceId?: [ string ](name='InstanceId'),
  loadBalancerWeight?: [ integer ](name='LoadBalancerWeight'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride'),
}

model EnableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: EnableScalingGroupResponseBody(name='body'),
}

async function enableScalingGroupWithOptions(request: EnableScalingGroupRequest, runtime: Util.RuntimeOptions): EnableScalingGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableScalingGroup', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableScalingGroup(request: EnableScalingGroupRequest): EnableScalingGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableScalingGroupWithOptions(request, runtime);
}

model EnterStandbyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: [ string ](name='InstanceId'),
}

model EnterStandbyResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnterStandbyResponse = {
  headers: map[string]string(name='headers'),
  body: EnterStandbyResponseBody(name='body'),
}

async function enterStandbyWithOptions(request: EnterStandbyRequest, runtime: Util.RuntimeOptions): EnterStandbyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnterStandby', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enterStandby(request: EnterStandbyRequest): EnterStandbyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enterStandbyWithOptions(request, runtime);
}

model ExecuteScalingRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingRuleAri?: string(name='ScalingRuleAri'),
  clientToken?: string(name='ClientToken'),
  breachThreshold?: float(name='BreachThreshold'),
  metricValue?: float(name='MetricValue'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ExecuteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model ExecuteScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteScalingRuleResponseBody(name='body'),
}

async function executeScalingRuleWithOptions(request: ExecuteScalingRuleRequest, runtime: Util.RuntimeOptions): ExecuteScalingRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteScalingRule', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeScalingRule(request: ExecuteScalingRuleRequest): ExecuteScalingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeScalingRuleWithOptions(request, runtime);
}

model ExitStandbyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: [ string ](name='InstanceId'),
}

model ExitStandbyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExitStandbyResponse = {
  headers: map[string]string(name='headers'),
  body: ExitStandbyResponseBody(name='body'),
}

async function exitStandbyWithOptions(request: ExitStandbyRequest, runtime: Util.RuntimeOptions): ExitStandbyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExitStandby', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exitStandby(request: ExitStandbyRequest): ExitStandbyResponse {
  var runtime = new Util.RuntimeOptions{};
  return exitStandbyWithOptions(request, runtime);
}

model ListTagKeysRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  keys?: {
    key?: [ string ](name='Key')
  }(name='Keys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  key?: string(name='Key'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  values?: {
    value?: [ string ](name='Value')
  }(name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagValues', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model ModifyAlarmRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  alarmTaskId?: string(name='AlarmTaskId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  metricName?: string(name='MetricName'),
  metricType?: string(name='MetricType'),
  period?: int32(name='Period'),
  statistics?: string(name='Statistics'),
  threshold?: float(name='Threshold'),
  comparisonOperator?: string(name='ComparisonOperator'),
  evaluationCount?: int32(name='EvaluationCount'),
  groupId?: int32(name='GroupId'),
  effective?: string(name='Effective'),
  alarmAction?: [ string ](name='AlarmAction'),
  dimension?: [ 
    {
      dimensionKey?: string(name='DimensionKey'),
      dimensionValue?: string(name='DimensionValue'),
    }
  ](name='Dimension'),
}

model ModifyAlarmResponseBody = {
  requestId?: string(name='RequestId'),
  alarmTaskId?: string(name='AlarmTaskId'),
}

model ModifyAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAlarmResponseBody(name='body'),
}

async function modifyAlarmWithOptions(request: ModifyAlarmRequest, runtime: Util.RuntimeOptions): ModifyAlarmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAlarm', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAlarm(request: ModifyAlarmRequest): ModifyAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAlarmWithOptions(request, runtime);
}

model ModifyLifecycleHookRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  lifecycleHookId?: string(name='LifecycleHookId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  lifecycleHookName?: string(name='LifecycleHookName'),
  defaultResult?: string(name='DefaultResult'),
  heartbeatTimeout?: int32(name='HeartbeatTimeout'),
  lifecycleTransition?: string(name='LifecycleTransition'),
  notificationMetadata?: string(name='NotificationMetadata'),
  notificationArn?: string(name='NotificationArn'),
}

model ModifyLifecycleHookResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLifecycleHookResponseBody(name='body'),
}

async function modifyLifecycleHookWithOptions(request: ModifyLifecycleHookRequest, runtime: Util.RuntimeOptions): ModifyLifecycleHookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLifecycleHook', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLifecycleHook(request: ModifyLifecycleHookRequest): ModifyLifecycleHookResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLifecycleHookWithOptions(request, runtime);
}

model ModifyNotificationConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  notificationArn?: string(name='NotificationArn'),
  notificationType?: [ string ](name='NotificationType'),
}

model ModifyNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNotificationConfigurationResponseBody(name='body'),
}

async function modifyNotificationConfigurationWithOptions(request: ModifyNotificationConfigurationRequest, runtime: Util.RuntimeOptions): ModifyNotificationConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNotificationConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNotificationConfiguration(request: ModifyNotificationConfigurationRequest): ModifyNotificationConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNotificationConfigurationWithOptions(request, runtime);
}

model ModifyScalingConfigurationRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
  ioOptimized?: string(name='IoOptimized'),
  spotStrategy?: string(name='SpotStrategy'),
  scalingConfigurationName?: string(name='ScalingConfigurationName'),
  instanceName?: string(name='InstanceName'),
  hostName?: string(name='HostName'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  cpu?: int32(name='Cpu'),
  memory?: int32(name='Memory'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  passwordInherit?: boolean(name='PasswordInherit'),
  tags?: string(name='Tags'),
  deploymentSetId?: string(name='DeploymentSetId'),
  securityGroupId?: string(name='SecurityGroupId'),
  override?: boolean(name='Override'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  instanceDescription?: string(name='InstanceDescription'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  creditSpecification?: string(name='CreditSpecification'),
  imageFamily?: string(name='ImageFamily'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  schedulerOptions?: map[string]any(name='SchedulerOptions'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      category?: string(name='Category'),
      KMSKeyId?: string(name='KMSKeyId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  spotPriceLimit?: [ 
    {
      priceLimit?: float(name='PriceLimit'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='SpotPriceLimit'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model ModifyScalingConfigurationShrinkRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
  ioOptimized?: string(name='IoOptimized'),
  spotStrategy?: string(name='SpotStrategy'),
  scalingConfigurationName?: string(name='ScalingConfigurationName'),
  instanceName?: string(name='InstanceName'),
  hostName?: string(name='HostName'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  cpu?: int32(name='Cpu'),
  memory?: int32(name='Memory'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  passwordInherit?: boolean(name='PasswordInherit'),
  tags?: string(name='Tags'),
  deploymentSetId?: string(name='DeploymentSetId'),
  securityGroupId?: string(name='SecurityGroupId'),
  override?: boolean(name='Override'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  instanceDescription?: string(name='InstanceDescription'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  creditSpecification?: string(name='CreditSpecification'),
  imageFamily?: string(name='ImageFamily'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  schedulerOptionsShrink?: string(name='SchedulerOptions'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      category?: string(name='Category'),
      KMSKeyId?: string(name='KMSKeyId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  spotPriceLimit?: [ 
    {
      priceLimit?: float(name='PriceLimit'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='SpotPriceLimit'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model ModifyScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingConfigurationResponseBody(name='body'),
}

async function modifyScalingConfigurationWithOptions(tmpReq: ModifyScalingConfigurationRequest, runtime: Util.RuntimeOptions): ModifyScalingConfigurationResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyScalingConfigurationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.schedulerOptions)) {
    request.schedulerOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedulerOptions, 'SchedulerOptions', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScalingConfiguration', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScalingConfiguration(request: ModifyScalingConfigurationRequest): ModifyScalingConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScalingConfigurationWithOptions(request, runtime);
}

model ModifyScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  scalingGroupName?: string(name='ScalingGroupName'),
  minSize?: int32(name='MinSize'),
  maxSize?: int32(name='MaxSize'),
  defaultCooldown?: int32(name='DefaultCooldown'),
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId'),
  ownerAccount?: string(name='OwnerAccount'),
  healthCheckType?: string(name='HealthCheckType'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion'),
  onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity'),
  onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
  compensateWithOnDemand?: boolean(name='CompensateWithOnDemand'),
  spotInstancePools?: int32(name='SpotInstancePools'),
  desiredCapacity?: int32(name='DesiredCapacity'),
  groupDeletionProtection?: boolean(name='GroupDeletionProtection'),
  scaleOutAmountCheck?: boolean(name='ScaleOutAmountCheck'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride'),
}

model ModifyScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingGroupResponseBody(name='body'),
}

async function modifyScalingGroupWithOptions(request: ModifyScalingGroupRequest, runtime: Util.RuntimeOptions): ModifyScalingGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScalingGroup', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScalingGroup(request: ModifyScalingGroupRequest): ModifyScalingGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScalingGroupWithOptions(request, runtime);
}

model ModifyScalingRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingRuleId?: string(name='ScalingRuleId'),
  scalingRuleName?: string(name='ScalingRuleName'),
  cooldown?: int32(name='Cooldown'),
  minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude'),
  adjustmentType?: string(name='AdjustmentType'),
  adjustmentValue?: int32(name='AdjustmentValue'),
  estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup'),
  metricName?: string(name='MetricName'),
  targetValue?: float(name='TargetValue'),
  disableScaleIn?: boolean(name='DisableScaleIn'),
  scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount'),
  scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount'),
  ownerAccount?: string(name='OwnerAccount'),
  predictiveScalingMode?: string(name='PredictiveScalingMode'),
  predictiveValueBehavior?: string(name='PredictiveValueBehavior'),
  predictiveValueBuffer?: int32(name='PredictiveValueBuffer'),
  predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime'),
  initialMaxSize?: int32(name='InitialMaxSize'),
  stepAdjustment?: [ 
    {
      metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
      scalingAdjustment?: int32(name='ScalingAdjustment'),
      metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
    }
  ](name='StepAdjustment'),
}

model ModifyScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingRuleResponseBody(name='body'),
}

async function modifyScalingRuleWithOptions(request: ModifyScalingRuleRequest, runtime: Util.RuntimeOptions): ModifyScalingRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScalingRule', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScalingRule(request: ModifyScalingRuleRequest): ModifyScalingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScalingRuleWithOptions(request, runtime);
}

model ModifyScheduledTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scheduledTaskId?: string(name='ScheduledTaskId'),
  scheduledTaskName?: string(name='ScheduledTaskName'),
  description?: string(name='Description'),
  scheduledAction?: string(name='ScheduledAction'),
  recurrenceEndTime?: string(name='RecurrenceEndTime'),
  launchTime?: string(name='LaunchTime'),
  recurrenceType?: string(name='RecurrenceType'),
  recurrenceValue?: string(name='RecurrenceValue'),
  taskEnabled?: boolean(name='TaskEnabled'),
  launchExpirationTime?: int32(name='LaunchExpirationTime'),
  ownerAccount?: string(name='OwnerAccount'),
  minValue?: int32(name='MinValue'),
  maxValue?: int32(name='MaxValue'),
  desiredCapacity?: int32(name='DesiredCapacity'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model ModifyScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTaskWithOptions(request: ModifyScheduledTaskRequest, runtime: Util.RuntimeOptions): ModifyScheduledTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScheduledTask', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScheduledTask(request: ModifyScheduledTaskRequest): ModifyScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScheduledTaskWithOptions(request, runtime);
}

model RebalanceInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model RebalanceInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model RebalanceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebalanceInstancesResponseBody(name='body'),
}

async function rebalanceInstancesWithOptions(request: RebalanceInstancesRequest, runtime: Util.RuntimeOptions): RebalanceInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebalanceInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebalanceInstances(request: RebalanceInstancesRequest): RebalanceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebalanceInstancesWithOptions(request, runtime);
}

model RecordLifecycleActionHeartbeatRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  lifecycleHookId?: string(name='lifecycleHookId'),
  lifecycleActionToken?: string(name='lifecycleActionToken'),
  heartbeatTimeout?: int32(name='heartbeatTimeout'),
}

model RecordLifecycleActionHeartbeatResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecordLifecycleActionHeartbeatResponse = {
  headers: map[string]string(name='headers'),
  body: RecordLifecycleActionHeartbeatResponseBody(name='body'),
}

async function recordLifecycleActionHeartbeatWithOptions(request: RecordLifecycleActionHeartbeatRequest, runtime: Util.RuntimeOptions): RecordLifecycleActionHeartbeatResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecordLifecycleActionHeartbeat', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recordLifecycleActionHeartbeat(request: RecordLifecycleActionHeartbeatRequest): RecordLifecycleActionHeartbeatResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordLifecycleActionHeartbeatWithOptions(request, runtime);
}

model RemoveInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scalingGroupId?: string(name='ScalingGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  removePolicy?: string(name='RemovePolicy'),
  decreaseDesiredCapacity?: boolean(name='DecreaseDesiredCapacity'),
  instanceId?: [ string ](name='InstanceId'),
}

model RemoveInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model RemoveInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInstancesResponseBody(name='body'),
}

async function removeInstancesWithOptions(request: RemoveInstancesRequest, runtime: Util.RuntimeOptions): RemoveInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveInstances', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeInstances(request: RemoveInstancesRequest): RemoveInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInstancesWithOptions(request, runtime);
}

model ResumeProcessesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  process?: [ string ](name='Process'),
}

model ResumeProcessesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeProcessesResponseBody(name='body'),
}

async function resumeProcessesWithOptions(request: ResumeProcessesRequest, runtime: Util.RuntimeOptions): ResumeProcessesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeProcesses', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeProcesses(request: ResumeProcessesRequest): ResumeProcessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeProcessesWithOptions(request, runtime);
}

model SetGroupDeletionProtectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  groupDeletionProtection?: boolean(name='GroupDeletionProtection'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model SetGroupDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGroupDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetGroupDeletionProtectionResponseBody(name='body'),
}

async function setGroupDeletionProtectionWithOptions(request: SetGroupDeletionProtectionRequest, runtime: Util.RuntimeOptions): SetGroupDeletionProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetGroupDeletionProtection', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setGroupDeletionProtection(request: SetGroupDeletionProtectionRequest): SetGroupDeletionProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGroupDeletionProtectionWithOptions(request, runtime);
}

model SetInstanceHealthRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  instanceId?: string(name='InstanceId'),
  healthStatus?: string(name='HealthStatus'),
}

model SetInstanceHealthResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstanceHealthResponseBody(name='body'),
}

async function setInstanceHealthWithOptions(request: SetInstanceHealthRequest, runtime: Util.RuntimeOptions): SetInstanceHealthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetInstanceHealth', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setInstanceHealth(request: SetInstanceHealthRequest): SetInstanceHealthResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceHealthWithOptions(request, runtime);
}

model SetInstancesProtectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  protectedFromScaleIn?: boolean(name='ProtectedFromScaleIn'),
  instanceId?: [ string ](name='InstanceId'),
}

model SetInstancesProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstancesProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstancesProtectionResponseBody(name='body'),
}

async function setInstancesProtectionWithOptions(request: SetInstancesProtectionRequest, runtime: Util.RuntimeOptions): SetInstancesProtectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetInstancesProtection', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setInstancesProtection(request: SetInstancesProtectionRequest): SetInstancesProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstancesProtectionWithOptions(request, runtime);
}

model SuspendProcessesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  scalingGroupId?: string(name='ScalingGroupId'),
  clientToken?: string(name='ClientToken'),
  process?: [ string ](name='Process'),
}

model SuspendProcessesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SuspendProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendProcessesResponseBody(name='body'),
}

async function suspendProcessesWithOptions(request: SuspendProcessesRequest, runtime: Util.RuntimeOptions): SuspendProcessesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendProcesses', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendProcesses(request: SuspendProcessesRequest): SuspendProcessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendProcessesWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model VerifyAuthenticationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uid?: long(name='Uid'),
  onlyCheck?: boolean(name='OnlyCheck'),
}

model VerifyAuthenticationResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyAuthenticationResponseBody(name='body'),
}

async function verifyAuthenticationWithOptions(request: VerifyAuthenticationRequest, runtime: Util.RuntimeOptions): VerifyAuthenticationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyAuthentication', '2014-08-28', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyAuthentication(request: VerifyAuthenticationRequest): VerifyAuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyAuthenticationWithOptions(request, runtime);
}

model VerifyUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model VerifyUserResponse = {
  headers: map[string]string(name='headers'),
}

async function verifyUserWithOptions(request: VerifyUserRequest, runtime: Util.RuntimeOptions): VerifyUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyUser', '2014-08-28', 'HTTPS', 'POST', 'AK', 'none', req, runtime);
}

async function verifyUser(request: VerifyUserRequest): VerifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyUserWithOptions(request, runtime);
}

