/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ess';
  @version = '2014-08-28';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ess.aliyuncs.com',
    cn-beijing = 'ess.aliyuncs.com',
    cn-hangzhou = 'ess.aliyuncs.com',
    cn-shanghai = 'ess.aliyuncs.com',
    cn-shenzhen = 'ess.aliyuncs.com',
    cn-hongkong = 'ess.aliyuncs.com',
    ap-southeast-1 = 'ess.aliyuncs.com',
    us-east-1 = 'ess.aliyuncs.com',
    us-west-1 = 'ess.aliyuncs.com',
    cn-shanghai-finance-1 = 'ess.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ess.aliyuncs.com',
    cn-north-2-gov-1 = 'ess.aliyuncs.com',
    ap-northeast-2-pop = 'ess.aliyuncs.com',
    cn-beijing-finance-1 = 'ess.aliyuncs.com',
    cn-beijing-finance-pop = 'ess.aliyuncs.com',
    cn-beijing-gov-1 = 'ess.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ess.aliyuncs.com',
    cn-edge-1 = 'ess.aliyuncs.com',
    cn-fujian = 'ess.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ess.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ess.aliyuncs.com',
    cn-hangzhou-finance = 'ess.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ess.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ess.aliyuncs.com',
    cn-hangzhou-test-306 = 'ess.aliyuncs.com',
    cn-hongkong-finance-pop = 'ess.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ess.aliyuncs.com',
    cn-qingdao-nebula = 'ess.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ess.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ess.aliyuncs.com',
    cn-shanghai-inner = 'ess.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ess.aliyuncs.com',
    cn-shenzhen-inner = 'ess.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ess.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ess.aliyuncs.com',
    cn-wuhan = 'ess.aliyuncs.com',
    cn-yushanfang = 'ess.aliyuncs.com',
    cn-zhangbei = 'ess.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ess.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ess.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ess.aliyuncs.com',
    eu-west-1-oxs = 'ess.aliyuncs.com',
    rus-west-1-pop = 'ess.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachAlbServerGroupsRequest {
  albServerGroup: [ 
    {
      albServerGroupId: string(name='AlbServerGroupId'),
      port: int32(name='Port'),
      weight: int32(name='Weight'),
    }
  ](name='AlbServerGroup', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  forceAttach?: boolean(name='ForceAttach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model AttachAlbServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model AttachAlbServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AttachAlbServerGroupsResponseBody(name='body'),
}

async function attachAlbServerGroups(request: AttachAlbServerGroupsRequest): AttachAlbServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachAlbServerGroups', 'POST', '/', 'json', false, 'json', request);
}

model AttachDBInstancesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstance: [ string ](name='DBInstance', position='Query'),
  forceAttach?: boolean(name='ForceAttach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model AttachDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDBInstancesResponseBody(name='body'),
}

async function attachDBInstances(request: AttachDBInstancesRequest): AttachDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model AttachInstancesRequest {
  entrusted?: boolean(name='Entrusted', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  lifecycleHook?: boolean(name='LifecycleHook', position='Query'),
  loadBalancerWeight?: [ int32 ](name='LoadBalancerWeight', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model AttachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstances(request: AttachInstancesRequest): AttachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachInstances', 'POST', '/', 'json', false, 'json', request);
}

model AttachLoadBalancersRequest {
  async?: boolean(name='Async', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  forceAttach?: boolean(name='ForceAttach', position='Query'),
  loadBalancer: [ string ](name='LoadBalancer', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model AttachLoadBalancersResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model AttachLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: AttachLoadBalancersResponseBody(name='body'),
}

async function attachLoadBalancers(request: AttachLoadBalancersRequest): AttachLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachLoadBalancers', 'POST', '/', 'json', false, 'json', request);
}

model AttachVServerGroupsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  forceAttach?: boolean(name='ForceAttach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  VServerGroup: [ 
    {
      loadBalancerId?: string(name='LoadBalancerId'),
      VServerGroupAttribute?: [ 
        {
          port?: int32(name='Port'),
          VServerGroupId?: string(name='VServerGroupId'),
          weight?: int32(name='Weight'),
        }
      ](name='VServerGroupAttribute'),
    }
  ](name='VServerGroup', position='Query'),
}

model AttachVServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachVServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AttachVServerGroupsResponseBody(name='body'),
}

async function attachVServerGroups(request: AttachVServerGroupsRequest): AttachVServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVServerGroups', 'POST', '/', 'json', false, 'json', request);
}

model CompleteLifecycleActionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  lifecycleActionResult?: string(name='LifecycleActionResult', position='Query'),
  lifecycleActionToken: string(name='LifecycleActionToken', position='Query'),
  lifecycleHookId: string(name='LifecycleHookId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model CompleteLifecycleActionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CompleteLifecycleActionResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteLifecycleActionResponseBody(name='body'),
}

async function completeLifecycleAction(request: CompleteLifecycleActionRequest): CompleteLifecycleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompleteLifecycleAction', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlarmRequest {
  alarmAction?: [ string ](name='AlarmAction', position='Query'),
  comparisonOperator?: string(name='ComparisonOperator', position='Query'),
  description?: string(name='Description', position='Query'),
  dimension?: [ 
    {
      dimensionKey?: string(name='DimensionKey'),
      dimensionValue?: string(name='DimensionValue'),
    }
  ](name='Dimension', position='Query'),
  effective?: string(name='Effective', position='Query'),
  evaluationCount?: int32(name='EvaluationCount', position='Query'),
  groupId?: int32(name='GroupId', position='Query'),
  metricName: string(name='MetricName', position='Query'),
  metricType?: string(name='MetricType', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  statistics?: string(name='Statistics', position='Query'),
  threshold: float(name='Threshold', position='Query'),
}

model CreateAlarmResponseBody = {
  alarmTaskId?: string(name='AlarmTaskId'),
  requestId?: string(name='RequestId'),
}

model CreateAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlarmResponseBody(name='body'),
}

async function createAlarm(request: CreateAlarmRequest): CreateAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlarm', 'POST', '/', 'json', false, 'json', request);
}

model CreateLifecycleHookRequest {
  defaultResult?: string(name='DefaultResult', position='Query'),
  heartbeatTimeout?: int32(name='HeartbeatTimeout', position='Query'),
  lifecycleHookName?: string(name='LifecycleHookName', position='Query'),
  lifecycleTransition: string(name='LifecycleTransition', position='Query'),
  notificationArn?: string(name='NotificationArn', position='Query'),
  notificationMetadata?: string(name='NotificationMetadata', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model CreateLifecycleHookResponseBody = {
  lifecycleHookId?: string(name='LifecycleHookId'),
  requestId?: string(name='RequestId'),
}

model CreateLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLifecycleHookResponseBody(name='body'),
}

async function createLifecycleHook(request: CreateLifecycleHookRequest): CreateLifecycleHookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLifecycleHook', 'POST', '/', 'json', false, 'json', request);
}

model CreateNotificationConfigurationRequest {
  notificationArn: string(name='NotificationArn', position='Query'),
  notificationType: [ string ](name='NotificationType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model CreateNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNotificationConfigurationResponseBody(name='body'),
}

async function createNotificationConfiguration(request: CreateNotificationConfigurationRequest): CreateNotificationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNotificationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingConfigurationRequest {
  privatePoolOptions?: {
    id?: string(name='Id', position=''),
    matchCriteria?: string(name='MatchCriteria', position=''),
  }(name='PrivatePoolOptions'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', position=''),
    category?: string(name='Category', position=''),
    description?: string(name='Description', position=''),
    diskName?: string(name='DiskName', position=''),
    performanceLevel?: string(name='PerformanceLevel', position=''),
    size?: int32(name='Size', position=''),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  cpu?: int32(name='Cpu', position='Query'),
  creditSpecification?: string(name='CreditSpecification', position='Query'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      categories?: [ string ](name='Categories'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      encrypted?: string(name='Encrypted'),
      KMSKeyId?: string(name='KMSKeyId'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      snapshotId?: string(name='SnapshotId'),
    }
  ](name='DataDisk', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  hpcClusterId?: string(name='HpcClusterId', position='Query'),
  imageFamily?: string(name='ImageFamily', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceDescription?: string(name='InstanceDescription', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instancePatternInfo?: [ 
    {
      cores?: int32(name='Cores'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
      maxPrice?: float(name='MaxPrice'),
      memory?: float(name='Memory'),
    }
  ](name='InstancePatternInfo', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  ioOptimized?: string(name='IoOptimized', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight', position='Query'),
  memory?: int32(name='Memory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', position='Query'),
  ramRoleName?: string(name='RamRoleName', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingConfigurationName?: string(name='ScalingConfigurationName', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  schedulerOptions?: map[string]any(name='SchedulerOptions', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', position='Query'),
  spotDuration?: int32(name='SpotDuration', position='Query'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', position='Query'),
  spotPriceLimit?: [ 
    {
      instanceType?: string(name='InstanceType'),
      priceLimit?: float(name='PriceLimit'),
    }
  ](name='SpotPriceLimit', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  systemDiskCategories?: [ string ](name='SystemDiskCategories', position='Query'),
  tags?: string(name='Tags', position='Query'),
  tenancy?: string(name='Tenancy', position='Query'),
  userData?: string(name='UserData', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
  scalingConfigurationId?: string(name='ScalingConfigurationId'),
}

model CreateScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingConfigurationResponseBody(name='body'),
}

async function createScalingConfiguration(request: CreateScalingConfigurationRequest): CreateScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy'),
  albServerGroup?: [ 
    {
      albServerGroupId?: string(name='AlbServerGroupId'),
      port?: int32(name='Port'),
      weight?: int32(name='Weight'),
    }
  ](name='AlbServerGroup', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  compensateWithOnDemand?: boolean(name='CompensateWithOnDemand', position='Query'),
  containerGroupId?: string(name='ContainerGroupId', position='Query'),
  DBInstanceIds?: string(name='DBInstanceIds', position='Query'),
  defaultCooldown?: int32(name='DefaultCooldown', position='Query'),
  desiredCapacity?: int32(name='DesiredCapacity', position='Query'),
  groupDeletionProtection?: boolean(name='GroupDeletionProtection', position='Query'),
  groupType?: string(name='GroupType', position='Query'),
  healthCheckType?: string(name='HealthCheckType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', position='Query'),
  lifecycleHook?: [ 
    {
      defaultResult?: string(name='DefaultResult'),
      heartbeatTimeout?: int32(name='HeartbeatTimeout'),
      lifecycleHookName?: string(name='LifecycleHookName'),
      lifecycleTransition?: string(name='LifecycleTransition'),
      notificationArn?: string(name='NotificationArn'),
      notificationMetadata?: string(name='NotificationMetadata'),
    }
  ](name='LifecycleHook', position='Query'),
  loadBalancerIds?: string(name='LoadBalancerIds', position='Query'),
  maxSize: int32(name='MaxSize', position='Query'),
  minSize: int32(name='MinSize', position='Query'),
  multiAZPolicy?: string(name='MultiAZPolicy', position='Query'),
  onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity', position='Query'),
  onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupName?: string(name='ScalingGroupName', position='Query'),
  scalingPolicy?: string(name='ScalingPolicy', position='Query'),
  spotInstancePools?: int32(name='SpotInstancePools', position='Query'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  VServerGroup?: [ 
    {
      loadBalancerId?: string(name='LoadBalancerId'),
      VServerGroupAttribute?: [ 
        {
          port?: int32(name='Port'),
          VServerGroupId?: string(name='VServerGroupId'),
          weight?: int32(name='Weight'),
        }
      ](name='VServerGroupAttribute'),
    }
  ](name='VServerGroup', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', position='Query'),
}

model CreateScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
  scalingGroupId?: string(name='ScalingGroupId'),
}

model CreateScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingGroupResponseBody(name='body'),
}

async function createScalingGroup(request: CreateScalingGroupRequest): CreateScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateScalingRuleRequest {
  adjustmentType?: string(name='AdjustmentType', position='Query'),
  adjustmentValue?: int32(name='AdjustmentValue', position='Query'),
  cooldown?: int32(name='Cooldown', position='Query'),
  disableScaleIn?: boolean(name='DisableScaleIn', position='Query'),
  estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup', position='Query'),
  initialMaxSize?: int32(name='InitialMaxSize', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  predictiveScalingMode?: string(name='PredictiveScalingMode', position='Query'),
  predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime', position='Query'),
  predictiveValueBehavior?: string(name='PredictiveValueBehavior', position='Query'),
  predictiveValueBuffer?: int32(name='PredictiveValueBuffer', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount', position='Query'),
  scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  scalingRuleName?: string(name='ScalingRuleName', position='Query'),
  scalingRuleType?: string(name='ScalingRuleType', position='Query'),
  stepAdjustment?: [ 
    {
      metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
      metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
      scalingAdjustment?: int32(name='ScalingAdjustment'),
    }
  ](name='StepAdjustment', position='Query'),
  targetValue?: float(name='TargetValue', position='Query'),
}

model CreateScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
  scalingRuleAri?: string(name='ScalingRuleAri'),
  scalingRuleId?: string(name='ScalingRuleId'),
}

model CreateScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScalingRuleResponseBody(name='body'),
}

async function createScalingRule(request: CreateScalingRuleRequest): CreateScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateScheduledTaskRequest {
  description?: string(name='Description', position='Query'),
  desiredCapacity?: int32(name='DesiredCapacity', position='Query'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', minimum=0, maximum=86400, position='Query'),
  launchTime?: string(name='LaunchTime', position='Query'),
  maxValue?: int32(name='MaxValue', position='Query'),
  minValue?: int32(name='MinValue', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recurrenceEndTime?: string(name='RecurrenceEndTime', position='Query'),
  recurrenceType?: string(name='RecurrenceType', position='Query'),
  recurrenceValue?: string(name='RecurrenceValue', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  scheduledAction?: string(name='ScheduledAction', position='Query'),
  scheduledTaskName?: string(name='ScheduledTaskName', position='Query'),
  taskEnabled?: boolean(name='TaskEnabled', position='Query'),
}

model CreateScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scheduledTaskId?: string(name='ScheduledTaskId'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTask(request: CreateScheduledTaskRequest): CreateScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model DeactivateScalingConfigurationRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingConfigurationId: string(name='ScalingConfigurationId', position='Query'),
}

model DeactivateScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactivateScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeactivateScalingConfigurationResponseBody(name='body'),
}

async function deactivateScalingConfiguration(request: DeactivateScalingConfigurationRequest): DeactivateScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactivateScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlarmRequest {
  alarmTaskId: string(name='AlarmTaskId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DeleteAlarmResponseBody = {
  alarmTaskId?: string(name='AlarmTaskId'),
  requestId?: string(name='RequestId'),
}

model DeleteAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlarmResponseBody(name='body'),
}

async function deleteAlarm(request: DeleteAlarmRequest): DeleteAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlarm', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLifecycleHookRequest {
  lifecycleHookId?: string(name='LifecycleHookId', position='Query'),
  lifecycleHookName?: string(name='LifecycleHookName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DeleteLifecycleHookResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLifecycleHookResponseBody(name='body'),
}

async function deleteLifecycleHook(request: DeleteLifecycleHookRequest): DeleteLifecycleHookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLifecycleHook', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNotificationConfigurationRequest {
  notificationArn: string(name='NotificationArn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DeleteNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNotificationConfigurationResponseBody(name='body'),
}

async function deleteNotificationConfiguration(request: DeleteNotificationConfigurationRequest): DeleteNotificationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNotificationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingConfigurationRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingConfigurationId: string(name='ScalingConfigurationId', position='Query'),
}

model DeleteScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingConfigurationResponseBody(name='body'),
}

async function deleteScalingConfiguration(request: DeleteScalingConfigurationRequest): DeleteScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingGroupRequest {
  forceDelete?: boolean(name='ForceDelete', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DeleteScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingGroupResponseBody(name='body'),
}

async function deleteScalingGroup(request: DeleteScalingGroupRequest): DeleteScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScalingRuleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingRuleId: string(name='ScalingRuleId', position='Query'),
}

model DeleteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScalingRuleResponseBody(name='body'),
}

async function deleteScalingRule(request: DeleteScalingRuleRequest): DeleteScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScheduledTaskRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scheduledTaskId: string(name='ScheduledTaskId', position='Query'),
}

model DeleteScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduledTaskResponseBody(name='body'),
}

async function deleteScheduledTask(request: DeleteScheduledTaskRequest): DeleteScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlarmsRequest {
  alarmTaskId?: string(name='AlarmTaskId', position='Query'),
  isEnable?: boolean(name='IsEnable', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  metricType?: string(name='MetricType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  state?: string(name='State', position='Query'),
}

model DescribeAlarmsResponseBody = {
  alarmList?: {
    alarm?: [ 
    {
      alarmActions?: {
        alarmAction?: [ string ](name='AlarmAction')
      }(name='AlarmActions'),
      alarmTaskId?: string(name='AlarmTaskId'),
      comparisonOperator?: string(name='ComparisonOperator'),
      description?: string(name='Description'),
      dimensions?: {
        dimension?: [ 
        {
          dimensionKey?: string(name='DimensionKey'),
          dimensionValue?: string(name='DimensionValue'),
        }
      ](name='Dimension')
      }(name='Dimensions'),
      effective?: string(name='Effective'),
      enable?: boolean(name='Enable'),
      evaluationCount?: int32(name='EvaluationCount'),
      metricName?: string(name='MetricName'),
      metricType?: string(name='MetricType'),
      name?: string(name='Name'),
      period?: int32(name='Period'),
      scalingGroupId?: string(name='ScalingGroupId'),
      state?: string(name='State'),
      statistics?: string(name='Statistics'),
      threshold?: float(name='Threshold'),
    }
  ](name='Alarm')
  }(name='AlarmList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmsResponseBody(name='body'),
}

async function describeAlarms(request: DescribeAlarmsRequest): DescribeAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlarms', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLifecycleActionsRequest {
  lifecycleActionStatus?: string(name='LifecycleActionStatus', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingActivityId: string(name='ScalingActivityId', position='Query'),
}

model DescribeLifecycleActionsResponseBody = {
  lifecycleActions?: {
    lifecycleAction?: [ 
    {
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds'),
      lifecycleActionResult?: string(name='LifecycleActionResult'),
      lifecycleActionStatus?: string(name='LifecycleActionStatus'),
      lifecycleActionToken?: string(name='LifecycleActionToken'),
      lifecycleHookId?: string(name='LifecycleHookId'),
    }
  ](name='LifecycleAction')
  }(name='LifecycleActions'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLifecycleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLifecycleActionsResponseBody(name='body'),
}

async function describeLifecycleActions(request: DescribeLifecycleActionsRequest): DescribeLifecycleActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLifecycleActions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLifecycleHooksRequest {
  lifecycleHookId?: [ string ](name='LifecycleHookId', position='Query'),
  lifecycleHookName?: string(name='LifecycleHookName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeLifecycleHooksResponseBody = {
  lifecycleHooks?: {
    lifecycleHook?: [ 
    {
      defaultResult?: string(name='DefaultResult'),
      heartbeatTimeout?: int32(name='HeartbeatTimeout'),
      lifecycleHookId?: string(name='LifecycleHookId'),
      lifecycleHookName?: string(name='LifecycleHookName'),
      lifecycleTransition?: string(name='LifecycleTransition'),
      notificationArn?: string(name='NotificationArn'),
      notificationMetadata?: string(name='NotificationMetadata'),
      scalingGroupId?: string(name='ScalingGroupId'),
    }
  ](name='LifecycleHook')
  }(name='LifecycleHooks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLifecycleHooksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLifecycleHooksResponseBody(name='body'),
}

async function describeLifecycleHooks(request: DescribeLifecycleHooksRequest): DescribeLifecycleHooksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLifecycleHooks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLimitationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeLimitationResponseBody = {
  maxNumberOfAlbServerGroup?: int32(name='MaxNumberOfAlbServerGroup'),
  maxNumberOfDBInstances?: int32(name='MaxNumberOfDBInstances'),
  maxNumberOfLifecycleHooks?: int32(name='MaxNumberOfLifecycleHooks'),
  maxNumberOfLoadBalancers?: int32(name='MaxNumberOfLoadBalancers'),
  maxNumberOfMaxSize?: int32(name='MaxNumberOfMaxSize'),
  maxNumberOfMinSize?: int32(name='MaxNumberOfMinSize'),
  maxNumberOfNotificationConfigurations?: int32(name='MaxNumberOfNotificationConfigurations'),
  maxNumberOfScalingConfigurations?: int32(name='MaxNumberOfScalingConfigurations'),
  maxNumberOfScalingGroups?: int32(name='MaxNumberOfScalingGroups'),
  maxNumberOfScalingInstances?: int32(name='MaxNumberOfScalingInstances'),
  maxNumberOfScalingRules?: int32(name='MaxNumberOfScalingRules'),
  maxNumberOfScheduledTasks?: int32(name='MaxNumberOfScheduledTasks'),
  maxNumberOfVServerGroups?: int32(name='MaxNumberOfVServerGroups'),
  requestId?: string(name='RequestId'),
}

model DescribeLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLimitationResponseBody(name='body'),
}

async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLimitation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNotificationConfigurationsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DescribeNotificationConfigurationsResponseBody = {
  notificationConfigurationModels?: {
    notificationConfigurationModel?: [ 
    {
      notificationArn?: string(name='NotificationArn'),
      notificationTypes?: {
        notificationType?: [ string ](name='NotificationType')
      }(name='NotificationTypes'),
      scalingGroupId?: string(name='ScalingGroupId'),
    }
  ](name='NotificationConfigurationModel')
  }(name='NotificationConfigurationModels'),
  requestId?: string(name='RequestId'),
}

model DescribeNotificationConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNotificationConfigurationsResponseBody(name='body'),
}

async function describeNotificationConfigurations(request: DescribeNotificationConfigurationsRequest): DescribeNotificationConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNotificationConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNotificationTypesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeNotificationTypesResponseBody = {
  notificationTypes?: {
    notificationType?: [ string ](name='NotificationType')
  }(name='NotificationTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeNotificationTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNotificationTypesResponseBody(name='body'),
}

async function describeNotificationTypes(request: DescribeNotificationTypesRequest): DescribeNotificationTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNotificationTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      classicUnavailable?: boolean(name='ClassicUnavailable'),
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      vpcUnavailable?: boolean(name='VpcUnavailable'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingActivitiesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingActivityId?: [ string ](name='ScalingActivityId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  statusCode?: string(name='StatusCode', position='Query'),
}

model DescribeScalingActivitiesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingActivities?: {
    scalingActivity?: [ 
    {
      attachedCapacity?: string(name='AttachedCapacity'),
      autoCreatedCapacity?: string(name='AutoCreatedCapacity'),
      cause?: string(name='Cause'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      progress?: int32(name='Progress'),
      scalingActivityId?: string(name='ScalingActivityId'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scalingInstanceNumber?: int32(name='ScalingInstanceNumber'),
      startTime?: string(name='StartTime'),
      statusCode?: string(name='StatusCode'),
      statusMessage?: string(name='StatusMessage'),
      totalCapacity?: string(name='TotalCapacity'),
    }
  ](name='ScalingActivity')
  }(name='ScalingActivities'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingActivitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingActivitiesResponseBody(name='body'),
}

async function describeScalingActivities(request: DescribeScalingActivitiesRequest): DescribeScalingActivitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingActivities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingActivityDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingActivityId: string(name='ScalingActivityId', position='Query'),
}

model DescribeScalingActivityDetailResponseBody = {
  detail?: string(name='Detail'),
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DescribeScalingActivityDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingActivityDetailResponseBody(name='body'),
}

async function describeScalingActivityDetail(request: DescribeScalingActivityDetailRequest): DescribeScalingActivityDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingActivityDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingConfigurationsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingConfigurationId?: [ string ](name='ScalingConfigurationId', position='Query'),
  scalingConfigurationName?: [ string ](name='ScalingConfigurationName', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeScalingConfigurationsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingConfigurations?: {
    scalingConfiguration?: [ 
    {
      privatePoolOptions: {
        id?: string(name='Id'),
        matchCriteria?: string(name='MatchCriteria'),
      }(name='PrivatePoolOptions'),
      affinity?: string(name='Affinity'),
      cpu?: int32(name='Cpu'),
      creationTime?: string(name='CreationTime'),
      creditSpecification?: string(name='CreditSpecification'),
      dataDisks?: {
        dataDisk?: [ 
        {
          autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
          categories?: {
            category?: [ string ](name='Category')
          }(name='Categories'),
          category?: string(name='Category'),
          deleteWithInstance?: boolean(name='DeleteWithInstance'),
          description?: string(name='Description'),
          device?: string(name='Device'),
          diskName?: string(name='DiskName'),
          encrypted?: string(name='Encrypted'),
          KMSKeyId?: string(name='KMSKeyId'),
          performanceLevel?: string(name='PerformanceLevel'),
          size?: int32(name='Size'),
          snapshotId?: string(name='SnapshotId'),
        }
      ](name='DataDisk')
      }(name='DataDisks'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      deploymentSetId?: string(name='DeploymentSetId'),
      hostName?: string(name='HostName'),
      hpcClusterId?: string(name='HpcClusterId'),
      imageFamily?: string(name='ImageFamily'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceGeneration?: string(name='InstanceGeneration'),
      instanceName?: string(name='InstanceName'),
      instancePatternInfos?: {
        instancePatternInfo?: [ 
        {
          cores?: int32(name='Cores'),
          instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
          maxPrice?: float(name='MaxPrice'),
          memory?: float(name='Memory'),
        }
      ](name='InstancePatternInfo')
      }(name='InstancePatternInfos'),
      instanceType?: string(name='InstanceType'),
      instanceTypes?: {
        instanceType?: [ string ](name='InstanceType')
      }(name='InstanceTypes'),
      internetChargeType?: string(name='InternetChargeType'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      ioOptimized?: string(name='IoOptimized'),
      ipv6AddressCount?: int32(name='Ipv6AddressCount'),
      keyPairName?: string(name='KeyPairName'),
      lifecycleState?: string(name='LifecycleState'),
      loadBalancerWeight?: int32(name='LoadBalancerWeight'),
      memory?: int32(name='Memory'),
      passwordInherit?: boolean(name='PasswordInherit'),
      ramRoleName?: string(name='RamRoleName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      scalingConfigurationName?: string(name='ScalingConfigurationName'),
      scalingGroupId?: string(name='ScalingGroupId'),
      schedulerOptions?: {
        managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
      }(name='SchedulerOptions'),
      securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      spotDuration?: int32(name='SpotDuration'),
      spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
      spotPriceLimit?: {
        spotPriceModel?: [ 
        {
          instanceType?: string(name='InstanceType'),
          priceLimit?: float(name='PriceLimit'),
        }
      ](name='SpotPriceModel')
      }(name='SpotPriceLimit'),
      spotStrategy?: string(name='SpotStrategy'),
      systemDiskAutoSnapshotPolicyId?: string(name='SystemDiskAutoSnapshotPolicyId'),
      systemDiskCategories?: {
        systemDiskCategory?: [ string ](name='SystemDiskCategory')
      }(name='SystemDiskCategories'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskDescription?: string(name='SystemDiskDescription'),
      systemDiskName?: string(name='SystemDiskName'),
      systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      tenancy?: string(name='Tenancy'),
      userData?: string(name='UserData'),
      weightedCapacities?: {
        weightedCapacity?: [ string ](name='WeightedCapacity')
      }(name='WeightedCapacities'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ScalingConfiguration')
  }(name='ScalingConfigurations'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingConfigurationsResponseBody(name='body'),
}

async function describeScalingConfigurations(request: DescribeScalingConfigurationsRequest): DescribeScalingConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingGroupsRequest {
  scalingGroupName?: [ string ](name='ScalingGroupName'),
  groupType?: string(name='GroupType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: [ string ](name='ScalingGroupId', position='Query'),
}

model DescribeScalingGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingGroups?: {
    scalingGroup?: [ 
    {
      activeCapacity?: int32(name='ActiveCapacity'),
      activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId'),
      albServerGroups?: {
        albServerGroup?: [ 
        {
          albServerGroupId?: string(name='AlbServerGroupId'),
          port?: int32(name='Port'),
          weight?: int32(name='Weight'),
        }
      ](name='AlbServerGroup')
      }(name='AlbServerGroups'),
      compensateWithOnDemand?: boolean(name='CompensateWithOnDemand'),
      creationTime?: string(name='CreationTime'),
      DBInstanceIds?: {
        DBInstanceId?: [ string ](name='DBInstanceId')
      }(name='DBInstanceIds'),
      defaultCooldown?: int32(name='DefaultCooldown'),
      desiredCapacity?: int32(name='DesiredCapacity'),
      groupDeletionProtection?: boolean(name='GroupDeletionProtection'),
      groupType?: string(name='GroupType'),
      healthCheckType?: string(name='HealthCheckType'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      launchTemplateOverrides?: {
        launchTemplateOverride?: [ 
        {
          instanceType?: string(name='InstanceType'),
          weightedCapacity?: int32(name='WeightedCapacity'),
        }
      ](name='LaunchTemplateOverride')
      }(name='LaunchTemplateOverrides'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion'),
      lifecycleState?: string(name='LifecycleState'),
      loadBalancerIds?: {
        loadBalancerId?: [ string ](name='LoadBalancerId')
      }(name='LoadBalancerIds'),
      maxSize?: int32(name='MaxSize'),
      minSize?: int32(name='MinSize'),
      modificationTime?: string(name='ModificationTime'),
      multiAZPolicy?: string(name='MultiAZPolicy'),
      onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity'),
      onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity'),
      pendingCapacity?: int32(name='PendingCapacity'),
      pendingWaitCapacity?: int32(name='PendingWaitCapacity'),
      protectedCapacity?: int32(name='ProtectedCapacity'),
      regionId?: string(name='RegionId'),
      removalPolicies?: {
        removalPolicy?: [ string ](name='RemovalPolicy')
      }(name='RemovalPolicies'),
      removingCapacity?: int32(name='RemovingCapacity'),
      removingWaitCapacity?: int32(name='RemovingWaitCapacity'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scalingGroupName?: string(name='ScalingGroupName'),
      scalingPolicy?: string(name='ScalingPolicy'),
      spotInstancePools?: int32(name='SpotInstancePools'),
      spotInstanceRemedy?: boolean(name='SpotInstanceRemedy'),
      standbyCapacity?: int32(name='StandbyCapacity'),
      stoppedCapacity?: int32(name='StoppedCapacity'),
      suspendedProcesses?: {
        suspendedProcess?: [ string ](name='SuspendedProcess')
      }(name='SuspendedProcesses'),
      systemSuspended?: boolean(name='SystemSuspended'),
      totalCapacity?: int32(name='TotalCapacity'),
      totalInstanceCount?: int32(name='TotalInstanceCount'),
      VServerGroups?: {
        VServerGroup?: [ 
        {
          loadBalancerId?: string(name='LoadBalancerId'),
          VServerGroupAttributes?: {
            VServerGroupAttribute?: [ 
            {
              port?: int32(name='Port'),
              VServerGroupId?: string(name='VServerGroupId'),
              weight?: int32(name='Weight'),
            }
          ](name='VServerGroupAttribute')
          }(name='VServerGroupAttributes'),
        }
      ](name='VServerGroup')
      }(name='VServerGroups'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
    }
  ](name='ScalingGroup')
  }(name='ScalingGroups'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingGroupsResponseBody(name='body'),
}

async function describeScalingGroups(request: DescribeScalingGroupsRequest): DescribeScalingGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingInstancesRequest {
  creationType?: string(name='CreationType', position='Query'),
  healthStatus?: string(name='HealthStatus', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  lifecycleState?: string(name='LifecycleState', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingActivityId?: string(name='ScalingActivityId', position='Query'),
  scalingConfigurationId?: string(name='ScalingConfigurationId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model DescribeScalingInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingInstances?: {
    scalingInstance?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      creationTime?: string(name='CreationTime'),
      creationType?: string(name='CreationType'),
      entrusted?: boolean(name='Entrusted'),
      healthStatus?: string(name='HealthStatus'),
      instanceId?: string(name='InstanceId'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion'),
      lifecycleState?: string(name='LifecycleState'),
      loadBalancerWeight?: int32(name='LoadBalancerWeight'),
      scalingActivityId?: string(name='ScalingActivityId'),
      scalingConfigurationId?: string(name='ScalingConfigurationId'),
      scalingGroupId?: string(name='ScalingGroupId'),
      spotStrategy?: string(name='SpotStrategy'),
      warmupState?: string(name='WarmupState'),
      weightedCapacity?: int32(name='WeightedCapacity'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ScalingInstance')
  }(name='ScalingInstances'),
  totalCount?: int32(name='TotalCount'),
  totalSpotCount?: int32(name='TotalSpotCount'),
}

model DescribeScalingInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingInstancesResponseBody(name='body'),
}

async function describeScalingInstances(request: DescribeScalingInstancesRequest): DescribeScalingInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScalingRulesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  scalingRuleAri?: [ string ](name='ScalingRuleAri', position='Query'),
  scalingRuleId?: [ string ](name='ScalingRuleId', position='Query'),
  scalingRuleName?: [ string ](name='ScalingRuleName', position='Query'),
  scalingRuleType?: string(name='ScalingRuleType', position='Query'),
  showAlarmRules?: boolean(name='ShowAlarmRules', position='Query'),
}

model DescribeScalingRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scalingRules?: {
    scalingRule?: [ 
    {
      adjustmentType?: string(name='AdjustmentType'),
      adjustmentValue?: int32(name='AdjustmentValue'),
      alarms?: {
        alarm?: [ 
        {
          alarmTaskId?: string(name='AlarmTaskId'),
          alarmTaskName?: string(name='AlarmTaskName'),
          comparisonOperator?: string(name='ComparisonOperator'),
          dimensions?: {
            dimension?: [ 
            {
              dimensionKey?: string(name='DimensionKey'),
              dimensionValue?: string(name='DimensionValue'),
            }
          ](name='Dimension')
          }(name='Dimensions'),
          evaluationCount?: int32(name='EvaluationCount'),
          metricName?: string(name='MetricName'),
          metricType?: string(name='MetricType'),
          statistics?: string(name='Statistics'),
          threshold?: float(name='Threshold'),
        }
      ](name='Alarm')
      }(name='Alarms'),
      cooldown?: int32(name='Cooldown'),
      disableScaleIn?: boolean(name='DisableScaleIn'),
      estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup'),
      initialMaxSize?: int32(name='InitialMaxSize'),
      maxSize?: int32(name='MaxSize'),
      metricName?: string(name='MetricName'),
      minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude'),
      minSize?: int32(name='MinSize'),
      predictiveScalingMode?: string(name='PredictiveScalingMode'),
      predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime'),
      predictiveValueBehavior?: string(name='PredictiveValueBehavior'),
      predictiveValueBuffer?: int32(name='PredictiveValueBuffer'),
      scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount'),
      scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scalingRuleAri?: string(name='ScalingRuleAri'),
      scalingRuleId?: string(name='ScalingRuleId'),
      scalingRuleName?: string(name='ScalingRuleName'),
      scalingRuleType?: string(name='ScalingRuleType'),
      stepAdjustments?: {
        stepAdjustment?: [ 
        {
          metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
          metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
          scalingAdjustment?: int32(name='ScalingAdjustment'),
        }
      ](name='StepAdjustment')
      }(name='StepAdjustments'),
      targetValue?: float(name='TargetValue'),
    }
  ](name='ScalingRule')
  }(name='ScalingRules'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScalingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScalingRulesResponseBody(name='body'),
}

async function describeScalingRules(request: DescribeScalingRulesRequest): DescribeScalingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScalingRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScheduledTasksRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  scheduledAction?: [ string ](name='ScheduledAction', position='Query'),
  scheduledTaskId?: [ string ](name='ScheduledTaskId', position='Query'),
  scheduledTaskName?: [ string ](name='ScheduledTaskName', position='Query'),
}

model DescribeScheduledTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  scheduledTasks?: {
    scheduledTask?: [ 
    {
      description?: string(name='Description'),
      desiredCapacity?: int32(name='DesiredCapacity'),
      launchExpirationTime?: int32(name='LaunchExpirationTime'),
      launchTime?: string(name='LaunchTime'),
      maxValue?: int32(name='MaxValue'),
      minValue?: int32(name='MinValue'),
      recurrenceEndTime?: string(name='RecurrenceEndTime'),
      recurrenceType?: string(name='RecurrenceType'),
      recurrenceValue?: string(name='RecurrenceValue'),
      scalingGroupId?: string(name='ScalingGroupId'),
      scheduledAction?: string(name='ScheduledAction'),
      scheduledTaskId?: string(name='ScheduledTaskId'),
      scheduledTaskName?: string(name='ScheduledTaskName'),
      taskEnabled?: boolean(name='TaskEnabled'),
    }
  ](name='ScheduledTask')
  }(name='ScheduledTasks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduledTasksResponseBody(name='body'),
}

async function describeScheduledTasks(request: DescribeScheduledTasksRequest): DescribeScheduledTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScheduledTasks', 'POST', '/', 'json', false, 'json', request);
}

model DetachAlbServerGroupsRequest {
  albServerGroup: [ 
    {
      albServerGroupId: string(name='AlbServerGroupId'),
      port: int32(name='Port'),
    }
  ](name='AlbServerGroup', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  forceDetach?: boolean(name='ForceDetach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DetachAlbServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DetachAlbServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DetachAlbServerGroupsResponseBody(name='body'),
}

async function detachAlbServerGroups(request: DetachAlbServerGroupsRequest): DetachAlbServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachAlbServerGroups', 'POST', '/', 'json', false, 'json', request);
}

model DetachDBInstancesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstance: [ string ](name='DBInstance', position='Query'),
  forceDetach?: boolean(name='ForceDetach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DetachDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDBInstancesResponseBody(name='body'),
}

async function detachDBInstances(request: DetachDBInstancesRequest): DetachDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DetachInstancesRequest {
  decreaseDesiredCapacity?: boolean(name='DecreaseDesiredCapacity', position='Query'),
  detachOption?: string(name='DetachOption', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  lifecycleHook?: boolean(name='LifecycleHook', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DetachInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DetachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DetachInstancesResponseBody(name='body'),
}

async function detachInstances(request: DetachInstancesRequest): DetachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachInstances', 'POST', '/', 'json', false, 'json', request);
}

model DetachLoadBalancersRequest {
  async?: boolean(name='Async', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  forceDetach?: boolean(name='ForceDetach', position='Query'),
  loadBalancer: [ string ](name='LoadBalancer', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DetachLoadBalancersResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model DetachLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: DetachLoadBalancersResponseBody(name='body'),
}

async function detachLoadBalancers(request: DetachLoadBalancersRequest): DetachLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachLoadBalancers', 'POST', '/', 'json', false, 'json', request);
}

model DetachVServerGroupsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  forceDetach?: boolean(name='ForceDetach', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  VServerGroup: [ 
    {
      loadBalancerId?: string(name='LoadBalancerId'),
      VServerGroupAttribute?: [ 
        {
          port?: int32(name='Port'),
          VServerGroupId?: string(name='VServerGroupId'),
        }
      ](name='VServerGroupAttribute'),
    }
  ](name='VServerGroup', position='Query'),
}

model DetachVServerGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachVServerGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DetachVServerGroupsResponseBody(name='body'),
}

async function detachVServerGroups(request: DetachVServerGroupsRequest): DetachVServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachVServerGroups', 'POST', '/', 'json', false, 'json', request);
}

model DisableAlarmRequest {
  alarmTaskId: string(name='AlarmTaskId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DisableAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: DisableAlarmResponseBody(name='body'),
}

async function disableAlarm(request: DisableAlarmRequest): DisableAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAlarm', 'POST', '/', 'json', false, 'json', request);
}

model DisableScalingGroupRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model DisableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DisableScalingGroupResponseBody(name='body'),
}

async function disableScalingGroup(request: DisableScalingGroupRequest): DisableScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model EnableAlarmRequest {
  alarmTaskId: string(name='AlarmTaskId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model EnableAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAlarmResponseBody(name='body'),
}

async function enableAlarm(request: EnableAlarmRequest): EnableAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAlarm', 'POST', '/', 'json', false, 'json', request);
}

model EnableScalingGroupRequest {
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId', position='Query'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', position='Query'),
  loadBalancerWeight?: [ int32 ](name='LoadBalancerWeight', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model EnableScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: EnableScalingGroupResponseBody(name='body'),
}

async function enableScalingGroup(request: EnableScalingGroupRequest): EnableScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model EnterStandbyRequest {
  async?: boolean(name='Async', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model EnterStandbyResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId', description='异步调用伸缩活动ID'),
}

model EnterStandbyResponse = {
  headers: map[string]string(name='headers'),
  body: EnterStandbyResponseBody(name='body'),
}

async function enterStandby(request: EnterStandbyRequest): EnterStandbyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnterStandby', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteScalingRuleRequest {
  breachThreshold?: float(name='BreachThreshold', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  metricValue?: float(name='MetricValue', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingRuleAri: string(name='ScalingRuleAri', position='Query'),
}

model ExecuteScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model ExecuteScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteScalingRuleResponseBody(name='body'),
}

async function executeScalingRule(request: ExecuteScalingRuleRequest): ExecuteScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ExitStandbyRequest {
  async?: boolean(name='Async', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model ExitStandbyResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId', description='异步调用伸缩活动ID'),
}

model ExitStandbyResponse = {
  headers: map[string]string(name='headers'),
  body: ExitStandbyResponseBody(name='body'),
}

async function exitStandby(request: ExitStandbyRequest): ExitStandbyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExitStandby', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model ListTagKeysResponseBody = {
  keys?: {
    key?: [ string ](name='Key')
  }(name='Keys'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  key: string(name='Key', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  values?: {
    value?: [ string ](name='Value')
  }(name='Values'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAlarmRequest {
  alarmAction?: [ string ](name='AlarmAction', position='Query'),
  alarmTaskId: string(name='AlarmTaskId', position='Query'),
  comparisonOperator?: string(name='ComparisonOperator', position='Query'),
  description?: string(name='Description', position='Query'),
  dimension?: [ 
    {
      dimensionKey?: string(name='DimensionKey'),
      dimensionValue?: string(name='DimensionValue'),
    }
  ](name='Dimension', position='Query'),
  effective?: string(name='Effective', position='Query'),
  evaluationCount?: int32(name='EvaluationCount', position='Query'),
  groupId?: int32(name='GroupId', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  metricType?: string(name='MetricType', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  statistics?: string(name='Statistics', position='Query'),
  threshold?: float(name='Threshold', position='Query'),
}

model ModifyAlarmResponseBody = {
  alarmTaskId?: string(name='AlarmTaskId'),
  requestId?: string(name='RequestId'),
}

model ModifyAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAlarmResponseBody(name='body'),
}

async function modifyAlarm(request: ModifyAlarmRequest): ModifyAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAlarm', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLifecycleHookRequest {
  defaultResult?: string(name='DefaultResult', position='Query'),
  heartbeatTimeout?: int32(name='HeartbeatTimeout', position='Query'),
  lifecycleHookId?: string(name='LifecycleHookId', position='Query'),
  lifecycleHookName?: string(name='LifecycleHookName', position='Query'),
  lifecycleTransition?: string(name='LifecycleTransition', position='Query'),
  notificationArn?: string(name='NotificationArn', position='Query'),
  notificationMetadata?: string(name='NotificationMetadata', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
}

model ModifyLifecycleHookResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLifecycleHookResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLifecycleHookResponseBody(name='body'),
}

async function modifyLifecycleHook(request: ModifyLifecycleHookRequest): ModifyLifecycleHookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLifecycleHook', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNotificationConfigurationRequest {
  notificationArn: string(name='NotificationArn', position='Query'),
  notificationType: [ string ](name='NotificationType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model ModifyNotificationConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNotificationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNotificationConfigurationResponseBody(name='body'),
}

async function modifyNotificationConfiguration(request: ModifyNotificationConfigurationRequest): ModifyNotificationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNotificationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScalingConfigurationRequest {
  privatePoolOptions?: {
    id?: string(name='Id', position=''),
    matchCriteria?: string(name='MatchCriteria', position=''),
  }(name='PrivatePoolOptions'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', position=''),
    category?: string(name='Category', position=''),
    description?: string(name='Description', position=''),
    diskName?: string(name='DiskName', position=''),
    performanceLevel?: string(name='PerformanceLevel', position=''),
    size?: int32(name='Size', position=''),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity', position='Query'),
  cpu?: int32(name='Cpu', position='Query'),
  creditSpecification?: string(name='CreditSpecification', position='Query'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      categories?: [ string ](name='Categories'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      encrypted?: string(name='Encrypted'),
      KMSKeyId?: string(name='KMSKeyId'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      snapshotId?: string(name='SnapshotId'),
    }
  ](name='DataDisk', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  hpcClusterId?: string(name='HpcClusterId', position='Query'),
  imageFamily?: string(name='ImageFamily', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  instanceDescription?: string(name='InstanceDescription', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instancePatternInfo?: [ 
    {
      cores?: int32(name='Cores'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
      maxPrice?: float(name='MaxPrice'),
      memory?: float(name='Memory'),
    }
  ](name='InstancePatternInfo', position='Query'),
  instanceTypeOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='InstanceTypeOverride', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  ioOptimized?: string(name='IoOptimized', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  loadBalancerWeight?: int32(name='LoadBalancerWeight', position='Query'),
  memory?: int32(name='Memory', position='Query'),
  override?: boolean(name='Override', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', position='Query'),
  ramRoleName?: string(name='RamRoleName', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingConfigurationId: string(name='ScalingConfigurationId', position='Query'),
  scalingConfigurationName?: string(name='ScalingConfigurationName', position='Query'),
  schedulerOptions?: map[string]any(name='SchedulerOptions', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', position='Query'),
  spotDuration?: int32(name='SpotDuration', position='Query'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', position='Query'),
  spotPriceLimit?: [ 
    {
      instanceType?: string(name='InstanceType'),
      priceLimit?: float(name='PriceLimit'),
    }
  ](name='SpotPriceLimit', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  systemDiskCategories?: [ string ](name='SystemDiskCategories', position='Query'),
  tags?: string(name='Tags', position='Query'),
  tenancy?: string(name='Tenancy', position='Query'),
  userData?: string(name='UserData', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model ModifyScalingConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingConfigurationResponseBody(name='body'),
}

async function modifyScalingConfiguration(request: ModifyScalingConfigurationRequest): ModifyScalingConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScalingConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScalingGroupRequest {
  removalPolicy?: [ string ](name='RemovalPolicy'),
  activeScalingConfigurationId?: string(name='ActiveScalingConfigurationId', position='Query'),
  compensateWithOnDemand?: boolean(name='CompensateWithOnDemand', position='Query'),
  defaultCooldown?: int32(name='DefaultCooldown', minimum=0, maximum=86400, position='Query'),
  desiredCapacity?: int32(name='DesiredCapacity', position='Query'),
  groupDeletionProtection?: boolean(name='GroupDeletionProtection', position='Query'),
  healthCheckType?: string(name='HealthCheckType', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateOverride?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: int32(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateOverride', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', position='Query'),
  maxSize?: int32(name='MaxSize', position='Query'),
  minSize?: int32(name='MinSize', position='Query'),
  multiAZPolicy?: string(name='MultiAZPolicy', position='Query'),
  onDemandBaseCapacity?: int32(name='OnDemandBaseCapacity', position='Query'),
  onDemandPercentageAboveBaseCapacity?: int32(name='OnDemandPercentageAboveBaseCapacity', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
  scalingGroupName?: string(name='ScalingGroupName', position='Query'),
  spotInstancePools?: int32(name='SpotInstancePools', position='Query'),
  spotInstanceRemedy?: boolean(name='SpotInstanceRemedy', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', position='Query'),
}

model ModifyScalingGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingGroupResponseBody(name='body'),
}

async function modifyScalingGroup(request: ModifyScalingGroupRequest): ModifyScalingGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScalingGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScalingRuleRequest {
  adjustmentType?: string(name='AdjustmentType', position='Query'),
  adjustmentValue?: int32(name='AdjustmentValue', position='Query'),
  cooldown?: int32(name='Cooldown', position='Query'),
  disableScaleIn?: boolean(name='DisableScaleIn', position='Query'),
  estimatedInstanceWarmup?: int32(name='EstimatedInstanceWarmup', position='Query'),
  initialMaxSize?: int32(name='InitialMaxSize', position='Query'),
  metricName?: string(name='MetricName', position='Query'),
  minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  predictiveScalingMode?: string(name='PredictiveScalingMode', position='Query'),
  predictiveTaskBufferTime?: int32(name='PredictiveTaskBufferTime', position='Query'),
  predictiveValueBehavior?: string(name='PredictiveValueBehavior', position='Query'),
  predictiveValueBuffer?: int32(name='PredictiveValueBuffer', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scaleInEvaluationCount?: int32(name='ScaleInEvaluationCount', position='Query'),
  scaleOutEvaluationCount?: int32(name='ScaleOutEvaluationCount', position='Query'),
  scalingRuleId: string(name='ScalingRuleId', position='Query'),
  scalingRuleName?: string(name='ScalingRuleName', position='Query'),
  stepAdjustment?: [ 
    {
      metricIntervalLowerBound?: float(name='MetricIntervalLowerBound'),
      metricIntervalUpperBound?: float(name='MetricIntervalUpperBound'),
      scalingAdjustment?: int32(name='ScalingAdjustment'),
    }
  ](name='StepAdjustment', position='Query'),
  targetValue?: float(name='TargetValue', position='Query'),
}

model ModifyScalingRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScalingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScalingRuleResponseBody(name='body'),
}

async function modifyScalingRule(request: ModifyScalingRuleRequest): ModifyScalingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScalingRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyScheduledTaskRequest {
  description?: string(name='Description', position='Query'),
  desiredCapacity?: int32(name='DesiredCapacity', position='Query'),
  launchExpirationTime?: int32(name='LaunchExpirationTime', minimum=0, maximum=86400, position='Query'),
  launchTime?: string(name='LaunchTime', position='Query'),
  maxValue?: int32(name='MaxValue', position='Query'),
  minValue?: int32(name='MinValue', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  recurrenceEndTime?: string(name='RecurrenceEndTime', position='Query'),
  recurrenceType?: string(name='RecurrenceType', position='Query'),
  recurrenceValue?: string(name='RecurrenceValue', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId?: string(name='ScalingGroupId', position='Query'),
  scheduledAction?: string(name='ScheduledAction', position='Query'),
  scheduledTaskId: string(name='ScheduledTaskId', position='Query'),
  scheduledTaskName?: string(name='ScheduledTaskName', position='Query'),
  taskEnabled?: boolean(name='TaskEnabled', position='Query'),
}

model ModifyScheduledTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTask(request: ModifyScheduledTaskRequest): ModifyScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyScheduledTask', 'POST', '/', 'json', false, 'json', request);
}

model RebalanceInstancesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model RebalanceInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model RebalanceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebalanceInstancesResponseBody(name='body'),
}

async function rebalanceInstances(request: RebalanceInstancesRequest): RebalanceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebalanceInstances', 'POST', '/', 'json', false, 'json', request);
}

model RecordLifecycleActionHeartbeatRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  heartbeatTimeout?: int32(name='heartbeatTimeout', position='Query'),
  lifecycleActionToken: string(name='lifecycleActionToken', position='Query'),
  lifecycleHookId: string(name='lifecycleHookId', position='Query'),
}

model RecordLifecycleActionHeartbeatResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecordLifecycleActionHeartbeatResponse = {
  headers: map[string]string(name='headers'),
  body: RecordLifecycleActionHeartbeatResponseBody(name='body'),
}

async function recordLifecycleActionHeartbeat(request: RecordLifecycleActionHeartbeatRequest): RecordLifecycleActionHeartbeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecordLifecycleActionHeartbeat', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstancesRequest {
  decreaseDesiredCapacity?: boolean(name='DecreaseDesiredCapacity', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  removePolicy?: string(name='RemovePolicy', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model RemoveInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model RemoveInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInstancesResponseBody(name='body'),
}

async function removeInstances(request: RemoveInstancesRequest): RemoveInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstances', 'POST', '/', 'json', false, 'json', request);
}

model ResumeProcessesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  process: [ string ](name='Process', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model ResumeProcessesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeProcessesResponseBody(name='body'),
}

async function resumeProcesses(request: ResumeProcessesRequest): ResumeProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeProcesses', 'POST', '/', 'json', false, 'json', request);
}

model ScaleWithAdjustmentRequest {
  adjustmentType: string(name='AdjustmentType', position='Query'),
  adjustmentValue: int32(name='AdjustmentValue', minimum=-2147483648, maximum=2147483647, position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  minAdjustmentMagnitude?: int32(name='MinAdjustmentMagnitude', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model ScaleWithAdjustmentResponseBody = {
  requestId?: string(name='RequestId'),
  scalingActivityId?: string(name='ScalingActivityId'),
}

model ScaleWithAdjustmentResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleWithAdjustmentResponseBody(name='body'),
}

async function scaleWithAdjustment(request: ScaleWithAdjustmentRequest): ScaleWithAdjustmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScaleWithAdjustment', 'POST', '/', 'json', false, 'json', request);
}

model SetGroupDeletionProtectionRequest {
  groupDeletionProtection: boolean(name='GroupDeletionProtection', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model SetGroupDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGroupDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetGroupDeletionProtectionResponseBody(name='body'),
}

async function setGroupDeletionProtection(request: SetGroupDeletionProtectionRequest): SetGroupDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGroupDeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model SetInstanceHealthRequest {
  healthStatus: string(name='HealthStatus', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model SetInstanceHealthResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstanceHealthResponseBody(name='body'),
}

async function setInstanceHealth(request: SetInstanceHealthRequest): SetInstanceHealthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstanceHealth', 'POST', '/', 'json', false, 'json', request);
}

model SetInstancesProtectionRequest {
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectedFromScaleIn: boolean(name='ProtectedFromScaleIn', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model SetInstancesProtectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstancesProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstancesProtectionResponseBody(name='body'),
}

async function setInstancesProtection(request: SetInstancesProtectionRequest): SetInstancesProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstancesProtection', 'POST', '/', 'json', false, 'json', request);
}

model SuspendProcessesRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  process: [ string ](name='Process', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  scalingGroupId: string(name='ScalingGroupId', position='Query'),
}

model SuspendProcessesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SuspendProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendProcessesResponseBody(name='body'),
}

async function suspendProcesses(request: SuspendProcessesRequest): SuspendProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendProcesses', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model VerifyAuthenticationRequest {
  onlyCheck?: boolean(name='OnlyCheck', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model VerifyAuthenticationResponseBody = {
  requestId?: string(name='RequestId'),
}

model VerifyAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyAuthenticationResponseBody(name='body'),
}

async function verifyAuthentication(request: VerifyAuthenticationRequest): VerifyAuthenticationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyAuthentication', 'POST', '/', 'json', false, 'json', request);
}

model VerifyUserRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model VerifyUserResponse = {
  headers: map[string]string(name='headers'),
}

async function verifyUser(request: VerifyUserRequest): VerifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyUser', 'POST', '/', 'none', false, 'json', request);
}

