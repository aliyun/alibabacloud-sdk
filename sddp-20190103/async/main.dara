/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sddp';
  @version = '2019-01-03';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hongkong = 'sddp-api.cn-hongkong.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateConfigRequest {
  code?: string(name='Code', position='Query'),
  description?: string(name='Description', position='Query'),
  lang?: string(name='Lang', position='Query'),
  value?: string(name='Value', position='Query'),
}

model CreateConfigResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigResponseBody(name='body'),
}

async function createConfig(request: CreateConfigRequest): CreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataLimitRequest {
  auditStatus?: int32(name='AuditStatus', position='Query'),
  autoScan?: int32(name='AutoScan', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  eventStatus?: int32(name='EventStatus', position='Query'),
  lang?: string(name='Lang', position='Query'),
  logStoreDay?: int32(name='LogStoreDay', position='Query'),
  ocrStatus?: int32(name='OcrStatus', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  password?: string(name='Password', position='Query'),
  port?: int32(name='Port', position='Query'),
  resourceType: int32(name='ResourceType', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model CreateDataLimitResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataLimitResponseBody(name='body'),
}

async function createDataLimit(request: CreateDataLimitRequest): CreateDataLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataLimit', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  category?: int32(name='Category', position='Query'),
  content: string(name='Content', position='Query'),
  contentCategory?: int32(name='ContentCategory', position='Query'),
  description?: string(name='Description', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleType?: int32(name='RuleType', position='Query'),
  statExpress?: string(name='StatExpress', position='Query'),
  status?: int32(name='Status', position='Query'),
  target?: string(name='Target', position='Query'),
  warnLevel?: int32(name='WarnLevel', position='Query'),
}

model CreateRuleResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateScanTaskRequest {
  dataLimitId: long(name='DataLimitId', position='Query'),
  intervalDay: int32(name='IntervalDay', position='Query'),
  lang?: string(name='Lang', position='Query'),
  ossScanPath?: string(name='OssScanPath', position='Query'),
  resourceType: long(name='ResourceType', position='Query'),
  runHour: int32(name='RunHour', position='Query'),
  runMinute: int32(name='RunMinute', position='Query'),
  scanRange: int32(name='ScanRange', position='Query'),
  scanRangeContent: string(name='ScanRangeContent', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  taskUserName?: string(name='TaskUserName', position='Query'),
}

model CreateScanTaskResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScanTaskResponseBody(name='body'),
}

async function createScanTask(request: CreateScanTaskRequest): CreateScanTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScanTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSlrRoleRequest {
  lang?: string(name='Lang', position='Query'),
}

model CreateSlrRoleResponseBody = {
  hasPermission?: boolean(name='HasPermission'),
  requestId?: string(name='RequestId'),
}

model CreateSlrRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSlrRoleResponseBody(name='body'),
}

async function createSlrRole(request: CreateSlrRoleRequest): CreateSlrRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSlrRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLimitRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DeleteDataLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataLimitResponseBody(name='body'),
}

async function deleteDataLimit(request: DeleteDataLimitRequest): DeleteDataLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLimit', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCategoryTemplateRuleListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model DescribeCategoryTemplateRuleListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      description?: string(name='Description'),
      id?: long(name='Id'),
      identificationRuleIds?: string(name='IdentificationRuleIds'),
      identificationScope?: string(name='IdentificationScope'),
      name?: string(name='Name'),
      riskLevelId?: long(name='RiskLevelId'),
      status?: int32(name='Status'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCategoryTemplateRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoryTemplateRuleListResponseBody(name='body'),
}

async function describeCategoryTemplateRuleList(request: DescribeCategoryTemplateRuleListRequest): DescribeCategoryTemplateRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCategoryTemplateRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColumnsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: long(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  sensLevelName?: string(name='SensLevelName', position='Query'),
  tableId?: long(name='TableId', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeColumnsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      dataType?: string(name='DataType'),
      id?: string(name='Id'),
      instanceId?: long(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      name?: string(name='Name'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      odpsRiskLevelValue?: int32(name='OdpsRiskLevelValue'),
      productCode?: string(name='ProductCode'),
      revisionId?: long(name='RevisionId'),
      revisionStatus?: long(name='RevisionStatus'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      sensLevelName?: string(name='SensLevelName'),
      sensitive?: boolean(name='Sensitive'),
      tableId?: long(name='TableId'),
      tableName?: string(name='TableName'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColumns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConfigsRequest {
  lang?: string(name='Lang', position='Query'),
}

model DescribeConfigsResponseBody = {
  configList?: [ 
    {
      code?: string(name='Code'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      value?: string(name='Value'),
    }
  ](name='ConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigsResponseBody(name='body'),
}

async function describeConfigs(request: DescribeConfigsRequest): DescribeConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataAssetsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  rangeId?: int32(name='RangeId', position='Query'),
  riskLevels?: string(name='RiskLevels', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
}

model DescribeDataAssetsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      acl?: string(name='Acl'),
      creationTime?: long(name='CreationTime'),
      dataType?: string(name='DataType'),
      id?: string(name='Id'),
      labelsec?: boolean(name='Labelsec'),
      name?: string(name='Name'),
      objectKey?: string(name='ObjectKey'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      owner?: string(name='Owner'),
      productCode?: string(name='ProductCode'),
      productId?: string(name='ProductId'),
      protection?: boolean(name='Protection'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      ruleName?: string(name='RuleName'),
      sensitive?: boolean(name='Sensitive'),
      sensitiveCount?: int32(name='SensitiveCount'),
      sensitiveRatio?: string(name='SensitiveRatio'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataAssetsResponseBody(name='body'),
}

async function describeDataAssets(request: DescribeDataAssetsRequest): DescribeDataAssetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataAssets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataLimitDetailRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  networkType?: int32(name='NetworkType', position='Query'),
}

model DescribeDataLimitDetailResponseBody = {
  dataLimit?: {
    checkStatus?: int32(name='CheckStatus'),
    checkStatusName?: string(name='CheckStatusName'),
    gmtCreate?: long(name='GmtCreate'),
    id?: long(name='Id'),
    localName?: string(name='LocalName'),
    parentId?: string(name='ParentId'),
    port?: int32(name='Port'),
    regionId?: string(name='RegionId'),
    resourceType?: long(name='ResourceType'),
    resourceTypeCode?: string(name='ResourceTypeCode'),
    userName?: string(name='UserName'),
  }(name='DataLimit'),
  requestId?: string(name='RequestId'),
}

model DescribeDataLimitDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitDetailResponseBody(name='body'),
}

async function describeDataLimitDetail(request: DescribeDataLimitDetailRequest): DescribeDataLimitDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataLimitDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataLimitSetRequest {
  lang?: string(name='Lang', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
}

model DescribeDataLimitSetResponseBody = {
  dataLimitSet?: {
    dataLimitList?: [ 
      {
        checkStatus?: int32(name='CheckStatus'),
        checkStatusName?: string(name='CheckStatusName'),
        connector?: string(name='Connector'),
        gmtCreate?: long(name='GmtCreate'),
        id?: long(name='Id'),
        localName?: string(name='LocalName'),
        parentId?: string(name='ParentId'),
        regionId?: string(name='RegionId'),
        resourceType?: long(name='ResourceType'),
        resourceTypeCode?: string(name='ResourceTypeCode'),
        userName?: string(name='UserName'),
      }
    ](name='DataLimitList'),
    ossBucketList?: [ 
      {
        bucketName?: string(name='BucketName'),
        regionId?: string(name='RegionId'),
      }
    ](name='OssBucketList'),
    regionList?: [ 
      {
        localName?: string(name='LocalName'),
        regionId?: string(name='RegionId'),
      }
    ](name='RegionList'),
    resourceType?: long(name='ResourceType'),
    resourceTypeCode?: string(name='ResourceTypeCode'),
    totalCount?: int32(name='TotalCount'),
  }(name='DataLimitSet'),
  requestId?: string(name='RequestId'),
}

model DescribeDataLimitSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitSetResponseBody(name='body'),
}

async function describeDataLimitSet(request: DescribeDataLimitSetRequest): DescribeDataLimitSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataLimitSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataLimitsRequest {
  auditStatus?: int32(name='AuditStatus', position='Query'),
  checkStatus?: int32(name='CheckStatus', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  datamaskStatus?: int32(name='DatamaskStatus', position='Query'),
  enable?: int32(name='Enable', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentId?: string(name='ParentId', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDataLimitsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      auditStatus?: int32(name='AuditStatus'),
      autoScan?: int32(name='AutoScan'),
      checkStatus?: int32(name='CheckStatus'),
      checkStatusName?: string(name='CheckStatusName'),
      datamaskStatus?: int32(name='DatamaskStatus'),
      dbVersion?: string(name='DbVersion'),
      enable?: int32(name='Enable'),
      engineType?: string(name='EngineType'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      eventStatus?: int32(name='EventStatus'),
      gmtCreate?: long(name='GmtCreate'),
      id?: long(name='Id'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceId?: string(name='InstanceId'),
      lastFinishedTime?: long(name='LastFinishedTime'),
      localName?: string(name='LocalName'),
      logStoreDay?: int32(name='LogStoreDay'),
      nextStartTime?: long(name='NextStartTime'),
      ocrStatus?: int32(name='OcrStatus'),
      parentId?: string(name='ParentId'),
      port?: int32(name='Port'),
      processStatus?: int32(name='ProcessStatus'),
      processTotalCount?: int32(name='ProcessTotalCount'),
      regionId?: string(name='RegionId'),
      resourceType?: long(name='ResourceType'),
      resourceTypeCode?: string(name='ResourceTypeCode'),
      samplingSize?: int32(name='SamplingSize'),
      supportAudit?: boolean(name='SupportAudit'),
      supportDatamask?: boolean(name='SupportDatamask'),
      supportEvent?: boolean(name='SupportEvent'),
      supportOcr?: boolean(name='SupportOcr'),
      supportScan?: boolean(name='SupportScan'),
      tenantName?: string(name='TenantName'),
      totalCount?: int32(name='TotalCount'),
      userName?: string(name='UserName'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitsResponseBody(name='body'),
}

async function describeDataLimits(request: DescribeDataLimitsRequest): DescribeDataLimitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataLimits', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataMaskingRunHistoryRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  dstType?: int32(name='DstType', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  mainProcessId?: long(name='MainProcessId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  srcTableName?: string(name='SrcTableName', position='Query'),
  srcType?: int32(name='SrcType', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: int32(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeDataMaskingRunHistoryResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      conflictCount?: long(name='ConflictCount'),
      dstType?: int32(name='DstType'),
      dstTypeCode?: string(name='DstTypeCode'),
      endTime?: long(name='EndTime'),
      failCode?: string(name='FailCode'),
      failMsg?: string(name='FailMsg'),
      hasDownloadFile?: int32(name='HasDownloadFile'),
      hasSubProcess?: int32(name='HasSubProcess'),
      id?: long(name='Id'),
      maskingCount?: long(name='MaskingCount'),
      percentage?: int32(name='Percentage'),
      runIndex?: int32(name='RunIndex'),
      srcTableName?: string(name='SrcTableName'),
      srcType?: int32(name='SrcType'),
      srcTypeCode?: string(name='SrcTypeCode'),
      startTime?: long(name='StartTime'),
      status?: int32(name='Status'),
      taskId?: string(name='TaskId'),
      type?: int32(name='Type'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataMaskingRunHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataMaskingRunHistoryResponseBody(name='body'),
}

async function describeDataMaskingRunHistory(request: DescribeDataMaskingRunHistoryRequest): DescribeDataMaskingRunHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataMaskingRunHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataMaskingTasksRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  dstType?: int32(name='DstType', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDataMaskingTasksResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      dstPath?: string(name='DstPath'),
      dstType?: int32(name='DstType'),
      dstTypeCode?: string(name='DstTypeCode'),
      gmtCreate?: long(name='GmtCreate'),
      hasUnfinishProcess?: boolean(name='HasUnfinishProcess'),
      id?: long(name='Id'),
      originalTable?: boolean(name='OriginalTable'),
      owner?: string(name='Owner'),
      runCount?: int32(name='RunCount'),
      srcPath?: string(name='SrcPath'),
      srcType?: int32(name='SrcType'),
      srcTypeCode?: string(name='SrcTypeCode'),
      status?: int32(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
      triggerType?: int32(name='TriggerType'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataMaskingTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataMaskingTasksResponseBody(name='body'),
}

async function describeDataMaskingTasks(request: DescribeDataMaskingTasksRequest): DescribeDataMaskingTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataMaskingTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventDetailRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DescribeEventDetailResponseBody = {
  event?: {
    alertTime?: long(name='AlertTime'),
    backed?: boolean(name='Backed'),
    dataInstance?: string(name='DataInstance'),
    dealDisplayName?: string(name='DealDisplayName'),
    dealLoginName?: string(name='DealLoginName'),
    dealReason?: string(name='DealReason'),
    dealTime?: long(name='DealTime'),
    dealUserId?: long(name='DealUserId'),
    detail?: {
      chart?: [ 
        {
          data?: {
            x?: [ string ](name='X'),
            y?: [ string ](name='Y'),
          }(name='Data'),
          label?: string(name='Label'),
          type?: string(name='Type'),
          xLabel?: string(name='XLabel'),
          yLabel?: string(name='YLabel'),
        }
      ](name='Chart'),
      content?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value'),
        }
      ](name='Content'),
      resourceInfo?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value'),
        }
      ](name='ResourceInfo'),
    }(name='Detail'),
    displayName?: string(name='DisplayName'),
    eventTime?: long(name='EventTime'),
    handleInfoList?: [ 
      {
        currentValue?: string(name='CurrentValue'),
        disableTime?: long(name='DisableTime'),
        enableTime?: long(name='EnableTime'),
        handlerName?: string(name='HandlerName'),
        handlerType?: string(name='HandlerType'),
        handlerValue?: int32(name='HandlerValue'),
        id?: long(name='Id'),
        status?: int32(name='Status'),
      }
    ](name='HandleInfoList'),
    id?: long(name='Id'),
    logDetail?: string(name='LogDetail'),
    loginName?: string(name='LoginName'),
    productCode?: string(name='ProductCode'),
    status?: int32(name='Status'),
    statusName?: string(name='StatusName'),
    subTypeCode?: string(name='SubTypeCode'),
    subTypeName?: string(name='SubTypeName'),
    typeCode?: string(name='TypeCode'),
    typeName?: string(name='TypeName'),
    userId?: long(name='UserId'),
  }(name='Event'),
  requestId?: string(name='RequestId'),
}

model DescribeEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventDetailResponseBody(name='body'),
}

async function describeEventDetail(request: DescribeEventDetailRequest): DescribeEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventTypesRequest {
  lang?: string(name='Lang', position='Query'),
  parentTypeId?: long(name='ParentTypeId', position='Query'),
  resourceId?: int32(name='ResourceId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model DescribeEventTypesResponseBody = {
  eventTypeList?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      subTypeList?: [ 
        {
          adaptedProduct?: string(name='AdaptedProduct'),
          code?: string(name='Code'),
          configCode?: string(name='ConfigCode'),
          configContentType?: int32(name='ConfigContentType'),
          configDescription?: string(name='ConfigDescription'),
          configValue?: string(name='ConfigValue'),
          description?: string(name='Description'),
          eventHitCount?: int32(name='EventHitCount'),
          id?: long(name='Id'),
          name?: string(name='Name'),
          status?: int32(name='Status'),
        }
      ](name='SubTypeList'),
    }
  ](name='EventTypeList'),
  requestId?: string(name='RequestId'),
}

model DescribeEventTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventTypesResponseBody(name='body'),
}

async function describeEventTypes(request: DescribeEventTypesRequest): DescribeEventTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  dealUserId?: string(name='DealUserId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  id?: long(name='Id', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  subTypeCode?: string(name='SubTypeCode', position='Query'),
  targetProductCode?: string(name='TargetProductCode', position='Query'),
  typeCode?: string(name='TypeCode', position='Query'),
  userId?: long(name='UserId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DescribeEventsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      alertTime?: long(name='AlertTime'),
      backed?: boolean(name='Backed'),
      dealDisplayName?: string(name='DealDisplayName'),
      dealLoginName?: string(name='DealLoginName'),
      dealTime?: long(name='DealTime'),
      dealUserId?: long(name='DealUserId'),
      displayName?: string(name='DisplayName'),
      eventTime?: long(name='EventTime'),
      id?: long(name='Id'),
      loginName?: string(name='LoginName'),
      productCode?: string(name='ProductCode'),
      status?: int32(name='Status'),
      statusName?: string(name='StatusName'),
      subTypeCode?: string(name='SubTypeCode'),
      subTypeName?: string(name='SubTypeName'),
      targetProductCode?: string(name='TargetProductCode'),
      typeCode?: string(name='TypeCode'),
      typeName?: string(name='TypeName'),
      userId?: long(name='UserId'),
      warnLevel?: int32(name='WarnLevel'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSourcesRequest {
  auditStatus?: int32(name='AuditStatus', position='Query'),
  authStatus?: int32(name='AuthStatus', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  searchType?: string(name='SearchType', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
}

model DescribeInstanceSourcesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      auditStatus?: int32(name='AuditStatus'),
      autoScan?: int32(name='AutoScan'),
      canModifyUserName?: boolean(name='CanModifyUserName'),
      checkStatus?: int32(name='CheckStatus'),
      datamaskStatus?: int32(name='DatamaskStatus'),
      dbName?: string(name='DbName'),
      enable?: int32(name='Enable'),
      engineType?: string(name='EngineType'),
      errorMessage?: string(name='ErrorMessage'),
      gmtCreate?: long(name='GmtCreate'),
      id?: long(name='Id'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceId?: string(name='InstanceId'),
      instanceSize?: long(name='InstanceSize'),
      lastModifyTime?: long(name='LastModifyTime'),
      lastModifyUserId?: string(name='LastModifyUserId'),
      logStoreDay?: int32(name='LogStoreDay'),
      passwordStatus?: int32(name='PasswordStatus'),
      productId?: long(name='ProductId'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      samplingSize?: int32(name='SamplingSize'),
      tenantId?: string(name='TenantId'),
      tenantName?: string(name='TenantName'),
      userName?: string(name='UserName'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstanceSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSourcesResponseBody(name='body'),
}

async function describeInstanceSources(request: DescribeInstanceSourcesRequest): DescribeInstanceSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  featureType?: int32(name='FeatureType', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
}

model DescribeInstancesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      departName?: string(name='DepartName'),
      id?: long(name='Id'),
      instanceDescription?: string(name='InstanceDescription'),
      labelsec?: boolean(name='Labelsec'),
      lastFinishTime?: long(name='LastFinishTime'),
      name?: string(name='Name'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      owner?: string(name='Owner'),
      productCode?: string(name='ProductCode'),
      productId?: string(name='ProductId'),
      protection?: boolean(name='Protection'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      ruleName?: string(name='RuleName'),
      sensitive?: boolean(name='Sensitive'),
      sensitiveCount?: int32(name='SensitiveCount'),
      tenantName?: string(name='TenantName'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssObjectDetailRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DescribeOssObjectDetailResponseBody = {
  ossObjectDetail?: {
    bucketName?: string(name='BucketName'),
    categoryName?: string(name='CategoryName'),
    name?: string(name='Name'),
    regionId?: string(name='RegionId'),
    riskLevelName?: string(name='RiskLevelName'),
    ruleList?: [ 
      {
        categoryName?: string(name='CategoryName'),
        count?: long(name='Count'),
        riskLevelId?: long(name='RiskLevelId'),
        riskLevelName?: string(name='RiskLevelName'),
        ruleName?: string(name='RuleName'),
      }
    ](name='RuleList'),
  }(name='OssObjectDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeOssObjectDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssObjectDetailResponseBody(name='body'),
}

async function describeOssObjectDetail(request: DescribeOssObjectDetailRequest): DescribeOssObjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssObjectDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssObjectsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  lastScanTimeEnd?: long(name='LastScanTimeEnd', position='Query'),
  lastScanTimeStart?: long(name='LastScanTimeStart', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  riskLevelId?: int32(name='RiskLevelId', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
}

model DescribeOssObjectsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      bucketName?: string(name='BucketName'),
      category?: long(name='Category'),
      categoryName?: string(name='CategoryName'),
      fileId?: string(name='FileId'),
      id?: string(name='Id'),
      instanceId?: long(name='InstanceId'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      ruleCount?: int32(name='RuleCount'),
      ruleList?: [ 
        {
          count?: long(name='Count'),
          name?: string(name='Name'),
          riskLevelId?: long(name='RiskLevelId'),
        }
      ](name='RuleList'),
      sensitiveCount?: int32(name='SensitiveCount'),
      size?: long(name='Size'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOssObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssObjectsResponseBody(name='body'),
}

async function describeOssObjects(request: DescribeOssObjectsRequest): DescribeOssObjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssObjects', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackagesRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: long(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
}

model DescribePackagesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      id?: long(name='Id'),
      instanceId?: long(name='InstanceId'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      sensitive?: boolean(name='Sensitive'),
      sensitiveCount?: int32(name='SensitiveCount'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackagesResponseBody(name='body'),
}

async function describePackages(request: DescribePackagesRequest): DescribePackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskLevelsRequest {
  lang?: string(name='Lang', position='Query'),
}

model DescribeRiskLevelsResponseBody = {
  requestId?: string(name='RequestId'),
  riskLevelList?: [ 
    {
      description?: string(name='Description'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      referenceNum?: int32(name='ReferenceNum'),
    }
  ](name='RiskLevelList'),
}

model DescribeRiskLevelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskLevelsResponseBody(name='body'),
}

async function describeRiskLevels(request: DescribeRiskLevelsRequest): DescribeRiskLevelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskLevels', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRulesRequest {
  category?: int32(name='Category', position='Query'),
  contentCategory?: int32(name='ContentCategory', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  customType?: int32(name='CustomType', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  keywordCompatible?: boolean(name='KeywordCompatible', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: int32(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleType?: int32(name='RuleType', position='Query'),
  status?: int32(name='Status', position='Query'),
  warnLevel?: int32(name='WarnLevel', position='Query'),
}

model DescribeRulesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      category?: int32(name='Category'),
      categoryName?: string(name='CategoryName'),
      content?: string(name='Content'),
      contentCategory?: string(name='ContentCategory'),
      customType?: int32(name='CustomType'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      groupId?: string(name='GroupId'),
      hitTotalCount?: int32(name='HitTotalCount'),
      id?: long(name='Id'),
      loginName?: string(name='LoginName'),
      majorKey?: string(name='MajorKey'),
      name?: string(name='Name'),
      productCode?: string(name='ProductCode'),
      productId?: long(name='ProductId'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      statExpress?: string(name='StatExpress'),
      status?: int32(name='Status'),
      target?: string(name='Target'),
      userId?: long(name='UserId'),
      warnLevel?: int32(name='WarnLevel'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRulesResponseBody(name='body'),
}

async function describeRules(request: DescribeRulesRequest): DescribeRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  instanceId?: long(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name?: string(name='Name', position='Query'),
  packageId?: long(name='PackageId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
}

model DescribeTablesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      id?: long(name='Id'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceId?: long(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      productCode?: string(name='ProductCode'),
      productId?: string(name='ProductId'),
      riskLevelId?: long(name='RiskLevelId'),
      riskLevelName?: string(name='RiskLevelName'),
      ruleList?: [ 
        {
          count?: long(name='Count'),
          name?: string(name='Name'),
          riskLevelId?: long(name='RiskLevelId'),
        }
      ](name='RuleList'),
      sensitive?: boolean(name='Sensitive'),
      sensitiveCount?: int32(name='SensitiveCount'),
      sensitiveRatio?: string(name='SensitiveRatio'),
      tenantName?: string(name='TenantName'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserStatusRequest {
  lang?: string(name='Lang', position='Query'),
}

model DescribeUserStatusResponseBody = {
  requestId?: string(name='RequestId'),
  userStatus?: {
    accessKeyId?: string(name='AccessKeyId'),
    authed?: boolean(name='Authed'),
    chargeType?: string(name='ChargeType'),
    instanceId?: string(name='InstanceId'),
    instanceNum?: int32(name='InstanceNum'),
    labStatus?: int32(name='LabStatus'),
    purchased?: boolean(name='Purchased'),
    remainDays?: int32(name='RemainDays'),
    trail?: boolean(name='Trail'),
    useInstanceNum?: int32(name='UseInstanceNum'),
    useOssSize?: long(name='UseOssSize'),
  }(name='UserStatus'),
}

model DescribeUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserStatusResponseBody(name='body'),
}

async function describeUserStatus(request: DescribeUserStatusRequest): DescribeUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model DisableUserConfigRequest {
  code?: string(name='Code', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DisableUserConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableUserConfigResponseBody(name='body'),
}

async function disableUserConfig(request: DisableUserConfigRequest): DisableUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableUserConfig', 'POST', '/', 'json', false, 'json', request);
}

model ExecDatamaskRequest {
  data: string(name='Data', position='Query'),
  lang?: string(name='Lang', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model ExecDatamaskResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecDatamaskResponse = {
  headers: map[string]string(name='headers'),
  body: ExecDatamaskResponseBody(name='body'),
}

async function execDatamask(request: ExecDatamaskRequest): ExecDatamaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecDatamask', 'POST', '/', 'json', false, 'json', request);
}

model ManualTriggerMaskingProcessRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model ManualTriggerMaskingProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model ManualTriggerMaskingProcessResponse = {
  headers: map[string]string(name='headers'),
  body: ManualTriggerMaskingProcessResponseBody(name='body'),
}

async function manualTriggerMaskingProcess(request: ManualTriggerMaskingProcessRequest): ManualTriggerMaskingProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManualTriggerMaskingProcess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDataLimitRequest {
  auditStatus?: int32(name='AuditStatus', position='Query'),
  autoScan?: int32(name='AutoScan', position='Query'),
  engineType?: string(name='EngineType', position='Query'),
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  logStoreDay?: int32(name='LogStoreDay', position='Query'),
  modifyPassword?: boolean(name='ModifyPassword', position='Query'),
  password?: string(name='Password', position='Query'),
  port?: int32(name='Port', position='Query'),
  resourceType: int32(name='ResourceType', position='Query'),
  serviceRegionId?: string(name='ServiceRegionId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model ModifyDataLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataLimitResponseBody(name='body'),
}

async function modifyDataLimit(request: ModifyDataLimitRequest): ModifyDataLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataLimit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefaultLevelRequest {
  defaultId?: long(name='DefaultId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sensitiveIds?: string(name='SensitiveIds', position='Query'),
}

model ModifyDefaultLevelResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefaultLevelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefaultLevelResponseBody(name='body'),
}

async function modifyDefaultLevel(request: ModifyDefaultLevelRequest): ModifyDefaultLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefaultLevel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventStatusRequest {
  backed?: boolean(name='Backed', position='Query'),
  dealReason?: string(name='DealReason', position='Query'),
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  status: int32(name='Status', position='Query'),
}

model ModifyEventStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEventStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEventStatusResponseBody(name='body'),
}

async function modifyEventStatus(request: ModifyEventStatusRequest): ModifyEventStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEventStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEventTypeStatusRequest {
  lang?: string(name='Lang', position='Query'),
  subTypeIds?: string(name='SubTypeIds', position='Query'),
}

model ModifyEventTypeStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEventTypeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEventTypeStatusResponseBody(name='body'),
}

async function modifyEventTypeStatus(request: ModifyEventTypeStatusRequest): ModifyEventTypeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEventTypeStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReportTaskStatusRequest {
  lang?: string(name='Lang', position='Query'),
  reportTaskStatus?: int32(name='ReportTaskStatus', position='Query'),
}

model ModifyReportTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReportTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReportTaskStatusResponseBody(name='body'),
}

async function modifyReportTaskStatus(request: ModifyReportTaskStatusRequest): ModifyReportTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReportTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRuleRequest {
  category?: int32(name='Category', position='Query'),
  content: string(name='Content', position='Query'),
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productId?: long(name='ProductId', position='Query'),
  riskLevelId?: long(name='RiskLevelId', position='Query'),
  ruleType?: int32(name='RuleType', position='Query'),
  warnLevel?: int32(name='WarnLevel', position='Query'),
}

model ModifyRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleResponseBody(name='body'),
}

async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRuleStatusRequest {
  id?: long(name='Id', position='Query'),
  ids?: string(name='Ids', position='Query'),
  lang?: string(name='Lang', position='Query'),
  status: int32(name='Status', position='Query'),
}

model ModifyRuleStatusResponseBody = {
  failedIds?: string(name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model ModifyRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleStatusResponseBody(name='body'),
}

async function modifyRuleStatus(request: ModifyRuleStatusRequest): ModifyRuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model StopMaskingProcessRequest {
  id: long(name='Id', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model StopMaskingProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopMaskingProcessResponse = {
  headers: map[string]string(name='headers'),
  body: StopMaskingProcessResponseBody(name='body'),
}

async function stopMaskingProcess(request: StopMaskingProcessRequest): StopMaskingProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMaskingProcess', 'POST', '/', 'json', false, 'json', request);
}

