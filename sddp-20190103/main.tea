/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-hongkong = 'sddp-api.cn-hongkong.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('sddp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateConfigRequest {
  lang?: string(name='Lang'),
  code?: string(name='Code'),
  description?: string(name='Description'),
  value?: string(name='Value'),
}

model CreateConfigResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigResponseBody(name='body'),
}

async function createConfigWithOptions(request: CreateConfigRequest, runtime: Util.RuntimeOptions): CreateConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConfig', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConfig(request: CreateConfigRequest): CreateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigWithOptions(request, runtime);
}

model CreateDataLimitRequest {
  lang?: string(name='Lang'),
  resourceType?: int32(name='ResourceType'),
  serviceRegionId?: string(name='ServiceRegionId'),
  parentId?: string(name='ParentId'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  auditStatus?: int32(name='AuditStatus'),
  autoScan?: int32(name='AutoScan'),
  logStoreDay?: int32(name='LogStoreDay'),
  engineType?: string(name='EngineType'),
  port?: int32(name='Port'),
  ocrStatus?: int32(name='OcrStatus'),
  eventStatus?: int32(name='EventStatus'),
}

model CreateDataLimitResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataLimitResponseBody(name='body'),
}

async function createDataLimitWithOptions(request: CreateDataLimitRequest, runtime: Util.RuntimeOptions): CreateDataLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDataLimit', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDataLimit(request: CreateDataLimitRequest): CreateDataLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataLimitWithOptions(request, runtime);
}

model CreateRuleRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  category?: int32(name='Category'),
  content?: string(name='Content'),
  statExpress?: string(name='StatExpress'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleType?: int32(name='RuleType'),
  productCode?: string(name='ProductCode'),
  productId?: long(name='ProductId'),
  warnLevel?: int32(name='WarnLevel'),
  description?: string(name='Description'),
  contentCategory?: int32(name='ContentCategory'),
  status?: int32(name='Status'),
  target?: string(name='Target'),
}

model CreateRuleResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRule', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateScanTaskRequest {
  dataLimitId?: long(name='DataLimitId'),
  intervalDay?: int32(name='IntervalDay'),
  runHour?: int32(name='RunHour'),
  runMinute?: int32(name='RunMinute'),
  taskName?: string(name='TaskName'),
  taskUserName?: string(name='TaskUserName'),
  ossScanPath?: string(name='OssScanPath'),
  scanRange?: int32(name='ScanRange'),
  scanRangeContent?: string(name='ScanRangeContent'),
  resourceType?: long(name='ResourceType'),
}

model CreateScanTaskResponseBody = {
  id?: int32(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScanTaskResponseBody(name='body'),
}

async function createScanTaskWithOptions(request: CreateScanTaskRequest, runtime: Util.RuntimeOptions): CreateScanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScanTask', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScanTask(request: CreateScanTaskRequest): CreateScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScanTaskWithOptions(request, runtime);
}

model DeleteDataLimitRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
}

model DeleteDataLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataLimitResponseBody(name='body'),
}

async function deleteDataLimitWithOptions(request: DeleteDataLimitRequest, runtime: Util.RuntimeOptions): DeleteDataLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDataLimit', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDataLimit(request: DeleteDataLimitRequest): DeleteDataLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataLimitWithOptions(request, runtime);
}

model DeleteRuleRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DescribeColumnsRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  tableId?: long(name='TableId'),
  ruleId?: long(name='RuleId'),
  productCode?: string(name='ProductCode'),
  instanceId?: long(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  tableName?: string(name='TableName'),
  ruleName?: string(name='RuleName'),
  sensLevelName?: string(name='SensLevelName'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  riskLevelId?: long(name='RiskLevelId'),
}

model DescribeColumnsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      tableName?: string(name='TableName'),
      dataType?: string(name='DataType'),
      odpsRiskLevelValue?: int32(name='OdpsRiskLevelValue'),
      instanceId?: long(name='InstanceId'),
      riskLevelId?: long(name='RiskLevelId'),
      ruleName?: string(name='RuleName'),
      ruleId?: long(name='RuleId'),
      sensitive?: boolean(name='Sensitive'),
      sensLevelName?: string(name='SensLevelName'),
      instanceName?: string(name='InstanceName'),
      riskLevelName?: string(name='RiskLevelName'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      name?: string(name='Name'),
      tableId?: long(name='TableId'),
      id?: string(name='Id'),
      productCode?: string(name='ProductCode'),
      revisionStatus?: long(name='RevisionStatus'),
      revisionId?: long(name='RevisionId'),
    }
  ](name='Items'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumnsWithOptions(request: DescribeColumnsRequest, runtime: Util.RuntimeOptions): DescribeColumnsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeColumns', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColumnsWithOptions(request, runtime);
}

model DescribeConfigsRequest {
  lang?: string(name='Lang'),
}

model DescribeConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  configList?: [ 
    {
      code?: int32(name='Code'),
      value?: long(name='Value'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      id?: long(name='Id'),
    }
  ](name='ConfigList'),
}

model DescribeConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigsResponseBody(name='body'),
}

async function describeConfigsWithOptions(request: DescribeConfigsRequest, runtime: Util.RuntimeOptions): DescribeConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConfigs', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConfigs(request: DescribeConfigsRequest): DescribeConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConfigsWithOptions(request, runtime);
}

model DescribeDataAssetsRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  riskLevels?: string(name='RiskLevels'),
  ruleId?: long(name='RuleId'),
  rangeId?: int32(name='RangeId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model DescribeDataAssetsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      acl?: string(name='Acl'),
      creationTime?: long(name='CreationTime'),
      dataType?: string(name='DataType'),
      owner?: string(name='Owner'),
      sensitiveRatio?: string(name='SensitiveRatio'),
      protection?: boolean(name='Protection'),
      labelsec?: boolean(name='Labelsec'),
      totalCount?: int32(name='TotalCount'),
      riskLevelId?: long(name='RiskLevelId'),
      ruleName?: string(name='RuleName'),
      sensitive?: boolean(name='Sensitive'),
      objectKey?: string(name='ObjectKey'),
      riskLevelName?: string(name='RiskLevelName'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      productId?: string(name='ProductId'),
      name?: string(name='Name'),
      sensitiveCount?: int32(name='SensitiveCount'),
      id?: string(name='Id'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Items'),
}

model DescribeDataAssetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataAssetsResponseBody(name='body'),
}

async function describeDataAssetsWithOptions(request: DescribeDataAssetsRequest, runtime: Util.RuntimeOptions): DescribeDataAssetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataAssets', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataAssets(request: DescribeDataAssetsRequest): DescribeDataAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataAssetsWithOptions(request, runtime);
}

model DescribeDataLimitDetailRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  networkType?: int32(name='NetworkType'),
}

model DescribeDataLimitDetailResponseBody = {
  requestId?: string(name='RequestId'),
  dataLimit?: {
    localName?: string(name='LocalName'),
    checkStatus?: int32(name='CheckStatus'),
    port?: int32(name='Port'),
    checkStatusName?: string(name='CheckStatusName'),
    regionId?: string(name='RegionId'),
    parentId?: string(name='ParentId'),
    resourceType?: long(name='ResourceType'),
    gmtCreate?: long(name='GmtCreate'),
    resourceTypeCode?: string(name='ResourceTypeCode'),
    userName?: string(name='UserName'),
    id?: long(name='Id'),
  }(name='DataLimit'),
}

model DescribeDataLimitDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitDetailResponseBody(name='body'),
}

async function describeDataLimitDetailWithOptions(request: DescribeDataLimitDetailRequest, runtime: Util.RuntimeOptions): DescribeDataLimitDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataLimitDetail', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataLimitDetail(request: DescribeDataLimitDetailRequest): DescribeDataLimitDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataLimitDetailWithOptions(request, runtime);
}

model DescribeDataLimitsRequest {
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  resourceType?: int32(name='ResourceType'),
  parentId?: string(name='ParentId'),
  serviceRegionId?: string(name='ServiceRegionId'),
  checkStatus?: int32(name='CheckStatus'),
  auditStatus?: int32(name='AuditStatus'),
  engineType?: string(name='EngineType'),
  datamaskStatus?: int32(name='DatamaskStatus'),
  enable?: int32(name='Enable'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeDataLimitsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      supportEvent?: boolean(name='SupportEvent'),
      errorMessage?: string(name='ErrorMessage'),
      checkStatus?: int32(name='CheckStatus'),
      localName?: string(name='LocalName'),
      tenantName?: string(name='TenantName'),
      nextStartTime?: long(name='NextStartTime'),
      port?: int32(name='Port'),
      checkStatusName?: string(name='CheckStatusName'),
      samplingSize?: int32(name='SamplingSize'),
      parentId?: string(name='ParentId'),
      datamaskStatus?: int32(name='DatamaskStatus'),
      processTotalCount?: int32(name='ProcessTotalCount'),
      resourceType?: long(name='ResourceType'),
      errorCode?: string(name='ErrorCode'),
      ocrStatus?: int32(name='OcrStatus'),
      logStoreDay?: int32(name='LogStoreDay'),
      eventStatus?: int32(name='EventStatus'),
      supportScan?: boolean(name='SupportScan'),
      lastFinishedTime?: long(name='LastFinishedTime'),
      userName?: string(name='UserName'),
      auditStatus?: int32(name='AuditStatus'),
      supportOcr?: boolean(name='SupportOcr'),
      engineType?: string(name='EngineType'),
      instanceId?: string(name='InstanceId'),
      totalCount?: int32(name='TotalCount'),
      instanceDescription?: string(name='InstanceDescription'),
      dbVersion?: string(name='DbVersion'),
      regionId?: string(name='RegionId'),
      gmtCreate?: long(name='GmtCreate'),
      supportAudit?: boolean(name='SupportAudit'),
      autoScan?: int32(name='AutoScan'),
      resourceTypeCode?: string(name='ResourceTypeCode'),
      supportDatamask?: boolean(name='SupportDatamask'),
      processStatus?: int32(name='ProcessStatus'),
      id?: long(name='Id'),
      enable?: int32(name='Enable'),
    }
  ](name='Items'),
}

model DescribeDataLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitsResponseBody(name='body'),
}

async function describeDataLimitsWithOptions(request: DescribeDataLimitsRequest, runtime: Util.RuntimeOptions): DescribeDataLimitsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataLimits', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataLimits(request: DescribeDataLimitsRequest): DescribeDataLimitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataLimitsWithOptions(request, runtime);
}

model DescribeDataLimitSetRequest {
  lang?: string(name='Lang'),
  resourceType?: int32(name='ResourceType'),
  parentId?: string(name='ParentId'),
}

model DescribeDataLimitSetResponseBody = {
  requestId?: string(name='RequestId'),
  dataLimitSet?: {
    resourceTypeCode?: string(name='ResourceTypeCode'),
    resourceType?: long(name='ResourceType'),
    totalCount?: int32(name='TotalCount'),
    dataLimitList?: [ 
      {
        supportEvent?: boolean(name='SupportEvent'),
        localName?: string(name='LocalName'),
        checkStatus?: int32(name='CheckStatus'),
        connector?: string(name='Connector'),
        port?: int32(name='Port'),
        checkStatusName?: string(name='CheckStatusName'),
        regionId?: string(name='RegionId'),
        parentId?: string(name='ParentId'),
        resourceType?: long(name='ResourceType'),
        logStoreDay?: int32(name='LogStoreDay'),
        eventStatus?: int32(name='EventStatus'),
        gmtCreate?: long(name='GmtCreate'),
        resourceTypeCode?: string(name='ResourceTypeCode'),
        userName?: string(name='UserName'),
        id?: long(name='Id'),
        auditStatus?: int32(name='AuditStatus'),
      }
    ](name='DataLimitList'),
    ossBucketList?: [ 
      {
        regionId?: string(name='RegionId'),
        bucketName?: string(name='BucketName'),
      }
    ](name='OssBucketList'),
    regionList?: [ 
      {
        regionId?: string(name='RegionId'),
        localName?: string(name='LocalName'),
      }
    ](name='RegionList'),
  }(name='DataLimitSet'),
}

model DescribeDataLimitSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataLimitSetResponseBody(name='body'),
}

async function describeDataLimitSetWithOptions(request: DescribeDataLimitSetRequest, runtime: Util.RuntimeOptions): DescribeDataLimitSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataLimitSet', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataLimitSet(request: DescribeDataLimitSetRequest): DescribeDataLimitSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataLimitSetWithOptions(request, runtime);
}

model DescribeDataMaskingRunHistoryRequest {
  lang?: string(name='Lang'),
  taskId?: string(name='TaskId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  status?: int32(name='Status'),
  srcType?: int32(name='SrcType'),
  dstType?: int32(name='DstType'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  mainProcessId?: long(name='MainProcessId'),
  srcTableName?: string(name='SrcTableName'),
}

model DescribeDataMaskingRunHistoryResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      srcType?: int32(name='SrcType'),
      srcTableName?: string(name='SrcTableName'),
      maskingCount?: long(name='MaskingCount'),
      percentage?: int32(name='Percentage'),
      dstType?: int32(name='DstType'),
      failMsg?: string(name='FailMsg'),
      failCode?: string(name='FailCode'),
      conflictCount?: long(name='ConflictCount'),
      dstTypeCode?: string(name='DstTypeCode'),
      endTime?: long(name='EndTime'),
      runIndex?: int32(name='RunIndex'),
      startTime?: long(name='StartTime'),
      hasSubProcess?: int32(name='HasSubProcess'),
      hasDownloadFile?: int32(name='HasDownloadFile'),
      taskId?: string(name='TaskId'),
      srcTypeCode?: string(name='SrcTypeCode'),
      id?: long(name='Id'),
    }
  ](name='Items'),
}

model DescribeDataMaskingRunHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataMaskingRunHistoryResponseBody(name='body'),
}

async function describeDataMaskingRunHistoryWithOptions(request: DescribeDataMaskingRunHistoryRequest, runtime: Util.RuntimeOptions): DescribeDataMaskingRunHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataMaskingRunHistory', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataMaskingRunHistory(request: DescribeDataMaskingRunHistoryRequest): DescribeDataMaskingRunHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataMaskingRunHistoryWithOptions(request, runtime);
}

model DescribeDataMaskingTasksRequest {
  lang?: string(name='Lang'),
  searchKey?: string(name='SearchKey'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  dstType?: int32(name='DstType'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model DescribeDataMaskingTasksResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      status?: int32(name='Status'),
      owner?: string(name='Owner'),
      taskName?: string(name='TaskName'),
      srcType?: int32(name='SrcType'),
      dstType?: int32(name='DstType'),
      hasUnfinishProcess?: boolean(name='HasUnfinishProcess'),
      originalTable?: boolean(name='OriginalTable'),
      triggerType?: int32(name='TriggerType'),
      dstTypeCode?: string(name='DstTypeCode'),
      runCount?: int32(name='RunCount'),
      gmtCreate?: long(name='GmtCreate'),
      taskId?: string(name='TaskId'),
      dstPath?: string(name='DstPath'),
      srcTypeCode?: string(name='SrcTypeCode'),
      id?: long(name='Id'),
      srcPath?: string(name='SrcPath'),
    }
  ](name='Items'),
}

model DescribeDataMaskingTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataMaskingTasksResponseBody(name='body'),
}

async function describeDataMaskingTasksWithOptions(request: DescribeDataMaskingTasksRequest, runtime: Util.RuntimeOptions): DescribeDataMaskingTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataMaskingTasks', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataMaskingTasks(request: DescribeDataMaskingTasksRequest): DescribeDataMaskingTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataMaskingTasksWithOptions(request, runtime);
}

model DescribeEventDetailRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
}

model DescribeEventDetailResponseBody = {
  requestId?: string(name='RequestId'),
  event?: {
    displayName?: string(name='DisplayName'),
    status?: int32(name='Status'),
    dealReason?: string(name='DealReason'),
    userId?: long(name='UserId'),
    statusName?: string(name='StatusName'),
    dealTime?: long(name='DealTime'),
    dealLoginName?: string(name='DealLoginName'),
    subTypeName?: string(name='SubTypeName'),
    backed?: boolean(name='Backed'),
    dataInstance?: string(name='DataInstance'),
    eventTime?: long(name='EventTime'),
    loginName?: string(name='LoginName'),
    subTypeCode?: string(name='SubTypeCode'),
    logDetail?: string(name='LogDetail'),
    typeCode?: string(name='TypeCode'),
    alertTime?: long(name='AlertTime'),
    dealUserId?: long(name='DealUserId'),
    typeName?: string(name='TypeName'),
    dealDisplayName?: string(name='DealDisplayName'),
    id?: long(name='Id'),
    productCode?: string(name='ProductCode'),
    handleInfoList?: [ 
      {
        status?: int32(name='Status'),
        enableTime?: long(name='EnableTime'),
        handlerValue?: int32(name='HandlerValue'),
        disableTime?: long(name='DisableTime'),
        handlerName?: string(name='HandlerName'),
        handlerType?: string(name='HandlerType'),
        currentValue?: string(name='CurrentValue'),
        id?: long(name='Id'),
      }
    ](name='HandleInfoList'),
    detail?: {
      content?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value'),
        }
      ](name='Content'),
      chart?: [ 
        {
          type?: string(name='Type'),
          label?: string(name='Label'),
          XLabel?: string(name='XLabel'),
          YLabel?: string(name='YLabel'),
          data?: {
            y?: string(name='Y'),
            x?: string(name='X'),
          }(name='Data'),
        }
      ](name='Chart'),
      resourceInfo?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value'),
        }
      ](name='ResourceInfo'),
    }(name='Detail'),
  }(name='Event'),
}

model DescribeEventDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventDetailResponseBody(name='body'),
}

async function describeEventDetailWithOptions(request: DescribeEventDetailRequest, runtime: Util.RuntimeOptions): DescribeEventDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEventDetail', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEventDetail(request: DescribeEventDetailRequest): DescribeEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventDetailWithOptions(request, runtime);
}

model DescribeEventsRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  userId?: long(name='UserId'),
  dealUserId?: string(name='DealUserId'),
  status?: string(name='Status'),
  typeCode?: string(name='TypeCode'),
  subTypeCode?: string(name='SubTypeCode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  instanceName?: string(name='InstanceName'),
  productCode?: string(name='ProductCode'),
  targetProductCode?: string(name='TargetProductCode'),
  userName?: string(name='UserName'),
}

model DescribeEventsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      displayName?: string(name='DisplayName'),
      status?: int32(name='Status'),
      warnLevel?: int32(name='WarnLevel'),
      userId?: long(name='UserId'),
      statusName?: string(name='StatusName'),
      dealTime?: long(name='DealTime'),
      dealLoginName?: string(name='DealLoginName'),
      subTypeName?: string(name='SubTypeName'),
      backed?: boolean(name='Backed'),
      eventTime?: long(name='EventTime'),
      loginName?: string(name='LoginName'),
      subTypeCode?: string(name='SubTypeCode'),
      targetProductCode?: string(name='TargetProductCode'),
      typeCode?: string(name='TypeCode'),
      alertTime?: long(name='AlertTime'),
      dealUserId?: long(name='DealUserId'),
      typeName?: string(name='TypeName'),
      dealDisplayName?: string(name='DealDisplayName'),
      id?: long(name='Id'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Items'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvents', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventsWithOptions(request, runtime);
}

model DescribeEventTypesRequest {
  lang?: string(name='Lang'),
  parentTypeId?: long(name='ParentTypeId'),
  resourceId?: int32(name='ResourceId'),
  status?: int32(name='Status'),
}

model DescribeEventTypesResponseBody = {
  requestId?: string(name='RequestId'),
  eventTypeList?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      id?: long(name='Id'),
      subTypeList?: [ 
        {
          status?: int32(name='Status'),
          description?: string(name='Description'),
          configContentType?: int32(name='ConfigContentType'),
          eventHitCount?: int32(name='EventHitCount'),
          configValue?: string(name='ConfigValue'),
          configCode?: string(name='ConfigCode'),
          code?: string(name='Code'),
          configDescription?: string(name='ConfigDescription'),
          name?: string(name='Name'),
          adaptedProduct?: string(name='AdaptedProduct'),
          id?: long(name='Id'),
        }
      ](name='SubTypeList'),
    }
  ](name='EventTypeList'),
}

model DescribeEventTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventTypesResponseBody(name='body'),
}

async function describeEventTypesWithOptions(request: DescribeEventTypesRequest, runtime: Util.RuntimeOptions): DescribeEventTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEventTypes', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEventTypes(request: DescribeEventTypesRequest): DescribeEventTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventTypesWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  productId?: long(name='ProductId'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleId?: long(name='RuleId'),
  serviceRegionId?: string(name='ServiceRegionId'),
  featureType?: int32(name='FeatureType'),
  productCode?: string(name='ProductCode'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  lastFinishTimeStart?: long(name='LastFinishTimeStart'),
  lastFinishTimeEnd?: long(name='LastFinishTimeEnd'),
  userId?: long(name='UserId'),
  userType?: int32(name='UserType'),
  sensLevelName?: string(name='SensLevelName'),
  source?: string(name='Source'),
  checkStatus?: int32(name='CheckStatus'),
  nameAccurate?: string(name='NameAccurate'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeInstancesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      acl?: string(name='Acl'),
      lastFinishTime?: long(name='LastFinishTime'),
      owner?: string(name='Owner'),
      tenantName?: string(name='TenantName'),
      protection?: boolean(name='Protection'),
      departName?: string(name='DepartName'),
      labelsec?: boolean(name='Labelsec'),
      riskLevelId?: long(name='RiskLevelId'),
      productId?: string(name='ProductId'),
      name?: string(name='Name'),
      totalCount?: int32(name='TotalCount'),
      instanceDescription?: string(name='InstanceDescription'),
      ruleName?: string(name='RuleName'),
      sensitive?: boolean(name='Sensitive'),
      riskLevelName?: string(name='RiskLevelName'),
      odpsRiskLevelName?: string(name='OdpsRiskLevelName'),
      sensitiveCount?: int32(name='SensitiveCount'),
      id?: long(name='Id'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Items'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstanceSourcesRequest {
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  serviceRegionId?: string(name='ServiceRegionId'),
  engineType?: string(name='EngineType'),
  instanceId?: string(name='InstanceId'),
  dbName?: string(name='DbName'),
  productId?: long(name='ProductId'),
  authed?: boolean(name='Authed'),
}

model DescribeInstanceSourcesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      lastModifyUserId?: string(name='LastModifyUserId'),
      passwordStatus?: int32(name='PasswordStatus'),
      engineType?: string(name='EngineType'),
      tenantName?: string(name='TenantName'),
      instanceId?: string(name='InstanceId'),
      instanceDescription?: string(name='InstanceDescription'),
      dataLimitId?: long(name='DataLimitId'),
      regionId?: string(name='RegionId'),
      dbName?: string(name='DbName'),
      lastModifyTime?: long(name='LastModifyTime'),
      regionName?: string(name='RegionName'),
      canModifyUserName?: boolean(name='CanModifyUserName'),
      logStoreDay?: int32(name='LogStoreDay'),
      gmtCreate?: long(name='GmtCreate'),
      autoScan?: int32(name='AutoScan'),
      productId?: long(name='ProductId'),
      instanceSize?: long(name='InstanceSize'),
      userName?: string(name='UserName'),
      auditStatus?: int32(name='AuditStatus'),
      id?: long(name='Id'),
      tenantId?: string(name='TenantId'),
      enable?: int32(name='Enable'),
    }
  ](name='Items'),
}

model DescribeInstanceSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSourcesResponseBody(name='body'),
}

async function describeInstanceSourcesWithOptions(request: DescribeInstanceSourcesRequest, runtime: Util.RuntimeOptions): DescribeInstanceSourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSources', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSources(request: DescribeInstanceSourcesRequest): DescribeInstanceSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSourcesWithOptions(request, runtime);
}

model DescribeOssObjectDetailRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
}

model DescribeOssObjectDetailResponseBody = {
  requestId?: string(name='RequestId'),
  ossObjectDetail?: {
    categoryName?: string(name='CategoryName'),
    name?: string(name='Name'),
    bucketName?: string(name='BucketName'),
    riskLevelName?: string(name='RiskLevelName'),
    regionId?: string(name='RegionId'),
    ruleList?: [ 
      {
        riskLevelName?: string(name='RiskLevelName'),
        categoryName?: string(name='CategoryName'),
        riskLevelId?: long(name='RiskLevelId'),
        count?: long(name='Count'),
        ruleName?: string(name='RuleName'),
      }
    ](name='RuleList'),
  }(name='OssObjectDetail'),
}

model DescribeOssObjectDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssObjectDetailResponseBody(name='body'),
}

async function describeOssObjectDetailWithOptions(request: DescribeOssObjectDetailRequest, runtime: Util.RuntimeOptions): DescribeOssObjectDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOssObjectDetail', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOssObjectDetail(request: DescribeOssObjectDetailRequest): DescribeOssObjectDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssObjectDetailWithOptions(request, runtime);
}

model DescribeOssObjectsRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  riskLevelId?: int32(name='RiskLevelId'),
  ruleId?: long(name='RuleId'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  serviceRegionId?: string(name='ServiceRegionId'),
  lastScanTimeStart?: long(name='LastScanTimeStart'),
  lastScanTimeEnd?: long(name='LastScanTimeEnd'),
}

model DescribeOssObjectsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      instanceId?: long(name='InstanceId'),
      categoryName?: string(name='CategoryName'),
      riskLevelId?: long(name='RiskLevelId'),
      regionId?: string(name='RegionId'),
      fileId?: string(name='FileId'),
      size?: long(name='Size'),
      bucketName?: string(name='BucketName'),
      riskLevelName?: string(name='RiskLevelName'),
      category?: long(name='Category'),
      name?: string(name='Name'),
      ruleCount?: int32(name='RuleCount'),
      sensitiveCount?: int32(name='SensitiveCount'),
      id?: string(name='Id'),
      ruleList?: [ 
        {
          name?: string(name='Name'),
          riskLevelId?: long(name='RiskLevelId'),
          count?: long(name='Count'),
        }
      ](name='RuleList'),
    }
  ](name='Items'),
}

model DescribeOssObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssObjectsResponseBody(name='body'),
}

async function describeOssObjectsWithOptions(request: DescribeOssObjectsRequest, runtime: Util.RuntimeOptions): DescribeOssObjectsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOssObjects', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOssObjects(request: DescribeOssObjectsRequest): DescribeOssObjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssObjectsWithOptions(request, runtime);
}

model DescribePackagesRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  productId?: long(name='ProductId'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleId?: long(name='RuleId'),
  instanceId?: long(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model DescribePackagesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      sensitive?: boolean(name='Sensitive'),
      owner?: string(name='Owner'),
      riskLevelName?: string(name='RiskLevelName'),
      instanceId?: long(name='InstanceId'),
      totalCount?: int32(name='TotalCount'),
      name?: string(name='Name'),
      sensitiveCount?: int32(name='SensitiveCount'),
      riskLevelId?: long(name='RiskLevelId'),
      id?: long(name='Id'),
    }
  ](name='Items'),
}

model DescribePackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackagesResponseBody(name='body'),
}

async function describePackagesWithOptions(request: DescribePackagesRequest, runtime: Util.RuntimeOptions): DescribePackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePackages', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePackages(request: DescribePackagesRequest): DescribePackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackagesWithOptions(request, runtime);
}

model DescribeRiskLevelsRequest {
  lang?: string(name='Lang'),
}

model DescribeRiskLevelsResponseBody = {
  requestId?: string(name='RequestId'),
  riskLevelList?: [ 
    {
      name?: string(name='Name'),
      description?: string(name='Description'),
      alias?: string(name='Alias'),
      id?: long(name='Id'),
      referenceNum?: int32(name='ReferenceNum'),
    }
  ](name='RiskLevelList'),
}

model DescribeRiskLevelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskLevelsResponseBody(name='body'),
}

async function describeRiskLevelsWithOptions(request: DescribeRiskLevelsRequest, runtime: Util.RuntimeOptions): DescribeRiskLevelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskLevels', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskLevels(request: DescribeRiskLevelsRequest): DescribeRiskLevelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskLevelsWithOptions(request, runtime);
}

model DescribeRulesRequest {
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  customType?: int32(name='CustomType'),
  category?: int32(name='Category'),
  name?: string(name='Name'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleType?: int32(name='RuleType'),
  productCode?: int32(name='ProductCode'),
  productId?: long(name='ProductId'),
  warnLevel?: int32(name='WarnLevel'),
  contentCategory?: int32(name='ContentCategory'),
  status?: int32(name='Status'),
  keywordCompatible?: boolean(name='KeywordCompatible'),
  groupId?: string(name='GroupId'),
}

model DescribeRulesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      displayName?: string(name='DisplayName'),
      status?: int32(name='Status'),
      warnLevel?: int32(name='WarnLevel'),
      userId?: long(name='UserId'),
      statExpress?: string(name='StatExpress'),
      gmtModified?: long(name='GmtModified'),
      riskLevelId?: long(name='RiskLevelId'),
      description?: string(name='Description'),
      productId?: long(name='ProductId'),
      name?: string(name='Name'),
      content?: string(name='Content'),
      target?: string(name='Target'),
      loginName?: string(name='LoginName'),
      categoryName?: string(name='CategoryName'),
      contentCategory?: string(name='ContentCategory'),
      hitTotalCount?: int32(name='HitTotalCount'),
      groupId?: string(name='GroupId'),
      customType?: int32(name='CustomType'),
      riskLevelName?: string(name='RiskLevelName'),
      gmtCreate?: long(name='GmtCreate'),
      category?: int32(name='Category'),
      majorKey?: string(name='MajorKey'),
      id?: long(name='Id'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Items'),
}

model DescribeRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRulesResponseBody(name='body'),
}

async function describeRulesWithOptions(request: DescribeRulesRequest, runtime: Util.RuntimeOptions): DescribeRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRules', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRules(request: DescribeRulesRequest): DescribeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRulesWithOptions(request, runtime);
}

model DescribeTablesRequest {
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  productId?: long(name='ProductId'),
  productCode?: string(name='ProductCode'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleId?: long(name='RuleId'),
  instanceId?: long(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  ruleName?: string(name='RuleName'),
  sensLevelName?: string(name='SensLevelName'),
  packageId?: long(name='PackageId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  lastScanTimeStart?: long(name='LastScanTimeStart'),
  lastScanTimeEnd?: long(name='LastScanTimeEnd'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  instanceDescription?: string(name='InstanceDescription'),
}

model DescribeTablesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  items?: [ 
    {
      creationTime?: long(name='CreationTime'),
      owner?: string(name='Owner'),
      sensitiveRatio?: string(name='SensitiveRatio'),
      tenantName?: string(name='TenantName'),
      riskLevelId?: long(name='RiskLevelId'),
      instanceName?: string(name='InstanceName'),
      productId?: string(name='ProductId'),
      name?: string(name='Name'),
      instanceId?: long(name='InstanceId'),
      totalCount?: int32(name='TotalCount'),
      instanceDescription?: string(name='InstanceDescription'),
      sensitive?: boolean(name='Sensitive'),
      riskLevelName?: string(name='RiskLevelName'),
      sensitiveCount?: int32(name='SensitiveCount'),
      id?: long(name='Id'),
      productCode?: string(name='ProductCode'),
      ruleList?: [ 
        {
          displayName?: string(name='DisplayName'),
          name?: string(name='Name'),
          riskLevelId?: long(name='RiskLevelId'),
          count?: long(name='Count'),
        }
      ](name='RuleList'),
    }
  ](name='Items'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTables', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DescribeUserStatusRequest {
  lang?: string(name='Lang'),
}

model DescribeUserStatusResponseBody = {
  requestId?: string(name='RequestId'),
  userStatus?: {
    useOssSize?: long(name='UseOssSize'),
    useInstanceNum?: int32(name='UseInstanceNum'),
    instanceNum?: int32(name='InstanceNum'),
    chargeType?: string(name='ChargeType'),
    incSensitiveTables?: long(name='IncSensitiveTables'),
    auditUpgradeStatus?: boolean(name='AuditUpgradeStatus'),
    dataMaskTasks?: long(name='DataMaskTasks'),
    authed?: boolean(name='Authed'),
    labStatus?: int32(name='LabStatus'),
    odpsSet?: boolean(name='OdpsSet'),
    ossBucketSet?: boolean(name='OssBucketSet'),
    sensitiveTable?: long(name='SensitiveTable'),
    remainDays?: int32(name='RemainDays'),
    totalDataMaskColumns?: long(name='TotalDataMaskColumns'),
    datamaskColumns?: long(name='DatamaskColumns'),
    authProductList?: string(name='AuthProductList'),
    trail?: boolean(name='Trail'),
    divulgeCount?: long(name='DivulgeCount'),
    rdsSet?: boolean(name='RdsSet'),
    dbAuditStatus?: int32(name='DbAuditStatus'),
    renewStatus?: boolean(name='RenewStatus'),
    sensitiveObjects?: long(name='SensitiveObjects'),
    dataMaskColumns?: long(name='DataMaskColumns'),
    dlpTotalCount?: long(name='DlpTotalCount'),
    sensitiveObject?: long(name='SensitiveObject'),
    dlpCount?: long(name='DlpCount'),
    instanceId?: string(name='InstanceId'),
    accessKeyId?: string(name='AccessKeyId'),
    ossSize?: long(name='OssSize'),
    sensitiveTotalTop?: string(name='SensitiveTotalTop'),
    sensitiveTables?: long(name='SensitiveTables'),
    sensitiveTop?: string(name='SensitiveTop'),
    buyed?: boolean(name='Buyed'),
    incSensitiveObjects?: long(name='IncSensitiveObjects'),
    instanceStatus?: int32(name='InstanceStatus'),
    assetScanned?: boolean(name='AssetScanned'),
    alarmCount?: long(name='AlarmCount'),
    displayTime?: string(name='DisplayTime'),
  }(name='UserStatus'),
}

model DescribeUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserStatusResponseBody(name='body'),
}

async function describeUserStatusWithOptions(request: DescribeUserStatusRequest, runtime: Util.RuntimeOptions): DescribeUserStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserStatus', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserStatus(request: DescribeUserStatusRequest): DescribeUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserStatusWithOptions(request, runtime);
}

model DisableUserConfigRequest {
  lang?: string(name='Lang'),
  code?: string(name='Code'),
}

model DisableUserConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableUserConfigResponseBody(name='body'),
}

async function disableUserConfigWithOptions(request: DisableUserConfigRequest, runtime: Util.RuntimeOptions): DisableUserConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableUserConfig', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableUserConfig(request: DisableUserConfigRequest): DisableUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableUserConfigWithOptions(request, runtime);
}

model ExecDatamaskRequest {
  templateId?: long(name='TemplateId'),
  data?: string(name='Data'),
}

model ExecDatamaskResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExecDatamaskResponse = {
  headers: map[string]string(name='headers'),
  body: ExecDatamaskResponseBody(name='body'),
}

async function execDatamaskWithOptions(request: ExecDatamaskRequest, runtime: Util.RuntimeOptions): ExecDatamaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecDatamask', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function execDatamask(request: ExecDatamaskRequest): ExecDatamaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return execDatamaskWithOptions(request, runtime);
}

model ManualTriggerMaskingProcessRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
}

model ManualTriggerMaskingProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model ManualTriggerMaskingProcessResponse = {
  headers: map[string]string(name='headers'),
  body: ManualTriggerMaskingProcessResponseBody(name='body'),
}

async function manualTriggerMaskingProcessWithOptions(request: ManualTriggerMaskingProcessRequest, runtime: Util.RuntimeOptions): ManualTriggerMaskingProcessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ManualTriggerMaskingProcess', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function manualTriggerMaskingProcess(request: ManualTriggerMaskingProcessRequest): ManualTriggerMaskingProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return manualTriggerMaskingProcessWithOptions(request, runtime);
}

model ModifyDataLimitRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  resourceType?: int32(name='ResourceType'),
  serviceRegionId?: string(name='ServiceRegionId'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  modifyPassword?: boolean(name='ModifyPassword'),
  auditStatus?: int32(name='AuditStatus'),
  logStoreDay?: int32(name='LogStoreDay'),
  engineType?: string(name='EngineType'),
  port?: int32(name='Port'),
  autoScan?: int32(name='AutoScan'),
}

model ModifyDataLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataLimitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataLimitResponseBody(name='body'),
}

async function modifyDataLimitWithOptions(request: ModifyDataLimitRequest, runtime: Util.RuntimeOptions): ModifyDataLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDataLimit', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDataLimit(request: ModifyDataLimitRequest): ModifyDataLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataLimitWithOptions(request, runtime);
}

model ModifyDefaultLevelRequest {
  lang?: string(name='Lang'),
  defaultId?: long(name='DefaultId'),
  sensitiveIds?: string(name='SensitiveIds'),
}

model ModifyDefaultLevelResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefaultLevelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefaultLevelResponseBody(name='body'),
}

async function modifyDefaultLevelWithOptions(request: ModifyDefaultLevelRequest, runtime: Util.RuntimeOptions): ModifyDefaultLevelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDefaultLevel', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDefaultLevel(request: ModifyDefaultLevelRequest): ModifyDefaultLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefaultLevelWithOptions(request, runtime);
}

model ModifyEventStatusRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  backed?: boolean(name='Backed'),
  dealReason?: string(name='DealReason'),
  status?: int32(name='Status'),
}

model ModifyEventStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEventStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEventStatusResponseBody(name='body'),
}

async function modifyEventStatusWithOptions(request: ModifyEventStatusRequest, runtime: Util.RuntimeOptions): ModifyEventStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEventStatus', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEventStatus(request: ModifyEventStatusRequest): ModifyEventStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEventStatusWithOptions(request, runtime);
}

model ModifyEventTypeStatusRequest {
  lang?: string(name='Lang'),
  subTypeIds?: string(name='SubTypeIds'),
}

model ModifyEventTypeStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEventTypeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEventTypeStatusResponseBody(name='body'),
}

async function modifyEventTypeStatusWithOptions(request: ModifyEventTypeStatusRequest, runtime: Util.RuntimeOptions): ModifyEventTypeStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEventTypeStatus', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEventTypeStatus(request: ModifyEventTypeStatusRequest): ModifyEventTypeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEventTypeStatusWithOptions(request, runtime);
}

model ModifyRuleRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  customType?: int32(name='CustomType'),
  name?: string(name='Name'),
  category?: int32(name='Category'),
  content?: string(name='Content'),
  statExpress?: string(name='StatExpress'),
  riskLevelId?: long(name='RiskLevelId'),
  ruleType?: int32(name='RuleType'),
  productCode?: string(name='ProductCode'),
  productId?: long(name='ProductId'),
  warnLevel?: int32(name='WarnLevel'),
  description?: string(name='Description'),
  contentCategory?: int32(name='ContentCategory'),
  target?: string(name='Target'),
}

model ModifyRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleResponseBody(name='body'),
}

async function modifyRuleWithOptions(request: ModifyRuleRequest, runtime: Util.RuntimeOptions): ModifyRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRule', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRuleWithOptions(request, runtime);
}

model ModifyRuleStatusRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  ids?: string(name='Ids'),
  status?: int32(name='Status'),
}

model ModifyRuleStatusResponseBody = {
  failedIds?: string(name='FailedIds'),
  requestId?: string(name='RequestId'),
}

model ModifyRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleStatusResponseBody(name='body'),
}

async function modifyRuleStatusWithOptions(request: ModifyRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyRuleStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRuleStatus', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRuleStatus(request: ModifyRuleStatusRequest): ModifyRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRuleStatusWithOptions(request, runtime);
}

model StopMaskingProcessRequest {
  lang?: string(name='Lang'),
  id?: long(name='Id'),
  featureType?: int32(name='FeatureType'),
}

model StopMaskingProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopMaskingProcessResponse = {
  headers: map[string]string(name='headers'),
  body: StopMaskingProcessResponseBody(name='body'),
}

async function stopMaskingProcessWithOptions(request: StopMaskingProcessRequest, runtime: Util.RuntimeOptions): StopMaskingProcessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopMaskingProcess', '2019-01-03', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopMaskingProcess(request: StopMaskingProcessRequest): StopMaskingProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMaskingProcessWithOptions(request, runtime);
}

