/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'quickbi-public';
  @version = '2020-08-02';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserTagMetaRequest {
  tagDescription?: string(name='TagDescription', position='Query'),
  tagName: string(name='TagName', position='Query'),
}

model AddUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: string(name='Result', example='0822a7d9-****-****-****-f20163ab9b0d'),
  success?: boolean(name='Success', example='true'),
}

model AddUserTagMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserTagMetaResponseBody(name='body'),
}

async function addUserTagMeta(request: AddUserTagMetaRequest): AddUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserTagMetaRequest {
  tagId: string(name='TagId', example='pop_001', position='Query'),
}

model DeleteUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteUserTagMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserTagMetaResponseBody(name='body'),
}

async function deleteUserTagMeta(request: DeleteUserTagMetaRequest): DeleteUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserTagMetaListRequest {
}

model QueryUserTagMetaListResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      tagDescription?: string(name='TagDescription'),
      tagId?: string(name='TagId', example='pop_001'),
      tagName?: string(name='TagName'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model QueryUserTagMetaListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserTagMetaListResponseBody(name='body'),
}

async function queryUserTagMetaList(request: QueryUserTagMetaListRequest): QueryUserTagMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserTagMetaList', 'GET', '/', 'json', false, 'json', request);
}

model QueryUserTagValueListRequest {
  userId: string(name='UserId', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model QueryUserTagValueListResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      tagId?: string(name='TagId', example='pop_001'),
      tagName?: string(name='TagName'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model QueryUserTagValueListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserTagValueListResponseBody(name='body'),
}

async function queryUserTagValueList(request: QueryUserTagValueListRequest): QueryUserTagValueListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserTagValueList', 'GET', '/', 'json', false, 'json', request);
}

model UpdateUserTagMetaRequest {
  tagDescription?: string(name='TagDescription', position='Query'),
  tagId: string(name='TagId', example='e82f6c6c0333431bad0225b2f85e****', position='Query'),
  tagName: string(name='TagName', position='Query'),
}

model UpdateUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserTagMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserTagMetaResponseBody(name='body'),
}

async function updateUserTagMeta(request: UpdateUserTagMetaRequest): UpdateUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserTagValueRequest {
  tagId: string(name='TagId', example='pop_001', position='Query'),
  tagValue: string(name='TagValue', position='Query'),
  userId: string(name='UserId', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model UpdateUserTagValueResponseBody = {
  requestId?: string(name='RequestId', example='46e5374665ba4b679ee22e2a29270'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserTagValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserTagValueResponseBody(name='body'),
}

async function updateUserTagValue(request: UpdateUserTagValueRequest): UpdateUserTagValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserTagValue', 'POST', '/', 'json', false, 'json', request);
}

