/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Rds';
  @version = '2014-08-15';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'rds.aliyuncs.com',
    cn-beijing = 'rds.aliyuncs.com',
    cn-hangzhou = 'rds.aliyuncs.com',
    cn-shanghai = 'rds.aliyuncs.com',
    cn-shenzhen = 'rds.aliyuncs.com',
    cn-heyuan = 'rds.aliyuncs.com',
    cn-hongkong = 'rds.aliyuncs.com',
    ap-southeast-1 = 'rds.aliyuncs.com',
    us-west-1 = 'rds.aliyuncs.com',
    us-east-1 = 'rds.aliyuncs.com',
    cn-shanghai-finance-1 = 'rds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'rds.aliyuncs.com',
    cn-north-2-gov-1 = 'rds.aliyuncs.com',
    ap-northeast-2-pop = 'rds.aliyuncs.com',
    cn-beijing-finance-1 = 'rds.aliyuncs.com',
    cn-beijing-finance-pop = 'rds.aliyuncs.com',
    cn-beijing-gov-1 = 'rds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'rds.aliyuncs.com',
    cn-edge-1 = 'rds.aliyuncs.com',
    cn-fujian = 'rds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'rds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'rds.aliyuncs.com',
    cn-hangzhou-finance = 'rds-vpc.cn-hangzhou-finance.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'rds.aliyuncs.com',
    cn-hangzhou-test-306 = 'rds.aliyuncs.com',
    cn-hongkong-finance-pop = 'rds.aliyuncs.com',
    cn-qingdao-nebula = 'rds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'rds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'rds.aliyuncs.com',
    cn-shanghai-inner = 'rds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'rds.aliyuncs.com',
    cn-shenzhen-inner = 'rds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'rds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'rds.aliyuncs.com',
    cn-wuhan = 'rds.aliyuncs.com',
    cn-yushanfang = 'rds.aliyuncs.com',
    cn-zhangbei = 'rds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'rds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'rds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'rds.aliyuncs.com',
    eu-west-1-oxs = 'rds.aliyuncs.com',
    rus-west-1-pop = 'rds.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateMigrationTargetInstanceRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the destination instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='pgm-bp102g323jd4****', position='Query'),
  forceSwitch?: string(name='ForceSwitch', description='Specifies whether to forcefully perform a switchover. Set the value to 1. The value 1 specifies a forceful switchover.', example='1', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', description='A reserved parameter. This parameter does not take effect.', example='2022-02-25T06:57:41Z', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', description='The time when you want to perform the switchover.

Set the value to 0. The value 0 specifies an immediate switchover.', example='0', position='Query'),
}

model ActivateMigrationTargetInstanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The name of the destination instance.', example='pgm-bp102g323jd4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='76364A52-E0AB-5CC8-9818-CF1DC482C092'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The private IP address that is used to connect to the self-managed PostgreSQL instance.', example='172.16.XX.XX'),
  sourcePort?: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance.', example='5432'),
  taskId?: long(name='TaskId', description='The ID of the identification task.', example='440913675'),
}

model ActivateMigrationTargetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateMigrationTargetInstanceResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * Before you call the ActivateMigrationTargetInstance operation, make sure that a cloud migration task is created by calling the [CreateCloudMigrationTask](~~411690~~) operation. In addition, make sure that the value that is returned for the **MigrateStage** parameter from the call of the [DescribeCloudMigrationResult](~~412150~~) operation is **increment**.
  *
 */
async function activateMigrationTargetInstance(request: ActivateMigrationTargetInstanceRequest): ActivateMigrationTargetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateMigrationTargetInstance', 'POST', '/', 'json', false, 'json', request);
}

model AddTagsToResourceRequest {
  tag?: [
    {
      key?: string(name='key', description='The TagKey of the first tag that you want to bind. Each tag consists of a TagKey and a TagValue. You can specify up to five tags in a single request. The TagKey is required, and the TagValue is optional.', example='key1'),
      value?: string(name='value', description='The TagValue of the first tag that you want to bind. Each tag consists of a TagKey and a TagValue. You can specify up to five tags in a single request. The TagKey is required, and the TagValue is optional.', example='value1'),
    }
  ](name='Tag', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can enter up to 30 instance IDs in a single request. If you enter more than one instance ID, you must separate the instance IDs with commas (,).', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', description='The logon name of the RAM user.', example='testuser@aliyun.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hagnzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: string(name='Tags', description='The tags that you want to bind. Each tag consists of a TagKey and a TagValue. You can specify up to five tags in a single request. Format: {"key1":"value1","key2":"value2"...}.

>  The TagKey is required, and the TagValue is optional.', example='{“key1”:”value1”,“key2”:””}', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy pattern.', example='API', position='Query'),
}

model AddTagsToResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
}

model AddTagsToResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsToResourceResponseBody(name='body'),
}

/**
  * This operation has the following limits:
  * *   Each tag consists of a TagKey and a TagValue. The TagKey is required, and the TagValue is optional.
  * *   The values of TagKey and TagValue cannot start with aliyun.
  * *   The values of TagKey and TagValue are not case-sensitive.
  * *   The maximum length of a TagKey is 64 characters, and the maximum length of a TagValue is 128 characters.
  * *   Each instance can be bound to a maximum of 10 tags. Each tag that is bound to the same instance must have a unique TagKey. If you bind a new tag to the instance and the TagKey of the new tag is the same as that of an existing tag, the new tag overwrites the existing tag.
  *
 */
async function addTagsToResource(request: AddTagsToResourceRequest): AddTagsToResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagsToResource', 'POST', '/', 'json', false, 'json', request);
}

model AllocateInstancePublicConnectionRequest {
  babelfishPort?: string(name='BabelfishPort', description='The Tabular Data Stream (TDS) port of the instance for which Babelfish is enabled.

> This parameter applies only to ApsaraDB RDS for PostgreSQL instances. For more information about Babelfish for ApsaraDB RDS for PostgreSQL, see [Introduction to Babelfish](~~428613~~).', example='1433', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the public endpoint. A valid public endpoint is in the following format: Prefix.Database engine.rds.aliyuncs.com. Example: test1234.mysql.rds.aliyuncs.com.

> The value can be 5 to 40 characters in length and can contain letters, digits, and hyphens (-). The value cannot contain any of the following characters: ~ ! # % ^ & \\* = + | {} ; : \\" " , <> / ?', example='test1234', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  generalGroupName?: string(name='GeneralGroupName', description='The name of the dedicated cluster to which the instance belongs. This parameter takes effect only when the instance runs MySQL on RDS Standard Edition and is created in a dedicated cluster.', example='rgc-bp1tkv8*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  PGBouncerPort?: string(name='PGBouncerPort', position='Query'),
  port: string(name='Port', description='The public port of the instance. Valid values: **1000 to 5999**.', example='3306', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='test*****.mysql.rds.aliyuncs.com'),
  dbInstanceName?: string(name='DbInstanceName', description='The ID of the instance.', example='rm-bp1*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

/**
  * ###
  * You can apply for only one public endpoint for an instance.
  *
 */
async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model AllocateReadWriteSplittingConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the read-only routing endpoint. The prefix must be unique. It can be up to 30 characters in length and can contain lowercase letters and hyphens (-). It must start with a lowercase letter.

>  The default prefix consists of the name of the primary instance followed by the letters rw.', example='rr-m5exxxxx-rw.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  distributionType?: string(name='DistributionType', description='The method that is used to assign read weights. Valid values:

*   **Standard**: ApsaraDB RDS automatically assigns read weights to the primary and read-only instances based on the specifications of these instances.
*   **Custom**: You must manually assign a read weight to each instance.', example='Standard', position='Query'),
  maxDelayTime?: string(name='MaxDelayTime', description='The threshold of the latency that is allowed on the read-only instances. Valid values: 0 to 7200. Default value: 30. Unit: seconds.

>  If the latency on a read-only instance exceeds the specified threshold, ApsaraDB RDS does not forward read requests to the read-only instance.', example='30', position='Query'),
  netType?: string(name='NetType', description='The network type of the read-only routing endpoint. Valid values:

*   **Internet**: Internet
*   **Intranet**: internal network

>  The default value is Intranet. Make sure that the network type of the read-only routing endpoint is the same as that of the primary instance.', example='Intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', description='The port that is associated with the read-only routing endpoint. Valid values: 1000 to 5999. Default value: 1433.', example='1433', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  weight?: string(name='Weight', description='The read weights of the primary instance and its read-only instances. The read weight is increased in increments of 100. The maximum value is 10000.

* For ApsaraDB RDS instances, the value of this parameter is in the following format: `{"<ID of the read-only instance >":<Weight>,"master":<Weight>,"slave":<Weight>}`.
* For ApsaraDB MyBase instances, the value of this parameter is in the following format: `[{"instanceName":"<ID of the primary instance>","weight":<Weight>,"role":"master"},{"instanceName":"<ID of the primary instance>","weight":<Weight>,"role":"slave"},{"instanceName":"<ID of the read-only instance>","weight":<Weight>,"role":"master"}]`

> * If you set the **DistributionType** parameter to **Custom**, you must also specify this parameter.
> * If you set the **DistributionType** parameter to **Standard**, this parameter is invalid.', example='{"rm-bp1**********":800,"master":400,"slave":400}', position='Query'),
}

model AllocateReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model AllocateReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateReadWriteSplittingConnectionResponseBody(name='body'),
}

/**
  * If read-only instances are attached to a primary ApsaraDB RDS for SQL Server instance, you can call this operation to apply for a unified read-only routing endpoint for the primary instance. After you apply for a read-only routing endpoint for a primary instance, the existing endpoints of the primary instance and its read-only instances remain valid. In addition, you can still apply for internal and public endpoints.
  * Before you call this operation, make sure that the following requirements are met:
  * *   If the instance runs MySQL, the instance uses a shared proxy.
  * *   The instance is in the Running state.
  * *   Read-only instances are attached to the primary instance.
  * *   The instance does not have an ongoing Data Transmission Service (DTS) migration task.
  * *   The instance runs one of the following database versions and RDS editions:
  *     *   SQL Server (cluster edition)
  *     *   MySQL 5.7 on RDS High-availability Edition with local SSDs
  *     *   MySQL 5.6
  *
 */
async function allocateReadWriteSplittingConnection(request: AllocateReadWriteSplittingConnectionRequest): AllocateReadWriteSplittingConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateReadWriteSplittingConnection', 'POST', '/', 'json', false, 'json', request);
}

model CalculateDBInstanceWeightRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CalculateDBInstanceWeightResponseBody = {
  items?: {
    DBInstanceWeight?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of instance.', example='rm-uf6wjk5xxxxxxx'),
      DBInstanceType?: string(name='DBInstanceType', description='The role of the instance. Valid values:

*   **Master**: primary instance
*   **Readonly**: read-only instance', example='Master'),
      readonlyInstanceSQLDelayedTime?: string(name='ReadonlyInstanceSQLDelayedTime', description='The threshold for the latency of data replication from the primary instance to the read-only instances. The read-only instances start to synchronize data from the primary instance after the time specified by the **ReadonlyInstanceSQLDelayedTime** parameter elapses. Unit: seconds.', example='30'),
      weight?: string(name='Weight', description='The read weight that ApsaraDB RDS calculates in real time for the instance.', example='100'),
    }
  ](name='DBInstanceWeight')
  }(name='Items', description='An array that consists of the system-assigned read weights.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C816A4BF-A6EC-4722-95F9-2055859CCFD2'),
}

model CalculateDBInstanceWeightResponse = {
  headers: map[string]string(name='headers'),
  body: CalculateDBInstanceWeightResponseBody(name='body'),
}

/**
  * When the [read/write splitting](~~51073~~) feature is enabled, this operation is used to calculate system-assigned read weights. For more information about custom read weights, see [DescribeDBInstanceNetInfo](~~26237~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
  * *   The instance must run one of the following database engine versions and RDS editions:
  *     *   MySQL 5.7 on RDS High-availability Edition (with local SSDs)
  *     *   MySQL 5.6
  *     *   SQL Server on RDS Cluster Edition
  *
 */
async function calculateDBInstanceWeight(request: CalculateDBInstanceWeightRequest): CalculateDBInstanceWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CalculateDBInstanceWeight', 'POST', '/', 'json', false, 'json', request);
}

model CancelImportRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  importId: int32(name='ImportId', description='The ID of the migration task.

> This parameter is returned when the migration task is started. For more information, see [ImportDatabaseBetweenInstances](~~26301~~).', example='8562584', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelImportResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model CancelImportResponse = {
  headers: map[string]string(name='headers'),
  body: CancelImportResponseBody(name='body'),
}

/**
  * This operation is supported for instances that run SQL Server and belong to the dedicated or dedicated host instance family. For more information about how to start a migration task, see [ImportDatabaseBetweenInstances](~~26301~~).
  * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
  *
 */
async function cancelImport(request: CancelImportRequest): CancelImportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelImport', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountNameAvailableRequest {
  accountName: string(name='AccountName', example='DatabaseTest', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5xxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model CheckAccountNameAvailableResponseBody = {
  requestId?: string(name='RequestId', example='5E4AA101-1EE5-41C0-AE6D-0F066331AC1C'),
}

model CheckAccountNameAvailableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccountNameAvailableResponseBody(name='body'),
}

async function checkAccountNameAvailable(request: CheckAccountNameAvailableRequest): CheckAccountNameAvailableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccountNameAvailable', 'POST', '/', 'json', false, 'json', request);
}

model CheckCloudResourceAuthorizedRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n7j9eb52y7c1960', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy**********', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  targetRegionId?: string(name='TargetRegionId', description='The ID of the destination region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='us-east-1', position='Query'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  authorizationState?: int32(name='AuthorizationState', description='The authorization status. Valid values:

*   **1**: authorized
*   **0**: not authorized', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B993DA9-5272-5414-94E3-4CA8BA0146C2'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role. A RAM role is a virtual identity that you can create within your Alibaba Cloud account. For more information, see [RAM role overview](~~93689~~).

>  This parameter is available only when the instance runs MySQL.', example='acs:ram::1406926****:role/aliyunrdsinstanceencryptiondefaultrole'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCloudResourceAuthorized', 'POST', '/', 'json', false, 'json', request);
}

model CheckCreateDdrDBInstanceRequest {
  backupSetId?: string(name='BackupSetId', description='The ID of the data backup file that is used for the restoration. You can call the [DescribeCrossRegionBackups](~~121733~~) operation to query backup set IDs.

>  If you set the **RestoreType** parameter to **0**, you must also specify this parameter.', example='14358', position='Query'),
  DBInstanceClass: string(name='DBInstanceClass', description='The type of the destination instance. For more information, see [Primary instance types](~~26312~~).', example='rds.mysql.s1.small', position='Query'),
  DBInstanceStorage: int32(name='DBInstanceStorage', description='The storage capacity of the destination instance. Valid values: **5 to 2000**. Unit: GB.

The storage capacity increases at increments of 5 GB. For more information, see [Primary instance types](~~26312~~).', example='20', position='Query'),
  engine: string(name='Engine', description='The database engine that is run on the destination instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', description='The version of the database engine that is run on the destination the instance. The value of this parameter varies based on the value of the **Engine** parameter. Valid values:

*   MySQL: **5.5, 5.6, 5.7, and 8.0**
*   SQL Server: **2008r2, 08r2\\_ent_ha, 2012, 2012\\_ent_ha, 2012\\_std_ha, 2012\\_web, 2014\\_std_ha, 2016\\_ent_ha, 2016\\_std_ha, 2016\\_web, 2017\\_std_ha, 2017\\_ent, 2019\\_std_ha, and 2019\\_ent**
*   PostgreSQL: **9.4, 10.0, 11.0, 12.0, and 13.0**', example='5.6', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the destination instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list of region IDs.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The point in time that you specify must be earlier than the current time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

>  If you set the **RestoreType** parameter to **1**, you must also specify this parameter.', example='2019-05-30T03:29:10Z', position='Query'),
  restoreType: string(name='RestoreType', description='The restoration method that you want to use. Valid values:

*   **0**: restores data from a data backup file. If you select this value, you must also specify the **BackupSetId** parameter.
*   **1**: restores data to a point in time. If you select this value, you must also specify the **RestoreTime**, **SourceRegion** and **SourceDBInstanceName** parameters.

Default value: **0**.', example='0', position='Query'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='The ID of the source instance if you want to restore data to a point in time.

>  If you set the **RestoreType** parameter to **1**, you must also specify this parameter.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  sourceRegion?: string(name='SourceRegion', description='The region ID of the source instance if you want to restore data to a point in time.

>  If you set the **RestoreType** parameter to **1**, you must also specify this parameter.', example='cn-hangzhou', position='Query'),
}

model CheckCreateDdrDBInstanceResponseBody = {
  isValid?: string(name='IsValid', description='Indicates whether the data of the source instance can be restored across regions. Valid values:** true and false**', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
}

model CheckCreateDdrDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCreateDdrDBInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the source instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Back up an ApsaraDB RDS for PostgreSQL instance across regions](~~206671~~).
  *
 */
async function checkCreateDdrDBInstance(request: CheckCreateDdrDBInstanceRequest): CheckCreateDdrDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCreateDdrDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CheckDBNameAvailableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-t4n3axxxxx', position='Query'),
  DBName: string(name='DBName', description='The database name that you want to check.', example='test1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckDBNameAvailableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.

> If this operation returns only the ID of the request, the database name conforms to the naming conventions. If an error message is returned, the database name is duplicate or does not conform to the naming conventions.', example='6EF82B07-28D2-48D1-B5D6-7E78FED277C7'),
}

model CheckDBNameAvailableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDBNameAvailableResponseBody(name='body'),
}

async function checkDBNameAvailable(request: CheckDBNameAvailableRequest): CheckDBNameAvailableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDBNameAvailable', 'POST', '/', 'json', false, 'json', request);
}

model CheckInstanceExistRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckInstanceExistResponseBody = {
  isExistInstance?: boolean(name='IsExistInstance', description='Indicates whether the instance exists. Valid values:

*   **true**: The instance exists.
*   **false**: The instance does not exist.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11439B36-F703-49EB-8656-D3C87BE28B57'),
}

model CheckInstanceExistResponse = {
  headers: map[string]string(name='headers'),
  body: CheckInstanceExistResponseBody(name='body'),
}

async function checkInstanceExist(request: CheckInstanceExistRequest): CheckInstanceExistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckInstanceExist', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

>  The configuration of the RegionId parameter does not affect your query results. You can configure any region for this parameter. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceLinkedRole: string(name='ServiceLinkedRole', description='The name of the SLR.

>  For more information about the SLRs supported by ApsaraDB RDS, see [Service-linked roles](~~342840~~).', example='AliyunServiceRoleForRdsPgsqlOnEcs', position='Query'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: string(name='HasServiceLinkedRole', description='Indicates whether an SLR is created.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AB44DC0A-7E77-442A-97A9-C6418694CB22'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CloneDBInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  backupId?: string(name='BackupId', description='The ID of the backup set.

You can call the [DescribeBackups](~~26273~~) operation to query the backup sets.

> You must specify at least one of the **BackupId** and **RestoreTime** parameters.', example='902****', position='Query'),
  backupType?: string(name='BackupType', description='The type of backup that is used to restore the data of the original instance. Valid values:

*   **FullBackup**
*   **IncrementalBackup**', example='FullBackup', position='Query'),
  bpeEnabled?: string(name='BpeEnabled', position='Query'),
  burstingEnabled?: boolean(name='BurstingEnabled', position='Query'),
  category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition.
*   **HighAvailability**: RDS High-availability Edition.
*   **AlwaysOn**: RDS Cluster Edition for SQL Server.
*   **cluster**: RDS Cluster Edition for MySQL.
*   **Finance**: RDS Enterprise Edition. This edition is available only on the China site (aliyun.com).
*   **serverless_basic**: RDS Serverless Basic Edition.', example='HighAvailability', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the new instance. For information, see [Primary ApsaraDB RDS instance types](~~26312~~).

> By default, the new instance uses the same instance type as the original primary instance.', example='mysql.n1.micro.1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', minLength=1, maxLength=65535, position='Query'),
  DBInstanceStorage?: int32(name='DBInstanceStorage', description='The storage capacity of the new instance. Unit: GB. You can increase the storage capacity in increments of 5 GB. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~).

> By default, the new instance has the same storage capacity as the original primary instance.', example='1000', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the new instance. Valid values:

*   **local_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD (ESSD) of performance level 1 (PL1)
*   **cloud_essd2**: ESSD of PL2
*   **cloud_essd3**: ESSD of PL3', example='cloud_essd', position='Query'),
  dbNames?: string(name='DbNames', description='The name of the database. If you specify more than one database, the value is in the following format: `Original database name 1,Original database name 2`.', example='test1,test2', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable the release protection feature for the new instance. Valid values:

*   **true**
*   **false**

Default value: **false**.', example='true', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the new instance. Valid values:

*   **VPC**
*   **Classic**

> By default, the new instance has the same network type as the original primary instance.', example='VPC', position='Query'),
  payType: string(name='PayType', description='The billing method of the read-only instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription
*   **Serverless**: serverless. This value is supported only for instances that run MySQL. For more information, see [Overview](~~411291~~).', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The unit that is used to calculate the billing cycle of the new instance. Valid values:

*   **Year**
*   **Month**

> If you set the PayType parameter to **Prepaid**, you must also specify this parameter.', example='Year', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The internal IP address of the new instance, which must be within the CIDR block supported by the specified vSwitch. The system automatically assigns an internal IP address based on the values of the **VPCId** and **VSwitchId** parameters.', example='172.XX.XXX.69', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the new instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTable?: string(name='RestoreTable', description='Specifies whether to restore only the databases and tables that you specify. The value **1** specifies to restore only the specified databases and tables. If you do not want to restore only the specified databases or tables, you do not need to specify this parameter.', example='1', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The point in time must fall within the specified backup retention period. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> You must specify at least one of the **BackupId** and **RestoreTime** parameters.', example='2011-06-11T16:00:00Z', position='Query'),
  serverlessConfig?: {
    autoPause?: boolean(name='AutoPause', description='Specifies whether to enable the automatic start and stop feature for the serverless instance. After the automatic start and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is suspended. After a connection is established to the instance, the instance is automatically resumed. Valid values:

*   true: enables the feature.
*   false (default): disables the feature.', example='true'),
    maxCapacity?: double(name='MaxCapacity', description='The maximum number of RDS Capacity Units (RCUs).', example='8'),
    minCapacity?: double(name='MinCapacity', description='The minimum number of RCUs.', example='0.5'),
    switchForce?: boolean(name='SwitchForce', description='Specifies whether to enable the forced scaling feature for the serverless instance. In most cases, ApsaraDB RDS automatically scales in or out the RCUs of a serverless instance based on business requirements in real time. In rare cases, the scaling does not take effect in real time. You can enable the forced scaling feature to forcefully scales in or out the RCUs of the instance. Valid values:

*   true: enables the feature.
*   false (default): disables the feature.', example='false'),
  }(name='ServerlessConfig', description='The configuration of the serverless instance. You must specify this parameter only when you restore data to a new serverless instance.', shrink='json', position='Query'),
  tableMeta?: string(name='TableMeta', description='The information about the database and table that you want to restore. The value is in the following format: `[{"type":"db","name":"Name of Database 1","newname":"New name of Database 1","tables":[{"type":"table","name":"Name of Table 1 in Database 1","newname":"New name of Table 1"},{"type":"table","name":"Name of Table 2 in Database 1","newname":"New name of Table 2"}]},{"type":"db","name":"Name of Database 2","newname":"New name of Database 2","tables":[{"type":"table","name":"Name of Table 1 in Database 2","newname":"New name of Table 1"},{"type":"table","name":"Name of Table 2 in Database 2","newname":"New name of Table 2"}]}]`', example='[{"type":"db","name":"testdb1","newname":"testdb1_new","tables":[{"type":"table","name":"testdb1table1","newname":"testdb1table1_new"}]}]', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription duration of the new instance. Valid values:

*   If you set the **Period** parameter to **Year**, the value of the UsedTime parameter ranges from **1 to 3**.
*   If you set the **Period** parameter to **Month**, the value of the UsedTime parameter ranges from **1 to 9**.

> If you set the PayType parameter to **Prepaid**, you must also specify this parameter.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the virtual private cloud (VPC).

> Make sure that the VPC belongs to the required region.', example='vpc-uf6f7l4fg90xxxxxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. The vSwitch must belong to the zone that is specified by the **ZoneId** parameter.

> 

*   If you set the **InstanceNetworkType** parameter to **VPC**, you must also specify this parameter.

*   If you specify the **ZoneSlaveId1** parameter, you must specify the IDs of two vSwitches for this parameter and separate the IDs with a comma (,).', example='vsw-uf6adz52c2pxxxxxxxxxx', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the primary instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.

> By default, the new instance resides in the same region as the original instance.', example='cn-hangzhou-b', position='Query'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='The zone ID of the secondary instance. If you set the ZoneIdSlave1 parameter and the **ZoneId** parameter to the same value, the single-zone deployment method is used. If you set the ZoneIdSlave1 parameter and the **ZoneId** parameter to different values, the multi-zone deployment method is used.', example='cn-hangzhou-c', position='Query'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='The zone ID of the logger instance. If you set the ZoneIdSlave2 parameter to the same value as the **ZoneId** parameter, the single-zone deployment method is used. If you set the ZoneIdSlave2 parameter to a different value from the **ZoneId** parameter, the multi-zone deployment method is used.', example='cn-hangzhou-d', position='Query'),
}

model CloneDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='100789370****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
}

model CloneDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CloneDBInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The original instance is in the Running state.
  * *   The original instance does not have ongoing migration tasks.
  * *   The log backup feature is enabled for the original instance to support point-in-time recovery.
  * *   If you want to clone the original instance by using backup sets, the original instance must have at least one backup set.
  * > ApsaraDB RDS allows you to create a cloned instance by using the credentials of your RAM user. Make sure that your RAM user is granted the permissions that are required to clone an instance. For more information, see [Use RAM to manage ApsaraDB RDS permissions](~~58932~~).
  * Take note of the following information:
  * *   The new instance has the same IP address whitelist, SQL Explorer (SQL Audit), alert threshold, backup, and parameter settings as the original instance.
  * *   The data and account information of the new instance is the same as that indicated by the backup set or point in time used for restoration of the original instance.
  *
 */
async function cloneDBInstance(request: CloneDBInstanceRequest): CloneDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CloneParameterGroupRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='The description of the parameter template in the destination region.', example='CloneGroup1', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', description='The ID of the parameter template. You can call the [DescribeParameterGroups](~~144491~~) operation to query the most recent parameter templates in a region.', example='rpg-13ppdh****', position='Query'),
  parameterGroupName: string(name='ParameterGroupName', description='The name of the parameter template in the destination region.', example='tartestgroup', position='Query'),
  regionId: string(name='RegionId', description='The ID of the source region to which the parameter template belongs. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetRegionId: string(name='TargetRegionId', description='The ID of the destination region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-qingdao', position='Query'),
}

model CloneParameterGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D3D5995-6BDD-43B5-93B8-2C41A2ACD6AA'),
}

model CloneParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CloneParameterGroupResponseBody(name='body'),
}

/**
  * You can configure a number of parameters at a time by using a parameter template and then apply the parameter template to an instance. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) or [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * > This operation is supported only when your instance runs MySQL or PostgreSQL.
  *
 */
async function cloneParameterGroup(request: CloneParameterGroupRequest): CloneParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmNotifyRequest {
  confirmor: long(name='Confirmor', description='The ID of the Alibaba Cloud account that is used to confirm the notification. You can set this parameter to **0**, which indicates that the notification is confirmed by the system.', example='0', position='Body'),
  notifyIdList: [ long ](name='NotifyIdList', description='The IDs of the notifications that needs to be confirmed. You can call the [QueryNotify](~~427959~~) operation to query notifications for an instance.', shrink='json', position='Body'),
}

model ConfirmNotifyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6919FA39-04CF-571F-A6B0-DCC7AECB4170'),
}

model ConfirmNotifyResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmNotifyResponseBody(name='body'),
}

/**
  * After you call the QueryNotify operation to query notifications for an instance, you can call this operation to mark the notifications as confirmed. For more information, see [Query notifications for an ApsaraDB RDS instance](~~427959~~).
  *
 */
async function confirmNotify(request: ConfirmNotifyRequest): ConfirmNotifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmNotify', 'POST', '/', 'json', true, 'form', request);
}

model CopyDatabaseRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CopyDatabaseResponseBody = {
  DBName?: string(name='DBName', description='The name of the database.', example='test02'),
  DBStatus?: string(name='DBStatus', description='The status of the database. Valid values:

*   **Creating**
*   **Running**
*   **Deleting**', example='Creating'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='2562****'),
}

model CopyDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CopyDatabaseResponseBody(name='body'),
}

/**
  * This operation is phased out.
  *
 */
async function copyDatabase(request: CopyDatabaseRequest): CopyDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CopyDatabaseBetweenInstancesRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set by which you want to restore databases of the source instance. You can call the [DescribeBackups](~~26273~~) operation to obtain the ID of the backup set.

> You must specify one of **BackupId** and **RestoreTime**.', example='106523874****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the source instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  dbNames: string(name='DbNames', description='The names of the databases. Format: `{"Original database name 1":"New database name 1","Original database name 2":"New database name 2"}`.', example='{"test1":"newtest1","test2":"newtest2"}', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time when the system replicates databases. You can select a point in time within the backup retention period. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> You must specify one of **BackupId** and **RestoreTime**.', example='2011-06-11T16:00:00Z', position='Query'),
  syncUserPrivilege?: string(name='SyncUserPrivilege', description='Specifies whether to copy users and permissions.

*   **YES**: replicates users and permissions. If the destination instance has a user whose name is the same as a user in the source instance, the permissions of the user in the source instance will also be granted to the user in the destination instance after you replicate user permissions.
*   **NO**: does not replicate users and permissions.

Default value: **NO**.', example='NO', position='Query'),
  targetDBInstanceId: string(name='TargetDBInstanceId', description='The ID of the destination instance, which must differ from the ID of the source instance.', example='rm-ut5ajk3xxxxxxx', position='Query'),
}

model CopyDatabaseBetweenInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='803D11AF-C370-465B-AB46-CB3A642DC303'),
}

model CopyDatabaseBetweenInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CopyDatabaseBetweenInstancesResponseBody(name='body'),
}

/**
  * You can also call this operation to restore specific databases to an existing instance by point in time or backup set. For more information, see [Restore the data of an ApsaraDB RDS for SQL Server instance](~~95722~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The source and destination instances belong to the same account.
  * *   The source and destination instances run the same version of database engine.
  * *   The source and destination instances reside in the same region and use the same network type. The instances can reside in different zones.
  * *   The source and destination instances do not have databases whose names are the same.
  * *   The available storage of the destination instance is larger than the total size of the databases that you want to replicate from the source instance.
  * > This operation is supported only for instances that run SQL Server 2012 and later.
  *
 */
async function copyDatabaseBetweenInstances(request: CopyDatabaseBetweenInstancesRequest): CopyDatabaseBetweenInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyDatabaseBetweenInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the account. The value must be 2 to 256 characters in length. The value can contain letters, digits, underscores (\\_), and hyphens (-). The value must start with a letter.

> The value cannot start with http:// or https://.', example='Test Account A', position='Query'),
  accountName: string(name='AccountName', description='The username of the account.

> 

*   The value must be unique.

*   The value must start with a lowercase letter, and end with a lowercase letter or a digit.

*   The value can contain lowercase letters, digits, and underscores (\\_).

*   The length of the value must meet the following requirements:

    *   If the instance runs MySQL 5.7 or MySQL 8.0, the value must be 2 to 32 characters in length.
    *   If the instance runs MySQL 5.6, the value must be 2 to 16 characters in length.
    *   If the instance runs SQL Server, the value must be 2 to 64 characters in length.
    *   If the instance runs PostgreSQL with cloud disks, the value must be 2 to 63 characters in length.
    *   If the instance runs PostgreSQL with local disks, the value must be 2 to 16 characters in length.
    *   If the instance runs MariaDB, the value must be 2 to 16 characters in length.

*   For more information about invalid characters, see [Forbidden keywords table](~~26317~~).', example='test1', position='Query'),
  accountPassword: string(name='AccountPassword', description='The password of the account.

> 

*   The value must be 8 to 32 characters in length.

*   The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

*   Special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='Test123456', position='Query'),
  accountType?: string(name='AccountType', description='The type of the account. Valid values:

*   **Normal**: standard account
*   **Super**: privileged account

Default value: **Normal**.', example='Normal', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE31DA81C9DD'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The database is in the Running state.
  * *   The number of accounts that are created on the instance does not exceed the upper limit. For more information, see [Limits](~~41872~~).
  * > 
  * *   This operation is supported for instances that run MySQL, MariaDB, PostgreSQL, and SQL Server. However, if the instance runs SQL Server 2017 or SQL Server 2019 on RDS Cluster Edition, this operation is not supported.
  * *   You can create multiple privileged accounts and standard accounts on an instance that runs PostgreSQL.
  *
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupRequest {
  backupMethod?: string(name='BackupMethod', description='The backup type. Valid values:

*   **Logical**: logical backup
*   **Physical**: physical backup
*   **Snapshot**: snapshot backup

Default value: **Physical**.

> 

*   You can perform a logical backup only when databases are created on the instance.

*   When you perform a snapshot backup on an ApsaraDB RDS for MariaDB instance, you must set this parameter to **Physical**.
*   For more information about the supported backup types, see [Back up an ApsaraDB RDS for MySQL instance](~~98818~~).
*   When you perform a snapshot backup on an ApsaraDB RDS for SQL Server instance that uses cloud disks, you must set this parameter to **Snapshot**.', example='Physical', position='Query'),
  backupStrategy?: string(name='BackupStrategy', description='The backup policy. Valid values:

*   **db**: a database-level backup.
*   **instance**: an instance-level backup.

> You can specify this parameter when you perform a logical backup on an ApsaraDB RDS for MySQL instance. You can also specify this parameter when you perform a full physical backup on an ApsaraDB RDS for SQL Server instance.', example='db', position='Query'),
  backupType?: string(name='BackupType', description='The backup method. Valid values:

*   **Auto**: full or incremental backup that is automatically selected
*   **FullBackup**: full backup

Default value: **Auto**.

> 

*   You must set this parameter only when the instance runs SQL Server.

*   This parameter is valid only when you set the **BackupMethod** parameter to **Physical**.', example='Auto', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  DBName?: string(name='DBName', description='The names of the databases whose data you want to back up. Separate the names of the databases with commas (,).

> You can specify this parameter when you perform a logical backup on individual databases of an ApsaraDB RDS for MySQL instance. You can also specify this parameter when you perform a full physical backup on individual databases of an ApsaraDB RDS for SQL Server instance.', example='rds_mysql', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBackupResponseBody = {
  backupJobId?: string(name='BackupJobId', description='The ID of the backup task.', example='5073731'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2C125605-266F-41CA-8AC5-3A643D4F42C5'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

/**
  * This operation uses the backup feature of ApsaraDB RDS to create a backup set. You can also use an operation of Database Backup (DBS) to create a backup set. For more information, see [List of operations by function of DBS](~~437245~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The original instance is in the Running state.
  * *   The instance does not have ongoing backup tasks.
  * *   The number of backup files that are created per day for an instance cannot exceed 20.
  *
 */
async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackup', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudMigrationPrecheckTaskRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='pgm-bp102g323jd4****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceAccount: string(name='SourceAccount', description='The username of the account that is used to connect to the self-managed PostgreSQL instance. Enter the username of the account that you created in the [Create an account for cloud migration on a self-managed PostgreSQL instance](~~369500~~) topic.', example='migratetest', position='Query'),
  sourceCategory: string(name='SourceCategory', description='The environment in which the self-managed PostgreSQL instance runs.

*   **idcOnVpc**: The self-managed PostgreSQL instance resides in a data center. The data center can communicate with the VPC to which the ApsaraDB RDS for PostgreSQL instance belongs.
*   **ecsOnVpc**: The self-managed PostgreSQL instance resides on an ECS instance.', example='ecsOnVpc', position='Query'),
  sourceIpAddress: string(name='SourceIpAddress', description='The private IP address that is used to connect to the self-managed PostgreSQL instance.

*   If the self-managed PostgreSQL instance resides on an ECS instance, enter the private IP address of the ECS instance. For more information about how to obtain the private IP address of an ECS instance, see [View IP addresses](~~273914~~).
*   If the self-managed PostgreSQL instance resides in an on-premises data center, enter the private IP address of the on-premises data center.', example='172.2.XX.XX', position='Query'),
  sourcePassword: string(name='SourcePassword', description='The password of the account that is used to connect to the self-managed PostgreSQL instance. Enter the password of the account that you created in the [Create an account for cloud migration on a self-managed PostgreSQL instance](~~369500~~) topic.', example='123456', position='Query'),
  sourcePort: long(name='SourcePort', description='The port that is used to connect to the self-managed PostgreSQL instance. You can run the `netstat -a | grep PGSQL` command to view the port.', example='5432', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. If you do not specify this parameter, ApsaraDB RDS automatically generates a name for the cloud migration task.', example='slf7w7wj3g', position='Query'),
}

model CreateCloudMigrationPrecheckTaskResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='pgm-bp102g323jd4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='60F9A12A-16B8-4728-B099-4CA38D32C31C'),
  taskId?: long(name='TaskId', description='The ID of the task.', example='439946016'),
  taskName?: string(name='TaskName', description='The name of the task.', example='slf7w7wj3g'),
}

model CreateCloudMigrationPrecheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudMigrationPrecheckTaskResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * The RDS instance meets the following requirements:
  * * The RDS instance and the self-managed PostgreSQL instance run the same PostgreSQL version, which can be PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, PostgreSQL 13, PostgreSQL 14, or PostgreSQL 15.
  * * The RDS instance is a primary instance. Read-only RDS instances do not support cloud migration.
  * * The RDS instance uses cloud disks.
  * * The RDS instance is empty. The available storage of the RDS instance is greater than or equal to the size of the data in the self-managed PostgreSQL instance.
  * The self-managed PostgreSQL instance meets the following requirements:
  * * Network configurations
  * |Migration source|Network configuration|
  * |:---|---|
  * |Self-managed ECS-based PostgreSQL Database|If the self-managed PostgreSQL instance resides on an Elastic Compute Service (ECS) instance, the ECS instance and the RDS instance must reside in the same virtual private cloud (VPC). If the ECS instance and the RDS instance reside in different VPCs, use Cloud Enterprise Network (CEN) to connect the VPCs. For more information, see [What is CEN?](~~181681~~)|
  * |Self-managed PostgreSQL database in a data center (within the same VPC as the destination database)|The data center is able to communicate with the VPC to which the destination RDS instance belongs. For more information, see [Connect a data center to a VPC](~~97768~~).|
  * * If the self-managed PostgreSQL instance resides on an ECS instance, an ECS security group is configured. For more information, see [(Optional) Configure an ECS security group on a self-managed PostgreSQL instance](~~369726~~).
  * * The configurations that are described in [Configure a self-managed PostgreSQL instance to listen to remote connections](~~369727~~) are complete.
  * * The configurations that are described in [Create an account for cloud migration on a self-managed PostgreSQL instance](~~369500~~) are complete.
  * * The configurations that are described in [Update the pg\\_hba.conf file of a self-managed PostgreSQL instance](~~369728~~) are complete.
  * * The configurations that are described in [Configure the firewall of the server on which a self-managed PostgreSQL instance resides](~~369729~~) are complete.
  *
 */
async function createCloudMigrationPrecheckTask(request: CreateCloudMigrationPrecheckTaskRequest): CreateCloudMigrationPrecheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudMigrationPrecheckTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudMigrationTaskRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='pgm-bp102g323jd4****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceAccount: string(name='SourceAccount', description='The username of the account that is used to connect to the self-managed PostgreSQL instance. Enter the username of the account that you created in the [Create an account for cloud migration on a self-managed PostgreSQL instance](~~369500~~) topic.', example='migratetest', position='Query'),
  sourceCategory: string(name='SourceCategory', description='The environment in which the self-managed PostgreSQL instance runs.

*   **idcOnVpc**: The self-managed PostgreSQL instance resides in a data center. The data center can communicate with the VPC to which the ApsaraDB RDS for PostgreSQL instance belongs.
*   **ecsOnVpc**: The self-managed PostgreSQL instance resides on an ECS instance.', example='ecsOnVpc', position='Query'),
  sourceIpAddress: string(name='SourceIpAddress', description='The private or public IP address that is used to connect to the self-managed PostgreSQL instance.

*   If the self-managed PostgreSQL instance resides on an Elastic Compute Service (ECS) instance, enter the private IP address of the ECS instance. For more information about how to obtain the private IP address of an ECS instance, see [View IP addresses](~~273914~~).
*   If the self-managed PostgreSQL instance resides in a data center, enter the private IP address of the data center.', example='172.16.XX.XX', position='Query'),
  sourcePassword: string(name='SourcePassword', description='The password of the account that is used to connect to the self-managed PostgreSQL instance. Enter the password of the account that you created in the [Create an account for cloud migration on a self-managed PostgreSQL instance](~~369500~~) topic.', example='123456', position='Query'),
  sourcePort: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance. You can run the `netstat -a | grep PGSQL` command to obtain the port number.', example='5432', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. If you do not specify this parameter, ApsaraDB RDS automatically generates a name for the cloud migration task.', example='362c6c7a-4d20-4eac-898c-1495ceab374c', position='Query'),
}

model CreateCloudMigrationTaskResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='pgm-bp102g323jd4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B993DA9-5272-5414-94E3-4CA8BA0146C2'),
  taskId?: long(name='TaskId', description='The ID of the task.', example='440437220'),
  taskName?: string(name='TaskName', description='The name of the task.', example='362c6c7a-4d20-4eac-898c-1495ceab374c'),
}

model CreateCloudMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudMigrationTaskResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * Before you call this operation, make sure that the ApsaraDB RDS for PostgreSQL instance passes the cloud migration assessment.
  *
 */
async function createCloudMigrationTask(request: CreateCloudMigrationTaskRequest): CreateCloudMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  amount?: int32(name='Amount', description='The number of ApsaraDB RDS for MySQL instances that you want to create. The parameter takes effect only when you create multiple ApsaraDB RDS for MySQL instances at a time by using a single request.

Valid values: **1** to **20**. Default value: **1**.

*   If you want to create multiple ApsaraDB RDS for MySQL instances at a time by using a single request, you can add tags to all instances by using **Tag.N.Key** and **Tag.N.Value**. After the instances are created, you can manage the instances based on the tags.
*   After you submit a request to create multiple ApsaraDB RDS for MySQL instances, this operation returns **TaskId**, **RequestId**, and **Message**. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the details of an instance.
*   If the value of **Engine** is not **MySQL** and the value of Amount is greater than **1**, this operation fails and returns an error code `InvalidParam.Engine`.', example='2', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. You must specify this parameter only when the instance uses the subscription billing method. Valid values:

*   **true**
*   **false** 

*   The auto-renewal cycle is one month for monthly subscription.
*   The auto-renewal cycle is one year for yearly subscription.', example='true', position='Query'),
  babelfishConfig?: string(name='BabelfishConfig', description='The configuration of the Babelfish feature for the instance that runs PostgreSQL.

Format:{"babelfishEnabled":"true","migrationMode":"xxxxxxx","masterUsername":"xxxxxxx","masterUserPassword":"xxxxxxxx"}

The following list describes the fields in the format:

*   **babelfishEnabled**: specifies whether to enable Babelfish for the instance. If you set this field to **true**, you enable Babelfish for the instance. If you leave this parameter empty, Babelfish is disabled for the instance.
*   **migrationMode**: The migration mode of the instance. Valid values: **single-db** and **multi-db**.
*   **masterUsername**: The username of the administrator account. The username can contain lowercase letters, digits, and underscores (\\_). It must start with a letter and end with a letter or digit. It can be up to 63 characters in length and cannot start with pg.
*   **masterUserPassword**: The password of the administrator account. The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. It must be 8 to 32 characters in length. The password can contain any of the following characters: `! @ # $ % ^ & * ( ) _ + - =`.

> This parameter applies only to instances that run PostgreSQL. For more information about Babelfish for ApsaraDB RDS for PostgreSQL, see [Introduction to Babelfish](~~428613~~).', example='{"babelfishEnabled":"true","migrationMode":"single-db","masterUsername":"babelfish_user","masterUserPassword":"Babelfish123!"}', position='Query'),
  bpeEnabled?: string(name='BpeEnabled', position='Query'),
  burstingEnabled?: boolean(name='BurstingEnabled', position='Query'),
  businessInfo?: string(name='BusinessInfo', description='The additional business information about the instance.', example='121436975448952', position='Query'),
  category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **AlwaysOn**: RDS Cluster Edition for SQL Server
*   **Finance**: RDS Enterprise Edition

**Serverless instances**

*   **serverless_basic**: RDS Serverless Basic Edition. This edition is available only for instances that run MySQL and PostgreSQL.
*   **serverless_standard**: RDS Serverless High-availability Edition for MySQL
*   **serverless_ha**: RDS Serverless High-availability Edition for SQL Server.

> If you want to create a serverless instance, you must specify this parameter.', example='HighAvailability', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode

ApsaraDB RDS automatically assigns a connection mode to the instance.

> If the RDS instance runs SQL Server 2012, SQL Server 2016, or SQL Server 2017, you must set this parameter to Standard.', example='Standard', position='Query'),
  connectionString?: string(name='ConnectionString', description='The endpoint of the instance.

> The **DBInstanceNetType** parameter specifies whether the endpoint is internal or public.', example='rm-uf6wjk5*****.mysql.rds.aliyuncs.com', position='Query'),
  createStrategy?: string(name='CreateStrategy', description='The policy based on which multiple instances are created. The parameter takes effect only when the value of the **Amount** parameter is greater than 1.

*   **Atomicity**: atomicity. The instances are all created. If one instance cannot be created, none of the instances is created.
*   **Partial**: non-atomicity. Each instance is independently created. The failure in creating an instance does not affect the creation of the other instances.

> The default value of this parameter is **Atomicity**.', example='Atomicity', position='Query'),
  DBInstanceClass: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can also call the [DescribeAvailableResource](~~134039~~) operation to query the available instance types in a region.

To create a serverless instance, set this parameter to one of the following values:

*  Basic Edition for MySQL: Set this parameter to **mysql.n2.serverless.1c**.
*  High-availability Edition for MySQL: Set this parameter to **mysql.n2.serverless.2c**.
*   SQL Server: Set this parameter to **mssql.mem2.serverless.s2**.
*   PostgreSQL: Set this parameter to **pg.n2.serverless.1c**.', example='rds.mysql.s1.small', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance. The name must be 2 to 255 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

> The value cannot start with http:// or https://.', example='Test database', position='Query'),
  DBInstanceNetType: string(name='DBInstanceNetType', description='The network connection type of the instance. Set the value to **Intranet**.', example='Internet', position='Query'),
  DBInstanceStorage: int32(name='DBInstanceStorage', description='The storage capacity of the instance. Unit: GB. The storage capacity increases in increments of 5 GB. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can also call the [DescribeAvailableResource](~~134039~~) operation to query the storage capacity range that is supported for a specified instance type in a region.', example='100', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type that is used by the instance. Valid values:

*   **local_ssd**: local SSD. This is the recommended storage type.
*   **cloud_ssd**: standard SSD. This storage type is not recommended. Standard SSDs are no longer available for purchase in some Alibaba Cloud regions.
*   **cloud_essd**: enhanced SSD (ESSD) of performance level 1 (PL1).
*   **cloud_essd2**: ESSD of PL2.
*   **cloud_essd3**: ESSD of PL3.

The default value of this parameter is determined by the instance type specified by the **DBInstanceClass** parameter.

*   If the instance type specifies the local SSD storage type, the default value of this parameter is **local_ssd**.
*   If the instance type specifies the standard SSD or ESSD storage type, the default value of this parameter is **cloud_essd**.

> Serverless instances support only ESSDs of PL 1. For a serverless instance, you must set this parameter to **cloud_essd**.', example='cloud_essd', position='Query'),
  DBIsIgnoreCase?: string(name='DBIsIgnoreCase', description='Specifies whether the table name is case-sensitive. Valid values:

*   **true**: Table names are not case-sensitive. This is the default value.
*   **false**: Table names are case-sensitive.', example='true', position='Query'),
  DBParamGroupId?: string(name='DBParamGroupId', description='The ID of the parameter template that is used for the instance. You can call the [DescribeParameterGroups](~~144491~~) operation to query the ID of the parameter template.

*   If you want to create an instance that runs RDS Basic Edition and uses the X-Engine storage engine, you must call the preceding operation, locate the **mysql_xengine\\_8.0\\_basic_normal_safe** field in the response, find the ID of the required system parameter template, and then use the ID as the value for this parameter.
*   If you want to create an instance that runs RDS High-availability Edition and uses the X-Engine storage engine, you must call the preceding operation, locate the **mysql_xengine\\_8.0\\_standard_normal_safe** field in the response, find the ID of the required system parameter template, and then use the ID as the value for this parameter.', example='rpg-sys-*****', position='Query'),
  DBTimeZone?: string(name='DBTimeZone', description='The time zone of the instance. This parameter takes effect only when you set **Engine** to **MySQL** or **PostgreSQL**.

*   If you set **Engine** to **MySQL**:

    *   The time zone of the instance is in UTC. Valid values: \\*\\*-12:59\\*\\* to **+13:00**.
    *   If the instance uses local SSDs, you can specify the name of the time zone. Example: Asia/Hong_Kong. For more information, see [Time zones](~~297356~~).

*   If you set **Engine** to **PostgreSQL**:

    *   The time zone of the instance is not in UTC. For more information, see [Time zones](~~297356~~).
    *   You can specify this parameter only when the instance runs PostgreSQL with cloud disks.

**Note**

*   You can specify the time zone when you create a primary instance. You cannot specify the time zone when you create a read-only instance. Read-only instances inherit the time zone of their primary instance.
*   If you do not specify this parameter, the system automatically assigns the default time zone of the region in which the instance resides.', example='+08:00', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster to which the instance belongs.

If you create the instance in a dedicated cluster, you must specify this parameter.

*   You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the details of a dedicated cluster.
*   If no dedicated clusters are created, you can call the [CreateDedicatedHostGroup](~~209828~~) operation to create a dedicated cluster.', example='dhg-4n*****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable the release protection feature for the instance.

*   **true**
*   **false** (default)', example='true', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: The system prechecks the request and does not create the instance. The system prechecks items such as the request parameters, request format, service limits, and available resources.
*   **false**: The system sends the request without a precheck. If the request passes verification, the system creates the instance.', example='false', position='Query'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the key that is used for disk encryption in the region in which the instance resides. If you specify the EncryptionKey parameter, disk encryption is automatically enabled. In this case, you must also specify the **RoleARN** parameter. Disk encryption cannot be disabled after it is enabled.

You can obtain the ID of the key from the Key Management Service (KMS) console. You can also create a key. For more information, see [Create a CMK](~~181610~~).', example='0d24*****-da7b-4786-b981-9a164dxxxxxx', position='Query'),
  engine: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **MariaDB**', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', description='The database engine version of the instance.

*   Valid values if you set Engine to MySQL: **5.5**, **5.6**, **5.7**, and **8.0**
*   Valid values if you set Engine to SQLServer: **2008r2**, **08r2\\_ent_ha**, **2012**, **2012\\_ent_ha**, **2012\\_std_ha**, **2012\\_web**, **2014\\_std_ha**, **2016\\_ent_ha**, **2016\\_std_ha**, **2016\\_web**, **2017\\_std_ha**, **2017\\_ent**, **2019\\_std_ha**, and **2019\\_ent**
*   Valid values if you set Engine to PostgreSQL: **10.0**, **11.0**, **12.0**, **13.0**, **14.0**, and **15.0**
*   Valid value if you set Engine to MariaDB: **10.3**

**Serverless instances**

*   Valid values if you set Engine to MySQL: **5.7** and **8.0**
*   Valid values if you set Engine to SQLServer: **2016\\_std_sl**, **2017\\_std_sl**, and **2019\\_std_sl**
*   Valid value if you set Engine to PostgreSQL: **14.0**

> ApsaraDB RDS for MariaDB does not support serverless instances.', example='5.6', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**.
*   **Classic** (default)

**Note**

*   If the instance runs MySQL and uses cloud disks, you must set this parameter to **VPC**.
*   If the instance runs PostgreSQL or MariaDB, you must set this parameter to **VPC**.
*   If the instance runs SQL Server Basic or SQL Server Web, you can set this parameter to VPC or Classic. If the instance runs other database engines, you must set this parameter to **VPC**.', example='Classic', position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.
*   **Serverless**: serverless. This value is not supported for instances that run MariaDB. For more information, see [Overview of serverless ApsaraDB RDS for MySQL instances](~~411291~~), [Overview of serverless ApsaraDB RDS for SQL Server instances](~~604344~~), and [Overview of serverless ApsaraDB RDS for PostgreSQL instances](~~607742~~).

> ApsaraDB RDS automatically generates a purchase order and completes the payment.', example='Postpaid', position='Query'),
  period?: string(name='Period', description='Specifies whether to use yearly subscription or monthly subscription for the instance. Valid values:

*   **Year**
*   **Month**

> If you set PayType to **Prepaid**, you must specify this parameter.', example='Year', position='Query'),
  port?: string(name='Port', description='The port. You can initialize the port when you create the instance. Valid values: 1000 to 5999.', example='3306', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance. The private IP address must be within the CIDR block that is supported by the specified vSwitch. ApsaraDB RDS automatically assigns a private IP address to the instance based on the values of the **VPCId** and **vSwitchId** parameters.', example='172.16.XX.XX', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleARN?: string(name='RoleARN', description='The Alibaba Cloud Resource Name (ARN) that is provided by your Alibaba Cloud account for RAM users. RAM users can use the ARN to connect ApsaraDB RDS to KMS. You can call the [CheckCloudResourceAuthorized](~~446261~~) operation to query the ARN.', example='acs:ram::1406xxxxxx:role/aliyunrdsinstanceencryptiondefaultrole', position='Query'),
  securityIPList: string(name='SecurityIPList', description='The IP address whitelist of the instance. For more information, see [Use a database client or the CLI to connect to an ApsaraDB RDS for MySQL instance](~~43185~~). If the IP address whitelist contains more than one entry, separate the entries with commas (,). Each entry must be unique. The IP address whitelist can contain up to 1,000 entries. The entries in the IP address whitelist must be in one of the following formats:

*   IP addresses, such as 10.10.XX.XX.
*   CIDR blocks, such as 10.10.XX.XX/24. In this example, 24 indicates that the prefix of each IP address in the IP address whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.', example='10.10.XX.XX/24', position='Query'),
  serverlessConfig?: {
    autoPause?: boolean(name='AutoPause', description='Specifies whether to enable the automatic start and stop feature for the serverless instance. Valid values:

*   **true**
*   **false** (default)

> This parameter is required only for serverless ApsaraDB RDS for MySQL instances. After the automatic start and stop feature is enabled, if no connections to the instance are established within 10 minutes, the instance is suspended. After a connection to the instance is established, the instance is resumed.', example='true'),
    maxCapacity?: double(name='MaxCapacity', description='The maximum number of RDS Capacity Units (RCUs). Valid values:

*   Serverless ApsaraDB RDS for MySQL instances: **1 to 8**
*   Serverless ApsaraDB RDS for SQL Server instances: **2 to 8**
*   Serverless ApsaraDB RDS for PostgreSQL instances: **1 to 12**

> The value of this parameter must be greater than or equal to the value of **MinCapacity** and can be specified only to an **integer**.', example='8'),
    minCapacity?: double(name='MinCapacity', description='The minimum number of RCUs. Valid values:

*   Serverless ApsaraDB RDS for MySQL instances: **0.5 to 8**.
*   Serverless ApsaraDB RDS for SQL Server instances: **2 to 8**. Only integers are supported.
*   Serverless ApsaraDB RDS for PostgreSQL instances: **0.5 to 12**.

> The value of this parameter must be less than or equal to the value of **MaxCapacity**.', example='0.5'),
    switchForce?: boolean(name='SwitchForce', description='Specifies whether to enable the forced scaling feature for the serverless instance. Valid values:

*   **true**
*   **false** (default)

**Note**

*   This parameter is required only for serverless ApsaraDB RDS for MySQL instances. If you set this parameter to true, a transient connection that lasts approximately 1 minute occurs during forced scaling. Process with caution.
*   The RCU scaling for a serverless instance immediately takes effect. In some cases, such as the execution of large transactions, the scaling does not immediately take effect. In this case, you can enable this feature to forcefully scale the RCUs of the instance.', example='false'),
  }(name='ServerlessConfig', description='The settings of the serverless instance. This parameter is required when you create a serverless instance.

> ApsaraDB RDS for MariaDB does not support serverless instances.', shrink='json', position='Query'),
  storageAutoScale?: string(name='StorageAutoScale', description='Specifies whether to enable automatic storage expansion for the instance. Valid values:

*   **Enable**
*   **Disable** (default)

> After the instance is created, you can call the [ModifyDasInstanceConfig](~~199281~~) operation to adjust the settings of automatic storage expansion for the instance. For more information, see [Configure automatic storage expansion for an ApsaraDB RDS for MySQL instance](~~173826~~).', example='Disable', position='Query'),
  storageThreshold?: int32(name='StorageThreshold', description='The threshold based on which automatic storage expansion is triggered. Unit: percent. Valid values:

*   **10**
*   **20**
*   **30**
*   **40**
*   **50**

> If you set **StorageAutoScale** to **Enable**, you must specify this parameter.', example='50', position='Query'),
  storageUpperBound?: int32(name='StorageUpperBound', description='The maximum storage capacity that is allowed for automatic storage expansion. The storage capacity of the instance cannot exceed the maximum storage capacity. Unit: GB.

*   Valid values: an integer greater than or equal to 0.
*   If you set the **StorageAutoScale** parameter to **Enable**, you must also specify this parameter.', example='2000', minimum=0, position='Query'),
  systemDBCharset?: string(name='SystemDBCharset', description='The character set that is used by the instance. This parameter is no longer used.', example='gbk', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can use this parameter to add tags to the instance.

*   If the specified tag key is an existing key, the system directly adds the tag key to the instance. You can call the [ListTagResources](~~141258~~) operation to query the details of the existing tags.
*   If the specified tag key is not an existing key, the system creates the tag key and adds the tag key to the instance.
*   A tag key cannot be an empty string.
*   This parameter must be used together with **Tag.Value**.', example='testkey1'),
      value?: string(name='Value', description='The tag value that is associated with the specified tag key. You can use this parameter to add tags to the instance.

*   If the specified tag value is found in the specified tag key, the system directly adds the tag value to the instance. You can call the [ListTagResources](~~141258~~) operation to query the details of the existing tags.
*   If the specified tag value is not found in the specified tag key, the system creates the tag value and adds the tag value to the instance.
*   This parameter must be used together with **Tag.Key**.', example='testvalue1'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog', description='The ID of the host to which the logger instance belongs in the specified dedicated cluster.

If the instance runs RDS Enterprise Edition and you create the instance in a dedicated cluster, you must specify this parameter. If you do not specify this parameter, the system automatically assigns a host.

*   You can call the [DescribeDedicatedHosts](~~141948~~) operation to query the details of the hosts in a dedicated cluster.
*   If no hosts are created, you can call the [CreateDedicatedHost](~~210864~~) operation to create a host.', example='i-bp*****3', position='Query'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='The ID of the host to which the instance belongs in the specified dedicated cluster.

If you create the instance in a dedicated cluster, you must specify this parameter. If you do not specify this parameter, the system automatically assigns a host.

*   You can call the [DescribeDedicatedHost](~~141948~~) operation to query the details about the hosts in a dedicated cluster.
*   If no hosts are created, you can call the [CreateDedicatedHost](~~210864~~) operation to create a host.', example='i-bp*****1', position='Query'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='The ID of the host to which the secondary instance belongs in the specified dedicated cluster.

If the instance runs RDS High-availability Edition or RDS Enterprise Edition and you create the instance in a dedicated cluster, you must specify this parameter. If you do not specify this parameter, the system automatically assigns a host.

*   You can call the [DescribeDedicatedHosts](~~141948~~) operation to query the details of the hosts in a dedicated cluster.
*   If no hosts are created, you can call the [CreateDedicatedHost](~~210864~~) operation to create a host.', example='i-bp*****2', position='Query'),
  targetMinorVersion?: string(name='TargetMinorVersion', description='The minor engine version of the instance. This parameter is required only when you create an instance that runs MySQL or PostgreSQL. The value format varies based on the database engine of the instance.

*   If you create an instance that runs MySQL, the value is in the following format: `<RDS edition>_<Minor engine version>`. Examples: `rds_20200229`, `xcluster_20200229`, and `xcluster80_20200229`. The following list describes the fields in the example values:

    *   rds: The instance runs RDS Basic Edition or High-availability Edition.
    *   xcluster: The instance runs MySQL 5.7 on RDS Enterprise Edition.
    *   xcluster80: The instance runs MySQL 8.0 on RDS Enterprise Edition.

> You can call the [DescribeDBMiniEngineVersions](~~445835~~) operation to query the minor engine version. For more information about minor engine versions, see [Release notes of minor AliSQL versions](~~96060~~).

*   If you create an instance that runs PostgreSQL, the value is in the following format: `rds_postgres_<Major engine version>00_<Minor engine version>`. Example: `rds_postgres_1400_20220830`. The following list describes the fields in the example value:

    *   1400: The major engine version is PostgreSQL 14.
    *   20220830: the AliPG version. You can call the [DescribeDBMiniEngineVersions](~~445835~~) operation to query the AliPG version. For more information about minor engine versions, see [Release notes for AliPG](~~126002~~).

> If you configure the **BabelfishConfig** parameter for your instance that runs PostgreSQL and set the babelfishEnabled field to true, the value of this parameter is in the following format: `rds_postgres_Major engine version00_AliPG version_babelfish`.', example='rds_20200229', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the instance.

*   If you set the **Period** parameter to **Year**, the value of the **UsedTime** parameter ranges from **1 to 5**.
*   If you set the **Period** parameter to **Month**, the value of the **UsedTime** parameter ranges from **1 to 11**.

> If you set the PayType parameter to **Prepaid**, you must specify the UsedTime parameter.', example='2', position='Query'),
  userBackupId?: string(name='UserBackupId', description='The ID of the backup file. You can call the [ListUserBackupFiles](~~257821~~) operation to query backup files. If you want to create an instance by using the data of a backup file, you must specify this parameter.

This parameter is supported only when the following requirements are met:

*   **PayType** is set to **Postpaid**.
*   **Engine** is set to **MySQL**.
*   **EngineVersion** is set to **5.7**.
*   **Category** is set to **Basic**.', example='67798*****', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the VPC to which the instance belongs.

> This parameter is available when you set the **InstanceNetworkType** parameter to **VPC**.', example='vpc-*****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. The vSwitch must belong to the zone that is specified by **ZoneId**.

*   If you set **InstanceNetworkType** to **VPC**, you must also specify this parameter.
*   If you specify ZoneSlaveId1, you must specify the IDs of two vSwitches for this parameter and separate the IDs with a comma (,).', example='vsw-*****', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the primary instance.

*   If you specify a virtual private cloud (VPC) and a vSwitch, you must specify the ID of the zone to which the specified vSwitch belongs. Otherwise, the instance cannot be created.
*   If the instance runs RDS High-availability Edition, you must specify **ZoneIdSlave1**, which specifies whether to use the single-zone deployment method or the multi-zone deployment method.
*   If the instance runs RDS Enterprise Edition, you must specify **ZoneIdSlave1** and **ZoneIdSlave2**, which specify whether to use the single-zone deployment method or the multi-zone deployment method.', example='cn-hangzhou-b', position='Query'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='The ID of the zone in which the secondary instance resides. If you set the ZoneIdSlave1 parameter and the **ZoneId** parameter to the same value, the single-zone deployment method is used. If you set the ZoneIdSlave1 parameter and the **ZoneId** parameter to different values, the multi-zone deployment method is used.', example='cn-hangzhou-c', position='Query'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='The ID of the zone in which the logger instance resides. If you set the ZoneIdSlave2 parameter and the **ZoneId** parameter to the same value, the single-zone deployment method is used. If you set the ZoneIdSlave2 parameter and the **ZoneId** parameter to different values, the multi-zone deployment method is used.', example='cn-hangzhou-d', position='Query'),
}

model CreateDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', description='The endpoint of the instance.

> The **DBInstanceNetType** parameter indicates whether the endpoint is internal or public.', example='rm-uf6wjk5*****.mysql.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance If the value of the **Amount** parameter is greater than **1**, more than one instance ID is returned. The number of instance IDs that are returned is the same as the value of the Amount parameter. The returned instance IDs are separated by commas (,).

For example, if the value of the **Amount** parameter is **3**, three instance IDs are returned. Example: `rm-uf6wjk5*****1,rm-uf6wjk5*****2,rm-uf6wjk5*****3`', example='rm-uf6wjk5*****'),
  dryRun?: boolean(name='DryRun', description='Indicates that the system performed a dry run.

*   The value is fixed as **true**.
*   If the system does not perform a dry run, this parameter is not returned.', example='true'),
  dryRunResult?: boolean(name='DryRunResult', description='Indicates whether the request passed the dry run. Valid values:

*   **true**
*   **false** 

*   If the system does not perform a dry run, this parameter is not returned.
*   If the request failed the dry run, an error message is returned.', example='true'),
  message?: string(name='Message', description='The message that indicates whether multiple instances are created.

> The parameter is returned only when the value of the **Amount** parameter is greater than 1.', example='Batch Create DBInstance Task Is In Process.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='1007893702*****'),
  port?: string(name='Port', description='The port that is used to connect to the instance.

> The **DBInstanceNetType** parameter indicates whether the port number is internal or public.', example='3306'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
  tagResult?: boolean(name='TagResult', description='Indicates whether the specified tag is added to the instance. Valid values:

*   **true**: The specified tag is added to the instance.
*   **false**: The specified tag fails to be added to the instance.

> If you do not add a tag to the instance, this parameter is not returned.', example='true'),
  taskId?: string(name='TaskId', description='The ID of the task that is run to create multiple instances.

*   This parameter is returned only when the value of **Amount** is greater than 1.
*   **TaskID** cannot be used to query a task.', example='s2365879-a9d0-55af-fgae-f2*****'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and pricing of ApsaraDB RDS. For more information, see [Billable items, billing methods, and pricing](~~45020~~).
  * For more information about ApsaraDB RDS instance types, see [Primary ApsaraDB RDS instance types](~~26312~~).
  *
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6000170000591aed949d0f****', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the internal endpoint.

When you create any type of endpoint, an internal endpoint is automatically created for the endpoint. This parameter specifies the prefix of the internal endpoint.', example='rm-****-ro', position='Query'),
  DBInstanceEndpointDescription?: string(name='DBInstanceEndpointDescription', description='The user-defined description of the endpoint.', example='for readonly business', position='Query'),
  DBInstanceEndpointType: string(name='DBInstanceEndpointType', description='The type of the endpoint. Valid values:

*   Primary: read/write endpoint of the instance
*   Readonly: read-only endpoint of the instance', example='Readonly', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****', position='Query'),
  nodeItems?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****'),
      nodeId?: string(name='NodeId', description='The ID of the node.', example='rn-xxxx-****'),
      weight?: long(name='Weight', description='The weight of the node. Read requests are distributed based on the weight.

Valid values: 0 to 100.', example='50'),
    }
  ](name='NodeItems', description='The node that is configured for the endpoint.', shrink='json', position='Query'),
  port: string(name='Port', description='The port number of the internal endpoint. You can specify the port number for the internal endpoint.

Valid values: 3000 to 5999.', example='3306', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The IP address of the internal endpoint.', example='172.16.XX.XX', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the internal endpoint.', example='vsw-bp1kqp****', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID of the internal endpoint.', example='vpc-xxxmmxjqqi****', position='Query'),
}

model CreateDBInstanceEndpointResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', description='The internal endpoint.', example='rm-****.mysql.rds.aliyuncs.com'),
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-****'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8E88DED-533F-4B3C-9207-731FBF394CCA'),
}

model CreateDBInstanceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceEndpointResponseBody(name='body'),
}

/**
  * ## Background information
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  * *   Each type of endpoint can contain an internal endpoint and an external endpoint. When you create any type of endpoint, an internal endpoint is automatically created for the endpoint.
  * *   If the instance runs MySQL, you must specify VPCId, VSwitchId, and NodeItems.
  *
 */
async function createDBInstanceEndpoint(request: CreateDBInstanceEndpointRequest): CreateDBInstanceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstanceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceEndpointAddressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6000170000591aed949d0f****', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the public endpoint.', example='rm-*****', position='Query'),
  DBInstanceEndpointId: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance. You can call the [DescribeDBInstanceEndpoints](~~464397~~) operation to query the endpoint ID of the instance.', example='ep-****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****', position='Query'),
  ipType: string(name='IpType', description='The network type of the endpoint. Only Internet is supported. Set the value to **Public**.', example='Public', position='Query'),
  port: string(name='Port', description='The port number of the public endpoint.', example='3306', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBInstanceEndpointAddressResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', description='The public endpoint.', example='rm-******.mysql.rds.aliyuncs.com'),
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-****'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='08A3B71B-FE08-4B03-974F-CC7EA6DB1828'),
}

model CreateDBInstanceEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceEndpointAddressResponseBody(name='body'),
}

/**
  * ## Background information
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  * *   You can create a public endpoint of an endpoint type only when no public endpoint is created for this endpoint type.
  * *   The node weights and other configurations are the same as those of the internal endpoint of this endpoint type. Only one public endpoint and one internal endpoint can be created for each endpoint type.
  *
 */
async function createDBInstanceEndpointAddress(request: CreateDBInstanceEndpointAddressRequest): CreateDBInstanceEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstanceEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceForRebuildRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the destination instance. The value must be 2 to 256 characters in length. The value must start with a letter and can contain letters, digits, underscores (\\_), and hyphens (-).

> The value cannot start with http:// or https://.', example='Test database', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance that you want to rebuild.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network connection to the instance. Valid values:

*   **Internet**
*   **Intranet**', example='Internet', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the destination instance. Valid values:

*   **VPC**
*   **Classic**

Default value: Classic.

> If you set this parameter to **VPC**, you must also specify **VpcId** and **VSwitchId**.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the destination instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The unit of the subscription duration. Valid values:

*   **Year**
*   **Month**

> If you set PayType to **Prepaid**, you must also specify this parameter.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can leave this parameter empty.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPList?: string(name='SecurityIPList', description='The IP address whitelist of the instance. For more information, see [Use a database client or the CLI to connect to an ApsaraDB RDS for MySQL instance](~~43185~~). If you want to add more than one entry to the IP address whitelist, separate the entries with commas (,). Each entry must be unique. You can add up to 1,000 entries. The entries in the IP address whitelist must be in one of the following formats:

*   IP addresses, such as 10.10.XX.XX.
*   CIDR blocks, such as 10.10.XX.XX/24. In this example, 24 indicates that the prefix of each IP address in the IP address whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.', example='127.0.0.1', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the instance. Valid values:

*   If you set **Period** to **Year**, the value of **UsedTime** ranges from **1** to **5**.
*   If you set **Period** to **Month**, the value of **UsedTime** ranges from **1** to **11**.

> If you set **PayType** to **Prepaid**, you must specify this parameter.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The VPC ID of the destination instance. This parameter is available only when you set **InstanceNetworkType** to **VPC**.

> If you specify this parameter, you must also specify **ZoneId**.', example='vpc-uf6f7l4fg90xxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. The vSwitch must belong to the zone that is specified by **ZoneId**.

> 

*   If you set **InstanceNetworkType** to **VPC**, you must also specify this parameter.

*   If you specify ZoneSlaveId1, you must specify the IDs of two vSwitches for this parameter and separate the IDs with a comma (,).', example='vsw-uf6adz52c2pxxxxx', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the primary instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.

> If you specify a virtual private cloud (VPC) and a vSwitch, you must specify this parameter to identify the zone for the vSwitch.', example='cn-hangzhou-e', position='Query'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='The zone ID of the secondary instance.

> If the instance does not run RDS Basic Edition, you must specify this parameter.', example='cn-hangzhou-c', position='Query'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='The zone ID of the logger instance.

> This parameter is available only when the instance runs RDS Enterprise Edition.', example='cn-hangzhou-d', position='Query'),
}

model CreateDBInstanceForRebuildResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  message?: string(name='Message', description='The response parameters.', example='success'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20793850608****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='417450000'),
}

model CreateDBInstanceForRebuildResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceForRebuildResponseBody(name='body'),
}

/**
  * **Before you call this operation, make sure that you understand the billing methods and pricing of ApsaraDB RDS. For more information, see [Pricing, billable items, and billing methods](~~45020~~).**
  * You can call this operation only for instances that are moved to the recycle bin. For more information about instances that can be moved to the recycle bin, see [Recycle bin](~~96065~~).
  *
 */
async function createDBInstanceForRebuild(request: CreateDBInstanceForRebuildRequest): CreateDBInstanceForRebuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstanceForRebuild', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBNodesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-2ze450g4ctg6t****', position='Query'),
  DBNode?: [ 
    {
      classCode?: string(name='classCode', description='The specification information of the node.', example='mysql.n2.medium.xc'),
      zoneId?: string(name='zoneId', description='The zone ID of the node.', example='cn-zhangjiakou-a'),
    }
  ](name='DBNode', description='An array that consists of the details of the node.', shrink='json', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDBNodesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-2ze450g4ctg6t****'),
  nodeIds?: string(name='NodeIds', description='The ID of the created node. The value is a string. Multiple values are separated by commas (`,`).', example='rn-abcd2*****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='2133400000*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7A41C147-C8D0-4DAE-A1A2-17EBCD60DFA1'),
}

model CreateDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBNodesResponseBody(name='body'),
}

/**
  * ## Background information
  * This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition. These RDS instances are referred to as RDS clusters.
  *
 */
async function createDBNodes(request: CreateDBNodesRequest): CreateDBNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBNodes', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBProxyEndpointAddressRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the proxy endpoint. Enter a custom prefix.', example='test1234', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3axxxxx', position='Query'),
  DBProxyConnectStringNetType: string(name='DBProxyConnectStringNetType', description='The network type of the proxy endpoint. Valid values:

*   **Public**: Internet
*   **VPC**: Virtual Private Cloud (VPC)
*   **Classic**: classic network

Default value: **Classic**', example='Public', position='Query'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', description='The ID of the proxy endpoint. You can call the [DescribeDBProxyEndpoint](~~140955~~) operation to query the ID of the proxy endpoint.', example='ta9um4xxxxx', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  DBProxyNewConnectStringPort?: string(name='DBProxyNewConnectStringPort', description='The port number that is associated with the proxy endpoint.

*   If the instance runs MySQL, the default value is **3306**.
*   If the instance runs PostgreSQL, the default value is **5432**.', example='3306', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the VPC to which the proxy endpoint belongs. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the ID of the VPC.

> This parameter must be specified when **DBProxyConnectStringNetType** is set to **VPC**.', example='vpc-bpxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is associated with the specified VPC. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the ID of the vSwitch.

> This parameter must be specified when **DBProxyConnectStringNetType** is set to **VPC**.', example='vsw-bpxxxxxx', position='Query'),
}

model CreateDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2911788-25E8-42E5-A3A3-1B38D263F01E'),
}

model CreateDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBProxyEndpointAddressResponseBody(name='body'),
}

/**
  * After you enable the dedicated proxy feature for an ApsaraDB RDS for MySQL instance or enable the database proxy feature for an ApsaraDB RDS for PostgreSQL instance, a default proxy endpoint is created. You can call this operation to create proxy endpoints of different network types. For more information, see [Activate and configure the database proxy feature for an ApsaraDB RDS for PostgreSQL instance](~~418272~~) and [What are database proxies?](~~138705~~)
  * > 
  * *   The following network types are supported for ApsaraDB RDS for MySQL instances that use local disks: virtual private cloud (VPC), Classic, and Public.
  * *   The following network types are supported for instances that use cloud disks: VPC and Public. If you want to create a proxy endpoint of the public network type, you must configure IP address whitelists for the instance and its read-only instances to ensure connectivity between the client and the instance. You can call the [ModifySecurityIps](~~26242~~) operation to configure an IP address whitelist for an instance.
  *
 */
async function createDBProxyEndpointAddress(request: CreateDBProxyEndpointAddressRequest): CreateDBProxyEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBProxyEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseRequest {
  characterSetName: string(name='CharacterSetName', description='The character set.

*   Valid values for MySQL or MariaDB databases: **utf8, gbk, latin1, and utf8mb4**

*   Valid values for SQL Server databases: **Chinese_PRC_CI_AS, Chinese_PRC_CS_AS, SQL_Latin1\\_General_CP1\\_CI_AS, SQL_Latin1\\_General_CP1\\_CS_AS, and Chinese_PRC_BIN**

*   Valid values for PostgreSQL databases: a value in the `Character set,<Collate>,<Ctype>` format. Example: `UTF8,C,en_US.utf8`.

    *   Valid values for the character set: **KOI8U, UTF8, WIN866, WIN874, WIN1250, WIN1251, WIN1252, WIN1253, WIN1254, WIN1255, WIN1256, WIN1257, WIN1258, EUC_CN, EUC_KR, EUC_TW, EUC_JP, EUC_JIS\\_2004, KOI8R, MULE_INTERNAL, LATIN1, LATIN2, LATIN3, LATIN4, LATIN5, LATIN6, LATIN7, LATIN8, LATIN9, LATIN10, ISO\\_8859\\_5, ISO\\_8859\\_6, ISO\\_8859\\_7, ISO\\_8859\\_8, and SQL_ASCII**
    *   Valid values for the **Collate** field: You can execute the `SELECT DISTINCT collname FROM pg_collation;` statement to obtain the field value. The default value is **C**.
    *   Valid values for the **Ctype** field: You can execute the `SELECT DISTINCT collctype FROM pg_collation;` statement to obtain the field value. The default value is **en_US.utf8**.', example='gbk', position='Query'),
  DBDescription?: string(name='DBDescription', description='The description of the database. The description must be 2 to 256 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.

> The value cannot start with `http://` or `https://`.', example='Database for testing', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the database.

> 

*   The name must be 2 to 64 characters in length.

*   The name must start with a lowercase letter and end with a lowercase letter or digit.
*   The name can contain lowercase letters, digits, underscores (\\_), and hyphens (-).
*   The name must be unique within the instance.
*   For more information about invalid characters, see [Forbidden keywords table](~~26317~~).', example='rds_mysql', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5A77D650-27A1-4E08-AD9E-59008EDB6927'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

/**
  * If you want to perform data management tasks such as data change and schema design, use Data Management (DMS). For more information, see [List of operations by function of DMS](~~97965~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The maximum number of databases that can be created on an instance is not reached. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the maximum number of databases that can be created on an instance.
  * *   The instance is not a read-only instance.
  * > This operation is not supported for instances that run PostgreSQL with local SSDs or SQL Server 2017 (cluster edition). You can execute the CREATE DATABASE statement to create a database.
  *
 */
async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateDdrInstanceRequest {
  backupSetId?: string(name='BackupSetId', description='The ID of the backup set that is used for the restoration. You can call the [DescribeCrossRegionBackups](~~121733~~) operation to query the ID of the backup set.

> If you set **RestoreType** to **BackupSet**, you must specify this parameter.', example='14***', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  connectionMode?: string(name='ConnectionMode', description='The connection mode of the destination instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode

Default value: **Standard**.', example='Standard', position='Query'),
  DBInstanceClass: string(name='DBInstanceClass', description='The instance type of the destination instance. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='rds.mysql.s1.small', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance. The name must be 2 to 256 characters in length. The name can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

> The name cannot start with http:// or https://.', example='Test database', position='Query'),
  DBInstanceNetType: string(name='DBInstanceNetType', description='The network connection type of the destination instance. Valid values:

*   **Internet**
*   **Intranet**', example='Intranet', position='Query'),
  DBInstanceStorage: int32(name='DBInstanceStorage', description='The storage capacity of the destination instance. Valid values: **5 to 2000**. Unit: GB. You can increase the storage capacity at a step size of 5 GB. For more information, see [Primary instance types](~~26312~~).', example='20', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the destination instance. Only the local SSD storage type is supported. Default value: **local_ssd**.', example='local_ssd', position='Query'),
  engine: string(name='Engine', description='The database engine of the destination instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', description='The major engine version of the destination instance. The value of this parameter varies based on the value of **Engine**.

*   Valid values when Engine is set to MySQL: **5.5, 5.6, 5.7, and 8.0**
*   Valid values when Engine is set to SQLServer: **2008r2, 08r2\\_ent_ha, 2012, 2012\\_ent_ha, 2012\\_std_ha, 2012\\_web, 2014\\_std_ha, 2016\\_ent_ha, 2016\\_std_ha, 2016\\_web, 2017\\_std_ha, 2017\\_ent, 2019\\_std_ha, and 2019\\_ent**
*   Valid values when Engine is set to PostgreSQL: **9.4, 10.0, 11.0, 12.0, and 13.0**', example='5.6', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**
*   **Classic**

Default value: Classic.

> If you set this parameter to **VPC**, you must also specify **VpcId** and **VSwitchId**.', example='Classic', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The unit that is used to measure the subscription duration of the destination instance. Valid values:

*   **Year**
*   **Month**

> If you set PayType to **Prepaid**, you must specify UsedTime.', example='Year', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the destination instance. The private IP address must be within the CIDR block that is supported by the specified vSwitch. The system automatically assigns a private IP address to an instance based on the values of **VPCId** and **VSwitchId**.', example='172.XXX.XXX.69', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the destination instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyxxxxxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The point in time that you specify must be earlier than the current time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> If **RestoreType** is set to **BackupTime**, you must specify this parameter.', example='2019-05-30T03:29:10Z', position='Query'),
  restoreType: string(name='RestoreType', description='The method that is used to restore data. Valid values:

*   **BackupSet**: restores data from a backup set. If you use this value, you must also specify **BackupSetID**.
*   **BackupTime**: restores data to a point in time. You must also specify **RestoreTime**, **SourceRegion**, and **SourceDBInstanceName**.', example='BackupSet', position='Query'),
  securityIPList: string(name='SecurityIPList', description='The IP address whitelist of the destination instance. If you want to add more than one entry to the IP address whitelist, separate the entries with commas (,). Each entry must be unique. You can add a maximum of 1,000 entries. For more information, see [Configure an IP address whitelist for an ApsaraDB RDS for MySQL instance](~~43185~~). The entries in the IP address whitelist must be in one of the following formats:

*   IP address. Example: 10.23.12.24.
*   CIDR block. Example: 10.23.12.24/24. In this example, 24 indicates that the prefix of the CIDR block is 24 bits in length. You can replace 24 with a value that ranges from 1 to 32.', example='127.0.0.1', position='Query'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='The ID of the source instance if you want to restore data to a point in time.

> If you set **RestoreType** to **BackupTime**, you must specify this parameter.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  sourceRegion?: string(name='SourceRegion', description='The region ID of the source instance if you want to restore data to a point in time.

> If you set **RestoreType** to **BackupTime**, you must specify this parameter.', example='cn-hangzhou', position='Query'),
  systemDBCharset?: string(name='SystemDBCharset', description='The character set of the destination instance. Valid values:

*   **utf8**
*   **gbk**
*   **latin1**
*   **utf8mb4**', example='uft8', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the instance.

*   If you set **Period** to **Year**, the value of UsedTime ranges from **1 to 3**.
*   If you set **Period** to **Month**, the value of UsedTime ranges from **1 to 9**.

> If you set PayType to **Prepaid**, you must specify UsedTime.', example='2', position='Query'),
  VPCId?: string(name='VPCId', description='The VPC ID of the instance. This parameter is available only when you set **InstanceNetworkType** to **VPC**.

> If you specify this parameter, you must also specify **ZoneId**.', example='vpc-xxxxxxxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the destination instance. If you specify more than one vSwitch, separate the IDs of the vSwitches with commas (,). This parameter is available only when you set **InstanceNetworkType** to **VPC**.

> If you specify this parameter, you must also specify **ZoneId**.', example='vsw-xxxxxxxxxxx', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the destination instance. If the destination instance is deployed in multiple zones, separate the IDs of the zones with colons (:).

> If you specify a virtual private cloud (VPC) and a vSwitch, you must specify this parameter to identify the zone for the vSwitch.', example='cn-hangzhou-b', position='Query'),
}

model CreateDdrInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the destination instance.

> **DBInstanceNetType** indicates whether the endpoint is internal or public.', example='rm-xxxxx.mysql.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the destination instance.', example='rm-xxxxx'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='2038691xxxxx'),
  port?: string(name='Port', description='The port number that is used to connect to the destination instance.

> **DBInstanceNetType** indicates whether the port is internal or public.', example='3306'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E52666CC-330E-418A-8E5B-A19E3FB42D13'),
}

model CreateDdrInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDdrInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, you can call the [CheckCreateDdrDBInstance](~~121721~~) operation to check whether the data of the source instance can be restored from a cross-region backup set.
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
  *
 */
async function createDdrInstance(request: CreateDdrInstanceRequest): CreateDdrInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDdrInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiagnosticReportRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk521****', position='Query'),
  endTime: string(name='EndTime', description='The end time of the monitored data that is used to generate the diagnostic report. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2018-06-12T15:00Z', position='Query'),
  startTime: string(name='StartTime', description='The start time of the monitored data that is used to generate the diagnostic report. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2018-06-11T15:00Z', position='Query'),
}

model CreateDiagnosticReportResponseBody = {
  reportId?: string(name='ReportId', description='The ID of the diagnostic report.', example='10166270'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8DA8956A-53DA-423E-9540-387428ED37FF-5711'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

/**
  * > This operation is no longer maintained. You can use the CreateDiagnosticReport operation of Database Autonomy Service (DAS) to create a diagnostic report.
  * After you call this operation to create a diagnostic report, you can call the DescribeDiagnosticReportList operation to download the diagnostic report.
  *
 */
async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiagnosticReport', 'POST', '/', 'json', false, 'json', request);
}

model CreateGADInstanceRequest {
  centralDBInstanceId: string(name='CentralDBInstanceId', description='The ID of the primary instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of instance. The primary instance serves as the central node of the global active database cluster.

> 

*   A primary instance can serve as the central node only of a single global active database cluster.

*   Only a primary instance that is created in one of the following regions can serve as the central node of a global active database cluster: China (Hangzhou), China (Shanghai), China (Qingdao), China (Beijing), China (Zhangjiakou), China (Shenzhen), and China (Chengdu).', example='rm-uf6wjk5*******', position='Query'),
  centralRdsDtsAdminAccount: string(name='CentralRdsDtsAdminAccount', description='The username of the privileged account of the central node. You can call the [DescribeAccounts](~~26265~~) operation to query the privileged account of the central node.', example='test', position='Query'),
  centralRdsDtsAdminPassword: string(name='CentralRdsDtsAdminPassword', description='The password of the privileged account of the central node.', example='Test12345', position='Query'),
  centralRegionId: string(name='CentralRegionId', description='The region ID of the central node. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  DBList: string(name='DBList', description='A JSON array that consists of the information about a specified database on the central node. All database information that you specify in this array is synchronized to the unit nodes of the global active database cluster. The JSON array contains the following fields:

*   **name**: the name of the database.
*   **all**: specifies whether to synchronize all data in the database or the table. Valid values: **true** and **false**.
*   **Table**: the name of the table. If you set the **all** field to **false**, you must nest the name of the table that you want to synchronize into the JSON array.

Example: `{ "testdb": { "name": "testdb", "all": false, "Table": { "order": { "name": "order", "all": true }, "ordernew": { "name": "ordernew", "all": true } } } }`', example='{    "testdb": {     "name": "testdb",     "all": false,     "Table": {       "order": {         "name": "order",         "all": true       },       "ordernew": {         "name": "ordernew",         "all": true       }     }   } }', position='Query'),
  description?: string(name='Description', description='The name of the global active database cluster.', example='test', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can create N tag keys at a time. Valid values of N: **1 to 20**. The value of this parameter cannot be an empty string.', example='testkey1'),
      value?: string(name='Value', description='The value of the tag. You can create N tag values at a time. Valid values of N: **1 to 20**. The value of this parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='An array that consists of the details about the tag.', position='Query'),
  unitNode: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the unit node that you want to create. The name must meet the following requirements:

*   The name must be **2 to 255** characters in length.
*   The name can contain letters, digits, underscores (\\_), and hyphens (-) and must start with a letter.
*   It cannot start with `http://` or `https://`.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='test'),
      DBInstanceStorage?: long(name='DBInstanceStorage', description='The storage capacity of the unit node that you want to create. Unit: GB. The storage capacity increases in increments of 5 GB. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can also call the [DescribeAvailableResource](~~134039~~) operation to query the storage capacity range that is supported for a specified instance type in a region.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='20'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type that is used by the instance. Valid values:

*   **local_ssd**: local SSD (recommended).
*   **cloud_ssd**: standard SSD. This storage type is not recommended. Standard SSDs are no longer available for purchase in some Alibaba Cloud regions.
*   **cloud_essd**: ESSD of performance level 1 (PL1).
*   **cloud_essd2**: ESSD of PL2.
*   **cloud_essd3**: ESSDs of PL3.

The default value of this parameter is determined by the instance type specified by the **DBInstanceClass** parameter.

*   If the instance type specifies the local disk storage type, the default value of this parameter is **local_ssd**.
*   If the instance type specifies the cloud disk storage type, the default value of this parameter is **cloud_essd**.', example='cloud_essd2'),
      dbInstanceClass?: string(name='DbInstanceClass', description='The instance type of the unit node that you want to create. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can call the [DescribeAvailableResource](~~134039~~) operation to query the available instance types in a region.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='rds.mysql.t1.small'),
      dtsConflict: string(name='DtsConflict', description='The conflict resolution policy based on which Data Transmission Service (DTS) responds to primary key conflicts during data synchronization to the unit node that you want to create. Valid values:

*   **overwrite**: DTS overwrites the conflicting primary key on the destination node.
*   **interrupt**: DTS stops the synchronization task, reports an error, and then exits.
*   **ignore**: DTS hides the conflicting primary key on the node.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='overwrite'),
      dtsInstanceClass: string(name='DtsInstanceClass', description='The specifications of the data synchronization task for the unit node that you want to create. Valid values:

*   **small**
*   **medium**
*   **large**
*   **micro**

> For more information, see [Specifications of data synchronization tasks](~~26605~~).

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='medium'),
      engine?: string(name='Engine', description='The database engine of the unit node that you want to create. Set the value to **MySQL**.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the unit node that you want to create. Valid values:

*   **8.0**
*   **5.7**
*   **5.6**
*   **5.5**

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='8.0'),
      payType?: string(name='PayType', description='The billing method of the unit node that you want to create. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.

> The system automatically generates a purchase order and completes the payment.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='Postpaid'),
      regionID: string(name='RegionID', description='The region ID of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou'),
      securityIPList?: string(name='SecurityIPList', description='The IP address whitelist of the unit node that you want to create. For more information, see [IP address whitelist](~~43185~~). If you want to add more than one entry to the IP address whitelist, separate the entries with commas (,). Each entry must be unique. The IP address whitelist can contain up to 1,000 entries. The entries in the IP address whitelist must be in one of the following formats:

*   IP addresses, such as `10.10.10.10`.
*   CIDR blocks, such as `10.10.10.10/24`. In this example, **24** indicates that the prefix of each IP address in the IP address whitelist is 24 bits in length. You can replace 24 with a value within the range of **1 to 32**.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='10.10.10.10'),
      vSwitchID?: string(name='VSwitchID', description='The vSwitch ID of the unit node that you want to create.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='vsw-bp1tg609m5j85********'),
      vpcID?: string(name='VpcID', description='The virtual private cloud (VPC) ID of the unit node that you want to create.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='vpc-bp19ame5m1r3o********'),
      zoneID?: string(name='ZoneID', description='The zone ID of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query the ID of the zone.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
      zoneIDSlave1?: string(name='ZoneIDSlave1', description='The zone ID of the secondary node of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query the ID of the zone.

*   If the value of this parameter is the same as the **zone ID** of the unit node that you want to create, the single-zone deployment method is used.
*   If the value of this parameter is different from the **zone ID** of the unit node that you want to create, the multiple-zone deployment method is used.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
      zoneIDSlave2?: string(name='ZoneIDSlave2', description='The zone ID of the logger node of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query the ID of the zone.

*   If the value of this parameter is the same as the **zone ID** of the unit node that you want to create, the single-zone deployment method is used.
*   If the value of this parameter is different from the **zone ID** of the unit node that you want to create, the multiple-zone deployment method is used.

**N** specifies unit node N. The value of N is an integer that ranges from **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
    }
  ](name='UnitNode', description='An array that consists of the details about the unit node.', position='Query'),
}

model CreateGADInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F8C06AD-3F37-57A0-ABBF-ABD7824F55CE'),
  result?: {
    createMemberCount?: string(name='CreateMemberCount', description='The number of unit nodes that are created by calling this operation.', example='2'),
    gadInstanceName?: string(name='GadInstanceName', description='The ID of the global active database cluster.', example='gad-rm-bp1npi2j8********'),
    taskID?: string(name='TaskID', description='The ID of the task.', example='5374xxxx'),
  }(name='Result', description='An array that consists of the information returned.'),
}

model CreateGADInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGADInstanceResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * *   Your Alibaba Cloud account is used.
  * *   The balance in your Alibaba Cloud account is greater than or equal to USD 100.
  * *   A primary ApsaraDB RDS for MySQL instance is created, and the instance is not running as a node in a global active database cluster. You can call the [CreateDBInstance](~~26228~~) operation to create an instance.
  * > You must create a primary ApsaraDB RDS for MySQL instance in one of the following regions: China (Hangzhou), China (Shanghai), China (Qingdao), China (Beijing), China (Zhangjiakou), China (Shenzhen), and China (Chengdu).
  * For more information, see [Create and release an ApsaraDB RDS global active database cluster](~~328592~~).
  *
 */
async function createGADInstance(request: CreateGADInstanceRequest): CreateGADInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGADInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateGadInstanceMemberRequest {
  centralDBInstanceId: string(name='CentralDBInstanceId', description='The ID of the central node. You can call the [DescribeGadInstances](~~330105~~) operation to query the ID of the central node.', example='gad-rm-bp1npi2j8****', position='Query'),
  centralRdsDtsAdminAccount: string(name='CentralRdsDtsAdminAccount', description='The username of the privileged account of the central node. You can call the [DescribeAccounts](~~26265~~) operation to query the privileged account of the central node.', example='test', position='Query'),
  centralRdsDtsAdminPassword: string(name='CentralRdsDtsAdminPassword', description='The password of the privileged account of the central node.', example='Test12345', position='Query'),
  centralRegionId: string(name='CentralRegionId', description='The region ID of the central node. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  DBList: string(name='DBList', description='A JSON array that consists of the information about the databases on the central node. All database information that you specify in this array is synchronized to the unit nodes of the global active database cluster. The JSON array contains the following parameters:

*   **name**: the name of the database.
*   **all**: specifies whether to synchronize all data in the database or the table. Valid values: **true** and **false**.
*   **Table**: the name of the table. If you set the **all** parameter to **false**, you must nest the name of the table that you want to synchronize into the JSON array.

Example: `{ "testdb": { "name": "testdb", "all": false, "Table": { "order": { "name": "order", "all": true }, "ordernew": { "name": "ordernew", "all": true } } } }`

>  For more information, see [Objects of DTS tasks](~~209545~~).', example='{    "testdb": {     "name": "testdb",     "all": false,     "Table": {       "order": {         "name": "order",         "all": true       },       "ordernew": {         "name": "ordernew",         "all": true       }     }   } }', position='Query'),
  gadInstanceId: string(name='GadInstanceId', description='The ID of the global active database cluster. You can call the [DescribeGadInstances](~~330105~~) operation to query the ID of the global active database cluster.', example='gad-rm-bp1npi2j8****', position='Query'),
  unitNode: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the unit node that you want to create. The name must meet the following requirements:

*   The name must be **2 to 255** characters in length.
*   The name can contain letters, digits, underscores (\\_), and hyphens (-) and must start with a letter.
*   The name cannot start with `http://` or `https://`.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='test'),
      DBInstanceStorage?: long(name='DBInstanceStorage', description='The storage capacity of the unit node that you want to create. Unit: GB. You can adjust the storage capacity in increments of 5 GB. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can call the [DescribeAvailableResource](~~134039~~) operation to query the storage capacity range that is supported for a specified instance type in a region.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='20'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The type of storage media that is used for the instance. Valid values:

* **local_ssd**: local SSDs. This is the recommended storage type.
* **cloud_ssd**: standard SSDs.
* **cloud_essd**: enhanced SSDs (ESSDs) of performance level 1 (PL1).
* **cloud_essd2**: ESSDs of PL2.
* **cloud_essd3**: ESSDs of PL3.', example='cloud_essd'),
      dbInstanceClass?: string(name='DbInstanceClass', description='The instance type of the unit node that you want to create. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~). You can call the [DescribeAvailableResource](~~134039~~) operation to query the available instance types in a region.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='rds.mysql.t1.small'),
      dtsConflict: string(name='DtsConflict', description='The conflict resolution policy of the unit node that you want to create. This policy is based on which Data Transmission Service (DTS) responds to primary key conflicts during data synchronization to the new unit node. Valid values:

*   **overwrite**: DTS overwrites the conflicting primary key on the destination node.
*   **interrupt**: DTS stops the synchronization task, reports an error, and then exits.
*   **ignore**: DTS overwrites the conflicting primary key on the logger node.

**N** in this parameter specifies unit node N. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='overwrite'),
      dtsInstanceClass: string(name='DtsInstanceClass', description='The specifications of the data synchronization task for the unit node that you want to create. Valid values:

*   **small**
*   **medium**
*   **large**
*   **micro**

>  For more information, see [Specifications of data synchronization tasks](~~26605~~).

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='medium'),
      engine?: string(name='Engine', description='The database engine of the unit node that you want to create. Set the value to **MySQL**.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the unit node that you want to create. Valid values:

*   **8.0**
*   **5.7**
*   **5.6**
*   **5.5**

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='8.0'),
      regionID: string(name='RegionID', description='The region ID of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou'),
      securityIPList?: string(name='SecurityIPList', description='The IP address allowlist of the unit node that you want to create. For more information, see [IP address allowlist](~~43185~~). If the IP address allowlist contains more than one entry, separate the entries with commas (,). Each entry must be unique. The IP address allowlist can contain up to 1,000 entries. The entries in the IP address allowlist must be in one of the following formats:

*   IP addresses, such as `10.10.XX.XX`.
*   CIDR blocks, such as `10.10.XX.XX/24`. In this example, **24** indicates that the prefix of each IP address in the IP address allowlist is 24 bits in length. You can replace 24 with a value within the range of **1 to 32**.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='10.10.XX.XX'),
      vSwitchID: string(name='VSwitchID', description='The vSwitch ID of the unit node that you want to create.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='vsw-bp1tg609m5j85****'),
      vpcID: string(name='VpcID', description='The virtual private cloud (VPC) ID of the unit node that you want to create.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='vpc-bp19ame5m1r3o****'),
      zoneID?: string(name='ZoneID', description='The zone ID of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query zone IDs.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
      zoneIDSlave1?: string(name='ZoneIDSlave1', description='The zone ID of the secondary node of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query zone IDs.

*   If the **zone ID** of the unit node that you want to create is the same as the zone ID of its logger node, the single-zone deployment method is used.
*   If the **zone ID** of the unit node that you want to create is different from the zone ID of its logger node, the multiple-zone deployment method is used.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
      zoneIDSlave2?: string(name='ZoneIDSlave2', description='The zone ID of the logger node of the unit node that you want to create. You can call the [DescribeRegions](~~26243~~) operation to query zone IDs.

*   If the **zone ID** of the unit node that you want to create is the same as the zone ID of its logger node, the single-zone deployment method is used.
*   If the **zone ID** of the unit node that you want to create is different from the zone ID of its logger node, the multiple-zone deployment method is used.

**N** in this parameter specifies the Nth unit node. The value of N is an integer within the range of **1 to 10**. You can create up to 10 unit nodes in a global active database cluster.', example='cn-hangzhou-h'),
    }
  ](name='UnitNode', description='The list of the unit nodes.', position='Query'),
}

model CreateGadInstanceMemberResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16C62438-491B-5C02-9B49-BA924A1372A2'),
  result?: {
    createCount?: string(name='CreateCount', description='The number of unit nodes that are created by calling this operation.', example='2'),
    gadInstanceName?: string(name='GadInstanceName', description='The ID of the global active database cluster.', example='gad-rm-bp1npi2j8********'),
  }(name='Result', description='An array that consists of the information returned.'),
}

model CreateGadInstanceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGadInstanceMemberResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * An ApsaraDB RDS global active database cluster is created. You can call the [CreateGADInstance](~~336893~~) operation to create a global active database cluster.
  * For more information, see [Add unit nodes to or move unit nodes from an ApsaraDB RDS global active database cluster](~~331851~~).
  *
 */
async function createGadInstanceMember(request: CreateGadInstanceMemberRequest): CreateGadInstanceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGadInstanceMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateMigrateTaskRequest {
  backupMode: string(name='BackupMode', description='The type of the migration task. Valid values:

*   **FULL**: The migration task migrates full backup files.
*   **UPDF**: The migration task migrates incremental or log backup files.', example='FULL', position='Query'),
  checkDBMode?: string(name='CheckDBMode', description='The consistency check method for the database. Valid values:

*   **SyncExecuteDBCheck**: synchronous database check
*   **AsyncExecuteDBCheck**: asynchronous database check

Default value: **AsyncExecuteDBCheck** (compatible with SQL Server 2008 R2).

> When you set **IsOnlineDB** to **True**, the value of this parameter is valid.', example='AsyncExecuteDBCheck', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the destination database.', example='testDB', position='Query'),
  isOnlineDB: string(name='IsOnlineDB', description='Specifies whether to make the restored database data available for user access. Valid values:

*   **True**
*   **False**

> Set the value to **True** for instances that run SQL Server 2008 R2.', example='True', position='Query'),
  migrateTaskId?: string(name='MigrateTaskId', description='The ID of the migration task.

*   If you set **BackupMode** to **FULL**, the value of this parameter is empty. The full backup mode is compatible with instance that runs SQL Server 2008 R2.
*   If you set **BackupMode** to **UPDF**, the value of this parameter is the ID of the required full migration task.

> 

*   If you set **IsOnlineDB** to **True**, the value of **BackupMode** must be **FULL**.

*   If you set **IsOnlineDB** to **False**, the value of **BackupMode** must be **UPDF**.', example='None', position='Query'),
  OSSUrls?: string(name='OSSUrls', description='The shared URL of the backup file in the OSS bucket. The URL must be encoded.

If you specify multiple URLs, separate them with vertical bars (|) and then encode them.

> This parameter is required for instances that run SQL Server 2008 R2.', example='check_cdn_oss.sh www.xxxxxx.mobi', position='Query'),
  ossObjectPositions?: string(name='OssObjectPositions', description='The information about the backup file in the OSS bucket.

The values consist of three parts that are separated by colons (:):

*   OSS endpoint: oss-ap-southeast-1.aliyuncs.com.
*   Name of the OSS bucket: rdsmssqlsingapore.
*   Key of the backup file in the OSS bucket: autotest\\_2008R2\\_TestMigration_FULL.bak.

> 

*   This parameter is optional for instances that run SQL Server 2008 R2.

*   This parameter is required for instances that run a database engine version later than SQL Server 2008 R2.', example='oss-ap-southeast-1.aliyuncs.com:rdsmssqlsingapore:autotest_2008R2_TestMigration_FULL.bak', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMigrateTaskResponseBody = {
  backupMode?: string(name='BackupMode', description='The type of the migration task. Valid values:

*   **FULL**: The migration task migrates full backup files.
*   **UPDF**: The migration task migrates incremental or log backup files.', example='FULL'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxx'),
  DBName?: string(name='DBName', description='The name of the database.', example='test02'),
  migrateTaskId?: string(name='MigrateTaskId', description='The ID of the migration task.', example='564563256'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='866F5EB8-4650-4061-87F0-379F6F968BCE'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='5451225'),
}

model CreateMigrateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrateTaskResponseBody(name='body'),
}

async function createMigrateTask(request: CreateMigrateTaskRequest): CreateMigrateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMigrateTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOnlineDatabaseTaskRequest {
  checkDBMode: string(name='CheckDBMode', description='The consistency check method after the database is open. Valid values:

*   **SyncExecuteDBCheck**: synchronous database check
*   **AsyncExecuteDBCheck**: asynchronous database check

> The check methods are supported for RDS instances that run SQL Server 2008 R2.', example='AsyncExecuteDBCheck', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the database.', example='testDB', position='Query'),
  migrateTaskId: string(name='MigrateTaskId', description='The ID of the migration task.', example='5652255443', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateOnlineDatabaseTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B2EBD14-36F6-4645-A3F9-DE19D321C18F'),
}

model CreateOnlineDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOnlineDatabaseTaskResponseBody(name='body'),
}

/**
  * This operation is used to migrate backup data to the cloud. Before you call this operation, make sure that you understand the descriptions in [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2008 R2](~~95737~~), [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2012, SQL Server 2014, SQL Server 2016, SQL Server 2017, or SQL Server 2019](~~95738~~), and [Migrate the incremental backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2012, SQL Server 2014, SQL Server 2016, SQL Server 2017, or SQL Server 2019](~~95736~~).
  *
 */
async function createOnlineDatabaseTask(request: CreateOnlineDatabaseTaskRequest): CreateOnlineDatabaseTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOnlineDatabaseTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateParameterGroupRequest {
  engine: string(name='Engine', description='The database engine. Valid values:

*   **mysql**
*   **PostgreSQL**', example='mysql', position='Query'),
  engineVersion: string(name='EngineVersion', description='The database engine version of the instance.

*   If the instance runs MySQL, the instance must run one of the following MySQL versions:

    *   **5.6**
    *   **5.7**
    *   **8.0**

*   If the instance runs PostgreSQL, the instance must run one of the following PostgreSQL versions:

    *   **10.0**
    *   **11.0**
    *   **12.0**
    *   **13.0**
    *   **14.0**
    *   **15.0**', example='5.7', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='The description of the parameter template. The value can be up to 200 characters in length.', example='test', position='Query'),
  parameterGroupName: string(name='ParameterGroupName', description='The name of the parameter template.

*   The value must start with a letter and can contain letters, digits, periods (.), and underscores (\\_).
*   The value can be 8 to 64 characters in length.', example='test1234', position='Query'),
  parameters: string(name='Parameters', description='A JSON string that consists of parameters and their values in the parameter template. Format: {"Parameter 1":"Value of Parameter 1","Parameter 2":"Value of Parameter 2"...}. For more information about the parameters that can be modified, see [Modify the parameters of an ApsaraDB RDS for MySQL instance](~~96063~~) or [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](~~96751~~).', example='{"back_log":"3000","wait_timeout":"86400"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the parameter template. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId', description='The ID of the parameter template. You can call the [DescribeParameterGroups](~~144491~~) operation to query the IDs of parameter templates.', example='rpg-q488w14xvsk****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7A41C147-C8D0-4DAE-A1A2-17EBCD60DFA1'),
}

model CreateParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParameterGroupResponseBody(name='body'),
}

/**
  * You can configure a number of parameters at a time by using a parameter template and then apply the parameter template to an instance. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) and [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * > This operation is supported only when your instance runs MySQL or PostgreSQL.
  *
 */
async function createParameterGroup(request: CreateParameterGroupRequest): CreateParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateReadOnlyDBInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable the auto-renewal feature for the read-only instance. If you set the PayType parameter to Prepaid, you must also specify this parameter. Valid values:

*   **true**: enables the feature.
*   **false**: disables the feature.

> * If you set the Period parameter to Month, the auto-renewal cycle is one month.
> * If you set the Period parameter to Year, the auto-renewal cycle is one year.', example='true', position='Query'),
  bpeEnabled?: string(name='BpeEnabled', position='Query'),
  burstingEnabled?: boolean(name='BurstingEnabled', position='Query'),
  category?: string(name='Category', description='The RDS edition of the read-only instance. Valid values:

*   **Basic**: RDS Basic Edition.
*   **HighAvailability**: RDS High-availability Edition. This is the default value.
*   **AlwaysOn**: RDS Cluster Edition.

> If the primary instance runs PostgreSQL with cloud disks, you must set this parameter to **Basic**.', example='HighAvailability', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOC****', position='Query'),
  DBInstanceClass: string(name='DBInstanceClass', description='The instance type of the read-only instance. For more information, see [Read-only ApsaraDB RDS instance types](~~145759~~). We recommend that you specify an instance type whose specifications are higher than or equal to the specifications of the instance type of the primary instance. If the specifications of the read-only instance are lower than the specifications of the primary instance, the read-only instance may encounter issues such as high latency and heavy load.', example='rds.mys2.small', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the read-only instance. The description must be 2 to 256 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-). The value must start with a letter

> The value cannot start with `http://` or `https://`.', example='Test read-only instance', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5****', position='Query'),
  DBInstanceStorage: int32(name='DBInstanceStorage', description='The storage capacity of the read-only instance. For more information, see the **Storage space** column in [Read-only instance types](~~145759~~). This value must be a multiple of 5 GB. Unit: GB.', example='20', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the read-only instance. Valid values:

*   **local_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD (ESSD) of performance level 1 (PL1)
*   **cloud_essd2**: ESSD of PL2
*   **cloud_essd3**: ESSD of PL3

> * If the primary instance runs MySQL with local disks, you must set this parameter to **local\\_ssd**. If the primary instance runs MySQL with cloud disks, you must set this parameter to cloud\\_ssd, cloud\\_essd, cloud\\_essd2, or cloud\\_essd3.
> * If the primary instance runs SQL Server, you must set this parameter to cloud\\_ssd, cloud\\_essd, cloud\\_essd2, or cloud\\_essd3.', example='local_ssd', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster to which the read-only instance belongs. This parameter is valid when you create the read-only instance in a dedicated cluster.', example='dhg-4n****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable the release protection feature for the read-only instance. Valid values:

*   **true**: enables the feature.
*   **false**: disables the feature. This is the default value.

> This feature can be enabled only when you set the **PayType** parameter to **Postpaid**.', example='true', position='Query'),
  engineVersion: string(name='EngineVersion', description='The major engine version of the read-only instance. The read-only instance and the primary instance must run the same major engine version.

*   If the read-only instance runs MySQL, set this parameter to **5.6**, **5.7**, or **8.0**.
*   If the read-only instance runs SQL Server, set this parameter to **2017\\_ent or 2019\\_ent**.
*   If the read-only instance runs PostgreSQL, set this parameter to **10.0, 11.0, 12.0, 13.0, 14.0, or 15.0**', example='5.6', position='Query'),
  gdnInstanceName?: string(name='GdnInstanceName', description='A reserved parameter.', example='None', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the read-only instance. Valid values:

*   **VPC**
*   **Classic**

Default value: VPC. If you set this parameter to VPC, you must also specify the **VPCId** and **VSwitchId** parameters.

> The network type of the read-only instance can be different from the network type of the primary instance.', example='Classic', position='Query'),
  instructionSetArch?: string(name='InstructionSetArch', description='A reserved parameter.', example='None', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the read-only instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The renewal cycle of the read-only instance. Valid values:

*   **Year**
*   **Month**', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the read-only instance. The private IP address must be within the CIDR block that is supported by the specified vSwitch. The system assigns a private IP address to the read-only instance based on the values of the **VPCId** and **VSwitchId** parameters.', example='172.16.XX.XX', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the read-only instance. The read-only instance and the primary instance must reside in the same region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='The ID of the host on which the primary instance resides. This parameter is valid when you create the read-only instance in a dedicated cluster.', example='i-bp****', position='Query'),
  tddlBizType?: string(name='TddlBizType', description='A reserved parameter.', example='None', position='Query'),
  tddlRegionConfig?: string(name='TddlRegionConfig', description='A reserved parameter.', example='None', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the read-only instance. Valid values:

*   If you set the **Period** parameter to **Year**, the value of the **UsedTime** parameter ranges from **1** to **5**.
*   If you set the **Period** parameter to **Month**, the value of the **UsedTime** parameter ranges from **1** to **9**.

> If you set the **PayType** parameter to **Prepaid**, you must specify the UsedTime parameter.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The virtual private cloud (VPC) ID of the read-only instance. If you leave the **InstanceNetworkType** parameter empty or set it to **VPC**, you must also specify this parameter.

> * If the primary instance uses local disks, the read-only instance and the primary instance can belong to the same VPC or different VPCs.
> * If the primary instance uses cloud disks, the read-only instance and the primary instance must belong to the same VPC.', example='vpc-uf6f7l4fg90****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the read-only instance. If you leave the **InstanceNetworkType** parameter empty or set it to **VPC**, you must specify the VSwitchId parameter.', example='vsw-uf6adz52c2p****', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the read-only instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.', example='cn-hangzhou-b', position='Query'),
}

model CreateReadOnlyDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', description='The internal endpoint that is used to connect to the read-only instance.', example='rr-****.mysql.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rr-uf6wjk5****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='10078937****'),
  port?: string(name='Port', description='The internal port number that is used to connect to the read-only instance.', example='3306'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
}

model CreateReadOnlyDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReadOnlyDBInstanceResponseBody(name='body'),
}

/**
  * **Before you call this operation, take note of the following limits:**
  * *   The primary instance cannot belong to a dedicated cluster and must run one of the following database engine versions and RDS editions:
  *     *   MySQL 8.0 on RDS High-availability Edition or RDS Enterprise Edition.
  *     *   MySQL 5.7 on RDS High-availability Edition or RDS Enterprise Edition.
  *     *   MySQL 5.6.
  *     *   SQL Server 2017 on RDS Cluster Edition.
  *     *   PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, PostgreSQL 13, PostgreSQL 14, or PostgreSQL 15 on RDS High-availability Edition. If the primary instance runs PostgreSQL 10, the instance must use local disks and must be a dedicated instance that provides at least 8 cores and 32 GB of memory.
  * *   If the primary instance runs MySQL, you can create up to 10 read-only instances.
  * *   If the primary instance runs SQL Server, you can create up to seven read-only instances.
  * *   If the primary instance runs PostgreSQL with local disks, you can create up to five read-only instances. If the primary instance runs PostgreSQL with cloud disks, you can create up to 32 read-only instances.
  *
 */
async function createReadOnlyDBInstance(request: CreateReadOnlyDBInstanceRequest): CreateReadOnlyDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReadOnlyDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecretRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  dbInstanceId: string(name='DbInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-sdfljk123***', position='Query'),
  dbNames?: string(name='DbNames', description='The name of the database.', example='users', position='Query'),
  description?: string(name='Description', description='The description of the credential.', example='test', position='Query'),
  engine: string(name='Engine', description='The engine of the database.

> Only MySQL is supported.', example='MySQL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password: string(name='Password', description='The password that is used to access the database.', example='12345678', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the ID of the resource group.', example='rg-acfmxypivk***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretName?: string(name='SecretName', description='The name of the credential.', example='Foo', position='Query'),
  username: string(name='Username', description='The username that is used to access the database.', example='user_jack', position='Query'),
}

model CreateSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF4961DD-16F5-5B24-BD4C-0C7788F7ADAF'),
  secretArn?: string(name='SecretArn', description='The ARN of the credential for the created Data API account.', example='acs:rds:cn-hangzhou:1335786***:dbInstance/rm-bp1m7l3j63****'),
  secretName?: string(name='SecretName', description='The name of the credential.', example='Foo'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateSecretResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecretResponseBody(name='body'),
}

async function createSecret(request: CreateSecretRequest): CreateSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceLinkedRole: string(name='ServiceLinkedRole', description='The name of the service-linked role.

*   **AliyunServiceRoleForRdsPgsqlOnEcs**: the service-linked role for ApsaraDB RDS for PostgreSQL instances.
*   **AliyunServiceRoleForRDSProxyOnEcs**: the service-linked role for the database proxy feature of ApsaraDB RDS instances.', example='AliyunServiceRoleForRdsPgsqlOnEcs', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AA****'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * ApsaraDB RDS supports the following service-linked roles:
  * *   The AliyunServiceRoleForRdsPgsqlOnEcs role is used for ApsaraDB RDS for PostgreSQL instances.
  * *   The AliyunServiceRoleForRDSProxyOnEcs role is used for the database proxy feature of ApsaraDB RDS instances.
  *
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateTempDBInstanceRequest {
  backupId?: int32(name='BackupId', description='The ID of the backup set.

> You must specify at least one of **BackupId** and **RestoreTime**.', example='603524168', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The specified point in time within the backup retention period. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> 

*   The time can be set to a point in time within the past seven days and must be more than 30 minutes earlier than the current time. The default time zone is UTC.

*   You must specify at least one of the **BackupId** and **RestoreTime** parameters.', example='2011-06-11T16:00:00Z', position='Query'),
}

model CreateTempDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='248DE93F-8647-4B9D-8287-4A4A0FE56AD5'),
  tempDBInstanceId?: string(name='TempDBInstanceId', description='The ID of the temporary instance.', example='sub138xxxxx_rm-xxxxx'),
}

model CreateTempDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTempDBInstanceResponseBody(name='body'),
}

/**
  * You can create a temporary instance based on a backup file or a point in time within the past seven days.
  * Before you call this operation, make sure that the following requirements are met:
  * *   Your instance runs SQL Server 2008 R2.
  * *   Your instance is in the Running state.
  * *   Your instance does not have ongoing migration tasks.
  * *   The last creation of a backup file is completed.
  * > After a temporary instance is created, the temporary instance inherits the data in the backup file.
  *
 */
async function createTempDBInstance(request: CreateTempDBInstanceRequest): CreateTempDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTempDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteADSettingRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the instance ID.', example='rm-bp1k8s41l2o52****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteADSettingResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteADSettingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteADSettingResponseBody(name='body'),
}

/**
  * This operation is available only for ApsaraDB RDS for SQL Server instances.
  *
 */
async function deleteADSetting(request: DeleteADSettingRequest): DeleteADSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteADSetting', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', description='The name of the account.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='91E855E5-7E80-4955-929B-C74EE1D38C66'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance is in the Running state. If the instance is not in the Running state, the operation fails.
  * > 
  * *   This operation is not supported for instances that run SQL Server 2017 EE, PostgreSQL with local SSDs.
  * *   If you want to delete an account from an instance that runs PostgreSQL with standard SSDs or enhanced SSDs (ESSDs) and the account has permissions on specific objects such as databases and tables, this operation reports the "`Some objects depend on account`" error. Before you can delete the account, you must remove the permissions from the account.
  *
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupRequest {
  backupId: string(name='BackupId', description='The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to query backup set IDs. Separate multiple values with commas (,). You can specify a maximum of 100 values in a single request.

> After you call the [DescribeBackups](~~26273~~) operation, the returned backup sets whose **StoreStatus** is **Enabled** can be deleted.', example='324909958', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBackupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='37441409-FFD1-40AA-8EC5-9ECF5E2F7C29'),
}

model DeleteBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupResponseBody(name='body'),
}

/**
  * Backup sets of only the instance itself are deleted. Backup sets of the associated instances such as read-only, disaster recovery, and cloned instances are not deleted.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance runs PostgreSQL or MySQL on RDS High-availability.
  * *   If the log backup feature is disabled, instances cannot be restored by point in time. You can delete data backup sets that are retained for more than seven days.
  * *   If the log backup feature is enabled and the log backup retention period is shorter than the data backup retention period, you can delete the data backup files that are retained for a period longer than the log backup retention period.
  *
 */
async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupFileRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set. You can specify the IDs of up to 100 backup sets at a time. Separate the IDs with commas (,).

> 

*   Only the IDs of the backup sets for the database is supported.

*   You can call the [DescribeBackups](~~26273~~) operation to query the IDs of backup sets.', example='29304****', position='Query'),
  backupTime?: string(name='BackupTime', description='Specifies whether to delete the backup sets that are generated before the specified point in time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2011-06-11T16:00:00Z', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp6wjk5******', position='Query'),
  DBName?: string(name='DBName', description='The name of the database.', example='testdb', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBackupFileResponseBody = {
  deletedBaksetIds?: {
    deletedBaksetIds?: [ int32 ](name='DeletedBaksetIds')
  }(name='DeletedBaksetIds', description='An array that consists of the IDs of deleted backup sets.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7B3A91C-0ACD-4948-ACAE-xxxxxxxD4069'),
}

model DeleteBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupFileResponseBody(name='body'),
}

/**
  * This operation is available for users whose accounts are added to the whitelist of an ApsaraDB RDS for SQL Server instance. If your account is not added to the whitelist of the instance, you can join the Database Backup (DBS) DingTalk group whose ID is 35585947 and contact the on-duty engineer to add your account to the whitelist.
  *
 */
async function deleteBackupFile(request: DeleteBackupFileRequest): DeleteBackupFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy', example='Lastest', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  requestId?: string(name='RequestId', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceEndpointRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88****', position='Query'),
  DBInstanceEndpointId: string(name='DBInstanceEndpointId', example='ep-****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='rm-****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBInstanceEndpointResponseBody = {
  data?: {
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', example='rm-****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
}

model DeleteDBInstanceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceEndpointResponseBody(name='body'),
}

async function deleteDBInstanceEndpoint(request: DeleteDBInstanceEndpointRequest): DeleteDBInstanceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstanceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceEndpointAddressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6000170000591aed949d0f****', position='Query'),
  connectionString: string(name='ConnectionString', description='The public endpoint.', example='new****.mysql.rds.aliyuncs.com', position='Body'),
  DBInstanceEndpointId: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance. You can call the [DescribeDBInstanceEndpoints](~~464397~~) operation to query the endpoint ID of the instance.', example='ep-****', position='Body'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBInstanceEndpointAddressResponseBody = {
  data?: {
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-****'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2911788-25E8-42E5-A3A3-1B38D263F01E'),
}

model DeleteDBInstanceEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceEndpointAddressResponseBody(name='body'),
}

/**
  * ## Background information
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  * *   You can delete only the public endpoint of each endpoint type from the instance. If you want to delete an internal endpoint of any endpoint type, you can delete the type of endpoint.
  *
 */
async function deleteDBInstanceEndpointAddress(request: DeleteDBInstanceEndpointAddressRequest): DeleteDBInstanceEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstanceEndpointAddress', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDBNodesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests.

The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  DBNodeId?: [ string ](name='DBNodeId', description='An array that consists of information about the ID of the node.', shrink='json', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBNodesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='100780000000000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B993DA9-5272-5414-94E3-4CA8BA0146C2'),
}

model DeleteDBNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBNodesResponseBody(name='body'),
}

/**
  * ## Background information
  * This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition. These RDS instances are referred to as RDS clusters.
  *
 */
async function deleteDBNodes(request: DeleteDBNodesRequest): DeleteDBNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBNodes', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBProxyEndpointAddressRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-t4n3a****', position='Query'),
  DBProxyConnectStringNetType: string(name='DBProxyConnectStringNetType', example='Public', position='Query'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', example='ta9um4****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', example='normal', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId', example='343356C6-64B2-4245-ADEB-C9BD165EDD11'),
}

model DeleteDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBProxyEndpointAddressResponseBody(name='body'),
}

async function deleteDBProxyEndpointAddress(request: DeleteDBProxyEndpointAddressRequest): DeleteDBProxyEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBProxyEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  DBName: string(name='DBName', description='The name of the database.', example='testdb01', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='07F6177E-6DE4-408A-BB4F-0723301340F3'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabaseResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance is a primary instance.
  * *   The instance runs MySQL, SQL Server, or MariaDB.
  * > This operation is not supported for instances that run PostgreSQL. You can execute the DROP DATABASE statement to drop a database from an ApsaraDB RDS for PostgreSQL instance.
  *
 */
async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGadInstanceRequest {
  gadInstanceName: string(name='GadInstanceName', description='The ID of the global active database cluster. You can call the [DescribeGadInstances](~~330105~~) operation to query the IDs of global active database clusters.', example='gad-rm-bp1npi2j8********', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the central node of the global active database cluster. You can call the [DescribeGadInstances](~~330105~~) operation to query the region IDs of global active database clusters.', example='cn-hangzhou', position='Query'),
}

model DeleteGadInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model DeleteGadInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGadInstanceResponseBody(name='body'),
}

/**
  * ## Precautions
  * *   A global active database cluster cannot be restored after it is deleted. Proceed with caution when you delete a global active database cluster.
  * *   If you delete a global active database cluster, the system removes all nodes and Data Transmission Service (DTS) synchronization tasks from the cluster. However, the system does not release the ApsaraDB RDS for MySQL instances that run as nodes in the cluster. If you no longer need the ApsaraDB RDS for MySQL instances, you can call the [DeleteDBInstance](~~26229~~) to delete the instances one after another.
  *
 */
async function deleteGadInstance(request: DeleteGadInstanceRequest): DeleteGadInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGadInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParameterGroupRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', description='The ID of the parameter template. You can call the [DescribeParameterGroups](~~144491~~) operation to query the ID of the parameter template.', example='rpg-gfs****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId', description='The ID of the parameter template.', example='rpg-gfs****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8AF26036-B254-4212-B8E4-EFBE818B7FD6'),
}

model DeleteParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParameterGroupResponseBody(name='body'),
}

/**
  * You can apply a parameter template to an instance to manage a number of parameters at a time. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) or [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * > 
  * *   If you delete a parameter template, the instances to which the parameter template is applied are not affected.
  * *   Before you can delete a parameter template in ApsaraDB RDS for PostgreSQL, you must apply another parameter template to the ApsaraDB RDS for PostgreSQL instances to which the parameter template is applied. You can call the [DescribeParameterGroup](~~144842~~) operation to query the instances to which a parameter template is applied.
  *
 */
async function deleteParameterGroup(request: DeleteParameterGroupRequest): DeleteParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  dbInstanceId?: string(name='DbInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.

> If you specify this parameter, you must also specify **SecretName**.', example='rm-sfjdlsjxxxxx', position='Query'),
  engine: string(name='Engine', description='The engine of the database.

> Only MySQL is supported.', example='MySQL', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~446624~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretArn?: string(name='SecretArn', description='The Alibaba Cloud Resource Name (ARN) of the credential for the created Data API account. You can call the [CreateSecret](~~446607~~) operation to obtain the value of this parameter.

> You must specify one of **SecretName** and SecretArn.', example='acs:rds:cn-hangzhou:1335786***:dbInstance/rm-bp1m7l3j63****', position='Query'),
  secretName?: string(name='SecretName', description='The name of the credential.

> 

*   You must specify one of **SecretArn** and SecretName.

*   If you specify this parameter, you must also specify **DbInstanceId**.', example='Foo', position='Query'),
}

model DeleteSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF4961DD-16F5-5B24-BD4C-0C7788F7ADAF'),
  secretArn?: string(name='SecretArn', description='The ARN of the credential for the Data API account.', example='acs:rds:cn-hangzhou:1335786***:dbInstance/rm-bp1m7l3j63****'),
  secretName?: string(name='SecretName', description='The name of the credential.', example='Foo'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteSecretResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecretResponseBody(name='body'),
}

async function deleteSecret(request: DeleteSecretRequest): DeleteSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSlotRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='ETnLKlblzczshOTUbOC****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='目标实例ID。可调用[DescribeDBInstances](~~26232~~)接口查询。', example='pgm-bp102g323jd4****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID，可以为空。', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  slotName: string(name='SlotName', description='The name of the replication slot.', example='slot_test01', position='Query'),
  slotStatus: string(name='SlotStatus', description='The status of the replication slot.

Valid values:

*   ACTIVE

    <!-- -->

    <!-- -->

    <!-- -->

*   INACTIVE

    <!-- -->

    <!-- -->

    <!-- -->', example='INACTIVE', position='Query'),
}

model DeleteSlotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2875D608-A228-53D7-B8C9-35F13EDCF36D'),
  slotName?: string(name='SlotName', description='The name of the replication slot.', example='slot_test01'),
}

model DeleteSlotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSlotResponseBody(name='body'),
}

/**
  * *   This operation is available only for ApsaraDB RDS for PostgreSQL instances.
  * *   A replication slot can be deleted only when SlotStatus is **INACTIVE**. You can call the DescribeSlots operation to query the status of a replication slot.
  *
 */
async function deleteSlot(request: DeleteSlotRequest): DeleteSlotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSlot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserBackupFileRequest {
  backupId: string(name='BackupId', description='The ID of the backup file. You can call the [ListUserBackupFiles](~~257821~~) operation to query the ID of the file.', example='b-w1haya7e4i25********', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteUserBackupFileResponseBody = {
  backupId?: string(name='BackupId', description='The ID of the deleted full backup file.', example='b-w1haya7e4i25********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F28AE40B-203B-4CFE-B81F-FD981CD97B17'),
}

model DeleteUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserBackupFileResponseBody(name='body'),
}

/**
  * > 
  * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
  * *   This operation deletes full backup files only from the ApsaraDB RDS console. This operation does not affect the full backup files that are stored as objects in Object Storage Service (OSS) buckets. After you call this operation to delete a full backup file, you can call the [ImportUserBackupFile](~~260266~~) operation to reimport the full backup file.
  *
 */
async function deleteUserBackupFile(request: DeleteUserBackupFileRequest): DeleteUserBackupFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserBackupFile', 'POST', '/', 'json', false, 'json', request);
}

model DescibeImportsFromDatabaseRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bpxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2011-06-11T16:00Z', position='Query'),
  engine: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **SQL Server**', example='MySQL', position='Query'),
  importId?: int32(name='ImportId', description='The ID of the migration task.', example='123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2011-06-11T15:00Z', position='Query'),
}

model DescibeImportsFromDatabaseResponseBody = {
  items?: {
    importResultFromDB?: [ 
    {
      importDataStatus?: string(name='ImportDataStatus', description='The status of the migration task. Valid values:

*   **NotStart**: The migration task has not started.
*   **FullExporting**: The migration task is exporting full data.
*   **FullImporting**: The migration task is importing full data.
*   **Success**: The migration task is successful.
*   **Failed**: The migration task fails.
*   **Canceled**: The migration task is canceled.
*   **Canceling**: The migration task is being canceled.
*   **IncrementalWaiting**: The migration task is waiting to synchronize incremental data.
*   **IncrementalImporting**: The migration task is synchronizing incremental data.
*   **StopSyncing**: The migration task stops synchronizing data.', example='NotStart'),
      importDataStatusDescription?: string(name='ImportDataStatusDescription', description='The description of the migration task.', example='Description'),
      importDataType?: string(name='ImportDataType', description='The type of the migration task. Valid values:

*   **Full**: full migration
*   **Incremental:**: incremental migration', example='Full'),
      importId?: int32(name='ImportId', description='The ID of the migration task.', example='123'),
      incrementalImportingTime?: string(name='IncrementalImportingTime', description='The time when the migration task synchronized incremental data. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2011-06-11T15:00Z'),
    }
  ](name='ImportResultFromDB')
  }(name='Items', description='An array that consists of migration tasks.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B000AA91-393D-46F9-8D9B-098E28931A3A'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescibeImportsFromDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DescibeImportsFromDatabaseResponseBody(name='body'),
}

/**
  * This operation is suitable only for the instances that run MySQL or SQL Server. For more information about how to run a migration task, see [ImportDatabaseBetweenInstances](~~26301~~).
  *
 */
async function descibeImportsFromDatabase(request: DescibeImportsFromDatabaseRequest): DescibeImportsFromDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescibeImportsFromDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DescribeADInfoRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp1k8s41l2o52****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeADInfoResponseBody = {
  ADDNS?: string(name='ADDNS', description='The DNS information about the AD domain.', example='100.100.XX.XX'),
  ADServerIpAddress?: string(name='ADServerIpAddress', description='The service IP address of the AD domain.', example='192.168.XX.XX'),
  ADStatus?: string(name='ADStatus', description='The status of the AD domain. Valid values:

*   **-1**: The instance is being added to the AD domain.
*   **0**: The instance fails to be added to the AD domain.
*   **1**: The instance is added to the AD domain.', example='1'),
  abnormalReason?: string(name='AbnormalReason', description='The cause of the exception.', example='XXXX'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  userName?: string(name='UserName', description='The username of the AD domain.', example='test_01'),
}

model DescribeADInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeADInfoResponseBody(name='body'),
}

/**
  * This operation is available only for ApsaraDB RDS for SQL Server instances.
  *
 */
async function describeADInfo(request: DescribeADInfoRequest): DescribeADInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeADInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', description='The username of the account.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

> This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.', example='rm-uf6wjk5*****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**. Valid values: any non-zero positive integer.', example='1', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid value: **30 to 200**. Default value: **30**.', example='30', minimum=1, maximum=2147483647, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription', description='The description of the account.', example='Test account'),
      accountName?: string(name='AccountName', description='The username of the account.', example='test1'),
      accountStatus?: string(name='AccountStatus', description='The status of the account. Valid values:

*   **Unavailable**
*   **Available**', example='Available'),
      accountType?: string(name='AccountType', description='The type of the account. Valid values:

*   **Normal**: standard account
*   **Super**: privileged account
*   **Sysadmin**: superuser account that has the system administrator permissions', example='Normal'),
      bypassRLS?: string(name='BypassRLS', description='Indicates whether the account has the row-level security (RLS) permissions. Valid values:

*   **t**: yes
*   **f**: no

> This parameter is returned only for instances that run PostgreSQL.', example='f'),
      createDB?: string(name='CreateDB', description='Indicates whether the account has the permissions to create databases. Valid values:

*   **t**: yes
*   **f**: no

> This parameter is returned only for instances that run PostgreSQL.', example='t'),
      createRole?: string(name='CreateRole', description='Indicates whether the account has the permissions to create roles. Valid values:

*   **t**: yes
*   **f**: no

> This parameter is returned only for instances that run PostgreSQL.', example='t'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance to which the account belongs.', example='rm-uf6wjk5*****'),
      databasePrivileges?: {
        databasePrivilege?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege', description='The type of the permissions. Valid values:

*   **ReadWrite**: read and write permissions
*   **ReadOnly**: read-only permissions
*   **DDLOnly**: DDL-only permissions
*   **DMLOnly**: DML-only permissions
*   **Custom**: custom permissions (You can modify the permissions of the account by using SQL commands.)', example='ReadWrite'),
          accountPrivilegeDetail?: string(name='AccountPrivilegeDetail', description='The permissions that are granted to the account. For more information, see [Account permissions](~~146395~~).', example='SELECT,INSERT'),
          DBName?: string(name='DBName', description='The name of the database.', example='test1'),
        }
      ](name='DatabasePrivilege')
      }(name='DatabasePrivileges', description='The details of the permissions that are granted to the account.'),
      privExceeded?: string(name='PrivExceeded', description='Indicates whether the number of databases that are managed by the account exceeds the upper limit. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
      replication?: string(name='Replication', description='Indicates whether the account has the replication permissions. Valid values:

*   **t**: yes
*   **f**: no

> This parameter is returned only for instances that run PostgreSQL.', example='t'),
      validUntil?: string(name='ValidUntil', description='The expiration time of the password. Valid values:

*   **infinity**: The password never expires.
*   **Empty**: The expiration time is not specified.
*   **Actual expiration time** in the format of *yyyy-MM-dd*T*HH:mm:ss*Z in UTC. Example: 2022-10-01T00:00:00Z.

> This parameter is returned only for instances that run PostgreSQL.', example='2022-10-01T00:00:00Z'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts', description='The details of the accounts.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A2E94301-D07F-4457-9B49-6AA2BB388C85'),
  systemAdminAccountFirstActivationTime?: string(name='SystemAdminAccountFirstActivationTime', description='The first time when the superuser account was enabled. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2020-02-06T11:00:00Z'),
  systemAdminAccountStatus?: string(name='SystemAdminAccountStatus', description='Indicates whether the superuser account is enabled.', example='True'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

/**
  * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
  *
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActionEventPolicyRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeActionEventPolicyResponseBody = {
  enableEventLog?: string(name='EnableEventLog', description='Indicates whether the event history feature is enabled.', example='True'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CCECD3CD-AB2D-4F6D-BEDE-47BC90A398D2'),
}

model DescribeActionEventPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActionEventPolicyResponseBody(name='body'),
}

/**
  * The event history feature enables you to view the events that occurred in a region over a specific time range. The events include instance creation and parameter reconfiguration. For more information, see [Event history](~~129759~~).
  *
 */
async function describeActionEventPolicy(request: DescribeActionEventPolicyRequest): DescribeActionEventPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActionEventPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTasksRequest {
  allowCancel?: int32(name='AllowCancel', description='The filter condition that is used to return tasks based on the settings of task cancellation. Default value: -1. Valid values:

*   **-1**: returns all tasks.
*   **0**: returns only tasks that cannot be canceled.
*   **1**: returns only tasks that can be canceled.', example='-1', position='Query'),
  allowChange?: int32(name='AllowChange', description='The filter condition that is used to return tasks based on the settings of the switching time. Default value: -1. Valid values:

*   **-1**: returns all tasks.
*   **0**: returns only tasks for which the switching time cannot be changed.
*   **1**: returns only tasks for which the switching time can be changed.', example='-1', position='Query'),
  changeLevel?: string(name='ChangeLevel', description='The filter condition that is used to return tasks based on the task level. Default value: all. Valid values:

*   **all**: all types
*   **S0**: returns the tasks of the exception fixing level.
*   **S1**: returns the tasks of the system O\\&M level.', example='all', position='Query'),
  dbType?: string(name='DbType', description='The type of the database. Default value: all. Valid values: mysql, pgsql, and mssql.', example='all', position='Query'),
  insName?: string(name='InsName', description='The name of the instance. You can leave this parameter empty. If you configure this parameter, you can specify the name only of one instance.', example='rm-bp191w771kd3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 25.', example='25', minimum=10, maximum=100, position='Query'),
  productId?: string(name='ProductId', description='The name of the service. Valid values: RDS, POLARDB, MongoDB, and Redis. For RDS instances, set the value to RDS.', example='RDS', position='Query'),
  region?: string(name='Region', description='The ID of the region to which the pending task belongs. You can call the [DescribeRegions](~~610399~~) operation to query the most recent region list.

> The value **all** indicates all regions.', example='cn-beijing', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: int32(name='Status', description='The status of the task, which is used as a filter condition to return tasks.

*   **-1**: all tasks
*   **3**: pending
*   **4**: being processed
*   **5**: completed
*   **6**: failed
*   **7**: canceled', example='-1', position='Query'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **rds_apsaradb_ha**: primary/secondary switchover
*   **rds_apsaradb_transfer**: instance migration
*   **rds_apsaradb_upgrade**: update of the minor engine version
*   **rds_apsaradb_maxscale**: update of the minor version of the proxy
*   **all**: all types', example='rds_apsaradb_upgrade', position='Query'),
}

model DescribeActiveOperationTasksResponseBody = {
  items?: [ 
    {
      allowCancel?: string(name='AllowCancel', description='Indicates whether the task can be canceled. The value 1 indicates that the task can be canceled. The value 0 indicates that the task cannot be canceled.', example='1'),
      allowChange?: string(name='AllowChange', description='Indicates whether the switching time can be changed. The value 1 indicates that the switching time can be changed. The value 0 indicates that the switching time cannot be changed.', example='1'),
      changeLevel?: string(name='ChangeLevel', description='The code of the task level. The value S1 indicates the system O\\&M level. The value S0 indicates the exception fixing level.', example='S1'),
      changeLevelEn?: string(name='ChangeLevelEn', description='The level of the task in English.', example='System maintenance'),
      changeLevelZh?: string(name='ChangeLevelZh', description='The level of the task in Chinese.'),
      createdTime?: string(name='CreatedTime', description='The time when the task was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-05-30T14:30:00Z'),
      currentAVZ?: string(name='CurrentAVZ', description='The current zone.', example='cn-beijing-h'),
      dbType?: string(name='DbType', description='The type of the database. Valid values: mysql, pgsql, and mssql.', example='mysql'),
      dbVersion?: string(name='DbVersion', description='The minor engine version.', example='5.7'),
      deadline?: string(name='Deadline', description='The deadline of the switching time for the task. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-05-30T23:59:59Z'),
      id?: int32(name='Id', description='The ID of the precheck task.', example='11111'),
      impact?: string(name='Impact', description='The impact of the task.', example='TransientDisconnection'),
      impactEn?: string(name='ImpactEn', description='The impact of the task in English.', example='Transient instance disconnection'),
      impactZh?: string(name='ImpactZh', description='The impact of the task in Chinese.'),
      insComment?: string(name='InsComment', description='The alias and description of the instance.', example='test'),
      insName?: string(name='InsName', description='The name of the instance.', example='rm-wz96h8jujh512****'),
      modifiedTime?: string(name='ModifiedTime', description='The time after the modification. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-05-30T14:30:00Z'),
      prepareInterval?: string(name='PrepareInterval', description='The required preparation period between the task start time and the switching time. The time is displayed in the HH:mm:ss format.', example='04:00:00'),
      region?: string(name='Region', description='The region ID of the pending task.', example='cn-beijing'),
      resultInfo?: string(name='ResultInfo', description='The information about the execution result.', example='userCancel'),
      startTime?: string(name='StartTime', description='The time when the task was executed. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-05-30T00:00:00Z'),
      status?: int32(name='Status', description='The status of the task.

*   **3**: pending
*   **4**: being processed
*   **5**: completed
*   **6**: failed
*   **7**: canceled', example='3'),
      subInsNames?: [ string ](name='SubInsNames', description='The subtasks of the instance.'),
      switchTime?: string(name='SwitchTime', description='The switching time of the task. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2018-05-30T14:30:00Z'),
      taskParams?: string(name='TaskParams'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **rds_apsaradb_ha**: primary/secondary switchover
*   **rds_apsaradb_transfer**: instance migration
*   **rds_apsaradb_upgrade**: update of the minor engine version
*   **rds_apsaradb_maxscale**: update of the minor version of the proxy', example='rds_apsaradb_upgrade'),
      taskTypeEn?: string(name='TaskTypeEn', description='The reason for the task in English.', example='Minor version update'),
      taskTypeZh?: string(name='TaskTypeZh', description='The reason for the task in Chinese.'),
    }
  ](name='Items', description='The O\\&M tasks of the instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 25.', example='25'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE31DA81****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTasksResponseBody(name='body'),
}

/**
  * After you call this operation and obtain the information about a specific O\\&M task, you can call the [ModifyActiveOperationTask](~~611454~~) operation to modify the scheduled switching time of the O\\&M task. You can also view the task and modify the scheduled switching time on the Task Center page of the ApsaraDB RDS console.
  *
 */
async function describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): DescribeActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnalyticdbByPrimaryDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*******', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAnalyticdbByPrimaryDBInstanceResponseBody = {
  analyticDBCount?: int32(name='AnalyticDBCount', description='The number of associated analytic instances.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77862BFF-ED59-552A-A2E8-692FEAFC9527'),
}

model DescribeAnalyticdbByPrimaryDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnalyticdbByPrimaryDBInstanceResponseBody(name='body'),
}

async function describeAnalyticdbByPrimaryDBInstance(request: DescribeAnalyticdbByPrimaryDBInstanceRequest): DescribeAnalyticdbByPrimaryDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnalyticdbByPrimaryDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableClassesRequest {
  category: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition.
*   **HighAvailability**: RDS High-availability Edition.
*   **AlwaysOn**: RDS Cluster Edition for SQL Server
*   **Finance**: RDS Enterprise Edition

**Serverless instances**

*   **serverless_basic**: RDS Serverless Basic Edition. This edition is available only for instances that run MySQL and PostgreSQL.
*   **serverless_standard**: RDS Serverless High-availability Edition for MySQL.
*   **serverless_ha** RDS Serverless High-availability Edition for SQL Server.

> If you create a serverless instance, you must specify this parameter.', example='HighAvailability', position='Query'),
  commodityCode?: string(name='CommodityCode', description='The commodity code of the instance. Valid values:

*   **bards**: The instance is a pay-as-you-go primary instance. This value is available at the China site (aliyun.com).
*   **rds**: The instance is a subscription primary instance. This value is available at the China site (aliyun.com).
*   **rords**: The instance is a pay-as-you-go read-only instance. This value is available at the China site (aliyun.com).
*   **rds_rordspre_public_cn**: The instance is a subscription read-only instance. This value is available at the China site (aliyun.com).
*   **bards_intl**: The instance is a pay-as-you-go primary instance. This value is available at the International site (alibabacloud.com).
*   **rds_intl**: The instance is a subscription primary instance. This value is available at the International site (alibabacloud.com).
*   **rords_intl**: The instance is a pay-as-you-go read-only instance. This value is available at the International site (alibabacloud.com).
*   **rds_rordspre_public_intl**: The instance is a subscription read-only instance. This value is available at the International site (alibabacloud.com).
*   **rds_serverless_public_cn**: The instance is a serverless instance. This value is available at the China site (aliyun.com).
*   **rds_serverless_public_intl**: The instance is a serverless instance. This value is available at the International site (alibabacloud.com).

> If you want to query the price of a read-only instance, you must specify this parameter.', example='bards', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  DBInstanceStorageType: string(name='DBInstanceStorageType', description='The storage type of the instance. Valid values:

*   **local_ssd**: local SSD. This is the recommended storage type.
*   **cloud_ssd**: standard SSD.
*   **cloud_essd**: enhanced SSDs (ESSDs) of performance level 1 (PL1)
*   **cloud_essd2**: ESSDs of PL2
*   **cloud_essd3**: ESSD of PL3

> Serverless instances support only ESSDs of PL 1. For a serverless instance, you must set this parameter to **cloud_essd**.', example='local_ssd', position='Query'),
  engine: string(name='Engine', description='The database engine that is run by the instance. Valid values:

* **MySQL**
* **SQLServer**
* **PostgreSQL**
* **MariaDB**', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', description='The database engine version of the instance. Valid values:

*   Valid values if you set Engine to MySQL: **5.5, 5.6, 5.7, and 8.0**
*   Valid values if you set Engine to SQLServer: **2008r2, 08r2\\_ent_ha, 2012, 2012\\_ent_ha, 2012\\_std_ha, 2012\\_web, 2014\\_std_ha, 2016\\_ent_ha, 2016\\_std_ha, 2016\\_web, 2017\\_std_ha, 2017\\_ent, 2019\\_std_ha, and 2019\\_ent**
*   Valid values if you set Engine to PostgreSQL: **10.0, 11.0, 12.0, 13.0, 14.0, and 15.0**
*   Valid value if you set Engine to MariaDB: **10.3**

**Serverless instances**

*   Valid values if you set Engine to MySQL: **5.7** and **8.0**
*   Valid values if you set Engine to SQLServer: **SQL Server**, **SQL Server**, and **SQL Server**
*   Valid value if you set Engine to PostgreSQL: **14.0**

> ApsaraDB RDS for MariaDB does not support serverless instances.', example='8.0', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   **Prepaid**: subscription
*   **Postpaid**: pay-as-you-go
*   **Serverless**: serverless

> ApsaraDB RDS for MariaDB does not support serverless instances.', example='Prepaid', position='Query'),
  orderType?: string(name='OrderType', description='The type of the order. Set the value to **BUY**', example='BUY', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the region ID of an instance.', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the zone ID of an instance.

> If the DescribeDBInstanceAttribute operation returns multiple zones, you must specify only one of the returned zones. For example, if the DescribeDBInstanceAttribute operation returns `cn-hangzhou-MAZ9(g,h)`, you can set the ZoneId parameter to `cn-hangzhou-g` or `cn-hangzhou-h`.', example='cn-hangzhou-h', position='Query'),
}

model DescribeAvailableClassesResponseBody = {
  DBInstanceClasses?: [ 
    {
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance.', example='rds.mysql.c1.large'),
      DBInstanceStorageRange?: {
        maxValue?: int32(name='MaxValue', description='The maximum storage capacity that is supported for the instance. Unit: GB.', example='2000'),
        minValue?: int32(name='MinValue', description='The minimum storage capacity that is supported for the instance. Unit: GB.', example='5'),
        step?: int32(name='Step', description='The minimum step size at which you can adjust the storage capacity of the instance. The minimum step size is 5 GB.', example='5'),
      }(name='DBInstanceStorageRange', description='The storage capacity range that is supported for the instance.'),
    }
  ](name='DBInstanceClasses', description='An array that consists of the instance types available for the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E4448A6-9FE6-4474-A0C1-AA7CFC772CAC'),
}

model DescribeAvailableClassesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableClassesResponseBody(name='body'),
}

async function describeAvailableClasses(request: DescribeAvailableClassesRequest): DescribeAvailableClassesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableClasses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableCrossRegionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAvailableCrossRegionResponseBody = {
  regions?: {
    region?: [ string ](name='Region')
  }(name='Regions', description='An array that consists of destination regions for cross-region backups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39265F46-EC77-4036-8AC4-F035F32F6BE2'),
}

model DescribeAvailableCrossRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableCrossRegionResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Back up an ApsaraDB RDS for PostgreSQL instance across regions](~~206671~~).
  *
 */
async function describeAvailableCrossRegion(request: DescribeAvailableCrossRegionRequest): DescribeAvailableCrossRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableCrossRegion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableMetricsRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='pgm-bp1s1j103lo6****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAvailableMetricsResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-bp1*****'),
  items?: [ 
    {
      description?: string(name='Description', description='The description of the enhanced monitoring metric.', example='OS CPU utilization, equal to the number of OS-consumed CPUs divided by the total number of CPUs'),
      dimension?: string(name='Dimension', description='The category of the enhanced monitoring metric. Valid values:

*   **os**: OS metric
*   **db**: database metric', example='os'),
      groupKey?: string(name='GroupKey', description='The key of the group to which the enhanced monitoring metric belongs.', example='os.cpu_usage'),
      groupKeyType?: string(name='GroupKeyType', description='The name of the group to which the enhanced monitoring metric belongs.', example='CPU Utilization Rate'),
      method?: string(name='Method', description='The method that is used to aggregate the monitoring data of the enhanced monitoring metric. Valid values:

*   **avg**: The system calculates the average value of the enhanced monitoring metric.
*   **min**: The system calculates the minimum value of the enhanced monitoring metric.
*   **max**: The system calculates the maximum value of the enhanced monitoring metric.', example='avg'),
      metricsKey?: string(name='MetricsKey', description='The key of the enhanced monitoring metric.', example='os.cpu_usage.sys.avg'),
      metricsKeyAlias?: string(name='MetricsKeyAlias', description='The alias of the enhanced monitoring metric.', example='cpu_sys_per_core'),
      sortRule?: int32(name='SortRule', description='The serial number of the enhanced monitoring metric.', example='1'),
      unit?: string(name='Unit', description='The unit of the enhanced monitoring metric.', example='%'),
    }
  ](name='Items', description='An array that consists of the details of the enhanced monitoring metric.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5CD61041-35F7-10F7-BE94-33A48B221218'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of enhanced monitoring metrics that are available for the instance.', example='4'),
}

model DescribeAvailableMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableMetricsResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * The instance runs PostgreSQL.
  * For more information, see [View the Enhanced Monitoring metrics of an ApsaraDB RDS for PostgreSQL instance](~~299200~~).
  *
 */
async function describeAvailableMetrics(request: DescribeAvailableMetricsRequest): DescribeAvailableMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableMetrics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableRecoveryTimeRequest {
  crossBackupId: int32(name='CrossBackupId', description='The ID of the cross-region backup file. You can call the [DescribeCrossRegionBackups](~~121733~~) operation to query IDs of backup files.', example='14***', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAvailableRecoveryTimeResponseBody = {
  crossBackupId?: int32(name='CrossBackupId', description='The ID of the cross-region backup file.', example='14377'),
  recoveryBeginTime?: string(name='RecoveryBeginTime', description='The start time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-12T05:22:29Z'),
  recoveryEndTime?: string(name='RecoveryEndTime', description='The end time to which data can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-12T07:33:12Z'),
  regionId?: string(name='RegionId', description='The region ID of the source instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CCBF4BA-7CE1-47E1-B49F-E97EA200A40D'),
}

model DescribeAvailableRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableRecoveryTimeResponseBody(name='body'),
}

/**
  * To query the time range to which you can restore data by using a common backup file, see [DescribeBackups](~~26273~~).
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   PostgreSQL. For more information, see [Back up an ApsaraDB RDS for PostgreSQL instance across regions](~~206671~~).
  *
 */
async function describeAvailableRecoveryTime(request: DescribeAvailableRecoveryTimeRequest): DescribeAvailableRecoveryTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableRecoveryTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableZonesRequest {
  category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition.
*   **HighAvailability**: RDS High-availability Edition.
*   **cluster**: RDS Cluster Edition for MySQL.
*   **AlwaysOn**: RDS Cluster Edition for SQL Server.
*   **Finance**: RDS Enterprise Edition.

**Serverless instances**

*   **serverless_basic**: RDS Serverless Basic Edition. This edition is available only for instances that run MySQL and PostgreSQL.
*   **serverless_standard**: RDS Serverless High-availability Edition for MySQL.
*   **serverless_ha** RDS Serverless High-availability Edition for SQL Server.', example='HighAvailability', position='Query'),
  commodityCode?: string(name='CommodityCode', description='The commodity code of the instance. This operation can return the resources that you can purchase based on the specified commodity code. Valid values:

*   **bards**: The instance is a pay-as-you-go primary instance. This value is available at the China site (aliyun.com).
*   **rds**: The instance is a subscription primary instance. This value is available at the China site (aliyun.com).
*   **rords**: The instance is a pay-as-you-go read-only instance. This value is available at the China site (aliyun.com).
*   **rds_rordspre_public_cn**: The instance is a subscription read-only instance. This value is available at the China site (aliyun.com).
*   **bards_intl**: The instance is a pay-as-you-go primary instance. This value is available at the International site (alibabacloud.com).
*   **rds_intl**: The instance is a subscription primary instance. This value is available at the International site (alibabacloud.com).
*   **rords_intl**: The instance is a pay-as-you-go read-only instance. This value is available at the International site (alibabacloud.com).
*   **rds_rordspre_public_intl**: The instance is a subscription read-only instance. This value is available at the International site (alibabacloud.com).
*   **rds_serverless_public_cn**: The instance is a serverless instance. This value is available at the China site (aliyun.com).
*   **rds_serverless_public_intl**: The instance is a serverless instance. This value is available at the International site (alibabacloud.com).', example='bards', position='Query'),
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the primary instance. If you want to query the read-only instances that you can purchase for a primary instance, you can specify this parameter.

If you set **CommodityCode** to one of the following values, you must specify this parameter:

*   **rords_intl**
*   **rds_rordspre_public_intl**
*   **rords**
*   **rds_rordspre_public_cn**', example='rm-uf6wjk5xxxxxxx', position='Query'),
  dispenseMode?: string(name='DispenseMode', description='Specifies whether to return the zones in which the single-zone deployment method is supported. Valid values:

*   **1** (default): returns the zones.
*   **0**: does not return the zones.

> The single-zone deployment method allows you to deploy an instance that runs RDS Enterprise Edition in a single zone.', example='0', position='Query'),
  engine: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **MariaDB**', example='MySQL', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values:

*   Valid values if you set Engine to MySQL: **5.5**, **5.6**, **5.7**, and **8.0**
*   Valid values if you set Engine to SQLServer: **2008r2**, **08r2\\_ent_ha**, **2012**, **2012\\_ent_ha**, **2012\\_std_ha**, **2012\\_web**, **2014\\_std_ha**, **2016\\_ent_ha**, **2016\\_std_ha**, **2016\\_web**, **2017\\_std_ha**, **2017\\_ent**, **2019\\_std_ha**, and **2019\\_ent**
*   Valid values if you set Engine to PostgreSQL: **10.0**, **11.0**, **12.0**, **13.0**, **14.0**, and **15.0**
*   Valid value if you set Engine to MariaDB: **10.3**

**Serverless instances**

*   Valid values if you set Engine to MySQL: **5.7** and **8.0**
*   Valid values if you set Engine to SQLServer: **2016\\_std_sl**, **2017\\_std_sl**, and **2019\\_std_sl**
*   Valid value if you set Engine to PostgreSQL: **14.0**

> ApsaraDB RDS for MariaDB does not support serverless instances.', example='8.0', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. If the instance spans more than one zone, the value of this parameter contains an `MAZ` part, such as `cn-hangzhou-MAZ6(b,f)` and `cn-hangzhou-MAZ5(b,e,f)`. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.', example='cn-hangzhou-e', position='Query'),
}

model DescribeAvailableZonesResponseBody = {
  availableZones?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      supportedEngines?: [ 
        {
          engine?: string(name='Engine', description='The database engine of the instance.', example='MySQL'),
          supportedEngineVersions?: [ 
            {
              supportedCategorys?: [ 
                {
                  category?: string(name='Category', description='The RDS edition of the instance.', example='HighAvailability'),
                  supportedStorageTypes?: [ 
                    {
                      storageType?: string(name='StorageType', description='The storage type of the instance.', example='local_ssd'),
                    }
                  ](name='SupportedStorageTypes', description='An array that consists of the storage types available in the zone.'),
                }
              ](name='SupportedCategorys', description='An array that consists of the RDS editions available in the zone.'),
              version?: string(name='Version', description='The database engine version of the instance.', example='8.0'),
            }
          ](name='SupportedEngineVersions', description='An array that consists of the database engine versions available in the zone.'),
        }
      ](name='SupportedEngines', description='An array that consists of the database engines available in the zone.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-e'),
    }
  ](name='AvailableZones', description='An array that consists of available zones and resources available in the zones.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4256E149-C3C4-4FA7-BDEA-13CA415E8763'),
}

model DescribeAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableZonesResponseBody(name='body'),
}

async function describeAvailableZones(request: DescribeAvailableZonesRequest): DescribeAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupDatabaseRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set.', example='90262212', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupDatabaseResponseBody = {
  databaseNames?: string(name='DatabaseNames', description='The name of the database. Format: "db1,db2".', example='db1,db2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='08A3B71B-FE08-4B03-974F-CC7EA6DB1828'),
}

model DescribeBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDatabaseResponseBody(name='body'),
}

/**
  * > This operation is phased out.
  *
 */
async function describeBackupDatabase(request: DescribeBackupDatabaseRequest): DescribeBackupDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  backupPolicyMode?: string(name='BackupPolicyMode', description='The backup type. Valid values:

*   **DataBackupPolicy**: data backup
*   **LogBackupPolicy**: log backup', example='DataBackupPolicy', position='Query'),
  compressType?: string(name='CompressType', description='The method that is used to compress backup data. Valid values:

*   **0**: Backup data is not compressed.
*   **1**: Backup data is compressed by using zlib.
*   **2**: Backup data is compressed by using zlib that invokes more than one thread in parallel for each backup.
*   **4**: Backup data is compressed by using QuickLZ and can be used to restore individual databases and tables.
*   **8**: Backup data is compressed by using QuickLZ but cannot be used to restore individual databases or tables. This value is available only when the instance runs MySQL 8.0.', example='1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy', description='The policy that is used to retain archived backup files if the instance is released. Valid values:

*   **None**: No archived backup files are retained.
*   **Lastest**: Only the last archived backup file is retained.
*   **All**: All archived backup files are retained.', example='Lastest', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  archiveBackupKeepCount?: string(name='ArchiveBackupKeepCount', description='The number of archived backup files that are retained.', example='1'),
  archiveBackupKeepPolicy?: string(name='ArchiveBackupKeepPolicy', description='The cycle based on which archived backup files are retained.', example='ByMonth'),
  archiveBackupRetentionPeriod?: string(name='ArchiveBackupRetentionPeriod', description='The number of days for which archived backup files are retained.', example='365'),
  backupInterval?: string(name='BackupInterval', description='The backup interval. Unit: minutes.

*   If the instance runs MySQL, the interval is the same as the value of the Snapshot Backup Start Time parameter rather than the Snapshot Backup Period parameter in the ApsaraDB RDS console. For more information, see [Back up an ApsaraDB RDS for MySQL instance](~~98818~~).
*   If the instance runs SQL Server, the interval is the same as the log backup frequency.', example='30'),
  backupLog?: string(name='BackupLog', description='Indicates whether the log backup feature is enabled. Valid values:

*   **Enable**
*   **Disabled**', example='Enable'),
  backupMethod?: string(name='BackupMethod', description='The backup method of the instance. Valid values:

*   **Physical**: physical backup
*   **Snapshot**: snapshot backup

> This parameter is returned only when the instance runs SQL Server and uses cloud disks.', example='Physical'),
  backupPriority?: int32(name='BackupPriority'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained.', example='7'),
  category?: string(name='Category', description='Indicates whether to enable the single-digit second backup feature. This feature allows ApsaraDB RDS to complete a backup within single-digit seconds. Valid values:

*   **Flash**: The single-digit second backup feature is enabled.
*   **Standard**: The single-digit second backup feature is disabled.

> This parameter takes effect only when you set the **BackupPolicyMode** parameter to **DataBackupPolicy**.', example='Standard'),
  compressType?: string(name='CompressType', description='The method that is used to compress backup data. Valid values:

*   **0**: Backup data is not compressed.
*   **1**: Backup data is compressed by using zlib.
*   **2**: Backup data is compressed by using zlib that invokes more than one thread in parallel for each backup.
*   **4**: Backup data is compressed by using QuickLZ and can be used to restore individual databases and tables.
*   **8**: Backup data is compressed by using QuickLZ but cannot be used to restore individual databases or tables. This value is available only when the instance runs MySQL 8.0.', example='1'),
  enableBackupLog?: string(name='EnableBackupLog', description='Indicates whether the log backup feature is enabled. Valid values:

*   **1**: The log backup feature is enabled.
*   **0**: The log backup feature is disabled.', example='1'),
  enableIncrementDataBackup?: boolean(name='EnableIncrementDataBackup', description='Indicates whether incremental backup is enabled. Valid values:

*   **True**: Incremental backup is enabled.
*   **False**: Incremental backup is disabled.', example='True'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection', description='Indicates whether the log backup deletion feature is enabled. If the disk usage exceeds 80% or the remaining disk space is less than 5 GB on the instance, this feature deletes binary log files. Valid values:

*   **Disable**
*   **Enable**', example='Enable'),
  localLogRetentionHours?: int32(name='LocalLogRetentionHours', description='The number of hours for which log backup files are retained on the instance.', example='0'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace', description='The maximum storage usage that is allowed for log files on the instance.', example='30'),
  logBackupFrequency?: string(name='LogBackupFrequency', description='The backup frequency of logs. Valid values:

*   **LogInterval**: Log backups are performed every 30 minutes.
*   Default value: same as the value of the **PreferredBackupPeriod** parameter.

> The **LogBackupFrequency** parameter is supported only when the instance runs **SQL Server**.', example='LogInterval'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber', description='The number of binary log files that you want to retain on the instance.', example='60'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod', description='The number of days for which log backup files are retained.', example='7'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which you want to perform a backup. Separate multiple values with commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**', example='Monday,Wednesday,Friday,Sunday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The time when a data backup is performed. The time follows the ISO 8601 standard in the *HH:mm*Z-*HH:mm*Z format. The time is displayed in UTC.', example='15:00Z-16:00Z'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime', description='The time when the next backup is performed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2018-01-19T15:15Z'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy', description='The policy that is used to retain archived backup files if the instance is released. Valid values:

*   **None**: No archived backup files are retained.
*   **Lastest**: Only the last archived backup file is retained.
*   **All**: All archived backup files are retained.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B87E2AB3-B7C9-4394-9160-7F639F732031'),
  supportModifyBackupPriority?: boolean(name='SupportModifyBackupPriority'),
  supportReleasedKeep?: int32(name='SupportReleasedKeep', description='A reserved parameter.', example='0'),
  supportVolumeShadowCopy?: int32(name='SupportVolumeShadowCopy', description='Indicates whether the instance supports snapshot backups. Valid values:

*   **1**: The instance supports snapshot backups.
*   **0**: The instance does not support snapshot backups.

> This parameter is returned only when the instance runs SQL Server.', example='1'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupTasksRequest {
  backupJobId?: int32(name='BackupJobId', description='The ID of the backup task.', example='4762614', position='Query'),
  backupJobStatus?: string(name='BackupJobStatus', description='The status of the backup task. Valid values:

*   **NoStart**: The backup task is not started.
*   **Progressing**: The backup task is in progress.

By default, this operation returns backup tasks in both states.', example='NoStart', position='Query'),
  backupMode?: string(name='BackupMode', description='The backup mode. Valid values:

*   **Automated**
*   **Manual**', example='Automated', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  flag?: string(name='Flag', description='A reserved parameter.', example='None', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupTasksResponseBody = {
  items?: {
    backupJob?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the backup set that is generated by the backup task.

> If the return value of the **BackupStatus** parameter is **Finished**, you must specify the **BackupJobId** parameter to obtain the ID of the generated backup set.', example='346650271'),
      backupJobId?: string(name='BackupJobId', description='The ID of the backup task.', example='4762614'),
      backupProgressStatus?: string(name='BackupProgressStatus', description='The status of the backup program. Valid values:

*   **NoStart**
*   **Preparing**
*   **Waiting**
*   **Uploading**
*   **Checking**
*   **Finished**', example='NoStart'),
      backupStatus?: string(name='BackupStatus', description='The status of the backup task. Valid values:

*   **NoStart**
*   **Checking**
*   **Preparing**
*   **Waiting**
*   **Uploading**
*   **Finished**
*   **Failed**

> This parameter is returned only after a backup task is run.', example='NoStart'),
      jobMode?: string(name='JobMode', description='The backup mode. Valid values:

*   **Automated**
*   **Manual**', example='Automated'),
      process?: string(name='Process', description='The progress of the task in percentage.', example='25'),
      taskAction?: string(name='TaskAction', description='The type of the backup task. Valid values:

*   **TempBackupTask**: The backup task is an adhoc backup task.
*   **NormalBackupTask**: The backup task is a common backup task.', example='NormalBackupTask'),
    }
  ](name='BackupJob')
  }(name='Items', description='An array that consists of the details of the backup task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90496720-2319-42A8-87CD-FCE4DF95EBED'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set.', example='327329803', position='Query'),
  backupMode?: string(name='BackupMode', description='The backup mode. Valid values:

*   **Automated**
*   **Manual**', example='Automated', position='Query'),
  backupStatus?: string(name='BackupStatus', description='The status of the backup set. Valid values:

*   **Success**
*   **Failed**', example='Success', position='Query'),
  backupType?: string(name='BackupType', description='The backup type. Valid values:

*   **FullBackup**: full backup
*   **IncrementalBackup**: incremental backup', example='FullBackup', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

> We recommend that you specify a time range that is as short as possible to avoid timeout.', example='2011-06-15T16:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', minimum=30, maximum=1000, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2011-06-01T16:00Z', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupDownloadLinkByDB?: {
        backupDownloadLinkByDB?: [ 
        {
          dataBase?: string(name='DataBase', description='The name of the database.', example='dbs'),
          downloadLink?: string(name='DownloadLink', description='The public URL from which you can download the backup set.', example='https://cn-hangzhou.bak.rds.aliyuncs.com/custins53664665/hins18676859_2021072909473127987849.zip?Expires=*****&dbList=tb1'),
          intranetDownloadLink?: string(name='IntranetDownloadLink', description='The internal URL from which you can download the backup set.', example='https://cn-hangzhou-internal.bak.rds.aliyuncs.com/custins53664665/hins18676859_2021072909473127987849.zip?Expires=*****&dbList=tb1'),
        }
      ](name='BackupDownloadLinkByDB')
      }(name='BackupDownloadLinkByDB', description='An array consisting of URLs from which you can download backup sets of individual databases.'),
      backupDownloadURL?: string(name='BackupDownloadURL', description='The URL that is used to download the backup set over the Internet. If the backup set cannot be downloaded, null is returned.

> For example, if BackupMethod of an ApsaraDB RDS for SQL Server instance is set to **Snapshot**, a null string is returned.', example='http://rdsbak-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      backupEndTime?: string(name='BackupEndTime', description='The end time of the backup task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2019-02-13T12:20:00Z'),
      backupId?: string(name='BackupId', description='The ID of the backup set.', example='321020562'),
      backupInitiator?: string(name='BackupInitiator', description='The initiator of the backup task. Valid values:

*   **System**
*   **User**', example='System'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL', description='The URL that is used to download the backup set over an internal network. If the backup set cannot be downloaded, null is returned.

> For example, if BackupMethod of an ApsaraDB RDS for SQL Server instance is set to **Snapshot**, a null string is returned.', example='http://rdsbak-hz-v3.oss-cn-hangzhou-internal.aliyuncs.com/xxxxx'),
      backupMethod?: string(name='BackupMethod', description='The method that is used to generate the backup set. Valid values:

*   **Logical**: logical backup
*   **Physical**: physical backup
*   **Snapshot**: snapshot backup', example='Physical'),
      backupMode?: string(name='BackupMode', description='The backup mode of the backup set. Valid values:

*   **Automated**
*   **Manual**', example='Automated'),
      backupSize?: long(name='BackupSize', description='The backup size. Unit: bytes.', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', description='The start time of the backup task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2019-02-03T12:20:00Z'),
      backupStatus?: string(name='BackupStatus', description='The status of the backup set.', example='Success'),
      backupType?: string(name='BackupType', description='The backup type of the backup set. Valid values:

*   **FullBackup**: full backup
*   **IncrementalBackup**: incremental backup', example='FullBackup'),
      checksum?: string(name='Checksum', description='The checksum. The value of this parameter is calculated by using the CRC64 algorithm.', example='1835830439**********'),
      consistentTime?: long(name='ConsistentTime', description='The point in time at which the data in the backup set is consistent. The return value of this parameter is a timestamp.

> If the instance runs MySQL 5.6, a timestamp is returned. Otherwise, the value 0 is returned.', example='1576506856'),
      copyOnlyBackup?: string(name='CopyOnlyBackup', description='The backup mode of the backup set. Valid values:

*   0: the standard mode. This mode supports full backups and incremental backups.
*   1: the copy-only mode. This mode supports only full backups.

> This parameter is returned only when the instance runs SQL Server.', example='0'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance', example='rm-uf6wjk5xxxxxxx'),
      encryption?: string(name='Encryption', description='The encryption information about the backup set.', example='{}'),
      hostInstanceID?: string(name='HostInstanceID', description='The No. of the instance that generates the backup set. This parameter is used to indicate whether the instance that generates the backup set is a primary instance or a secondary instance.', example='5882781'),
      isAvail?: int32(name='IsAvail', description='Indicates whether the backup set is available. Valid values:

*   **0**: The backup set is unavailable.
*   **1**: The backup set is available.', example='1'),
      metaStatus?: string(name='MetaStatus', description='The status of the backup set that is used to restore individual databases or tables. Valid values:

*   **OK**: The backup set is normal.
*   **LARGE**: The backup set contains an abnormally large number of tables. It cannot be used to restore individual databases or tables.
*   **EMPTY**: The backup set is generated from a failed backup task.

> If an empty string is returned, the backup set cannot be used to restore individual databases or tables.', example='OK'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
      storageClass?: string(name='StorageClass', description='The storage class of the backup set. Valid values:

*   **0**: regular storage
*   **1**: archive storage', example='0'),
      storeStatus?: string(name='StoreStatus', description='Indicates whether the backup set can be deleted. Valid values:

*   **Enabled**: The backup set can be deleted.
*   **Disabled**: The backup set cannot be deleted.', example='Disabled'),
    }
  ](name='Backup')
  }(name='Items', description='An array that consists of the details of the returned backup sets.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: string(name='PageRecordCount', description='The number of backup sets on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  totalEcsSnapshotSize?: long(name='TotalEcsSnapshotSize', description='The size of the snapshot chain of the instance. Unit: bytes.', example='0'),
  totalRecordCount?: string(name='TotalRecordCount', description='The total number of entries returned.', example='100'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

/**
  * > A backup set can be used to restore data only when **BackupStatus** of the backup set is **Success**.
  *
 */
async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBinlogFilesRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end time of the query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2011-06-20T15:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30** to **100**. Default value: **30**.', example='30', minimum=30, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The start time of the query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2011-06-01T15:00:00Z', position='Query'),
}

model DescribeBinlogFilesResponseBody = {
  items?: {
    binLogFile?: [ 
    {
      checksum?: string(name='Checksum', description='The checksum. The value of this parameter is calculated by using the CRC64 algorithm.', example='18358304393468701857'),
      downloadLink?: string(name='DownloadLink', description='The HTTP-based download URL of the binary log file. If the return value of this parameter is NULL, ApsaraDB RDS does not provide a download URL for the file.', example='http://rdsxxxxx.oss.aliyuncs.com/xxxxxx'),
      fileSize?: long(name='FileSize', description='The size of the binary log file. Unit: bytes.', example='2269410'),
      hostInstanceID?: string(name='HostInstanceID', description='The ID of the instance to which the binary log file belongs. This parameter is used to distinguish between the binary log files that are generated on a primary instance and those that are generated on a secondary instance.', example='5841973'),
      intranetDownloadLink?: string(name='IntranetDownloadLink', description='The download URL that is used over an internal network.', example='http://rdslog-hz-v3.oss-cn-hangzhou-internal.aliyuncs.com/xxxxxx'),
      linkExpiredTime?: string(name='LinkExpiredTime', description='The expiration time of the URL. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2013-06-09T18:00:00Z'),
      logBeginTime?: string(name='LogBeginTime', description='The start time of the log data recorded in the binary log file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-02-09T17:45:21Z'),
      logEndTime?: string(name='LogEndTime', description='The end time of the log data recorded in the binary log file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-02-15T13:10:28Z'),
      logFileName?: string(name='LogFileName', description='The name of the binary log file.', example='000000040000000000000019'),
      remoteStatus?: string(name='RemoteStatus', description='The status of the binary log file that is stored in the Object Storage Service (OSS) bucket. Valid values:

*   **Uploading**
*   **Completed**', example='Completed'),
    }
  ](name='BinLogFile')
  }(name='Items', description='An array that consists of information about the binary log file.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of binary log files returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED169A3E-1657-4104-82AB-24EA8CD0DB75'),
  totalFileSize?: long(name='TotalFileSize', description='The total size of the binary log files.', example='2269410'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of binary log files returned.', example='100'),
}

model DescribeBinlogFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBinlogFilesResponseBody(name='body'),
}

/**
  * *   If the return value of the **DownloadLink** parameter is NULL, ApsaraDB RDS does not provide a URL for you to download binary log files.
  * *   If the return value of the **DownloadLink** parameter is not NULL, ApsaraDB RDS provides a URL for you to download binary log files. The expiration time of the URL is specified by the **LinkExpiredTime** parameter. You must download the binary log files before the expiration time.
  * *   Each binary log file that is returned by this operation contains the log entries that are generated over the time range specified by the StartTime and EndTime parameters.
  * > This operation is not supported for instances that run SQL Server.
  *
 */
async function describeBinlogFiles(request: DescribeBinlogFilesRequest): DescribeBinlogFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBinlogFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCharacterSetNameRequest {
  engine: string(name='Engine', description='The database engine that is run on the instance. Valid values:

*   **mysql**: MySQL
*   **mssql**: SQL Server
*   **PostgreSQL**: PostgreSQL
*   **MariaDB**: MariaDB', example='mysql', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCharacterSetNameResponseBody = {
  characterSetNameItems?: {
    characterSetName?: [ string ](name='CharacterSetName')
  }(name='CharacterSetNameItems', description='An array that consists of the character sets that are supported for the instance.'),
  engine?: string(name='Engine', description='The database engine that is run on the instance.', example='mysql'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
}

model DescribeCharacterSetNameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetNameResponseBody(name='body'),
}

async function describeCharacterSetName(request: DescribeCharacterSetNameRequest): DescribeCharacterSetNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharacterSetName', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClassDetailsRequest {
  classCode: string(name='ClassCode', example='rds.mysql.s3.large', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  commodityCode: string(name='CommodityCode', example='rds', position='Query'),
  engine: string(name='Engine', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', example='5.6', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeClassDetailsResponseBody = {
  category?: string(name='Category', example='Basic'),
  classCode?: string(name='ClassCode', example='mysql.n2.medium.1'),
  classGroup?: string(name='ClassGroup', example='x'),
  cpu?: string(name='Cpu', example='4'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', example='local_ssd'),
  instructionSetArch?: string(name='InstructionSetArch', example='x86'),
  maxConnections?: string(name='MaxConnections', example='4000'),
  maxIOMBPS?: string(name='MaxIOMBPS', example='1024'),
  maxIOPS?: string(name='MaxIOPS', example='N/A'),
  memoryClass?: string(name='MemoryClass', example='2GB'),
  referencePrice?: string(name='ReferencePrice', example='13400'),
  requestId?: string(name='RequestId', example='E9DD55F4-1A5F-48CA-BA57-DFB3CA8C4C34'),
}

model DescribeClassDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClassDetailsResponseBody(name='body'),
}

async function describeClassDetails(request: DescribeClassDetailsRequest): DescribeClassDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClassDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudMigrationPrecheckResultRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the destination instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='pgm-bp102g323jd4****', position='Query'),
  pageNumber: long(name='PageNumber', description='The page number. Valid values: any non-zero positive integer. The default value is 1.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries per page. Valid values: 30 to 100. The default value is 30.', example='30', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The private or public IP address that is used to connect to the self-managed PostgreSQL instance.

*   If the self-managed PostgreSQL instance resides on an Elastic Compute Service (ECS) instance, enter the private IP address of the ECS instance. For more information about how to obtain the private IP address of an ECS instance, see [View IP addresses](~~273914~~).
*   If the self-managed PostgreSQL instance resides in an on-premises data center, enter the private IP address of the on-premises data center.', example='172.2.XX.XX', position='Query'),
  sourcePort?: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance. You can run the netstat -a | grep PGSQL command to obtain the port number.', example='5432', position='Query'),
  taskId?: long(name='TaskId', description='The ID of the task. You can obtain the ID of the task from the response that is returned after you call the [CreateCloudMigrationPrecheckTask](~~409831~~) operation to create the task.', example='439946016', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. You can obtain the name of the task from the response that is returned after you call the [CreateCloudMigrationPrecheckTask](~~409831~~) operation to create the task.', example='slf7w7wj3g', position='Query'),
}

model DescribeCloudMigrationPrecheckResultResponseBody = {
  items?: [ 
    {
      detail?: string(name='Detail', description='The content of the assessment report.', example='[Check rds empty]\\nCheck rds databases: success\\n[Check source connectivity]\\nCheck ip connectable: success\\nCheck port connectable: success\\nCheck database connectable: success\\nCheck account replication privilege: success\\nCheck account createrole privilege: success\\nCheck account monitor privilege: success\\n[Check source version]\\nCheck major version consistent: success\\n[Check source glibc version]\\nCheck source glibc version compatible: warning(warning:source glibc version is not compatible with rds pg)\\n[Check disk size]\\nCheck disk size enough: success\\n[Check wal keep size]\\nCheck wal keep size large enough: success\\n[Check spec params]\\nCheck if spec params too large: success\\n [Check triggers]\\nCheck triggers compatible: success\\n[Check user functions]\\nCheck user functions compatible: success\\n*Migrate check success*'),
      gmtCreated?: string(name='GmtCreated', description='The time when the task was created.', example='2022-02-25T06:57:41Z'),
      gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-02-25T06:58:00Z'),
      sourceAccount?: string(name='SourceAccount', description='The username of the account.', example='migratetest'),
      sourceCategory?: string(name='SourceCategory', description='The environment in which the self-managed PostgreSQL instance runs.

*   **idcOnVpc**: The self-managed PostgreSQL instance resides in a data center. The data center can communicate with the VPC to which the ApsaraDB RDS for PostgreSQL instance belongs.
*   **ecsOnVpc**: The self-managed PostgreSQL instance resides on an ECS instance.', example='ecsonvpc'),
      sourceIpAddress?: string(name='SourceIpAddress', description='The private IP address that is used to connect to the self-managed PostgreSQL instance.', example='172.2.XX.XX'),
      sourcePassword?: string(name='SourcePassword', description='The password of the account.', example='123456'),
      sourcePort?: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance.', example='5432'),
      targetEip?: string(name='TargetEip', description='A reserved parameter. The return value of this parameter is null.', example='null'),
      targetInstanceName?: string(name='TargetInstanceName', description='The ID of the destination instance.', example='pgm-bp102g323jd4****'),
      taskId?: long(name='TaskId', description='The ID of the task.', example='440420798'),
      taskName?: string(name='TaskName', description='The name of the task.', example='lxbv6rtxno8'),
    }
  ](name='Items', description='The details of the assessment report.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E4A6E1B-789B-5F16-9736-39AA57FC7374'),
  totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='1'),
}

model DescribeCloudMigrationPrecheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudMigrationPrecheckResultResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * Before you call the DescribeCloudMigrationPrecheckResult operation, make sure that the CreateCloudMigrationPrecheckTask operation is called to create a cloud migration assessment task for the ApsaraDB RDS for PostgreSQL instance.
  *
 */
async function describeCloudMigrationPrecheckResult(request: DescribeCloudMigrationPrecheckResultRequest): DescribeCloudMigrationPrecheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudMigrationPrecheckResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudMigrationResultRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the destination instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='pgm-bp102g323jd4****', position='Query'),
  pageNumber: long(name='PageNumber', description='The number of entries per page.', example='10', position='Query'),
  pageSize: long(name='PageSize', description='The page number.', example='1', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceIpAddress?: string(name='SourceIpAddress', description='The private IP address that is used to connect to the self-managed PostgreSQL instance.

*   If the self-managed PostgreSQL instance resides on an Elastic Compute Service (ECS) instance, enter the private IP address of the ECS instance. For more information about how to obtain the private IP address of an ECS instance, see [View IP addresses](~~273914~~).
*   If the self-managed PostgreSQL instance resides in a data center, enter the private IP address of the data center.', example='172.16.XX.XX', position='Query'),
  sourcePort?: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance. You can run the netstat -a | grep PGSQL command to obtain the port number.', example='5432', position='Query'),
  taskId?: long(name='TaskId', description='The ID of the task. You can obtain the ID of a task from the response that is returned when you call the [CreateCloudMigrationTask](~~411690~~) operation to create the task.', example='440437220', position='Query'),
  taskName?: string(name='TaskName', description='The name of the task. You can obtain the ID of a task from the response that is returned when you call the [CreateCloudMigrationTask](~~411690~~) operation to create the task.', example='362c6c7a-4d20-4eac-898c-1495ceab374c', position='Query'),
}

model DescribeCloudMigrationResultResponseBody = {
  items?: [ 
    {
      detail?: string(name='Detail', description='The details of the task.', example='[Check rds empty]\\nCheck rds databases: success\\n[Check source connectivity]\\nCheck ip connectable: success\\nCheck port connectable: success\\nCheck database connectable: success\\nCheck account replication privilege: success\\nCheck account createrole privilege: success\\nCheck account monitor privilege: success\\n[Check source version]\\nCheck major version consistent: success\\n[Check source glibc version]\\nCheck source glibc version compatible: warning(warning:source glibc version is not compatible with rds pg)\\n[Check disk size]\\nCheck disk size enough: success\\n[Check wal keep size]\\nCheck wal keep size large enough: success\\n[Check spec params]\\nCheck if spec params too large: success\\n[Start RDS instance]\\n2022-02-25 17:00:29 --- Start RDS instance as slave for data replication\\n[Synchronize data]\\n2022-02-25 17:01:05 --- Synchronize data from source to RDS by streaming replication \\n'),
      gmtCreated?: string(name='GmtCreated', description='The time when the task was created.', example='2022-02-25T08:53:13Z'),
      gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-03-01T06:39:51Z'),
      migrateStage?: string(name='MigrateStage', description='The migration phase in which the task stays.

*   **precheck**: precheck
*   **basebackup**: full data backup
*   **startup**: link establishment
*   **increment**: incremental data synchronization
*   **switch**: cloud migration-triggered switchover
*   **success**: cloud migration completed', example='switch'),
      replicationInfo?: string(name='ReplicationInfo', description='The information about the replication link.', example='{\\"Status\\":\\"streaming\\",\\"ReceiveStartLsn\\":\\"0/3000000\\",\\"ReceivedTli\\":\\"1\\",\\"LatestEndTime\\":\\"2022-02-25 17:03:59.3344+08\\",\\"Synced\\":\\"true\\",\\"IsSlave\\":\\"true\\",\\"ReplayTimestamp\\":\\"null\\",\\"LastMsgSendTime\\":\\"2022-03-01 14:42:57.967537+08\\",\\"Conninfo\\":\\"user=migratetest password=******** channel_binding=prefer dbname=replication host=172.16.254.203 port=5432 application_name=rds_db_instance fallback_application_name=walreceiver sslmode=prefer sslcompression=1 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any\\",\\"LastMsgReceiptTime\\":\\"2022-03-01 14:42:57.96727+08\\",\\"LatestEndLsn\\":\\"0/3000148\\",\\"ReceivedLsn\\":\\"0/3000148\\",\\"ReplayLsn\\":\\"0/3000148\\",\\"ReceiveStartTli\\":\\"1\\",\\"ReplayLag\\":\\"0\\"}'),
      replicationState?: string(name='ReplicationState', description='The status of data replication.

*   **unstarted**
*   **catchup**
*   **streaming**
*   **disconnect**
*   **finish**', example='streaming'),
      sourceAccount?: string(name='SourceAccount', description='The username of the account.', example='migratetest'),
      sourceCategory?: string(name='SourceCategory', description='The environment in which the self-managed PostgreSQL instance runs.

*   **idcOnVpc**: The self-managed PostgreSQL instance resides in a data center. The data center can communicate with the VPC to which the ApsaraDB RDS for PostgreSQL instance belongs.
*   **ecsOnVpc**: The self-managed PostgreSQL instance resides on an ECS instance.', example='ecsonvpc'),
      sourceIpAddress?: string(name='SourceIpAddress', description='The private IP address that is used to connect to the self-managed PostgreSQL instance.', example='172.16.XX.XX'),
      sourcePassword?: string(name='SourcePassword', description='The password of the account.', example='123456'),
      sourcePort?: long(name='SourcePort', description='The port number that is used to connect to the self-managed PostgreSQL instance.', example='5432'),
      switchTime?: string(name='SwitchTime', description='The time when a switchover was performed.', example='2022-03-01T06:40:51Z'),
      targetEip?: string(name='TargetEip', description='A reserved parameter. The return value of this parameter is null.', example='null'),
      targetInstanceName?: string(name='TargetInstanceName', description='The ID of the destination instance.', example='pgm-bp102g323jd4****'),
      taskId?: long(name='TaskId', description='The ID of the task.', example='440437220'),
      taskName?: string(name='TaskName', description='The name of the task.', example='362c6c7a-4d20-4eac-898c-1495ceab374c'),
    }
  ](name='Items', description='The details of the cloud migration tasks.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B983C48-9793-5EAA-8F7F-00EAEC517675'),
  totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='1'),
}

model DescribeCloudMigrationResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudMigrationResultResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * Before you call the DescribeCloudMigrationResult operation, make sure that cloud migration tasks are created by calling the [CreateCloudMigrationTask](~~411690~~) operation.
  *
 */
async function describeCloudMigrationResult(request: DescribeCloudMigrationResultRequest): DescribeCloudMigrationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudMigrationResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCollationTimeZonesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCollationTimeZonesResponseBody = {
  collationTimeZones?: {
    collationTimeZone?: [ 
    {
      description?: string(name='Description', description='The description of the character set collations and time zones.', example='Kabul'),
      standardTimeOffset?: string(name='StandardTimeOffset', description='The offset of the UTC time. The offset is in the following format: (UTC+\\<i>HH:mm\\</i>).', example='(UTC+04:30)'),
      timeZone?: string(name='TimeZone', description='The time zone that is available for use in ApsaraDB RDS.', example='Afghanistan Standard Time'),
    }
  ](name='CollationTimeZone')
  }(name='CollationTimeZones', description='An array that consists of the character set collations and time zones that are available for use in ApsaraDB RDS.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EAED246-DB18-4C8D-9EB5-C319626F2A77'),
}

model DescribeCollationTimeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCollationTimeZonesResponseBody(name='body'),
}

/**
  * >  This operation is supported only for instances that run SQL Server 2012 or later.
  *
 */
async function describeCollationTimeZones(request: DescribeCollationTimeZonesRequest): DescribeCollationTimeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCollationTimeZones', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCrossBackupMetaListRequest {
  backupSetId: string(name='BackupSetId', description='The ID of the cross-region backup file that you want to use. You can call the [DescribeCrossRegionBackups](~~121733~~) operation to query the ID of the cross-region backup file.', example='123456', position='Query'),
  getDbName?: string(name='GetDbName', description='The name of the database that you want to query. The system implements exact match based on the value of this parameter and returns the name of the matched database and the names of the tables in the matched database.', example='testdb1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: string(name='PageIndex', description='The number of the page to return. Valid values: any non-zero positive integer.

> This parameter only takes effect when you specify the **PageSize** parameter.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return per page. Default value: **1**.

> This parameter only takes effect when you specify the **PageIndex** parameter.', example='30', position='Query'),
  pattern?: string(name='Pattern', description='The name of the database that you want to query. The system implements fuzzy match based on the value of this parameter and returns only the name of the matched database.

> You can implement fuzzy match and then exact match. For example, you can set the Pattern parameter to test to query the testdb1 and testdb2 databases. Then, you can specify the **GetDbName** parameter to query only the matched database and the tables in the matched database.', example='test', position='Query'),
  region?: string(name='Region', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCrossBackupMetaListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The instance to which the cross-region backup file belongs.', example='rm-uf6wjk5xxxxxxx'),
  items?: {
    meta?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='testdb1'),
      size?: string(name='Size', description='The size of the table. Unit: KB. If the database contains more than one table, the names of these tables are separated by commas (,).', example='1000'),
      tables?: string(name='Tables', description='An array that consists of the names of the tables that the database contains. If the database contains more than one table, the names of these tables are separated by commas (,).', example='test1,test2'),
    }
  ](name='Meta')
  }(name='Items', description='An array that consists of the information about the databases and tables whose data is included in the cross-region backup file.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='60F9A12A-16B8-4728-B099-4CA38D32C31C'),
  totalPageCount?: int32(name='TotalPageCount', description='The total number of pages returned.', example='1'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='1'),
}

model DescribeCrossBackupMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossBackupMetaListResponseBody(name='body'),
}

/**
  * ApsaraDB RDS for MySQL instances support cross-region backup and restoration. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](~~120875~~).
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
  *
 */
async function describeCrossBackupMetaList(request: DescribeCrossBackupMetaListRequest): DescribeCrossBackupMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCrossBackupMetaList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCrossRegionBackupDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. Up to 30 instance IDs are allowed in a single request. If you enter more than one instance ID, separate them with commas (,).', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: 30.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCrossRegionBackupDBInstanceResponseBody = {
  items?: {
    item?: [ 
    {
      backupEnabled?: string(name='BackupEnabled', description='The status of the cross-region backup feature on the instance. Valid values:

*   **Disable**
*   **Enable**', example='Enable'),
      backupEnabledTime?: string(name='BackupEnabledTime', description='The time when cross-region backup was enabled on the instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-06-12T05:44:21Z'),
      crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the region in which the cross-region data backup file is stored.', example='cn-shanghai'),
      crossBackupType?: string(name='CrossBackupType', description='The policy that is used to save the cross-region backup files of the instance. Default value: **1**. The value 1 indicates that all cross-region backup files are saved.', example='1'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance. It must be 2 to 256 characters in length. The name can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

> The value cannot start with http:// or https://.', example='Test database'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance states](~~26315~~).', example='Running'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.6'),
      lockMode?: string(name='LockMode', description='The lock status of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked after it expires.
*   **LockByRestoration**: The instance is automatically locked before it is rolled back.
*   **LockByDiskQuota**: The instance is automatically locked because its storage capacity is exhausted and the instance is inaccessible.', example='Unlock'),
      logBackupEnabled?: string(name='LogBackupEnabled', description='The status of the cross-region log backup feature on the instance. Valid values:

*   **Disable**
*   **Enable**', example='Enable'),
      logBackupEnabledTime?: string(name='LogBackupEnabledTime', description='The time when cross-region log backup was enabled on the instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-06-12T05:44:21Z'),
      retentType?: int32(name='RetentType', description='The policy that is used to retain the cross-region backup files of the instance. Cross-region backups can be retained only based on the specified retention period. Default value: **1**.', example='1'),
      retention?: int32(name='Retention', description='The number of days for which the cross-region backup files of the instance are retained. Valid values: **7 to 1825**.', example='15'),
    }
  ](name='Item')
  }(name='Items', description='An array that consists of instances and their cross-region backup settings.'),
  itemsNumbers?: int32(name='ItemsNumbers', description='The total number of items returned for cross-region backup settings.', example='1'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Valid values: any non-zero positive integer.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 30.', example='30'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='33517002-182D-40BE-93EC-610BD3381045'),
  totalRecords?: int32(name='TotalRecords', description='The total number of returned entries.', example='100'),
}

model DescribeCrossRegionBackupDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionBackupDBInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
  *
 */
async function describeCrossRegionBackupDBInstance(request: DescribeCrossRegionBackupDBInstanceRequest): DescribeCrossRegionBackupDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCrossRegionBackupDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCrossRegionBackupsRequest {
  backupId?: int32(name='BackupId', description='The ID of the cross-region data backup file.', example='603524***', position='Query'),
  crossBackupId?: int32(name='CrossBackupId', description='The ID of the cross-region data backup file.

>  You must specify the **CrossBackupId** parameter. Alternatively, you must specify the **StartTime** and **EndTime** parameters.', example='14562', position='Query'),
  crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the destination region where the cross-region data backup file is stored.', example='cn-shanghai', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-06-15T12:10:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: 30.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-05-30T12:10:00Z', position='Query'),
}

model DescribeCrossRegionBackupsResponseBody = {
  endTime?: string(name='EndTime', description='The end of the time range that is queried.', example='2019-06-15T12:10:00Z'),
  items?: {
    item?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', description='The time when the cross-region data backup file was generated.', example='2019-06-15T12:10:00Z'),
      backupMethod?: string(name='BackupMethod', description='The method that is used to generate the cross-region data backup file. Valid values:

*   **L**: logical backup
*   **P**: physical backup', example='P'),
      backupSetScale?: int32(name='BackupSetScale', description='The level at which the cross-region data backup file is generated.

*   **0**: instance-level backup
*   **1**: database-level backup', example='0'),
      backupSetStatus?: int32(name='BackupSetStatus', description='The status of the cross-region data backup. Valid values:

*   **0**: The cross-region data backup is successful.
*   **1**: The cross-region data backup failed.', example='0'),
      backupStartTime?: string(name='BackupStartTime', description='The time when the cross-region data backup started.', example='2019-05-30T12:10:00Z'),
      backupType?: string(name='BackupType', description='The type of the cross-region data backup. Valid values:

*   **F**: full data backup
*   **I**: incremental data backup', example='F'),
      category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: Basic Edition.
*   **HighAvailability**: High-availability Edition.
*   **Finance**: Enterprise Edition. This edition is supported only by the China site (aliyun.com).', example='HighAvailability'),
      consistentTime?: string(name='ConsistentTime', description='The point in time that is indicated by the data in the cross-region data backup file.', example='2019-06-12T05:44:46Z'),
      crossBackupDownloadLink?: string(name='CrossBackupDownloadLink', description='The external URL from which you can download the cross-region data backup file.', example='http://rdsddrbak-shanghai.oss-cn-shanghai.aliyuncs.com/xxxxx'),
      crossBackupId?: int32(name='CrossBackupId', description='The ID of the cross-region data backup file.', example='14377'),
      crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the destination region where the cross-region data backup file of the instance is stored.', example='cn-shanghai'),
      crossBackupSetFile?: string(name='CrossBackupSetFile', description='The name of the compressed package that contains the cross-region data backup file.', example='cn-hangzhou_rm-xxxxx_hins81xxx_data_20190612134426_qp.xb'),
      crossBackupSetLocation?: string(name='CrossBackupSetLocation', description='The location where the cross-region data backup file is stored.', example='oss'),
      crossBackupSetSize?: long(name='CrossBackupSetSize', description='The size of the cross-region data backup file. Unit: bytes.', example='5312836'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type. Valid values:

*   **local_ssd**: local SSD. This is the recommended storage type.
*   **cloud_ssd**: standard SSD.
*   **cloud_essd**: enhanced SSD (ESSD).', example='ssd'),
      engine?: string(name='Engine', description='The engine of the database.', example='mysql'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='5.6'),
      instanceId?: int32(name='InstanceId', description='The ID of the instance. This parameter is used to determine whether the instance that generates the cross-region data backup file is a primary or secondary instance.', example='8161055'),
      restoreRegions?: {
        restoreRegion?: [ string ](name='RestoreRegion')
      }(name='RestoreRegions', description='An array that consists of the regions to which the cross-region data backup file can be restored.'),
    }
  ](name='Item')
  }(name='Items', description='An array that consists of details of the cross-region data backup files.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Valid values: any non-zero positive integer.

Default value: **1**.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of cross-region data backup files on the current page.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='60912B41-7579-4B5D-B289-8856030F0A6A'),
  startTime?: string(name='StartTime', description='The beginning of the time range that is queried.', example='2019-05-30T12:10:00Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='100'),
}

model DescribeCrossRegionBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionBackupsResponseBody(name='body'),
}

/**
  * For more information about how to query the cross-region log backup files of an RDS instance, see [DescribeCrossRegionLogBackupFiles](~~121734~~).
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Back up an ApsaraDB RDS for PostgreSQL instance across regions](~~206671~~).
  *
 */
async function describeCrossRegionBackups(request: DescribeCrossRegionBackupsRequest): DescribeCrossRegionBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCrossRegionBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCrossRegionLogBackupFilesRequest {
  crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the destination region where the cross-region backup files of the instance are stored. You can call the [DescribeCrossRegionBackupDBInstance](~~121737~~) operation to query the most recent region list.', example='cn-shanghai', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-06-15T12:10:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: 30.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-05-30T12:10:00Z', position='Query'),
}

model DescribeCrossRegionLogBackupFilesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
  endTime?: string(name='EndTime', description='The end of the time range queried. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*hh:mm:ss*Z format. The time is displayed in UTC.', example='2019-06-15T12:10:00Z'),
  items?: {
    item?: [ 
    {
      crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the destination region where the cross-region log backup file is stored.', example='cn-shanghai'),
      crossDownloadLink?: string(name='CrossDownloadLink', description='The external URL from which you can download the cross-region log backup file.', example='http://rdsddrlog-zb.oss-cn-zhangjiakou.aliyuncs.com/xxxxx'),
      crossIntranetDownloadLink?: string(name='CrossIntranetDownloadLink', description='The internal URL from which you can download the cross-region log backup file.', example='http://rdsddrlog-zb.oss-cn-zhangjiakou-internal.aliyuncs.com/xxxxx'),
      crossLogBackupId?: int32(name='CrossLogBackupId', description='The ID of the cross-region log backup file.', example='14567'),
      crossLogBackupSize?: long(name='CrossLogBackupSize', description='The size of the cross-region log backup file. Unit: bytes.', example='5312836'),
      instanceId?: int32(name='InstanceId', description='The ID of the instance.', example='8161055'),
      linkExpiredTime?: string(name='LinkExpiredTime', description='The time when the download URL of the cross-region log backup file expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*hh:mm:ss*Z format. The time is displayed in UTC.', example='2019-06-30T15:00:00Z'),
      logBeginTime?: string(name='LogBeginTime', description='The start time of the cross-region log backup file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*hh:mm:ss*Z format. The time is displayed in UTC.', example='2019-05-30T12:10:00Z'),
      logEndTime?: string(name='LogEndTime', description='The end time of the cross-region log backup file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*hh:mm:ss*Z format. The time is displayed in UTC.', example='2019-05-30T20:10:00Z'),
      logFileName?: string(name='LogFileName', description='The name of the cross-region log backup file.', example='cn-hangzhou_rm-bpxxxxx_7198739_mysql-bin.000230'),
    }
  ](name='Item')
  }(name='Items', description='An array that consists of cross-region log backup files.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Pages start from page 1.

Default value: **1**.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of cross-region log backup files on the current page.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DAC241E8-28E6-49DA-BFB0-B2DD090885C1'),
  startTime?: string(name='StartTime', description='The beginning of the time range queried. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*hh:mm:ss*Z format. The time is displayed in UTC.', example='2019-05-30T12:10:00Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='100'),
}

model DescribeCrossRegionLogBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionLogBackupFilesResponseBody(name='body'),
}

/**
  * For more information about how to query the cross-region data backup files of an RDS instance, see [DescribeCrossRegionBackups](~~121733~~).
  * Before you call this operation, make sure that the instance runs one of the following database engine versions and RDS editions:
  * *   MySQL 8.0 on RDS High-availability Edition (with local SSDs)
  * *   MySQL 5.7 on RDS High-availability Edition (with local SSDs)
  * *   MySQL 5.6
  *
 */
async function describeCrossRegionLogBackupFiles(request: DescribeCrossRegionLogBackupFilesRequest): DescribeCrossRegionLogBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCrossRegionLogBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can specify up to 30 instance IDs in a single request. If you specify multiple instance IDs, separate the instance IDs with commas (,).', example='rm-uf6wjk5*****', position='Query'),
  expired?: string(name='Expired', description='Specifies whether the instance expires. Valid values:

*   **True**: The instance expires.
*   **False:** The instance does not expire.', example='False', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      accountMaxQuantity?: int32(name='AccountMaxQuantity', description='The maximum number of accounts that can be created on the instance.', example='50'),
      advancedFeatures?: string(name='AdvancedFeatures', description='The advanced features that are enabled for the instance. If multiple advanced features are enabled, the advanced features are separated by commas (,). This parameter is available only to instances that run **SQL Server**. Valid values:

*   **LinkedServer**
*   **DistributeTransaction**', example='LinkedServer'),
      autoUpgradeMinorVersion?: string(name='AutoUpgradeMinorVersion', description='The method that is used to update the minor engine version of the instance. Valid values:

*   **Auto:** automatic update.
*   **Manual**: manual update. ApsaraDB RDS automatically updates the minor engine version of the instance only when the minor engine version is phased out.', example='Auto'),
      availabilityValue?: string(name='AvailabilityValue', description='The availability status of the instance in percentage.', example='100.0%'),
      babelfishConfig?: {
        babelfishEnabled?: string(name='BabelfishEnabled', description='The switch to enable or disable Babelfish.

> If Babelfish is enabled when you purchase an ApsaraDB RDS for PostgreSQL instance, this parameter is fixed as **true**.', example='true'),
        migrationMode?: string(name='MigrationMode', description='The migration mode for Babelfish. Valid values:

*   **single-db**
*   **multi-db**

> For more information about migration modes for Babelfish, see [Migration mode](~~428613~~).', example='single-db'),
      }(name='BabelfishConfig', description='The configuration of the Babelfish feature for the ApsaraDB RDS for PostgreSQL instance.

> This parameter applies only to ApsaraDB RDS for PostgreSQL instances for which Babelfish is enabled. For more information, see [Introduction to Babelfish](~~428613~~).'),
      bpeEnabled?: string(name='BpeEnabled', description='<props="china">预留参数，无需配置。</props>
<props="intl">无效参数，无需配置。</props>', example='false'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='<props="china">预留参数，无需配置。</props>
<props="intl">无效参数，无需配置。</props>', example='false'),
      category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **cluster**: RDS Cluster Edition for MySQL
*   **AlwaysOn**: RDS Cluster Edition for SQL Server
*   **Finance**: RDS Enterprise Edition
*   **Serverless_basic**: RDS Serverless Basic Edition', example='Basic'),
      collation?: string(name='Collation', description='The character set collation of the instance.', example='Chinese_PRC_CI_AS'),
      connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode', example='Standard'),
      connectionString?: string(name='ConnectionString', description='The internal endpoint of the instance.', example='rm-uf6wjk5*****.mysql.rds.aliyuncs.com'),
      consoleVersion?: string(name='ConsoleVersion', description='The type of the proxy that is used by the instance. Valid values:

*   **1**: shared proxy
*   **2**: dedicated proxy

> We recommend that you use the **ProxyType** parameter instead of this parameter.', example='2'),
      creationTime?: string(name='CreationTime', description='The creation time. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2011-05-30T12:11:04Z'),
      currentKernelVersion?: string(name='CurrentKernelVersion', description='The minor engine version of the instance.', example='rds_20181010'),
      DBClusterNodes?: {
        DBClusterNode?: [ 
        {
          classCode?: string(name='ClassCode', description='The specification of the node.', example='mysql.n2.medium.xc'),
          nodeId?: string(name='NodeId', description='The ID of the node.', example='rn-****'),
          nodeRegionId?: string(name='NodeRegionId', description='The ID of the region.', example='cn-beijing'),
          nodeRole?: string(name='NodeRole', description='The role of the node. Valid values:

*   **primary**: primary node
*   **secondary**: secondary node', example='primary'),
          nodeZoneId?: string(name='NodeZoneId', description='The zone ID of the instance.', example='cn-beijing-h'),
        }
      ](name='DBClusterNode')
      }(name='DBClusterNodes', description='The information about the node in the cluster.'),
      DBInstanceCPU?: string(name='DBInstanceCPU', description='The number of cores that are configured for the instance.', example='2'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='rds.mys2.small'),
      DBInstanceClassType?: string(name='DBInstanceClassType', description='The instance family to which the instance belongs. Valid values:

*   **s**: shared instance family
*   **x**: general-purpose instance family
*   **d**: dedicated instance family
*   **h**: dedicated host instance family', example='s'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='The number of cores that are configured for the instance.'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
      DBInstanceMemory?: long(name='DBInstanceMemory', description='The memory size of the instance. Unit: MB.', example='4096'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network over which the instance is connected. Valid values:

*   **Internet**: Internet
*   **Intranet**: internal network', example='Internet'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance states](~~26315~~).', example='Running'),
      DBInstanceStorage?: int32(name='DBInstanceStorage', description='The storage capacity of the instance. Unit: GB.', example='10'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the instance. Valid values:

*   **local_ssd** and **ephemeral_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD', example='local_ssd'),
      DBInstanceType?: string(name='DBInstanceType', description='The type of the instance. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance', example='Primary'),
      DBMaxQuantity?: int32(name='DBMaxQuantity', description='The maximum number of databases that can be created on the instance.', example='200'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9*****'),
      deletionProtection?: boolean(name='DeletionProtection', description='Indicates whether the release protection feature is enabled. Valid values:

*   **true**: The feature is enabled.
*   **false**: The feature is disabled.', example='true'),
      engine?: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **PostgreSQL**
*   **SQLServer**
*   **MariaDB**', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='5.5'),
      expireTime?: string(name='ExpireTime', description='The expiration time. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> Pay-as-you-go instances never expire.', example='2019-03-27T16:00:00Z'),
      extra?: {
        DBInstanceIds?: {
          DBInstanceId?: [ string ](name='DBInstanceId')
        }(name='DBInstanceIds', description='The details of the instance.'),
      }(name='Extra', description='The extended information of the instance.'),
      generalGroupName?: string(name='GeneralGroupName', description='The name of the dedicated cluster to which the instance belongs. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition.', example='TestGroup'),
      guardDBInstanceId?: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance that is attached to the instance.', example='rm-uf64zsu*****'),
      IPType?: string(name='IPType', description='The type of the IP address. Only **IPv4** addresses are supported.', example='IPv4'),
      incrementSourceDBInstanceId?: string(name='IncrementSourceDBInstanceId', description='The ID of the instance from which incremental data comes. The incremental data of a disaster recovery instance or read-only instance comes from its primary instance. If this parameter is not returned, the instance is a primary instance.', example='rm-uf6wjk5*****'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**: classic network
*   **VPC**: virtual private cloud (VPC)', example='Classic'),
      instructionSetArch?: string(name='InstructionSetArch', description='The architecture type of the instance. Valid values:

*   **x86**
*   **arm**', example='x86'),
      latestKernelVersion?: string(name='LatestKernelVersion', description='The latest minor engine version that is supported by the instance.', example='rds_20201031'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.
*   **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked due to exhausted storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the instance was locked.', example='instance_expired'),
      maintainTime?: string(name='MaintainTime', description='The maintenance window of the instance. The time is displayed in UTC. Take note that the maintenance window displayed in the ApsaraDB RDS console is equal to the value of this parameter plus 8 hours.', example='00:00Z-02:00Z'),
      masterInstanceId?: string(name='MasterInstanceId', description='The ID of the primary instance.

> If this parameter is not returned, the instance is the primary instance.', example='rm-uf6wjk5*****'),
      masterZone?: string(name='MasterZone', description='The zone ID of the primary instance.', example='5454284'),
      maxConnections?: int32(name='MaxConnections', description='The maximum number of concurrent connections.', example='60'),
      maxIOMBPS?: int32(name='MaxIOMBPS', description='The maximum I/O throughput. Unit: MB/s.', example='0MB/s'),
      maxIOPS?: int32(name='MaxIOPS', description='The maximum number of I/O requests that is processed by the instance per second.', example='150'),
      PGBouncerEnabled?: string(name='PGBouncerEnabled'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid'),
      port?: string(name='Port', description='The port that is used to connect to the instance over an internal network.', example='3306'),
      proxyType?: int32(name='ProxyType', description='The type of the proxy that is supported by the instance. Valid values:

*   **0**: The instance does not support database proxies.
*   **1**: The instance supports shared proxies, with which the instance runs in multi-tenant mode.
*   **2**: The instance supports dedicated proxies, with which the instance runs in single-tenant mode.', example='1'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rm-bp*****'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds', description='An array consisting of the IDs of the read-only instances that are attached to the primary instance.'),
      readonlyInstanceSQLDelayedTime?: string(name='ReadonlyInstanceSQLDelayedTime', description='The latency at which the system replicates data to read-only instances. The system replicates data from the primary instance to the read-only instances at the latency that is specified by the **ReadonlyInstanceSQLDelayedTime** parameter. Unit: seconds.', example='30'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses in the IP address whitelist.', example='192.168.XX.XX/24'),
      securityIPMode?: string(name='SecurityIPMode', description='The whitelist mode of the instance. Valid values:

*   **normal**: standard whitelist mode
*   **safety**: enhanced whitelist mode', example='normal'),
      serverlessConfig?: {
        autoPause?: boolean(name='AutoPause', description='Indicates whether the automatic start and stop feature is enabled for the serverless instance. Valid values:

*   **true**: The feature is enabled.
*   **false** (default): The feature is disabled.

> After the automatic start and stop feature is enabled, if no connections are established to the instance within 10 minutes, the instance is suspended. After a connection is established to the instance, the instance automatically resumes.', example='true'),
        scaleMax?: double(name='ScaleMax', description='The maximum number of RDS Capacity Units (RCUs).', example='8'),
        scaleMin?: double(name='ScaleMin', description='The minimum number of RDS Capacity Units (RCUs).', example='0.5'),
        switchForce?: boolean(name='SwitchForce', description='Indicates whether the forced scaling feature is enabled for the serverless instance.

*   **true**: The feature is enabled.
*   **false** (default): The feature is disabled.

> In most cases, the RCU scaling of a serverless instance immediately takes effect. In some cases, the RCU scaling does not immediately take effect. If this happens, you can enable the forced scaling feature to forcefully scale the RCUs of the serverless instance.', example='false'),
      }(name='ServerlessConfig', description='The settings of the serverless instance.'),
      slaveZones?: {
        slaveZone?: [ 
        {
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-a'),
        }
      ](name='SlaveZone')
      }(name='SlaveZones', description='An array that consists of the details about the secondary zones.'),
      superPermissionMode?: string(name='SuperPermissionMode', description='Indicates whether the instance supports superuser accounts, such as the system administrator (SA) account, the Active Directory (AD) account, and the host account.

*   **Enable**: Superuser accounts are supported.
*   **Disabled**: Superuser accounts are not supported.', example='Disabled'),
      tempDBInstanceId?: string(name='TempDBInstanceId', description='The ID of the temporary instance that is attached to the instance.', example='rm-uf64zsu*****'),
      timeZone?: string(name='TimeZone', description='The time zone of the instance.', example='Central Standard Time'),
      tips?: string(name='Tips', description='The information about the exception that is detected on the instance. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition.', example='The IP addresses in the IP address whitelist.'),
      tipsLevel?: int32(name='TipsLevel', description='The severity level of the exception that is detected on the instance. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition. Valid values:

*   **1**: The instance is normal.
*   **2**: The specifications of the read-only instances do not match the specifications of the primary instance, and the performance is affected. You must adjust the specifications of these instances based on your business requirements.', example='1'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-*****'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The VPC ID of the instance. This parameter is returned only when the instance resides in a VPC.', example='vpc-23rsxdf*****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-*****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-a'),
      kindCode?: string(name='kindCode', description='An internal parameter. You can ignore this parameter.', example='The architecture type of the instance. Valid values:

- **x86**
- **arm**'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items', description='An array that consists of the details about the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceByTagsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6w**********', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **30 to 100**. Default value: **30**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  proxyId?: string(name='proxyId', description='A deprecated parameter.', example='None', position='Query'),
}

model DescribeDBInstanceByTagsResponseBody = {
  items?: {
    DBInstanceTag?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6w**********'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='key1'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='value1'),
        }
      ](name='Tag')
      }(name='Tags', description='An array that consists of the queried tags.'),
    }
  ](name='DBInstanceTag')
  }(name='Items', description='An array that consists of the information about the instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='30'),
}

model DescribeDBInstanceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceByTagsResponseBody(name='body'),
}

async function describeDBInstanceByTags(request: DescribeDBInstanceByTagsRequest): DescribeDBInstanceByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceByTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceDetailRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

> You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCziJZNwH****', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceDetailResponseBody = {
  activationState?: string(name='ActivationState', description='Indicates whether the instance is in the active state.', example='Invalid'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp6wjk5xxxxxxxxxx'),
  licenseType?: string(name='LicenseType', description='The type of the license.', example='Normal'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06B220E2-EAC5-4DBE-A1FC-1B62DB6A****'),
}

model DescribeDBInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceDetailResponseBody(name='body'),
}

/**
  * This operation is phased out.
  *
 */
async function describeDBInstanceDetail(request: DescribeDBInstanceDetailRequest): DescribeDBInstanceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceEncryptionKeyRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the custom key.', example='749c1df7-xxxx-xxxx-xxxx-xxxxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  targetRegionId?: string(name='TargetRegionId', description='The ID of the destination region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-qingdao', position='Query'),
}

model DescribeDBInstanceEncryptionKeyResponseBody = {
  creator?: string(name='Creator', description='The user who created the key.', example='1443*****9604'),
  deleteDate?: string(name='DeleteDate', description='The scheduled time at which the key is deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-08T08:14:16Z'),
  description?: string(name='Description', description='The description of the key.', example='Description of the key'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the key.', example='5306d1b6-7fd3-42d9-9511-xxxxxxx'),
  encryptionKeyList?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the key.', example='alias/xxx'),
      creator?: string(name='Creator', description='The user who created the key.', example='1443*****9604'),
      deleteDate?: string(name='DeleteDate', description='The scheduled time at which the key is deleted. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-08T08:14:16Z'),
      description?: string(name='Description', description='The description of the key.', example='Description of the key'),
      encryptionKey?: string(name='EncryptionKey', description='The ID of the key.', example='5306d1b6-7fd3-42d9-9511-xxxxxxx'),
      encryptionKeyStatus?: string(name='EncryptionKeyStatus', description='The status of the key. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled'),
      keyType?: string(name='KeyType', description='The type of the key. Valid values:

*   **CMK**
*   **ServiceKey**', example='ServiceKey'),
      keyUsage?: string(name='KeyUsage', description='The purpose of the key.', example='ENCRYPT/DECRYPT'),
      materialExpireTime?: string(name='MaterialExpireTime', description='The time at which the key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-10-18T08:14:16Z'),
      origin?: string(name='Origin', description='The source of the key.', example='Aliyun_KMS'),
      usedBy?: string(name='UsedBy', description='The role of the instance. Valid values:

*   **Master**: primary instance
*   **slave**: read-only instance', example='Master'),
    }
  ](name='EncryptionKeyList', description='The details about the key.'),
  encryptionKeyStatus?: string(name='EncryptionKeyStatus', description='The status of the key. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled'),
  keyUsage?: string(name='KeyUsage', description='The purpose of the key.', example='ENCRYPT/DECRYPT'),
  materialExpireTime?: string(name='MaterialExpireTime', description='The time at which the key expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-10-18T08:14:16Z'),
  origin?: string(name='Origin', description='The source of the key.', example='Aliyun_KMS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BC2768E-DEDA-40FC-BBE9-6B884F3626AF'),
}

model DescribeDBInstanceEncryptionKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceEncryptionKeyResponseBody(name='body'),
}

async function describeDBInstanceEncryptionKey(request: DescribeDBInstanceEncryptionKeyRequest): DescribeDBInstanceEncryptionKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceEncryptionKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceEndpointsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOC****', position='Query'),
  DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.

If this parameter is not specified, the information about all endpoints is returned.', example='ep-****-ro', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-u****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceEndpointsResponseBody = {
  data?: {
    DBInstanceEndpoints?: {
      DBInstanceEndpoint?: [ 
      {
        addressItems?: {
          addressItem?: [ 
          {
            connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='rm****.mysql.rds.aliyuncs.com'),
            ipAddress?: string(name='IpAddress', description='The IP address of the endpoint.', example='10.71.XX.XX'),
            ipType?: string(name='IpType', description='The type of the IP address. Valid values:

*   **Public**: Internet
*   **Private**: internal network', example='Private'),
            port?: string(name='Port', description='The port number of the endpoint.', example='3306'),
            vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp12u14ecz****'),
            vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp17xdic25d****'),
          }
        ](name='AddressItem')
        }(name='AddressItems', description='An array that consists of the details of the endpoint.'),
        endpointDescription?: string(name='EndpointDescription', description='The user-defined description of the endpoint.', example='for readonly business'),
        endpointId?: string(name='EndpointId', description='The endpoint ID of the instance.', example='ep-****'),
        endpointType?: string(name='EndpointType', description='The type of the endpoint. Valid values:

*   **Primary**: read/write endpoint of the instance
*   **Readonly**: read-only endpoint of the instance', example='Readonly'),
        nodeItems?: {
          nodeItem?: [ 
          {
            DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-u****'),
            nodeId?: string(name='NodeId', description='The ID of the node.', example='rn-****13p6tum4289h'),
            weight?: int32(name='Weight', description='The weight of the node. Read requests are distributed based on the weight.

Valid values: 0 to 100.', example='50'),
          }
        ](name='NodeItem')
        }(name='NodeItems', description='An array consisting of the details of the node that is configured for the endpoint.'),
      }
    ](name='DBInstanceEndpoint')
    }(name='DBInstanceEndpoints', description='An array that consists of details of the endpoint.'),
    DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='rm-u****'),
    ipVersion?: string(name='IpVersion', description='The version of the IP protocol. Valid values:

*   **ipv4**
*   **ipv6**', example='ipv4'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='777C4593-8053-427B-****105593277CAB'),
}

model DescribeDBInstanceEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceEndpointsResponseBody(name='body'),
}

/**
  * ## Background information
  * *   An ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition is created. The instance is referred to as a cluster.
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  *
 */
async function describeDBInstanceEndpoints(request: DescribeDBInstanceEndpointsRequest): DescribeDBInstanceEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceHAConfigRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceHAConfigResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='rm-uf6wjk5xxxxxx'),
  HAMode?: string(name='HAMode', example='RPO'),
  hostInstanceInfos?: {
    nodeInfo?: [ 
    {
      dataSyncTime?: string(name='DataSyncTime', example='2018-05-05T15:15:00Z'),
      logSyncTime?: string(name='LogSyncTime', example='2018-05-05T15:15:00Z'),
      nodeId?: string(name='NodeId', example='3397027'),
      nodeType?: string(name='NodeType', example='Master'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      syncStatus?: string(name='SyncStatus', example='NotAvailable'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='NodeInfo')
  }(name='HostInstanceInfos'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  syncMode?: string(name='SyncMode', example='Sync'),
}

model DescribeDBInstanceHAConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceHAConfigResponseBody(name='body'),
}

async function describeDBInstanceHAConfig(request: DescribeDBInstanceHAConfigRequest): DescribeDBInstanceHAConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceHAConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceIPArrayListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  whitelistNetworkType?: string(name='WhitelistNetworkType', description='The network type of the IP address whitelist. Valid values:

*   **Classic**: classic network in enhanced whitelist mode
*   **VPC**: virtual private cloud (VPC) in enhanced whitelist mode
*   **MIX**: standard whitelist mode

By default, this operation returns IP address whitelists of all network types.', example='VPC', position='Query'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty.

> The IP address whitelists that have the hidden attribute are not displayed in the ApsaraDB RDS console. These IP address whitelists are used to access Alibaba Cloud services, such as Data Transmission Service (DTS).', example='hidden'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the IP address whitelist.', example='rds_default'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses in the IP address whitelist.', example='192.168.1.0/24'),
      securityIPType?: string(name='SecurityIPType', description='The type of the IP address.', example='IPv4'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items', description='An array that consists of the details of the IP address whitelists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2B6AF71-DC32-4055-B477-43B348798D10'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceIPArrayList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceIpHostnameRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDBInstanceIpHostnameResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  ipHostnameInfos?: string(name='IpHostnameInfos', description='The internal IP addresses and hostnames of the ECS instances where the primary and secondary instances reside. Format: IP address 1,Hostname 1;IP address 2,Hostname 2.', example='172.16.xx.xx,sdxxxxxxxxB;172.16.xx.xx,sdxxxxxxxxA'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='67CD4719-51E3-4A76-A38C-02F45FAE7E36'),
}

model DescribeDBInstanceIpHostnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIpHostnameResponseBody(name='body'),
}

/**
  * ApsaraDB RDS instances are deployed based on ECS instances. This operation is used to query the hostname of the ECS instance where an ApsaraDB RDS instance resides. The hostname is required when you [configure a distributed transaction whitelist](~~124321~~).
  * This operation is applicable to instances that run one of the following SQL Server versions on RDS High-availability Edition: SQL Server 2012 SE, SQL Server 2012 EE, SQL Server 2014 SE, SQL Server 2016 SE, SQL Server 2016 EE, and SQL Server 2017 SE.
  *
 */
async function describeDBInstanceIpHostname(request: DescribeDBInstanceIpHostnameRequest): DescribeDBInstanceIpHostnameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceIpHostname', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceMetricsRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='pgm-bp1s1j103lo6****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceMetricsResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-bp1*****'),
  items?: [ 
    {
      description?: string(name='Description', description='The description of the enhanced monitoring metric.', example='OS CPU utilization, equal to the number of OS-consumed CPUs divided by the total number of CPUs'),
      dimension?: string(name='Dimension', description='The category of the enhanced monitoring metric. Valid values:

*   **os**: OS metric
*   **db**: database metric', example='os'),
      groupKey?: string(name='GroupKey', description='The key of the group to which the enhanced monitoring metric belongs.', example='os.cpu_usage'),
      groupKeyType?: string(name='GroupKeyType', description='The name of the group to which the enhanced monitoring metric belongs.', example='CPU Utilization Rate'),
      method?: string(name='Method', description='The method that is used to aggregate the monitoring data of the enhanced monitoring metric. Valid values:

*   **avg**: The system calculates the average value of the enhanced monitoring metric.
*   **min**: The system calculates the minimum value of the enhanced monitoring metric.
*   **max**: The system calculates the maximum value of the enhanced monitoring metric.', example='avg'),
      metricsKey?: string(name='MetricsKey', description='The key of the enhanced monitoring metric.', example='os.cpu_usage.sys.avg'),
      metricsKeyAlias?: string(name='MetricsKeyAlias', description='The alias of the enhanced monitoring metric.', example='os.cpu_usage.sys'),
      sortRule?: int32(name='SortRule', description='The serial number of the enhanced monitoring metric.', example='1'),
      unit?: string(name='Unit', description='The unit of the enhanced monitoring metric.', example='%'),
    }
  ](name='Items', description='An array consisting of the enhanced monitoring metrics that are enabled for the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='318C3754-F6D0-54BB-A55C-23EAA04708B7'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of enhanced monitoring metrics that are enabled for the instance.', example='1'),
}

model DescribeDBInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceMetricsResponseBody(name='body'),
}

/**
  * ### Prerequisites
  * The instance runs PostgreSQL.
  * For more information, see [View the Enhanced Monitoring metrics of an ApsaraDB RDS for PostgreSQL instance](~~299200~~).
  *
 */
async function describeDBInstanceMetrics(request: DescribeDBInstanceMetricsRequest): DescribeDBInstanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceMetrics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceMonitorResponseBody = {
  period?: string(name='Period', description='The monitoring frequency. Unit: seconds.', example='60'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30829FD4-1A84-4C2A-A625-2EADECB95CA3'),
}

model DescribeDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceMonitorResponseBody(name='body'),
}

/**
  * >  This operation is not supported for RDS instances that run PostgreSQL. The monitoring frequency of such an instance varies based on the query time range. For more information, see [Query performance metrics](~~26280~~).
  *
 */
async function describeDBInstanceMonitor(request: DescribeDBInstanceMonitorRequest): DescribeDBInstanceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceNetInfoRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOC*****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  DBInstanceNetRWSplitType?: string(name='DBInstanceNetRWSplitType', description='The type of the endpoint. Valid values:

*   **Normal**: regular endpoint
*   **ReadWriteSplitting**: read/write splitting endpoint

> By default, the system returns both types of endpoints.', example='Normal', position='Query'),
  flag?: int32(name='Flag', description='A reserved parameter.', example='None', position='Query'),
  generalGroupName?: string(name='GeneralGroupName', description='The name of the dedicated cluster to which the instance belongs. This parameter takes effect only when the instance runs MySQL on RDS Standard Edition and is created in a dedicated cluster.', example='rgc-2ze*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      babelfishPort?: string(name='BabelfishPort', description='The Tabular Data Stream (TDS) port of the instance for which Babelfish is enabled.

> This parameter applies only to ApsaraDB RDS for PostgreSQL instances. For more information about Babelfish for ApsaraDB RDS for PostgreSQL, see [Introduction to Babelfish](~~428613~~).', example='1433'),
      connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='rm-uf6w*****.mysql.rds.aliyuncs.com'),
      connectionStringType?: string(name='ConnectionStringType', description='The type of the endpoint. Valid values:

*   **Normal**: regular endpoint
*   **ReadWriteSplitting**: read/write splitting endpoint', example='Normal'),
      DBInstanceWeights?: {
        DBInstanceWeight?: [ 
        {
          availability?: string(name='Availability', description='The availability of the instance. Valid values:

*   **Unavailable**
*   **Available**', example='Unavailable'),
          DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
          DBInstanceType?: string(name='DBInstanceType', description='The database engine of the instance. Valid values:

*   **Master**: primary instance
*   **Readonly**: read-only instance', example='Master'),
          role?: string(name='Role', description='A deprecated parameter.', example='None'),
          weight?: string(name='Weight', description='The weight of the instance.', example='100'),
        }
      ](name='DBInstanceWeight')
      }(name='DBInstanceWeights', description='Details of the weight. This parameter is returned only when the read/write splitting feature is enabled for the instance.'),
      distributionType?: string(name='DistributionType', description='The policy that is used to assign read weights. This parameter is returned only for a read/write splitting endpoint. Valid values:

*   **Standard**: The system automatically assigns read weights to the instance and its read-only instances based on the specifications of these instances.
*   **Custom**: You must manually allocate read weights to the instance and its read-only instances.', example='Standard'),
      expiredTime?: string(name='ExpiredTime', description='The remaining validity period of the instance of the classic network in hybrid access mode. Unit: seconds.', example='1209534'),
      IPAddress?: string(name='IPAddress', description='The IP address of the endpoint.', example='192.168.XX.XX'),
      IPType?: string(name='IPType', description='The type of the network.

*   Valid values when the instance resides in the classic network:
*   **Inner:**: internal network
*   **Public**: Internet
*   Valid values when the instance resides in a VPC:
*   **Private**: internal network
*   **Public**: Internet', example='Public'),
      maxDelayTime?: string(name='MaxDelayTime', description='The latency threshold. This parameter is returned only for a read/write splitting endpoint. Unit: seconds.

> If the latency on a read-only instance exceeds the specified threshold, the system no longer forwards read requests to the read-only instance.', example='12'),
      PGBouncerPort?: string(name='PGBouncerPort'),
      port?: string(name='Port', description='The port that is used to connect to the instance.', example='3306'),
      securityIPGroups?: {
        securityIPGroup?: [ 
        {
          securityIPGroupName?: string(name='SecurityIPGroupName', description='The name of the IP address whitelist.', example='Default'),
          securityIPs?: string(name='SecurityIPs', description='The IP addresses contained in the IP address whitelist.', example='127.0.XX.XX'),
        }
      ](name='securityIPGroup')
      }(name='SecurityIPGroups', description='An array that consists of the details about the IP address whitelists.'),
      upgradeable?: string(name='Upgradeable', description='Indicates whether the IP version can be updated. Valid values:

*   **Enable**: The IP version can be updated.
*   **Disabled**: The IP version cannot be updated.

> The IP version can be updated from IPv4 to IPv6.', example='Disabled'),
      VPCId?: string(name='VPCId', description='The ID of the VPC.', example='vpc-uf6f7l4fg90*****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6adz52c2p*****'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos', description='Details of the endpoints of the instance.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**: classic network
*   **VPC**: virtual private cloud (VPC)', example='VPC'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='777C4593-8053-427B-99E2-105593277CAB'),
  securityIPMode?: string(name='SecurityIPMode', description='The whitelist mode of the instance. Valid values:

*   **normal**: standard whitelist mode
*   **safety**: enhanced whitelist mode', example='safety'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceNetInfoForChannelRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88**********', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the instance ID.', example='rm-bp1k8s41l2o52****', position='Query'),
  DBInstanceNetRWSplitType?: string(name='DBInstanceNetRWSplitType', description='The type of the endpoint to query. Valid values:

*   **0**: a regular endpoint. This is the default value.
*   **1**: a read/write splitting endpoint that is assigned after the shared proxy feature is enabled.', example='0', position='Query'),
  flag?: string(name='Flag', description='An internal parameter. You do not need to specify this parameter.', example='None', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceNetInfoForChannelResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      availability?: string(name='Availability', description='The availability of the instance. Valid values:

*   **Unavailable**
*   **Available**', example='Unavailable'),
      connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='rm-uf6w*****.mysql.rds.aliyuncs.com'),
      connectionStringType?: string(name='ConnectionStringType', description='The type of the endpoint. Valid values:

*   **Normal**: a regular endpoint
*   **ReadWriteSplitting**: a read/write splitting endpoint that is assigned after the shared proxy feature is enabled.', example='Normal'),
      DBInstanceWeights?: {
        DBInstanceWeight?: [ 
        {
          availability?: string(name='Availability', description='The availability of the instance. Valid values:

*   **Unavailable**
*   **Available**', example='Unavailable'),
          DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
          DBInstanceType?: string(name='DBInstanceType', description='The type of the instance. Valid values:

*   **Master**: primary instance
*   **Readonly**: read-only instance', example='Master'),
          weight?: string(name='Weight', description='The weight of the instance.', example='100'),
        }
      ](name='DBInstanceWeight')
      }(name='DBInstanceWeights', description='An array that consists of the information about read weights to implement read/write splitting after the shared proxy feature is enabled.'),
      distributionType?: string(name='DistributionType', description='The policy that is used to assign read weights. This parameter is returned only for a read/write splitting endpoint that is assigned after the shared proxy feature is enabled. Valid values:

*   **Standard**: The system automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
*   **Custom**: You must manually assign read weights to the instance and its read-only instances.', example='Standard'),
      IPAddress?: string(name='IPAddress', description='The IP address.', example='172.16.XX.XX'),
      IPType?: string(name='IPType', description='The network type of the IP address. Valid values:

*   **Public**: the Internet
*   **Inner**: the classic network
*   **Private**: a VPC', example='Inner'),
      maxDelayTime?: string(name='MaxDelayTime', description='The latency threshold that is allowed for read/write splitting of the shared proxy feature. Unit: seconds

> This parameter is returned only when the **ConnectionStringType** parameter is set to **ReadWriteSplitting**.', example='12'),
      port?: string(name='Port', description='The service port number.', example='6379'),
      securityIPGroups?: {
        securityIPGroup?: [ 
        {
          securityIPGroupName?: string(name='SecurityIPGroupName', description='The name of the IP address whitelist.', example='Default'),
          securityIPs?: string(name='SecurityIPs', description='The IP addresses contained in the IP address whitelist.', example='127.0.XX.XX'),
        }
      ](name='securityIPGroup')
      }(name='SecurityIPGroups', description='An array that consists of the details about the IP address whitelist.'),
      upgradeable?: string(name='Upgradeable', description='An internal parameter. This operation does not return a value for this parameter.', example='Disabled'),
      VPCId?: string(name='VPCId', description='The ID of the VPC in which the instance is deployed.', example='vpc-bp1nme44gek34slfc****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance belongs.', example='vsw-bp1e7clcw529l773d****'),
      expiredTime?: string(name='expiredTime', description='The expiration time of the endpoint of the classic network type. Unit: seconds.', example='5183779'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos', description='The network information about the instance.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**: a virtual private cloud (VPC)
*   **Classic**: classic network', example='VPC'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61DF1F28-F409-50C0-B90A-CCE82D44****'),
}

model DescribeDBInstanceNetInfoForChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoForChannelResponseBody(name='body'),
}

async function describeDBInstanceNetInfoForChannel(request: DescribeDBInstanceNetInfoForChannelRequest): DescribeDBInstanceNetInfoForChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceNetInfoForChannel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancePerformanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  The time span between the beginning time and the end time must be longer than the monitoring frequency. Otherwise, this operation may return an empty array.', example='2012-06-18T15:00Z', position='Query'),
  key: string(name='Key', description='The performance metric that you want to query. If you enter more than one performance metric, separate them with commas (,). You can enter up to 30 performance metrics. For more information, see [Performance parameters](~~26316~~).

>  If you set the **Key** parameter to **MySQL_SpaceUsage** or **SQLServer_SpaceUsage**, you can query the performance metric only over one day.', example='MySQL_Sessions', position='Query'),
  nodeId?: string(name='NodeId', description='The unique ID of the instance.', example='339****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

>  The time span between the beginning time and the end time must be longer than the monitoring frequency. Otherwise, this operation may return an empty array.', example='2012-06-08T15:00Z', position='Query'),
}

model DescribeDBInstancePerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
  endTime?: string(name='EndTime', description='The end of the time range that is queried. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2012-06-19T15:00Z'),
  engine?: string(name='Engine', description='The database engine of the instance.', example='MySQL'),
  performanceKeys?: {
    performanceKey?: [ 
    {
      key?: string(name='Key', description='The name of the performance metric.', example='MySQL_Sessions'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='KB'),
      valueFormat?: string(name='ValueFormat', description='The format in which the value of the performance metric is returned. Multiple values of the performance metric are separated by the \\&amp; string. Example: com_delete\\&amp;com_insert\\&amp;com_insert_select\\&amp;com_replace.', example='recv_k&sent_k'),
      values?: {
        performanceValue?: [ 
        {
          date?: string(name='Date', description='The date and time when the value of the performance metric was recorded. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2011-05-30T03:29:00Z'),
          value?: string(name='Value', description='The value of the performance metric.', example='0.0&13.6'),
        }
      ](name='PerformanceValue')
      }(name='Values', description='An array that consists of the values of the performance metric in the following format: {value1, value2, ...}.'),
    }
  ](name='PerformanceKey')
  }(name='PerformanceKeys', description='An array that consists of performance metrics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5409D02-D661-4BF3-8F3D-0A814D0574E7'),
  startTime?: string(name='StartTime', description='The beginning of the time range that is queried. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2012-06-10T15:00Z'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

/**
  * You can query the performance of an instance over a specific time range based on its performance metrics. Performance metrics are generated by using one of the following methods based on the database engine and version, RDS edition, [monitoring frequency](~~26200~~) ([ModifyDBInstanceMonitor](~~26282~~)), and query time range:
  * *   For instances that do not run MySQL on RDS High-availability Edition with standard SSDs or enhanced SSDs (ESSDs) and those that do not run MariaDB:
  *     *   5-second monitoring frequency
  *         *   If the query time range is greater than seven days, performance metrics are collected at 1-day intervals.
  *         *   If the query time range is greater than one day but less than or equal to seven days, performance metrics are collected at 1-hour intervals.
  *         *   If the query time range is greater than or equal to an hour but less than or equal to one day, performance metrics are collected at 1-minute intervals.
  *         *   If the query time range is less than an hour, performance metrics are collected at 5-second intervals.
  *     *   60-second monitoring frequency
  *         *   If the query time range is greater than 30 days, performance metrics are collected at 1-day intervals.
  *         *   If the query time range is greater than seven days but less than or equal to 30 days, performance metrics are collected at 1-hour intervals.
  *         *   If the query time range is less than or equal to seven days, performance metrics are collected at 1-minute intervals.
  *     *   300-second monitoring frequency
  *         *   If the query time range is greater than 30 days, performance metrics are collected at 1-day intervals.
  *         *   If the query time range is greater than seven days but less than or equal to 30 days, performance metrics are collected at 1-hour intervals.
  *         *   If the query time range is less than or equal to seven days, performance metrics are collected at 5-minute intervals.
  * *   For instances that are running MySQL on RDS High-availability Edition with standard SSDs or ESSDs and those that are running MariaDB:
  *     *   If the query time range is greater than 30 days, performance metrics are collected at 1-day intervals.
  *     *   If the query time range is greater than seven days but less than or equal to 30 days, performance metrics are collected at 1-hour intervals.
  *     *   If the query time range is less than or equal to seven days, performance metrics are collected at 1-minute intervals.
  * *   For instances that run PostgreSQL with local SSDs, standard SSDs, or ESSDs:
  *     *   If the query time range is less than or equal to an hour, performance metrics are collected at 5-second intervals.
  *     *   If the query time range is less than or equal to 2 hours, performance metrics are collected at 10-second intervals.
  *     *   If the query time range is less than or equal to 6 hours, performance metrics are collected at 30-second intervals.
  *     *   If the query time range is less than or equal to 12 hours, performance metrics are collected at 1-minute intervals.
  *     *   If the query time range is less than or equal to one day, performance metrics are collected at 2-minute intervals.
  *     *   If the query time range is less than or equal to five days, performance metrics are collected at 10-minute intervals.
  *     *   If the query time range is less than or equal to 15 days, performance metrics are collected at 30-minute intervals.
  *     *   If the query time range is less than or equal to 30 days, performance metrics are collected at 1-hour intervals.
  *
 */
async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancePromoteActivityRequest {
  aliUid: string(name='AliUid', position='Query'),
  dbInstanceName: string(name='DbInstanceName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstancePromoteActivityResponseBody = {
  aliUid?: string(name='AliUid'),
  bid?: string(name='Bid'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceName?: string(name='DBInstanceName'),
  DBType?: string(name='DBType'),
  isActivity?: string(name='IsActivity'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstancePromoteActivityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePromoteActivityResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeDBInstancePromoteActivity(request: DescribeDBInstancePromoteActivityRequest): DescribeDBInstancePromoteActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancePromoteActivity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceProxyConfigurationRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceProxyConfigurationResponseBody = {
  attacksProtectionConfiguration?: string(name='AttacksProtectionConfiguration', description='Indicates whether the mechanism that is used to mitigate brute-force attacks is enabled:

*   **Enable**
*   **Disable**

The return value is a JSON string. Examples:

{"status":"Disable", "check_interval_seconds": 60,

"max_failed_login_attempts": 60, "blocking_seconds": 600}

Description:

*   Each client allows {max_failed_login_attempts} logon attempts that fail due to incorrect passwords within {check_interval_seconds} seconds. If one more such attempt is conducted, the client must wait for {blocking_seconds} seconds before you can try again.

*   Valid values:

    *   check_interval_seconds: **30 to 600**. Unit: seconds.
    *   max_failed_login_attempts: **10 to 5000**. Unit: times.
    *   blocking_seconds: **30 to 3600**. Unit: seconds.', example='{\\"check_interval_seconds\\":\\"0\\",\\"max_failed_login_attempts\\":\\"0\\",\\"blocking_seconds\\":\\"0\\",\\"status\\":\\"Disable\\"}'),
  persistentConnectionsConfiguration?: string(name='PersistentConnectionsConfiguration', description='Indicates whether the short-lived connection optimization feature is enabled.

*   **Enable**
*   **Disable**

The return value is a JSON string. Example:

{"status":"Disable"}.', example='{\\"status\\":\\"Disable\\"}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9DD55F4-1A5F-48CA-BA57-DFB3CA8C4C34'),
  transparentSwitchConfiguration?: string(name='TransparentSwitchConfiguration', description='Indicates whether the transparent switchover feature is enabled.

*   **Enable**
*   **Disable**

The return value is a JSON string. Example:

{"status":"Enable"}.', example='{\\"status\\":\\"Enable\\"}'),
}

model DescribeDBInstanceProxyConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceProxyConfigurationResponseBody(name='body'),
}

/**
  * This operation is used to query the original settings of shared proxies rather than the latest settings of dedicated proxies. For more information about how to query the settings of dedicated proxies, see [DescribeDBProxy](~~141055~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The shared proxy feature must be enabled for the primary instance.
  * *   The read/write splitting feature must be enabled for the primary instance.
  *
 */
async function describeDBInstanceProxyConfiguration(request: DescribeDBInstanceProxyConfigurationRequest): DescribeDBInstanceProxyConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceProxyConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp162dfr55g47****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceSSLResponseBody = {
  ACL?: string(name='ACL', description='The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with cloud disks. Valid values:

*   **cert**
*   **perfer**
*   **verify-ca**
*   **verify-full** (supported only when the instance runs PostgreSQL 12 or later)', example='cert'),
  CAType?: string(name='CAType', description='The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. Valid values:

*   **aliyun**: a cloud certificate
*   **custom**: a custom certificate', example='aliyun'),
  clientCACert?: string(name='ClientCACert', description='The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-----BEGIN CERTIFICATE-----MIID*****viXk=-----END CERTIFICATE-----'),
  clientCACertExpireTime?: string(name='ClientCACertExpireTime', description='The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. This parameter is not supported now.', example='-'),
  clientCertRevocationList?: string(name='ClientCertRevocationList', description='The certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-----BEGIN X509 CRL-----MIIB****19mg==-----END X509 CRL-----'),
  connectionString?: string(name='ConnectionString', description='The endpoint that is protected by SSL encryption.', example='rm-bp162dfr55g47****.mysql.rds.aliyuncs.com'),
  lastModifyStatus?: string(name='LastModifyStatus', description='The status of the SSL link. This parameter is supported only when the instance runs PostgreSQL with cloud disks. Valid values:

*   **success**
*   **setting**
*   **failed**', example='setting'),
  modifyStatusReason?: string(name='ModifyStatusReason', description='The reason why the SSL link stays in the current state. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='Modify DB Instance SSL Config.'),
  replicationACL?: string(name='ReplicationACL', description='The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with cloud disks. Valid values:

*   **cert**
*   **perfer**
*   **verify-ca**
*   **verify-full** (supported only when the instance runs PostgreSQL 12 or later)', example='cert'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7705151C-E242-55AF-9929-2A3C39D979D2'),
  requireUpdate?: string(name='RequireUpdate', description='Indicates whether the server certificate needs to be updated.

*   Valid values for ApsaraDB RDS for MySQL instances and ApsaraDB RDS for SQL Server instances:

    *   **No**
    *   **Yes**

*   Valid values for ApsaraDB RDS for PostgreSQL instances:

    *   **0**: no
    *   **1**: yes', example='Yes'),
  requireUpdateItem?: string(name='RequireUpdateItem', description='The server certificate that needs to be updated. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-'),
  requireUpdateReason?: string(name='RequireUpdateReason', description='The reason why the server certificate needs to be updated. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-'),
  SSLCreateTime?: string(name='SSLCreateTime', description='The time when the server certificate was created. This parameter is supported only when the instance runs PostgreSQL with cloud disks. In addition, this parameter is valid only when CAType is set to aliyun.', example='-'),
  SSLEnabled?: string(name='SSLEnabled', description='Indicates whether SSL encryption is enabled.

*   Valid values for ApsaraDB RDS for MySQL instances and ApsaraDB RDS for SQL Server instances:

    *   **Yes**
    *   **No**

*   Valid values for ApsaraDB RDS for PostgreSQL instances:

    *   **on**: enabled
    *   **off**: disabled', example='Yes'),
  SSLExpireTime?: string(name='SSLExpireTime', description='The time when the server certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-11T08:16:43Z'),
  serverCAUrl?: string(name='ServerCAUrl', description='The URL of the certificate that is used to issue the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-'),
  serverCert?: string(name='ServerCert', description='The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-----BEGIN CERTIFICATE-----MIID*****QqEP-----END CERTIFICATE-----'),
  serverKey?: string(name='ServerKey', description='The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks.', example='-----BEGIN PRIVATE KEY-----MIIE****ihfg==-----END PRIVATE KEY-----'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that your instance is one of the following instances:
  * *   ApsaraDB RDS for MySQL instances that do not run RDS Basic Edition
  * *   ApsaraDB RDS for SQL Server instances
  * *   ApsaraDB RDS for PostgreSQL instances that use cloud disks
  *
 */
async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceTDERequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceTDEResponseBody = {
  databases?: {
    database?: [ 
    {
      DBName?: string(name='DBName', description='The name of the database.', example='test02'),
      TDEStatus?: string(name='TDEStatus', description='The TDE status at the database level. Valid values: **Enabled and Disabled**.', example='Enabled'),
    }
  ](name='Database')
  }(name='Databases', description='The details of the TDE status at the database level.

> For the instances that run SQL Server 2019 SE or SQL Server EE, you can specify whether to enable TDE at the database level when you enable TDE at the instance level.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C816A4BF-A6EC-4722-95F9-2055859CCFD2'),
  TDEStatus?: string(name='TDEStatus', description='The TDE status at the instance level. Valid values: **Enabled and Disabled**.', example='Enabled'),
}

model DescribeDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTDEResponseBody(name='body'),
}

/**
  * This operation is used to view the [Transparent Data Encryption (TDE)](~~96121~~) configuration of an instance.
  * The TDE feature is enabled for the instance by calling the [ModifyDBInstanceTDE](~~26256~~) operation.
  *
 */
async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  category?: string(name='Category', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode

By default, this operation queries the instances that use any of the supported connection modes.', example='Standard', position='Query'),
  connectionString?: string(name='ConnectionString', description='The endpoint of the instance. You must specify this parameter only when you want to query a single instance.', example='rm-uf6wjk5xxxxxxx.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='rds.mys2.small', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance states](~~26315~~).', example='Running', position='Query'),
  DBInstanceType?: string(name='DBInstanceType', description='The role of the instance. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance

By default, this operation returns the instances that assume any of the supported roles.', example='Primary', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The host ID of the instance in the dedicated cluster.', example='i-bpxxxxxxx', position='Query'),
  engine?: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **MariaDB**

By default, this operation returns the instances that run any of the supported database engines.', example='MySQL', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.7', position='Query'),
  expired?: string(name='Expired', description='Specifies whether to query instances that have expired. Valid values:

*   **True**: queries instances that have expired.
*   **False**: does not query instances that have expired.', example='True', position='Query'),
  filter?: string(name='Filter', description='实例过滤条件参数及其值的JSON串', example='{"babelfishEnabled":"true"}', position='Query'),
  instanceLevel?: int32(name='InstanceLevel', description='Specifies whether to return the RDS edition of the instance by using the Category parameter. Valid values:

*   **0**: returns the RDS edition of the instance.
*   **1**: does not return the RDS edition of the instance.', example='0', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**
*   **Classic**

By default, this operation returns the instances that reside in any of the supported network types.', example='Classic', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return per page. Valid values: **1 to 100**.

Default value: **30**.

> If you specify this parameter, **PageSize** and **PageNumber** are unavailable.', example='30', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to display the next page. You must set this parameter to the value that is returned from the most recent call of the **DescribeDBInstances** operation for **NextToken**. If the returned entries are displayed on multiple pages, the next page can be displayed when you call this operation again with this parameter specified.', example='o7PORW5o2TJg**********', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=0, maximum=21474836, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **100**.

Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used for fuzzy search. The keyword can be part of an instance ID or an instance description.', example='rm-uf6w', position='Query'),
  tags?: string(name='Tags', description='The tag that is added to the instance. Each tag is a key-value pair that consists of two fields: TagKey and TagValue. You can specify a maximum of five tags in the following format for each request: {"key1":"value1","key2":"value2"...}.', example='{"key1":"value1"}', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.', example='vsw-uf6adz52c2pxxxxxxxxxx', position='Query'),
  vpcId?: string(name='VpcId', description='The VPC ID of the instance.', example='vpc-uf6f7l4fg90xxxxxxxxxx', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-a', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy mode.', example='API', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      bpeEnabled?: string(name='BpeEnabled'),
      burstingEnabled?: boolean(name='BurstingEnabled'),
      category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **Finance**: RDS Enterprise Edition

> This parameter is returned only when **InstanceLevel** is set to **1**.', example='Basic'),
      connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode', example='Standard'),
      connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='rm-uf6wjk5xxxxxxx.mysql.rds.aliyuncs.com'),
      createTime?: string(name='CreateTime', description='The creation time of the instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-11-05T11:26:02Z'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='rds.mys2.small'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='Test database'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network connection to the instance. Valid values:

*   **Internet**
*   **Intranet**', example='Internet'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance states](~~26315~~).', example='Running'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the instance.', example='ModuleList.4.ModuleCode'),
      DBInstanceType?: string(name='DBInstanceType', description='The role of the instance. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance', example='Primary'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx'),
      dedicatedHostGroupName?: string(name='DedicatedHostGroupName', description='The name of the dedicated cluster to which the instance belongs.', example='testhostgroup'),
      dedicatedHostIdForLog?: string(name='DedicatedHostIdForLog', description='The ID of the host on which the logger instance resides.', example='dh-bpxxxx'),
      dedicatedHostIdForMaster?: string(name='DedicatedHostIdForMaster', description='The ID of the host on which the primary instance resides.', example='dh-bpxxxx'),
      dedicatedHostIdForSlave?: string(name='DedicatedHostIdForSlave', description='The ID of the host on which the secondary instance resides.', example='dh-bpxxxx'),
      dedicatedHostNameForLog?: string(name='DedicatedHostNameForLog', description='The name of the host on which the logger instance resides.', example='testlog'),
      dedicatedHostNameForMaster?: string(name='DedicatedHostNameForMaster', description='The name of the host on which the primary instance resides.', example='testmaster'),
      dedicatedHostNameForSlave?: string(name='DedicatedHostNameForSlave', description='The name of the host on which the secondary instance resides.', example='testslave'),
      dedicatedHostZoneIdForLog?: string(name='DedicatedHostZoneIdForLog', description='The zone ID of the host on which the logger instance resides.', example='cn-hangzhou-b'),
      dedicatedHostZoneIdForMaster?: string(name='DedicatedHostZoneIdForMaster', description='The zone ID of the host on which the primary instance resides.', example='cn-hangzhou-c'),
      dedicatedHostZoneIdForSlave?: string(name='DedicatedHostZoneIdForSlave', description='The zone ID of the host on which the secondary instance resides.', example='cn-hangzhou-d'),
      deletionProtection?: boolean(name='DeletionProtection', description='Indicates whether the release protection feature is enabled for the instance. Valid values:

*   **true**: The feature is enabled.
*   **false**: The feature is disabled.', example='false'),
      destroyTime?: string(name='DestroyTime', description='The time when the instance was destroyed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-11-05T11:26:02Z'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.7'),
      expireTime?: string(name='ExpireTime', description='The expiration time of the instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> Pay-as-you-go instances never expire.', example='2019-02-27T16:00:00Z'),
      generalGroupName?: string(name='GeneralGroupName', description='The name of the dedicated cluster to which the instance belongs. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition.', example='TestGroup'),
      guardDBInstanceId?: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance. This parameter is returned only when the instance is a primary instance and has a disaster recovery instance.', example='rm-uf64zsuxxxxxxxxxx'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**
*   **VPC**', example='Classic'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   \\*\\* ManualLock\\*\\*: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked after it expires.
*   **LockByRestoration**: The instance is automatically locked before it is rolled back.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage capacity.
*   **Released**: The instance is released. After an instance is released, the instance cannot be unlocked. You can only restore the backup data of the instance to a new instance. This process requires a long period of time.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the instance was locked.', example='instance_expired'),
      masterInstanceId?: string(name='MasterInstanceId', description='The ID of the primary instance. If the value of this parameter is null, the instance is a primary instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      mutriORsignle?: boolean(name='MutriORsignle', description='Indicates whether the multi-zone deployment method is used for the instance. Valid values: **true and false**.

> If the multi-zone deployment method is used for the instance, the zone ID of the instance contains MAZ. Example: `cn-hangzhou-MAZ10(h,i)`.', example='true'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rr-uf6wjk5xxxxxxx'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds', description='An array that consists of the IDs of the read-only instances that are attached to the instance. This parameter is returned only when the instance is a primary instance and has read-only instances.'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyxxxxxxx'),
      switchWeight?: int32(name='SwitchWeight', description='Indicates whether the instance supports weight-based switchovers for high availability. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition. Valid values:

*   **100**: The instance supports weight-based switchovers for high availability.
*   **0**: The instance does not support weight-based switchovers for high availability.', example='100'),
      tempDBInstanceId?: string(name='TempDBInstanceId', description='The ID of the temporary instance. This parameter is returned only when the instance is a primary instance and has a temporary instance.', example='rm-uf64zsuxxxxxxxxxx'),
      tips?: string(name='Tips', description='The information about the exception that is detected on the instance. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition.', example='Run as expected.'),
      tipsLevel?: int32(name='TipsLevel', description='The severity level of the exception that is detected on the instance. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition. Valid values:

*   **1**: The instance is normal.
*   **2**: The specifications of the read-only instances do not match the specifications of the primary instance, and the performance is affected. You must adjust the specifications of these instances based on your business requirements.', example='1'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.', example='vsw-uf6adz52c2pxxxxxxx'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The VPC ID of the instance. This parameter is returned only when the instance resides in a VPC.', example='rm-uf6wjk5xxxxxxx'),
      vpcId?: string(name='VpcId', description='The VPC ID of the instance.', example='vpc-uf6f7l4fg90xxxxxxx'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='test-huadong'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-a'),
    }
  ](name='DBInstance')
  }(name='Items', description='An array that consists of the details about the instance.'),
  nextToken?: string(name='NextToken', description='The token that is used to display the next page. If the returned entries are displayed on multiple pages, the next page can be displayed when you call this operation again with **NextToken** specified.', example='o7PORW5o2TJg**********'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

> If you specify **MaxResults** or **NextToken**, only the value **1** is returned. You can ignore the value 1.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.

> If you specify **MaxResults** or **NextToken**, only the number of entries on the current page is returned. You can ignore the number.', example='100'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

/**
  * You can use one of the following methods to check the response:
  * *   Method 1: Use **MaxResults** to specify the number of entries per page. Then, use **NextToken** to specify the token that is used to display the next page. **NextToken** is set to the value that is returned from the most recent call of the **DescribeDBInstances** operation for **NextToken**.
  *     > The first time you call the DescribeDBInstances operation to perform a paged query, you need only to specify **MaxResults**. In this case, the operation returns the data of the first page and the value of **NextToken**.
  * *   Method 2: Use **PageSize** to specify the number of entries per page. Then, use **PageNumber** to display the next page.
  * > You can use only one of the preceding methods. If a large number of entries are returned, we recommend that you use Method 1 to increase the query speed.
  *
 */
async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesAsCsvRequest {
  cachedAsync?: boolean(name='CachedAsync', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  exportKey?: string(name='ExportKey', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstancesAsCsvResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      accountMaxQuantity?: int32(name='AccountMaxQuantity', description='The maximum number of accounts.', example='500'),
      accountType?: string(name='AccountType', description='The type of the account.', example='super'),
      availabilityValue?: string(name='AvailabilityValue', description='The service availability of the instance in percentage.', example='100'),
      category?: string(name='Category', description='The category of the instance.', example='0'),
      connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Performance**: standard mode
*   **Safety**: enhanced mode', example='Performance'),
      connectionString?: string(name='ConnectionString', description='The internal endpoint of the instance.', example='rm-uf6wjk5xxxxxxxxxx.mysql.rds.aliyuncs.com'),
      creationTime?: string(name='CreationTime', description='The time when the audio or video file was created.', example='2011-05-30T12:11:04Z'),
      DBInstanceCPU?: string(name='DBInstanceCPU', description='The number of cores that are configured for the instance.', example='2'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance.', example='rds.mys2.small'),
      DBInstanceClassType?: string(name='DBInstanceClassType', description='The instance family.', example='s'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='0'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      DBInstanceMemory?: long(name='DBInstanceMemory', description='The memory size of the instance. Unit: MB.', example='4096'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The network type of the instance. Valid values:

*   **Internet**
*   **Intranet**', example='Internet'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance.', example='Running'),
      DBInstanceStorage?: int32(name='DBInstanceStorage', description='The storage capacity of the instance. Unit: GB.', example='10'),
      DBInstanceType?: string(name='DBInstanceType', description='The type of the instance. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance', example='Primary'),
      DBMaxQuantity?: int32(name='DBMaxQuantity', description='The maximum number of databases that can be created on the instance.', example='200'),
      engine?: string(name='Engine', description='The type of the database engine.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The engine version of the instance.', example='8.0'),
      expireTime?: string(name='ExpireTime', description='The expiration time.', example='2019-03-27T16:00:00Z'),
      exportKey?: string(name='ExportKey'),
      guardDBInstanceId?: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance that is attached to the instance.', example='rm-uf64zsuxxxxxxxxxx'),
      incrementSourceDBInstanceId?: string(name='IncrementSourceDBInstanceId', description='The ID of the instance from which incremental data comes. The incremental data of a disaster recovery instance or read-only instance comes from its primary instance. If this parameter is not returned, the instance is a primary instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The type of the network.', example='VPC'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the instance was locked.', example='instance_expired'),
      maintainTime?: string(name='MaintainTime', description='The maintenance window of the instance. The time is displayed in UTC. Take note that the maintenance window that is displayed in the ApsaraDB RDS console is equal to the value of this parameter plus 8 hours.', example='00:00Z-02:00Z'),
      masterInstanceId?: string(name='MasterInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      maxConnections?: int32(name='MaxConnections', description='The maximum number of concurrent connections that are allowed by the instance.', example='60'),
      maxIOPS?: int32(name='MaxIOPS', description='The maximum number of I/O requests that is processed by the instance per second.', example='150'),
      payType?: string(name='PayType', description='The billing method of the instance.', example='Postpaid'),
      port?: string(name='Port', description='The port that is used to connect to the instance over an internal network.', example='3306'),
      readDelayTime?: string(name='ReadDelayTime', description='The latency of data replication from the primary instance to the read-only instance. This parameter is valid for read-only instances.', example='0'),
      regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
      securityIPList?: string(name='SecurityIPList', description='The IP address whitelist of the instance.', example='42.xx.xx.xx'),
      slaveZones?: {
        slaveRegion?: [ string ](name='slaveRegion')
      }(name='SlaveZones'),
      supportUpgradeAccountType?: string(name='SupportUpgradeAccountType', description='None.', example='No'),
      tags?: string(name='Tags', description='The tag.', example='0'),
      tempDBInstanceId?: string(name='TempDBInstanceId', description='The ID of the temporary instance that is attached to the instance.', example='rm-uf64zsuxxxxxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6adz52c2pxxxxxxxxxx'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf6f7l4fg90xxxxxxxxxx'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance resides.', example='cn-hangzhou-h'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items', description='An array that consists of the fields in **DBInstanceAttribute**.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A444291****'),
}

model DescribeDBInstancesAsCsvResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesAsCsvResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is no longer available. You can call the DescribeDBInstanceAttribute operation to query information about an instance.
  *
 */
// Deprecated
async function describeDBInstancesAsCsv(request: DescribeDBInstancesAsCsvRequest): DescribeDBInstancesAsCsvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancesAsCsv', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesByExpireTimeRequest {
  expirePeriod?: int32(name='ExpirePeriod', description='The number of remaining days for which the instances are available. Valid values: **0 to 180**.', example='180', minimum=-15, maximum=180, position='Query'),
  expired?: boolean(name='Expired', description='Specifies whether to query instances that have expired. Valid values:

*   **True**: queries instances that have expired.
*   **False**: does not query instances that have expired.', example='True', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any **non-zero** positive integer.

Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1 to 100**.

Default value: **30**.', example='30', maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: string(name='Tags', description='The tag that is added to the instance. Each tag is a key-value pair that consists of two parts: TagKey and TagValue. You can specify a maximum of five tags in the following format for each request: `{"key1":"value1","key2":"value2"...}`.', example='{"key1":"value1"}', position='Query'),
  proxyId?: string(name='proxyId', description='A deprecated parameter.', example='None', position='Query'),
}

model DescribeDBInstancesByExpireTimeResponseBody = {
  items?: {
    DBInstanceExpireTime?: [ 
    {
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='Test database'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance state table](~~26315~~).', example='Running'),
      expireTime?: string(name='ExpireTime', description='The expiration date and time of the instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> Pay-as-you-go instances never expire.', example='2019-03-27T16:00:00Z'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked after it expires.
*   **LockByRestoration**: The instance is automatically locked before it is rolled back.
*   **LockByDiskQuota**: The instance is automatically locked after its storage capacity is exhausted.
*   **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked after its storage capacity is exhausted.', example='Unlock'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Prepaid'),
    }
  ](name='DBInstanceExpireTime')
  }(name='Items', description='An array that consists of the details about the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Valid values: any **non-zero** positive integer.

Default value: **1**.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of instances returned on the current page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='200'),
}

model DescribeDBInstancesByExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesByExpireTimeResponseBody(name='body'),
}

/**
  * > This operation is available only for subscription instances.
  *
 */
async function describeDBInstancesByExpireTime(request: DescribeDBInstancesByExpireTimeRequest): DescribeDBInstancesByExpireTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancesByExpireTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesByPerformanceRequest {
  tag?: [
    {
      key?: string(name='key', description='The key of tag 1 that is added to the instances.', example='key1'),
      value?: string(name='value', description='The value of tag 1 that is added to the instances.', example='value1'),
    }
  ](name='Tag', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxx', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **5** to **100**.

Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sortKey?: string(name='SortKey', description='The sorting basis.', example='CPU_Usage', position='Query'),
  sortMethod?: string(name='SortMethod', description='The sorting method.', example='ASC', position='Query'),
  tags?: string(name='Tags', description='The tags that are added to the instances. Each tag is a key-value pair that consists of two parts: TagKey and TagValue. Format: `{"key1":"value1"}`.', example='{"key1":"value1"}', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy mode.', example='API', position='Query'),
}

model DescribeDBInstancesByPerformanceResponseBody = {
  items?: {
    DBInstancePerformance?: [ 
    {
      CPUUsage?: string(name='CPUUsage', description='The CPU utilization of the instance in percentage.', example='0.70'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance.', example='DatabaseTest'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx'),
      diskUsage?: string(name='DiskUsage', description='The disk usage of the instance in percentage.', example='14.56'),
      IOPSUsage?: string(name='IOPSUsage', description='The IOPS usage of the instance in percentage.', example='0.15'),
      sessionUsage?: string(name='SessionUsage', description='The number of sessions.', example='0.10'),
    }
  ](name='DBInstancePerformance')
  }(name='Items', description='The details about the instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='28'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='23907437-79B9-411A-9EE6-75A8F0F1C619'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='28'),
}

model DescribeDBInstancesByPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesByPerformanceResponseBody(name='body'),
}

/**
  * This operation is phased out.
  *
 */
async function describeDBInstancesByPerformance(request: DescribeDBInstancesByPerformanceRequest): DescribeDBInstancesByPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancesByPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesForCloneRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode

By default, this operation queries the instances that use any of the supported connection modes.', example='Standard', position='Query'),
  currentInstanceId?: string(name='CurrentInstanceId', description='The ID of the current instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Instance types](~~26312~~).', example='mysql.n1.micro.1', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance state table](~~26315~~).', example='Running', position='Query'),
  DBInstanceType?: string(name='DBInstanceType', description='The role of the instance that you want to query. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance

By default, this operation queries the instances of all roles.', example='Primary', position='Query'),
  engine?: string(name='Engine', description='The database engine of the instance. Valid values:

*   MySQL
*   SQLServer
*   PostgreSQL
*   PPAS
*   MariaDB

By default, this operation queries the instances that run any of the supported database engine types.', example='MySQL', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='5.7', position='Query'),
  expired?: string(name='Expired', description='Specifies whether the instance expires. Valid values:

*   **True**: queries the instances that have expired.
*   **False**: does not query instances that have expired.', example='True', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**
*   **VPC**', example='Classic', position='Query'),
  nodeType?: string(name='NodeType', description='The type of the database node. Valid values:

*   **Master**: the primary node
*   **Slave**: the secondary node', example='Master', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1 to 100**.

Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription

By default, this operation queries the instances that use any of the supported billing methods.', example='Postpaid', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword that is used for the search. The keyword can be part of an instance ID or an instance description.', example='rm-uf6w', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-j6csw46bgrgkxxxxxxxxxx', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-j6cjvqms29yxxxxxxxxxx', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-h', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy mode.', example='API', position='Query'),
}

model DescribeDBInstancesForCloneResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **Finance**: RDS Enterprise Edition', example='HighAvailability'),
      connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode', example='Standard'),
      createTime?: string(name='CreateTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-11-05T11:26:02Z'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Instance types](~~26312~~).', example='mysql.n1.micro.1'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance. It must be 2 to 256 characters in length. The value can contain letters, digits, underscores (\\_), and hyphens (-). The value must start with a letter.

> The value cannot start with http:// or https://.', example='Test'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The network connection type of the instance. Valid values:

*   **Internet**
*   **Intranet**', example='Intranet'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance state table](~~26315~~).', example='Running'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the instance. Valid values:

*   **local_ssd/ephemeral_ssd**: local SSD
*   **cloud_ssd**: standard SSD.
*   **cloud_essd**: enhanced SSD (ESSD)', example='local_ssd'),
      DBInstanceType?: string(name='DBInstanceType', description='The role of the instance. Valid values:

*   **Primary**: primary instance
*   **Readonly**: read-only instance
*   **Guard**: disaster recovery instance
*   **Temp**: temporary instance', example='Primary'),
      destroyTime?: string(name='DestroyTime', description='The time when the instance was destroyed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-12-05T11:26:02Z'),
      engine?: string(name='Engine', description='The database engine of the instance. Valid values:

*   MySQL
*   SQLServer
*   PostgreSQL
*   PPAS
*   MariaDB', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='5.7'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expired. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-11-28T11:26:02Z'),
      guardDBInstanceId?: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance. This parameter is returned only when the instance is a primary instance and has a disaster recovery instance.', example='rm-uf64zsuxxxxxxxxxx'),
      insId?: int32(name='InsId', description='The ID of the instance role.', example='1'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**
*   **VPC**', example='Classic'),
      lockMode?: string(name='LockMode', description='The lock method of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked after it expires.
*   **LockByRestoration**: The instance is automatically locked before a rollback.
*   **LockByDiskQuota**: The instance is automatically locked because its storage capacity is exhausted and the instance is inaccessible.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the instance was locked.', example='instance_expired'),
      masterInstanceId?: string(name='MasterInstanceId', description='The ID of the primary instance. If the value of this parameter is null, the instance is a primary instance.', example='rm-uf6wjk5xxxxxxxxxx'),
      mutriORsignle?: boolean(name='MutriORsignle', description='Indicates whether multi-region deployment is used. Valid values:

*   **true**: Multi-region deployment is used.
*   **false**: Multi-region deployment is not used.', example='false'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rm-bpxxxxxxxxx'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds', description='An array consisting of the IDs of the read-only instances that are attached to the primary instance.'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      replicateId?: string(name='ReplicateId', description='None.', example='N/A'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyxxxxx'),
      tempDBInstanceId?: string(name='TempDBInstanceId', description='The ID of the temporary instance.', example='sub138xxxxx_rm-xxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6adz52c2pxxxxxxxxxx'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The ID of the instance in the VPC.', example='rm-uf6wjk5xxxxxxxxxx'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1opxu1zkhxxxxxxxxxx'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-h'),
    }
  ](name='DBInstance')
  }(name='Items', description='An array that consists of the details about the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='12'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='120'),
}

model DescribeDBInstancesForCloneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesForCloneResponseBody(name='body'),
}

/**
  * This operation is phased out.
  *
 */
async function describeDBInstancesForClone(request: DescribeDBInstancesForCloneRequest): DescribeDBInstancesForCloneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancesForClone', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBMiniEngineVersionsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*******', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the ID of the dedicated cluster.', example='dhg-4n*****', position='Query'),
  engine?: string(name='Engine', description='The database engine of the instance. Valid values: **MySQL** and **PostgreSQL**.', example='MySQL', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.

*   Valid values when you set the Engine parameter to MySQL: **8.0**, **5.7**, **5.6**, and **5.5**
*   Valid values when you set the Engine parameter to PostgreSQL: **14.0**, **13.0**, **12.0**, **11.0**, and **10.0**', example='5.7', position='Query'),
  minorVersionTag?: string(name='MinorVersionTag', description='The minor engine version of the instance. You can specify this parameter to query the minor engine version of the instance.', example='rds_20220731', position='Query'),
  nodeType?: string(name='NodeType', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **Finance**: RDS Enterprise Edition', example='HighAvailability', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageType?: string(name='StorageType', description='The storage type of the instance. Valid values:

*   **local_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD (ESSD) of performance level 1 (PL1)
*   **cloud_essd2**: ESSD of PL2
*   **cloud_essd3**: ESSD of PL3', example='local_ssd', position='Query'),
}

model DescribeDBMiniEngineVersionsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage', description='The number of entries returned per page.', example='10'),
  minorVersionItems?: [ 
    {
      communityMinorVersion?: string(name='CommunityMinorVersion', description='The PostgreSQL version to which the minor engine version corresponds. For more information, see [Release notes for AliPG](~~126002~~).

>  This parameter is valid only when the Engine parameter is set to **PostgreSQL**.', example='13.6'),
      engine?: string(name='Engine', description='The database engine that corresponds to the minor engine version.', example='MySQL'),
      engineVersion?: string(name='EngineVersion', description='The database engine version that corresponds to the minor engine version.', example='5.7'),
      isHotfixVersion?: boolean(name='IsHotfixVersion', description='An internal parameter. You can ignore this parameter.', example='True'),
      minorVersion?: string(name='MinorVersion', description='The version of the minor engine.', example='rds_20220731'),
      nodeType?: string(name='NodeType', description='The RDS edition of the instance that runs the minor engine version. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **Finance**: RDS Enterprise Edition', example='HighAvailability'),
      releaseNote?: string(name='ReleaseNote', description='The URL of the release notes for the minor engine version.', example='https://example.com'),
      releaseType?: string(name='ReleaseType', description='The release type. Valid values:

*   **LTS**: a long-term version
*   **BETA**: a preview version', example='BETA'),
      statusDesc?: string(name='StatusDesc', description='The status of the minor engine version.', example='Online'),
      tag?: string(name='Tag', description='The tag that corresponds to the minor engine version. Valid values:

*   **pgsql_docker_image**: tag of common instances
*   **pgsql_babelfish_image**: tag of the instance for which Babelfish is enabled

>  This parameter is valid only when the Engine parameter is set to **PostgreSQL**.', example='pgsql_babelfish_image'),
    }
  ](name='MinorVersionItems', description='An array that consists of details of the minor engine versions.'),
  pageNumbers?: int32(name='PageNumbers', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFB6083A-7699-489B-8278-C0CB4793A96E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeDBMiniEngineVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBMiniEngineVersionsResponseBody(name='body'),
}

/**
  * Before you purchase or upgrade an ApsaraDB RDS for MySQL instance or an ApsaraDB RDS for PostgreSQL instance, you can call the DescribeDBMiniEngineVersions operation to query the minor engine versions that are available for the instance.
  *
 */
async function describeDBMiniEngineVersions(request: DescribeDBMiniEngineVersionsRequest): DescribeDBMiniEngineVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBMiniEngineVersions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBProxyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp1ja4f56s7us****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBProxyResponseBody = {
  DBProxyAVZones?: {
    DBProxyAVZones?: [ string ](name='DBProxyAVZones')
  }(name='DBProxyAVZones', description='The list of zones that are available for the database proxy.'),
  DBProxyConnectStringItems?: {
    DBProxyConnectStringItems?: [ 
    {
      DBProxyConnectString?: string(name='DBProxyConnectString', description='The endpoint of the proxy terminal.', example='gos787jog2wk0ye1****-rw4rm.rwlb.rds.aliyuncs.com'),
      DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType', description='The network type of the proxy endpoint.

Valid values:

*   OuterString

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

*   InnerString

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->', example='InnerString'),
      DBProxyConnectStringNetWorkType?: string(name='DBProxyConnectStringNetWorkType', description='The network type of the database proxy.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    classic network

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->', example='2'),
      DBProxyConnectStringPort?: string(name='DBProxyConnectStringPort', description='The port number that is associated with the proxy endpoint.', example='3306'),
      DBProxyEndpointId?: string(name='DBProxyEndpointId', description='The ID of the proxy terminal to which the proxy endpoint belongs.', example='20****'),
      DBProxyEndpointName?: string(name='DBProxyEndpointName', description='The name of the proxy terminal to which the proxy endpoint belongs.', example='gos787jog2wk0ye1****'),
      DBProxyVpcId?: string(name='DBProxyVpcId', description='The VPC that is associated with the proxy endpoint.', example='vpc-uf6oobt****'),
      DBProxyVpcInstanceId?: string(name='DBProxyVpcInstanceId', description='The ID of the proxy instance.', example='rm-bp145737x5****131161274792****'),
      DBProxyVswitchId?: string(name='DBProxyVswitchId', description='The vSwitch that is associated with the proxy endpoint.', example='vsw-uf6l0pic17****'),
    }
  ](name='DBProxyConnectStringItems')
  }(name='DBProxyConnectStringItems', description='An array consisting of the information about the proxy endpoint that is created for the instance.'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You can ignore this parameter.', example='normal'),
  DBProxyInstanceCurrentMinorVersion?: string(name='DBProxyInstanceCurrentMinorVersion', description='The version of the proxy instance.', example='1.13.11'),
  DBProxyInstanceLatestMinorVersion?: string(name='DBProxyInstanceLatestMinorVersion', description='The latest version that is available for the proxy instance.', example='1.13.12'),
  DBProxyInstanceName?: string(name='DBProxyInstanceName', description='The name of the proxy instance.', example='gos787jog2wk0ye1****'),
  DBProxyInstanceNum?: int32(name='DBProxyInstanceNum', description='The number of proxies that are enabled on the instance.', example='1'),
  DBProxyInstanceSize?: string(name='DBProxyInstanceSize', description='This parameter is available only for ApsaraDB RDS for PostgreSQL instances. The specifications of the proxy instance that is enabled.

Format: `Number of cores/Memory capacity`.

For example, a value of 4/8 indicates that the proxy instance has 4 cores and 8 GB of memory.', example='4/8'),
  DBProxyInstanceStatus?: string(name='DBProxyInstanceStatus', description='The status of the proxy instance.

Valid values:

*   DBInstanceClassChanging

    <!-- -->

    <!-- -->

    <!-- -->

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType', description='The type of the database proxy that is enabled on the instance.

> ApsaraDB RDS for PostgreSQL instances support only dedicated proxies.

Valid values:

*   1

    <!-- -->

    :

    <!-- -->

    shared proxy

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    dedicated proxy

    <!-- -->', example='2'),
  DBProxyServiceStatus?: string(name='DBProxyServiceStatus', description='The status of the database proxy.

Valid values:

*   Shutdown

    <!-- -->

    <!-- -->

    <!-- -->

*   Startup

    <!-- -->

    <!-- -->

    <!-- -->', example='Startup'),
  dbProxyEndpointItems?: {
    dbProxyEndpointItems?: [ 
    {
      dbProxyEndpointAliases?: string(name='DbProxyEndpointAliases', description='The description of the proxy terminal.', example='proxy-test'),
      dbProxyEndpointName?: string(name='DbProxyEndpointName', description='The ID of the proxy terminal.', example='gos787jog2wk0ye1****'),
      dbProxyEndpointType?: string(name='DbProxyEndpointType', description='The type of the proxy terminal.

Valid values:

*   Custom

    <!-- -->

    :

    <!-- -->

    custom proxy terminal

    <!-- -->

*   RWSplit

    <!-- -->

    :

    <!-- -->

    default proxy terminal

    <!-- -->', example='RWSplit'),
      dbProxyReadWriteMode?: string(name='DbProxyReadWriteMode', description='The read and write attributes of the proxy terminal.

Valid values:

*   ReadOnly

    <!-- -->

    <!-- -->

    <!-- -->

*   ReadWrite

    <!-- -->

    <!-- -->

    <!-- -->', example='ReadWrite'),
    }
  ](name='DbProxyEndpointItems')
  }(name='DbProxyEndpointItems', description='The proxy terminals of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='909A69EE-71C8-4417-A0B9-FF085407E1E3'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
}

model DescribeDBProxyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyResponseBody(name='body'),
}

/**
  * Before you call the ModifyDBProxyEndpoint operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function describeDBProxy(request: DescribeDBProxyRequest): DescribeDBProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBProxy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBProxyEndpointRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp1ja4f56s7us****', position='Query'),
  DBProxyConnectString?: string(name='DBProxyConnectString', description='The proxy endpoint that you want to query. You can call the [DescribeDBProxy](~~141055~~) operation to query the proxy endpoint.', example='testproxy****.rwlb.rds.aliyuncs.com', position='Query'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId', description='The name of the proxy terminal to which the proxy endpoint belongs. You can call the [DescribeDBProxy](~~141055~~) operation to query the name of the proxy terminal.', example='keaxncrjluwu0gue****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBProxyEndpointResponseBody = {
  DBProxyConnectString?: string(name='DBProxyConnectString', description='The proxy endpoint queried.', example='testproxy****.rwlb.rds.aliyuncs.com'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType', description='The network type of the proxy endpoint. Valid values:

*   **InnerString**: internal network
*   **OuterString**: Internet', example='InnerString'),
  DBProxyConnectStringPort?: string(name='DBProxyConnectStringPort', description='The port number that is bound to the proxy endpoint.', example='3306'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId', description='The ID of the proxy endpoint.', example='keaxncrjluwu0gue****'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. This operation does not return a value for this parameter.', example='normal'),
  DBProxyFeatures?: string(name='DBProxyFeatures', description='The configuration of the proxy terminal. The value of this parameter is a JSON string that consists of the following fields:

*   **TransactionReadSqlRouteOptimizeStatus**: the status of the transaction splitting feature. Valid values: **0** and **1**. The value 0 indicates that the feature is disabled. The value 1 indicates that the feature is enabled.
*   **ConnectionPersist**: the status of the connection pool feature. Valid values: **0**, **1**, and **2**. The value 0 indicates that the connection pool feature is disabled. The value 1 indicates that the session connection pool feature is enabled. The value 2 indicates that the transaction connection pool feature is enabled.
*   **ReadWriteSpliting**: the status of the read/write splitting feature. Valid values: **0** and **1**. The value 0 indicates that the feature is disabled. The value 1 indicates that the feature is enabled.
*   **PinPreparedStmt**: an internal field that is available only for ApsaraDB RDS for PostgrSQL instances.

    > If the instance runs PostgreSQL, you can change only the value of the **ReadWriteSpliting** field. The **TransactionReadSqlRouteOptimizeStatus** and **PinPreparedStmt** fields are set to their default values 1.', example='TransactionReadSqlRouteOptimizeStatus:1;ConnectionPersist:0;ReadWriteSpliting:1'),
  dbProxyEndpointAliases?: string(name='DbProxyEndpointAliases', description='The description of the proxy terminal.', example='proxyterminal-test'),
  dbProxyEndpointReadWriteMode?: string(name='DbProxyEndpointReadWriteMode', description='The read and write attributes of the proxy terminal. Valid values:

*   **ReadWrite**: The proxy terminal supports read and write requests.
*   **ReadOnly**: The proxy terminal supports only read requests.', example='ReadWrite'),
  endpointConnectItems?: {
    endpointConnectItems?: [ 
    {
      dbProxyEndpointConnectString?: string(name='DbProxyEndpointConnectString', description='The proxy endpoint queried.', example='testproxy****.rwlb.rds.aliyuncs.com'),
      dbProxyEndpointNetType?: string(name='DbProxyEndpointNetType', description='The network type of the proxy endpoint. Valid values:

*   **0**: Internet
*   **1**: classic network
*   **2**: virtual private cloud (VPC)', example='2'),
      dbProxyEndpointPort?: string(name='DbProxyEndpointPort', description='The port number that is associated with the proxy endpoint. Default value: **3306**.', example='3306'),
    }
  ](name='EndpointConnectItems')
  }(name='EndpointConnectItems', description='An array that consists of the information about the proxy endpoint.'),
  readOnlyInstanceDistributionType?: string(name='ReadOnlyInstanceDistributionType', description='The method that is used to assign read weights. For more information, see [Modify the latency threshold and read weights of ApsaraDB RDS for MySQL instances](~~96076~~). Valid values:

*   **Standard**: ApsaraDB RDS automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
*   **Custom**: You must manually assign read weights to the instance and its read-only instances.', example='Standard'),
  readOnlyInstanceMaxDelayTime?: string(name='ReadOnlyInstanceMaxDelayTime', description='The latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the specified threshold, ApsaraDB RDS no longer forwards read requests to the read-only instance.', example='30'),
  readOnlyInstanceWeight?: string(name='ReadOnlyInstanceWeight', description='The read weights of the instance and its read-only instances. The value of this parameter is a JSON string that consists of the following fields:

*   **DBInstanceId**: the ID of the instance.
*   **DBInstanceType**: the role of the instance. Valid values: **Master** and **ReadOnly**.
*   **Weight**: the read weight of the instance. The read weight increases in increments of **100** and cannot exceed **10000**.

>  If no read-only instances are attached to the instance, this operation returns **null** for this parameter.', example='[{\\"Availability\\":\\"Available\\",\\"DBInstanceId\\":\\"rr-bp176984qewd8****\\",\\"DBInstanceType\\":\\"ReadOnly\\",\\"Weight\\":400},{\\"Availability\\":\\"Available\\",\\"DBInstanceId\\":\\"rm-bp1ja4f56s7us****\\",\\"DBInstanceType\\":\\"Master\\",\\"Weight\\":0}]'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='847BA085-B377-4BFA-8267-F82345ECE1D2'),
}

model DescribeDBProxyEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyEndpointResponseBody(name='body'),
}

/**
  * Before you call the DescribeDBProxyEndpoint operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function describeDBProxyEndpoint(request: DescribeDBProxyEndpointRequest): DescribeDBProxyEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBProxyEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBProxyPerformanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3axxxxx', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType', description='The type of proxy that is enabled on the instance. Set the value to **DedicatedProxy**.', example='DedicatedProxy', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-09-21T18:00:00Z', position='Query'),
  metricsName: string(name='MetricsName', description='The performance metrics that you want to query.

If the instance runs MySQL, you can query only the **Maxscale_CpuUsage** performance metric, which indicates the CPU utilization of the instance.

If the instance runs PostgreSQL, you can query the following performance metrics:

*   **Maxscale_TotalConns**: the number of connections per second
*   **Maxscale_CurrentConns**: the number of connections that are established
*   **Maxscale_DownFlows**: outbound traffic
*   **Maxscale_UpFlows**: inbound traffic
*   **Maxscale_QPS**: QPS
*   **Maxscale_MemUsage**: memory usage
*   **Maxscale_CpuUsage**: CPU utilization

If you want to query more than one performance metric, separate the performance metrics with commas (,). You can specify up to six performance metrics in a single request.', example='Maxscale_CpuUsage', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-09-19T01:00:00Z', position='Query'),
}

model DescribeDBProxyPerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='lsmexxxxxxx'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal'),
  endTime?: string(name='EndTime', description='The end of the time range that is queried.', example='2019-09-21T18:00:00Z'),
  performanceKeys?: {
    performanceKey?: [ 
    {
      key?: string(name='Key', description='The name of the performance metric.', example='cpu_ratio'),
      valueFormat?: string(name='ValueFormat', description='The format in which the value of the performance metric is returned.', example='docker_container_cpu'),
      values?: {
        performanceValue?: [ 
        {
          date?: string(name='Date', description='The time when the value of the performance metric was recorded. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-10-10T09:00:00Z'),
          value?: string(name='Value', description='The value of the performance metric.', example='2.83'),
        }
      ](name='PerformanceValue')
      }(name='Values', description='An array that consists of the values of the performance metric in the following format: {value1, value2, ...}.'),
    }
  ](name='PerformanceKey')
  }(name='PerformanceKeys', description='An array that consists of the performance metrics that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DD31056F-A0CE-41D7-AD39-689B6ABAE982'),
  startTime?: string(name='StartTime', description='The beginning of the time range that is queried.', example='2019-09-19T01:00:00Z'),
}

model DescribeDBProxyPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyPerformanceResponseBody(name='body'),
}

/**
  * Before you call the DescribeDBProxyPerformance operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function describeDBProxyPerformance(request: DescribeDBProxyPerformanceRequest): DescribeDBProxyPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBProxyPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDTCSecurityIpHostsForSQLServerRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instances reside. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDTCSecurityIpHostsForSQLServerResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  ipHostPairNum?: string(name='IpHostPairNum', description='The number of distributed transaction whitelists.', example='1'),
  items?: {
    whiteListGroups?: [ 
    {
      securityIpHosts?: string(name='SecurityIpHosts', description='The IP address of the ECS instance and the hostname of the Windows computer. Format: IP address,Hostname. Multiple values are separated with semicolons (;).', example='192.168.1.100,k3ecstest'),
      whitelistGroupName?: string(name='WhitelistGroupName', description='The name of the distributed transaction whitelist.', example='test1'),
    }
  ](name='WhiteListGroups')
  }(name='Items', description='Details of distributed transaction whitelists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CA62A70-2203-45C6-8E90-8971D5ACC0C2'),
}

model DescribeDTCSecurityIpHostsForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDTCSecurityIpHostsForSQLServerResponseBody(name='body'),
}

/**
  * For more information, see [Configure a distributed transaction whitelist](~~124321~~).
  * This operation is applicable to instances that run one of the following SQL Server versions on RDS High-Availability Edition: SQL Server 2012 SE, SQL Server 2012 EE, SQL Server 2014 SE, SQL Server 2016 SE, SQL Server 2016 EE, and SQL Server 2017 SE.
  *
 */
async function describeDTCSecurityIpHostsForSQLServer(request: DescribeDTCSecurityIpHostsForSQLServerRequest): DescribeDTCSecurityIpHostsForSQLServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDTCSecurityIpHostsForSQLServer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabasesRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  DBName?: string(name='DBName', description='The name of the database.', example='testDB01', position='Query'),
  DBStatus?: string(name='DBStatus', description='The status of the database. Valid values:

*   **Creating**
*   **Running**
*   **Deleting**', example='Creating', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: 30.', example='30', minimum=0, maximum=2147483647, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDatabasesResponseBody = {
  databases?: {
    database?: [ 
    {
      accounts?: {
        accountPrivilegeInfo?: [ 
        {
          account?: string(name='Account', description='The username of the account.', example='test'),
          accountPrivilege?: string(name='AccountPrivilege', description='The permissions that the account has on the database. Valid values:

*   **ReadWrite**: read and write permissions
*   **ReadOnly**: read-only permissions
*   **DMLOnly**: DML-only permissions
*   **DDLOnly**: DDL-only permissions', example='DMLOnly'),
          accountPrivilegeDetail?: string(name='AccountPrivilegeDetail', description='The details of the permissions that the account has on the database.', example='SELECT'),
        }
      ](name='AccountPrivilegeInfo')
      }(name='Accounts', description='An array that consists of the details of the accounts. Each account has specific permissions on the database.'),
      advancedInfo?: {
        advancedDbProperty?: [  map[string]any ](name='AdvancedDbProperty')
      }(name='AdvancedInfo'),
      basicInfo?: {
        basicDbProperty?: [  map[string]any ](name='BasicDbProperty')
      }(name='BasicInfo'),
      characterSetName?: string(name='CharacterSetName', description='The name of the character set.', example='utf8'),
      collate?: string(name='Collate', description='The collation of the character set. The example value C stands for localization.

>  This parameter is returned only for instances that run PostgreSQL.', example='C'),
      connLimit?: string(name='ConnLimit', description='The limit on the number of concurrent requests. The value -1 indicates that the number of concurrent requests is unlimited.

>  This parameter is returned only for instances that run PostgreSQL.', example='-1'),
      ctype?: string(name='Ctype', description='The type of the character set.

>  This parameter is returned only for instances that run PostgreSQL.', example='en_US.utf8'),
      DBDescription?: string(name='DBDescription', description='The description of the database.', example='testdb'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance to which the database belongs.', example='rm-uf6wjk5****'),
      DBName?: string(name='DBName', description='The name of the database.', example='testDB01'),
      DBStatus?: string(name='DBStatus', description='The status of the database. Valid values:

*   **Creating**
*   **Running**
*   **Deleting**', example='Creating'),
      engine?: string(name='Engine', description='The database engine of the instance to which the database belongs.', example='MySQL'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', description='The reserved parameter.', example='30'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy****'),
      runtimeInfo?: {
        runtimeDbProperty?: [  map[string]any ](name='RuntimeDbProperty')
      }(name='RuntimeInfo'),
      tablespace?: string(name='Tablespace', description='The tablespace of the database.

>  This parameter is returned only for instances that run PostgreSQL.', example='pg_default'),
      totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    }
  ](name='Database')
  }(name='Databases', description='An array that consists of the information about databases.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2603CA96-B17D-4903-BC04-61A2C829CD94'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabasesResponseBody(name='body'),
}

/**
  * >  If the specified request parameters are invalid, no database information is returned.
  *
 */
async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabases', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostGroupsRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx', position='Query'),
  imageCategory?: string(name='ImageCategory', description='The image based on which the hosts in the dedicated clusters are created. Valid values:

*   **WindowsWithMssqlStdLicense**: a Windows image, which contains the licenses of the SQL Server Standard Edition
*   **WindowsWithMssqlEntLisence**: a Windows image, which contains the licenses of the SQL Server Enterprise Edition
*   **WindowsWithMssqlWebLisence**: a Windows image, which contains the licenses of the SQL Server Web Edition
*   **AliLinux**: a Linux image', example='WindowsWithMssqlStdLicense', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated clusters. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      allocationPolicy?: string(name='AllocationPolicy', description='The policy based on which the system allocates resources in the dedicated cluster. Valid values:

*   **Evenly**: The system evenly allocates the resources to all the hosts in the dedicated cluster.
*   **Intensively**: The system preferentially allocates the resources to the heavily loaded hosts in the dedicated cluster.', example='Evenly'),
      bastionInstanceId?: string(name='BastionInstanceId', description='The ID of the bastion host.', example='bastionhost-cn-m7xxxxxxxx'),
      cpuAllocateRation?: float(name='CpuAllocateRation', description='The percentage of allocated cores in the dedicated cluster. Unit: %.', example='25'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount', description='The number of allocated cores in the dedicated cluster.', example='8'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio', description='The core overcommitment ratio of the dedicated cluster. Unit: %. For more information about the core overcommitment ratio, see [Manage a dedicated cluster](~~182328~~).', example='200'),
      createTime?: string(name='CreateTime', description='The timestamp when the dedicated cluster was created.', example='1571125370000'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType', description='The type of storage media that is used for the hosts in the dedicated cluster. Valid values:

*   **dhg_cloud_ssd**: standard or enhanced solid-state drive (SSD)
*   **dhg_local_ssd**: local SSD', example='dhg_cloud_ssd'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', description='The name of the dedicated cluster.', example='testHostGroup'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx'),
      diskAllocateRation?: float(name='DiskAllocateRation', description='The percentage of allocated disk space in the dedicated cluster. Unit: %.', example='0.49'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount', description='The amount of allocated disk space in the dedicated cluster. Unit: GB.', example='200'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio', description='The disk overcommitment ratio of the dedicated cluster. Unit: %. For more information about the disk overcommitment ratio, see [Manage a dedicated cluster](~~182328~~).', example='200'),
      diskUsedAmount?: float(name='DiskUsedAmount', description='The amount of used disk space in the dedicated cluster. Unit: GB.', example='20'),
      diskUtility?: float(name='DiskUtility', description='The disk usage of the dedicated cluster. Unit: %.', example='0'),
      engine?: string(name='Engine', description='The database engine that is run on the instances in the dedicated cluster.', example='MySQL'),
      hostNumber?: int32(name='HostNumber', description='The total number of hosts in the dedicated cluster.', example='3'),
      hostReplacePolicy?: string(name='HostReplacePolicy', description='The policy based on which the system handles host failures. Valid values:

*   **Auto**: The system automatically replaces faulty hosts.
*   **Manual**: You must manually replace faulty hosts.', example='Auto'),
      instanceNumber?: int32(name='InstanceNumber', description='The total number of instances in the dedicated cluster.', example='4'),
      memAllocateRation?: float(name='MemAllocateRation', description='The percentage of allocated memory space in the dedicated cluster. Unit: %.', example='33.7'),
      memAllocatedAmount?: float(name='MemAllocatedAmount', description='The amount of allocated memory space in the dedicated cluster.', example='16384'),
      memAllocationRatio?: int32(name='MemAllocationRatio', description='The memory overcommitment ratio of the dedicated cluster. Unit: %. For more information about the memory overcommitment ratio, see [Manage a dedicated cluster](~~182328~~).', example='90'),
      memUsedAmount?: float(name='MemUsedAmount', description='The amount of used memory space in the dedicated cluster. Unit: MB.', example='0'),
      memUtility?: float(name='MemUtility', description='The memory usage of the dedicated cluster. Unit: %.', example='0'),
      openPermission?: string(name='OpenPermission', description='Indicates whether the operating system permissions of the hosts in the dedicated cluster can be granted. Valid values:

*   **0** or **null**: The permissions cannot be granted.
*   **1**: The permissions can be granted.
*   **3**: The permissions have been granted.', example='3'),
      text?: string(name='Text', description='The name and ID of the dedicated cluster. The value of this parameter consists of two parts: the value of the **DedicatedHostGroupDesc** parameter and the value of the **DedicatedHostGroupId** parameter. Format: DedicatedHostGroupDesc/DedicatedHostGroupId.', example='testHostGroup/dhg-7a9xxxxxxxx'),
      VPCId?: string(name='VPCId', description='The ID of the virtual private cloud (VPC) to which the dedicated cluster belongs.', example='vpc-bp1oxxxxxx'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList', description='A list of zones to which the hosts of the dedicated cluster belong.'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups', description='An array that consists of dedicated clusters returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AB44DC0A-7E77-442A-97A9-C6418694CB22'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

/**
  * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  *
 */
async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostsRequest {
  allocationStatus?: string(name='AllocationStatus', description='Specifies whether to query the hosts on which you can create instances or those on which you cannot create instances. Valid values:

*   **0**: queries the hosts on which you cannot create instances
*   **1**: queries the hosts on which you can create instances', example='1', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the IDs of dedicated clusters.', example='dhg-7a9xxxxxxxx', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the host.', example='ch-t4nn100ddxxxxxxxx', position='Query'),
  hostStatus?: string(name='HostStatus', description='The status of the hosts. Valid values:

*   **0**: queries the hosts that are being created
*   **1**: queries the hosts that are running
*   **2**: queries the hosts that are faulty
*   **3**: queries the hosts that are being replaced
*   **4**: queries the hosts that are deprecated
*   **5**: queries the hosts that are being deleted
*   **6**: queries the hosts that are restarting', example='1', position='Query'),
  hostType?: string(name='HostType', description='The type of storage media that is used for the hosts. Valid values:

*   **dhg_cloud_ssd**: enhanced solid-state drive (SSD)
*   **dhg_local_ssd**: local SSD', example='dhg_cloud_ssd', position='Query'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='102565235', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the hosts. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the hosts.', example='cn-hangzhou-i', position='Query'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      accountName?: string(name='AccountName', description='The account of the host. You can call the [CreateDedicatedHostAccount](~~196877~~) operation to create a host account.', example='test123'),
      allocationStatus?: string(name='AllocationStatus', description='Indicates whether the system allows you to create instances on the host. Valid values:

*   **0**: The system does not allow you to create instances on the host.
*   **1**: The system allows you to create instances on the host.', example='1'),
      bastionInstanceId?: string(name='BastionInstanceId', description='The ID of the bastion host.', example='bastionhost-cn-m7xxxxxxxx'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio', description='The core overcommitment ratio of the dedicated cluster. Unit: %. For more information about the core overcommitment ratio, see [Manage a dedicated cluster](~~182328~~).', example='200'),
      cpuUsed?: string(name='CpuUsed', description='The number of used cores on the host.', example='4'),
      createdTime?: string(name='CreatedTime', description='The time when the host was created.', example='2021-03-25 17:29:06.0'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.', example='dhg-7a9xxxxxxxx'),
      dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the host.', example='i-bpxxxxxxx'),
      diskAllocationRatio?: string(name='DiskAllocationRatio', description='The disk overcommitment ratio of the dedicated cluster. Unit: %. For more information about the disk overcommitment ratio, see [Manage a dedicated cluster](~~182328~~).', example='200'),
      endTime?: string(name='EndTime', description='The time when the host expires.', example='2021-04-25T16:00:00Z'),
      engine?: string(name='Engine', description='The database engine of instances that are created on the host.', example='mysql'),
      hostCPU?: string(name='HostCPU', description='The total number of cores that are configured for the host.', example='8'),
      hostClass?: string(name='HostClass', description='The specifications of the host.', example='ecs.i2.16xlarge'),
      hostMem?: string(name='HostMem', description='The total memory space of the host. Unit: MB.', example='32238'),
      hostName?: string(name='HostName', description='The name of the host.', example='testHost1'),
      hostStatus?: string(name='HostStatus', description='The status of the host. Valid values:

*   **0**: The host is being created.
*   **1**: The host is running.
*   **2**: The host is faulty.
*   **3**: The host is being replaced.
*   **4**: The host is deprecated.
*   **5**: The host is being deleted.
*   **6**: The host is restarting.', example='1'),
      hostStorage?: string(name='HostStorage', description='The storage capacity of the host. Unit: MB.', example='2097152'),
      hostType?: string(name='HostType', description='The type of storage media that is used for the host. Valid values:

*   **dhg_cloud_ssd**: enhanced SSD
*   **dhg_local_ssd**: local SSD', example='dhg_cloud_ssd'),
      IPAddress?: string(name='IPAddress', description='The internal IP address of the host.', example='192.xx.xx.xx'),
      imageCategory?: string(name='ImageCategory', description='The image of the host. This parameter is returned only when the **Engine** parameter is set to **mssql**. Valid values:

*   **WindowsWithMssqlStdLicense**: a Windows image, which contains the licenses of the SQL Server Standard Edition
*   **WindowsWithMssqlEntLisence**: a Windows image, which contains the licenses of the SQL Server Enterprise Edition
*   **WindowsWithMssqlWebLisence**: a Windows image, which contains the licenses of the SQL Server Web Edition', example='WindowsWithMssqlStdLicense'),
      instanceNumber?: string(name='InstanceNumber', description='The total number of instances that are created on the host.', example='4'),
      memAllocationRatio?: string(name='MemAllocationRatio', description='The maximum memory usage per host in the dedicated cluster.', example='90'),
      memoryUsed?: string(name='MemoryUsed', description='The amount of used memory space on the host. Unit: MB.', example='16384'),
      openPermission?: string(name='OpenPermission', description='Indicates whether the operating system permissions of the host can be granted. Valid values:

*   **0** or **null**: The permissions cannot be granted.
*   **1**: The permissions can be granted.
*   **3**: The permissions have been granted.', example='3'),
      storageUsed?: string(name='StorageUsed', description='The amount of used storage space on the host.', example='0'),
      VPCId?: string(name='VPCId', description='The ID of the virtual private cloud (VPC) to which the host belongs.', example='vpc-bpxxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch associated with the specified VPC.', example='vsw-bpxxxxxxx'),
      zoneId?: string(name='ZoneId', description='The zone ID of the host.', example='cn-hangzhou-i'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts', description='An array that consists of hosts returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C860658E-68A6-46C1-AF6E-3AE7C4D3CACF'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

/**
  * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  *
 */
async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDetachedBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the data backup file.', example='327xxxxx3', position='Query'),
  backupMode?: string(name='BackupMode', description='The backup mode of the data backup file. Valid values:

*   **Automated**
*   **Manual**', example='Automated', position='Query'),
  backupStatus?: string(name='BackupStatus', description='The status of the data backup file. Valid values:

*   **Success**
*   **Failed**', example='Success', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time.

The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2021-03-15T16:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

>  Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

>  Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  region: string(name='Region', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2021-03-01T16:00Z', position='Query'),
}

model DescribeDetachedBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupDownloadURL?: string(name='BackupDownloadURL', description='The URL that is used to download the data backup file over the Internet. If the data backup file cannot be downloaded, an empty string is returned.', example='http://rdsbak-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      backupEndTime?: string(name='BackupEndTime', description='The end time of the backup.

The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2019-02-13T12:20:00Z'),
      backupId?: string(name='BackupId', description='The ID of the data backup file.', example='321020562'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL', description='The URL that is used to download the data backup file over an internal network. If the data backup file cannot be downloaded, an empty string is returned.', example='http://rdsbak-hz-v3.oss-cn-hangzhou-internal.aliyuncs.com/xxxxx'),
      backupMethod?: string(name='BackupMethod', description='The method that is used to generate the data backup file. Valid values:

*   **Logical**: logical backup
*   **Physical**: physical backup', example='Physical'),
      backupMode?: string(name='BackupMode', description='The backup mode of the data backup file. Valid values:

*   **Automated**
*   **Manual**', example='Automated'),
      backupSize?: long(name='BackupSize', description='The size of the data backup file. Unit: bytes.', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', description='The start time of the backup.

The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2019-02-03T12:20:00Z'),
      backupStatus?: string(name='BackupStatus', description='The status of the data backup file. Valid values:

*   **Success**
*   **Failed**', example='Success'),
      backupType?: string(name='BackupType', description='The backup type. Valid values:

*   **FullBackup**
*   **IncrementalBackup**', example='FullBackup'),
      consistentTime?: long(name='ConsistentTime', description='The point in time at which the data in the data backup file is consistent. The return value of this parameter is a timestamp.

>  If the instance runs MySQL 5.6, a timestamp is returned. Otherwise, the value 0 is returned.', example='1576506856'),
      DBInstanceComment?: string(name='DBInstanceComment', description='The description of the instance.', example='test'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
      hostInstanceID?: string(name='HostInstanceID', description='The No. of the instance that generates the data backup file. This parameter is used to indicate whether the instance that generates the data backup file is a primary instance or a secondary instance.', example='5882781'),
      isAvail?: int32(name='IsAvail', description='Indicates whether the data backup file is available. Valid values:

*   **0**: The data backup file is unavailable.
*   **1**: The data backup file is available.', example='1'),
      metaStatus?: string(name='MetaStatus', description='The status of the data backup file that is used to restore individual databases or tables. Valid values:

*   **OK**: The data backup file is normal.
*   **LARGE**: The data backup file contains an abnormally large number of tables. It cannot be used to restore individual databases or tables.
*   **EMPTY**: The data backup file is generated from a failed backup task.', example='OK'),
      storeStatus?: string(name='StoreStatus', description='Indicates whether the data backup file can be deleted. Valid values:

*   **Enabled**: The data backup file can be deleted.
*   **Disabled**: The data backup file cannot be deleted.', example='Disabled'),
    }
  ](name='Backup')
  }(name='Items', description='The details of the returned data backup files.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: string(name='PageRecordCount', description='The number of data backup files on the page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  totalRecordCount?: string(name='TotalRecordCount', description='The total number of entries returned.', example='100'),
}

model DescribeDetachedBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDetachedBackupsResponseBody(name='body'),
}

/**
  * This operation is supported for instances that run MySQL with local SSDs. For more information about how to retain the data backup files of an instance after the instance is released, see [Configure automatic backup](~~98818~~).
  *
 */
async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDetachedBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosticReportListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
}

model DescribeDiagnosticReportListResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
  reportList?: [ 
    {
      diagnosticTime?: string(name='DiagnosticTime', description='The time when the diagnosis was performed.', example='2018-01-17T12:46:09Z'),
      downloadURL?: string(name='DownloadURL', description='The URL that is used to download the diagnostic report over the Internet. If the diagnostic report cannot be downloaded, an empty string is returned.', example='http://rdsreport-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      endTime?: string(name='EndTime', description='The end time of the monitoring data.', example='2018-01-10T15:31:00Z'),
      score?: int32(name='Score', description='The diagnostic score.', example='100'),
      startTime?: string(name='StartTime', description='The start time of the monitoring data.', example='2018-01-10T15:30:00Z'),
    }
  ](name='ReportList', description='The details of a diagnostic report.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B7E9A79C-DE1B-4398-845F-D654FC0958BD'),
}

model DescribeDiagnosticReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportListResponseBody(name='body'),
}

/**
  * @deprecated
  * > This operation is no longer maintained. You can use the [DescribeDiagnosticReportList](~~443006~~) operation of Database Autonomy Service (DAS) to query a list of diagnostic reports.
  * *   The returned diagnosis reports include data collection time, data generation time, and download URLs. The system retains the reports for 15 days.
  * *   This operation is not suitable for instances that run SQL Server 2017 on RDS Cluster Edition.
  *
 */
// Deprecated
async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosticReportList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeErrorLogsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The time span between the start time and the end time must be less than 31 days. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2011-05-30T20:10Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: a non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30** to **100**. Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2011-05-01T20:10Z', position='Query'),
}

model DescribeErrorLogsResponseBody = {
  items?: {
    errorLog?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the error log was generated. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2011-05-30T12:11:04Z'),
      errorInfo?: string(name='ErrorInfo', description='The error log information.', example='spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required'),
    }
  ](name='ErrorLog')
  }(name='Items', description='The list of items in an error log.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of error logs on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98504E07-BB0E-40FC-B152-E4882615812C'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of error logs.', example='100'),
}

model DescribeErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeErrorLogsResponseBody(name='body'),
}

/**
  * Error logs contain the time when they were generated and the error messages.
  *
 */
async function describeErrorLogs(request: DescribeErrorLogsRequest): DescribeErrorLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeErrorLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-06-12T15:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the IDs of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-06-11T15:00:00Z', position='Query'),
}

model DescribeEventsResponseBody = {
  eventItems?: {
    eventItems?: [ 
    {
      callerUid?: long(name='CallerUid', description='The ID of the user who executed the event.', example='22973492**********'),
      eventId?: int32(name='EventId', description='The ID of the event.', example='11000053'),
      eventName?: string(name='EventName', description='The name of the event. For more information, see [View the event history of an ApsaraDB RDS instance](~~129759~~).', example='ModifySecurityIPList'),
      eventPayload?: string(name='EventPayload', description='The request or context parameters of the event.', example='{\\"Domain\\": \\"rds-inc-share.aliyuncs.com\\", \\"Api\\": \\"ReleaseInstancePublicConnection\\"}'),
      eventReason?: string(name='EventReason', description='The source of the event. For more information, see [View the event history of an ApsaraDB RDS instance](~~129759~~).', example='FROM_USER'),
      eventRecordTime?: string(name='EventRecordTime', description='The time when the event was recorded. The time is slightly later than the time the event occurred.', example='2019-08-20T01:12:49Z'),
      eventTime?: string(name='EventTime', description='The time when the event occurred.', example='2019-08-20T01:08:22Z'),
      eventType?: string(name='EventType', description='The type of the event. For more information, see [View the event history of an ApsaraDB RDS instance](~~129759~~).', example='NetworkManagement'),
      eventUserType?: string(name='EventUserType', description='The type of the user who executed the event.', example='SYSTEM'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceName?: string(name='ResourceName', description='The name of the resource associated with the event. Only instance IDs are supported for this parameter.', example='rm-bp1z3065m9976ix8a'),
      resourceType?: string(name='ResourceType', description='The type of the resource associated with the event. Only instances are supported for this parameter.', example='instance'),
    }
  ](name='EventItems')
  }(name='EventItems', description='The details of the events.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A103039D-B1B2-4C57-B989-7D7C0DA95426'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='40'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

/**
  * The event history feature enables you to view the events that occurred within a region over a specific time range. Historical events include instance creation and parameter modification. For more information, see [View the event history of an ApsaraDB RDS instance](~~129759~~).
  * Before you call this operation, make sure that the event history feature is enabled. Otherwise, this operation fails.
  *
 */
async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGadInstancesRequest {
  gadInstanceName?: string(name='GadInstanceName', description='The ID of the single global active database cluster that you want to query.

*   If you leave this parameter empty, this operation returns the details about all global active database clusters that are created within your Alibaba Cloud account.
*   If you specify this parameter, this operation returns the details about the single global active database cluster that you specify.

>  You can call this operation with this parameter left empty to query the details about all global active database clusters that are created within your Alibaba Cloud account. Then, you can call this operation again with this parameter specified to query the details about the single global active database cluster that you specify.', example='gad-rm-bp1npi2j8********', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the global active database clusters that you want to query reside. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
}

model DescribeGadInstancesResponseBody = {
  gadInstances?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the global active database cluster was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-10-21T02:57:08Z'),
      description?: string(name='Description', description='The name of the global active database cluster.', example='GadTest'),
      gadInstanceMembers?: [ 
        {
          DBInstanceID?: string(name='DBInstanceID', description='The ID of the node.', example='rm-bp1npi2j8********'),
          dtsInstance?: string(name='DtsInstance', description='A JSON array that consists of the details about the Data Transmission Service (DTS) synchronization task.

>  Each unit node uses DTS to synchronize data with the central node. This parameter contains the ID of the DTS synchronization link and the ID of the DTS synchronization request.', example='{\\"dtsInstanceId\\":\\"dtsm9t107c********\\",\\"dtsRequestId\\":\\"190F0C6C-4BE6-5676-989B-DBDE6D34CD9C\\"}'),
          engine?: string(name='Engine', description='The database engine that is run by the node.

>  The value of this parameter is fixed as **mysql**.', example='mysql'),
          engineVersion?: string(name='EngineVersion', description='The database engine version that is run by the node.', example='8.0'),
          regionId?: string(name='RegionId', description='The ID of the region where the node resides.', example='cn-hangzhou'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****'),
          role?: string(name='Role', description='The type of the node. Valid values:

*   **CENTRAL**: The node is the central node. Each global active database cluster has only one central node. All unit nodes synchronize data from the central node.
*   **UNIT**: The node is a unit node. Each global active database cluster can have up to 10 unit nodes. All unit nodes synchronize data from the central node.', example='CENTRAL'),
          status?: string(name='Status', description='The status of the node. Valid values:

*   **activation**: The node is running.
*   **creating**: The node is being created.', example='activation'),
        }
      ](name='GadInstanceMembers', description='An array that consists of the details about the nodes in the global active database cluster.'),
      gadInstanceName?: string(name='GadInstanceName', description='The ID of the global active database cluster.', example='gad-rm-bp1npi2j8********'),
      modificationTime?: string(name='ModificationTime', description='The time when the most recent modification was made to the global active database cluster. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-10-21T03:01:20Z'),
      service?: string(name='Service', description='The database engine that is run by the global active database cluster.

>  The value of this parameter is fixed as **mysql**.', example='mysql'),
      status?: string(name='Status', description='The status of the global active database cluster. Valid values:

*   **activation**: The global active database cluster is running.
*   **creating**: The global active database cluster is being created.
*   **replica_adding**: Nodes are being added to the global active database cluster.', example='activation'),
    }
  ](name='GadInstances', description='An array that consists of the details about the global active database clusters that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='76AF0609-4195-5DFC-BC78-3AD76FF872BB'),
}

model DescribeGadInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGadInstancesResponseBody(name='body'),
}

async function describeGadInstances(request: DescribeGadInstancesRequest): DescribeGadInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGadInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHADiagnoseConfigRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHADiagnoseConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='06B220E2-EAC5-4DBE-A1FC-1B62DB6A****'),
  tcpConnectionType?: string(name='TcpConnectionType', description='The availability check method of the instance. Valid values:

*   **LONG**: Alibaba Cloud uses persistent connections to check the availability of the instance.
*   **SHORT**: Alibaba Cloud uses short-lived connections to check the availability of the instance.', example='LONG'),
}

model DescribeHADiagnoseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHADiagnoseConfigResponseBody(name='body'),
}

/**
  * By default, Alibaba Cloud uses persistent connections to check the availability of an instance. For more information, see [What is availability detection?](~~207467~~)
  *
 */
async function describeHADiagnoseConfig(request: DescribeHADiagnoseConfigRequest): DescribeHADiagnoseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHADiagnoseConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHASwitchConfigRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHASwitchConfigResponseBody = {
  HAConfig?: string(name='HAConfig', description='The status of the automatic primary/secondary switchover feature. Valid values:

*   **Auto:** The automatic primary/secondary switchover feature is enabled. The system automatically switches your workloads over from the instance to its secondary instance in the event of a fault.
*   **Manual:** The automatic primary/secondary switchover feature is temporarily disabled.', example='Manual'),
  manualHATime?: string(name='ManualHATime', description='The time when the automatic primary/secondary switchover feature is enabled again. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-08-29T15:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FDF4B79-2741-4C5F-8C76-4B953FC5C2B1'),
}

model DescribeHASwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHASwitchConfigResponseBody(name='body'),
}

/**
  * After a primary/secondary switchover is complete, the primary instance is demoted to the secondary instance and the secondary instance is promoted to primary. For more information, see [Switch workloads over between primary and secondary ApsaraDB RDS instances](~~96054~~).
  * When you call this operation, you must make sure that the instance runs RDS High-availability Edition, RDS Enterprise Edition, and RDS Cluster Edition. RDS Cluster Edition is supported for ApsaraDB RDS for MySQL and ApsaraDB RDS for SQL Server.
  *
 */
async function describeHASwitchConfig(request: DescribeHASwitchConfigRequest): DescribeHASwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHASwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryTasksRequest {
  fromExecTime?: int32(name='FromExecTime', example='0', position='Query'),
  fromStartTime: string(name='FromStartTime', example='2022-01-02T11:31:03Z', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', example='Instance', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzbvctytru7ua', position='Query'),
  resourceOwnerAccount?: long(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
  toExecTime?: int32(name='ToExecTime', example='0', position='Query'),
  toStartTime: string(name='ToStartTime', example='2022-03-02T11:31:03Z', position='Query'),
}

model DescribeHistoryTasksResponseBody = {
  items?: [ 
    {
      actionInfo?: string(name='ActionInfo', example='{\\"steps\\":[{\\"action_info\\":{\\"Waiting\\":[\\"modifySwitchTime\\"]},\\"step_name\\":\\"exec_task\\"}]}'),
      callerSource?: string(name='CallerSource', example='141345906006****'),
      callerUid?: string(name='CallerUid', example='User'),
      currentStepName?: string(name='CurrentStepName', example='exec_task'),
      dbType?: string(name='DbType', example='mysql'),
      endTime?: string(name='EndTime', example='2022-02-03T12:06:17Z'),
      instanceId?: string(name='InstanceId', example='rm-uf62br2491p5l****'),
      instanceName?: string(name='InstanceName'),
      instanceType?: string(name='InstanceType', example='Instance'),
      product?: string(name='Product', example='rds'),
      progress?: float(name='Progress', example='79.0'),
      reasonCode?: string(name='ReasonCode'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      remainTime?: int32(name='RemainTime', example='1000'),
      startTime?: string(name='StartTime', example='2022-02-03T11:31:03Z'),
      status?: int32(name='Status', example='Running'),
      taskDetail?: string(name='TaskDetail', example='{\\"callerUid\\":\\"test\\"}'),
      taskId?: string(name='TaskId', example='t-83br18hloy3faf****'),
      taskType?: string(name='TaskType', example='autotest_dispatch_cases'),
      uid?: string(name='Uid', example='141345906006****'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5CD61041-35F7-10F7-BE94-33A48B22****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeHistoryTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHistoryTasksResponseBody(name='body'),
}

async function describeHistoryTasks(request: DescribeHistoryTasksRequest): DescribeHistoryTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostWebShellRequest {
  accountName: string(name='AccountName', example='testOsAccount1', position='Query'),
  accountPassword: string(name='AccountPassword', example='***', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  hostName: string(name='HostName', example='testHost1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionID: string(name='RegionID', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl', example='***'),
  requestId?: string(name='RequestId', example='842B73C8-5776-4BD9-9872-69C8C46DD7D3'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostWebShell', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bpxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', minimum=1, maximum=50, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**(Default)
*   **50**
*   **100**', example='30', minimum=30, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy mode.', example='API', position='Query'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  items?: {
    item?: [ 
    {
      autoRenew?: string(name='AutoRenew', description='Indicates whether auto-renewal is enabled.', example='True'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bpxxxxxxx'),
      duration?: int32(name='Duration', description='The billing cycle of renewal.', example='1'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the instance.', example='Normal'),
    }
  ](name='Item')
  }(name='Items', description='The renewal information of the instance.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4182309D-CD29-49B1-B4A5-D7CB4D56C31F'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAutoRenewalAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceCrossBackupPolicyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the IDs of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceCrossBackupPolicyResponseBody = {
  backupEnabled?: string(name='BackupEnabled', description='The status of the cross-region backup feature on the instance. Valid values:

*   **Disable**: The feature is disabled.
*   **Enable**: The feature is enabled.', example='Enable'),
  backupEnabledTime?: string(name='BackupEnabledTime', description='The point in time at which the cross-region backup feature is enabled. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-06-12T05:44:21Z'),
  crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the region in which the cross-region backup files of the instance is stored.', example='cn-shanghai'),
  crossBackupType?: string(name='CrossBackupType', description='The policy that is used to save the cross-region backup files of the instance. Default value: **1**. The value 1 indicates that all cross-region backup files are saved.', example='1'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The name of the instance. It must be 2 to 256 characters in length. The name can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

> The name cannot start with http:// or https://.', example='Test database'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance', example='rm-uf6wjk5xxxxxxxxxx'),
  DBInstanceStatus?: string(name='DBInstanceStatus', description='The status of the instance. For more information, see [Instance state table](~~26315~~).', example='Running'),
  engine?: string(name='Engine', description='The type of the database engine.', example='mysql'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.6'),
  lockMode?: string(name='LockMode', description='The lock status of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked because its storage capacity is exhausted and the instance is inaccessible.', example='Unlock'),
  logBackupEnabled?: string(name='LogBackupEnabled', description='The status of the cross-region log backup feature on the instance. Valid values:

*   **Disable**: The feature is disabled.
*   **Enable**: The feature is enabled.', example='Enable'),
  logBackupEnabledTime?: string(name='LogBackupEnabledTime', description='The time when cross-region log backup was enabled on the instance. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-06-12T05:44:21Z'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB7667B2-72C8-497B-9BD8-3B343CEF51AB'),
  retentType?: int32(name='RetentType', description='The policy that is used to retain the cross-region backup files of the instance. Default value: **1**. The value 1 indicates that the cross-region backup files of the instance are retained based on the specified retention period.', example='1'),
  retention?: int32(name='Retention', description='The number of days for which the cross-region backup files of the instance are retained. Valid values: **7 to 1825**.', example='15'),
}

model DescribeInstanceCrossBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceCrossBackupPolicyResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
  *
 */
async function describeInstanceCrossBackupPolicy(request: DescribeInstanceCrossBackupPolicyRequest): DescribeInstanceCrossBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceCrossBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceKeywordsRequest {
  key?: string(name='Key', description='The type of reserved keyword to query. Valid values:

*   **account**
*   **database**', example='account', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceKeywordsResponseBody = {
  key?: string(name='Key', description='The type of reserved keyword returned.', example='account'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
  words?: {
    word?: [ string ](name='word')
  }(name='Words', description='An array that consists of reserved keywords.'),
}

model DescribeInstanceKeywordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceKeywordsResponseBody(name='body'),
}

async function describeInstanceKeywords(request: DescribeInstanceKeywordsRequest): DescribeInstanceKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceKeywords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLocalAvailableRecoveryTimeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLocalAvailableRecoveryTimeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  recoveryBeginTime?: string(name='RecoveryBeginTime', description='The start of the time range to which the instance can be restored.', example='2020-03-16T07:59:18Z'),
  recoveryEndTime?: string(name='RecoveryEndTime', description='The end of the time range to which the instance can be restored.', example='2020-03-20T08:41:29Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14E986AC-0F27-4FFB-8EED-9A8A3A2A0309'),
}

model DescribeLocalAvailableRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLocalAvailableRecoveryTimeResponseBody(name='body'),
}

async function describeLocalAvailableRecoveryTime(request: DescribeLocalAvailableRecoveryTimeRequest): DescribeLocalAvailableRecoveryTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLocalAvailableRecoveryTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogBackupFilesRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2018-10-31T08:40Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **30** to **1000**. Default value: **30**.', example='30', minimum=30, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2018-10-01T08:40Z', position='Query'),
}

model DescribeLogBackupFilesResponseBody = {
  items?: {
    binLogFile?: [ 
    {
      downloadLink?: string(name='DownloadLink', description='The HTTP-based download URL of the log file. If the log file cannot be downloaded, an empty string is returned.', example='http://rdsbak-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      fileSize?: long(name='FileSize', description='The size of the log file. Unit: bytes.', example='788480'),
      intranetDownloadLink?: string(name='IntranetDownloadLink', description='The URL that is used to download the log file over an internal network. If the log file cannot be downloaded, an empty string is returned. This URL is valid for one hour.', example='http://rdsbak-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      linkExpiredTime?: string(name='LinkExpiredTime', description='The expiration time of the URL. The time follows the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-03-01T15:04:13Z'),
      logBeginTime?: string(name='LogBeginTime', description='The start time of the log file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2018-10-31T08:40Z'),
      logEndTime?: string(name='LogEndTime', description='The end time of the log file. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2018-10-31T08:40Z'),
    }
  ](name='BinLogFile')
  }(name='Items', description='The details of log files.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of log files on the current page.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F8EC669C-FC85-43D7-AF06-C3641626B37E'),
  totalFileSize?: long(name='TotalFileSize', description='The total size of log files. Unit: bytes.', example='2300'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of log files.', example='17'),
}

model DescribeLogBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogBackupFilesResponseBody(name='body'),
}

async function describeLogBackupFiles(request: DescribeLogBackupFilesRequest): DescribeLogBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetaListRequest {
  backupSetID?: int32(name='BackupSetID', description='The ID of the backup set from which you want to restore data. You can call the [DescribeBackups](~~26273~~) operation to query the IDs of backup sets.

> If you set the **RestoreType** parameter to **BackupSetID**, you must also specify this parameter.', example='14358', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  getDbName?: string(name='GetDbName', description='The name of the database to query. The system implements exact match based on the value of this parameter and returns the name of the matched database and the names of all tables contained in the database.

> If you leave this parameter empty, the system returns all databases that are created on the instance.', example='testdb1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', description='The number of the page to return. Valid values: any non-zero positive integer.**** Default value: **1**.

> This parameter only takes effect when you specify the **PageSize** parameter.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **1**.

> This parameter only takes effect when you specify the **PageIndex** parameter.', example='1', position='Query'),
  pattern?: string(name='Pattern', description='The name of the database to query. The system implements fuzzy match based on the value of this parameter and returns only the name of the matched database.

> For example, if you set the value to `test`, the system returns `testdb1` and `testdb2`. Then, you can specify the **GetDbName** parameter to query tables in the required database.', example='test', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The specified point in time must be earlier than the current time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC. You can call the [DescribeBackups](~~26273~~) operation to query the restorable time range.

> If you set the **RestoreType** parameter to **RestoreTime**, you must also specify this parameter.', example='2019-05-30T03:29:10Z', position='Query'),
  restoreType?: string(name='RestoreType', description='The method that is used to restore data. Valid values:

*   **BackupSetID**: Data is restored from a backup set. If you use this value, you must also specify the **BackupSetID** parameter.
*   **RestoreTime**: Data is restored to a specific point in time. If you use this value, you must also specify the **RestoreTime** parameter.

Default value: **BackupSetID**.', example='BackupSetID', position='Query'),
}

model DescribeMetaListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='rm-uf6wjk5xxxxxxx'),
  items?: {
    meta?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='testdb1'),
      size?: string(name='Size', description='The size of the table. Unit: KB.', example='64'),
      tables?: string(name='Tables', description='The name of the table.', example='test1'),
    }
  ](name='Meta')
  }(name='Items', description='An array consisting of the information about the databases and tables whose data is included in the backup set.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='60F9A12A-16B8-4728-B099-4CA38D32C31C'),
  totalPageCount?: int32(name='TotalPageCount', description='The total number of pages returned.', example='1'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='1'),
}

model DescribeMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetaListResponseBody(name='body'),
}

/**
  * Before you call the [RestoreTable](~~131510~~) operation to restore individual databases or tables of an ApsaraDB RDS for MySQL instance, you can call this operation to query the information about the databases and tables that can be restored. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
  * > This operation is supported only when the instance runs MySQL 8.0, MySQL 5.7, or MySQL 5.6 on RDS High-availability Edition with local disks.
  *
 */
async function describeMetaList(request: DescribeMetaListRequest): DescribeMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetaList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrateTaskByIdRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp11e1tzgxxxx4ox', position='Query'),
  migrateTaskId: string(name='MigrateTaskId', description='The ID of the migration task. You can call the [DescribeMigrateTasks](~~64563~~) operation to query the ID of the migration task.', example='235943', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeMigrateTaskByIdResponseBody = {
  backupMode?: string(name='BackupMode', description='The type of the migration task. Valid values:

*   **FULL**: The migration task migrates full backup files that can be used to restore the full data of the instance.
*   **UPDF**: The migration task migrates incremental or log backup files that can be used to restore the incremental data of the instance.', example='FULL'),
  createTime?: string(name='CreateTime', description='The time when the migration task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2020-05-30T12:11:04Z'),
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
  DBName?: string(name='DBName', description='The name of the database.', example='mytestdb'),
  description?: string(name='Description', description='The description of the migration task.', example='Success to DBCC checkdb asynchronously'),
  endTime?: string(name='EndTime', description='The time when the migration task was completed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-05-30T15:15:05Z'),
  isDBReplaced?: string(name='IsDBReplaced', description='Indicates whether the imported data overwrites the existing data. Valid values:

*   **False**: The imported data does not overwrite the existing data.
*   **True**: The imported data overwrites the existing data.', example='False'),
  migrateTaskId?: string(name='MigrateTaskId', description='The ID of the migration task.', example='235943'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6ED3635A-01F9-47BD-B9C8-CB3FD70A336E'),
  status?: string(name='Status', description='The status of the migration task. Valid values:

*   **NoStart**: The task has not started.
*   **Running**:The task is in progress.
*   **Success**: The task is successful.
*   **Failed**: The task failed.
*   **Waiting**: The task is waiting for an incremental backup file to be imported.', example='Success'),
}

model DescribeMigrateTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrateTaskByIdResponseBody(name='body'),
}

async function describeMigrateTaskById(request: DescribeMigrateTaskByIdRequest): DescribeMigrateTaskByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrateTaskById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrateTasksRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2017-10-25T01:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30** to **100**. Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2017-10-20T01:00Z', position='Query'),
}

model DescribeMigrateTasksResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  items?: {
    migrateTask?: [ 
    {
      backupMode?: string(name='BackupMode', description='The type of the migration task. Valid values:

*   **FULL**: The migration task migrates full backup files that can be used to restore the full data of the instance.
*   **UPDF**: The migration task migrates incremental or log backup files that can be used to restore the incremental data of the instance.', example='FULL'),
      createTime?: string(name='CreateTime', description='The time when the migration task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2017-05-30T12:11:04Z'),
      DBName?: string(name='DBName', description='The name of the database.', example='testDB'),
      description?: string(name='Description', description='The description of the migration task.', example='Api description'),
      endTime?: string(name='EndTime', description='The time when the migration task was completed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2017-05-30T13:11:04Z'),
      isDBReplaced?: string(name='IsDBReplaced', description='Indicates whether the imported data overwrites the existing data.', example='True'),
      migrateTaskId?: string(name='MigrateTaskId', description='The ID of the migration task.', example='564522545'),
      status?: string(name='Status', description='The status of the migration task. Valid values:

*   **NoStart**: The task is not started.
*   **Running**:The task is in progress.
*   **Success**: The task is successful.
*   **Failed**: The task failed.
*   **Waiting**: The task is waiting for an incremental backup file to be imported.', example='Success'),
    }
  ](name='MigrateTask')
  }(name='Items', description='The details of the migration task.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E356DDF-6B83-45DB-99D5-4B1E8A0D286B'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='30'),
}

model DescribeMigrateTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrateTasksResponseBody(name='body'),
}

/**
  * This operation allows you to query the migration tasks that are created for the instance over the last week.
  * > 
  * *   This operation is supported only for migration tasks that are created to migrate full backup files.
  * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
  *
 */
async function describeMigrateTasks(request: DescribeMigrateTasksRequest): DescribeMigrateTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrateTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModifyPGHbaConfigLogRequest {
  clientToken?: string(name='ClientToken', description='This parameter is reserved. You do not need to specify this parameter.', example='1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='pgm-bp1lymyn1v3i****', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2021-11-25T06:00:40Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2021-11-25T05:00:40Z', position='Query'),
}

model DescribeModifyPGHbaConfigLogResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='pgm-bp1lymyn1v3i****'),
  hbaLogItems?: {
    hbaLogItem?: [ 
    {
      afterHbaItems?: {
        hbaItem?: [ 
        {
          address?: string(name='Address', description='The IP address of the instance.', example='0.0.0.0/0'),
          database?: string(name='Database', description='The name of the database.', example='all'),
          mask?: string(name='Mask', description='The mask of the instance.', example='null'),
          method?: string(name='Method', description='The authentication method.', example='ldap'),
          option?: string(name='Option', description='The value of this parameter was set based on the value of the Method parameter.', example='null'),
          priorityId?: int32(name='PriorityId', description='The priority of the configuration item in the pg_hba.conf file.', example='0'),
          type?: string(name='Type', description='The type of the connection.', example='host'),
          user?: string(name='User', description='The username of the account that was used to connect to the instance.', example='ldapuser'),
        }
      ](name='HbaItem')
      }(name='AfterHbaItems', description='The configuration of the pg_hba.conf file after the modification was made.'),
      beforeHbaItems?: {
        hbaItem?: [ 
        {
          address?: string(name='Address', description='The IP address of the instance.', example='0.0.0.0/0'),
          database?: string(name='Database', description='The name of the database.', example='all'),
          mask?: string(name='Mask', description='The mask of the instance.', example='null'),
          method?: string(name='Method', description='The authentication method.', example='md5'),
          option?: string(name='Option', description='The value of this parameter was set based on the value of the Method parameter.', example='null'),
          priorityId?: int32(name='PriorityId', description='The priority of the configuration item in the pg_hba.conf file.', example='0'),
          type?: string(name='Type', description='The type of the connection.', example='host'),
          user?: string(name='User', description='The username of the account that was used to connect to the instance.', example='all'),
        }
      ](name='HbaItem')
      }(name='BeforeHbaItems', description='The configuration of the pg_hba.conf file before the modification was made.'),
      modifyStatus?: string(name='ModifyStatus', description='The status of the modification.

*   **success**: The modification is successful.
*   **failed**: The modification failed.
*   **setting**: The modification is being applied.', example='success'),
      modifyTime?: string(name='ModifyTime', description='The time when the pg_hba.conf file was modified. The time is displayed in UTC.', example='2021-11-25T06:00:40Z'),
      statusReason?: string(name='StatusReason', description='The reason why the modification failed.', example='null'),
    }
  ](name='HbaLogItem')
  }(name='HbaLogItems', description='An array that consists of the modifications to the pg_hba.conf file.'),
  logItemCount?: int32(name='LogItemCount', description='The number of modification records.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6D797E6B-E157-510C-A27F-6F9E6DA40633'),
}

model DescribeModifyPGHbaConfigLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModifyPGHbaConfigLogResponseBody(name='body'),
}

async function describeModifyPGHbaConfigLog(request: DescribeModifyPGHbaConfigLogRequest): DescribeModifyPGHbaConfigLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModifyPGHbaConfigLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModifyParameterLogRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the RDS instance.', example='rm-uf6wjk5xxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-03-01T10:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-03-01T00:00Z', position='Query'),
}

model DescribeModifyParameterLogResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the RDS instance.', example='rm-uf6wjk5xxxxx'),
  engine?: string(name='Engine', description='The database engine that the RDS instance runs.', example='mysql'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine that the RDS instance runs.', example='5.6'),
  items?: {
    parameterChangeLog?: [ 
    {
      modifyTime?: string(name='ModifyTime', description='The time when the parameter was reconfigured. This value is a UNIX timestamp. Unit: milliseconds.', example='1584076066000'),
      newParameterValue?: string(name='NewParameterValue', description='The new value of the parameter.', example='3'),
      oldParameterValue?: string(name='OldParameterValue', description='The original value of the parameter.', example='8'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='innodb_stats_sample_pages'),
      status?: string(name='Status', description='The status of the new value specified for the parameter. Valid values:

*   **Applied:** The new value has taken effect.
*   **Syncing:** The new value is being applied and has not taken effect.', example='Syncing'),
    }
  ](name='ParameterChangeLog')
  }(name='Items', description='An array that consists of parameter reconfiguration log entries.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8E88DED-533F-4B3C-9207-731FBF394CCA'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModifyParameterLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOssDownloadsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  migrateTaskId: string(name='MigrateTaskId', description='The ID of the backup data migration task. You can call the [DescribeMigrateTasks](~~64563~~) operation to query the ID of the migration task.', example='5625458541', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeOssDownloadsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  items?: {
    ossDownload?: [ 
    {
      backupMode?: string(name='BackupMode', description='The backup type. Valid values:

*   **Database**: full backup file
*   **Differential_Database**: incremental backup file
*   **Transaction_Log**: log backup file', example='Database'),
      createTime?: string(name='CreateTime', description='The time when the backup file was created in the download list. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2017-08-17T12:45:15Z'),
      description?: string(name='Description', description='The description of the file.', example='App description'),
      endTime?: string(name='EndTime', description='The end of the time range. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2017-08-27T12:45:15Z'),
      fileName?: string(name='FileName', description='The name of the backup file stored in the Object Storage Service (OSS) bucket.', example='test'),
      fileSize?: string(name='FileSize', description='The size of the backup file. Unit: MB', example='2'),
      isAvailable?: string(name='IsAvailable', description='Indicates whether the backup file is available. Valid values: **True and False**.', example='True'),
      status?: string(name='Status', description='The state of the backup file. Valid values:

*   **NoStart**:
*   **Downloading**
*   **Finished**
*   **DownloadFailed**
*   **VerifyFailed**
*   **Deleted**
*   **DeleteFailed**
*   **CheckSuccess**
*   **CheckFailed**
*   **Restoring**
*   **Restored**
*   **RestoredFailed**', example='Finished'),
    }
  ](name='OssDownload')
  }(name='Items', description='Details of the backup file.'),
  migrateTaskId?: string(name='MigrateTaskId', description='The ID of the migration task.', example='562154852'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5409D02-D661-4BF3-8F3D-0A814D0574E7'),
}

model DescribeOssDownloadsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssDownloadsResponseBody(name='body'),
}

/**
  * >  This operation is not supported for instances that run SQL Server 2017 EE or SQL Server 2019 EE.
  *
 */
async function describeOssDownloads(request: DescribeOssDownloadsRequest): DescribeOssDownloadsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssDownloads', 'POST', '/', 'json', false, 'json', request);
}

model DescribePGHbaConfigRequest {
  clientToken?: string(name='ClientToken', description='This parameter is reserved. You do not need to specify this parameter.', example='1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of instance.', example='pgm-bp1lymyn1v3i****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePGHbaConfigResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp1*****'),
  defaultHbaItems?: {
    hbaItem?: [ 
    {
      address?: string(name='Address', description='The IP addresses from which the specified users can access the specified databases. The value is fixed as 0.0.0.0/0.', example='0.0.0.0/0'),
      database?: string(name='Database', description='The names of the databases that the specified users are allowed to access. The value is fixed as all or replication.', example='all'),
      mask?: string(name='Mask', description='The mask of the instance. The value is fixed as null.', example='null'),
      method?: string(name='Method', description='The authentication method. The value is fixed as md5.', example='md5'),
      option?: string(name='Option', description='The value of this parameter is based on the value of the Method parameter. The value is fixed as null.', example='null'),
      priorityId?: int32(name='PriorityId', description='The priority of the configuration items in the pg_hba.conf file. This value is automatically generated.', example='0'),
      type?: string(name='Type', description='The type of connection to the instance. The value is fixed as host.', example='host'),
      user?: string(name='User', description='The user that is allowed to access the instance. The value is fixed as all.', example='all'),
    }
  ](name='HbaItem')
  }(name='DefaultHbaItems', description='An array that consists of the default configuration items in the pg_hba.conf file.'),
  hbaModifyTime?: string(name='HbaModifyTime', description='The time when the previous modification was made to the pg_hba.conf file.', example='2021-11-25T06:00:40Z'),
  lastModifyStatus?: string(name='LastModifyStatus', description='The status of the previous modification to the pg_hba.conf file.

Valid values:

*   **success**: The modification is successful.
*   **setting**: The modification is being applied.
*   **failed**: The modification fails.', example='success'),
  modifyStatusReason?: string(name='ModifyStatusReason', description='The reason why the previous modification was made to the pg_hba.conf file.', example='The specified users (testuser) is not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A147A124-A147-5CCF-9609-B73C028848DF'),
  runningHbaItems?: {
    hbaItem?: [ 
    {
      address?: string(name='Address', description='The IP address of the client.', example='0.0.0.0/0'),
      database?: string(name='Database', description='The name of the database that the specified users are allowed to access.', example='all'),
      mask?: string(name='Mask', description='The mask of the instance.', example='null'),
      method?: string(name='Method', description='The authentication method.', example='md5'),
      option?: string(name='Option', description='The value of this parameter varies based on the value of the Method parameter. The value is fixed as null.', example='null'),
      priorityId?: int32(name='PriorityId', description='The priority of the instance.', example='3'),
      type?: string(name='Type', description='The type of the connection. 

- **host**: The record matches TCP/IP connections, including SSL connections and non-SSL connections.
- **hostssl**: The record matches only TCP/IP connections that are established over SSL.
- **hostnossl**: The record matches only TCP/IP connections that are not established over SSL.', example='host'),
      user?: string(name='User', description='The username of the account that is used to connect to the instance.', example='all'),
    }
  ](name='HbaItem')
  }(name='RunningHbaItems', description='An array that consists of the current configuration items in the pg_hba.conf file.'),
}

model DescribePGHbaConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePGHbaConfigResponseBody(name='body'),
}

async function describePGHbaConfig(request: DescribePGHbaConfigRequest): DescribePGHbaConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePGHbaConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterGroupRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', description='The ID of the parameter template. You can call the [DescribeParameterGroups](~~144491~~) operation to query the IDs of parameter templates.', example='rpg-dp****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the parameter template. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterGroupResponseBody = {
  paramGroup?: {
    parameterGroup?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the parameter template was created.', example='2019-10-22T06:02:53Z'),
      engine?: string(name='Engine', description='The database engine.', example='mysql'),
      engineVersion?: string(name='EngineVersion', description='The database engine version.', example='5.6'),
      forceRestart?: int32(name='ForceRestart', description='Indicates whether the restart of an instance is required for the parameter template to take effect. Valid values:

*   **0**: A restart is not required.
*   **1**: A restart is required.', example='1'),
      paramCounts?: int32(name='ParamCounts', description='The number of parameters in the parameter template.', example='2'),
      paramDetail?: {
        parameterDetail?: [ 
        {
          paramName?: string(name='ParamName', description='The name of the parameter.', example='back_log'),
          paramValue?: string(name='ParamValue', description='The value of the parameter.', example='2000'),
        }
      ](name='ParameterDetail')
      }(name='ParamDetail', description='The array of parameters.'),
      parameterGroupDesc?: string(name='ParameterGroupDesc', description='The description of the parameter template.', example='testGroup1'),
      parameterGroupId?: string(name='ParameterGroupId', description='The ID of the parameter template.', example='rpg-dp****'),
      parameterGroupName?: string(name='ParameterGroupName', description='The name of the parameter template.', example='test123456'),
      parameterGroupType?: int32(name='ParameterGroupType', description='The type of the parameter template. Valid values:

*   **0**: the default parameter template.
*   **1**: a custom parameter template.
*   **2**: an automatic backup parameter template. After you apply this type of template, the system automatically backs up the original parameter settings and saves the backup as a template.', example='1'),
      updateTime?: string(name='UpdateTime', description='The time when the parameter template was last updated. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-10-22T06:07:54Z'),
    }
  ](name='ParameterGroup')
  }(name='ParamGroup', description='The information about the parameter template.'),
  relatedCustinsInfo?: {
    relatedCustinsInfo?: [ 
    {
      appliedTime?: string(name='AppliedTime', description='The time when the parameter template was applied.', example='2022-10-17T03:19:02Z'),
      DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-bp170****'),
    }
  ](name='RelatedCustinsInfo')
  }(name='RelatedCustinsInfo', description='The instance to which the parameter template was applied. 

>  The RelatedCustinsInfo parameter is available only for ApsaraDB RDS for PostgreSQL instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='498AE8CA-8C81-4A01-AF37-2B902014ED30'),
}

model DescribeParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupResponseBody(name='body'),
}

/**
  * You can configure a number of parameters at a time by using a parameter template and then apply the parameter template to instances. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) or [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * >  You can apply parameter templates only to ApsaraDB RDS for MySQL instances and ApsaraDB RDS for PostgreSQL instances.
  *
 */
async function describeParameterGroup(request: DescribeParameterGroupRequest): DescribeParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterGroupsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterGroupsResponseBody = {
  parameterGroups?: {
    parameterGroup?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the parameter template was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-11-21T01:48:39Z'),
      engine?: string(name='Engine', description='The database engine.', example='mysql'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.7'),
      forceRestart?: int32(name='ForceRestart', description='Indicates whether the restart of an instance is required for the parameter template to take effect. Valid values:

*   0: A restart is not required.
*   1: A restart is required.', example='1'),
      paramCounts?: int32(name='ParamCounts', description='The number of parameters in the parameter template.', example='2'),
      parameterGroupDesc?: string(name='ParameterGroupDesc', description='The type of the parameter template. Valid values:

*   0: the default parameter template.
*   1: a custom parameter template.
*   2: an automatic backup parameter template. After you apply this type of template, the system automatically backs up the original parameter settings and saves the backup as a template.', example='1'),
      parameterGroupId?: string(name='ParameterGroupId', description='The ID of the parameter template.', example='rpg-****'),
      parameterGroupName?: string(name='ParameterGroupName', description='The name of the parameter template.', example='test1234'),
      parameterGroupType?: int32(name='ParameterGroupType', description='The type of the parameter template. Valid values:

*   0: the default parameter template.
*   1: a custom parameter template.
*   2: an automatic backup parameter template. After you apply this type of template, the system automatically backs up the original parameter settings and saves the backup as a template.', example='1'),
      updateTime?: string(name='UpdateTime', description='The time when the parameter template was last updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-11-21T02:21:35Z'),
    }
  ](name='ParameterGroup')
  }(name='ParameterGroups', description='The details of parameter templates.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4A23265-C5B6-42E1-98A0-EFA1EB42E723'),
  signalForOptimizeParams?: boolean(name='SignalForOptimizeParams', description='Indicates whether parameter templates exist in the specified region. Valid values:

*   true
*   false', example='false'),
}

model DescribeParameterGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupsResponseBody(name='body'),
}

/**
  * You can configure a number of parameters at a time by using a parameter template and then apply the parameter template to instances. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) or [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * >  You can apply parameter templates only to ApsaraDB RDS for MySQL instances and ApsaraDB RDS for PostgreSQL instances.
  *
 */
async function describeParameterGroups(request: DescribeParameterGroupsRequest): DescribeParameterGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterTemplatesRequest {
  category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic:** The instance is of the Basic Edition.
*   **HighAvailability:** The instance is of the High-availability Edition.
*   **Finance:** The instance is of the Enterprise Edition.', example='Basic', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp1imnm**********', position='Query'),
  engine: string(name='Engine', description='The database engine that the instance runs. Valid values:

*   **mysql:** The instance runs MySQL.
*   **mssql:** The instance runs SQL Server.
*   **PostgreSQL:** The instance runs PostgreSQL.
*   **MariaDB:** The instance runs MariaDB.', example='mysql', position='Query'),
  engineVersion: string(name='EngineVersion', description='The version of the database engine. Valid values:

*   MySQL: **5.5 | 5.6 | 5.7 | 8.0**
*   SQL Server: **2008r2**
*   PostgreSQL: **9.4 | 10.0 | 11.0 | 12.0 | 13.0 | 14.0**
*   MariaDB: **10.3**', example='8.0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParameterTemplatesResponseBody = {
  engine?: string(name='Engine', description='The database engine.', example='mysql'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='8.0'),
  parameterCount?: string(name='ParameterCount', description='The number of parameters.', example='2'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode', description='The value range of the parameter.', example='[0-1024]'),
      forceModify?: string(name='ForceModify', description='Indicates whether the parameter can be modified. Valid values: **true | false**', example='true'),
      forceRestart?: string(name='ForceRestart', description='Indicates whether the modified parameter takes effect only after a database restart. Valid values: **true | false**', example='false'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='Page numbers of multi blocks reading once in some ddl query.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='loose_multi_blocks_ddl_count'),
      parameterValue?: string(name='ParameterValue', description='The default value of the parameter.', example='0'),
    }
  ](name='TemplateRecord')
  }(name='Parameters', description='The list of parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0F9B7410-EC73-510C-B385-8339455C12C6'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL 5.5, 5.6, 5.7, and 8.0
  * *   SQL Server 2008 R2
  * *   PostgreSQL 9.4, 10, 11, and 12
  * *   MariaDB 10.3
  *
 */
async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeParametersResponseBody = {
  configParameters?: {
    DBInstanceParameter?: [ 
    {
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='This parameter sets the default fill factor value at the server scope. A fill factor is provided to optimize index data storage and performance.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='fill factor'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter.', example='50'),
    }
  ](name='DBInstanceParameter')
  }(name='ConfigParameters', description='The list of parameters that are being synchronized. After you modify and submit the parameter settings, you must wait for the parameter modifications to be synchronized to the instance. After the synchronization, you can delete the parameters from the list.'),
  engine?: string(name='Engine', description='The type of the database engine.', example='MySQL'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.5'),
  paramGroupInfo?: {
    paramGroupId?: string(name='ParamGroupId', description='Parameter template ID.', example='rpg-sys-01040401010200'),
    parameterGroupDesc?: string(name='ParameterGroupDesc', description='Parameter template description.', example='sync_binlog=1000, innodb_flush_log_at_trx_commit=2, async'),
    parameterGroupName?: string(name='ParameterGroupName', description='Parameter template name.', example='mysql_innodb_8.0_basic_normal_high'),
    parameterGroupType?: string(name='ParameterGroupType', description='Parameter template type.', example='0'),
  }(name='ParamGroupInfo', description='Parameter template information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  runningParameters?: {
    DBInstanceParameter?: [ 
    {
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='This parameter sets the default fill factor value at the server scope. A fill factor is provided to optimize index data storage and performance.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='fill factor'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter.', example='0'),
    }
  ](name='DBInstanceParameter')
  }(name='RunningParameters', description='The list of parameters that are in use.'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL 5.5, MySQL 5.6, MySQL 5.7, or MySQL 8.0
  * *   SQL Server 2008 R2
  * *   PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, PostgreSQL 13, PostgreSQL 14, or PostgreSQL 15
  * *   MariaDB 10.3
  *
 */
async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  commodityCode?: string(name='CommodityCode', description='The commodity code of the instance. Valid values:

*   **bards**: The instance is a pay-as-you-go primary instance. This value is available at the China site (aliyun.com).
*   **rds**: The instance is a subscription primary instance. This is the default value. This value is available at the China site (aliyun.com).
*   **rords**: The instance is a pay-as-you-go read-only instance. This value is available at the China site (aliyun.com).
*   **rds_rordspre_public_cn**: The instance is a subscription read-only instance. This value is available on the China site (aliyun.com).
*   **bards_intl**: The instance is a pay-as-you-go primary instance. This value is available on the International site (alibabacloud.com).
*   **rds_intl**: The instance is a subscription primary instance. This value is available on the International site (alibabacloud.com).
*   **rords_intl**: The instance is a pay-as-you-go read-only instance. This value is available on the International site (alibabacloud.com).
*   **rds_rordspre_public_intl**: The instance is a subscription read-only instance. This value is available on the International site (alibabacloud.com).

> If you want to query the price of a read-only instance, you must specify this parameter.', example='rds', position='Query'),
  DBInstanceClass: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='rds.mysql.s1.small', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance for which you want to change the specifications or the instance that you want to renew.

> *   If you want to query the price of an specification change order or a renewal order, you must specify this parameter. - If the instance is a read-only instance, you must set this parameter to the ID of its primary instance.', example='rm-*****', position='Query'),
  DBInstanceStorage: int32(name='DBInstanceStorage', description='The storage capacity of the instance. Unit: GB. You can increase the storage capacity at a step size of 5 GB. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~).', example='20', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the instance. Valid values:

*   **local_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD (ESSD) of performance level 1 (PL1)
*   **cloud_essd2**: ESSD of PL2
*   **cloud_essd3**: ESSD of PL3', example='local_ssd', position='Query'),
  DBNode?: [ 
    {
      classCode?: string(name='ClassCode', description='The specification of the node.', example='mysql.n2.small.xc'),
      zoneId?: string(name='ZoneId', description='The zone ID of the node.', example='cn-hangzhou-j'),
    }
  ](name='DBNode', description='The information about the node.

> This parameter is suitable for RDS instances that run MySQL on RDS Cluster Edition.', shrink='json', position='Query'),
  engine: string(name='Engine', description='The database engine of the instance. Valid values:

*   **MySQL**
*   **SQLServer**
*   **PostgreSQL**
*   **MariaDB**', example='MySQL', position='Query'),
  engineVersion: string(name='EngineVersion', description='The database engine version of the instance.

*   Valid values when you set the Engine parameter to MySQL: **5.5**, **5.6**, **5.7**, and **8.0**
*   Valid values when you set the Engine parameter to SQLServer: **2008r2**, **2012**, **2012\\_ent_ha**, **2012\\_std_ha**, **2012\\_web**, **2014\\_std_ha**, **2016\\_ent_ha**, **2016\\_std_ha**, **2016\\_web**, **2017\\_std_ha**, **2017\\_ent**, **2019\\_std_ha**, and **2019\\_ent**
*   Valid values when you set the Engine parameter to PostgreSQL: **10.0**, **11.0**, **12.0**, **13.0**, **14.0**, and **15.0**
*   Valid value when you set the Engine parameter to MariaDB: **10.3**', example='5.5', position='Query'),
  instanceUsedType?: int32(name='InstanceUsedType', description='The role of the instance. Valid values:

*   **0**: primary instance
*   **3**: read-only instance', example='0', position='Query'),
  orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   **BUY**: purchase order
*   **UPGRADE**: specification change order
*   **RENEW**: renewal order', example='BUY', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Prepaid**: subscription
*   **Postpaid**: pay-as-you-go', example='Prepaid', position='Query'),
  quantity: int32(name='Quantity', description='The number of instances that you want to purchase. Valid values: **0 to 30**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverlessConfig?: {
    maxCapacity?: double(name='MaxCapacity'),
    minCapacity?: double(name='MinCapacity'),
  }(name='ServerlessConfig', shrink='json', position='Query'),
  timeType?: string(name='TimeType', description='The unit that is used to calculate the subscription duration of the instance. If you set the **CommodityCode** parameter to **RDS**, **rds_rordspre_public_cn**, **rds_intl**, or **rds_rordspre_public_intl**, you must also specify this parameter. Valid values:

*   **Year**
*   **Month**', example='Year', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription duration of the instance.

*   If you set the **TimeType** parameter to **Year**, the value of the UsedTime parameter ranges from **1 to 100**.
*   If you set the **TimeType** parameter to **Month**, the value of the UsedTime parameter ranges from **1 to 999**.

Default value: **1**.', example='1', minimum=1, maximum=999, position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the primary instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.

> This parameter is required to identify the zone for a vSwitch if you have specified the virtual private cloud (VPC) and the vSwitch.', example='cn-hangzhou-b', position='Query'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    activityInfo?: {
      checkErrMsg?: string(name='CheckErrMsg', description='The returned message.', example='Error description'),
      errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='123456'),
      success?: string(name='Success', description='Indicates whether the request was successful.', example='Success'),
    }(name='ActivityInfo', description='The information about the promotion.'),
    coupons?: {
      coupon?: [ 
      {
        couponNo?: string(name='CouponNo', description='The ID of the coupon.', example='123456'),
        description?: string(name='Description', description='The description of the coupon.', example='test'),
        isSelected?: string(name='IsSelected', description='Indicates whether the coupon is selected.', example='true'),
        name?: string(name='Name', description='The name of the coupon.', example='test'),
      }
    ](name='Coupon')
    }(name='Coupons', description='An array that consists of information about the coupon.'),
    currency?: string(name='Currency', description='The currency unit.', example='CNY'),
    discountPrice?: float(name='DiscountPrice', description='The discount.', example='0'),
    originalPrice?: float(name='OriginalPrice', description='The original price.', example='2504'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds', description='An array that consists of the ID of the promotion rule.'),
    tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='2504'),
  }(name='PriceInfo', description='The information about the price.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA0ADDDC-0BEB-4381-A3ED-73B4C79B8CC6'),
  rules?: {
    rule?: [ 
    {
      description?: string(name='Description', description='The description of the promotion rule.', example='Activity Description'),
      name?: string(name='Name', description='The name of the promotion rule.', example='Rule1'),
      ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1020021003939076'),
    }
  ](name='Rule')
  }(name='Rules', description='An array that consists of the details of the promotion rule.'),
  showDiscount?: boolean(name='ShowDiscount'),
  tradeMaxRCUAmount?: float(name='TradeMaxRCUAmount'),
  tradeMinRCUAmount?: float(name='TradeMinRCUAmount'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsResourceSettingsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceNiche: string(name='ResourceNiche', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRdsResourceSettingsResponseBody = {
  rdsInstanceResourceSettings?: {
    rdsInstanceResourceSetting?: [ 
    {
      endDate?: string(name='EndDate'),
      isTop?: string(name='IsTop'),
      noticeBarContent?: string(name='NoticeBarContent'),
      poppedUpButtonText?: string(name='PoppedUpButtonText'),
      poppedUpButtonType?: string(name='PoppedUpButtonType'),
      poppedUpButtonUrl?: string(name='PoppedUpButtonUrl'),
      poppedUpContent?: string(name='PoppedUpContent'),
      resourceNiche?: string(name='ResourceNiche'),
      startDate?: string(name='StartDate'),
    }
  ](name='RdsInstanceResourceSetting')
  }(name='RdsInstanceResourceSettings'),
  requestId?: string(name='RequestId'),
}

model DescribeRdsResourceSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsResourceSettingsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeRdsResourceSettings(request: DescribeRdsResourceSettingsRequest): DescribeRdsResourceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsResourceSettings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReadDBInstanceDelayRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-bp*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readInstanceId: string(name='ReadInstanceId', description='The ID of the read-only instance.', example='rr-bp*****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the global active database clusters that you want to query reside. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeReadDBInstanceDelayResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-bp*****'),
  delayTime?: int32(name='DelayTime', description='The latency of data replication between the primary instance and the read-only instance.', example='0'),
  items?: {
    items?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-bp*****'),
      readDBInstanceNames?: {
        readDBInstanceName?: [ string ](name='ReadDBInstanceName')
      }(name='ReadDBInstanceNames', description='An array that consists of information about the read-only instance.

>  This parameter is returned only when the primary instance runs the MySQL database engine.'),
      readDelayTimes?: {
        readDelayTime?: [ string ](name='ReadDelayTime')
      }(name='ReadDelayTimes', description='An array that consists of latencies.

>  This parameter is returned only when the primary instance runs the MySQL database engine.'),
      readonlyInstanceDelay?: {
        readonlyInstanceDelay?: [ 
        {
          flushLag?: string(name='FlushLag', description='The duration that is allowed for the latency in the persistence of WAL data. Unit: seconds.', example='0'),
          flushLatency?: string(name='FlushLatency', description='The data size that is allowed for the latency in the persistence of WAL data. Unit: MB.', example='0'),
          readDBInstanceName?: string(name='ReadDBInstanceName', description='The ID of the read-only instance.', example='rr-bp*****'),
          replayLag?: string(name='ReplayLag', description='The duration that is allowed for the latency in the playback of WAL data. Unit: seconds.', example='0'),
          replayLatency?: string(name='ReplayLatency', description='The data size that is allowed for the latency in the playback of WAL data. Unit: MB.', example='0'),
          sendLatency?: string(name='SendLatency', description='The data size that is allowed for the latency in the sending of WAL data. Unit: MB.', example='0'),
          writeLag?: string(name='WriteLag', description='The duration that is allowed for the latency in the write-back of WAL data. Unit: seconds.', example='0'),
          writeLatency?: string(name='WriteLatency', description='The data size that is allowed for the latency in the write-back of WAL data. Unit: MB.', example='0'),
        }
      ](name='ReadonlyInstanceDelay')
      }(name='ReadonlyInstanceDelay', description='An array that consists of information about the write-ahead log (WAL) latency.

>  This parameter is returned only when the primary instance runs the PostgreSQL database engine.'),
    }
  ](name='Items')
  }(name='Items', description='An array that consists of latency information.'),
  readDBInstanceId?: string(name='ReadDBInstanceId', description='The ID of the read-only instance.', example='rr-bp*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1BDDEA8-452D-450B-AB10-CD5C5BAFC5DF'),
}

model DescribeReadDBInstanceDelayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReadDBInstanceDelayResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The primary instance must run the MySQL or PostgreSQL database engine.
  * *   The primary instance must be attached with a read-only instance.
  *
 */
async function describeReadDBInstanceDelay(request: DescribeReadDBInstanceDelayRequest): DescribeReadDBInstanceDelayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReadDBInstanceDelay', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionInfosRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionInfosResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='RDSRegion')
  }(name='Regions', description='An array that consists of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-************'),
}

model DescribeRegionInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionInfosResponseBody(name='body'),
}

async function describeRegionInfos(request: DescribeRegionInfosRequest): DescribeRegionInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegionInfos', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language that is used for the return value of the **LocalName** parameter. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English

Default value: **en-US**.', example='en-US', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region. The return value of the LocalName parameter is in the language that is specified by the **AcceptLanguage** parameter. For example, if the value of the RegionId parameter in the response is cn-hangzhou, the following values are returned for the LocalName parameter:

*   If the value of the **AcceptLanguage** parameter is **zh-CN**, the value 华东1（杭州） is returned for the LocalName parameter.
*   If the value of the **AcceptLanguage** parameter is **en-US**, the value China (Hangzhou) is returned for the LocalName parameter.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint that is used to connect to Alibaba Cloud services in the region. For more information, see [Request structure](~~26223~~).', example='rds.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', description='The name of the zone. The return value of the ZoneName parameter is in the language that is specified by the **AcceptLanguage** parameter. For example, if the value of the RegionId parameter in the response is cn-hangzhou-h, the following values are returned for the LocalName parameter:

*   If the value of the **AcceptLanguage** parameter is **zh-CN**, the value 杭州 可用区H is returned for the LocalName parameter.
*   If the value of the **AcceptLanguage** parameter is **en-US**, the value Hangzhou Zone H is returned for the LocalName parameter.', example='Hangzhou Zone H'),
    }
  ](name='RDSRegion')
  }(name='Regions', description='An array that consists of the available regions and zones.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

/**
  * Before you call the [CreateDBInstance](~~26228~~) operation to create an RDS instance, you can call the DescribeRegions operation to query the available regions and zones.
  * >  If a zone supports the multi-zone deployment method, the value of the ZoneId parameter for the zone contains an MAZ part. Examples: cn-hangzhou-MAZ6(b,f) and cn-hangzhou-MAZ5(b,e,f).
  *
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRenewalPriceRequest {
  businessInfo?: string(name='BusinessInfo', description='The additional business information about the instance.', example='121436975448952', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For more information, see [Primary instance types](~~26312~~). By default, the current instance type applies.', example='mysql.n2.medium.2c', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  orderType?: string(name='OrderType', description='The type of the order that you want to place. Set the value to **BUY**.', example='BUY', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  quantity?: int32(name='Quantity', description='The number of the instances. Default value: **1**.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  timeType: string(name='TimeType', description='The renewal cycle of the instance. Valid values:

*   **Year**
*   **Month**', example='Year', position='Query'),
  usedTime: int32(name='UsedTime', description='The subscription duration of the instance. Valid values:

*   If you set the **TimeType** parameter to **Year**, the value of the UsedTime parameter is within the range of **1 to 3**.
*   If you set the **TimeType** parameter to **Month**, the value of the UsedTime parameter is within the range of **1 to 9**.', example='1', position='Query'),
}

model DescribeRenewalPriceResponseBody = {
  priceInfo?: {
    activityInfo?: {
      checkErrMsg?: string(name='CheckErrMsg', description='The description of the error.', example='Error description'),
      errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='123456'),
      success?: string(name='Success', description='Indicates whether the request was successful.', example='Success'),
    }(name='ActivityInfo', description='The information about the promotion.'),
    coupons?: {
      coupon?: [ 
      {
        couponNo?: string(name='CouponNo', description='The ID of the coupon.', example='123456'),
        description?: string(name='Description', description='The description of the coupon.', example='test'),
        isSelected?: string(name='IsSelected', description='Indicates whether the coupon is selected.', example='true'),
        name?: string(name='Name', description='The name of the coupon.', example='test'),
      }
    ](name='Coupon')
    }(name='Coupons', description='An array that consists of information about the coupon.'),
    currency?: string(name='Currency', description='The currency unit.', example='CNY'),
    discountPrice?: float(name='DiscountPrice', description='The discount.', example='27'),
    originalPrice?: float(name='OriginalPrice', description='The original price.', example='138'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds', description='An array that consists of the ID of the promotion rule.'),
    tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='111'),
  }(name='PriceInfo', description='An array that consists of price information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC9F4EF6-D038-4405-B497-1F48E722C9F2'),
  rules?: {
    rule?: [ 
    {
      description?: string(name='Description', description='The description of the promotion rule.', example='Content'),
      name?: string(name='Name', description='The name of the promotion rule.', example='test'),
      ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1001199213'),
    }
  ](name='Rule')
  }(name='Rules', description='An array that consists of the details of the promotion rule.'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

/**
  * This operation is supported only for subscription instances.
  *
 */
async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenewalPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceUsageRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeResourceUsageResponseBody = {
  archiveBackupSize?: long(name='ArchiveBackupSize', description='The storage that is occupied by archived backup files on the instance. Unit: bytes.', example='0'),
  backupDataSize?: long(name='BackupDataSize', description='The storage that is occupied by data backup files, excluding archived backup files, on the instance. Unit: bytes.', example='94324736'),
  backupLogSize?: long(name='BackupLogSize', description='The storage that is occupied by log backup files, excluding archived backup files, on the instance. Unit: bytes.', example='45145563'),
  backupOssDataSize?: long(name='BackupOssDataSize', description='The size of data backup files that are stored in Object Storage Service (OSS) buckets. Unit: bytes. The value 0 indicates no data backup files are stored in OSS buckets.', example='8821760'),
  backupOssLogSize?: long(name='BackupOssLogSize', description='The size of log backup files that are stored in OSS buckets. Unit: bytes. The value 0 indicates no log backup files are stored in OSS buckets.', example='44180999'),
  backupSize?: long(name='BackupSize', description='The storage that is used to store backup files. Unit: bytes. The value -1 indicates that no backup files are stored.', example='53002759'),
  coldBackupSize?: long(name='ColdBackupSize', description='The storage that is used to store cold backup files. Unit: bytes. The value -1 indicates that no cold backup files are stored.', example='2337275904'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  dataSize?: long(name='DataSize', description='The storage that is used to store data files. Unit: bytes. The value -1 indicates that no data files are stored.', example='1292094741'),
  diskUsed?: long(name='DiskUsed', description='The total storage that is occupied by data files and log files on the instance. Unit: bytes. The value -1 indicates that no data files or log files are stored on the instance.', example='2337275904'),
  engine?: string(name='Engine', description='The database engine that the instance runs.', example='MySQL'),
  logSize?: long(name='LogSize', description='The storage that is used to store log files. Unit: bytes. The value -1 indicates that no log files are stored.', example='1045181163'),
  paidBackupSize?: long(name='PaidBackupSize', description='The backup storage for which you must pay. ApsaraDB RDS provides a free quota on backup storage. You must pay for the backup storage that exceeds the free quota. Unit: bytes.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F937E173-559C-4498-8D90-38D32342B9E4'),
  SQLSize?: long(name='SQLSize', description='The storage that is occupied to execute SQL statements on the instance. Unit: bytes. The value -1 indicates that no SQL statements are executed.', example='315052751'),
}

model DescribeResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageResponseBody(name='body'),
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLCollectorPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyxxxxxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus', description='The status of the SQL Explorer (SQL Audit) feature. Valid values:

*   **Enable**
*   **Disabled**', example='Enable'),
  storagePeriod?: int32(name='StoragePeriod', description='None', example='0'),
}

model DescribeSQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLCollectorPolicyResponseBody(name='body'),
}

/**
  * This operation is applicable to the following database engine versions:
  * *   MySQL
  * *   SQL Server 2008 R2
  * *   PostgreSQL
  *
 */
async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLCollectorPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLCollectorRetentionRequest {
  regionId?: string(name='RegionId', description='The ID of the region to which the instance belongs. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Host'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSQLCollectorRetentionResponseBody = {
  configValue?: string(name='ConfigValue', description='The log backup retention duration that is allowed by the SQL explorer feature on the instance. Valid values:

*   **30:** 30 days
*   **180:** 180 days
*   **365:** one year
*   **1095:** three years
*   **1825:** five years', example='365'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5CEDCC2-CA75-43F7-9508-92F418CE6391'),
}

model DescribeSQLCollectorRetentionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLCollectorRetentionResponseBody(name='body'),
}

/**
  * The SQL explorer feature must be enabled for the instance.
  * The instance must run MySQL. For more information, see [SQL Explorer](~~96123~~).
  *
 */
async function describeSQLCollectorRetention(request: DescribeSQLCollectorRetentionRequest): DescribeSQLCollectorRetentionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLCollectorRetention', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLLogFilesRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  fileName?: string(name='FileName', description='The name of the audit log file.', example='custinsxxxxx.csv', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1 to 100000**. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid value: **30 to 200**. Default value: **30**.', example='30', minimum=30, maximum=200, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSQLLogFilesResponseBody = {
  items?: {
    logFile?: [ 
    {
      fileID?: string(name='FileID', description='The name of the file.', example='custinsxxxxx.csv'),
      logDownloadURL?: string(name='LogDownloadURL', description='The download URL of the file. If the audit log file cannot be downloaded, this parameter is null.', example='http://rdslog-hz-v3.oss-cn-hangzhou.aliyuncs.com/xxxxx'),
      logEndTime?: string(name='LogEndTime', description='The time at which the last SQL statement recorded in the audit log file was executed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2015-05-24T07:00:00Z'),
      logSize?: string(name='LogSize', description='The size of the audit log file. Unit: bytes.', example='3000'),
      logStartTime?: string(name='LogStartTime', description='The time at which the first SQL statement recorded in the audit log file was executed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2015-05-23T07:00:00Z'),
      logStatus?: string(name='LogStatus', description='The status of the audit log file. Valid values:

*   **Success**
*   **Failed**
*   **Generating**', example='Success'),
    }
  ](name='LogFile')
  }(name='Items', description='An array that consists of the returned audit log files.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='10'),
}

model DescribeSQLLogFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogFilesResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL
  * *   SQL Server 2008 R2
  * *   PostgreSQL
  * > 
  * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
  * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation can be called to query the SQL Explorer log files that are generated by calling the [DescribeSQLLogRecords](~~610533~~) operation with the request parameter **Form** set to **File**.
  *
 */
async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLLogFiles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLLogRecordsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  database?: string(name='Database', description='The name of the database. You can enter only one database name. If you specify this parameter, this operation returns the logs that are generated only for the specified database. If you do not specify this parameter, this operation returns the logs that are generated for all databases on the instance.', example='Database', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The time span between the start time and the end time must be less than 30 days. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2011-06-11T15:00:00Z', position='Query'),
  form?: string(name='Form', description='Specifies whether to generate an SQL audit log file or return SQL audit log entries. Valid values:

*   **File**: If you set this parameter to File, this operation generates an SQL audit log file and returns only common response parameters. After you call this operation, you must call the [DescribeSQLLogFiles](~~26295~~) operation to obtain the download URL of the SQL audit log file.
*   **Stream** (default): If you set this parameter to Stream, this operation returns SQL audit log entries.

> If you set this parameter to **File**, only ApsaraDB RDS for MySQL instances that use local disks and ApsaraDB RDS for SQL Server instances are supported, and a maximum of 1 million log entries are returned.', example='Stream', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30** to **100**. Default value: **30**.', example='30', minimum=30, maximum=200, position='Query'),
  queryKeywords?: string(name='QueryKeywords', description='The keyword that is used for the query.

*   When you call this operation and set the **Form** parameter to **File** to generate an audit file, you cannot filter log entries by keyword.
*   You can specify up to 10 keywords. The keywords are evaluated by using the **AND** operator. Separate multiple keywords with spaces.
*   If a field name in the specified SQL statement is enclosed in backquotes (\\`) and you want to use the field name as a keyword, you must enter the backquotes (\\`) as part of the field name. For example, if the field name is \\*\\*\\`id\\`**, enter **\\`id\\`** rather than **id\\*\\*.

> After you enter a keyword, the system matches the keyword based on the **Database**, **User**, and **QueryKeywords** parameters. The parameters are evaluated by using the **OR** operator.', example='table_name', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SQLId?: long(name='SQLId', description='The unique ID of the SQL statement.', example='25623548', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. You can query data in the last 15 days before the current date. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2011-06-01T15:00:00Z', position='Query'),
  user?: string(name='User', description='The username of the account. You can enter only one username. If you specify this parameter, this operation returns the logs that are generated only for the specified account. If you do not specify this parameter, this operation returns the logs that are generated for all accounts on the instance.', example='user', position='Query'),
}

model DescribeSQLLogRecordsResponseBody = {
  items?: {
    SQLRecord?: [ 
    {
      accountName?: string(name='AccountName', description='The username of the account that is recorded in the SQL audit log entry.', example='accounttest'),
      DBName?: string(name='DBName', description='The name of the database.', example='testDB'),
      executeTime?: string(name='ExecuteTime', description='The time at which the SQL statement was executed. The time follows the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2011-06-11T15:00:23Z'),
      hostAddress?: string(name='HostAddress', description='The IP address of the client that is connected to the instance.', example='192.168.0.121'),
      returnRowCounts?: long(name='ReturnRowCounts', description='The number of SQL audit log entries that are returned.', example='30'),
      SQLText?: string(name='SQLText', description='The SQL statement that is executed in the query.', example='update test.zxb set id=0 limit 1'),
      threadID?: string(name='ThreadID', description='The ID of the thread.', example='1025865428'),
      totalExecutionTimes?: long(name='TotalExecutionTimes', description='The execution duration of the SQL statement. Unit: microseconds.', example='600'),
    }
  ](name='SQLRecord')
  }(name='Items', description='An array that consists of the details about each SQL audit log entry.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of SQL audit log entries on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='08A3B71B-FE08-4B03-974F-CC7EA6DB1828'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of entries returned.', example='100'),
}

model DescribeSQLLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogRecordsResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL
  * *   SQL Server
  * *   PostgreSQL
  * > 
  * *   You can call this operation up to 1,000 times per minute per account. The calls initiated by using both your Alibaba Cloud account and RAM users within your Alibaba Cloud account are counted.
  * *   This operation cannot be used to query the logs that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
  * *   When you call this operation and set the **Form** parameter to **File** to generate an audit file, a maximum of 1 million log entries can be recorded in the audit file, and you cannot filter log entries by keyword.
  *
 */
async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLLogReportListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

>  The end time must be later than the start time.', example='2021-03-18T16:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any **non-zero** positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2021-03-13T16:00:00Z', position='Query'),
}

model DescribeSQLLogReportListResponseBody = {
  items?: {
    item?: [ 
    {
      latencyTopNItems?: {
        latencyTopNItem?: [ 
        {
          avgLatency?: long(name='AvgLatency', description='The average time that is required to execute the SQL statement. Unit: milliseconds.', example='500'),
          SQLExecuteTimes?: long(name='SQLExecuteTimes', description='The number of times that the SQL statement is executed.', example='5'),
          SQLText?: string(name='SQLText', description='The SQL statement returned.

>  Only the first 128 characters of the SQL statement are returned. In addition, only the SQL statements that take more than 100 ms to execute are returned.', example='SELECT * FROM table_name;'),
        }
      ](name='LatencyTopNItem')
      }(name='LatencyTopNItems', description='An array that consists of SQL statements executed with the highest latency.'),
      QPSTopNItems?: {
        QPSTopNItem?: [ 
        {
          SQLExecuteTimes?: long(name='SQLExecuteTimes', description='The number of times that the SQL statement is executed.', example='5'),
          SQLText?: string(name='SQLText', description='The SQL statement returned. 

>  Only the first 128 characters of the SQL statement are returned. In addition, only the SQL statements that take more than 5 ms to execute are returned.', example='SELECT * FROM table_name;'),
        }
      ](name='QPSTopNItem')
      }(name='QPSTopNItems', description='An array that consists of SQL statements executed the most frequently.'),
      reportTime?: string(name='ReportTime', description='The time when the report was generated. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-03-27T16:00:00Z'),
    }
  ](name='Item')
  }(name='Items', description='An array that consists of SQL log reports.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of reports on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='08A3B71B-FE08-4B03-974F-CC7EA6DB1828'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of records returned.', example='60'),
}

model DescribeSQLLogReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogReportListResponseBody(name='body'),
}

async function describeSQLLogReportList(request: DescribeSQLLogReportListRequest): DescribeSQLLogReportListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLLogReportList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecretsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the text within the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English

> The default value is **en-US**.', example='en-US', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  dbInstanceId?: string(name='DbInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-xjkljjxxxxx', position='Query'),
  engine: string(name='Engine', description='The database engine of the database.

> Only MySQL is supported.', example='MySQL', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber: long(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

> The default value is 1.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSecretsResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF4961DD-16F5-5B24-BD4C-0C7788F7ADAF'),
  secrets?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='1266348003******'),
      description?: string(name='Description', description='The description of the credential.', example='test'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      secretArn?: string(name='SecretArn', description='The Alibaba Cloud Resource Name (ARN) of the credential for the created Data API account.', example='acs:rds:cn-hangzhou:1335786***:dbInstance/rm-bp1m7l3j63****'),
      secretName?: string(name='SecretName', description='The name of the credential.', example='Foo'),
      username?: string(name='Username', description='The username that is used to access the database.', example='user_jack'),
    }
  ](name='Secrets', description='An array that consists of the details about the credential.'),
}

model DescribeSecretsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecretsResponseBody(name='body'),
}

async function describeSecrets(request: DescribeSecretsRequest): DescribeSecretsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecrets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupConfigurationRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx'),
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      networkType?: string(name='NetworkType', description='The network type of the ECS security group. Valid values:

*   **Classic**
*   **VPC**', example='VPC'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the ECS security group.', example='sg-xxxxxxx'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='security-group-emraccess'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items', description='An array that consists of ECS security groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='87BDAE8C-ACB0-4A26-BBCC-7D1DD31D630D'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

/**
  * After an RDS instance is added to an ECS security group, all ECS instances in the security group can access the RDS instance. For more information, see [Configure a whitelist for an RDS instance](~~96118~~).
  *
 */
async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroupConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlotsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='ETnLKlblzczshOTUbOC****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='实例ID。可调用[DescribeDBInstances](~~26232~~)查询。', example='pgm-bp102g323jd4****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID，可以为空。', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSlotsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='76AF0609-4195-5DFC-BC78-3AD76FF872BB'),
  slots?: [ 
    {
      database?: string(name='Database', description='The name of the database in which the replication slot resides.', example='db_test01'),
      plugin?: string(name='Plugin', description='The extension that is used by the replication slot.', example='test_decoding'),
      slotName?: string(name='SlotName', description='The name of the replication slot.', example='slot_test01'),
      slotStatus?: string(name='SlotStatus', description='The status of the replication slot.

Valid values:

*   ACTIVE

    <!-- -->

    <!-- -->

    <!-- -->

*   INACTIVE

    <!-- -->

    <!-- -->

    <!-- -->', example='INACTIVE'),
      slotType?: string(name='SlotType', description='The type of the replication slot.', example='logical'),
      temporary?: string(name='Temporary', description='Indicates whether the replication slot is temporary.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false'),
      walDelay?: string(name='WalDelay', description='The number of logs that are accumulated for the replication slot.', example='16 MB'),
    }
  ](name='Slots', description='An array that consists of information about replication slots.'),
}

model DescribeSlotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlotsResponseBody(name='body'),
}

/**
  * This operation is available only for ApsaraDB RDS for PostgreSQL instances.
  *
 */
async function describeSlots(request: DescribeSlotsRequest): DescribeSlotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5******', position='Query'),
  DBName?: string(name='DBName', example='RDS_MySQL', position='Query'),
  endTime: string(name='EndTime', example='2020-06-18T16:00Z', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SQLHASH?: string(name='SQLHASH', example='U2FsdGVk****', position='Query'),
  startTime: string(name='StartTime', example='2020-06-17T16:00Z', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='rm-uf6wjk5*******'),
  engine?: string(name='Engine', example='MySQL'),
  items?: {
    SQLSlowRecord?: [ 
    {
      applicationName?: string(name='ApplicationName', example='example'),
      clientHostName?: string(name='ClientHostName', example='example'),
      cpuTime?: long(name='CpuTime', example='0.002'),
      DBName?: string(name='DBName', example='testDB'),
      executionStartTime?: string(name='ExecutionStartTime', example='2020-06-18T01:40:44Z'),
      hostAddress?: string(name='HostAddress', example='xxx[xxx] @  [1xx.xxx.xxx.xx]'),
      lastRowsAffectedCount?: long(name='LastRowsAffectedCount', example='2'),
      lockTimes?: long(name='LockTimes', example='0'),
      logicalIORead?: long(name='LogicalIORead', example='383'),
      parseRowCounts?: long(name='ParseRowCounts', example='1'),
      physicalIORead?: long(name='PhysicalIORead', example='200'),
      queryTimeMS?: long(name='QueryTimeMS', example='2001'),
      queryTimes?: long(name='QueryTimes', example='2'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      rowsAffectedCount?: long(name='RowsAffectedCount', example='34'),
      SQLHash?: string(name='SQLHash', example='U2FsdGVk****'),
      SQLText?: string(name='SQLText', example='select sleep(2)'),
      userName?: string(name='UserName', example='user'),
      writeIOCount?: long(name='WriteIOCount', example='22'),
    }
  ](name='SQLSlowRecord')
  }(name='Items', description='An array that consists of the information about each slow query log.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='4DBB1BB0-E5D8-4D41-B1C9-142364DB****'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

/**
  * The unique ID of the SQL statement.
  *
 */
async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBName?: string(name='DBName', description='The name of the database that you want to query.', example='RDS_MySQL', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The time span between the start time and the end time cannot exceed 31 days. Specify the time in the *yyyy-MM-dd*Z format. The time must be in UTC.', example='2011-05-30Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=65535, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30** to **100**. Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sortKey?: string(name='SortKey', description='The dimension based on which ApsaraDB RDS sorts the returned entries. Valid values:

*   **TotalExecutionCounts**: ApsaraDB RDS sorts the returned entries based on the total number of SQL statements that are executed.
*   **TotalQueryTimes**: ApsaraDB RDS sorts the returned entries based on the total execution duration.
*   **TotalLogicalReads**: ApsaraDB RDS sorts the returned entries based on the total number of logical reads.
*   **TotalPhysicalReads**: ApsaraDB RDS sorts the returned entries based on the total number of physical reads.

>  This parameter is supported only for instances that run SQL Server 2008 R2.', example='TotalExecutionCounts', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*Z format. The time must be in UTC.', example='2011-05-01Z', position='Query'),
}

model DescribeSlowLogsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  endTime?: string(name='EndTime', description='The end date of the time range that was queried.', example='2011-05-30Z'),
  engine?: string(name='Engine', description='The database engine of the instance.', example='MySQL'),
  items?: {
    SQLSlowLog?: [ 
    {
      avgExecutionTime?: long(name='AvgExecutionTime', description='The average execution duration per SQL statement in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='1'),
      avgIOWriteCounts?: long(name='AvgIOWriteCounts', description='The average number of I/O writes per SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      avgLastRowsAffectedCounts?: long(name='AvgLastRowsAffectedCounts', description='The average number of rows that are affected by the last SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      avgLogicalReadCounts?: long(name='AvgLogicalReadCounts', description='The average number of logical reads per SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      avgPhysicalReadCounts?: long(name='AvgPhysicalReadCounts', description='The average number of physical reads per SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      avgRowsAffectedCounts?: long(name='AvgRowsAffectedCounts', description='The average number of rows that were affected per SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      createTime?: string(name='CreateTime', description='The date when the data was generated.', example='2011-05-30Z'),
      DBName?: string(name='DBName', description='The name of the database that was queried.', example='RDS_MySQL'),
      maxExecutionTime?: long(name='MaxExecutionTime', description='The longest execution duration of a specific SQL statement in the query. Unit: seconds.', example='60'),
      maxExecutionTimeMS?: long(name='MaxExecutionTimeMS'),
      maxIOWriteCounts?: long(name='MaxIOWriteCounts', description='The largest number of I/O writes that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      maxLastRowsAffectedCounts?: long(name='MaxLastRowsAffectedCounts', description='The largest number of rows that were affected by the last SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      maxLockTime?: long(name='MaxLockTime', description='The longest lock duration that was caused by a specific SQL statement in the query. Unit: seconds.', example='0'),
      maxLockTimeMS?: long(name='MaxLockTimeMS'),
      maxLogicalReadCounts?: long(name='MaxLogicalReadCounts', description='The largest number of logical reads that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      maxPhysicalReadCounts?: long(name='MaxPhysicalReadCounts', description='The largest number of physical reads that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      maxRowsAffectedCounts?: long(name='MaxRowsAffectedCounts', description='The largest number of rows that were affected by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      minIOWriteCounts?: long(name='MinIOWriteCounts', description='The smallest number of I/O writes that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      minLastRowsAffectedCounts?: long(name='MinLastRowsAffectedCounts', description='The smallest number of rows that were affected by the last SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      minLogicalReadCounts?: long(name='MinLogicalReadCounts', description='The smallest number of logical reads that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      minPhysicalReadCounts?: long(name='MinPhysicalReadCounts', description='The smallest number of physical reads that were performed by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      minRowsAffectedCounts?: long(name='MinRowsAffectedCounts', description='The smallest number of rows that were affected by a specific SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      mySQLTotalExecutionCounts?: long(name='MySQLTotalExecutionCounts', description='The total number of SQL statements that were executed in the query. This parameter is returned only for instances that run MySQL.', example='1'),
      mySQLTotalExecutionTimes?: long(name='MySQLTotalExecutionTimes', description='The total execution duration of all SQL statements in the query. This parameter is returned only for instances that run MySQL. Unit: seconds.', example='1'),
      parseMaxRowCount?: long(name='ParseMaxRowCount', description='The largest number of rows that were parsed by a specific SQL statement in the query.', example='1'),
      parseTotalRowCounts?: long(name='ParseTotalRowCounts', description='The total number of rows that were parsed by all SQL statements in the query.', example='1'),
      reportTime?: string(name='ReportTime', description='The date on which the data report was generated.', example='2011-05-30Z'),
      returnMaxRowCount?: long(name='ReturnMaxRowCount', description='The largest number of rows that were returned by a specific SQL statement in the query.', example='1'),
      returnTotalRowCounts?: long(name='ReturnTotalRowCounts', description='The total number of rows that were returned by all SQL statements in the query.', example='1'),
      SQLHASH?: string(name='SQLHASH', description='The unique ID of the SQL statement. The ID is used to obtain the slow query logs of the SQL statement.', example='U2FsdGVkxxxx'),
      SQLIdStr?: string(name='SQLIdStr', description='The ID of the SQL statement in the statistical template of slow query logs. This parameter is replaced by the **SQLHASH** parameter.', example='521584'),
      SQLServerAvgCpuTime?: long(name='SQLServerAvgCpuTime', description='The average amount of CPU time per SQL statement in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerAvgExecutionTime?: long(name='SQLServerAvgExecutionTime', description='The average execution duration per SQL statement in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerMaxCpuTime?: long(name='SQLServerMaxCpuTime', description='The largest amount of CPU time that was used by a specific SQL statement in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerMinCpuTime?: long(name='SQLServerMinCpuTime', description='The smallest amount of CPU time that was used by a specific SQL statement. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerMinExecutionTime?: long(name='SQLServerMinExecutionTime', description='The smallest execution duration of a specific SQL statement in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerTotalCpuTime?: long(name='SQLServerTotalCpuTime', description='The total amount of CPU time that was used by all SQL statements in the query. Unit: seconds.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      SQLServerTotalExecutionCounts?: long(name='SQLServerTotalExecutionCounts', description='The total number of SQL statements that were executed in the query. This parameter is returned only for instances that run SQL Server.', example='1'),
      SQLServerTotalExecutionTimes?: long(name='SQLServerTotalExecutionTimes', description='The total execution duration of all SQL statements in the query. This parameter is returned only for instances that run SQL Server. Unit: milliseconds.', example='1000'),
      SQLText?: string(name='SQLText', description='The SQL statement that was executed in the query.', example='select id,name from tb_table'),
      slowLogId?: long(name='SlowLogId', description='The ID of the slow query log summary.', example='26584213'),
      totalIOWriteCounts?: long(name='TotalIOWriteCounts', description='The total number of I/O writes that were performed by all SQL statements in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      totalLastRowsAffectedCounts?: long(name='TotalLastRowsAffectedCounts', description='The total number of rows that were affected by the last SQL statement in the query.

>  This parameter is returned only for instances that run SQL Server.', example='0'),
      totalLockTimes?: long(name='TotalLockTimes', description='The total lock duration that was caused by all SQL statements in the query. Unit: seconds.', example='0'),
      totalLogicalReadCounts?: long(name='TotalLogicalReadCounts', description='The total number of logical reads that were performed by all SQL statements in the query.', example='1'),
      totalPhysicalReadCounts?: long(name='TotalPhysicalReadCounts', description='The total number of physical reads that were performed by all SQL statements in the query.', example='1'),
      totalRowsAffectedCounts?: long(name='TotalRowsAffectedCounts', description='The total number of rows that were affected by all SQL statements in the query.', example='0'),
    }
  ](name='SQLSlowLog')
  }(name='Items', description='An array that consists of the information about each slow query.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of SQL statements that are returned on the current page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2553A660-E4EB-4AF4-A402-8AFF70A49143'),
  startTime?: string(name='StartTime', description='The start date of the time range that was queried.', example='2011-05-30Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries that are returned.', example='5'),
}

model DescribeSlowLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogsResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engine versions:
  * *   All MySQL versions except MySQL 5.7 that is used with RDS Basic edition
  * *   SQL Server 2008 R2
  * *   MariaDB 10.3
  * >  Slow query logs are not collected in real time and may show a latency of 6 hours to 8 hours.
  *
 */
async function describeSlowLogs(request: DescribeSlowLogsRequest): DescribeSlowLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportOnlineResizeDiskRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
}

model DescribeSupportOnlineResizeDiskResponseBody = {
  code?: string(name='Code', description='The error code returned.', example='NotExists.InstanceId'),
  data?: string(name='Data', description='The result data that is returned.', example='{"SupportOnlineResizeDisk":true,"DBInstanceName":"rm-uf6wjk5xxxxxxx"}'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B993DA9-5272-5414-94E3-4CA8BA0146C2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSupportOnlineResizeDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportOnlineResizeDiskResponseBody(name='body'),
}

/**
  * This operation is supported only for instances that run SQL Server.
  *
 */
async function describeSupportOnlineResizeDisk(request: DescribeSupportOnlineResizeDiskRequest): DescribeSupportOnlineResizeDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportOnlineResizeDisk', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOC****', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~610396~~) operation to query the ID of the instance.

> If you specify this parameter, all tags that are added to the instance are queried. Other filter conditions are invalid.', example='rm-uf6wjk5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of resource. Set the value to INSTANCE.', example='INSTANCE', position='Query'),
  tags?: string(name='Tags', description='The tag that you want to query. The value of the parameter consists of TagKey and TagValue. Format: `{"TagKey":"TagValue"}`.', example='{“key1”:”value1”}', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy mode.', example='API', position='Query'),
}

model DescribeTagsResponseBody = {
  items?: {
    tagInfos?: [ 
    {
      DBInstanceIds?: {
        DBInstanceIds?: [ string ](name='DBInstanceIds')
      }(name='DBInstanceIds', description='The IDs of the instances to which the tag is added.'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='key1'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='value1'),
    }
  ](name='TagInfos')
  }(name='Items', description='The tags that are added to the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   If an instance ID is specified, all tags that are added to this instance are queried, and other filter conditions are invalid.
  * *   If you specify only TagKey, the results that match the specified TagKey are returned. If you specify both TagKey and TagValue, the results that match both the specified TagKey and TagValue are returned.
  *
 */
async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-11-20T02:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any non-zero positive integer. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30 to 100**. Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-11-20T01:00Z', position='Query'),
  status?: string(name='Status', description='The status of the task. This parameter is invalid.', example='2', position='Query'),
  taskAction?: string(name='TaskAction', description='The operation that is used by the task.', example='CreateInstance', position='Query'),
}

model DescribeTasksResponseBody = {
  items?: {
    taskProgressInfo?: [ 
    {
      beginTime?: string(name='BeginTime', description='The start time of the task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC .', example='2020-11-20T01:00Z'),
      currentStepName?: string(name='CurrentStepName', description='The name of the subtask.', example='create_instance'),
      DBName?: string(name='DBName', description='The name of the database. If the task involves a database, the database name is returned.', example='DBtest'),
      expectedFinishTime?: string(name='ExpectedFinishTime', description='The estimated end time of the task.

> In most cases, this parameter is empty.', example='null'),
      finishTime?: string(name='FinishTime', description='The end time of the task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2020-11-20T02:00Z'),
      progress?: string(name='Progress', description='The progress of the task in percentage.', example='100'),
      progressInfo?: string(name='ProgressInfo', description='The description of the task progress.

> If no progress description is provided for the task, this parameter is empty.', example='null'),
      remain?: int32(name='Remain', description='The estimated remaining time of the task. Unit: seconds.

>  If the task is not running, this parameter is not returned or the returned value is **0**.', example='60'),
      status?: string(name='Status', description='The status of the task.', example='2'),
      stepProgressInfo?: string(name='StepProgressInfo', description='The progress of the subtask. For example, a value of `1/4` indicates that the task consists of four subtasks and the first subtask is in progress.', example='1/4'),
      stepsInfo?: string(name='StepsInfo', description='The details of the subtasks.', example='null'),
      taskAction?: string(name='TaskAction', description='The operation that is used by the task, such as **CreateDBInstance**.', example='CreateDBInstance'),
      taskErrorCode?: string(name='TaskErrorCode', description='The error code that is returned when an error occurs.

> This parameter is returned only when an error occurs.', example='null'),
      taskErrorMessage?: string(name='TaskErrorMessage', description='The error message that is returned when an error occurs.

>  This parameter is returned only when an error occurs.', example='null'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='3472xxxxx'),
    }
  ](name='TaskProgressInfo')
  }(name='Items', description='The details of the task execution.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A103039D-B1B2-4C57-B989-7D7C0DA95426'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='40'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

/**
  * This operation is phased out.
  *
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpgradeMajorVersionPrecheckTaskRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='pgm-bp1c808s731l****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return in the upgrade check report.

Valid values: any non-zero positive integer. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page of the upgrade check report.

Valid values:

*   30 (This is the default value.)
*   50
*   100', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetMajorVersion?: string(name='TargetMajorVersion', description='The new major engine version of the instance. The new major engine version must be later than the original major engine version.

For example, if the original major engine version is PostgreSQL 9.4, the new major engine version can be PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, or PostgreSQL 13.', example='12.0', position='Query'),
  taskId?: int32(name='TaskId', description='The ID of the upgrade check task. You can obtain the ID of the upgrade check task from the **TaskId** parameter that is returned from the call of the [UpgradeDBInstanceMajorVersionPrecheck](~~330050~~) operation.', example='416980000', position='Query'),
}

model DescribeUpgradeMajorVersionPrecheckTaskResponseBody = {
  items?: [ 
    {
      checkTime?: string(name='CheckTime', description='The time at which the upgrade check was performed.

The value of this parameter is a timestamp that follows the UNIX time format. Unit: milliseconds.', example='1635143903000'),
      detail?: string(name='Detail', description='The content of the upgrade check report.', example='[user_check_report]User check success\\n[pg_upgrade_internal.log]Performing...'),
      effectiveTime?: string(name='EffectiveTime', description='The expiration time of the upgrade check report.

The value of this parameter is a timestamp that follows the UNIX time format. Unit: milliseconds.', example='1635748703000'),
      result?: string(name='Result', description='The result of the upgrade check.

Valid values:

*   Success
*   Fail

>  If the check result is **Fail**, you must check the value of the **Detail** parameter to obtain the information about the errors that occurred. After you handle the errors, you can try again. For more information about how to handle common errors, see [Introduction to the check report for a major engine version upgrade to an ApsaraDB RDS for PostgreSQL instance](~~218391~~).', example='Success'),
      sourceMajorVersion?: string(name='SourceMajorVersion', description='The original major engine version of the instance.', example='11.0'),
      targetMajorVersion?: string(name='TargetMajorVersion', description='The new major engine version of the instance.', example='12.0'),
      taskId?: int32(name='TaskId', description='The ID of the upgrade check task.', example='416980000'),
    }
  ](name='Items', description='An array that consists of the attributes in the upgrade check report.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D1586777-41B5-5F9E-81E8-93DFDD379024'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries in the upgrade check report.', example='1'),
}

model DescribeUpgradeMajorVersionPrecheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpgradeMajorVersionPrecheckTaskResponseBody(name='body'),
}

/**
  * Before you upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance, you must perform an upgrade check and make sure that the check result is **Success**. You can call this operation to query the upgrade check report.  
  * If the check result is **Fail**, you must handle the errors that occurred. For more information about how to handle common errors, see [Introduction to the check report for a major engine version upgrade to an ApsaraDB RDS for PostgreSQL instance](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/introduction-to-the-check-report-of-a-major-engine-version-upgrade-for-an-apsaradb-rds-for-postgresql-instance).
  *
 */
async function describeUpgradeMajorVersionPrecheckTask(request: DescribeUpgradeMajorVersionPrecheckTaskRequest): DescribeUpgradeMajorVersionPrecheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpgradeMajorVersionPrecheckTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpgradeMajorVersionTasksRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the original instance.', example='pgm-bp1gm3yh0ht1****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Valid values: any non-zero positive integer.

Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: **30** to **100**.

Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetMajorVersion?: string(name='TargetMajorVersion', description='The major engine version of the new instance. Valid values:

*   **10.0**
*   **11.0**
*   **12.0**
*   **13.0**', example='12.0', position='Query'),
  taskId?: int32(name='TaskId', description='This parameter is reserved. You do not need to specify this parameter.', example='417450000', position='Query'),
}

model DescribeUpgradeMajorVersionTasksResponseBody = {
  items?: [ 
    {
      collectStatMode?: string(name='CollectStatMode', description='The time at which ApsaraDB RDS collects the statistics of the new RDS instance.

Valid values:

*   **After**: ApsaraDB RDS collects the statistics of the new instance after a switchover.
*   **Before**: ApsaraDB RDS collects the statistics of the new instance before a switchover.', example='After'),
      detail?: string(name='Detail', description='The details of the task.', example='2021-10-27 15:03:05 --- do upgrade precheck on slave succcess.\\n2021-10-27 15:03:11 --- begin to upgrade major version, source instance will locked in readonly mode.\\n2021-10-27 15:03:21 --- upgrade master success.\\n2021-10-27 15:06:10 --- exchange source and target instance dns success.\\n'),
      endTime?: string(name='EndTime', description='The time at which the task ended.

The value of this parameter is a timestamp that follows the UNIX time format. Unit: milliseconds.', example='1614237779000'),
      result?: string(name='Result', description='The status of the task.

*   **Success**: The task is successful.
*   **Failed**: The task failed.
*   **Running**: The task is in the phase in which data is being migrated to a new instance.', example='Success'),
      sourceInsName?: string(name='SourceInsName', description='The ID of the original instance.', example='pgm-bp1i3kkq7321****'),
      sourceMajorVersion?: string(name='SourceMajorVersion', description='The major engine version of the original instance.', example='11.0'),
      startTime?: string(name='StartTime', description='The time at which the task started.

The value of this parameter is a timestamp that follows the UNIX time format. Unit: milliseconds.', example='1614236007000'),
      switchTime?: string(name='SwitchTime', description='The time at which your workloads are switched over from the original instance to the new instance.

The value of this parameter is a timestamp that follows the UNIX time format. Unit: milliseconds.', example='1614237539000'),
      targetInsName?: string(name='TargetInsName', description='The ID of the new instance.', example='pgm-bp1c0v6d8092****'),
      targetMajorVersion?: string(name='TargetMajorVersion', description='The major engine version of the new instance. Valid values:

*   **10.0**
*   **11.0**
*   **12.0**
*   **13.0**', example='12.0'),
      taskId?: int32(name='TaskId', description='The ID of the task.', example='342900000'),
      upgradeMode?: string(name='UpgradeMode', description='Indicates whether ApsaraDB RDS migrates data to the new instance and switches your workloads over to the new instance.

Valid values:

*   **clone**: ApsaraDB RDS does not migrate data to the new instance and does not switch your workloads over to the new instance.
*   **switch**: ApsaraDB RDS migrates data to the new instance and switches your workloads over to the new instance.', example='switch'),
    }
  ](name='Items', description='An array that consists of the information about the tasks that are returned.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on each page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='152E0C6D-B9C3-4468-9F2C-FEF9D9E8417B'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries.', example='1'),
}

model DescribeUpgradeMajorVersionTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpgradeMajorVersionTasksResponseBody(name='body'),
}

async function describeUpgradeMajorVersionTasks(request: DescribeUpgradeMajorVersionTasksRequest): DescribeUpgradeMajorVersionTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpgradeMajorVersionTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the ID of the dedicated cluster. If you configure this parameter, the details about all vSwitches in the VPC to which the dedicated cluster belongs are returned.

**

You must configure this parameter or the **VpcId** parameter.', example='dhg-7a9********', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1 to 50**. Default value: **30**.', example='30', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the vSwitch. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the vSwitches belong.

**

You must configure this parameter or the **DedicatedHostGroupId** parameter.', example='vpc-bp1opxu1zkhn**********', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to which the vSwitches belong. You can call the [DescribeAvailableZones](~~169126~~) operation to query the ID of the zone. If you configure this parameter, the query results are filtered based on the value of this parameter and only the details about the vSwitches that are deployed in the specified zone are returned.', example='cn-hangzhou-i', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page. The value of this parameter is the same as the value of the **PageSize** parameter in the request parameters.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='8A68AEA1-AFBD-53F8-9BBB-06555EAE5C0E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  vSwitchs?: [ 
    {
      availableIpAddressCount: string(name='AvailableIpAddressCount', description='交换机中可用的IP地址数量。', example='1'),
      cidrBlock?: string(name='CidrBlock', description='The CIDR blocks of the vSwitches.', example='172.16.0.0/24'),
      description?: string(name='Description', description='The descriptions of the vSwitches.', example='VSwitchDescription'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**: The vSwitch is the default vSwitch.
*   **false**: The vSwitch is not the default vSwitch.', example='true'),
      izNo?: string(name='IzNo', description='The ID of the zone to which the vSwitches belong.', example='cn-hangzhou-h'),
      status?: string(name='Status', description='The status of a vSwitch. Valid values:

*   **Pending**: The vSwitch is being configured.
*   **Available**: The vSwitch is available.', example='Available'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1pnaz94xc**********'),
      vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='test'),
    }
  ](name='VSwitchs', description='The details about the vSwitches.'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DestroyDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

> You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCziJZNwH****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DestroyDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model DestroyDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyDBInstanceResponseBody(name='body'),
}

/**
  * The DestroyDBInstance operation is phased out.
  *
 */
async function destroyDBInstance(request: DestroyDBInstanceRequest): DestroyDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DetachGadInstanceMemberRequest {
  gadInstanceName: string(name='GadInstanceName', description='The ID of the global active database cluster.', example='gad-rm-bp1npi2j8********', position='Query'),
  memberInstanceName: string(name='MemberInstanceName', description='The ID of the instance that serves as the unit node you want to remove. You can call the [DescribeGadInstances](~~330105~~) query the ID of the instance.', example='rm-bp1npi2j8********', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the central node. You can call the [DescribeGadInstances](~~330105~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DetachGadInstanceMemberResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model DetachGadInstanceMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DetachGadInstanceMemberResponseBody(name='body'),
}

/**
  * ## Precautions
  * This operation can be used to remove only unit nodes.
  *
 */
async function detachGadInstanceMember(request: DetachGadInstanceMemberRequest): DetachGadInstanceMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachGadInstanceMember', 'POST', '/', 'json', false, 'json', request);
}

model GetDBInstanceTopologyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*******', position='Query'),
}

model GetDBInstanceTopologyResponseBody = {
  code?: string(name='Code', description='An internal parameter. You can ignore this parameter.', example='None'),
  data?: {
    connections?: [ 
      {
        connectionString?: string(name='ConnectionString', description='The endpoint of the instance.', example='rm-m5ezban**********.mysql.rds.aliyuncs.com'),
        DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-m5ezban**********'),
        netType?: string(name='NetType', description='The network type of the endpoint. Valid values:

*   **vpc**
*   **public**', example='vpc'),
        zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-qingdao-c'),
      }
    ](name='Connections', description='The network connection of the instance.'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-m5ezban**********'),
    nodes?: [ 
      {
        DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-m5ezban**********'),
        dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster.

> If the instance does not reside in the specified dedicated cluster, no value is returned.', example='dhg-4n*****'),
        dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the host on which the instance resides in the dedicated cluster.

> If the instance does not reside in the specified dedicated cluster, no value is returned.', example='i-bpxxxxxxx'),
        nodeId?: string(name='NodeId', description='The unique identifier of the instance.

> The value \\*\\*-1\\*\\* is returned for an instance that does not reside in a dedicated cluster.', example='349054'),
        role?: string(name='Role', description='The type of the node. Valid values:

*   **Master**: a primary node
*   **Slave**: a secondary node', example='master'),
        zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-qingdao-c'),
      }
    ](name='Nodes', description='The node information.'),
  }(name='Data', description='The details about the topology.'),
  message?: string(name='Message', description='An internal parameter. You can ignore this parameter.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7430AB1A-6D49-5B6D-B9E5-920250076074'),
}

model GetDBInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBInstanceTopologyResponseBody(name='body'),
}

async function getDBInstanceTopology(request: GetDBInstanceTopologyRequest): GetDBInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBInstanceTopology', 'POST', '/', 'json', false, 'json', request);
}

model GetDbProxyInstanceSslRequest {
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  dbInstanceId: string(name='DbInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3axxxxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model GetDbProxyInstanceSslResponseBody = {
  dbProxyCertListItems?: {
    dbProxyCertListItems?: [ 
    {
      certCommonName?: string(name='CertCommonName', description='The dedicated proxy endpoint for which SSL encryption is enabled.', example='test1234.rwlb.rds.aliyuncs.com'),
      dbInstanceName?: string(name='DbInstanceName', description='The ID of the instance.', example='rm-t4n3axxxxx'),
      endpointName?: string(name='EndpointName', description='The ID of the dedicated proxy endpoint.', example='buxxxxxxx'),
      endpointType?: string(name='EndpointType', description='The default identifier of the dedicated proxy endpoint. The value is fixed as **RWSplit**.', example='RWSplit'),
      sslExpiredTime?: string(name='SslExpiredTime', description='The time when the certificate expires.', example='2021-12-16T08:43:20Z'),
    }
  ](name='DbProxyCertListItems')
  }(name='DbProxyCertListItems', description='An array that consists of SSL encryption settings.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D330E60C-8AAA-4D63-8F64-5B78F4692F98'),
}

model GetDbProxyInstanceSslResponse = {
  headers: map[string]string(name='headers'),
  body: GetDbProxyInstanceSslResponseBody(name='body'),
}

/**
  * ApsaraDB RDS provides the dedicated proxy feature. You can configure SSL encryption for the dedicated proxy endpoint of an instance. This allows you to ensure the data security of the instance. For more information about the dedicated proxy feature, see [Dedicated proxy](~~138705~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The dedicated proxy feature must be enabled for the instance.
  * *   The minor engine version that the dedicated proxies of the instance run must be 1.12.8 or later.
  * *   The minor engine version of the instance must be 20200831 or later, and the instance must run the following MySQL versions and RDS editions:
  *     *   MySQL 8.0 on RDS High-availability Edition with local SSDs
  *     *   MySQL 5.7 on RDS High-availability Edition with local SSDs
  *     *   MySQL 5.6 on RDS High-availability Edition with local SSDs
  *
 */
async function getDbProxyInstanceSsl(request: GetDbProxyInstanceSslRequest): GetDbProxyInstanceSslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDbProxyInstanceSsl', 'POST', '/', 'json', false, 'json', request);
}

model GrantAccountPrivilegeRequest {
  accountName: string(name='AccountName', description='The username of the account.', example='test1', position='Query'),
  accountPrivilege: string(name='AccountPrivilege', description='The permissions that you want to grant to the account. The number of permissions must be the same as the number of databases that you specify for the DBName parameter. You can specify this parameter based on your business requirements. Valid values:

*   **ReadWrite**: read and write permissions
*   **ReadOnly**: read-only permissions
*   **DDLOnly**: DDL-only permissions
*   **DMLOnly**: DML-only permissions
*   **DBOwner**: database owner permissions

> 

*   If the instance runs MySQL or MariaDB, you can set this parameter to **ReadWrite**, **ReadOnly**, **DDLOnly**, or **DMLOnly**.

*   If the instance runs SQL Server, you can set this parameter to **ReadWrite**, **ReadOnly**, or **DBOwner**.
*   If the instance runs PostgreSQL and uses cloud disks, you can set this parameter to **DBOwner**.', example='ReadWrite', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the database on which you want to grant permissions. Separate multiple database names with commas (,).', example='testDB1', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='81BC9559-7B22-4B7F-B705-5F56DEECDEA7'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

/**
  * Each account can be granted permissions on one or more databases. Before you call this operation, make sure that the instance is in the Running state.
  * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL with local disks.
  *
 */
async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model GrantOperatorPermissionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  expiredTime: string(name='ExpiredTime', description='The time when the permissions of the service account expire. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-03-27T16:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privileges: string(name='Privileges', description='The permissions that you want to grant to the service account. Valid values:

*   **Control**: the configuration permissions, which allow you to view and modify the configuration of the instance.
*   **Data**: the data permissions, which allow you to view the schemas, indexes, and SQL statements of the instance.', example='Control', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='842B73C8-5776-4BD9-9872-69C8C46DD7D3'),
}

model GrantOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantOperatorPermissionResponseBody(name='body'),
}

/**
  * When you seek help from Alibaba Cloud technical support to troubleshoot instance exceptions, you need to grant permissions to the service account of your instance. The service account is used by Alibaba Cloud technical support to perform operations on the databases of your instance.
  * This operation is available only when your instance runs one of the following database engines:
  * *   MySQL
  * *   SQL Server
  * *   PostgreSQL
  * For more information, see [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](~~96102~~), [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](~~95693~~), and [Grant permissions to the service account of an ApsaraDB RDS for PostgreSQL instance](~~146887~~).
  *
 */
async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model ImportDatabaseBetweenInstancesRequest {
  DBInfo: string(name='DBInfo', description='The names of the source and destination databases. The value of this parameter is a JSON string.

> If the source and destination instances run SQL Server, the value of this parameter consists of one or more key-value pairs. In each key-value pair, the key specifies the name of the source database, and the value specifies the name of the destination database. A source database can have a different name from the destination database. For example, `{"DBNames":{"srcdb":"destdb","srcdb2":"destmydb2"}}` indicates that srcdb is migrated to destdb and srcdb2 is migrated to destmydb2. The names of source databases cannot be the same, and the names of destination databases cannot be the same.', example='{"DBNames":["mydb","mydb2"]}', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceDBInstanceId: string(name='SourceDBInstanceId', description='The ID of the source instance, which cannot be the same as the ID of the destination instance.', example='rm-g4a1jk8xxxxxxx', position='Query'),
}

model ImportDatabaseBetweenInstancesResponseBody = {
  importId?: string(name='ImportId', description='The ID of the import task.', example='852654*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5A77D650-27A1-4E08-AD9E-59008EDB6927'),
}

model ImportDatabaseBetweenInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDatabaseBetweenInstancesResponseBody(name='body'),
}

/**
  * We recommend that you use Data Transmission Service (DTS). DTS provides data migration, subscription, and synchronization features that allow you to establish stable, secure transmission links. For more information, see [DTS API overview](~~49456~~).
  * During the migration, the source instance is in the **Migrating** state, and the destination instance is in the **Importing** state.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The source and destination instances must run SQL Server and belong to the dedicated or dedicated host instance family. For more information about the supported instance types, see [Primary instance types](~~26312~~).
  * *   The source and destination instances must be created by using the same user credentials.
  * *   The instance is in the Running state.
  * *   The source and destination databases must be in the Running state.
  * *   The remaining storage of the destination instance must be greater than the storage capacity of the source instance.
  * > 
  * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
  * *   You can migrate the data of multiple databases at a time.
  *
 */
async function importDatabaseBetweenInstances(request: ImportDatabaseBetweenInstancesRequest): ImportDatabaseBetweenInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportDatabaseBetweenInstances', 'POST', '/', 'json', false, 'json', request);
}

model ImportUserBackupFileRequest {
  backupFile: string(name='BackupFile', description='A JSON array that consists of the information about the full backup file stored as an object in an OSS bucket. Example: `{"Bucket":"test", "Object":"test/test_db_employees.xb","Location":"ap-southeast-1"}`

The JSON array contains the following fields:

*   **Bucket**: The name of the OSS bucket in which the full backup file is stored as an object. You can call the [GetBucket](~~31965~~) operation to query the name of the bucket.
*   **Object**: The path of the full backup file that is stored as an object in the OSS bucket. You can call the [GetObject](~~31980~~) operation to query the path of the object.
*   **Location**: The ID of the region in which the OSS bucket is located. You can call the [GetBucketLocation](~~31967~~) operation to query the region of the bucket.', example='{"Bucket":"test", "Object":"test/test_db_employees.xb","Location":"ap-southeast-1"}', position='Query'),
  bucketRegion: string(name='BucketRegion', description='The region ID of the OSS bucket where the full backup file of the self-managed MySQL database is located. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  comment?: string(name='Comment', description='The description of the full backup file.', example='BackupTest', minLength=2, maxLength=256, position='Query'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine that is run on the self-managed MySQL database and ApsaraDB RDS for MySQL instance. Set the value to **5.7**.', example='5.7', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.

> 

*   The value of this parameter is the ID of the region in which you want to create the instance.

*   The value of this parameter must be consistent with the value of **BucketRegion**.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreSize?: int32(name='RestoreSize', description='The amount of storage that is required to restore the data of the full backup file. Unit: GB.

> 

*   The default value of this parameter is 5 times the size of the full backup file.

*   The minimum value of this parameter is 20.', example='20', position='Query'),
  retention?: int32(name='Retention', description='The retention period of the full backup file. Unit: days. Valid values: any **non-zero** positive integer.', example='30', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone. You can call the [DescribeRegions](~~26243~~) operation to query the ID of the zone.

> 

*   If you specify this parameter, the system creates a snapshot in single-digit seconds, which greatly reduces the time that is required to import the full backup file.

*   When you call the [CreateDBInstance](~~26228~~) operation to create an instance by using the full backup file, the instance is created in the zone that you specify for this parameter.', example='cn-hangzhou-b', position='Query'),
}

model ImportUserBackupFileResponseBody = {
  backupId?: string(name='BackupId', description='The ID of the full backup file.', example='b-n8tpg24c6i0v********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A140DD14-DCC9-4548-9C72-52A49A58A310'),
  status?: boolean(name='Status', description='Indicates whether the full backup file is successfully imported into the instance. If the full backup file is successfully imported, **true** is returned. Otherwise, an error message is returned.', example='true'),
}

model ImportUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: ImportUserBackupFileResponseBody(name='body'),
}

/**
  * > A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The self-managed MySQL database runs MySQL 5.7 and is backed up by using XtraBackup. The name of the backup file ends with `_qp.xb`. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
  * *   The full backup file of the self-managed MySQL database is uploaded to an Object Storage Service (OSS) bucket in the region of the ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
  * > This operation is supported only for MySQL 5.7.
  *
 */
async function importUserBackupFile(request: ImportUserBackupFileRequest): ImportUserBackupFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportUserBackupFile', 'POST', '/', 'json', false, 'json', request);
}

model ListClassesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  commodityCode: string(name='CommodityCode', description='The commodity code of the instances.

*   **bards_intl**: The instances are pay-as-you-go primary instances.
*   **rds_intl**: The instances are subscription primary instances.
*   **rords_intl**: The instances are pay-as-you-go read-only instances.
*   **rds_rordspre_public_intl**: The instances are subscription read-only instances.', example='bards', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the primary instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the primary instance.

> If you use **CommodityCode** to query the instance types that are available to read-only instances, you must specify the DBInstanceId parameter.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  orderType: string(name='OrderType', description='The type of order that you want to query. Valid values:

*   **BUY**: specifies the query orders that are used to purchase instances.
*   **UPGRADE**: specifies the query orders that are used to change the specifications of instances.
*   **RENEW**: specifies the query orders that are used to renew instances.
*   **CONVERT**: specifies the query orders that are used to change the billing methods of instances.', example='BUY', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.

> If you are using an Alibaba Cloud account on the International site (alibabacloud.com), you must specify the RegionId parameter.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListClassesResponseBody = {
  items?: [ 
    {
      classCode?: string(name='ClassCode', description='The code of the instance type. For more information, see [Primary ApsaraDB RDS instance types](~~26312~~) and [Read-only ApsaraDB RDS instance types](~~145759~~).', example='mysql.n1.micro.1'),
      classGroup?: string(name='ClassGroup', description='The instance family. For more information, see [Instance families](~~57184~~).', example='General'),
      cpu?: string(name='Cpu', description='The number of cores that are supported by the instance type. Unit: core.', example='1'),
      encryptedMemory?: string(name='EncryptedMemory', description='The size of the encrypted memory that is supported by the security-enhanced instance type. Unit: GB.', example='4'),
      instructionSetArch?: string(name='InstructionSetArch', description='The architecture of the instance type. Valid values:

*   If the architecture of the instance type is **x86**, an empty string is returned by default.
*   If the architecture of the instance type is **ARM**, **arm** is returned.', example='arm'),
      maxConnections?: string(name='MaxConnections', description='The maximum number of connections that are supported by the instance type. Unit: core.', example='2000'),
      maxIOMBPS?: string(name='MaxIOMBPS', description='The maximum I/O bandwidth that is supported by the instance type. Unit: Mbit/s.', example='1024Mbps'),
      maxIOPS?: string(name='MaxIOPS', description='The maximum input/output operations per second (IOPS) that is supported by the instance type. Unit: operations per second.', example='10000'),
      memoryClass?: string(name='MemoryClass', description='The memory capacity that is supported by the instance type. Unit: GB.', example='1 GB (RDS Basic Edition)'),
      referencePrice?: string(name='ReferencePrice', description='The fee that you must pay for the instance type.

*   Unit: cent (USD).

> 

*   If you set **CommodityCode** to a value that indicates the pay-as-you-go billing method, the ReferencePrice parameter specifies the hourly fee that you must pay.

*   If you set **CommodityCode** to a value that indicates the subscription billing method, the ReferencePrice parameter specifies the monthly fee that you must pay.', example='2500'),
    }
  ](name='Items', description='An array that consists of available instance types.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CF8D35BF-263D-4F7B-883A-1163B79A9EC6'),
}

model ListClassesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClassesResponseBody(name='body'),
}

async function listClasses(request: ListClassesRequest): ListClassesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClasses', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token required to obtain more results. This parameter is not required in the first query. If a query does not return all results, in the next query, you can specify the token returned from the previous query to obtain more results.', example='212db86sca4384811e0b5e8707ec21345', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources. You can specify up to 50 resource IDs.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can query N tag keys at a time. Valid values of N: **1** to **20**. The value of this parameter cannot be an empty string.

>  You must specify at least one of the **ResourceId.N** and **Tag.N.Key** parameters.', example='testkey1'),
      value?: string(name='Value', description='The tag value that is associated with the specified tag key. You can specify N tag values at a time. Valid values of N: **1** to **20**. This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='The tags to query resources. You can specify up to 20 tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token required to obtain more results. If a query does not return all results, in the next query, you can provide the token returned by the previous query to obtain more results.', example='212db86sca4384811e0b5e8707ec21345'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='47A514A1-4B77-4E30-B4C5-2A880650B3FD'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
      resourceType?: string(name='ResourceType', description='The resource type. The value `ALIYUN::RDS::INSTANCE` indicates ApsaraDB RDS instances.', example='ALIYUN::RDS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='testkey1'),
      tagValue?: string(name='TagValue', description='The tag value that is associated with the specified tag key.', example='testvalue1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The information of the returned instances and tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUserBackupFilesRequest {
  backupId?: string(name='BackupId', description='The ID of the full backup file.', example='b-kwwvr7v8t7of********', position='Query'),
  comment?: string(name='Comment', description='The description of the full backup file.

> The system implements a fuzzy match based on the value of this parameter.', example='BackupTest', position='Query'),
  ossUrl?: string(name='OssUrl', description='The URL from which you can download the full backup file that is stored as an object in an Object Storage Service (OSS) bucket. For more information about how to obtain the URL, see [Obtain the access URL after you upload objects](~~39607~~).', example='https://******.oss-ap-********.aliyuncs.com/backup_qp.xb', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the full backup file. Valid values:

*   **Importing**: The full backup file is being imported.
*   **Failed**: The full backup file fails to be imported.
*   **CheckSucccess**: The full backup file passes the check.
*   **BackupSuccess**: The full backup file is imported.
*   **Deleted**: The full backup file is deleted.', example='CheckSuccess', position='Query'),
  tags?: string(name='Tags', description='The tag that is added to the full backup file.', example='key1:value1', position='Query'),
}

model ListUserBackupFilesResponseBody = {
  records?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the full backup file.', example='b-kwwvr7v8t7of********'),
      binlogInfo?: string(name='BinlogInfo', description='The information about the binary log file that contains incremental data. If incremental data is generated during the full backup, this parameter is returned.', example='{\\"binlogPosition\\":\\"154\\",\\"binlogFile\\":\\"0.000002\\"}'),
      comment?: string(name='Comment', description='The description of the full backup file.', example='BackupTest'),
      creationTime?: string(name='CreationTime', description='The time when the system started to import the full backup file. The value is a UNIX timestamp. Unit: milliseconds.', example='1623231084000'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='mysql'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='5.7'),
      finishTime?: string(name='FinishTime', description='The time when the full backup file is successfully imported. The value is a UNIX timestamp. Unit: milliseconds.', example='1623231750000'),
      modificationTime?: string(name='ModificationTime', description='The time when the full backup file is successfully imported. The value is a UNIX timestamp. Unit: milliseconds.', example='1623231750000'),
      ossBucket?: string(name='OssBucket', description='The name of the OSS bucket in which the full backup file is stored as an object.', example='BackupTest'),
      ossFileMetaData?: string(name='OssFileMetaData', description='The metadata of the full backup file. For more information, see [Manage object metadata](~~31859~~).', example='{\\"Accept-Ranges\\":\\"bytes\\",\\"Connection\\":\\"keep-alive\\",\\"Content-Length\\":81014337,\\"Content-Type\\":\\"application/octet-stream\\",\\"Date\\":1623309548000,\\"ETag\\":\\"889FE9E5FCEBFE4781829488A352863B-1\\",\\"Last-Modified\\":1622186844000,\\"Server\\":\\"AliyunOSS\\",\\"x-oss-hash-crc64ecma\\":\\"5793608435727323129\\",\\"x-oss-object-type\\":\\"Multipart\\",\\"x-oss-request-id\\":\\"60C1BCEC92572F37318BD499\\",\\"x-oss-server-time\\":\\"166\\",\\"x-oss-storage-class\\":\\"Standard\\"}'),
      ossFileName?: string(name='OssFileName', description='The name of the full backup file that is stored as an object in an OSS bucket.', example='backup_qp.xb'),
      ossFilePath?: string(name='OssFilePath', description='The path of the full backup file that is stored as an object in an OSS bucket.', example='test/backup_qp.xb'),
      ossFileSize?: long(name='OssFileSize', description='The size of the full backup file that is stored as an object in an OSS bucket. Unit: KB.', example='79115'),
      ossUrl?: string(name='OssUrl', description='The URL to download the full backup file from the OSS bucket.', example='https://******.oss-ap-********.aliyuncs.com/backup_qp.xb'),
      reason?: string(name='Reason', description='The reason why the full backup file failed to be imported.', example='success'),
      restoreSize?: string(name='RestoreSize', description='The amount of storage that is required to restore the data of the full backup file. Unit: GB.', example='20'),
      retention?: int32(name='Retention', description='The retention period of the full backup file. Unit: days.', example='3'),
      status?: string(name='Status', description='The status of the full backup file. Valid values:

*   **Importing**: The full backup file is being imported.
*   **Failed**: The full backup file fails to be imported.
*   **CheckSucccess**: The full backup file passes the check.
*   **BackupSuccess**: The full backup file is imported.
*   **Deleted**: The full backup file is deleted.', example='BackupSuccess'),
      zoneId?: string(name='ZoneId', description='The zone ID of the full backup file.', example='cn-hangzhou-b'),
    }
  ](name='Records', description='An array that consists of the information about the full backup files that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD67C22F-64F3-4448-A9A8-D1606D242879'),
}

model ListUserBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserBackupFilesResponseBody(name='body'),
}

/**
  * > 
  * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
  * *   Before you call the [CreateDBInstance](~~26228~~) operation to create an ApsaraDB RDS for MySQL instance into which you want to import full backup files, you can call this operation to query the IDs of full backup files.
  * *   You can call the [ImportUserBackupFile](~~260266~~) operation to import a full backup file into an ApsaraDB RDS for MySQL instance.
  *
 */
async function listUserBackupFiles(request: ListUserBackupFilesRequest): ListUserBackupFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserBackupFiles', 'POST', '/', 'json', false, 'json', request);
}

model LockAccountRequest {
  accountName: string(name='AccountName', description='The account that you want to lock. You can lock only one account at a time.', example='testaccount', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the ApsaraDB RDS for PostgreSQL instance.', example='pgm-bpxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model LockAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B291C4B-DDCD-4D0A-8F6D-7F3241DE9228'),
}

model LockAccountResponse = {
  headers: map[string]string(name='headers'),
  body: LockAccountResponseBody(name='body'),
}

/**
  * You cannot use a locked account to log on to the corresponding instance. You must first unlock the account. For more information, see [Lock and delete an account](~~147649~~).
  *
 */
async function lockAccount(request: LockAccountRequest): LockAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockAccount', 'POST', '/', 'json', false, 'json', request);
}

model MigrateConnectionToOtherZoneRequest {
  connectionString: string(name='ConnectionString', description='The endpoint of the instance. The endpoint is specified when you create the instance.', example='rm-bp1oypo6ky19y****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~610396~~) operation to query the ID of the instance.', example='rm-bp1oypo6ky19y****', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-i', position='Query'),
}

model MigrateConnectionToOtherZoneResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParam'),
  message?: string(name='Message', description='The error message.', example='Invalid Parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model MigrateConnectionToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateConnectionToOtherZoneResponseBody(name='body'),
}

async function migrateConnectionToOtherZone(request: MigrateConnectionToOtherZoneRequest): MigrateConnectionToOtherZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateConnectionToOtherZone', 'POST', '/', 'json', false, 'json', request);
}

model MigrateDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the ID of the dedicated cluster.', example='dhg-4nxxxxxxx', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time when you want the system to start the migration. Valid values:

*   **Immediately**: The system immediately starts the migration. This is the default value.
*   **MaintainTime**: The system starts the migration during the specified maintenance window.
*   **Specified**: The system starts the migration at the specified point in time.', example='MaintainTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specifiedTime?: string(name='SpecifiedTime', description='The point in time when you want the system to start the migration. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> This parameter must be specified when you set **EffectiveTime** to **Specified**.', example='2019-10-21T10:00:00Z', position='Query'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='The ID of the host to which you want to migrate the primary instance. You can call the [DescribeDedicatedHosts](~~200944~~) operation to obtain the ID of the host.', example='i-bpxxxxxxx1', position='Query'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='The ID of the host to which you want to migrate the secondary instance. You can call the [DescribeDedicatedHosts](~~200944~~) operation to obtain the ID of the host.', example='i-bpxxxxxxx2', position='Query'),
  zoneIdForFollower?: string(name='ZoneIdForFollower', description='The zone ID of the secondary instance.', example='cn-hangzhou-h', position='Query'),
  zoneIdForLog?: string(name='ZoneIdForLog', description='The zone ID of the logger instance.', example='cn-hangzhou-i', position='Query'),
}

model MigrateDBInstanceResponseBody = {
  migrationId?: int32(name='MigrationId', description='The serial number of the task in the migration task queue. When the serial number becomes 0, the system starts the migration.', example='2245016'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='498AE8CA-8C81-4A01-AF37-2B902014ED30'),
  taskId?: int32(name='TaskId', description='The ID of the task.', example='108246861'),
}

model MigrateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateDBInstanceResponseBody(name='body'),
}

/**
  * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  *
 */
async function migrateDBInstance(request: MigrateDBInstanceRequest): MigrateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model MigrateSecurityIPModeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~610396~~) operation to query the ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model MigrateSecurityIPModeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF1E53AB-5625-49C7-ADF1-FBD0B6640D19'),
  securityIPMode?: string(name='SecurityIPMode', description='The whitelist mode after the change, which is the enhanced whitelist mode.

Valid values:

*   safety

    <!-- -->

    :

    <!-- -->

    enhanced whitelist mode

    <!-- -->', example='safety'),
}

model MigrateSecurityIPModeResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateSecurityIPModeResponseBody(name='body'),
}

/**
  * *   In standard whitelist mode, IP addresses in the whitelist apply to both the classic network and VPCs. To minimize security risks, we recommend that you use the enhanced whitelist mode.
  * *   In enhanced whitelist mode, IP addresses in the whitelist are divided into VPC IP addresses and IP addresses of the classic network and Internet.
  * > 
  * *   You cannot change the whitelist mode from the enhanced whitelist mode to the standard whitelist mode.
  * *   This operation is not supported for instances that run SQL Server and MariaDB.
  *
 */
async function migrateSecurityIPMode(request: MigrateSecurityIPModeRequest): MigrateSecurityIPModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateSecurityIPMode', 'POST', '/', 'json', false, 'json', request);
}

model MigrateToOtherZoneRequest {
  category?: string(name='Category', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition
*   **HighAvailability**: RDS High-availability Edition
*   **AlwaysOn**: RDS Cluster Edition
*   **Finance**: RDS Enterprise Edition', example='HighAvailability', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The new instance type of the instance. You can change the instance type of the instance. You cannot change the storage type of the instance. If you set **IsModifySpec** to **true**, you must specify at least one of DBInstanceClass and **DBInstanceStorage**.

For more information about instance types, see [Primary ApsaraDB RDS for MySQL instance types](~~276975~~).', example='mysql.x4.xlarge.2', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  DBInstanceStorage?: long(name='DBInstanceStorage', description='The new storage capacity of the instance. If you set **IsModifySpec** to **true**, you must specify at least one of DBInstanceStorage and **DBInstanceClass**.

Unit: GB. The available storage capacity range varies based on the instance type of the instance. For more information, see [Primary ApsaraDB RDS for MySQL instance types](~~276975~~).', example='500', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time when you want to migrate the instance. Valid values:

*   **Immediate**: The instance is immediately migrated. This is the default value.
*   **MaintainTime**: The instance is migrated during the maintenance window. For more information, see [ModifyDBInstanceMaintainTime](~~26249~~).
*   **ScheduleTime**: The instance is migrated at the point in time that you specify.

> If you set this parameter to **ScheduleTime**, you must also specify **SwitchTime**.', example='Immediate', position='Query'),
  isModifySpec?: string(name='IsModifySpec', description='Specifies whether to change the specifications of the instance during the cross-zone migration. Valid values:

*   **true**: You want to change the specifications of the instance during the cross-zone migration. If you set this parameter to **true**, you must specify at least one of **DBInstanceClass** and **DBInstanceStorage**.
*   **false** (default): You do not want to change the specifications of the instance during the cross-zone migration.

> This parameter applies only to instances that run MySQL.', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', description='The migration time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> This parameter is used with **EffectiveTime**. You must specify this parameter only when **EffectiveTime** is set to **ScheduleTime**.', example='2021-12-14T15:15:15Z', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the virtual private cloud (VPC) to which the instance belongs. Do not change the VPC of the instance when you migrate the instance across zones.

*   This parameter must be specified when the instance resides in a VPC.
*   If the instance runs SQL Server, you can change the VPC of the instance.', example='vpc-xxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

*   This parameter must be specified when the instance resides in a VPC. You can call the [DescribeVSwitches](~~35748~~) operation to query the vSwitch ID.
*   If the instance runs PostgreSQL or SQL Server and a secondary zone is specified for the instance, you can specify multiple vSwitch IDs, each of which corresponds to a zone. Separate the vSwitch IDs with commas (,).', example='vsw-uf6adz52c2pxxxxxxx', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the destination zone. You can call the [DescribeRegions](~~26243~~) operation to query the most recent zone list.', example='cn-hangzhou-b', position='Query'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='The zone ID of the secondary instance.

> If the instance does not run RDS Basic Edition, you must specify this parameter.', example='cn-hangzhou-c', position='Query'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='The zone ID of the logger instance.

> This parameter is available only when the instance runs RDS Enterprise Edition.', example='cn-hangzhou-d', position='Query'),
}

model MigrateToOtherZoneResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
  orderId?: long(name='OrderId', description='The ID of the order. This parameter is returned only when the instance runs MySQL.', example='213341575990728'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

/**
  * The prerequisites for this operation vary based on the database engine of the instance. For more information, see the following topics:
  * *   [RDS MySQL](~~96053~~)
  * *   [RDS PostgreSQL](~~96746~~)
  * *   [RDS SQL Server](~~95658~~)
  * > This operation allows you to migrate an instance across zones in the same region. This operation does not allow you to migrate an instance across zones in different regions. For example, you cannot migrate an instance from a zone in the China (Hangzhou) region to a zone in the China (Qingdao) region.
  *
 */
async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateToOtherZone', 'POST', '/', 'json', false, 'json', request);
}

model ModifyADInfoRequest {
  ADAccountName?: string(name='ADAccountName', description='The account of the AD domain.', example='test_account', position='Query'),
  ADDNS?: string(name='ADDNS', description='The DNS information about the AD domain.', example='example.com', position='Query'),
  ADPassword?: string(name='ADPassword', description='The password for the account of the AD domain.', example='test_password', position='Query'),
  ADServerIpAddress?: string(name='ADServerIpAddress', description='The IP address of the AD domain.', example='47.100.XX.XX', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyADInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyADInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyADInfoResponseBody(name='body'),
}

/**
  * This operation is available only for ApsaraDB RDS for SQL Server instances.
  *
 */
async function modifyADInfo(request: ModifyADInfoRequest): ModifyADInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyADInfo', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', description='The description of the account. The value must be 2 to 256 characters in length The value can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.

> The value cannot start with http:// or https://.', example='Test Account A', position='Query'),
  accountName: string(name='AccountName', description='The name of the account.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
  * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL.
  *
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActionEventPolicyRequest {
  enableEventLog: string(name='EnableEventLog', description='Specifies whether to enable the event history feature. Valid values: **True | False**.', example='True', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region for which you want to enable the event history feature. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyActionEventPolicyResponseBody = {
  enableEventLog?: string(name='EnableEventLog', description='Indicates whether the event history feature is enabled.', example='True'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BAC0952C-0EB3-4DE7-A567-B83269BFE43F'),
}

model ModifyActionEventPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActionEventPolicyResponseBody(name='body'),
}

/**
  * The event history feature enables you to view historical events that occurred in a region over a specific time range. These events include instance creation and parameter reconfiguration. For more information, see [Event history](~~129759~~).
  *
 */
async function modifyActionEventPolicy(request: ModifyActionEventPolicyRequest): ModifyActionEventPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActionEventPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationTasksRequest {
  ids: string(name='Ids', description='The ID of the O\\&M task. Separate multiple IDs with commas (,).

> You can call the [DescribeActiveOperationTask](~~611455~~) operation to query the IDs of O\\&M tasks.', example='11111,22222', position='Query'),
  immediateStart?: int32(name='ImmediateStart', description='Specifies whether to immediately start scheduling. The value 0 indicates that scheduling is not immediately started. This is the default value. The value 1 indicates that scheduling is immediately started. If you set this parameter to 0, SwitchTime takes effect. If you set this parameter to 1, SwitchTimer does not take effect. In this case, the start time of the task is set to the current time, and the system determines the switching time based on the start time.

> Immediate scheduling indicates that the task enters the preparation state instead of the immediate switchover. After the preparation is complete, the switchover is performed. You can call the [DescribeActiveOperationTasks](~~611455~~) operation to obtain the period of time for preparation. The period of time for preparation is returned in PrepareInterva.', example='0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchTime: string(name='SwitchTime', description='The scheduled switching time that you want to specify. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> The time that you specify cannot be later than the deadline for performing the O\\&M task. You can call [DescribeActiveOperationTasks](~~611455~~) to query the deadlines of O\\&M tasks. The deadline of a task is returned in Deadline.', example='2019-10-17T18:50:00Z', position='Query'),
}

model ModifyActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', description='The ID of the O\\&M task. IDs are separated by commas (,).', example='11111,22222'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='E9ADB6BE-1598-57FC-B86D-D7F4C69B****'),
}

model ModifyActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationTasksResponseBody(name='body'),
}

/**
  * O\\&M tasks such as instance migration and version upgrades are notified by text message, phone call, email, internal message, or in the ApsaraDB RDS console. You can call this operation to change the scheduled switching time. You can also view the task and change the switching time on the Task Center page.
  *
 */
async function modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): ModifyActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  archiveBackupKeepCount?: int32(name='ArchiveBackupKeepCount', description='The number of archived backup files that are retained. Default value: **1**. Valid values:

*   Valid values when **ArchiveBackupKeepPolicy** is set to **ByMonth**: **1** to **31**.
*   Valid values when **ArchiveBackupKeepPolicy** is set to **ByWeek**: **1** to **7**.

> 

*   You do not need to specify this parameter when **ArchiveBackupKeepPolicy** is set to **KeepAll**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='1', position='Query'),
  archiveBackupKeepPolicy?: string(name='ArchiveBackupKeepPolicy', description='The retention period of archived backup files. The number of archived backup files that can be retained within the specified retention period is specified by **ArchiveBackupKeepCount**. Default value: **0**. Valid values:

*   **ByMonth**
*   **ByWeek**
*   **KeepAll**

> This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='ByMonth', position='Query'),
  archiveBackupRetentionPeriod?: string(name='ArchiveBackupRetentionPeriod', description='The number of days for which the archived backup is retained. The default value **0** specifies that the backup archiving feature is disabled. Valid values: **30** to **1095**.

> This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='365', position='Query'),
  backupInterval?: string(name='BackupInterval', description='The frequency at which you want to perform a snapshot backup on the instance. Valid values:

*   **-1**: No backup frequencies are specified.
*   **30**: A snapshot backup is performed every 30 minutes.
*   **60**: A snapshot backup is performed every 60 minutes.
*   **120**: A snapshot backup is performed every 120 minutes.
*   **240**: A snapshot backup is performed every 240 minutes.
*   **480**: A snapshot backup is performed every 480 minutes.

> 

*   You can configure a backup policy by using this parameter and the **PreferredBackupPeriod** parameter. For example, if you set **PreferredBackupPeriod** to Saturday,Sunday and BackupInterval to \\*\\*-1\\*\\*, a snapshot backup is performed on every Saturday and Sunday.

*   If the instance runs PostgreSQL, BackupInterval is supported only when the instance is equipped with cloud disks.

*   If the instance runs SQL Server, BackupInterval is supported only when the snapshot backup feature is enabled for the instance. For more information, see [Enable snapshot backups for an ApsaraDB RDS for SQL Server instance](~~211143~~).

*   If **Category** is set to **Flash**, BackupInterval is invalid.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='30', position='Query'),
  backupLog?: string(name='BackupLog', description='Specifies whether to enable the log backup feature. Valid values:

*   **Enable**: enables the feature.
*   **Disabled**: disables the feature.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **DataBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='Enable', position='Query'),
  backupMethod?: string(name='BackupMethod', description='The backup method of the instance. Valid values:

*   **Physical**: physical backup
*   **Snapshot**: snapshot backup

Default value: **Physical**.

> 

*   This parameter takes effect only on instances that run SQL Server with cloud disks.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='Physical', position='Query'),
  backupPolicyMode?: string(name='BackupPolicyMode', description='The type of the backup. Valid values:

*   **DataBackupPolicy**: data backup
*   **LogBackupPolicy**: log backup', example='DataBackupPolicy', position='Query'),
  backupPriority?: int32(name='BackupPriority', position='Query'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='The number of days for which you want to retain data backup files. Valid values: **7 to 730**.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **DataBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='7', position='Query'),
  category?: string(name='Category', description='Specifies whether to enable the single-digit second backup feature. Valid values:

*   **Flash**: enables the feature.
*   **Standard**: disables the feature.

> This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='Standard', position='Query'),
  compressType?: string(name='CompressType', description='The format that is used to compress backup data. Valid values:

*   **0**: Backups are not compressed.
*   **1**: The zlib tool is used to compress backups into .tar.gz files.
*   **2**: The zlib tool is used to compress backups in parallel.
*   **4**: The QuickLZ tool is used to compress backups into .xb.gz files. This compression format is supported for instances that run MySQL 5.6 or MySQL 5.7. Backups in this compression format can be used to restore individual databases and tables. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
*   **8**: The QuickLZ tool is used to compress backups into .xb.gz files. This compression format is supported only for instances that run MySQL 8.0. Backups in this compression format cannot be used to restore individual databases and tables.

> This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='4', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  enableBackupLog?: string(name='EnableBackupLog', description='Specifies whether to enable the log backup feature. Valid values:

*   **True** or **1**: enables the feature.
*   **False** or **0**: disables the feature.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **LogBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **LogBackupPolicy**.', example='1', position='Query'),
  enableIncrementDataBackup?: boolean(name='EnableIncrementDataBackup', description='Specifies whether to enable the incremental backup feature. Valid values:

*   **false** (default): disables the feature.
*   **true**: enables the feature.

> 

*   This parameter takes effect only on instances that run SQL Server with cloud disks.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='false', position='Query'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection', description='Specifies whether to forcefully delete log backup files from the instance when the storage usage of the instance exceeds 80% or the amount of remaining storage on the instance is less than 5 GB. Valid values: **Enable and Disable**. You can retain the default value.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **LogBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **LogBackupPolicy**.', example='Enable', position='Query'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours', description='The number of hours for which you want to retain log backup files on the instance. Valid values: **0 to 168**. The value 0 specifies that log backup files are not retained on the instance. The value 168 is calculated based on the following formula: 7 × 24.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **LogBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **LogBackupPolicy**.', example='18', position='Query'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace', description='The maximum storage usage that is allowed for log backup files on the instance. If the storage usage for log backup files on the instance exceeds the value of this parameter, the system deletes earlier log backup files until the storage usage falls below the value of this parameter. Valid values:**0 to 50**. You can retain the default value.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **LogBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **LogBackupPolicy**.', example='30', position='Query'),
  logBackupFrequency?: string(name='LogBackupFrequency', description='The frequency at which you want to back up the logs of the instance. Valid values:

*   **LogInterval**: A log backup is performed every 30 minutes.
*   The default value is the same as the data backup frequency.

> 

*   The value **LogInterval** is supported only for instances that run SQL Server.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='LogInterval', position='Query'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber', description='The number of binary log files that you want to retain on the instance. Default value: **60**. Valid values: **6** to **100**.

> 

*   This parameter takes effect only when **BackupPolicyMode** is set to **LogBackupPolicy**.

*   If the instance runs MySQL, you can set this parameter to \\*\\*-1\\*\\*. The value -1 specifies that no limits are imposed on the number of binary log files retained on the instance.', example='60', position='Query'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', description='The number of days for which the log backup is retained. Valid values: **7 to 730**. The log backup retention period cannot be longer than the data backup retention period.

> 

*   If you enable the log backup feature, you can specify the log backup retention period. This parameter is supported for instances that run MySQL and PostgreSQL.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy** or **LogBackupPolicy**.', example='7', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The backup cycle. Specify at least two days of the week and separate the days with commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**

> 

*   You can configure a backup policy by using this parameter and the **BackupInterval** parameter. For example, if you set this parameter to Saturday,Sunday and the **BackupInterval** parameter to 30, a backup is performed every 30 minutes on every Saturday and Sunday.

*   This parameter must be specified when **BackupPolicyMode** is set to **DataBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='Monday', position='Query'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The time at which you want to perform a backup. Specify the time in the ISO 8601 standard in the *HH:mm*Z-*HH:mm*Z format. The time must be in UTC.

> 

*   This parameter must be specified when **BackupPolicyMode** is set to **DataBackupPolicy**.

*   This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='00:00Z-01:00Z', position='Query'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy', description='The policy that is used to retain archived backup files if the instance is released. Default value: None. Valid values:

*   **None**: No archived backup files are retained.
*   **Lastest**: Only the last archived backup file is retained.
*   **All**: All archived backup files are retained.

> This parameter takes effect only when **BackupPolicyMode** is set to **DataBackupPolicy**.', example='None', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  compressType?: string(name='CompressType', description='The method that is used to compress backups. Valid values:

*   **0:** Backups are not compressed.
*   **1**: Backups are compressed by using the zlib tool.
*   **2**: Backups are compressed in parallel by using the zlib tool.
*   **4**: Backups are compressed by using the QuickLZ tool and can be used to restore individual databases and tables.
*   **8**: Backups are compressed by using the QuickLZ tool but cannot be used to restore individual databases or tables. This value is supported only for instances that run MySQL 8.0.', example='4'),
  DBInstanceID?: string(name='DBInstanceID', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  enableBackupLog?: string(name='EnableBackupLog', description='Indicates whether the log backup feature is enabled. Valid values:

*   **1**: The feature is enabled.
*   **0**: The feature is disabled.', example='1'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection', description='Specifies whether to forcefully delete log backup files from the instance when the storage usage of the instance exceeds 80% or the amount of remaining storage on the instance is less than 5 GB.', example='Disable'),
  localLogRetentionHours?: int32(name='LocalLogRetentionHours', description='The number of hours for which log backup files are retained on the instance.', example='18'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace', description='The maximum storage usage that is allowed for log backup files on the instance.', example='30'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber', description='The number of binary log files on the instance.', example='60'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DA147739-AEAD-4417-9089-65E9B1D8240D'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is not a read-only instance.
  * *   The instance is in the Running state.
  *
 */
async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCollationTimeZoneRequest {
  collation?: string(name='Collation', description='The character set collation of the instance. Valid values:

*   **Latin1\\_General_CI_AS**
*   **Latin1\\_General_CS_AS**
*   **SQL_Latin1\\_General_CP1\\_CI_AS**
*   **SQL_Latin1\\_General_CP1\\_CS_AS**
*   **Chinese_PRC_CS_AS**
*   **Chinese_PRC_BIN**
*   **Chinese_PRC_CI_AS**
*   **Japanese_CI_AS**
*   **Japanese_CS_AS**
*   **Chinese_Taiwan_Stroke_CI_AS**
*   **Chinese_Taiwan_Stroke_CS_AS**

By default, the system does not modify the character set collation of the instance.

> You must specify one of the **Collation** and **Timezone** parameters.', example='Latin1_General_CI_AS', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  timezone?: string(name='Timezone', description='The time zone of the instance. By default, the system does not modify the time zone.

> You must specify one of the **Collation** and **Timezone** parameters.', example='China Standard Time', position='Query'),
}

model ModifyCollationTimeZoneResponseBody = {
  collation?: string(name='Collation', description='The character set collation of the instance.', example='Latin1_General_CI_AS'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EA054AF-DFA7-497D-9F57-790FFC974C0B'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='114413215'),
  timezone?: string(name='Timezone', description='The time zone of the instance.', example='China Standard Time'),
}

model ModifyCollationTimeZoneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCollationTimeZoneResponseBody(name='body'),
}

/**
  * > This operation is phased out.
  *
 */
async function modifyCollationTimeZone(request: ModifyCollationTimeZoneRequest): ModifyCollationTimeZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCollationTimeZone', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBDescriptionRequest {
  DBDescription: string(name='DBDescription', description='The description of the database.', example='Test database A', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the database.', example='testDB01', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model ModifyDBDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBDescriptionResponseBody(name='body'),
}

/**
  * > This operation is not applicable to instances that run PostgreSQL.
  *
 */
async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceAutoUpgradeMinorVersionRequest {
  autoUpgradeMinorVersion: string(name='AutoUpgradeMinorVersion', description='The method that is used to update the minor engine version of the instance. Valid values:

*   **Auto:** automatic update.
*   **Manual**: manual update. ApsaraDB RDS automatically updates the current minor engine version of the instance only when the current minor engine version is phased out.', example='Auto', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceAutoUpgradeMinorVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A31818D5-0550-4A81-8D13-B45948D7193F'),
}

model ModifyDBInstanceAutoUpgradeMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceAutoUpgradeMinorVersionResponseBody(name='body'),
}

/**
  * This operation is supported only for instances that run MySQL.
  *
 */
async function modifyDBInstanceAutoUpgradeMinorVersion(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest): ModifyDBInstanceAutoUpgradeMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceAutoUpgradeMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConfigRequest {
  clientToken?: string(name='ClientToken', example='6000170000591aed949d0f****', position='Query'),
  configName: string(name='ConfigName', example='pgbouncer', position='Query'),
  configValue: string(name='ConfigValue', example='true', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceConfigResponseBody = {
  requestId?: string(name='RequestId', example='76364A52-E0AB-5CC8-9818-CF1DC482C092'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionModeRequest {
  connectionMode: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: database proxy mode

The system automatically assigns a connection mode to the instance.

>  SQL Server 2012, SQL Server 2016, and SQL Server 2017 support only the standard mode.', example='Performance', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='testuser@aliyun.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceConnectionModeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyDBInstanceConnectionModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionModeResponseBody(name='body'),
}

/**
  * > The API has been taken offline
  *
 */
async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  babelfishPort?: string(name='BabelfishPort', description='The Tabular Data Stream (TDS) port of the instance for which Babelfish is enabled.

> This parameter applies only to ApsaraDB RDS for PostgreSQL instances. For more information about Babelfish for ApsaraDB RDS for PostgreSQL, see [Introduction to Babelfish](~~428613~~).', example='1433', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the endpoint after the change. Only the prefix of the value of **CurrentConnectionString** can be changed.

> The value must be 8 to 64 characters in length and can contain letters, digits, and hyphens (-). The value cannot contain any of the following special characters: ! # % ^ & \\* = + | {} ; : \\" " ,<> / ?', example='rm-****', position='Query'),
  currentConnectionString: string(name='CurrentConnectionString', description='The endpoint of the instance. It can be an internal endpoint, a public endpoint, or a classic network endpoint in hybrid access mode.

> The read/write splitting endpoint cannot be changed.', example='rm-uf6wjk5x****.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  generalGroupName?: string(name='GeneralGroupName', description='The name of the dedicated cluster to which the instance belongs. This parameter is returned only when the instance is created in an ApsaraDB MyBase cluster that runs MySQL on Standard Edition.', example='rgc-bp1tkv8****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  PGBouncerPort?: string(name='PGBouncerPort', example='6432', position='Query'),
  port: string(name='Port', description='The port number after the change.', example='3306', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

/**
  * ApsaraDB RDS provides the internal and public endpoints. ApsaraDB RDS also allows hybrid access by using both a virtual private cloud (VPC) endpoint and a classic network endpoint.
  * *   You can change only the prefix of an endpoint.
  * *   The read/write splitting endpoint cannot be changed.
  *
 */
async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDelayedReplicationTimeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readSQLReplicationTime: string(name='ReadSQLReplicationTime', description='The replication latency of the read-only instance. Unit: seconds.', example='100', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceDelayedReplicationTimeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
  readSQLReplicationTime?: string(name='ReadSQLReplicationTime', description='The replication latency of the read-only instance. Unit: seconds.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFB6083A-7699-489B-8278-C0CB4793A96E'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='1715482.0'),
}

model ModifyDBInstanceDelayedReplicationTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDelayedReplicationTimeResponseBody(name='body'),
}

async function modifyDBInstanceDelayedReplicationTime(request: ModifyDBInstanceDelayedReplicationTimeRequest): ModifyDBInstanceDelayedReplicationTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDelayedReplicationTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.

> 

*   Before you call the DescribeDBInstances operation, make sure that your instance is one of the following instances:

    *   The instance runs MySQL.
    *   The instance runs PostgreSQL.
    *   The instance runs MariaDB.

*   The instance is a pay-as-you-go instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  deletionProtection: boolean(name='DeletionProtection', description='Specifies whether to enable the release protection feature for the read-only instance. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C5CFDEE-F774-4DED-89A2-1D76EC63C575'),
}

model ModifyDBInstanceDeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDeletionProtectionResponseBody(name='body'),
}

/**
  * For more information, see [Enable or disable the release protection feature for an ApsaraDB RDS for MySQL instance](~~414512~~).
  *
 */
async function modifyDBInstanceDeletionProtection(request: ModifyDBInstanceDeletionProtectionRequest): ModifyDBInstanceDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription: string(name='DBInstanceDescription', description='The name of the instance.

> The name must be 2 to 64 characters in length.', example='Instance in Alibaba Cloud test environment', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6000170000591aed949d0f****', position='Query'),
  DBInstanceEndpointDescription?: string(name='DBInstanceEndpointDescription', description='The user-defined description of the endpoint.', example='for readonly business', position='Query'),
  DBInstanceEndpointId: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance. You can call the [DescribeDBInstanceEndpoints](~~464397~~) operation to query the endpoint ID of the instance.', example='ep-****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****', position='Query'),
  nodeItems?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****'),
      nodeId?: string(name='NodeId', description='The ID of the node.

You can use one of the following methods to query the ID of the node:

*   Log on to the ApsaraDB RDS console, go to the instance details page, and then view the ID of the node in the instance topology section.
*   Call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the ID of the node.', example='rn-xxxx-****'),
      weight?: long(name='Weight', description='The weight of the node. Read requests are distributed based on the weight.

Valid values: 0 to 100.', example='50'),
    }
  ](name='NodeItems', description='The information about the node that is configured for the endpoint.', shrink='json', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceEndpointResponseBody = {
  data?: {
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-****'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2911788-25E8-42E5-A3A3-1B38D263F01E'),
}

model ModifyDBInstanceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceEndpointResponseBody(name='body'),
}

/**
  * ## Background information
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  * *   When you modify information about the endpoint of an instance, you can modify the settings only of common parameters of the endpoint, such as the weight and description. This operation is called to manage an endpoint.
  *
 */
async function modifyDBInstanceEndpoint(request: ModifyDBInstanceEndpointRequest): ModifyDBInstanceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceEndpointAddressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests.

The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='6000170000591aed949d0f****', position='Query'),
  connectionString: string(name='ConnectionString', description='The endpoint that you want to modify. The endpoint can be a public endpoint or an internal endpoint.', example='rm-uf6wjk5****.mysql.rds.aliyuncs.com', position='Query'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the new endpoint. You can modify only the prefix of the endpoint that is specified by the ConnectionString parameter.', example='rm-bp181qoj4s34m33****', position='Query'),
  DBInstanceEndpointId: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance. You can call the [DescribeDBInstanceEndpoints](~~610488~~) operation to query the endpoint ID of the instance.', example='ep-****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-****', position='Query'),
  port?: string(name='Port', description='The port number of the new endpoint.', example='3306', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The IP address of the internal endpoint.', example='172.16.XX.XX', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the internal endpoint.', example='vsw-bp12u14ecz****', position='Query'),
  vpcId?: string(name='VpcId', description='The VPC ID of the internal endpoint.', example='vpc-bp17xdic25d****', position='Query'),
}

model ModifyDBInstanceEndpointAddressResponseBody = {
  data?: {
    DBInstanceEndpointId?: string(name='DBInstanceEndpointId', description='The endpoint ID of the instance.', example='ep-****'),
    DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-****'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90496720-2319-42A8-87CD-FCE4DF95EBED'),
}

model ModifyDBInstanceEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceEndpointAddressResponseBody(name='body'),
}

/**
  * ## Background information
  * *   This operation is suitable only for ApsaraDB RDS for MySQL instances that run RDS Cluster Edition.
  * *   You can modify the following information about the endpoint of an instance: the public and internal endpoints, the public and internal ports, and the virtual private cloud (VPC), vSwitch, and IP address of the internal endpoint.
  * *   The VPC and vSwitch must be modified at the same time. If you specify the VPC, vSwitch, and IP address of the internal endpoint, you do not need to specify the endpoint and port. If you specify the endpoint and port of the internal endpoint, you do not need to specify the VPC, vSwitch, and IP address.
  *
 */
async function modifyDBInstanceEndpointAddress(request: ModifyDBInstanceEndpointAddressRequest): ModifyDBInstanceEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceHAConfigRequest {
  dbInstanceId: string(name='DbInstanceId', description='The ID of the instance.', example='rm-uf6wjk543xxxxx', position='Query'),
  HAMode: string(name='HAMode', description='The HA mode of the instance.

*   RPO: Data consistency is preferred. The instance ensures data reliability to minimize data losses. If you have high requirements on data consistency, select this mode.
*   RTO: Service availability is preferred. The instance restores the database service at the earliest opportunity to ensure service availability. If you have high requirements for service availability, select this mode.', example='RPO', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  syncMode: string(name='SyncMode', description='The data replication mode of the instance. For more information, see [Data replication mode](~~96055~~).

*   Semi-sync: the semi-synchronous mode.
*   Sync: the synchronous mode.
*   gAsyncg: the asynchronous mode.
*   Mgr: the MySQL group replication (MGR) mode. This mode is available only for the China site (aliyun.com).

> This parameter is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.', example='Sync', position='Query'),
}

model ModifyDBInstanceHAConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE31DA81C9DD'),
}

model ModifyDBInstanceHAConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceHAConfigResponseBody(name='body'),
}

async function modifyDBInstanceHAConfig(request: ModifyDBInstanceHAConfigRequest): ModifyDBInstanceHAConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceHAConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceMaintainTimeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of requests. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  maintainTime: string(name='MaintainTime', description='The maintenance time of the instance. Specify the time in the ISO 8601 standard in the *HH:mm*Z-*HH:mm*Z format. The time must be in UTC.', example='22:00Z-02:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

/**
  * You can set the maintenance time to a period of time during off-peak hours. Alibaba Cloud performs routine maintenance within the maintenance time to minimize impacts on your business.
  *
 */
async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceMetricsRequest {
  DBInstanceName: string(name='DBInstanceName', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='pgm-bp1s1j103lo6****', position='Query'),
  metricsConfig: string(name='MetricsConfig', description='The keys of the Enhanced Monitoring metrics that you want to display for the instance. You can enter a maximum of 30 metric keys. If you enter multiple metric keys, you must separate the metric keys with commas (,).

You can call the [DescribeAvailableMetrics](~~314326~~) operation to query the keys of metrics.', example='os.cpu_usage.sys.avg,os.cpu_usage.user.avg', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scope: string(name='Scope', description='The application scope of this modification. Valid values:

*   **instance**: This modification is applied only to the current instance.
*   **region**: This modification is applied to all ApsaraDB RDS for PostgreSQL instances that are equipped with the same type of storage media as the current instance in the region to which the current instance belongs. For example, if the current instance is equipped with standard SSDs or enhanced SSDs (ESSDs), this modification is applied to all ApsaraDB RDS for PostgreSQL instances that are equipped with standard SSDs or ESSDs in the region to which the current instance belongs.', example='instance', position='Query'),
}

model ModifyDBInstanceMetricsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='pgm-bp1s1j103lo6****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B55934BB-FFAA-5276-80A8-E0FDB12810B3'),
  scope?: string(name='Scope', description='The application scope of this modification. Valid values:

*   **instance**: This modification is applied only to the current instance.
*   **region**: This modification is applied to all ApsaraDB RDS for PostgreSQL instances that are equipped with the same type of storage media as the current instance in the region to which the current instance belongs.', example='instance'),
}

model ModifyDBInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMetricsResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * Before you call this operation, make sure that the instance runs PostgreSQL.
  * For more information, see [View the Enhanced Monitoring metrics of an ApsaraDB RDS for PostgreSQL instance](~~299200~~).
  *
 */
async function modifyDBInstanceMetrics(request: ModifyDBInstanceMetricsRequest): ModifyDBInstanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceMetrics', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceMonitorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the IDs of instances.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: string(name='Period', description='The monitoring frequency that you want to use. Valid values:

*   **5**
*   **10**
*   **60**
*   **300**

Unit: seconds.', example='60', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='52B9805C-432C-4ED1-83FD-2F916B6D2733'),
}

model ModifyDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMonitorResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and pricing of ApsaraDB RDS. For more information, see [Billable items, billing methods, and pricing](~~45020~~).
  * Alibaba Cloud provides different monitoring frequencies for different instances. For more information, see [Set monitoring frequencies](~~26200~~).
  * > * If your want to set the monitoring frequency to every few seconds, you are charged additional fees. For more information, see [Billable items, billing methods, and pricing](~~45020~~).
  * > * This operation is not supported for ApsaraDB RDS for PostgreSQL instances. The monitoring frequency of an ApsaraDB RDS for PostgreSQL instance varies based on the query time range. For more information, see [Query performance metrics](~~26280~~).
  *
 */
async function modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): ModifyDBInstanceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceNetworkExpireTimeRequest {
  classicExpiredDays: int32(name='ClassicExpiredDays', description='The retention days of the classic network endpoint. Valid values: **1 to 120**. Unit: days.', example='7', position='Query'),
  connectionString: string(name='ConnectionString', description='The classic network endpoint whose expiration time you want to extend. Two types of classic network endpoints are supported:

*   The internal endpoint of the classic network.
*   The read/write splitting endpoint of the classic network.', example='rm-uf6wjk5xxxxx.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceNetworkExpireTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ModifyDBInstanceNetworkExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetworkExpireTimeResponseBody(name='body'),
}

/**
  * When an ApsaraDB for RDS instance is in the hybrid access mode, which uses both a VPC endpoint and a classic network endpoint, this operation is used to extend the expiration time of the classic network endpoint.
  *
 */
async function modifyDBInstanceNetworkExpireTime(request: ModifyDBInstanceNetworkExpireTimeRequest): ModifyDBInstanceNetworkExpireTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceNetworkExpireTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceNetworkTypeRequest {
  classicExpiredDays?: string(name='ClassicExpiredDays', description='The number of days for which you want to retain the classic network endpoint. Valid values: **1 to 120**. Default value: **7**.

> If you set the **RetainClassic** parameter to **True**, you must also specify this parameter.', example='7', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  instanceNetworkType: string(name='InstanceNetworkType', description='The network type after the modification. Set the value to **VPC**.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The internal IP address of the instance. The internal IP address must be within the CIDR block supported by the specified vSwitch. ApsaraDB RDS automatically assigns an internal IP address to the instance based on the values of the **VPCId** and **VSwitchId** parameters.', example='172.10.40.25', position='Query'),
  readWriteSplittingClassicExpiredDays?: int32(name='ReadWriteSplittingClassicExpiredDays', description='The number of days for which you want to retain the read/write splitting endpoint of the classic network type. Valid values: **1 to 120**. Default value: **7**.

> This parameter takes effect only when a read/write splitting endpoint of the classic network type exists and the **RetainClassic** parameter is set to **True**.', example='7', position='Query'),
  readWriteSplittingPrivateIpAddress?: string(name='ReadWriteSplittingPrivateIpAddress', description='The internal IP address that corresponds to the read/write splitting endpoint of the instance. The internal IP address must be within the CIDR block supported by the specified vSwitch. The system automatically assigns an internal IP address to the read-only instance based on the values of the **VPCId** and **VSwitchId** parameters.

> This value is valid when a read/write splitting endpoint of the classic network type exists.', example='192.168.0.22', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retainClassic?: string(name='RetainClassic', description='Specifies whether to retain the classic network endpoint. Valid values:

*   **True**: retains the classic network endpoint.
*   **False**: does not retain the classic network endpoint.

Default value: **False**.', example='True', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the VPC.', example='vpc-uf6f7l4fg90xxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. This parameter is required if the **VPCId** parameter is specified.', example='vsw-uf6adz52c2pxxxxx', position='Query'),
}

model ModifyDBInstanceNetworkTypeResponseBody = {
  connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the instance.', example='rm-bp1*****************.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='1025486523574'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetworkTypeResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * The network type of the instance is classic network.
  *
 */
async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceNetworkType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstancePayTypeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp1842vmucoa5w874', position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   Postpaid: pay-as-you-go
*   Prepaid: subscription', example='Prepaid', position='Query'),
  period: string(name='Period', description='The subscription method of the instance. This parameter must be specified when PayType is set to Prepaid.

*   Year
*   Month', example='Year', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: int32(name='UsedTime', description='Valid values when Period is set to Year: 1 to 9. Valid values when Period is set to Month: 1, 2, and 3.', example='2', position='Query'),
}

model ModifyDBInstancePayTypeResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='100789370230206'),
}

model ModifyDBInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstancePayTypeResponseBody(name='body'),
}

/**
  * This operation is used to change only the billing method of an instance from pay-as-you-go to subscription.
  * The following requirements must be met:
  * *   The instance belongs to the current account.
  * *   The instance uses one of the most recent instance types. For more information, see [Instance types](~~26312~~).
  *     **
  *     **Note**You cannot change the billing method of an instance that uses a phased-out instance type from pay-as-you-go to subscription. If you want to change the billing method of an instance that uses a phased-out instance type from pay-as-you-go to subscription, you must change the instance type of the instance to one of the most recent instance types. Then, you can change the billing method of the instance from pay-as-you-go to subscription. To change the instance type of an instance, you can change the instance specifications of the instance. For more information, see [Change the specifications of an ApsaraDB RDS instance](~~96061~~).
  * *   The instance uses the pay-as-you-go billing method and is in the Running state.
  * *   Your Alibaba Cloud account has no unpaid orders for the instance for which you want to change the billing method.
  *
 */
async function modifyDBInstancePayType(request: ModifyDBInstancePayTypeRequest): ModifyDBInstancePayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstancePayType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceProxyConfigurationRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  proxyConfigurationKey: string(name='ProxyConfigurationKey', description='The key of the **configuration item** for the database proxy. Valid values:

*   **TransparentSwitch**: transparent switchover
*   **PersistentConnections**: short-lived connection optimization
*   **AttacksProtection**: brute-force attack protection', example='TransparentSwitch', position='Query'),
  proxyConfigurationValue: string(name='ProxyConfigurationValue', description='The value of the **configuration item** for the database proxy. Valid values:

*   If you set the ProxyConfigurationKey parameter to **TransparentSwitch**, you can set this parameter to one of the following values:

    *   **Enable**. This is the default value.
    *   **Disable**. Example: {"status":"Enable"}.

*   If you set the ProxyConfigurationKey parameter to **PersistentConnections**, you can set this parameter to one of the following values:

    *   **Enable**.
    *   **Disable**. This is the default value. Example: {"status":"Disable"}.

*   If you set the ProxyConfigurationKey parameter to **AttacksProtection**, you can set this parameter to one of the following values:

    *   **Enable**.
    *   **Disable**. This is the default value. Example: {"status":"Disable"}.

In this case, the return value is a JSON string. Example:

    {"status":"Disable", "check_interval_seconds": 60,
                    "max_failed_login_attempts": 60, "blocking_seconds": 600}

Description and valid values:

*   Each client allows {max_failed_login_attempts} logon attempts upon failure within {check_interval_seconds} seconds. If the number of logon attempts exceeds the limit, the client is disabled for {blocking_seconds} seconds before the client can try again.
*   The following list describes the valid values of each field in the preceding example.

check_interval_seconds: **30 to 600**. Unit: seconds. max_failed_login_attempts: **10 to 5000**. Unit: number of times. blocking_seconds: **30 to 3600**. Unit: seconds.', example='{"status":"Enable"}', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceProxyConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9705B5D2-C5B6-4526-B779-26D755EC1B8C'),
}

model ModifyDBInstanceProxyConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceProxyConfigurationResponseBody(name='body'),
}

/**
  * > This operation is phased out.
  *
 */
async function modifyDBInstanceProxyConfiguration(request: ModifyDBInstanceProxyConfigurationRequest): ModifyDBInstanceProxyConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceProxyConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceSSLRequest {
  ACL?: string(name='ACL', description='The method that is used to verify the identities of clients. This parameter is supported only when the instance runs PostgreSQL with cloud disks. In addition, this parameter is available only when the public key of the CA that issues client certificates is enabled. Valid values:

*   **cert**
*   **perfer**
*   **verify-ca**
*   **verify-full** (supported only when the instance runs PostgreSQL 12 or later)', example='cert', position='Query'),
  CAType?: string(name='CAType', description='The type of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. If you set SSLEnabled to **1**, the default value of this parameter is **aliyun**. Valid values:

*   **aliyun**: a cloud certificate
*   **custom**: a custom certificate', example='aliyun', position='Query'),
  clientCACert?: string(name='ClientCACert', description='The public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks. This parameter must be specified when ClientCAEbabled is set to **1**.', example='-----BEGIN CERTIFICATE-----MIID*****viXk=-----END CERTIFICATE-----', position='Query'),
  clientCAEnabled?: int32(name='ClientCAEnabled', description='Specifies whether to enable the public key of the CA that issues client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks. Valid values:

*   **1**: enables the public key.
*   **0**: disables the public key.', example='1', position='Query'),
  clientCertRevocationList?: string(name='ClientCertRevocationList', description='The CRL that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks. This parameter must be specified when ClientCrlEnabled is set to **1**.', example='-----BEGIN X509 CRL-----MIIB****19mg==-----END X509 CRL-----', position='Query'),
  clientCrlEnabled?: int32(name='ClientCrlEnabled', description='Specifies whether to enable a certificate revocation list (CRL) that contains revoked client certificates. This parameter is supported only when the instance runs PostgreSQL with cloud disks. In addition, this parameter is available only when the public key of the CA that issues client certificates is enabled. Valid values:

*   **1**: enables the CRL.
*   **0**: disables the CRL.', example='1', position='Query'),
  connectionString: string(name='ConnectionString', description='The internal or public endpoint for which the server certificate needs to be created or updated.', example='rm-uf6wjk5xxxxx.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  replicationACL?: string(name='ReplicationACL', description='The method that is used to verify the replication permission. This parameter is supported only when the instance runs PostgreSQL with cloud disks. In addition, this parameter is available only when the public key of the CA that issues client certificates is enabled. Valid values:

*   **cert**
*   **perfer**
*   **verify-ca**
*   **verify-full** (supported only when the instance runs PostgreSQL 12 or later)', example='cert', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SSLEnabled?: int32(name='SSLEnabled', description='Specifies whether to enable or disable the SSL encryption feature. Valid values:

*   **1**: enables the feature.
*   **0**: disables the feature.', example='1', position='Query'),
  serverCert?: string(name='ServerCert', description='The content of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. This parameter must be specified when CAType is set to **custom**.', example='-----BEGIN CERTIFICATE-----MIID*****QqEP-----END CERTIFICATE-----', position='Query'),
  serverKey?: string(name='ServerKey', description='The private key of the server certificate. This parameter is supported only when the instance runs PostgreSQL with cloud disks. This parameter must be specified when CAType is set to **custom**.', example='-----BEGIN PRIVATE KEY-----MIIE****ihfg==-----END PRIVATE KEY-----', position='Query'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='777C4593-8053-427B-99E2-105593277CAB'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

/**
  * This operation is used to configure SSL encryption for an instance. For more information, see [](~~32474~~).
  * > 
  * *   Before you call this operation, make sure that your instance is one of the following instances:
  *     *   ApsaraDB RDS for MySQL instances that do not run RDS Basic Edition
  *     *   ApsaraDB RDS for SQL Server instances
  *     *   ApsaraDB RDS for PostgreSQL instances that use cloud disks
  * *   SSL encryption is not supported for the connections to the read/write splitting endpoint of an instance.
  *
 */
async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceSpecRequest {
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  burstingEnabled?: boolean(name='BurstingEnabled', position='Query'),
  category?: string(name='Category', example='HighAvailability', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The ID of the dedicated cluster.', example='rds.mys2.small', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='N/A', example='rm-uf6wjk5*******', position='Query'),
  DBInstanceStorage?: int32(name='DBInstanceStorage', description='The ID of the zone.', example='20', minimum=5, maximum=32000, position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The specification changes of a serverless ApsaraDB RDS for MySQL instance.', example='local_ssd', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='Specifies whether to enable the forced scaling feature for the serverless instance. Valid values:

*   **true**
*   **false** (default)', example='dhg-7a9********', position='Query'),
  direction?: string(name='Direction', description='The maximum number of RDS Capacity Units (RCUs).', example='Up', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The ID of the resource group.', example='MaintainTime', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The validity period of the specification changes on an ApsaraDB RDS for SQL Server instance. Unit: day.', example='5.6', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The time at which you want to change the specifications. We recommend that you apply the specification during off-peak hours. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> 

*   You must specify a point in time later than the current time. Otherwise, the specification change task fails. The current time refers to the time to call this operation. If the specification change task fails, you must wait for the order to be automatically canceled, and then call this operation again.

*   If you want to increase the storage capacity or change the ESSD storage type between different PLs, the specification change immediately takes effect and does not affect your workloads. You do not need to configure this parameter.', example='Postpaid', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the request.', example='rg-acfmy**********', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverlessConfiguration?: {
    autoPause?: boolean(name='AutoPause', example='true'),
    maxCapacity?: double(name='MaxCapacity', example='8'),
    minCapacity?: double(name='MinCapacity', example='0.5'),
    switchForce?: boolean(name='SwitchForce', example='false'),
  }(name='ServerlessConfiguration', shrink='json', position='Query'),
  sourceBiz?: string(name='SourceBiz', description='The minimum number of RCUs.', example='Specifies whether to enable the automatic suspension feature.', position='Query'),
  switchTime?: string(name='SwitchTime', description='The response parameters.', example='2019-07-10T13:15:12Z', position='Query'),
  usedTime?: long(name='UsedTime', description='The ID of the order.', example='3', position='Query'),
  zoneId?: string(name='ZoneId', description='The RDS edition of the instance. Valid values:

*   **Basic**: RDS Basic Edition.
*   **HighAvailability**: RDS High-availability Edition.
*   **AlwaysOn**: RDS Cluster Edition for SQL Server.
*   **Finance**: RDS Enterprise Edition. This edition is available only on the China site (aliyun.com).

> If you set **EngineVersion** to an SQL Server version number, you must also specify this parameter.', example='cn-hangzhou-b', position='Query'),
}

model ModifyDBInstanceSpecResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='rm-uf6wjk5*******'),
  orderId?: long(name='OrderId', example='20793850608****'),
  requestId?: string(name='RequestId', example='3C5CFDEE-F774-4DED-89A2-1D76EC63C575'),
}

model ModifyDBInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSpecResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance has no ongoing backup tasks.
  * *   At least one of DBInstanceClass and DBInstanceStorage is specified in the request.
  * *   If you want to decrease the storage capacity, the new storage capacity that you specify must be greater than or equal to 1.1 times the used storage.
  * *   The instance is a primary instance or read-only instance.
  * > If you want to upgrade the RDS edition of the instance, you must select an instance type that supports the new RDS edition. For example, if you want to upgrade the RDS edition of the instance from RDS Basic Edition to RDS High-availability Edition, you must select an instance type that supports RDS High-availability Edition.
  *
 */
async function modifyDBInstanceSpec(request: ModifyDBInstanceSpecRequest): ModifyDBInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceTDERequest {
  certificate?: string(name='Certificate', description='The file that contains the certificate.\\
Format:

*   Public endpoint: `oss-<The ID of the region>.aliyuncs.com:<The name of the bucket>:<The name of the certificate file>` (The file name contains the extension.)
*   Internal endpoint: `oss-<The ID of the region>-internal.aliyuncs.com:<The name of the bucket>:<The name of the certificate file>` (The file name contains the extension.)

> 

*   This parameter is available when the instance runs SQL Server 2019 SE or an Enterprise Edition of SQL Server.

*   You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='oss-ap-southeast-1.aliyuncs.com:****:key.cer', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5****', position='Query'),
  DBName?: string(name='DBName', description='The name of the database for which you want to enable TDE. You can specify up to 50 database names in a single request. If you specify multiple database names, separate the database names with commas (,).

> This parameter is available and must be specified only when the instance runs SQL Server 2019 SE or an Enterprise Edition of SQL Server.', example='testDB', position='Query'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the custom key.

> This parameter is available when the instance runs MySQL or PostgreSQL.', example='749c1df7-****-****-****-****', position='Query'),
  isRotate?: boolean(name='IsRotate', description='Specifies whether to replace the key. Valid values:

*   **true**: replaces the key.
*   **false**: does not replace the key.

Default value: **false**

> This parameter is available only when the instance runs PostgreSQL.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  passWord?: string(name='PassWord', description='The password of the certificate.

> This parameter is available when the instance runs SQL Server 2019 SE or an Enterprise Edition of SQL Server.', example='1qaz@WSX', position='Query'),
  privateKey?: string(name='PrivateKey', description='The file that contains the private key of the certificate.\\
Format:

*   Public endpoint: `oss-<The ID of the region>.aliyuncs.com:<The name of the bucket>:<The name of the file that contains the private key>` (The file name contains the extension.)
*   Internal endpoint: `oss-<The ID of the region>-internal.aliyuncs.com:<The name of the bucket>:<The name of the file that contains the private key>` (The file name contains the extension.)

> 

*   This parameter is available when the instance runs SQL Server 2019 SE or an Enterprise Edition of SQL Server.

*   You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='oss-ap-southeast-1.aliyuncs.com:****:key.pvk', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role. A RAM role is a virtual identity that you can create within your Alibaba Cloud account. For more information, see [RAM role overview](~~93689~~).

> This parameter is available when the instance runs MySQL or PostgreSQL.', example='acs:ram::1406926****:role/aliyunrdsinstanceencryptiondefaultrole', position='Query'),
  TDEStatus: string(name='TDEStatus', description='The status of TDE. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled', position='Query'),
}

model ModifyDBInstanceTDEResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='777C4593-8053-427B-99E2-105593277CAB'),
}

model ModifyDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceTDEResponseBody(name='body'),
}

/**
  * TDE can perform real-time I/O encryption and decryption on data files. TDE encrypts data before the data is written to a disk, and decrypts data before the data is read from a disk and written to the memory. For more information, see [Configure TDE for an ApsaraDB RDS for MySQL instance](~~96121~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   Key Management Service (KMS) is activated. If KMS is not activated, you can activate KMS when you enable TDE.
  * *   The instance must run one of the following database engine versions and RDS editions:
  *     *   MySQL 8.0 (with a minor engine version of 20191015 or later) on RDS High-availability Edition with local disks
  *     *   MySQL 5.7 (with a minor engine version of 20191015 or later) on RDS High-availability Edition with local disks
  *     *   MySQL 5.6
  *     *   SQL Server 2019 SE or an Enterprise Edition of SQL Server
  *     *   PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, PostgreSQL 13, PostgreSQL 14, PostgreSQL 15 with cloud disks and a minor engine version of 20221030 or later
  *
 */
async function modifyDBInstanceTDE(request: ModifyDBInstanceTDERequest): ModifyDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBProxyRequest {
  configDBProxyService: string(name='ConfigDBProxyService', description='Specifies whether to enable or disable the database proxy feature. Valid values:

*   **Startup**: enables the database proxy feature.
*   **Shutdown**: disables the database proxy feature.', example='Startup', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  DBProxyInstanceNum?: string(name='DBProxyInstanceNum', description='The number of proxy instances that are enabled. Valid values: **1** to **60**. Default value: **1**.

> The capability to process requests increases in proportion with the number of proxy instances. You can specify a proper number of proxy instances based on the monitoring information of database loads.', example='1', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Set the value to **VPC**.

> This parameter is required if you enable the database proxy feature for an ApsaraDB RDS for MySQL instance that uses cloud disks or an ApsaraDB RDS for PostgreSQL instance.', example='VPC', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the virtual private cloud (VPC) to which the instance belongs. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the VPC ID of the instance.

> This parameter is required if you enable the database proxy feature for an ApsaraDB RDS for MySQL instance that uses cloud disks or an ApsaraDB RDS for PostgreSQL instance.', example='vpc-xxxxxxxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is associated with the specified VPC. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the VPC ID of the instance.

> This parameter is required if you enable the database proxy feature for an ApsaraDB RDS for MySQL instance that uses cloud disks or an ApsaraDB RDS for PostgreSQL instance.', example='vsw-xxxxxxxxxxxx', position='Query'),
}

model ModifyDBProxyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC452BB1-EED8-4278-95C7-0324B3710DF1'),
}

model ModifyDBProxyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyResponseBody(name='body'),
}

/**
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  * Before you call this operation, make sure that the following requirements are met:
  * If the instance runs MySQL, the instance must run one of the following MySQL versions and RDS editions:
  * *   MySQL 8.0 with a minor engine version of 20191204 or later on RDS Enterprise Edition
  * *   MySQL 8.0 with a minor engine version of 20190915 or later on RDS High-availability Edition
  * *   MySQL 5.7 with a minor engine version of 20191128 or later on RDS Enterprise Edition
  * *   MySQL 5.7 with a minor engine version of 20190925 or later on RDS High-availability Edition
  * *   MySQL 5.6 with a minor engine version of 20200229 or later on RDS High-availability Edition
  * If the instance runs PostgreSQL, the instance must meet the following requirements:
  * *   The instance runs PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, PostgreSQL 13, PostgreSQL 14, or PostgreSQL 15.
  * *   The instance uses cloud disks.
  * *   The instance runs RDS High-availability Edition.
  * *   The instance is a primary instance.
  *
 */
async function modifyDBProxy(request: ModifyDBProxyRequest): ModifyDBProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBProxy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBProxyEndpointRequest {
  configDBProxyFeatures?: string(name='ConfigDBProxyFeatures', description='The features that you want to enable for the proxy endpoint. If you specify more than one feature, separate the features with semicolons (;). Format: `Feature 1:Status;Feature 2:Status;...`. Do not add a semicolon (;) at the end of the last value.

Valid feature values:

*   **ReadWriteSpliting**: read/write splitting
*   **ConnectionPersist**: connection pooling
*   **TransactionReadSqlRouteOptimizeStatus**: transaction splitting

Valid status values:

*   **1**: enabled
*   **0**: disabled

> If the instance runs PostgreSQL, you can enable only the read/write splitting feature, which is specified by **ReadWriteSpliting**.', example='ReadWriteSpliting:1;ConnectionPersist:0', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp145737x5bi6****', position='Query'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId', description='The ID of the proxy endpoint. You can call the [DescribeDBProxyEndpoint](~~140955~~) operation to query the ID of the proxy endpoint.

> 

*   If the instance runs MySQL and you set **DbEndpointOperator** to **Delete** or **Modify**, you must specify DBProxyEndpointId.

*   If the instance runs PostgreSQL and you set **DbEndpointOperator** to **Delete**, **Modify**, or **Create**, you must specify DBProxyEndpointId.', example='gos787jog2wk0y****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  dbEndpointAliases?: string(name='DbEndpointAliases', description='The description of the proxy terminal.', example='test-proxy', position='Query'),
  dbEndpointOperator?: string(name='DbEndpointOperator', description='The type of operation that you want to perform. Valid values:

*   **Modify**: Modify a proxy terminal. This is the default value.
*   **Create**: Create a proxy terminal.
*   **Delete**: Delete a proxy terminal.', example='Modify', position='Query'),
  dbEndpointReadWriteMode?: string(name='DbEndpointReadWriteMode', description='The read and write attributes of the proxy terminal. Valid values:

*   **ReadWrite**: The proxy terminal connects to the primary instance and can receive both read and write requests.
*   **ReadOnly**: The proxy terminal does not connect to the primary instance and can receive only read requests. This is the default value.

> 

*   If you set **DbEndpointOperator** to **Create**, you must also specify DbEndpointReadWriteMode.

*   If the instance runs MySQL and you change the value of this parameter from **ReadWrite** to **ReadOnly**, the transaction splitting feature is disabled.', example='ReadWrite', position='Query'),
  dbEndpointType?: string(name='DbEndpointType', description='The type of the proxy terminal. This is a reserved parameter. You do not need to specify this parameter.', example='RWSplit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readOnlyInstanceDistributionType?: string(name='ReadOnlyInstanceDistributionType', description='The policy that is used to allocate read weights. Valid values:

*   **Standard**: The system automatically allocates read weights to the instance and its read-only instances based on the specifications of the instances.
*   **Custom**: You must manually allocate read weights to the instance and its read-only instances.

> You must specify this parameter only when the read/write splitting feature is enabled. For more information about the permission allocation policy, see [Modify the latency threshold and read weights of ApsaraDB RDS for MySQL instances](~~96076~~) and [Enable and configure the database proxy feature for an ApsaraDB RDS for PostgreSQL instance](~~418272~~).', example='Standard', position='Query'),
  readOnlyInstanceMaxDelayTime?: string(name='ReadOnlyInstanceMaxDelayTime', description='The latency threshold that is allowed for read/write splitting. If the latency on a read-only instance exceeds the threshold that you specified, the system no longer forwards read requests to the read-only instance. Unit: seconds If you do not specify this parameter, the original value of this parameter is retained. Valid values: **0** to **3600**. Default value: **30**.

> You must specify this parameter only when the read/write splitting feature is enabled.', example='30', position='Query'),
  readOnlyInstanceWeight?: string(name='ReadOnlyInstanceWeight', description='The read weights of the instance and its read-only instances. A read weight must be a multiple of 100 and cannot exceed 10000. Formats:

*   Standard instance: `{"ID of the primary instance":"Weight","ID of the read-only instance":"Weight"...}`

    Example: `{"rm-uf6wjk5xxxx":"500","rr-tfhfgk5xxx":"200"...}`

*   Instance on RDS Cluster Edition: `{"ID of the read-only instance ID":"Weight","DBClusterNode":{"ID of the primary node":"Weight","ID of the secondary node ID":"Weight","ID of the secondary node ID":"Weight"...}}`

    Example: `{"rr-tfhfgk5xxx":"200","DBClusterNode":{"rn-2z****":"0","rn-2z****":"400","rn-2z****":"400"...}}`

    **

    **Note****DBClusterNode** is required if the instance runs RDS Cluster Edition. The DBClusterNode parameter includes information about **IDs** and **weights** of the primary and secondary nodes.', example='{"rm-uf6wjk5xxxx":"500","rr-tfhfgk5xxx":"200"...}', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBProxyEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6B50D92C-1960-4D4F-A290-AFADD6B1A5C8'),
}

model ModifyDBProxyEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyEndpointResponseBody(name='body'),
}

/**
  * Before you call the ModifyDBProxyEndpoint operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function modifyDBProxyEndpoint(request: ModifyDBProxyEndpointRequest): ModifyDBProxyEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBProxyEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBProxyEndpointAddressRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3a****', position='Query'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType', description='The network type of the proxy endpoint. Valid values:

*   **Public**: Internet
*   **VPC**: virtual private cloud (VPC)
*   **Classic**: classic network

If the instance runs MySQL, the default value of this parameter is **Classic**.

> If the instance runs PostgreSQL, you must set this parameter to **Public** or **VPC**.', example='Public', position='Query'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', description='The ID of the proxy endpoint. You can call the [DescribeDBProxyEndpoint](~~140955~~) operation to query the ID of the proxy endpoint.', example='ta9um4****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  DBProxyNewConnectString?: string(name='DBProxyNewConnectString', description='The new prefix of the proxy endpoint. Enter a prefix.

> You must specify at least one of the **DBProxyNewConnectString** and **DBProxyNewConnectStringPort** parameters.', example='test123456', position='Query'),
  DBProxyNewConnectStringPort?: string(name='DBProxyNewConnectStringPort', description='The port number that is associated with the proxy endpoint. Enter a port number.

> You must specify at least one of the **DBProxyNewConnectString** and **DBProxyNewConnectStringPort** parameters.', example='3307', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='50F6C32B-DD73-4DA1-ADA2-0EAF2B0FCD8A'),
}

model ModifyDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyEndpointAddressResponseBody(name='body'),
}

/**
  * After you enable the database proxy feature, a default proxy endpoint is generated. The proxy terminal feature is bound to the default proxy endpoint. You can create, modify, or delete a proxy endpoint.
  *
 */
async function modifyDBProxyEndpointAddress(request: ModifyDBProxyEndpointAddressRequest): ModifyDBProxyEndpointAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBProxyEndpointAddress', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBProxyInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3a****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  DBProxyInstanceNum: string(name='DBProxyInstanceNum', description='The number of proxy instances that are enabled. If the value of this parameter is 0, the database proxy feature is disabled for the instance. Valid values: **1** to **60**.

>  The capability of the database proxy to process requests increases with the number of proxy instances that are enabled. You can monitor the load on the instance and specify an appropriate number of proxy instances based on the load monitoring data.', example='2', position='Query'),
  DBProxyInstanceType: string(name='DBProxyInstanceType', description='The type of database proxy that is enabled for the instance. Set the value to **DedicatedProxy**.', example='DedicatedProxy', position='Query'),
  effectiveSpecificTime?: string(name='EffectiveSpecificTime', description='The point in time at which you want to apply the new database proxy settings. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

>  If you set the **EffectiveTime** parameter to **SpecificTime**, you must specify the EffectiveSpecificTime parameter.', example='2019-07-10T13:15:12Z', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time when you want to apply the new database proxy settings. Valid values:

*   **Immediate**: ApsaraDB RDS immediately applies the new settings.
*   **MaintainTime**: ApsaraDB RDS applies the new settings during the maintenance window that you specified. For more information, see [Modify the maintenance window](~~26249~~).
*   **SpecificTime**: ApsaraDB RDS applies the new settings at a specified point in time.

Default value: **MaintainTime**.', example='MaintainTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBProxyInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65C55572-530E-4A53-BE03-1D08CAF0F046'),
}

model ModifyDBProxyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyInstanceResponseBody(name='body'),
}

/**
  * Before you call the ModifyDBProxyInstance operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function modifyDBProxyInstance(request: ModifyDBProxyInstanceRequest): ModifyDBProxyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBProxyInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDTCSecurityIpHostsForSQLServerRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIpHosts: string(name='SecurityIpHosts', description='The IP address of the ECS instance and the hostname of the Windows computer. Format: IP address,Hostname. Multiple values are separated with semicolons (;).

>  For more information about how to query the computer hostname, see [Configure a distributed transaction whitelist](~~124321~~).', example='192.168.1.100,k3ecstest', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  whiteListGroupName: string(name='WhiteListGroupName', description='The name of the whitelist.', example='test1', position='Query'),
}

model ModifyDTCSecurityIpHostsForSQLServerResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx'),
  DTCSetResult?: string(name='DTCSetResult', description='The result of the whitelist configuration. Valid values:

*   **Success**
*   **Fail**', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='671B6D32-B907-4EFF-A3B7-94D2EAD5E3A3'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='178968983'),
}

model ModifyDTCSecurityIpHostsForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDTCSecurityIpHostsForSQLServerResponseBody(name='body'),
}

/**
  * Distributed transaction whitelists allow for distributed transactions between an Elastic Compute Service (ECS) instance and an RDS instance. For more information, see [Configure a distributed transaction whitelist](~~124321~~).
  * This operation is applicable to instances that run one of the following SQL Server versions in the RDS High-Availability Edition: 2012 SE, 2012 EE, 2014 SE, 2016 SE, 2016 EE, and 2017 SE.
  *
 */
async function modifyDTCSecurityIpHostsForSQLServer(request: ModifyDTCSecurityIpHostsForSQLServerRequest): ModifyDTCSecurityIpHostsForSQLServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDTCSecurityIpHostsForSQLServer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDasInstanceConfigRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz*****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageAutoScale: string(name='StorageAutoScale', description='Specifies whether to enable automatic storage expansion. Valid values:

*   **Enable**
*   **Disable**', example='Enable', position='Query'),
  storageThreshold?: int32(name='StorageThreshold', description='The threshold in percentage based on which an automatic storage expansion is triggered. If the available storage reaches the threshold, ApsaraDB RDS increases the storage capacity of the instance. Valid values:

*   **10**
*   **20**
*   **30**
*   **40**
*   **50**

>  If you set the **StorageAutoScale** parameter to **Enable**, you must specify this parameter.', example='50', minimum=10, maximum=50, position='Query'),
  storageUpperBound?: int32(name='StorageUpperBound', description='The maximum storage capacity that is allowed by automatic storage expansion. The value of this parameter must be equal to or greater than the current storage capacity of the instance.

*   Valid value for instances with ESSDs: 32000. Unit: GB
*   Valid value for instances with standard SSDs: 6000. Unit: GB

    > If you set the **StorageAutoScale** parameter to **Enable**, you must specify this parameter.', example='1000', minimum=0, position='Query'),
}

model ModifyDasInstanceConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C3C247D4-1643-4C5D-87C2-C829543FC626'),
}

model ModifyDasInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDasInstanceConfigResponseBody(name='body'),
}

/**
  * This operation is supported for ApsaraDB RDS for MySQL instances that run RDS High-availability Edition and use standard SSDs or enhanced SSDs (ESSDs) and ApsaraDB RDS for PostgreSQL instances that use standard SSDs or ESSDs. If the available storage reaches the specified threshold, ApsaraDB RDS increases the storage capacity of the instance to meet your storage requirements. In most cases, no transient connections occur during the expansion process. For more information, see [Configure automatic storage expansion for an ApsaraDB RDS for MySQL instance](~~173826~~) and [Configure automatic storage expansion for an ApsaraDB RDS for PostgreSQL instance](~~432496~~).
  * >  If an automatic storage expansion is triggered, ApsaraDB RDS increases the storage capacity based on the larger value between 15% of the purchased storage capacity and 5 GB.
  *
 */
async function modifyDasInstanceConfig(request: ModifyDasInstanceConfigRequest): ModifyDasInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDasInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDbProxyInstanceSslRequest {
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  dbInstanceId: string(name='DbInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-t4n3axxxxx', position='Query'),
  dbProxyConnectString: string(name='DbProxyConnectString', description='The dedicated proxy endpoint of the instance.', example='test123456.rwlb.rds.aliyuncs.com', position='Query'),
  dbProxyEndpointId: string(name='DbProxyEndpointId', description='The ID of the proxy endpoint. You can call the [DescribeDBProxyEndpoint](~~140955~~) operation to query the ID of the proxy endpoint.', example='ta9um4xxxxx', position='Query'),
  dbProxySslEnabled: string(name='DbProxySslEnabled', description='The SSL configuration setting that you want to apply on the instance. Valid values:

*   0: disables SSL encryption.
*   1: enables SSL encryption or modifies the endpoint that requires SSL encryption.
*   2: updates the validity period of the SSL certificate.

> This setting causes your instance to restart. Proceed with caution.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ModifyDbProxyInstanceSslResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BF46A62B-3717-4397-9338-36BB95C898B3'),
}

model ModifyDbProxyInstanceSslResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDbProxyInstanceSslResponseBody(name='body'),
}

/**
  * The system provides the dedicated proxy feature. You can configure SSL encryption for the dedicated proxy endpoint of an instance. This allows you to ensure the data security of the instance. For more information about the dedicated proxy feature, see [Dedicated proxy](~~138705~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The dedicated proxy feature is enabled for the instance.
  * *   The minor engine version that the dedicated proxies of the instance run is 1.12.8 or later.
  * *   Your RDS instance runs one of the following MySQL versions:
  *     *   MySQL 8.0 on RDS High-availability Edition with local disks. The minor engine version is 20200831 or later.
  *     *   MySQL 5.7 on RDS High-availability Edition with local disks. The minor engine version is 20200831 or later.
  *     *   MySQL 5.6 on RDS High-availability Edition with local disks. The minor engine version is 20200831 or later.
  * > Calling this operation causes your instance to restart. Proceed with caution.
  *
 */
async function modifyDbProxyInstanceSsl(request: ModifyDbProxyInstanceSslRequest): ModifyDbProxyInstanceSslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDbProxyInstanceSsl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHADiagnoseConfigRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tcpConnectionType?: string(name='TcpConnectionType', description='The availability check method of the instance. Valid values:

*   **SHORT**: Alibaba Cloud uses short-lived connections to check the availability of the instance.
*   **LONG**: Alibaba Cloud uses persistent connections to check the availability of the instance.', example='SHORT', position='Query'),
}

model ModifyHADiagnoseConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EFA6DF3-5247-4D9D-80AA-68765BE6D5EA'),
}

model ModifyHADiagnoseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHADiagnoseConfigResponseBody(name='body'),
}

/**
  * By default, Alibaba Cloud uses persistent connections to check the availability of an instance. For more information, see [What is availability detection?](~~207467~~)
  *
 */
async function modifyHADiagnoseConfig(request: ModifyHADiagnoseConfigRequest): ModifyHADiagnoseConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHADiagnoseConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHASwitchConfigRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  HAConfig?: string(name='HAConfig', description='The status of the automatic primary/secondary switchover feature. Valid values:

*   **Auto:** The automatic primary/secondary switchover feature is enabled. The system automatically switches your workloads over from the instance to its secondary instance in the event of a fault.
*   **Manual:** The automatic primary/secondary switchover feature is disabled. You must manually switch your workloads over from the instance to its secondary instance in the event of a fault.

Default value: **Auto**.

>  If you set this parameter to **Manual**, you must specify the **ManualHATime** parameter.', example='Manual', position='Query'),
  manualHATime?: string(name='ManualHATime', description='The time after which the automatic primary/secondary switchover feature is enabled. At most, you can set this parameter to 23:59:59 seven days later. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

>  This parameter takes effect only when you set the **HAConfig** parameter to **Manual**.', example='2019-08-29T15:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyHASwitchConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B6AE1448-D846-4831-B1C7-CFF3E99D5470'),
}

model ModifyHASwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHASwitchConfigResponseBody(name='body'),
}

/**
  * After a switchover is complete, the original primary RDS instance runs as the secondary RDS instance. For more information, see [Switch workloads over between primary and secondary ApsaraDB RDS for MySQL instances](~~96054~~).
  * Before you call this operation, make sure that the instance does not run the RDS Basic Edition.
  *
 */
async function modifyHASwitchConfig(request: ModifyHASwitchConfigRequest): ModifyHASwitchConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHASwitchConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable or disable auto-renewal. Valid values: **True and False**.', example='True', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bpxxxxx', position='Query'),
  duration?: string(name='Duration', description='The number of months for auto-renewal. Valid values: **1 to 12**.

>  You must specify this parameter if you set the** AutoRenew **parameter to** True**.', example='2', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='testuser@aliyun.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

/**
  * If you enable auto-renewal for your instance, you do not need to manually renew your subscription or be concerned about business interruptions caused by subscription expiration. For more information, see [Configure auto-renewal](~~96049~~).
  *
 */
async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAutoRenewalAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceCrossBackupPolicyRequest {
  backupEnabled?: string(name='BackupEnabled', description='Specifies whether to enable the cross-region backup feature on the instance. This parameter specifies whether you can back up data and logs. Valid values:

*   **0**: disables the feature.
*   **1:** enables the feature.

> Before you enable the cross-region backup feature, you must configure the CrossBackupRegion parameter.', example='1', position='Query'),
  crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the region in which the cross-region backup files of the instance are stored.', example='cn-shanghai', position='Query'),
  crossBackupType?: string(name='CrossBackupType', description='The policy that is used to save the cross-region backup files of the instance. Set the value to **1**. The value 1 specifies that all cross-region backup files are saved.', example='1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  logBackupEnabled?: string(name='LogBackupEnabled', description='Specifies whether to enable the cross-region log backup feature on the instance. Valid values:

*   **0**: disables the feature.
*   **1:** enables the feature.

> You can enable the cross-region log backup feature only when the cross-region backup feature is enabled.', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the source instance belongs. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retentType?: int32(name='RetentType', description='The policy that is used to retain the cross-region backup files of the instance. Set the value to 1. The value **1** specifies that the cross-region backup files of the instance are retained based on the specified retention period.', example='1', position='Query'),
  retention?: int32(name='Retention', description='The number of days for which the cross-region backup files of the instance are retained. Valid values: **7 to 1825**.', example='7', position='Query'),
}

model ModifyInstanceCrossBackupPolicyResponseBody = {
  backupEnabled?: string(name='BackupEnabled', description='The status of the cross-region backup feature on the instance. Valid values:

*   **Disable**
*   **Enable**', example='Enable'),
  crossBackupRegion?: string(name='CrossBackupRegion', description='The ID of the region in which the cross-region backup files of the instance are stored.', example='cn-shanghai'),
  crossBackupType?: string(name='CrossBackupType', description='The policy that is used to save the cross-region backup files of the instance. Default value: **1**. The value 1 indicates that all cross-region backup files are saved.', example='1'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx'),
  logBackupEnabled?: string(name='LogBackupEnabled', description='The status of the cross-region log backup feature on the instance. Valid values:

*   **Disable**
*   **Enable**', example='Enable'),
  regionId?: string(name='RegionId', description='The region ID of the source instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50A6059D-6DBB-46C6-A851-1EE93C9013CF'),
  retentType?: int32(name='RetentType', description='The policy that is used to retain the cross-region backup files of the instance. Default value: **1**. The value 1 indicates that the cross-region backup files of the instance are retained based on the specified retention period.', example='1'),
  retention?: int32(name='Retention', description='The number of days for which the cross-region backup files of the instance are retained. Valid values: **7 to 1825**.', example='15'),
}

model ModifyInstanceCrossBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceCrossBackupPolicyResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
  * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
  * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
  *
 */
async function modifyInstanceCrossBackupPolicy(request: ModifyInstanceCrossBackupPolicyRequest): ModifyInstanceCrossBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceCrossBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPGHbaConfigRequest {
  clientToken?: string(name='ClientToken', description='A reserved parameter. You do not need to specify this parameter.', example='1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of instance.', example='pgm-bp1lymyn1v3i****', position='Query'),
  hbaItem: [ 
    {
      address: string(name='Address', description='The IP addresses from which the specified users can access the specified databases. If you set this parameter to 0.0.0.0/0, the specified users are allowed to access the specified databases from all IP addresses.', example='0.0.0.0/0'),
      database: string(name='Database', description='The name of the database. If you set this parameter to all, the specified users are allowed to access all databases on the instance.

If you specify multiple users, separate the usernames with commas (,).', example='all'),
      mask?: string(name='Mask', description='The mask of the instance. If the value of the **Address** parameter is an IP address, you can use this parameter to specify the mask of the IP address.', example='0'),
      method: string(name='Method', description='The authentication method. Valid values: authorization_code and refresh_token.

*   **trust**
*   **reject**
*   **scram-sha-256**
*   **md5**
*   **password**
*   **gss**
*   **sspi**
*   **ldap**
*   **radius**
*   **cert**
*   **pam**', example='ldap'),
      option?: string(name='Option', description='Optional. The value of this parameter varies based on the value of the Method parameter. In this topic, LDAP is used as an example. You must configure this parameter. For more information, see [Authentication Methods](https://www.postgresql.org/docs/11/auth-methods.html).', example='ldapserver=The private IP address of the ECS instance ldapbasedn="CN=Users,DC=pgsqldomain,DC=net" ldapbinddn="CN=The username of the administrator user of the AD domain controller, CN=Users,DC=pgsqldomain,DC=net" ldapbindpasswd="The password of the administrator user of the AD domain controller" ldapsearchattribute="sAMAccountName"'),
      priorityId: int32(name='PriorityId', description='The priority of the record. If you set this parameter to 0, the record has the highest priority. Valid values: 0 to 10000.

This parameter is used to identify each record. When you add a record, the value of the PriorityId parameter for the new record must be different from the value of the PriorityId parameter of any existing record. When you modify or delete a record, you must also modify or delete the value of the PriorityId parameter for this record.', example='2'),
      type: string(name='Type', description='The connection type.

Valid values:

*   **host**: The AD domain verifies TCP/IP connections, including SSL connections and non-SSL connections.
*   **hostssl**: The record matches only TCP/IP connections that are established over SSL.
*   **hostnossl**: The record matches only TCP/IP connections that are not established over SSL.

> You can set this parameter to hostssl only when SSL encryption is enabled for the instance. For more information, see [Configure SSL encryption for an ApsaraDB RDS for PostgreSQL instance](~~229518~~).', example='host'),
      user: string(name='User', description='The user who is allowed to access the specified databases. You must specify the user that is used to log on to the RDS instance. If you specify multiple users, separate the usernames with commas (,).', example='ldapuser'),
    }
  ](name='HbaItem', description='The details of the AD domain.', position='Query'),
  opsType: string(name='OpsType', description='The method that you use to modify the pg_hba.conf file. Valid values:

*   **add**: adds one or more records. If you use this method, make sure that the value of the PriorityId parameter for each new record is different from the value of the PriorityId parameter for any existing record.
*   **delete**: deletes one or more records. If you use this method, the record that corresponds to the specified value of the **PriorityId** parameter is deleted from the pg_hba.conf file.
*   **modify**: modifies one or more records. If you use this method, the record that corresponds to the specified value of the **PriorityId** parameter is modified.
*   **update**: overwrites the existing configuration in the pg_hba.conf file by using the new configuration.', example='add', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyPGHbaConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='458E0781-C46C-55F5-A0E5-1DD284B28A3F'),
}

model ModifyPGHbaConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPGHbaConfigResponseBody(name='body'),
}

/**
  * ApsaraDB RDS for PostgreSQL allows you to modify the pg_hba.conf file based on your business requirements. For more information, see [Introduction to the pg_hba.conf file](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html).
  * You can modify the information of the Active Directory (AD) domain controller in the pg_hba.conf file of an instance. Then, you can connect the instance to a self-managed AD domain. For more information, see [Connect an ApsaraDB RDS for PostgreSQL instance to a self-managed AD domain](~~349288~~).
  *
 */
async function modifyPGHbaConfig(request: ModifyPGHbaConfigRequest): ModifyPGHbaConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPGHbaConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParameterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  forcerestart?: boolean(name='Forcerestart', description='Specifies whether to restart the instance for a new parameter value to take effect. Valid values:

*   **true**: The system forcefully restarts the instance. If a new parameter value takes effect only after the instance restarts, you must set this parameter to true. Otherwise, the new parameter value cannot take effect.
*   **false**: The system does not forcefully restart the instance.

Default value: **false**.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupId?: string(name='ParameterGroupId', description='The ID of the parameter template.

> 

*   If you specify this parameter, you do not need to specify **Parameters**.

*   If the parameter template can be applied only after the instance is restarted, you must specify **Forcerestart**.', example='rpg-xxxxxxxxx', position='Query'),
  parameters?: string(name='Parameters', description='The JSON strings of parameters and their values. All the parameter values are of the string type. Format: {"Parameter name 1":"Parameter value 1","Parameter name 2":"Parameter value 2"...}. You can call the [DescribeParameterTemplates](~~26284~~) operation to query parameter names and values.

> If you specify this parameter, you do not need to specify **ParameterGroupId**.', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', description='The time at which the modification takes effect. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> This time must be later than the time at which you call this operation.', example='2022-05-06T09:24:00Z', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', description='The time at which the modification takes effect. Valid values:

*   **Immediately**: immediately modifies the parameter. This is the default value.
*   **MaintainTime**: modifies the parameter during the maintenance window of the instance. You can call the [ModifyDBInstanceMaintainTime](~~26249~~) operation to change the maintenance window of the instance.
*   **ScheduleTime**: The modification takes effect at the point in time that you specify. If you specify this value, you must also specify **SwitchTime**.', example='ScheduleTime', position='Query'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='542BB8D6-4268-45CC-A557-B03EFD7AB30A'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

/**
  * You can modify the parameters directly or by using a parameter template. After you submit the parameter modification request, ApsaraDB RDS starts a task to apply the new parameter values to the instance. If a new parameter value takes effect only after the instance restarts, ApsaraDB RDS restarts the instance. For information about configurable parameters, see [Configure the parameters of an ApsaraDB RDS for MySQL instance](~~96063~~).
  * > Before the system runs a parameter modification task, the system checks whether the parameters exist, whether they are configurable, and whether the new parameter values are valid.
  *
 */
async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParameterGroupRequest {
  modifyMode?: string(name='ModifyMode', description='The modification mode of the parameter template. Valid values:

*   **Collectivity** (default): adds new parameters or modifies parameters in the original parameter template.

> If ModifyMode is set to Collectivity, the system adds the value of **Parameters** to the parameter template or modifies the corresponding parameters in the parameter template. Other parameters in the original parameter template are not affected.

*   **Individual**: overwrites original parameters.

> If ModifyMode is set to Individual, the system uses the value of **Parameters** to overwrite the original parameter in the parameter template.', example='Collectivity', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='The new description of the parameter template. The description can be up to 200 characters in length.

> If you do not specify this parameter, the original description of the parameter template is retained.', example='test', position='Query'),
  parameterGroupId: string(name='ParameterGroupId', description='The parameter template ID. You can call the [DescribeParameterGroups](~~144491~~) operation to query the parameter template ID.', example='rpg-13ppdh****', position='Query'),
  parameterGroupName?: string(name='ParameterGroupName', description='The parameter template name.

*   The name can contain letters, digits, periods (.), and underscores (\\_). It must start with a letter.
*   It can be 8 to 64 characters in length.

> If you do not specify this parameter, the original name of the parameter template is retained.', example='testgroup1', position='Query'),
  parameters?: string(name='Parameters', description='A JSON string that consists of parameters and their values in the parameter template. Format: {"Parameter 1":"Value of Parameter 1","Parameter 2":"Value of Parameter 2"...}. For more information about the parameters that can be modified, see [Modify the parameters of an ApsaraDB RDS for MySQL instance](~~96063~~) or [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](~~96751~~).

> 

*   If **ModifyMode** is set to **Individual** and this parameter is specified, the new parameters overwrite the parameters in the original parameter template.

*   If you set **ModifyMode** to **Collectivity** and specify this parameter, the new parameters are added to the original parameter template, or the parameters in the original parameter template are modified.
*   If you do not specify this parameter, the parameters in the original parameter template remain unchanged.', example='{"back_log":"3000"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.

> The region of a parameter template cannot be changed. You can call the [CloneParameterGroup](~~144581~~) operation to replicate a parameter template to a specific region.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId', description='The parameter template ID.', example='rpg-13ppdh****'),
  requestId?: string(name='RequestId', description='The request ID.', example='857DC00B-7B85-4853-8B27-AD65EB618BC6'),
}

model ModifyParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterGroupResponseBody(name='body'),
}

/**
  * You can configure a number of parameters at a time by using a parameter template and then apply the parameter template to an instance. For more information, see [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~) or [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~).
  * > This operation is supported only when your instance runs MySQL or PostgreSQL.
  *
 */
async function modifyParameterGroup(request: ModifyParameterGroupRequest): ModifyParameterGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameterGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReadWriteSplittingConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the read/write splitting endpoint. The prefix must be unique. It can be up to 30 characters in length and can contain lowercase letters and hyphens (-). It must start with a lowercase letter.

> The default prefix consists of the name of the primary instance followed by the letters rw.', example='rm-m5xxxxxxxxrw.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  distributionType?: string(name='DistributionType', description='The method that is used to assign read weights. Valid values:

*   **Standard**: The system automatically assigns read weights to the primary and read-only instances based on the specifications of these instances.
*   **Custom**: You must manually assign a read weight to each instance.

> You must specify at least one of **MaxDelayTime** and **DistributionType**.', example='Standard', position='Query'),
  maxDelayTime?: string(name='MaxDelayTime', description='The latency threshold that is allowed by the read/write splitting link. Unit: seconds. If the latency on a read-only instance exceeds the specified threshold, the system no longer routes read requests to the read-only instance. If you do not specify this parameter, the default value of this parameter is retained.

> 

*   If the primary instance runs SQL Server 2017 on RDS Cluster Edition, the **MaxDelayTime** parameter is not supported.

*   You must specify at least one of **MaxDelayTime** and **DistributionType**.', example='12', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', description='The port that is associated with the read/write splitting endpoint.', example='3306', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  weight?: string(name='Weight', description='The read weights of the primary instance and its read-only instances. A read weight must be a multiple of 100 and cannot exceed 10,000.

*   For ApsaraDB RDS instances, the value of this parameter is in the following format: `{"<ID of the read-only instance >":<Weight>,"master":<Weight>,"slave":<Weight>}`.
*   For ApsaraDB MyBase instances, the value of this parameter is in the following format: `[{"instanceName":"<ID of the primary instance>","weight":<Weight>,"role":"master"},{"instanceName":"<ID of the primary instance>","weight":<Weight>,"role":"slave"},{"instanceName":"<ID of the read-only instance>","weight":<Weight>,"role":"master"}]`

> 

*   This parameter must be specified when **DistributionType** is set to **Custom**.

*   If **DistributionType** is set to **Standard**, this parameter is invalid.', example='{"rm-bp1**********":800,"master":400,"slave":400}', position='Query'),
}

model ModifyReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5A77D650-27A1-4E08-AD9E-59008EDB6927'),
}

model ModifyReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReadWriteSplittingConnectionResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
  * *   The read/write splitting feature is enabled for your ApsaraDB RDS for MySQL instance.
  * *   The instance must run one of the following database engine versions and RDS editions:
  *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
  *     *   MySQL 5.6
  *     *   SQL Server on RDS Cluster Edition
  *
 */
async function modifyReadWriteSplittingConnection(request: ModifyReadWriteSplittingConnectionRequest): ModifyReadWriteSplittingConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReadWriteSplittingConnection', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReadonlyInstanceDelayReplicationTimeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rr-bpxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readSQLReplicationTime: string(name='ReadSQLReplicationTime', description='The latency at which to replicate data from the primary instance to the read-only instance. Unit: seconds.', example='100', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyReadonlyInstanceDelayReplicationTimeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the read-only instance.', example='rr-bpxxxxx'),
  readSQLReplicationTime?: string(name='ReadSQLReplicationTime', description='The latency at which data is replicated from the primary instance to the read-only instance. Unit: seconds.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBB11B5A-7B37-493A-87E6-490BCB7BDF98'),
  taskId?: string(name='TaskId', description='The ID of the replication task.', example='241535739'),
}

model ModifyReadonlyInstanceDelayReplicationTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReadonlyInstanceDelayReplicationTimeResponseBody(name='body'),
}

/**
  * You can specify the latency at which your primary RDS instance replicates data to a read-only instance. For more information, see [Set a replication delay for an RDS MySQL read-only instance](~~96056~~).
  *
 */
async function modifyReadonlyInstanceDelayReplicationTime(request: ModifyReadonlyInstanceDelayReplicationTimeRequest): ModifyReadonlyInstanceDelayReplicationTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReadonlyInstanceDelayReplicationTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyResourceGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bpxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information, see [View basic information of a resource group](~~151181~~).', example='rg-acxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyResourceGroupResponseBody(name='body'),
}

/**
  * Resource Management enables you to build an organizational structure for resources based on your business needs. You can use a resource directory, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](~~94475~~)
  *
 */
async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifySQLCollectorPolicyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For more information, see [View basic information of a resource group](~~151181~~).', example='rg-acfmx**********', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SQLCollectorStatus: string(name='SQLCollectorStatus', description='Specifies whether to enable or disable the SQL Explorer (SQL Audit) feature. Valid values: **Enable and Disabled**.', example='Enable', position='Query'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance runs one of the following database engines:
  * *   MySQL
  * *   SQL Server
  * *   PostgreSQL
  * > If you call this operation by using the credentials of a RAM user, the RAM user must have the read and write permissions such as AliyunRDSFullAccess on the instance. If the RAM user does not have the read and write permissions on the instance, the system displays a message stating that you do not have the permissions to call this operation. For more information about how to grant permissions to a RAM user, see [Use RAM to manage ApsaraDB RDS permissions](~~58932~~).
  *
 */
async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySQLCollectorPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifySQLCollectorRetentionRequest {
  regionId?: string(name='RegionId', position='Host'),
  configValue: string(name='ConfigValue', description='The log backup retention period that is allowed by the SQL explorer on the instance. Valid values:

*   **30:** 30 days
*   **180:** 180 days
*   **365:** one year
*   **1095:** three years
*   **1825:** five years', example='365', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifySQLCollectorRetentionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='21383BB3-3845-4628-B422-B4FB5C83DEBD'),
}

model ModifySQLCollectorRetentionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySQLCollectorRetentionResponseBody(name='body'),
}

/**
  * The SQL explorer must be enabled for the instance.
  * The instance must run MySQL. For more information, see [SQL Explorer](~~96123~~).
  * >  After you shorten the log backup retention period, log backpack files that are stored longer than the specified log backup retention period are immediately deleted.
  *
 */
async function modifySQLCollectorRetention(request: ModifySQLCollectorRetentionRequest): ModifySQLCollectorRetentionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySQLCollectorRetention', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupConfigurationRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the ECS security group. Each RDS instance can be added to up to three security groups. Separate the security group IDs with commas (,). To delete an ECS security group for the RDS instance, leave this parameter empty. You can call the [DescribeSecurityGroups](~~25556~~) operation to query the ECS security group list.', example='sg-xxxxxxx', position='Query'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx'),
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      networkType?: string(name='NetworkType', description='The network type of an ECS security group. Valid values:

*   **Classic**
*   **VPC**', example='VPC'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the ECS security group.', example='sg-xxxxxxx'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items', description='An array that consists of ECS security groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8585861B-8F0D-4D17-9460-C42255EB10C0'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

/**
  * After an RDS instance is added to an ECS security group, all ECS instances in the security group can access the RDS instance. For more information, see [Configure a whitelist for an RDS instance](~~96118~~).
  *
 */
async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIpsRequest {
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty.

> The IP address whitelists that have the hidden attribute are not displayed in the ApsaraDB RDS console. These IP address whitelists are used to access Alibaba Cloud services, such as Data Transmission Service (DTS).', example='hidden', position='Query'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the IP address whitelist that you want to modify. Default value: Default.

> A maximum of 200 IP address whitelists can be configured for each instance.', example='test', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='pgm-bp18n0c8zt45****', position='Query'),
  freshWhiteListReadins?: string(name='FreshWhiteListReadins', description='The read-only instances to which you want to synchronize the IP address whitelist.

*   This parameter applies only to ApsaraDB RDS for PostgreSQL instances.
*   If the instance is attached with a read-only instance, you can use this parameter to synchronize the IP address whitelist to the read-only instance. If the instance is attached with multiple read-only instances, separate the read-only instances with commas (,).
*   If the instance is not attached with a read-only instance, leave this parameter empty.', example='pgr-bp17yuz4dn3d****,pgr-bp1vn2ph54u1****', position='Query'),
  modifyMode?: string(name='ModifyMode', description='The method that is used to modify the IP address whitelist. Valid values:

*   **Cover**: Use the IP addresses and CIDR blocks that are specified in the **SecurityIps** parameter to overwrite the existing IP addresses and CIDR blocks in the IP address whitelist.
*   **Append**: Add the IP addresses and CIDR blocks that are specified in the **SecurityIps** parameter to the IP address whitelist.
*   **Delete**: Delete the IP addresses and CIDR blocks that are specified in the **SecurityIps** parameter from the IP address whitelist. You must retain at least one IP address or CIDR block.

Default value: **Cover**.', example='Cover', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPType?: string(name='SecurityIPType', description='The type of the IP addresses in the IP address whitelist. Set the value to IPv4. IPv6 is not supported.', example='IPv4', position='Query'),
  securityIps: string(name='SecurityIps', description='The IP addresses and CIDR blocks that you want to include in the IP address whitelist. If the IP address whitelist contains more than one IP address or CIDR block, separate these IP addresses and CIDR blocks with commas (,). Each IP address or CIDR block in an IP address whitelist must be unique. For more information, see [Configure an IP address whitelist for an ApsaraDB RDS instance](~~43185~~). The entries in the IP address whitelist must be in one of the following formats:

*   IP addresses, such as 10.23.XX.XX.
*   CIDR blocks, such as 10.23.XX.XX/24. In this example, 24 indicates that the prefix of each IP address in the IP address whitelist is 24 bits in length. You can replace 24 with a value within the range of 1 to 32.

> A maximum of 1,000 IP addresses or CIDR blocks can be added for each instance. If you want to add a large number of IP addresses, we recommend that you merge them into CIDR blocks, such as 10.23.XX.XX/24.', example='10.23.XX.XX', position='Query'),
  whitelistNetworkType?: string(name='WhitelistNetworkType', description='The network type of the IP address whitelist. Valid values:

*   **Classic**: classic network in enhanced whitelist mode
*   **VPC**: virtual private cloud (VPC) in enhanced whitelist mode
*   **MIX**: standard whitelist mode

Default value: **MIX**.

> In standard whitelist mode, IP addresses and CIDR blocks are added only to the default IP address whitelist. In enhanced whitelist mode, IP addresses and CIDR blocks are added to the IP address whitelists of the classic network type and the VPC network type.', example='Classic', position='Query'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='115855279'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

/**
  * An IP address whitelist contains the IP addresses and CIDR blocks that are granted access to the instance. For more information about how to configure an IP address whitelist, see [Configure an IP address whitelist for an ApsaraDB RDS instance](~~96118~~).
  * > Before you call this operation, make sure that the instance is in the Running state. If the instance is not in the Running state, the operation fails.
  *
 */
async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model PurgeDBInstanceLogRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PurgeDBInstanceLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model PurgeDBInstanceLogResponse = {
  headers: map[string]string(name='headers'),
  body: PurgeDBInstanceLogResponseBody(name='body'),
}

/**
  * ApsaraDB RDS automatically uploads log backup files to Object Storage Service (OSS) buckets. If the remaining storage of an instance is insufficient, you can upload the log backup files of the instance to OSS buckets. After you upload the log backup files of an instance, ApsaraDB RDS deletes these files from the instance to release storage. This operation is called to upload log backup files from an instance to OSS buckets and then delete these files from the instance. If the instance runs SQL Server, transaction log backup files are compressed before they are uploaded. For more information about log backups, see [Back up an ApsaraDB RDS for MySQL instance](~~98818~~) or [Back up an ApsaraDB RDS for SQL Server instance](~~95717~~).
  * > 
  * *   This operation is available only for instances that run MySQL or SQL Server.
  * *   When you upload log backup files, the data restoration feature is not affected.
  * *   This operation is called to release storage. The backup storage usage is not reduced.
  * *   The OSS buckets to which log backup files are uploaded are provided by ApsaraDB RDS. You do not need to purchase these OSS buckets. In addition, you cannot access these OSS buckets.
  *
 */
async function purgeDBInstanceLog(request: PurgeDBInstanceLogRequest): PurgeDBInstanceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurgeDBInstanceLog', 'POST', '/', 'json', false, 'json', request);
}

model QueryNotifyRequest {
  from: string(name='From', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2022-05-02T08:38:37Z', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: any **non-zero** positive integer.

Default value: **1**.', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', minimum=1, maximum=100, position='Body'),
  to: string(name='To', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2022-05-09T08:38:37Z', position='Body'),
  withConfirmed: boolean(name='WithConfirmed', description='Specifies whether the query results contain confirmed notifications. Valid values:

*   **true**
*   **false**

    > A confirmed notification is a notification that has been marked as confirmed by calling the ConfirmNotify operation.', example='false', position='Body'),
}

model QueryNotifyResponseBody = {
  data?: {
    notifyItemList?: [ 
      {
        aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account.', example='22973492**********'),
        confirmFlag?: boolean(name='ConfirmFlag', description='Indicates whether the notification has been confirmed. You can call the ConfirmNotify operation to mark the notification as confirmed. Valid values:

*   **true**
*   **false**', example='true'),
        confirmor?: long(name='Confirmor', description='The UID of the contact who called the ConfirmNotify operation to mark the notification as confirmed. The contact belongs to the current Alibaba Cloud account.

The value **0** indicates that the notification is automatically confirmed by the system.', example='0'),
        gmtCreated?: string(name='GmtCreated', description='The time when the notification was created.', example='2022-04-21T02:04:04Z'),
        gmtModified?: string(name='GmtModified', description='The time when the notification was modified.', example='2022-04-21T02:10:47Z'),
        id?: long(name='Id', description='The ID of the notification.', example='103499'),
        idempotentCount?: string(name='IdempotentCount', description='The number of times that repeatedly sent notifications are blocked.', example='0'),
        idempotentId?: string(name='IdempotentId', description='This parameter ensures the idempotence of the notification and prevents the notification from being repeatedly sent.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx'),
        level?: string(name='Level', description='The level of the notification. Valid values:

*   **help**
*   **success**
*   **warning**
*   **error**
*   **loading**
*   **notice**', example='error'),
        notifyElement?: string(name='NotifyElement', description='The element in the notification template. This parameter is a JSON string. Fields in the JSON string vary based on the value of the **TemplateName** parameter.

*   If the **TemplateName** parameter is **RenewalRecommend**, the JSON string contains the following fields:

    *   **instanceName**: the ID of the instance that is about to expire
    *   **reservedTime**: the remaining validity period of the instance in days

*   If the **TemplateName** parameter is **InstanceCreateFailed**, the JSON string contains the following fields:

    *   **orderId**: the ID of the order to purchase the instance
    *   **reason**: the cause of the instance creation failure', example='{\\"orderId\\":21466**********}'),
        templateName?: string(name='TemplateName', description='The template of the notification. Valid values:

*   **RenewalRecommend**: The template that is used to notify of renewal suggestions.
*   **InstanceCreateFailed**: The template that is used to notify that an instance fails to be created and is refunded.', example='InstanceCreateFailed'),
        type?: string(name='Type', description='The type of the notification. Valid values:

*   **Sell**: sales notification
*   **Operation**: O\\&M notification
*   **Promotion**: promotion notification', example='Sell'),
      }
    ](name='NotifyItemList', description='The details of the notification.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='25'),
    totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries.', example='1'),
  }(name='Data', description='The details of the returned parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='94CB8D93-017A-5AE7-A118-6E0F89D93C0A'),
}

model QueryNotifyResponse = {
  headers: map[string]string(name='headers'),
  body: QueryNotifyResponseBody(name='body'),
}

/**
  * The notifications are highlighted at the top of the ApsaraDB RDS console. The notifications include renewal reminders and reminders of instance creation failures.
  * After you call this operation to query notifications, you can call the [ConfirmNotify](~~428005~~) operation to mark the notifications as confirmed, which means that you understand the content of the notifications.
  *
 */
async function queryNotify(request: QueryNotifyRequest): QueryNotifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNotify', 'POST', '/', 'json', true, 'form', request);
}

model RebuildDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the IDs of dedicated clusters.', example='dhg-4nxxxxxxx', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the host on which the system rebuilds the secondary instance.

>  If you do not specify this parameter, the system preferentially rebuilds the secondary instance on the original host on which the secondary instance resides. If the remaining storage space of the original host is insufficient, the system rebuilds the secondary instance on a host on which the primary instance does not reside. If no suitable hosts are found, the system reports an error that indicates insufficient storage space.', example='i-bpxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rebuildNodeType?: string(name='RebuildNodeType', description='The role of the secondary instance that you want to rebuild. Valid values:

*   **FOLLOWER**: secondary instance
*   **LOG**: logger instance', example='FOLLOWER', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RebuildDBInstanceResponseBody = {
  migrationId?: int32(name='MigrationId', description='The serial number of the task in the rebuild task queue. When the serial number becomes 0, the system starts to rebuild the secondary instance.', example='3298015'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='355DA57C-8CC4-40AB-B3F8-B684BA32EB9E'),
  taskId?: int32(name='TaskId', description='The ID of the task.', example='208676661'),
}

model RebuildDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebuildDBInstanceResponseBody(name='body'),
}

/**
  * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  *
 */
async function rebuildDBInstance(request: RebuildDBInstanceRequest): RebuildDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebuildDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReceiveDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the primary instance.', example='rm-uf6wjk5*****', position='Query'),
  guardDBInstanceId: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the disaster recovery instance.', example='rm-tr2whku*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReceiveDBInstanceResponseBody = {
  guardDBInstanceId?: string(name='GuardDBInstanceId', description='The ID of the disaster recovery instance after the switchover.', example='rm-tr2whku*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFB6083A-7699-489B-8278-C0CB4793A96E'),
}

model ReceiveDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReceiveDBInstanceResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * A disaster recovery instance is created.
  *
 */
async function receiveDBInstance(request: ReceiveDBInstanceRequest): ReceiveDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReceiveDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryDBInstanceRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to query the ID of the backup set.

If you specify this parameter, you do not need to specify **DBInstanceId**.

> You must specify at least one of **BackupId** and **RestoreTime**.', example='29304****', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the new instance. For more information, see [Instance types](~~26312~~).', example='rds.mysql.s2.large', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the original instance.

> 

*   If you specify BackupId, you do not need to specify this parameter.

*   If you specify RestoreTime, you must also specify this parameter.', example='rm-xxxxxxxx1', position='Query'),
  DBInstanceStorage?: int32(name='DBInstanceStorage', description='The storage capacity of the new instance. Unit: GB. For more information, see [Instance types](~~26312~~).', example='5', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the new instance. Valid values:

*   **local_ssd/ephemeral_ssd**: local SSD
*   **cloud_ssd**: standard SSD
*   **cloud_essd**: enhanced SSD (ESSD)', example='local_ssd', position='Query'),
  dbNames: string(name='DbNames', description='The name of the database.

*   If you want to restore databases to a new instance, the value is in the format of `Original database name 1,New database name 2`.
*   If you want to restore databases to an existing instance, the value is in the format of `{"Original database name 1":"New database name 1","Original database name 2":"New database name 2"`.', example='Restore databases to a new instance: test1,test2. Restore databases to an existing instance: {"test1":"newtest1","test2":"newtest2"}', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the new instance. Valid values:

*   **Classic**
*   **VPC**

By default, the new instance uses the same network type as the original instance.', example='VPC', position='Query'),
  payType?: string(name='PayType', description='The billing method of the new instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid', position='Query'),
  period?: string(name='Period', description='The unit that is used to calculate the billing cycle of the new instance. This parameter takes effect only when you select the subscription billing method for the new instance. Valid values:

*   **Year**
*   **Month**

> This parameter must be specified when **PayType** is set to **Prepaid**.', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The internal IP address of the new instance. The internal IP address must be within the CIDR block that is supported by the specified vSwitch. The system automatically assigns a private IP address to an instance based on the values of **VPCId** and **VSwitchId**.', example='172.XXX.XXX.69', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The point in time must fall within the specified log backup retention period. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

If you specify this parameter, you must also specify **DBInstanceId**.

> You must specify at least one of **BackupId** and **RestoreTime**.', example='2011-06-11T16:00:00Z', position='Query'),
  targetDBInstanceId?: string(name='TargetDBInstanceId', description='The ID of the destination instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the instance. Valid values:

*   Valid values when **Period** is set to **Year**: **1 to 3**.****
*   Valid values when **Period** is set to **Month**: **1 to 9**.****

> This parameter must be specified when PayType is set to **Prepaid**.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The VPC ID of the new instance.', example='vpc-xxxxxxxxxxx', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the new instance. If you specify more than one vSwitch ID, you must separate the IDs with commas (,).', example='vsw-xxxxxxxxxxx', position='Query'),
}

model RecoveryDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-xxxxxxx'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='54325****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFB6083A-7699-489B-8278-C0CB4793A96E'),
}

model RecoveryDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RecoveryDBInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to restore databases to a new instance or an existing instance. If you want to restore databases to an existing instance, we recommend that you call the [Copy databases](~~88810~~) operation.
  * If you want to restore databases to a new instance, you must create an instance and then restore specific or all databases to the new instance.
  * *   If you specify the name of a database, only the specified database is restored to the new instance.
  * *   If you do not specify the name of a database, all databases are restored to the new instance.
  * > This operation is supported only for instances that run SQL Server 2012 or later.
  *
 */
async function recoveryDBInstance(request: RecoveryDBInstanceRequest): RecoveryDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceConnectionRequest {
  currentConnectionString: string(name='CurrentConnectionString', description='The public endpoint of the instance.', example='rm-uf6wjk5xxxx.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  instanceNetworkType: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**
*   **Classic**', example='Classic', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseInstanceConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ReleaseInstanceConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceConnectionResponseBody(name='body'),
}

async function releaseInstanceConnection(request: ReleaseInstanceConnectionRequest): ReleaseInstanceConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstanceConnection', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  currentConnectionString: string(name='CurrentConnectionString', description='The public endpoint.', example='rm-uf6wjk5xxxx.mysql.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

/**
  * To ensure data security, you can release the public endpoint when you do not need to access the database from the Internet.
  *
 */
async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseReadWriteSplittingConnectionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5A77D650-27A1-4E08-AD9E-59008EDB6927'),
}

model ReleaseReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseReadWriteSplittingConnectionResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   If the instance runs MySQL, the instance uses a shared proxy.
  * *   The read/write splitting feature is enabled for the instance.
  * *   The instance runs one of the following database versions and RDS editions:
  *     *   MySQL 5.7 on RDS High-availability Edition with local SSDs
  *     *   MySQL 5.6
  *     *   SQL Server (cluster edition)
  *
 */
async function releaseReadWriteSplittingConnection(request: ReleaseReadWriteSplittingConnectionRequest): ReleaseReadWriteSplittingConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseReadWriteSplittingConnection', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagsFromResourceRequest {
  tag?: [
    {
      key?: string(name='key', description='The TagKey of the first tag that you want to unbind. Each tag consists of a TagKey and a TagValue. You can specify up to five tags in a single request. The TagKey is required, and the TagValue is optional.', example='key1'),
      value?: string(name='value', description='The TagValue of the first tag that you want to unbind. Each tag consists of a TagKey and a TagValue. You can specify up to five tags in a single request. The TagKey is required, and the TagValue is optional.', example='value1'),
    }
  ](name='Tag', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: string(name='Tags', description='A set of a TagKey and a TagValue that you use to unbind the tag. Format: {"key1":"value1"}.

>  The TagKey is required, and the TagValue is optional.', example='{"key1":"value1"}', position='Query'),
  proxyId?: string(name='proxyId', description='The ID of the proxy pattern.', example='API', position='Query'),
}

model RemoveTagsFromResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AE00ACCD-1CF9-4920-9BB9-0175EFF43405'),
}

model RemoveTagsFromResourceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsFromResourceResponseBody(name='body'),
}

/**
  * This operation has the following limits:
  * *   A maximum of 10 tags can be unbound in a single request.
  * *   If a tag is unbound from all of the instances to which the tag has been bound, the tag is automatically deleted.
  * *   If you specify only a TagKey, all tags that match the TagKey condition are unbound.
  * *   You must specify at least a TagKey or a set of a TagKey and a TagValue.
  *
 */
async function removeTagsFromResource(request: RemoveTagsFromResourceRequest): RemoveTagsFromResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTagsFromResource', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  autoPay?: string(name='AutoPay', description='Specifies whether payment is automatically made during renewal. Valid values:

*   **True**: enables automatic payment. Make sure that your Alibaba Cloud account has adequate balance.
*   **False** (default): disables automatic payment. You have to manually pay the order in the console. Log on to the ApsaraDB RDS console. In the upper-right corner, choose **Expenses > User Center**. In the left-side navigation pane, click **Orders**. On the page that appears, find your order and complete the payment.', example='True', position='Query'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. Valid values:

*   **true**.
*   **false** (default)', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the generated token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: int32(name='Period', description='The duration of the subscription renewal. Unit: month. Valid values:

*   **1~9**
*   **12**
*   **24**
*   **36**
*   **48**
*   **60**', example='12', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='201815745430941'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and pricing of ApsaraDB RDS. For more information, see [Billable items, billing methods, and pricing](~~45020~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is a subscription instance.
  * *   Your account supports credit card payments or balance payments.
  *     **
  *     **Note**By default, coupons available for your account are preferentially used for payment.
  *
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountRequest {
  accountName: string(name='AccountName', description='The name of the privileged account.', example='test1', position='Query'),
  accountPassword: string(name='AccountPassword', description='The new password of the privileged account.

> 

*   The password must be 8 to 32 characters in length.

*   It must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

*   It can contain the following special characters: `! @ # $ & ; % ^ * () _ + - =`.', example='Test123456', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='81BC9559-7B22-4B7F-B705-5F56DEECDEA7'),
}

model ResetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountResponseBody(name='body'),
}

/**
  * **
  * **This operation is not supported for instances that run SQL Server 2008 R2 because they do not have privileged accounts.
  *
 */
async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccount', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', description='The username of the account.', example='test1', position='Query'),
  accountPassword: string(name='AccountPassword', description='The new password.

> 

*   The value must be 8 to 32 characters in length.

*   The value must contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   The following special characters are supported: ! @ # $ & % ^ \\* ( ) \\_ + - =', example='Test123456', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE31DA81C9DD'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the instance is in the Running state.
  * > If the instance runs SQL Server 2017 on RDS Cluster Edition or runs PostgreSQL, you cannot call this operation to reset the passwords of accounts that are created by using SQL statements.
  *
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

/**
  * If a large number of transactions need to be submitted or rolled back, the restart process may be delayed for a minute.\\
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance does not have ongoing backup tasks.
  *
 */
async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model RestoreDdrTableRequest {
  backupId?: string(name='BackupId', example='279563', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='rm-bpxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmy*****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', example='2020-04-25T16:00:00Z', position='Query'),
  restoreType: string(name='RestoreType', example='0', position='Query'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', example='rm-bpxxxxx', position='Query'),
  sourceRegion?: string(name='SourceRegion', example='cn-beijing', position='Query'),
  tableMeta: string(name='TableMeta', example='[{"type":"db","name":"testdb1","newname":"testdb1","tables":[{"type":"table","name":"test1","newname":"test1_backup"},{"type":"table","name":"test2","newname":"test2_backup"}]}]', position='Query'),
}

model RestoreDdrTableResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='rm-uf6wjk5*****'),
  requestId?: string(name='RequestId', example='75BBF1EF-1E90-4950-BFFB-252D26E8259B'),
}

model RestoreDdrTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreDdrTableResponseBody(name='body'),
}

async function restoreDdrTable(request: RestoreDdrTableRequest): RestoreDdrTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreDdrTable', 'POST', '/', 'json', false, 'json', request);
}

model RestoreTableRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set.

You can call the [DescribeBackups](~~26273~~) operation to obtain the ID of the backup set.

> You must specify at least one of **BackupId** and **RestoreTime**.', example='9026262', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  instantRecovery?: boolean(name='InstantRecovery', description='Specifies whether to enable the fast restoration feature for individual databases and tables. Valid values:

*   **true**: enables the feature.
*   **false**: disables the feature.

> For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. The point in time must fall within the specified log backup retention period. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> 

*   You must specify at least one of **BackupId** and **RestoreTime**.

*   You must enable the log backup feature. For more information, see [Back up an ApsaraDB RDS for MySQL instance](~~98818~~).', example='2011-06-11T16:00:00Z', position='Query'),
  tableMeta: string(name='TableMeta', description='The names of the databases and tables that you want to restore. The value is in the following format: `[{"type":"db","name":"<The name of Database 1 on the source instance>","newname":"<The name of Database 1 on the destination instance>","tables":[{"type":"table","name":"<The name of Table 1 in Database 1 on the source instance>","newname":"<The name of Table 1 in Database 1 on the destination instance>"},{"type":"table","name":"<The name of Table 2 in Database 1 on the source instance>","newname":"<The name of Table 2 in Database 1 on the destination instance>"}]},{"type":"db","name":"<The name of Database 2 on the source instance>","newname":"<The name of Database 2 on the destination instance>","tables":[{"type":"table","name":"<The name of Table 3 in Database 2 on the source instance>","newname":"<The name of Table 3 in Database 2 on the destination instance>"},{"type":"table","name":"<The name of Table 4 in Database 2 on the source instance>","newname":"<The name of Table 4 in Database 2 on the destination instance>"}]}]`', example='[{"type":"db","name":"testdb1","newname":"testdb1_new","tables":[{"type":"table","name":"testdb1table1","newname":"testdb1table1_new"}]}]', position='Query'),
}

model RestoreTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA2D4F34-01A7-46EB-A339-D80882135206'),
}

model RestoreTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreTableResponseBody(name='body'),
}

/**
  * ApsaraDB RDS for MySQL supports the restoration of individual databases and tables. If you delete databases or tables from an instance, you can restore the databases or tables by using a backup file. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance does not have ongoing migration tasks.
  * *   If you want to restore data to a specific point in time, make sure that the log backup feature is enabled for the instance. For more information, see [Back up an ApsaraDB RDS for MySQL instance](~~98818~~).
  * *   The restoration of individual databases or tables is enabled, and new backups are created. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
  * *   The names that you want to use for the restored tables do not exist in the instance.
  * > This operation is supported only for instances that run MySQL.
  *
 */
async function restoreTable(request: RestoreTableRequest): RestoreTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreTable', 'POST', '/', 'json', false, 'json', request);
}

model RevokeAccountPrivilegeRequest {
  accountName: string(name='AccountName', description='The name of the account.', example='test1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  DBName: string(name='DBName', description='The name of the database. You can revoke all permissions of the account on this database. Separate multiple databases with commas (,).', example='testDB', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E22099CA-A61E-4992-A0B7-CE82DC175626'),
}

model RevokeAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeAccountPrivilegeResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The database is in the Running state.
  * > 
  * *   The permissions that can be revoked include SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, and TRIGGER.
  * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or PostgreSQL.
  *
 */
async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model RevokeOperatorPermissionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='842B73C8-5776-4BD9-9872-69C8C46DD7D3'),
}

model RevokeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeOperatorPermissionResponseBody(name='body'),
}

/**
  * After Alibaba Cloud technical support resolves the issues on your instance, you can revoke permissions from the service account of your instance.
  * This operation is available only when your instance runs one of the following database engines:
  * *   MySQL
  * *   SQL Server
  * *   PostgreSQL
  *
 */
async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeOperatorPermission', 'POST', '/', 'json', false, 'json', request);
}

model StartDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp****', position='Query'),
  DBInstanceTransType?: int32(name='DBInstanceTransType', description='The policy based on which the system migrates the data of the instance. Valid values:

*   **0**: the default value. The system preferentially upgrades or downgrades the instance without a migration. If the resources on the host on which the instance resides are insufficient, the system migrates the instance to another suitable host.
*   **1**: The system upgrades or downgrades the instance without a migration. If the upgrade or downgrade is not supported, the system reports an error.
*   **2**: The system migrates the data of the instance from the host on which the instance resides to another host. You must also specify the **DedicatedHostGroupId**, **TargetDedicatedHostIdForMaster**, and **TargetDedicatedHostIdForSlave** parameters. If you set the DBInstanceTransType parameter to 2, you cannot migrate the data of the instance to the host on which the instance resides. If you migrate the data of the instance to the host on which the instance resides, the migration fails.

> Only the instances that are created in dedicated clusters are supported.', example='0', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. You can call the [DescribeDedicatedHostGroups](~~141946~~) operation to query the ID of the dedicated cluster.

> Only the instances that are created in dedicated clusters are supported.', example='dhg-39****', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time at which you want the change to take effect. Valid values:

*   **Immediate**: The change immediately takes effect.
*   **MaintainTime**: The change takes effect during the maintenance window that you specified. For more information, see [ModifyDBInstanceMaintainTime](~~26249~~).
*   **SpecificTime**: The change takes effect at a specified point in time.

Default value: MaintainTime.

> Only the instances that are created in dedicated clusters are supported.', example='Immediate', position='Query'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.

> Only the instances that are created in dedicated clusters are supported.', example='5.7', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specifiedTime?: string(name='SpecifiedTime', description='The custom time at which you want the change to take effect. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> 

*   This parameter must be specified when you set the **EffectiveTime** parameter to **Specified**.

*   Only the instances that are created in dedicated clusters are supported.', example='2019-10-21T10:00:00Z', position='Query'),
  storage?: int32(name='Storage', description='The storage capacity of the instance. Valid values: **5 to 2000**. Unit: GB. If you do not specify this parameter, the storage capacity of the instance remains unchanged.

> Only the instances that are created in dedicated clusters are supported.', example='1000', position='Query'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass', description='The instance type of the instance.

> Only the instances that are created in dedicated clusters are supported.', example='rds.ebmhfc6.20xlarge', position='Query'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog', description='The ID of the host on which the logger instance is created.

> 

*   This parameter is invalid.', example='dh-bp****', position='Query'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='The ID of the host on which the primary instance is created.

> 

*   This parameter must be specified when you set the **DBInstanceTransType** parameter to **2**.

*   Only the instances that are created in dedicated clusters are supported.', example='dh-bp****', position='Query'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='The ID of the host on which the secondary instance is created.

> 

*   This parameter must be specified when you set the **DBInstanceTransType** parameter to **2**.

*   Only the instances that are created in dedicated clusters are supported.', example='dh-bp****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

> Only the instances that are created in dedicated clusters are supported.', example='vsw-****', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.

> Only the instances that are created in dedicated clusters are supported.', example='cn-hangzhou-a', position='Query'),
}

model StartDBInstanceResponseBody = {
  migrationId?: int32(name='MigrationId', description='The ID of the migration task.

> This parameter is returned only for the instances that are created in dedicated clusters.', example='740'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A417FB41-A3D9-464E-AD0A-C7FE05C72E98'),
  taskId?: int32(name='TaskId', description='The ID of the task.', example='238028563'),
}

model StartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartDBInstanceResponseBody(name='body'),
}

async function startDBInstance(request: StartDBInstanceRequest): StartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp1q915x50h******', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StopDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A417FB41-A3D9-464E-AD0A-C7FE05C72E98'),
}

model StopDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopDBInstanceResponseBody(name='body'),
}

/**
  * *   You cannot stop a serverless ApsaraDB RDS for MySQL instance because serverless instances support the automatic start and stop feature. For more information, see [Configure a serverless instance](~~421557~~).
  * *   For more information about how to stop an ApsaraDB RDS for MySQL instance, see [Suspend an instance](~~427093~~).
  * *   For more information about how to stop an ApsaraDB RDS for PostgreSQL instance, see [Suspend an instance](~~452314~~).
  * *   For more information about how to stop a ApsaraDB RDS for SQL Server instance, see [Suspend an instance](~~462504~~).
  * *   The following list describes the usage notes when you stop an instance that is created in a dedicated cluster:
  *     *   After you stop an instance, the computing resources of the instance are released. However, the data of the instance is retained. The retained data can be used to start the instance.
  *     *   When you stop an instance, all the read-only instances that are attached to the instance are stopped at the same time.
  *     *   After you stop an instance, the storage resources of the instance are still retained. You do not need to pay extra fees for the storage of the retained data.
  *
 */
async function stopDBInstance(request: StopDBInstanceRequest): StopDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchDBInstanceHARequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the primary instance.', example='rm-uf6wjk5xxxxxxxxxx', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time when the switching takes effect. Valid values:

*   **Immediate**: The switching immediately takes effect.
*   **MaintainTime**: The switching takes effect during the maintenance time.

Default value: **Immediate**.', example='Immediate', position='Query'),
  force?: string(name='Force', description='Specifies whether to enable forcible switching. Valid values:

*   **Yes**
*   **No**

Default value: **No**.', example='No', position='Query'),
  nodeId: string(name='NodeId', description='The unique ID of the secondary instance. You can call [DescribeDBInstanceHAConfig](~~26244~~) to query the secondary instance ID.', example='349054', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SwitchDBInstanceHAResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E43AAE0-BEE8-43DA-860D-EAF2AA0724DC'),
}

model SwitchDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceHAResponseBody(name='body'),
}

/**
  * This operation switches workloads over between the primary and secondary instances that do not run RDS Basic Edition. After the switchover, the secondary instance serves as the primary instance.
  *
 */
async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchDBInstanceHA', 'POST', '/', 'json', false, 'json', request);
}

model SwitchDBInstanceNetTypeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxx', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the custom endpoint. The prefix must be 8 to 64 characters in length and can contain letters and digits. It must start with a lowercase letter. A valid endpoint is in the following format: Prefix.Database engine.rds.aliyuncs.com. Example: test1234.mysql.rds.aliyuncs.com.', example='new**********', position='Query'),
  connectionStringType?: string(name='ConnectionStringType', description='The type of the endpoint. Valid values:

*   **Normal**
*   **ReadWriteSplitting**

By default, the system returns both types of endpoints.', example='Normal', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-bp1**************', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', description='The port associated with the endpoint. Valid values: **3001 to 3999**.', example='3306', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  newConnectionString?: string(name='NewConnectionString', description='The endpoint that is used to connect to the instance after the switch of endpoints.', example='new**********.mysql.rds.aliyuncs.com'),
  oldConnectionString?: string(name='OldConnectionString', description='The endpoint that is used to connect to the instance before the switch of endpoints.', example='rm-bp1**************.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

/**
  * To save endpoint resources, you can call this operation to switch an instance between its internal and public endpoints. After the endpoint that is used to connect to the instance is changed, you must update the endpoint information in the code of your application and restart the application.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is connected by using its internal or public endpoint.
  * *   The instance is in the Running state.
  * *   The number of times that you have switched the instance between its internal and public endpoints within the last 24 hours does not reach 20.
  * *   The instance resides in the classic network.
  *
 */
async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchDBInstanceNetType', 'POST', '/', 'json', false, 'json', request);
}

model SwitchDBInstanceVpcRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

> 

*   The instance must run one of the following database engines:

    - MySQL with local SSDs, standard SSDs, or ESSDs
    - SQL Server with standard SSDs or ESSDs
    - MariaDB with standard SSDs or ESSDs
    - PostgreSQL with standard SSDs or ESSDs

*   The instance must be in the Running state.
*   The instance must reside in a VPC.
*   The instance cannot be a temporary instance or use an instance type that belongs to the shared instance family.', example='rm-uf6wjk5*****', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance. The private IP address must be within the CIDR block of the vSwitch that is specified by the **VSwitchId** parameter.

> You can call the [DescribeVSwitches](~~35748~~) operation to query the CIDR block of a specified vSwitch.', example='10.23.XX.XX', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  VPCId: string(name='VPCId', description='The ID of the VPC.

> The VPC must belong to the same region as the instance.', example='vpc-uf6f7l4fg90*****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch.

> The vSwitch must belong to the same zone as the instance.', example='vsw-uf6adz52c2p*****', position='Query'),
}

model SwitchDBInstanceVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model SwitchDBInstanceVpcResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceVpcResponseBody(name='body'),
}

/**
  * The instance must run one of the following database engines:
  * *   MySQL with local SSDs, standard SSDs, or enhanced ESSDs (ESSDs)
  * *   SQL Server with standard SSDs or ESSDs
  * *   MariaDB with standard SSDs or ESSDs
  * *   PostgreSQL with standard SSDs or ESSDs
  * For more information about the impact of VPC and vSwitch changes, see [Switch an ApsaraDB RDS for MySQL instance to a new VPC and a new vSwitch](~~137567~~).
  *
 */
async function switchDBInstanceVpc(request: SwitchDBInstanceVpcRequest): SwitchDBInstanceVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchDBInstanceVpc', 'POST', '/', 'json', false, 'json', request);
}

model SwitchGuardToMasterInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the disaster recovery instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-uf6wjk5*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SwitchGuardToMasterInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFB6083A-7699-489B-8278-C0CB4793A96E'),
}

model SwitchGuardToMasterInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchGuardToMasterInstanceResponseBody(name='body'),
}

async function switchGuardToMasterInstance(request: SwitchGuardToMasterInstanceRequest): SwitchGuardToMasterInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchGuardToMasterInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the instances. You can specify up to 50 instance IDs.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of the tag that you want to add to the instance. The value of this parameter cannot be an empty string.', example='testkey1'),
      value?: string(name='Value', description='The tag value that is associated with the specified tag key. This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='The tags to be added to the resources. You can specify up to 20 tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can filter these instances by tag.
  * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
  * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
  * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
  * *   You can add up to 20 tags to an instance.
  * *   You can add tags to up to 50 instances in each call.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TerminateMigrateTaskRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the ID of the instance.', example='rm-bp159vfbuxxxxx9b5', position='Query'),
  migrateTaskId: string(name='MigrateTaskId', description='The ID of the migration task. You can call the [DescribeMigrateTasks](~~64563~~) operation to query the ID of the migration task.', example='56254xxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TerminateMigrateTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model TerminateMigrateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateMigrateTaskResponseBody(name='body'),
}

async function terminateMigrateTask(request: TerminateMigrateTaskRequest): TerminateMigrateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateMigrateTask', 'POST', '/', 'json', false, 'json', request);
}

model TransformDBInstancePayTypeRequest {
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable the auto-renewal feature for the instance. Valid values:

*   **true**
*   **false**

> 

*   This parameter is valid only when you change the billing method from pay-as-you-go to subscription.

*   All strings except **true** are considered **false**.', example='true', position='Query'),
  businessInfo?: string(name='BusinessInfo', description='The additional business information about the instance.', example='None', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The renewal cycle of the instance. Valid values:

*   **Year**
*   **Month**

> This parameter must be specified if you set **PayType** to **Prepaid**.', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription duration of the instance. Valid values:

*   If you set **Period** to **Year**, the value of UsedTime ranges from **1 to 5**.
*   If you set **Period** to **Month**, the value of UsedTime ranges from **1 to 9**.

> This parameter must be specified if you set **PayType** to **Prepaid**.', example='1', position='Query'),
}

model TransformDBInstancePayTypeResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method.', example='Prepaid'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxx'),
  expiredTime?: string(name='ExpiredTime', description='The expiration time.

> If you call this operation to change the billing method of an instance from subscription to pay-as-you-go, this parameter is not returned.', example='2020-04-20T10:00:00Z'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='205157600280623'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5E6E09DE-5B12-4BFF-A55E-1C86EDE06D9A'),
}

model TransformDBInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransformDBInstancePayTypeResponseBody(name='body'),
}

/**
  * > 
  * *   If you change the billing method of an instance from subscription to pay-as-you-go, a refund may be provided. The refund amount is equal to the remaining subscription fee deducted by an amount of service fee. For more information, see [Switch an ApsaraDB RDS for MySQL instance from subscription to pay-as-you-go](~~161875~~).
  * *   If the balance of your Alibaba Cloud account is insufficient, you cannot change the billing method of an instance from pay-as-you-go to subscription.
  * *   This operation is not supported for instances whose specification change orders are not completed.
  * *   This operation is not supported for instances that are created in dedicated clusters.
  * ApsaraDB RDS supports the following two billing methods:
  * *   Subscription: A subscription instance is an instance for which you pay an upfront fee. For long-term use, the subscription billing method is more cost-effective than the pay-as-you-go billing method. You are offered lower prices for longer subscription durations.
  * *   Pay-as-you-go: A pay-as-you-go instance is an instance for which you are charged per hour based on your resource usage. The hourly fee is calculated based on the instance type that you specify in the purchase order and is deducted from the balance of your Alibaba Cloud account. We recommend that you select the pay-as-you-go billing method for short-term use. If you no longer need your pay-as-you-go instance, you can release the instance to reduce costs.
  * For more information about the billing methods, see [Pricing, billable items, and billing methods](~~45020~~).
  *
 */
async function transformDBInstancePayType(request: TransformDBInstancePayTypeRequest): TransformDBInstancePayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformDBInstancePayType', 'POST', '/', 'json', false, 'json', request);
}

model UnlockAccountRequest {
  accountName: string(name='AccountName', description='The account that you want to unlock. You can unlock only one account at a time.', example='testaccount', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the ApsaraDB RDS for PostgreSQL instance.', example='pgm-bpxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnlockAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA65190D-852A-4C9B-88DA-E92698CAA350'),
}

model UnlockAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockAccountResponseBody(name='body'),
}

/**
  * You cannot use a locked account to log on to the corresponding instance. You must first unlock the account. For more information, see [Unlock and delete an account](~~147649~~).
  *
 */
async function unlockAccount(request: UnlockAccountRequest): UnlockAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockAccount', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to delete all tags of the instance. Valid values:

*   **true**
*   **false**

Default value: **false**.

> This parameter is valid if parameters that contain **TagKey.N** are not specified.', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of instances. You can remove tags from N instances at a time. Valid values of N: **1** to **50**.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The list of tag keys. You can delete N tag keys at a time. Valid values of N: **1** to **20**. The value of this parameter cannot be an empty string.', example='testkey1', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C0088'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * > *   You can remove up to 20 tags at a time.
  * > *   If a tag is removed from an instance and is not added to other instances, the tag is automatically deleted.
  *
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserBackupFileRequest {
  backupId: string(name='BackupId', description='The ID of the backup file. You can call the [ListUserBackupFiles](~~257821~~) operation to query the ID of the backup file.', example='b-kwwvr7v8t7of********', position='Query'),
  comment?: string(name='Comment', description='The new description of the full backup file.', example='CommentTest', minLength=2, maxLength=256, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~26243~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retention?: int32(name='Retention', description='The new retention period of the full backup file. Unit: days. Valid values: any non-zero positive integer.', example='30', position='Query'),
}

model UpdateUserBackupFileResponseBody = {
  backupId?: string(name='BackupId', description='The ID of the backup file.', example='b-g14d0m772f7b********'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A236067-4727-4B42-92CF-734E417ED69A'),
}

model UpdateUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserBackupFileResponseBody(name='body'),
}

/**
  * > A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
  *
 */
async function updateUserBackupFile(request: UpdateUserBackupFileRequest): UpdateUserBackupFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserBackupFile', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceEngineVersionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The time at which you want the specification change to take effect. Valid values:

*   **Immediate**: The specification change takes effect immediately.
*   **MaintainTime**: The change is applied during the specified maintenance window. For more information, see [ModifyDBInstanceMaintainTime](~~26249~~).

Default value: **Immediate**.', example='Immediate', position='Query'),
  engineVersion: string(name='EngineVersion', description='The major engine version that the new instance runs. Valid values:

*   **8.0**
*   **5.7**
*   **5.6**', example='5.7', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='10254125'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

/**
  * > The fee that you must pay after the upgrade varies based on the instance types and storage types of the original instance and the new instance.
  * If the instance is a primary instance to which read-only instances or disaster recovery instances are attached, you must upgrade the major engine versions of the read-only instances or disaster recovery instances before you upgrade the major engine version of the primary instance.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the Running state.
  * *   The instance runs one of the following database versions:
  *     *   MySQL 5.7
  *     *   MySQL 5.6
  *     *   MySQL 5.5
  * You can call the [UpgradeDBInstanceMajorVersion](~~330972~~) operation to upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance.
  *
 */
async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceEngineVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceKernelVersionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. This parameter is supported only for instances that run MySQL, PostgreSQL, or SQL Server.

> 

*   If your instance runs PostgreSQL, you must make sure that the instance uses **cloud disks**. If the instance is equipped with local disks, you must call the [RestartDBInstance](~~26230~~) operation to restart the instance. The system automatically updates the instance to the latest minor engine version during the restart process.

*   If your instance runs SQL Server, you must make sure that the instance runs SQL Server 2019.', example='rm-bpxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', description='The update time. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> This parameter takes effect only when you set **UpgradeTime** to **SpecifyTime**.', example='2020-01-15T00:00:00Z', position='Query'),
  targetMinorVersion?: string(name='TargetMinorVersion', description='The minor engine version to which you want to update the instance. Format:

*   **PostgreSQL**: `rds_postgres_<Major engine version>00_<Minor engine version>`. Example: `rds_postgres_1200_20200830`.

*   **MySQL**: `<RDS edition and MySQL version>_<Minor engine version>`. Examples: `rds_20200229`, `xcluster_20200229`, and `xcluster80_20200229`. The following RDS editions and MySQL versions are supported:

    *   **rds**: The instance runs RDS Basic Edition or RDS High-availability Edition.
    *   **xcluster**: The instance runs MySQL 5.7 on RDS Enterprise Edition.
    *   **xcluster80**: The instance runs MySQL 8.0 on RDS Enterprise Edition.

*   **SQLServer**: `<Minor engine version>`. Example: `15.0.4073.23`.

If you do not specify this parameter, the instance is updated to the latest minor engine version.

> For more information about minor engine versions, see [Release notes of minor AliPG versions](~~126002~~), [Release notes of minor AliSQL versions](~~96060~~), and [Release notes of minor engine versions of ApsaraDB RDS for SQL Server](~~213577~~).', example='xcluster80_20210305', position='Query'),
  upgradeTime?: string(name='UpgradeTime', description='The time when the update takes effect. Valid values:

*   **Immediate**: The update immediately takes effect.
*   **MaintainTime**: The update takes effect during the maintenance window that you specify. For more information about how to change the maintenance window, see [ModifyDBInstanceMaintainTime](~~26249~~).
*   **SpecifyTime**: The update takes effect at the point in time you specify.

Default value: **Immediate**.', example='Immediate', position='Query'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the instance.', example='rm-bpxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DA2ECBA0-4745-4491-9166-799FF8984AC9'),
  targetMinorVersion?: string(name='TargetMinorVersion', description='The new minor engine version of the instance.', example='xcluster80_20210305'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='226917711'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

/**
  * An update to the minor engine version enhances performance, introduces new features, and fixes known bugs. For more information, see [Update the minor engine version of an ApsaraDB RDS for MySQL instance](~~96059~~), [Update the minor engine version of an ApsaraDB RDS for SQL Server instance](~~213582~~), and [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
  * > This operation is supported for instances that run MySQL, SQL Server, or PostgreSQL.
  *
 */
async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceKernelVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceMajorVersionRequest {
  collectStatMode?: string(name='CollectStatMode', description='The time at which the system collects the statistics of the new instance. Valid values:

*   Before: ApsaraDB RDS collects the statistics of the new instance before the switchover to ensure service stability. If the original instance contains a large amount of data, the upgrade may require a long period of time.
*   After: ApsaraDB RDS collects the statistics of the new instance after the switchover to accelerate the upgrade. If you access tables for which no statistics are generated, the execution plans that you specify may be inaccurate. In addition, your database service may be unavailable during peak hours.

> If you set SwitchOver to false, the value Before of this parameter specifies that ApsaraDB RDS collects the statistics of the new instance before the new instance starts to process read and write requests, and the value After of this parameter specifies that ApsaraDB RDS collects the statistics of the new instance after the new instance starts to process read and write requests.', example='After', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the new instance. The CPU and memory specifications of the new instance must be higher than or equal to the CPU and memory specifications of the original instance.

For example, if the instance type of the original instance is `pg.n2.small.2c`, which provides 1 core and 2 GB of memory, the instance type of the new instance can be `pg.n2.medium.2c`, which provides 2 cores and 4 GB of memory.

> For more information about instance types in ApsaraDB RDS for PostgreSQL, see [Primary ApsaraDB RDS for PostgreSQL instance types](~~276990~~).', example='pg.n2.medium.2c', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the original instance.', example='pgm-bp1gm3yh0ht1****', position='Query'),
  DBInstanceStorage?: int32(name='DBInstanceStorage', description='The storage capacity of the new instance.

Unit: GB

Valid values:

*   Valid values if you use enhanced SSDs (ESSDs) of performance level 1 (PL1): 20 to 3200
*   Valid values if you use ESSDs of PL2: 500 to 3200
*   Valid values if you use ESSDs of PL3: 1500 to 3200

> If the original instance uses local disks, you can reduce the storage capacity of the instance when you upgrade the major engine version of the instance. For more information about the minimum available storage capacity, see [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~).', example='20', position='Query'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='The storage type of the new instance.

Valid values:

*   cloud_ssd: standard SSDs
*   cloud_essd: ESSD of PL1
*   cloud_essd2: ESSD of PL2
*   cloud_essd3: ESSD of PL3

The major engine version upgrade feature is based on cloud disk snapshots. You can select a storage type based on the following conditions:

*   If the original instance uses standard SSDs, you can set this parameter to cloud_ssd.
*   If the original instance uses ESSDs, you can set this parameter to cloud_essd, cloud_essd2, or cloud_essd3.
*   If the original instance uses local disks, you can set this parameter to cloud_essd, cloud_essd2, or cloud_essd3.', example='cloud_essd', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the new instance. Set the value to VPC. The major engine version upgrade feature is supported only for instances that reside in VPCs.

If the original instance resides in the classic network, you must migrate the instance to a VPC before you call this operation. For more information about how to view or change the network type of an instance, see [Change the network type of an ApsaraDB RDS for PostgreSQL instance](~~96761~~).', example='VPC', position='Query'),
  payType: string(name='PayType', description='The billing method of the new instance. Set the value to Postpaid.

> For more information about how to change the billing method of an instance after the upgrade, see [Change the billing method of an instance from pay-as-you-go to subscription](~~96743~~).', example='Postpaid', position='Query'),
  period?: string(name='Period', description='A reserved parameter. You do not need to specify this parameter.', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The internal IP address of the new instance. You do not need to specify this parameter. The system automatically assigns an internal IP address based on the values of the VPCId and vSwitchId parameters.', example='172.16.XX.XX', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchOver?: string(name='SwitchOver', description='Specifies whether the system automatically switches your workloads over to the new instance after data is migrated to the new instance.

Valid values:

*   true
*   false Before you perform an upgrade, we recommend that you set this parameter to false to test whether the new major engine version is compatible with your workloads.

> 

*   If you set this parameter to true, you must take note of the following information:

    *   After the switchover is complete, you cannot roll your workloads back to the original instance. Proceed with caution.
    *   During the switchover, the original instance processes only read requests. We recommend that you perform the switchover during off-peak hours.
    *   If read-only instances are attached to the original instance, you can set this parameter only to false. In this case, the read-only instances that are attached to the original instance cannot be cloned. After the upgrade is complete, you must create read-only instances for the new instance.

*   If you set this parameter to false, you must take note of the following information:

    *   The data migration does not interrupt your workloads on the original instance.
    *   After data is migrated to the new instance, you must update the endpoint configuration on your application. This update requires you to replace the endpoint of the original instance with the endpoint of the new instance. For more information about how to view the endpoint of an instance, see [View and change the internal and public endpoints and port numbers of an ApsaraDB RDS for PostgreSQL instance](~~96788~~).', example='false', position='Query'),
  switchTime?: string(name='SwitchTime', description='A reserved parameter. You do not need to specify this parameter.', example='2021-07-10T13:15:12Z', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', description='The time at which the system switches your workloads over to the new instance. This parameter is used together with SwitchOver and takes effect only when you set SwitchOver to true.

Valid values:

*   Immediate: After data is migrated to the new instance, the system immediately switches your workloads over to the new instance.
*   MaintainTime: After data is migrated to the new instance, the system switches your workloads over to the new instance during the maintenance window that you specify. You can call the [ModifyDBInstanceMaintainTime](~~26249~~) operation to change the maintenance window of an instance.', example='Immediate', position='Query'),
  targetMajorVersion?: string(name='TargetMajorVersion', description='The major engine version of the new instance. The value of this parameter must be the major engine version on which an upgrade check is performed.

> You can call the [UpgradeDBInstanceMajorVersionPrecheck](~~330050~~) operation to perform an upgrade check.', example='13.0', position='Query'),
  usedTime?: string(name='UsedTime', description='A reserved parameter. You do not need to specify this parameter.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The ID of the VPC in which the original instance resides. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the VPC ID of the instance.', example='vpc-bp1opxu1zkhn00gzv****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='*   If the original instance runs RDS Basic Edition, you must enter the vSwitch ID of the new instance.
*   If the original instance runs RDS High-availability Edition, you must enter the vSwitch ID of the new instance and the vSwitch ID of the secondary instance of the new instance. Make sure that you separate the vSwitch IDs with commas (,).

> The vSwitches that you specify must reside in the same zone as the original instance. You can call the [DescribeVSwitches](~~35748~~) operation to query the ID of the vSwitch.', example='vsw-bp10aqj6o4lclxdrm****,vsw-bp10aqj6o4lclxdrm****', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the new instance. You can call the [DescribeRegions](~~26243~~) operation to query the zone ID.

You can select a zone that belongs to the region in which the original instance resides. The zone can be different from the zone of the original instance.', example='cn-hangzhou-h', position='Query'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='The zone ID of the secondary instance for the new instance. You can specify this parameter only when the original instance runs RDS High-availability Edition.

You can select a zone that belongs to the region in which the original instance resides. The zone can be different from the zone of the original instance.

You can call the [DescribeRegions](~~26243~~) operation to query the zone ID.', example='cn-hangzhou-h', position='Query'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='A reserved parameter. You do not need to specify this parameter.', example='cn-hangzhou-h', position='Query'),
}

model UpgradeDBInstanceMajorVersionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='pgm-bp1gm3yh0ht1****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='21128667463****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='006729E5-2A33-5955-89E3-651D3F44EBE6'),
  taskId?: long(name='TaskId', description='A reserved parameter.', example='416980000'),
}

model UpgradeDBInstanceMajorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceMajorVersionResponseBody(name='body'),
}

/**
  * During an upgrade, ApsaraDB RDS retains the original instance and creates an instance that runs the new major engine version. You are **charged** for the new instance based on the **pay-as-you-go** billing method after the instance is created. The new instance **does not inherit the discounts that are offered to the original instance**. Before you call this operation, make sure that you fully understand the billing methods and pricing of ApsaraDB RDS. You can decide whether to upgrade the major engine version based on your business requirements. For more information, see [Billable items, billing methods, and pricing](~~45020~~).
  * Before you upgrade the major engine version, you must call the [UpgradeDBInstanceMajorVersionPrecheck](~~330050~~) operation to perform an upgrade check and then call the [DescribeUpgradeMajorVersionPrecheckTask](~~330088~~) operation to query the upgrade check report. You can call the UpgradeDBInstanceMajorVersion operation only when the check result is **Success**.
  * Before you call this operation, make sure that the following requirements are met:
  * *   The original instance runs PostgreSQL 14, PostgreSQL 13, PostgreSQL 12, PostgreSQL 11, PostgreSQL 10, or PostgreSQL 9.4.
  * *   The instance runs RDS High-availability Edition or RDS Basic Edition.
  * *   The instance resides in a virtual private cloud (VPC). If the instance resides in the classic network, you must migrate the instance to a VPC before you call this operation. For more information about how to view or change the network type of an instance, see [Change the network type of an ApsaraDB RDS for PostgreSQL instance](~~96761~~).
  * *   The instance is not a read-only instance and is not created in a dedicated cluster.
  * An upgrade causes impacts such as a transient connection that lasts a few minutes. We recommend that you perform an upgrade during off-peak hours. Before you perform an upgrade, we recommend that you read the description in [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~).
  *
 */
async function upgradeDBInstanceMajorVersion(request: UpgradeDBInstanceMajorVersionRequest): UpgradeDBInstanceMajorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceMajorVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceMajorVersionPrecheckRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

The instance must meet the following requirements:

*   The instance runs PostgreSQL 12, PostgreSQL 11, PostgreSQL 10, or PostgreSQL 9.4.
*   The instance runs RDS High-availability Edition or RDS Basic Edition.
*   The instance resides in a virtual private cloud (VPC). If the instance resides in the classic network, you must migrate the instance to a VPC before you call this operation. For more information about how to view or change the network type of an instance, see [Change the network type of an ApsaraDB RDS for PostgreSQL instance](~~96761~~).
*   The instance cannot be a read-only instance and cannot be created in a dedicated cluster.
*   The ID of the instance does not start with `pg-cn`.', example='pgm-bp1c808s731l****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetMajorVersion: string(name='TargetMajorVersion', description='The new major engine version of the instance. The new major engine version must be later than the original major engine version.

For example, if the original major engine version is PostgreSQL 9.4, the new major engine version can be PostgreSQL 10, PostgreSQL 11, PostgreSQL 12, or PostgreSQL 13.', example='12.0', position='Query'),
}

model UpgradeDBInstanceMajorVersionPrecheckResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='pgm-bp1c808s731l****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='99C1FEEE-FB44-5342-8EBA-DC1E1A1557A4'),
  targetMajorVersion?: string(name='TargetMajorVersion', description='The new major engine version of the instance.', example='12.0'),
  taskId?: string(name='TaskId', description='The ID of the upgrade check task.', example='41698****'),
}

model UpgradeDBInstanceMajorVersionPrecheckResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceMajorVersionPrecheckResponseBody(name='body'),
}

/**
  * ApsaraDB RDS for PostgreSQL provides the major version upgrade feature. You can use this feature to upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance.
  * Before you perform an upgrade, you must perform an upgrade check and make sure that the check result is **Success**. You can call this operation to perform an upgrade check.
  * An upgrade brings impacts, such as a transient connection that lasts a few minutes. We recommend that you perform an upgrade during off-peak hours. Before you perform an upgrade, we recommend that you read [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~).
  *
 */
async function upgradeDBInstanceMajorVersionPrecheck(request: UpgradeDBInstanceMajorVersionPrecheckRequest): UpgradeDBInstanceMajorVersionPrecheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceMajorVersionPrecheck', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBProxyInstanceKernelVersionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance. You can call the [DescribeDBInstances](~~26232~~) operation to query the instance ID.', example='rm-uf6wjk5****', position='Query'),
  DBProxyEngineType?: string(name='DBProxyEngineType', description='An internal parameter. You do not need to specify this parameter.', example='normal', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', description='The specific point in time when you want to perform the upgrade. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> If you set **UpgradeTime** to **SpecificTime**, you must specify SwitchTime.', example='2019-07-10T13:15:12Z', position='Query'),
  upgradeTime?: string(name='UpgradeTime', description='The time when you want to upgrade the database proxy version of the instance. Valid values:

*   **MaintainTime**: ApsaraDB RDS performs the upgrade during the maintenance window that you specified. This is the default value. For more information, see [Modify the maintenance window](~~26249~~).
*   **Immediate**: ApsaraDB RDS immediately performs the upgrade.
*   **SpecificTime**: ApsaraDB RDS performs the upgrade at a specified point in time.

> 

*   If the instance runs MySQL, you can set this parameter to **MaintainTime**, **Immediate**, or **SpecificTime**.

*   If the instance runs PostgreSQL, you can set this parameter to **MaintainTime** or **Immediate**.', example='MaintainTime', position='Query'),
}

model UpgradeDBProxyInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', description='The ID of the database proxy of the instance.', example='bu9***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='44537EC8-DFA2-4745-B579-E733FF2C5B9A'),
  taskId?: string(name='TaskId', description='The task ID.', example='334362871'),
}

model UpgradeDBProxyInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBProxyInstanceKernelVersionResponseBody(name='body'),
}

/**
  * Before you call the ModifyDBProxyEndpoint operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
  * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
  * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
  *
 */
async function upgradeDBProxyInstanceKernelVersion(request: UpgradeDBProxyInstanceKernelVersionRequest): UpgradeDBProxyInstanceKernelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBProxyInstanceKernelVersion', 'POST', '/', 'json', false, 'json', request);
}

