/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'rds.aliyuncs.com',
    cn-beijing = 'rds.aliyuncs.com',
    cn-hangzhou = 'rds.aliyuncs.com',
    cn-shanghai = 'rds.aliyuncs.com',
    cn-shenzhen = 'rds.aliyuncs.com',
    cn-heyuan = 'rds.aliyuncs.com',
    cn-hongkong = 'rds.aliyuncs.com',
    ap-southeast-1 = 'rds.aliyuncs.com',
    us-west-1 = 'rds.aliyuncs.com',
    us-east-1 = 'rds.aliyuncs.com',
    cn-shanghai-finance-1 = 'rds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'rds.aliyuncs.com',
    cn-north-2-gov-1 = 'rds.aliyuncs.com',
    ap-northeast-2-pop = 'rds.aliyuncs.com',
    cn-beijing-finance-1 = 'rds.aliyuncs.com',
    cn-beijing-finance-pop = 'rds.aliyuncs.com',
    cn-beijing-gov-1 = 'rds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'rds.aliyuncs.com',
    cn-edge-1 = 'rds.aliyuncs.com',
    cn-fujian = 'rds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'rds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'rds.aliyuncs.com',
    cn-hangzhou-finance = 'rds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'rds.aliyuncs.com',
    cn-hangzhou-test-306 = 'rds.aliyuncs.com',
    cn-hongkong-finance-pop = 'rds.aliyuncs.com',
    cn-qingdao-nebula = 'rds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'rds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'rds.aliyuncs.com',
    cn-shanghai-inner = 'rds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'rds.aliyuncs.com',
    cn-shenzhen-inner = 'rds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'rds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'rds.aliyuncs.com',
    cn-wuhan = 'rds.aliyuncs.com',
    cn-yushanfang = 'rds.aliyuncs.com',
    cn-zhangbei = 'rds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'rds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'rds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'rds.aliyuncs.com',
    eu-west-1-oxs = 'rds.aliyuncs.com',
    rus-west-1-pop = 'rds.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('rds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddTagsToResourceRequest {
  tag?: [
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='Tag'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
}

model AddTagsToResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTagsToResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsToResourceResponseBody(name='body'),
}

async function addTagsToResourceWithOptions(request: AddTagsToResourceRequest, runtime: Util.RuntimeOptions): AddTagsToResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTagsToResource', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTagsToResource(request: AddTagsToResourceRequest): AddTagsToResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsToResourceWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  ownerAccount?: string(name='OwnerAccount'),
  generalGroupName?: string(name='GeneralGroupName'),
}

model AllocateInstancePublicConnectionResponseBody = {
  dbInstanceName?: string(name='DbInstanceName'),
  requestId?: string(name='RequestId'),
  connectionString?: string(name='ConnectionString'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateInstancePublicConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model AllocateReadWriteSplittingConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  maxDelayTime?: string(name='MaxDelayTime'),
  netType?: string(name='NetType'),
  distributionType?: string(name='DistributionType'),
  weight?: string(name='Weight'),
}

model AllocateReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateReadWriteSplittingConnectionResponseBody(name='body'),
}

async function allocateReadWriteSplittingConnectionWithOptions(request: AllocateReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): AllocateReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateReadWriteSplittingConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateReadWriteSplittingConnection(request: AllocateReadWriteSplittingConnectionRequest): AllocateReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateReadWriteSplittingConnectionWithOptions(request, runtime);
}

model CalculateDBInstanceWeightRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model CalculateDBInstanceWeightResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBInstanceWeight?: [ 
    {
      readonlyInstanceSQLDelayedTime?: string(name='ReadonlyInstanceSQLDelayedTime'),
      weight?: string(name='Weight'),
      DBInstanceType?: string(name='DBInstanceType'),
      DBInstanceId?: string(name='DBInstanceId'),
      role?: string(name='Role'),
    }
  ](name='DBInstanceWeight')
  }(name='Items'),
}

model CalculateDBInstanceWeightResponse = {
  headers: map[string]string(name='headers'),
  body: CalculateDBInstanceWeightResponseBody(name='body'),
}

async function calculateDBInstanceWeightWithOptions(request: CalculateDBInstanceWeightRequest, runtime: Util.RuntimeOptions): CalculateDBInstanceWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CalculateDBInstanceWeight', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function calculateDBInstanceWeight(request: CalculateDBInstanceWeightRequest): CalculateDBInstanceWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return calculateDBInstanceWeightWithOptions(request, runtime);
}

model CancelImportRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  importId?: int32(name='ImportId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CancelImportResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelImportResponse = {
  headers: map[string]string(name='headers'),
  body: CancelImportResponseBody(name='body'),
}

async function cancelImportWithOptions(request: CancelImportRequest, runtime: Util.RuntimeOptions): CancelImportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelImport', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelImport(request: CancelImportRequest): CancelImportResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelImportWithOptions(request, runtime);
}

model CheckAccountNameAvailableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CheckAccountNameAvailableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckAccountNameAvailableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccountNameAvailableResponseBody(name='body'),
}

async function checkAccountNameAvailableWithOptions(request: CheckAccountNameAvailableRequest, runtime: Util.RuntimeOptions): CheckAccountNameAvailableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckAccountNameAvailable', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkAccountNameAvailable(request: CheckAccountNameAvailableRequest): CheckAccountNameAvailableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountNameAvailableWithOptions(request, runtime);
}

model CheckCloudResourceAuthorizedRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetRegionId?: string(name='TargetRegionId'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  requestId?: string(name='RequestId'),
  roleArn?: string(name='RoleArn'),
  authorizationState?: int32(name='AuthorizationState'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: Util.RuntimeOptions): CheckCloudResourceAuthorizedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckCloudResourceAuthorized', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCloudResourceAuthorizedWithOptions(request, runtime);
}

model CheckCreateDdrDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  restoreType?: string(name='RestoreType'),
  backupSetId?: string(name='BackupSetId'),
  restoreTime?: string(name='RestoreTime'),
  sourceRegion?: string(name='SourceRegion'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName'),
  binlogName?: string(name='BinlogName'),
  binlogPosition?: string(name='BinlogPosition'),
  binlogRole?: string(name='BinlogRole'),
}

model CheckCreateDdrDBInstanceResponseBody = {
  isValid?: string(name='IsValid'),
  requestId?: string(name='RequestId'),
}

model CheckCreateDdrDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCreateDdrDBInstanceResponseBody(name='body'),
}

async function checkCreateDdrDBInstanceWithOptions(request: CheckCreateDdrDBInstanceRequest, runtime: Util.RuntimeOptions): CheckCreateDdrDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckCreateDdrDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkCreateDdrDBInstance(request: CheckCreateDdrDBInstanceRequest): CheckCreateDdrDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCreateDdrDBInstanceWithOptions(request, runtime);
}

model CheckDBNameAvailableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CheckDBNameAvailableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckDBNameAvailableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDBNameAvailableResponseBody(name='body'),
}

async function checkDBNameAvailableWithOptions(request: CheckDBNameAvailableRequest, runtime: Util.RuntimeOptions): CheckDBNameAvailableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDBNameAvailable', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDBNameAvailable(request: CheckDBNameAvailableRequest): CheckDBNameAvailableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDBNameAvailableWithOptions(request, runtime);
}

model CheckInstanceExistRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model CheckInstanceExistResponseBody = {
  isExistInstance?: boolean(name='IsExistInstance'),
  requestId?: string(name='RequestId'),
}

model CheckInstanceExistResponse = {
  headers: map[string]string(name='headers'),
  body: CheckInstanceExistResponseBody(name='body'),
}

async function checkInstanceExistWithOptions(request: CheckInstanceExistRequest, runtime: Util.RuntimeOptions): CheckInstanceExistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckInstanceExist', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkInstanceExist(request: CheckInstanceExistRequest): CheckInstanceExistResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkInstanceExistWithOptions(request, runtime);
}

model ClearDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
}

model ClearDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model ClearDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ClearDedicatedHostResponseBody(name='body'),
}

async function clearDedicatedHostWithOptions(request: ClearDedicatedHostRequest, runtime: Util.RuntimeOptions): ClearDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClearDedicatedHost', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clearDedicatedHost(request: ClearDedicatedHostRequest): ClearDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearDedicatedHostWithOptions(request, runtime);
}

model CloneDBInstanceRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  dbNames?: string(name='DbNames'),
  payType?: string(name='PayType'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  usedTime?: int32(name='UsedTime'),
  period?: string(name='Period'),
  category?: string(name='Category'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  restoreTable?: string(name='RestoreTable'),
  tableMeta?: string(name='TableMeta'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  backupType?: string(name='BackupType'),
}

model CloneDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model CloneDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CloneDBInstanceResponseBody(name='body'),
}

async function cloneDBInstanceWithOptions(request: CloneDBInstanceRequest, runtime: Util.RuntimeOptions): CloneDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloneDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cloneDBInstance(request: CloneDBInstanceRequest): CloneDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneDBInstanceWithOptions(request, runtime);
}

model CloneParameterGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  targetRegionId?: string(name='TargetRegionId'),
  parameterGroupId?: string(name='ParameterGroupId'),
  parameterGroupName?: string(name='ParameterGroupName'),
  parameterGroupDesc?: string(name='ParameterGroupDesc'),
}

model CloneParameterGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloneParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CloneParameterGroupResponseBody(name='body'),
}

async function cloneParameterGroupWithOptions(request: CloneParameterGroupRequest, runtime: Util.RuntimeOptions): CloneParameterGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloneParameterGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cloneParameterGroup(request: CloneParameterGroupRequest): CloneParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneParameterGroupWithOptions(request, runtime);
}

model CopyDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CopyDatabaseResponseBody = {
  DBName?: string(name='DBName'),
  taskId?: string(name='TaskId'),
  DBStatus?: string(name='DBStatus'),
}

model CopyDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CopyDatabaseResponseBody(name='body'),
}

async function copyDatabaseWithOptions(request: CopyDatabaseRequest, runtime: Util.RuntimeOptions): CopyDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyDatabase', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyDatabase(request: CopyDatabaseRequest): CopyDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyDatabaseWithOptions(request, runtime);
}

model CopyDatabaseBetweenInstancesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetDBInstanceId?: string(name='TargetDBInstanceId'),
  dbNames?: string(name='DbNames'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  syncUserPrivilege?: string(name='SyncUserPrivilege'),
}

model CopyDatabaseBetweenInstancesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
}

model CopyDatabaseBetweenInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CopyDatabaseBetweenInstancesResponseBody(name='body'),
}

async function copyDatabaseBetweenInstancesWithOptions(request: CopyDatabaseBetweenInstancesRequest, runtime: Util.RuntimeOptions): CopyDatabaseBetweenInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyDatabaseBetweenInstances', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyDatabaseBetweenInstances(request: CopyDatabaseBetweenInstancesRequest): CopyDatabaseBetweenInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyDatabaseBetweenInstancesWithOptions(request, runtime);
}

model CreateAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
  accountType?: string(name='AccountType'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  backupStrategy?: string(name='BackupStrategy'),
  backupMethod?: string(name='BackupMethod'),
  backupType?: string(name='BackupType'),
}

model CreateBackupResponseBody = {
  backupJobId?: string(name='BackupJobId'),
  requestId?: string(name='RequestId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  characterSetName?: string(name='CharacterSetName'),
  DBDescription?: string(name='DBDescription'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatabaseResponseBody(name='body'),
}

async function createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDatabase', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatabaseWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  systemDBCharset?: string(name='SystemDBCharset'),
  DBInstanceNetType?: string(name='DBInstanceNetType'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  clientToken?: string(name='ClientToken'),
  payType?: string(name='PayType'),
  zoneId?: string(name='ZoneId'),
  zoneIdSlave1?: string(name='ZoneIdSlave1'),
  zoneIdSlave2?: string(name='ZoneIdSlave2'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  connectionMode?: string(name='ConnectionMode'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  usedTime?: string(name='UsedTime'),
  period?: string(name='Period'),
  resourceGroupId?: string(name='ResourceGroupId'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  businessInfo?: string(name='BusinessInfo'),
  encryptionKey?: string(name='EncryptionKey'),
  roleARN?: string(name='RoleARN'),
  autoRenew?: string(name='AutoRenew'),
  category?: string(name='Category'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog'),
  DBParamGroupId?: string(name='DBParamGroupId'),
  DBTimeZone?: string(name='DBTimeZone'),
  DBIsIgnoreCase?: string(name='DBIsIgnoreCase'),
  targetMinorVersion?: string(name='TargetMinorVersion'),
  storageAutoScale?: string(name='StorageAutoScale'),
  storageThreshold?: int32(name='StorageThreshold'),
  storageUpperBound?: int32(name='StorageUpperBound'),
  dryRun?: boolean(name='DryRun'),
  userBackupId?: string(name='UserBackupId'),
  amount?: int32(name='Amount'),
  createStrategy?: string(name='CreateStrategy'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateDBInstanceResponseBody = {
  dryRunResult?: boolean(name='DryRunResult'),
  tagResult?: boolean(name='TagResult'),
  requestId?: string(name='RequestId'),
  connectionString?: string(name='ConnectionString'),
  message?: string(name='Message'),
  DBInstanceId?: string(name='DBInstanceId'),
  port?: string(name='Port'),
  taskId?: string(name='TaskId'),
  dryRun?: boolean(name='DryRun'),
  orderId?: string(name='OrderId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateDBProxyEndpointAddressRequest {
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  DBProxyNewConnectStringPort?: string(name='DBProxyNewConnectStringPort'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBProxyEndpointAddressResponseBody(name='body'),
}

async function createDBProxyEndpointAddressWithOptions(request: CreateDBProxyEndpointAddressRequest, runtime: Util.RuntimeOptions): CreateDBProxyEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBProxyEndpointAddress', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBProxyEndpointAddress(request: CreateDBProxyEndpointAddressRequest): CreateDBProxyEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBProxyEndpointAddressWithOptions(request, runtime);
}

model CreateDdrInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  systemDBCharset?: string(name='SystemDBCharset'),
  DBInstanceNetType?: string(name='DBInstanceNetType'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  clientToken?: string(name='ClientToken'),
  payType?: string(name='PayType'),
  zoneId?: string(name='ZoneId'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  connectionMode?: string(name='ConnectionMode'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  ownerAccount?: string(name='OwnerAccount'),
  usedTime?: string(name='UsedTime'),
  period?: string(name='Period'),
  resourceGroupId?: string(name='ResourceGroupId'),
  restoreType?: string(name='RestoreType'),
  backupSetId?: string(name='BackupSetId'),
  restoreTime?: string(name='RestoreTime'),
  sourceRegion?: string(name='SourceRegion'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  binlogName?: string(name='BinlogName'),
  binlogPosition?: string(name='BinlogPosition'),
  binlogRole?: string(name='BinlogRole'),
}

model CreateDdrInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  port?: string(name='Port'),
  connectionString?: string(name='ConnectionString'),
  orderId?: string(name='OrderId'),
}

model CreateDdrInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDdrInstanceResponseBody(name='body'),
}

async function createDdrInstanceWithOptions(request: CreateDdrInstanceRequest, runtime: Util.RuntimeOptions): CreateDdrInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDdrInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDdrInstance(request: CreateDdrInstanceRequest): CreateDdrInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDdrInstanceWithOptions(request, runtime);
}

model CreateDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hostName?: string(name='HostName'),
  zoneId?: string(name='ZoneId'),
  vSwitchId?: string(name='VSwitchId'),
  hostClass?: string(name='HostClass'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  clientToken?: string(name='ClientToken'),
  autoRenew?: string(name='AutoRenew'),
}

model CreateDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
  orderId?: long(name='OrderId'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHostWithOptions(request: CreateDedicatedHostRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHost', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostWithOptions(request, runtime);
}

model CreateDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  regionId?: string(name='RegionId'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccountWithOptions(request: CreateDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostAccountWithOptions(request, runtime);
}

model CreateDedicatedHostGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy'),
  VPCId?: string(name='VPCId'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
  clientToken?: string(name='ClientToken'),
  openPermission?: int32(name='OpenPermission'),
}

model CreateDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroupWithOptions(request: CreateDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostGroupWithOptions(request, runtime);
}

model CreateDedicatedHostUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  userName?: string(name='UserName'),
  userPassword?: string(name='UserPassword'),
  regionId?: string(name='RegionId'),
}

model CreateDedicatedHostUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostUserResponseBody(name='body'),
}

async function createDedicatedHostUserWithOptions(request: CreateDedicatedHostUserRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostUser', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostUser(request: CreateDedicatedHostUserRequest): CreateDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostUserWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateDiagnosticReportResponseBody = {
  reportId?: string(name='ReportId'),
  requestId?: string(name='RequestId'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDiagnosticReport', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model CreateMigrateTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  backupMode?: string(name='BackupMode'),
  isOnlineDB?: string(name='IsOnlineDB'),
  checkDBMode?: string(name='CheckDBMode'),
  ossObjectPositions?: string(name='OssObjectPositions'),
  OSSUrls?: string(name='OSSUrls'),
  migrateTaskId?: string(name='MigrateTaskId'),
}

model CreateMigrateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  DBName?: string(name='DBName'),
  backupMode?: string(name='BackupMode'),
  DBInstanceId?: string(name='DBInstanceId'),
  migrateTaskId?: string(name='MigrateTaskId'),
  taskId?: string(name='TaskId'),
}

model CreateMigrateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrateTaskResponseBody(name='body'),
}

async function createMigrateTaskWithOptions(request: CreateMigrateTaskRequest, runtime: Util.RuntimeOptions): CreateMigrateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMigrateTask', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMigrateTask(request: CreateMigrateTaskRequest): CreateMigrateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrateTaskWithOptions(request, runtime);
}

model CreateMigrateTaskForSQLServerRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  taskType?: string(name='TaskType'),
  isOnlineDB?: string(name='IsOnlineDB'),
  OSSUrls?: string(name='OSSUrls'),
}

model CreateMigrateTaskForSQLServerResponseBody = {
  migrateIaskId?: string(name='MigrateIaskId'),
  taskType?: string(name='TaskType'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  DBName?: string(name='DBName'),
  DBInstanceId?: string(name='DBInstanceId'),
  taskId?: string(name='TaskId'),
}

model CreateMigrateTaskForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrateTaskForSQLServerResponseBody(name='body'),
}

async function createMigrateTaskForSQLServerWithOptions(request: CreateMigrateTaskForSQLServerRequest, runtime: Util.RuntimeOptions): CreateMigrateTaskForSQLServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMigrateTaskForSQLServer', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMigrateTaskForSQLServer(request: CreateMigrateTaskForSQLServerRequest): CreateMigrateTaskForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrateTaskForSQLServerWithOptions(request, runtime);
}

model CreateOnlineDatabaseTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  migrateTaskId?: string(name='MigrateTaskId'),
  checkDBMode?: string(name='CheckDBMode'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateOnlineDatabaseTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateOnlineDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOnlineDatabaseTaskResponseBody(name='body'),
}

async function createOnlineDatabaseTaskWithOptions(request: CreateOnlineDatabaseTaskRequest, runtime: Util.RuntimeOptions): CreateOnlineDatabaseTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOnlineDatabaseTask', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOnlineDatabaseTask(request: CreateOnlineDatabaseTaskRequest): CreateOnlineDatabaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOnlineDatabaseTaskWithOptions(request, runtime);
}

model CreateParameterGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  parameterGroupName?: string(name='ParameterGroupName'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  parameters?: string(name='Parameters'),
  parameterGroupDesc?: string(name='ParameterGroupDesc'),
}

model CreateParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParameterGroupResponseBody(name='body'),
}

async function createParameterGroupWithOptions(request: CreateParameterGroupRequest, runtime: Util.RuntimeOptions): CreateParameterGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateParameterGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createParameterGroup(request: CreateParameterGroupRequest): CreateParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParameterGroupWithOptions(request, runtime);
}

model CreateReadOnlyDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  engineVersion?: string(name='EngineVersion'),
  payType?: string(name='PayType'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  category?: string(name='Category'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster'),
  gdnInstanceName?: string(name='GdnInstanceName'),
  tddlBizType?: string(name='TddlBizType'),
  tddlRegionConfig?: string(name='TddlRegionConfig'),
  instructionSetArch?: string(name='InstructionSetArch'),
  usedTime?: string(name='UsedTime'),
  period?: string(name='Period'),
  autoRenew?: string(name='AutoRenew'),
}

model CreateReadOnlyDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  port?: string(name='Port'),
  connectionString?: string(name='ConnectionString'),
  orderId?: string(name='OrderId'),
}

model CreateReadOnlyDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReadOnlyDBInstanceResponseBody(name='body'),
}

async function createReadOnlyDBInstanceWithOptions(request: CreateReadOnlyDBInstanceRequest, runtime: Util.RuntimeOptions): CreateReadOnlyDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateReadOnlyDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createReadOnlyDBInstance(request: CreateReadOnlyDBInstanceRequest): CreateReadOnlyDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReadOnlyDBInstanceWithOptions(request, runtime);
}

model CreateTempDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: int32(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateTempDBInstanceResponseBody = {
  tempDBInstanceId?: string(name='TempDBInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateTempDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTempDBInstanceResponseBody(name='body'),
}

async function createTempDBInstanceWithOptions(request: CreateTempDBInstanceRequest, runtime: Util.RuntimeOptions): CreateTempDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTempDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTempDBInstance(request: CreateTempDBInstanceRequest): CreateTempDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTempDBInstanceWithOptions(request, runtime);
}

model DeleteAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteBackupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteBackupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupResponseBody(name='body'),
}

async function deleteBackupWithOptions(request: DeleteBackupRequest, runtime: Util.RuntimeOptions): DeleteBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupWithOptions(request, runtime);
}

model DeleteBackupFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  DBName?: string(name='DBName'),
  backupTime?: string(name='BackupTime'),
}

model DeleteBackupFileResponseBody = {
  requestId?: string(name='RequestId'),
  deletedBaksetIds?: {
    deletedBaksetIds?: [ int32 ](name='DeletedBaksetIds')
  }(name='DeletedBaksetIds'),
}

model DeleteBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupFileResponseBody(name='body'),
}

async function deleteBackupFileWithOptions(request: DeleteBackupFileRequest, runtime: Util.RuntimeOptions): DeleteBackupFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackupFile', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackupFile(request: DeleteBackupFileRequest): DeleteBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupFileWithOptions(request, runtime);
}

model DeleteDatabaseRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDatabase', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy'),
}

model DeleteDBInstanceResponseBody = {
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDBProxyEndpointAddressRequest {
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType'),
}

model DeleteDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBProxyEndpointAddressResponseBody(name='body'),
}

async function deleteDBProxyEndpointAddressWithOptions(request: DeleteDBProxyEndpointAddressRequest, runtime: Util.RuntimeOptions): DeleteDBProxyEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBProxyEndpointAddress', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBProxyEndpointAddress(request: DeleteDBProxyEndpointAddressRequest): DeleteDBProxyEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBProxyEndpointAddressWithOptions(request, runtime);
}

model DeleteDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  regionId?: string(name='RegionId'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccountWithOptions(request: DeleteDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedHostAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroupWithOptions(request: DeleteDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedHostGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostGroupWithOptions(request, runtime);
}

model DeleteParameterGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  parameterGroupId?: string(name='ParameterGroupId'),
}

model DeleteParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId'),
  requestId?: string(name='RequestId'),
}

model DeleteParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParameterGroupResponseBody(name='body'),
}

async function deleteParameterGroupWithOptions(request: DeleteParameterGroupRequest, runtime: Util.RuntimeOptions): DeleteParameterGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteParameterGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteParameterGroup(request: DeleteParameterGroupRequest): DeleteParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParameterGroupWithOptions(request, runtime);
}

model DeleteUserBackupFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  backupId?: string(name='BackupId'),
  regionId?: string(name='RegionId'),
}

model DeleteUserBackupFileResponseBody = {
  backupId?: string(name='BackupId'),
  requestId?: string(name='RequestId'),
}

model DeleteUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserBackupFileResponseBody(name='body'),
}

async function deleteUserBackupFileWithOptions(request: DeleteUserBackupFileRequest, runtime: Util.RuntimeOptions): DeleteUserBackupFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserBackupFile', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserBackupFile(request: DeleteUserBackupFileRequest): DeleteUserBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserBackupFileWithOptions(request, runtime);
}

model DescibeImportsFromDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  importId?: int32(name='ImportId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescibeImportsFromDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    importResultFromDB?: [ 
    {
      incrementalImportingTime?: string(name='IncrementalImportingTime'),
      importId?: int32(name='ImportId'),
      importDataStatus?: string(name='ImportDataStatus'),
      importDataType?: string(name='ImportDataType'),
      importDataStatusDescription?: string(name='ImportDataStatusDescription'),
    }
  ](name='ImportResultFromDB')
  }(name='Items'),
}

model DescibeImportsFromDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DescibeImportsFromDatabaseResponseBody(name='body'),
}

async function descibeImportsFromDatabaseWithOptions(request: DescibeImportsFromDatabaseRequest, runtime: Util.RuntimeOptions): DescibeImportsFromDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescibeImportsFromDatabase', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function descibeImportsFromDatabase(request: DescibeImportsFromDatabaseRequest): DescibeImportsFromDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return descibeImportsFromDatabaseWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAccountsResponseBody = {
  systemAdminAccountStatus?: string(name='SystemAdminAccountStatus'),
  systemAdminAccountFirstActivationTime?: string(name='SystemAdminAccountFirstActivationTime'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountStatus?: string(name='AccountStatus'),
      accountDescription?: string(name='AccountDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      privExceeded?: string(name='PrivExceeded'),
      accountType?: string(name='AccountType'),
      accountName?: string(name='AccountName'),
      databasePrivileges?: {
        databasePrivilege?: [ 
        {
          DBName?: string(name='DBName'),
          accountPrivilege?: string(name='AccountPrivilege'),
          accountPrivilegeDetail?: string(name='AccountPrivilegeDetail'),
        }
      ](name='DatabasePrivilege')
      }(name='DatabasePrivileges'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeActionEventPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeActionEventPolicyResponseBody = {
  enableEventLog?: string(name='EnableEventLog'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model DescribeActionEventPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActionEventPolicyResponseBody(name='body'),
}

async function describeActionEventPolicyWithOptions(request: DescribeActionEventPolicyRequest, runtime: Util.RuntimeOptions): DescribeActionEventPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActionEventPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActionEventPolicy(request: DescribeActionEventPolicyRequest): DescribeActionEventPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActionEventPolicyWithOptions(request, runtime);
}

model DescribeAvailableClassesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderType?: string(name='OrderType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  category?: string(name='Category'),
  commodityCode?: string(name='CommodityCode'),
}

model DescribeAvailableClassesResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceClasses?: [ 
    {
      DBInstanceClass?: string(name='DBInstanceClass'),
      DBInstanceStorageRange?: {
        step?: int32(name='Step'),
        minValue?: int32(name='MinValue'),
        maxValue?: int32(name='MaxValue'),
      }(name='DBInstanceStorageRange'),
    }
  ](name='DBInstanceClasses'),
}

model DescribeAvailableClassesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableClassesResponseBody(name='body'),
}

async function describeAvailableClassesWithOptions(request: DescribeAvailableClassesRequest, runtime: Util.RuntimeOptions): DescribeAvailableClassesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableClasses', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableClasses(request: DescribeAvailableClassesRequest): DescribeAvailableClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableClassesWithOptions(request, runtime);
}

model DescribeAvailableCrossRegionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeAvailableCrossRegionResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ string ](name='Region')
  }(name='Regions'),
}

model DescribeAvailableCrossRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableCrossRegionResponseBody(name='body'),
}

async function describeAvailableCrossRegionWithOptions(request: DescribeAvailableCrossRegionRequest, runtime: Util.RuntimeOptions): DescribeAvailableCrossRegionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableCrossRegion', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableCrossRegion(request: DescribeAvailableCrossRegionRequest): DescribeAvailableCrossRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableCrossRegionWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostClassesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  storageType?: string(name='StorageType'),
}

model DescribeAvailableDedicatedHostClassesResponseBody = {
  requestId?: string(name='RequestId'),
  hostClasses?: {
    hostClasses?: [ 
    {
      description?: string(name='Description'),
      hostClassName?: string(name='HostClassName'),
    }
  ](name='HostClasses')
  }(name='HostClasses'),
}

model DescribeAvailableDedicatedHostClassesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableDedicatedHostClassesResponseBody(name='body'),
}

async function describeAvailableDedicatedHostClassesWithOptions(request: DescribeAvailableDedicatedHostClassesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostClassesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableDedicatedHostClasses', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableDedicatedHostClasses(request: DescribeAvailableDedicatedHostClassesRequest): DescribeAvailableDedicatedHostClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostClassesWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostZonesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeAvailableDedicatedHostZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    dedicatedHostZones?: [ 
    {
      description?: string(name='Description'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedHostZones')
  }(name='Zones'),
}

model DescribeAvailableDedicatedHostZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableDedicatedHostZonesResponseBody(name='body'),
}

async function describeAvailableDedicatedHostZonesWithOptions(request: DescribeAvailableDedicatedHostZonesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableDedicatedHostZones', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableDedicatedHostZones(request: DescribeAvailableDedicatedHostZonesRequest): DescribeAvailableDedicatedHostZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostZonesWithOptions(request, runtime);
}

model DescribeAvailableMetricsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeAvailableMetricsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  requestId?: string(name='RequestId'),
  items?: [ 
    {
      groupKey?: string(name='GroupKey'),
      sortRule?: int32(name='SortRule'),
      description?: string(name='Description'),
      unit?: string(name='Unit'),
      metricsKey?: string(name='MetricsKey'),
      groupKeyType?: string(name='GroupKeyType'),
      metricsKeyAlias?: string(name='MetricsKeyAlias'),
      method?: string(name='Method'),
      dimension?: string(name='Dimension'),
    }
  ](name='Items'),
}

model DescribeAvailableMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableMetricsResponseBody(name='body'),
}

async function describeAvailableMetricsWithOptions(request: DescribeAvailableMetricsRequest, runtime: Util.RuntimeOptions): DescribeAvailableMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableMetrics', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableMetrics(request: DescribeAvailableMetricsRequest): DescribeAvailableMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableMetricsWithOptions(request, runtime);
}

model DescribeAvailableRecoveryTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  crossBackupId?: int32(name='CrossBackupId'),
  regionId?: string(name='RegionId'),
}

model DescribeAvailableRecoveryTimeResponseBody = {
  recoveryEndTime?: string(name='RecoveryEndTime'),
  requestId?: string(name='RequestId'),
  crossBackupId?: int32(name='CrossBackupId'),
  recoveryBeginTime?: string(name='RecoveryBeginTime'),
  regionId?: string(name='RegionId'),
}

model DescribeAvailableRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableRecoveryTimeResponseBody(name='body'),
}

async function describeAvailableRecoveryTimeWithOptions(request: DescribeAvailableRecoveryTimeRequest, runtime: Util.RuntimeOptions): DescribeAvailableRecoveryTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableRecoveryTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableRecoveryTime(request: DescribeAvailableRecoveryTimeRequest): DescribeAvailableRecoveryTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableRecoveryTimeWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  orderType?: string(name='OrderType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  category?: string(name='Category'),
  dispenseMode?: int32(name='DispenseMode'),
}

model DescribeAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: {
    availableZone?: [ 
    {
      zoneId?: string(name='ZoneId'),
      status?: string(name='Status'),
      regionId?: string(name='RegionId'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine'),
          supportedEngineVersions?: {
            supportedEngineVersion?: [ 
            {
              version?: string(name='Version'),
              supportedCategorys?: {
                supportedCategory?: [ 
                {
                  category?: string(name='Category'),
                  supportedStorageTypes?: {
                    supportedStorageType?: [ 
                    {
                      storageType?: string(name='StorageType'),
                      availableResources?: {
                        availableResource?: [ 
                        {
                          storageRange?: string(name='StorageRange'),
                          DBInstanceClass?: string(name='DBInstanceClass'),
                          DBInstanceStorageRange?: {
                            step?: int32(name='Step'),
                            max?: int32(name='Max'),
                            min?: int32(name='Min'),
                          }(name='DBInstanceStorageRange'),
                        }
                      ](name='AvailableResource')
                      }(name='AvailableResources'),
                    }
                  ](name='SupportedStorageType')
                  }(name='SupportedStorageTypes'),
                }
              ](name='SupportedCategory')
              }(name='SupportedCategorys'),
            }
          ](name='SupportedEngineVersion')
          }(name='SupportedEngineVersions'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeAvailableZonesRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
  engineVersion?: string(name='EngineVersion'),
  commodityCode?: string(name='CommodityCode'),
  dispenseMode?: string(name='DispenseMode'),
  DBInstanceName?: string(name='DBInstanceName'),
  category?: string(name='Category'),
}

model DescribeAvailableZonesResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: [ 
    {
      zoneId?: string(name='ZoneId'),
      regionId?: string(name='RegionId'),
      supportedEngines?: [ 
        {
          engine?: string(name='Engine'),
          supportedEngineVersions?: [ 
            {
              version?: string(name='Version'),
              supportedCategorys?: [ 
                {
                  category?: string(name='Category'),
                  supportedStorageTypes?: [ 
                    {
                      storageType?: string(name='StorageType'),
                    }
                  ](name='SupportedStorageTypes'),
                }
              ](name='SupportedCategorys'),
            }
          ](name='SupportedEngineVersions'),
        }
      ](name='SupportedEngines'),
    }
  ](name='AvailableZones'),
}

model DescribeAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableZonesResponseBody(name='body'),
}

async function describeAvailableZonesWithOptions(request: DescribeAvailableZonesRequest, runtime: Util.RuntimeOptions): DescribeAvailableZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableZones', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableZones(request: DescribeAvailableZonesRequest): DescribeAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableZonesWithOptions(request, runtime);
}

model DescribeBackupDatabaseRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
}

model DescribeBackupDatabaseResponseBody = {
  databaseNames?: string(name='DatabaseNames'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupDatabaseResponseBody(name='body'),
}

async function describeBackupDatabaseWithOptions(request: DescribeBackupDatabaseRequest, runtime: Util.RuntimeOptions): DescribeBackupDatabaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupDatabase', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupDatabase(request: DescribeBackupDatabaseRequest): DescribeBackupDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDatabaseWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupPolicyMode?: string(name='BackupPolicyMode'),
  ownerAccount?: string(name='OwnerAccount'),
  compressType?: string(name='CompressType'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy'),
}

model DescribeBackupPolicyResponseBody = {
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  archiveBackupKeepPolicy?: string(name='ArchiveBackupKeepPolicy'),
  archiveBackupKeepCount?: string(name='ArchiveBackupKeepCount'),
  localLogRetentionHours?: int32(name='LocalLogRetentionHours'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  compressType?: string(name='CompressType'),
  supportReleasedKeep?: int32(name='SupportReleasedKeep'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
  supportVolumeShadowCopy?: int32(name='SupportVolumeShadowCopy'),
  backupMethod?: string(name='BackupMethod'),
  logBackupFrequency?: string(name='LogBackupFrequency'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
  archiveBackupRetentionPeriod?: string(name='ArchiveBackupRetentionPeriod'),
  backupInterval?: string(name='BackupInterval'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber'),
  category?: string(name='Category'),
  enableBackupLog?: string(name='EnableBackupLog'),
  backupLog?: string(name='BackupLog'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  backupStatus?: string(name='BackupStatus'),
  backupMode?: string(name='BackupMode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupsResponseBody = {
  requestId?: string(name='RequestId'),
  totalEcsSnapshotSize?: long(name='TotalEcsSnapshotSize'),
  pageRecordCount?: string(name='PageRecordCount'),
  totalRecordCount?: string(name='TotalRecordCount'),
  pageNumber?: string(name='PageNumber'),
  items?: {
    backup?: [ 
    {
      storageClass?: string(name='StorageClass'),
      encryption?: string(name='Encryption'),
      backupStatus?: string(name='BackupStatus'),
      storeStatus?: string(name='StoreStatus'),
      consistentTime?: long(name='ConsistentTime'),
      backupType?: string(name='BackupType'),
      copyOnlyBackup?: string(name='CopyOnlyBackup'),
      backupEndTime?: string(name='BackupEndTime'),
      metaStatus?: string(name='MetaStatus'),
      backupInitiator?: string(name='BackupInitiator'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL'),
      backupMethod?: string(name='BackupMethod'),
      backupStartTime?: string(name='BackupStartTime'),
      backupDownloadURL?: string(name='BackupDownloadURL'),
      isAvail?: int32(name='IsAvail'),
      backupId?: string(name='BackupId'),
      hostInstanceID?: string(name='HostInstanceID'),
      backupSize?: long(name='BackupSize'),
      backupMode?: string(name='BackupMode'),
      DBInstanceId?: string(name='DBInstanceId'),
      backupDownloadLinkByDB?: {
        backupDownloadLinkByDB?: [ 
        {
          intranetDownloadLink?: string(name='IntranetDownloadLink'),
          dataBase?: string(name='DataBase'),
          downloadLink?: string(name='DownloadLink'),
        }
      ](name='BackupDownloadLinkByDB')
      }(name='BackupDownloadLinkByDB'),
    }
  ](name='Backup')
  }(name='Items'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeBackupTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  flag?: string(name='Flag'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupJobId?: int32(name='BackupJobId'),
  backupMode?: string(name='BackupMode'),
  backupJobStatus?: string(name='BackupJobStatus'),
}

model DescribeBackupTasksResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    backupJob?: [ 
    {
      process?: string(name='Process'),
      backupJobId?: string(name='BackupJobId'),
      backupStatus?: string(name='BackupStatus'),
      jobMode?: string(name='JobMode'),
      backupProgressStatus?: string(name='BackupProgressStatus'),
      backupId?: string(name='BackupId'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='BackupJob')
  }(name='Items'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: Util.RuntimeOptions): DescribeBackupTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupTasks', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTasksWithOptions(request, runtime);
}

model DescribeBinlogFilesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeBinlogFilesResponseBody = {
  totalFileSize?: long(name='TotalFileSize'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    binLogFile?: [ 
    {
      remoteStatus?: string(name='RemoteStatus'),
      intranetDownloadLink?: string(name='IntranetDownloadLink'),
      logBeginTime?: string(name='LogBeginTime'),
      linkExpiredTime?: string(name='LinkExpiredTime'),
      downloadLink?: string(name='DownloadLink'),
      logFileName?: string(name='LogFileName'),
      checksum?: string(name='Checksum'),
      logEndTime?: string(name='LogEndTime'),
      hostInstanceID?: string(name='HostInstanceID'),
      fileSize?: long(name='FileSize'),
    }
  ](name='BinLogFile')
  }(name='Items'),
}

model DescribeBinlogFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBinlogFilesResponseBody(name='body'),
}

async function describeBinlogFilesWithOptions(request: DescribeBinlogFilesRequest, runtime: Util.RuntimeOptions): DescribeBinlogFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBinlogFiles', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBinlogFiles(request: DescribeBinlogFilesRequest): DescribeBinlogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBinlogFilesWithOptions(request, runtime);
}

model DescribeCharacterSetNameRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  engine?: string(name='Engine'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeCharacterSetNameResponseBody = {
  engine?: string(name='Engine'),
  requestId?: string(name='RequestId'),
  characterSetNameItems?: {
    characterSetName?: [ string ](name='CharacterSetName')
  }(name='CharacterSetNameItems'),
}

model DescribeCharacterSetNameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetNameResponseBody(name='body'),
}

async function describeCharacterSetNameWithOptions(request: DescribeCharacterSetNameRequest, runtime: Util.RuntimeOptions): DescribeCharacterSetNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCharacterSetName', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCharacterSetName(request: DescribeCharacterSetNameRequest): DescribeCharacterSetNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCharacterSetNameWithOptions(request, runtime);
}

model DescribeCollationTimeZonesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCollationTimeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  collationTimeZones?: {
    collationTimeZone?: [ 
    {
      timeZone?: string(name='TimeZone'),
      standardTimeOffset?: string(name='StandardTimeOffset'),
      description?: string(name='Description'),
    }
  ](name='CollationTimeZone')
  }(name='CollationTimeZones'),
}

model DescribeCollationTimeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCollationTimeZonesResponseBody(name='body'),
}

async function describeCollationTimeZonesWithOptions(request: DescribeCollationTimeZonesRequest, runtime: Util.RuntimeOptions): DescribeCollationTimeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCollationTimeZones', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCollationTimeZones(request: DescribeCollationTimeZonesRequest): DescribeCollationTimeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCollationTimeZonesWithOptions(request, runtime);
}

model DescribeCrossBackupMetaListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  backupSetId?: string(name='BackupSetId'),
  getDbName?: string(name='GetDbName'),
  pattern?: string(name='Pattern'),
  pageSize?: string(name='PageSize'),
  pageIndex?: string(name='PageIndex'),
  region?: string(name='Region'),
}

model DescribeCrossBackupMetaListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  totalPageCount?: int32(name='TotalPageCount'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    meta?: [ 
    {
      tables?: string(name='Tables'),
      database?: string(name='Database'),
      size?: string(name='Size'),
    }
  ](name='Meta')
  }(name='Items'),
}

model DescribeCrossBackupMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossBackupMetaListResponseBody(name='body'),
}

async function describeCrossBackupMetaListWithOptions(request: DescribeCrossBackupMetaListRequest, runtime: Util.RuntimeOptions): DescribeCrossBackupMetaListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCrossBackupMetaList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCrossBackupMetaList(request: DescribeCrossBackupMetaListRequest): DescribeCrossBackupMetaListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossBackupMetaListWithOptions(request, runtime);
}

model DescribeCrossRegionBackupDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeCrossRegionBackupDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  totalRecords?: int32(name='TotalRecords'),
  itemsNumbers?: int32(name='ItemsNumbers'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
  items?: {
    item?: [ 
    {
      logBackupEnabledTime?: string(name='LogBackupEnabledTime'),
      backupEnabled?: string(name='BackupEnabled'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      logBackupEnabled?: string(name='LogBackupEnabled'),
      retentType?: int32(name='RetentType'),
      retention?: int32(name='Retention'),
      crossBackupType?: string(name='CrossBackupType'),
      crossBackupRegion?: string(name='CrossBackupRegion'),
      DBInstanceId?: string(name='DBInstanceId'),
      engine?: string(name='Engine'),
      backupEnabledTime?: string(name='BackupEnabledTime'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeCrossRegionBackupDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionBackupDBInstanceResponseBody(name='body'),
}

async function describeCrossRegionBackupDBInstanceWithOptions(request: DescribeCrossRegionBackupDBInstanceRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionBackupDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCrossRegionBackupDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCrossRegionBackupDBInstance(request: DescribeCrossRegionBackupDBInstanceRequest): DescribeCrossRegionBackupDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionBackupDBInstanceWithOptions(request, runtime);
}

model DescribeCrossRegionBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
  crossBackupRegion?: string(name='CrossBackupRegion'),
  crossBackupId?: int32(name='CrossBackupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  backupId?: int32(name='BackupId'),
}

model DescribeCrossRegionBackupsResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
  items?: {
    item?: [ 
    {
      consistentTime?: string(name='ConsistentTime'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType'),
      crossBackupId?: int32(name='CrossBackupId'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      crossBackupSetLocation?: string(name='CrossBackupSetLocation'),
      instanceId?: int32(name='InstanceId'),
      crossBackupDownloadLink?: string(name='CrossBackupDownloadLink'),
      backupEndTime?: string(name='BackupEndTime'),
      engineVersion?: string(name='EngineVersion'),
      backupSetStatus?: int32(name='BackupSetStatus'),
      crossBackupSetFile?: string(name='CrossBackupSetFile'),
      backupSetScale?: int32(name='BackupSetScale'),
      crossBackupSetSize?: long(name='CrossBackupSetSize'),
      crossBackupRegion?: string(name='CrossBackupRegion'),
      category?: string(name='Category'),
      engine?: string(name='Engine'),
      backupMethod?: string(name='BackupMethod'),
      restoreRegions?: {
        restoreRegion?: [ string ](name='RestoreRegion')
      }(name='RestoreRegions'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeCrossRegionBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionBackupsResponseBody(name='body'),
}

async function describeCrossRegionBackupsWithOptions(request: DescribeCrossRegionBackupsRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCrossRegionBackups', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCrossRegionBackups(request: DescribeCrossRegionBackupsRequest): DescribeCrossRegionBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionBackupsWithOptions(request, runtime);
}

model DescribeCrossRegionLogBackupFilesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
  crossBackupRegion?: string(name='CrossBackupRegion'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeCrossRegionLogBackupFilesResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
  items?: {
    item?: [ 
    {
      logBeginTime?: string(name='LogBeginTime'),
      linkExpiredTime?: string(name='LinkExpiredTime'),
      crossIntranetDownloadLink?: string(name='CrossIntranetDownloadLink'),
      logFileName?: string(name='LogFileName'),
      crossBackupRegion?: string(name='CrossBackupRegion'),
      crossDownloadLink?: string(name='CrossDownloadLink'),
      crossLogBackupSize?: long(name='CrossLogBackupSize'),
      instanceId?: int32(name='InstanceId'),
      crossLogBackupId?: int32(name='CrossLogBackupId'),
      logEndTime?: string(name='LogEndTime'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeCrossRegionLogBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossRegionLogBackupFilesResponseBody(name='body'),
}

async function describeCrossRegionLogBackupFilesWithOptions(request: DescribeCrossRegionLogBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionLogBackupFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCrossRegionLogBackupFiles', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCrossRegionLogBackupFiles(request: DescribeCrossRegionLogBackupFilesRequest): DescribeCrossRegionLogBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionLogBackupFilesWithOptions(request, runtime);
}

model DescribeDatabasesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  DBStatus?: string(name='DBStatus'),
  ownerAccount?: string(name='OwnerAccount'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDatabasesResponseBody = {
  requestId?: string(name='RequestId'),
  databases?: {
    database?: [ 
    {
      DBDescription?: string(name='DBDescription'),
      DBStatus?: string(name='DBStatus'),
      DBName?: string(name='DBName'),
      DBInstanceId?: string(name='DBInstanceId'),
      engine?: string(name='Engine'),
      characterSetName?: string(name='CharacterSetName'),
      accounts?: {
        accountPrivilegeInfo?: [ 
        {
          account?: string(name='Account'),
          accountPrivilege?: string(name='AccountPrivilege'),
          accountPrivilegeDetail?: string(name='AccountPrivilegeDetail'),
        }
      ](name='AccountPrivilegeInfo')
      }(name='Accounts'),
    }
  ](name='Database')
  }(name='Databases'),
}

model DescribeDatabasesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabasesResponseBody(name='body'),
}

async function describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: Util.RuntimeOptions): DescribeDatabasesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDatabases', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabasesWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  expired?: string(name='Expired'),
}

model DescribeDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBInstanceAttribute?: [ 
    {
      vpcId?: string(name='VpcId'),
      creationTime?: string(name='CreationTime'),
      incrementSourceDBInstanceId?: string(name='IncrementSourceDBInstanceId'),
      maintainTime?: string(name='MaintainTime'),
      payType?: string(name='PayType'),
      availabilityValue?: string(name='AvailabilityValue'),
      engineVersion?: string(name='EngineVersion'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      connectionString?: string(name='ConnectionString'),
      superPermissionMode?: string(name='SuperPermissionMode'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      masterInstanceId?: string(name='MasterInstanceId'),
      autoUpgradeMinorVersion?: string(name='AutoUpgradeMinorVersion'),
      expireTime?: string(name='ExpireTime'),
      accountMaxQuantity?: int32(name='AccountMaxQuantity'),
      masterZone?: string(name='MasterZone'),
      guardDBInstanceId?: string(name='GuardDBInstanceId'),
      DBInstanceStorage?: int32(name='DBInstanceStorage'),
      timeZone?: string(name='TimeZone'),
      latestKernelVersion?: string(name='LatestKernelVersion'),
      tipsLevel?: int32(name='TipsLevel'),
      zoneId?: string(name='ZoneId'),
      maxConnections?: int32(name='MaxConnections'),
      DBInstanceId?: string(name='DBInstanceId'),
      tempDBInstanceId?: string(name='TempDBInstanceId'),
      advancedFeatures?: string(name='AdvancedFeatures'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      consoleVersion?: string(name='ConsoleVersion'),
      connectionMode?: string(name='ConnectionMode'),
      port?: string(name='Port'),
      lockMode?: string(name='LockMode'),
      generalGroupName?: string(name='GeneralGroupName'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      collation?: string(name='Collation'),
      maxIOPS?: int32(name='MaxIOPS'),
      tips?: string(name='Tips'),
      securityIPMode?: string(name='SecurityIPMode'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      proxyType?: int32(name='ProxyType'),
      currentKernelVersion?: string(name='CurrentKernelVersion'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceCPU?: string(name='DBInstanceCPU'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceType?: string(name='DBInstanceType'),
      lockReason?: string(name='LockReason'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBMaxQuantity?: int32(name='DBMaxQuantity'),
      regionId?: string(name='RegionId'),
      readonlyInstanceSQLDelayedTime?: string(name='ReadonlyInstanceSQLDelayedTime'),
      vSwitchId?: string(name='VSwitchId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      category?: string(name='Category'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      engine?: string(name='Engine'),
      slaveZones?: {
        slaveZone?: [ 
        {
          zoneId?: string(name='ZoneId'),
        }
      ](name='SlaveZone')
      }(name='SlaveZones'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
      extra?: {
        DBInstanceIds?: {
          DBInstanceId?: [ string ](name='DBInstanceId')
        }(name='DBInstanceIds'),
      }(name='Extra'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceDetailResponseBody = {
  activationState?: string(name='ActivationState'),
  DBInstanceId?: string(name='DBInstanceId'),
  licenseType?: string(name='LicenseType'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model DescribeDBInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceDetailResponseBody(name='body'),
}

async function describeDBInstanceDetailWithOptions(request: DescribeDBInstanceDetailRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceDetail', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceDetail(request: DescribeDBInstanceDetailRequest): DescribeDBInstanceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDetailWithOptions(request, runtime);
}

model DescribeDBInstanceEncryptionKeyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  encryptionKey?: string(name='EncryptionKey'),
  targetRegionId?: string(name='TargetRegionId'),
}

model DescribeDBInstanceEncryptionKeyResponseBody = {
  deleteDate?: string(name='DeleteDate'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  origin?: string(name='Origin'),
  materialExpireTime?: string(name='MaterialExpireTime'),
  encryptionKeyStatus?: string(name='EncryptionKeyStatus'),
  keyUsage?: string(name='KeyUsage'),
  encryptionKey?: string(name='EncryptionKey'),
  creator?: string(name='Creator'),
}

model DescribeDBInstanceEncryptionKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceEncryptionKeyResponseBody(name='body'),
}

async function describeDBInstanceEncryptionKeyWithOptions(request: DescribeDBInstanceEncryptionKeyRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceEncryptionKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceEncryptionKey', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceEncryptionKey(request: DescribeDBInstanceEncryptionKeyRequest): DescribeDBInstanceEncryptionKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceEncryptionKeyWithOptions(request, runtime);
}

model DescribeDBInstanceHAConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstanceHAConfigResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  HAMode?: string(name='HAMode'),
  syncMode?: string(name='SyncMode'),
  hostInstanceInfos?: {
    nodeInfo?: [ 
    {
      logSyncTime?: string(name='LogSyncTime'),
      nodeType?: string(name='NodeType'),
      zoneId?: string(name='ZoneId'),
      syncStatus?: string(name='SyncStatus'),
      dataSyncTime?: string(name='DataSyncTime'),
      nodeId?: string(name='NodeId'),
      regionId?: string(name='RegionId'),
    }
  ](name='NodeInfo')
  }(name='HostInstanceInfos'),
}

model DescribeDBInstanceHAConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceHAConfigResponseBody(name='body'),
}

async function describeDBInstanceHAConfigWithOptions(request: DescribeDBInstanceHAConfigRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceHAConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceHAConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceHAConfig(request: DescribeDBInstanceHAConfigRequest): DescribeDBInstanceHAConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceHAConfigWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  whitelistNetworkType?: string(name='WhitelistNetworkType'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName'),
      securityIPType?: string(name='SecurityIPType'),
      securityIPList?: string(name='SecurityIPList'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceIPArrayList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeDBInstanceIpHostnameRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDBInstanceIpHostnameResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  ipHostnameInfos?: string(name='IpHostnameInfos'),
}

model DescribeDBInstanceIpHostnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIpHostnameResponseBody(name='body'),
}

async function describeDBInstanceIpHostnameWithOptions(request: DescribeDBInstanceIpHostnameRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIpHostnameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceIpHostname', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceIpHostname(request: DescribeDBInstanceIpHostnameRequest): DescribeDBInstanceIpHostnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIpHostnameWithOptions(request, runtime);
}

model DescribeDBInstanceMetricsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeDBInstanceMetricsResponseBody = {
  totalRecordCount?: int32(name='TotalRecordCount'),
  requestId?: string(name='RequestId'),
  items?: [ 
    {
      groupKey?: string(name='GroupKey'),
      sortRule?: int32(name='SortRule'),
      description?: string(name='Description'),
      unit?: string(name='Unit'),
      metricsKey?: string(name='MetricsKey'),
      groupKeyType?: string(name='GroupKeyType'),
      method?: string(name='Method'),
      dimension?: string(name='Dimension'),
      metricsKeyAlias?: string(name='MetricsKeyAlias'),
    }
  ](name='Items'),
}

model DescribeDBInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceMetricsResponseBody(name='body'),
}

async function describeDBInstanceMetricsWithOptions(request: DescribeDBInstanceMetricsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceMetrics', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceMetrics(request: DescribeDBInstanceMetricsRequest): DescribeDBInstanceMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceMetricsWithOptions(request, runtime);
}

model DescribeDBInstanceMonitorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstanceMonitorResponseBody = {
  period?: string(name='Period'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceMonitorResponseBody(name='body'),
}

async function describeDBInstanceMonitorWithOptions(request: DescribeDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceMonitor', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceMonitor(request: DescribeDBInstanceMonitorRequest): DescribeDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceMonitorWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  flag?: int32(name='Flag'),
  DBInstanceNetRWSplitType?: string(name='DBInstanceNetRWSplitType'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  securityIPMode?: string(name='SecurityIPMode'),
  requestId?: string(name='RequestId'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      connectionStringType?: string(name='ConnectionStringType'),
      connectionString?: string(name='ConnectionString'),
      expiredTime?: string(name='ExpiredTime'),
      upgradeable?: string(name='Upgradeable'),
      maxDelayTime?: string(name='MaxDelayTime'),
      IPType?: string(name='IPType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      distributionType?: string(name='DistributionType'),
      IPAddress?: string(name='IPAddress'),
      securityIPGroups?: {
        securityIPGroup?: [ 
        {
          securityIPs?: string(name='SecurityIPs'),
          securityIPGroupName?: string(name='SecurityIPGroupName'),
        }
      ](name='securityIPGroup')
      }(name='SecurityIPGroups'),
      DBInstanceWeights?: {
        DBInstanceWeight?: [ 
        {
          availability?: string(name='Availability'),
          weight?: string(name='Weight'),
          DBInstanceId?: string(name='DBInstanceId'),
          role?: string(name='Role'),
          DBInstanceType?: string(name='DBInstanceType'),
        }
      ](name='DBInstanceWeight')
      }(name='DBInstanceWeights'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceNetInfo', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  key?: string(name='Key'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDBInstancePerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  requestId?: string(name='RequestId'),
  performanceKeys?: {
    performanceKey?: [ 
    {
      key?: string(name='Key'),
      valueFormat?: string(name='ValueFormat'),
      unit?: string(name='Unit'),
      values?: {
        performanceValue?: [ 
        {
          date?: string(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PerformanceKey')
  }(name='PerformanceKeys'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancePerformance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceProxyConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceProxyConfigurationResponseBody = {
  persistentConnectionsConfiguration?: string(name='PersistentConnectionsConfiguration'),
  attacksProtectionConfiguration?: string(name='AttacksProtectionConfiguration'),
  requestId?: string(name='RequestId'),
  transparentSwitchConfiguration?: string(name='TransparentSwitchConfiguration'),
}

model DescribeDBInstanceProxyConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceProxyConfigurationResponseBody(name='body'),
}

async function describeDBInstanceProxyConfigurationWithOptions(request: DescribeDBInstanceProxyConfigurationRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceProxyConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceProxyConfiguration', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceProxyConfiguration(request: DescribeDBInstanceProxyConfigurationRequest): DescribeDBInstanceProxyConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceProxyConfigurationWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  DBInstanceStatus?: string(name='DBInstanceStatus'),
  expired?: string(name='Expired'),
  searchKey?: string(name='SearchKey'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceType?: string(name='DBInstanceType'),
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  engineVersion?: string(name='EngineVersion'),
  payType?: string(name='PayType'),
  connectionMode?: string(name='ConnectionMode'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  instanceLevel?: int32(name='InstanceLevel'),
  connectionString?: string(name='ConnectionString'),
}

model DescribeDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    DBInstance?: [ 
    {
      vpcId?: string(name='VpcId'),
      dedicatedHostIdForLog?: string(name='DedicatedHostIdForLog'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      dedicatedHostNameForLog?: string(name='DedicatedHostNameForLog'),
      mutriORsignle?: boolean(name='MutriORsignle'),
      dedicatedHostGroupName?: string(name='DedicatedHostGroupName'),
      engineVersion?: string(name='EngineVersion'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      vpcName?: string(name='VpcName'),
      dedicatedHostZoneIdForMaster?: string(name='DedicatedHostZoneIdForMaster'),
      connectionString?: string(name='ConnectionString'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      masterInstanceId?: string(name='MasterInstanceId'),
      autoUpgradeMinorVersion?: string(name='AutoUpgradeMinorVersion'),
      expireTime?: string(name='ExpireTime'),
      destroyTime?: string(name='DestroyTime'),
      guardDBInstanceId?: string(name='GuardDBInstanceId'),
      dedicatedHostNameForMaster?: string(name='DedicatedHostNameForMaster'),
      zoneId?: string(name='ZoneId'),
      tipsLevel?: int32(name='TipsLevel'),
      DBInstanceId?: string(name='DBInstanceId'),
      dedicatedHostIdForMaster?: string(name='DedicatedHostIdForMaster'),
      tempDBInstanceId?: string(name='TempDBInstanceId'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType'),
      connectionMode?: string(name='ConnectionMode'),
      lockMode?: string(name='LockMode'),
      generalGroupName?: string(name='GeneralGroupName'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      dedicatedHostZoneIdForSlave?: string(name='DedicatedHostZoneIdForSlave'),
      tips?: string(name='Tips'),
      dedicatedHostZoneIdForLog?: string(name='DedicatedHostZoneIdForLog'),
      dedicatedHostNameForSlave?: string(name='DedicatedHostNameForSlave'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceType?: string(name='DBInstanceType'),
      lockReason?: string(name='LockReason'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      regionId?: string(name='RegionId'),
      vSwitchId?: string(name='VSwitchId'),
      dedicatedHostIdForSlave?: string(name='DedicatedHostIdForSlave'),
      resourceGroupId?: string(name='ResourceGroupId'),
      category?: string(name='Category'),
      engine?: string(name='Engine'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      switchWeight?: int32(name='SwitchWeight'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
    }
  ](name='DBInstance')
  }(name='Items'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstances', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBInstancesAsCsvRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstancesAsCsvResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    DBInstanceAttribute?: [ 
    {
      vpcId?: string(name='VpcId'),
      creationTime?: string(name='CreationTime'),
      tempDBInstanceId?: string(name='TempDBInstanceId'),
      supportUpgradeAccountType?: string(name='SupportUpgradeAccountType'),
      incrementSourceDBInstanceId?: string(name='IncrementSourceDBInstanceId'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      maintainTime?: string(name='MaintainTime'),
      payType?: string(name='PayType'),
      tags?: string(name='Tags'),
      availabilityValue?: string(name='AvailabilityValue'),
      readDelayTime?: string(name='ReadDelayTime'),
      connectionMode?: string(name='ConnectionMode'),
      port?: string(name='Port'),
      accountType?: string(name='AccountType'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      maxIOPS?: int32(name='MaxIOPS'),
      connectionString?: string(name='ConnectionString'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      securityIPList?: string(name='SecurityIPList'),
      masterInstanceId?: string(name='MasterInstanceId'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceCPU?: string(name='DBInstanceCPU'),
      expireTime?: string(name='ExpireTime'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceType?: string(name='DBInstanceType'),
      accountMaxQuantity?: int32(name='AccountMaxQuantity'),
      lockReason?: string(name='LockReason'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBMaxQuantity?: int32(name='DBMaxQuantity'),
      guardDBInstanceId?: string(name='GuardDBInstanceId'),
      regionId?: string(name='RegionId'),
      DBInstanceStorage?: int32(name='DBInstanceStorage'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
      category?: string(name='Category'),
      maxConnections?: int32(name='MaxConnections'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      engine?: string(name='Engine'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
}

model DescribeDBInstancesAsCsvResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesAsCsvResponseBody(name='body'),
}

async function describeDBInstancesAsCsvWithOptions(request: DescribeDBInstancesAsCsvRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesAsCsvResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancesAsCsv', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancesAsCsv(request: DescribeDBInstancesAsCsvRequest): DescribeDBInstancesAsCsvResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesAsCsvWithOptions(request, runtime);
}

model DescribeDBInstancesByExpireTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  proxyId?: string(name='proxyId'),
  expirePeriod?: int32(name='ExpirePeriod'),
  expired?: boolean(name='Expired'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstancesByExpireTimeResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    DBInstanceExpireTime?: [ 
    {
      expireTime?: string(name='ExpireTime'),
      payType?: string(name='PayType'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      lockMode?: string(name='LockMode'),
    }
  ](name='DBInstanceExpireTime')
  }(name='Items'),
}

model DescribeDBInstancesByExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesByExpireTimeResponseBody(name='body'),
}

async function describeDBInstancesByExpireTimeWithOptions(request: DescribeDBInstancesByExpireTimeRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesByExpireTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancesByExpireTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancesByExpireTime(request: DescribeDBInstancesByExpireTimeRequest): DescribeDBInstancesByExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesByExpireTimeWithOptions(request, runtime);
}

model DescribeDBInstancesByPerformanceRequest {
  tag?: [
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='Tag'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  sortMethod?: string(name='SortMethod'),
  sortKey?: string(name='SortKey'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model DescribeDBInstancesByPerformanceResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    DBInstancePerformance?: [ 
    {
      CPUUsage?: string(name='CPUUsage'),
      sessionUsage?: string(name='SessionUsage'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      IOPSUsage?: string(name='IOPSUsage'),
      diskUsage?: string(name='DiskUsage'),
    }
  ](name='DBInstancePerformance')
  }(name='Items'),
}

model DescribeDBInstancesByPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesByPerformanceResponseBody(name='body'),
}

async function describeDBInstancesByPerformanceWithOptions(request: DescribeDBInstancesByPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesByPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancesByPerformance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancesByPerformance(request: DescribeDBInstancesByPerformanceRequest): DescribeDBInstancesByPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesByPerformanceWithOptions(request, runtime);
}

model DescribeDBInstancesForCloneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
  DBInstanceStatus?: string(name='DBInstanceStatus'),
  expired?: string(name='Expired'),
  searchKey?: string(name='SearchKey'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceType?: string(name='DBInstanceType'),
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  engineVersion?: string(name='EngineVersion'),
  nodeType?: string(name='NodeType'),
  payType?: string(name='PayType'),
  connectionMode?: string(name='ConnectionMode'),
  ownerAccount?: string(name='OwnerAccount'),
  currentInstanceId?: string(name='CurrentInstanceId'),
}

model DescribeDBInstancesForCloneResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    DBInstance?: [ 
    {
      vpcId?: string(name='VpcId'),
      replicateId?: string(name='ReplicateId'),
      tempDBInstanceId?: string(name='TempDBInstanceId'),
      DBInstanceStorageType?: string(name='DBInstanceStorageType'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      mutriORsignle?: boolean(name='MutriORsignle'),
      connectionMode?: string(name='ConnectionMode'),
      lockMode?: string(name='LockMode'),
      engineVersion?: string(name='EngineVersion'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      insId?: int32(name='InsId'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      masterInstanceId?: string(name='MasterInstanceId'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      expireTime?: string(name='ExpireTime'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceType?: string(name='DBInstanceType'),
      destroyTime?: string(name='DestroyTime'),
      lockReason?: string(name='LockReason'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      guardDBInstanceId?: string(name='GuardDBInstanceId'),
      regionId?: string(name='RegionId'),
      vSwitchId?: string(name='VSwitchId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      DBInstanceId?: string(name='DBInstanceId'),
      category?: string(name='Category'),
      engine?: string(name='Engine'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      readOnlyDBInstanceIds?: {
        readOnlyDBInstanceId?: [ 
        {
          DBInstanceId?: string(name='DBInstanceId'),
        }
      ](name='ReadOnlyDBInstanceId')
      }(name='ReadOnlyDBInstanceIds'),
    }
  ](name='DBInstance')
  }(name='Items'),
}

model DescribeDBInstancesForCloneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesForCloneResponseBody(name='body'),
}

async function describeDBInstancesForCloneWithOptions(request: DescribeDBInstancesForCloneRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesForCloneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstancesForClone', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstancesForClone(request: DescribeDBInstancesForCloneRequest): DescribeDBInstancesForCloneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesForCloneWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstanceSSLResponseBody = {
  serverCert?: string(name='ServerCert'),
  clientCACertExpireTime?: string(name='ClientCACertExpireTime'),
  requireUpdateItem?: string(name='RequireUpdateItem'),
  serverCAUrl?: string(name='ServerCAUrl'),
  requireUpdate?: string(name='RequireUpdate'),
  clientCertRevocationList?: string(name='ClientCertRevocationList'),
  SSLExpireTime?: string(name='SSLExpireTime'),
  CAType?: string(name='CAType'),
  SSLCreateTime?: string(name='SSLCreateTime'),
  replicationACL?: string(name='ReplicationACL'),
  ACL?: string(name='ACL'),
  requestId?: string(name='RequestId'),
  lastModifyStatus?: string(name='LastModifyStatus'),
  SSLEnabled?: string(name='SSLEnabled'),
  connectionString?: string(name='ConnectionString'),
  requireUpdateReason?: string(name='RequireUpdateReason'),
  clientCACert?: string(name='ClientCACert'),
  serverKey?: string(name='ServerKey'),
  modifyStatusReason?: string(name='ModifyStatusReason'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceSSL', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstanceStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  addressIP?: string(name='AddressIP'),
  addressPort?: string(name='AddressPort'),
}

model DescribeDBInstanceStatusResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  DBInstanceCpuCores?: string(name='DBInstanceCpuCores'),
  taskStatus?: int32(name='TaskStatus'),
  DBInstanceId?: int32(name='DBInstanceId'),
  DBInstanceStatus?: int32(name='DBInstanceStatus'),
  DBInstanceUseType?: string(name='DBInstanceUseType'),
}

model DescribeDBInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceStatusResponseBody(name='body'),
}

async function describeDBInstanceStatusWithOptions(request: DescribeDBInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDBInstanceStatus', '2014-08-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDBInstanceStatus(request: DescribeDBInstanceStatusRequest): DescribeDBInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceStatusWithOptions(request, runtime);
}

model DescribeDBInstanceTDERequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDBInstanceTDEResponseBody = {
  TDEStatus?: string(name='TDEStatus'),
  requestId?: string(name='RequestId'),
  databases?: {
    database?: [ 
    {
      DBName?: string(name='DBName'),
      TDEStatus?: string(name='TDEStatus'),
    }
  ](name='Database')
  }(name='Databases'),
}

model DescribeDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTDEResponseBody(name='body'),
}

async function describeDBInstanceTDEWithOptions(request: DescribeDBInstanceTDERequest, runtime: Util.RuntimeOptions): DescribeDBInstanceTDEResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceTDE', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceTDEWithOptions(request, runtime);
}

model DescribeDBProxyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDBProxyResponseBody = {
  DBProxyInstanceLatestMinorVersion?: string(name='DBProxyInstanceLatestMinorVersion'),
  requestId?: string(name='RequestId'),
  DBProxyInstanceCurrentMinorVersion?: string(name='DBProxyInstanceCurrentMinorVersion'),
  DBProxyInstanceNum?: int32(name='DBProxyInstanceNum'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType'),
  DBProxyInstanceStatus?: string(name='DBProxyInstanceStatus'),
  DBProxyServiceStatus?: string(name='DBProxyServiceStatus'),
  DBProxyInstanceName?: string(name='DBProxyInstanceName'),
  DBProxyConnectStringItems?: {
    DBProxyConnectStringItems?: [ 
    {
      DBProxyConnectStringNetWorkType?: string(name='DBProxyConnectStringNetWorkType'),
      DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType'),
      DBProxyVpcInstanceId?: string(name='DBProxyVpcInstanceId'),
      DBProxyEndpointName?: string(name='DBProxyEndpointName'),
      DBProxyEndpointId?: string(name='DBProxyEndpointId'),
      DBProxyConnectStringPort?: string(name='DBProxyConnectStringPort'),
      DBProxyConnectString?: string(name='DBProxyConnectString'),
    }
  ](name='DBProxyConnectStringItems')
  }(name='DBProxyConnectStringItems'),
  dbProxyEndpointItems?: {
    dbProxyEndpointItems?: [ 
    {
      dbProxyEndpointAliases?: string(name='DbProxyEndpointAliases'),
      dbProxyEndpointName?: string(name='DbProxyEndpointName'),
      dbProxyEndpointType?: string(name='DbProxyEndpointType'),
      dbProxyReadWriteMode?: string(name='DbProxyReadWriteMode'),
    }
  ](name='DbProxyEndpointItems')
  }(name='DbProxyEndpointItems'),
}

model DescribeDBProxyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyResponseBody(name='body'),
}

async function describeDBProxyWithOptions(request: DescribeDBProxyRequest, runtime: Util.RuntimeOptions): DescribeDBProxyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBProxy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBProxy(request: DescribeDBProxyRequest): DescribeDBProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyWithOptions(request, runtime);
}

model DescribeDBProxyEndpointRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  DBProxyConnectString?: string(name='DBProxyConnectString'),
  regionId?: string(name='RegionId'),
}

model DescribeDBProxyEndpointResponseBody = {
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType'),
  DBProxyFeatures?: string(name='DBProxyFeatures'),
  requestId?: string(name='RequestId'),
  readOnlyInstanceWeight?: string(name='ReadOnlyInstanceWeight'),
  readOnlyInstanceDistributionType?: string(name='ReadOnlyInstanceDistributionType'),
  readOnlyInstanceMaxDelayTime?: string(name='ReadOnlyInstanceMaxDelayTime'),
  dbProxyEndpointReadWriteMode?: string(name='DbProxyEndpointReadWriteMode'),
  dbProxyEndpointAliases?: string(name='DbProxyEndpointAliases'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  DBProxyConnectStringPort?: string(name='DBProxyConnectStringPort'),
  DBProxyConnectString?: string(name='DBProxyConnectString'),
  endpointConnectItems?: {
    endpointConnectItems?: [ 
    {
      dbProxyEndpointPort?: string(name='DbProxyEndpointPort'),
      dbProxyEndpointConnectString?: string(name='DbProxyEndpointConnectString'),
      dbProxyEndpointNetType?: string(name='DbProxyEndpointNetType'),
    }
  ](name='EndpointConnectItems')
  }(name='EndpointConnectItems'),
}

model DescribeDBProxyEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyEndpointResponseBody(name='body'),
}

async function describeDBProxyEndpointWithOptions(request: DescribeDBProxyEndpointRequest, runtime: Util.RuntimeOptions): DescribeDBProxyEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBProxyEndpoint', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBProxyEndpoint(request: DescribeDBProxyEndpointRequest): DescribeDBProxyEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyEndpointWithOptions(request, runtime);
}

model DescribeDBProxyPerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  regionId?: string(name='RegionId'),
  metricsName?: string(name='MetricsName'),
}

model DescribeDBProxyPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  performanceKeys?: {
    performanceKey?: [ 
    {
      valueFormat?: string(name='ValueFormat'),
      key?: string(name='Key'),
      values?: {
        performanceValue?: [ 
        {
          date?: string(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PerformanceKey')
  }(name='PerformanceKeys'),
}

model DescribeDBProxyPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBProxyPerformanceResponseBody(name='body'),
}

async function describeDBProxyPerformanceWithOptions(request: DescribeDBProxyPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBProxyPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBProxyPerformance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBProxyPerformance(request: DescribeDBProxyPerformanceRequest): DescribeDBProxyPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyPerformanceWithOptions(request, runtime);
}

model DescribeDedicatedHostAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  CPUAllocationRatio?: string(name='CPUAllocationRatio'),
  diskAllocationRatio?: string(name='DiskAllocationRatio'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  instanceNumber?: int32(name='InstanceNumber'),
  createdTime?: string(name='CreatedTime'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  autoRenew?: string(name='AutoRenew'),
  imageCategory?: string(name='ImageCategory'),
  hostStorage?: int32(name='HostStorage'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave'),
  openPermission?: string(name='OpenPermission'),
  hostType?: string(name='HostType'),
  expiredTime?: string(name='ExpiredTime'),
  hostMem?: int32(name='HostMem'),
  memoryUsed?: string(name='MemoryUsed'),
  hostStatus?: string(name='HostStatus'),
  cpuUsed?: string(name='CpuUsed'),
  hostName?: string(name='HostName'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave'),
  allocationStatus?: string(name='AllocationStatus'),
  requestId?: string(name='RequestId'),
  memAllocationRatio?: string(name='MemAllocationRatio'),
  zoneId?: string(name='ZoneId'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster'),
  storageUsed?: string(name='StorageUsed'),
  hostClass?: string(name='HostClass'),
  hostCPU?: int32(name='HostCPU'),
  regionId?: string(name='RegionId'),
  IPAddress?: string(name='IPAddress'),
  accountName?: string(name='AccountName'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttributeWithOptions(request: DescribeDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAttributeWithOptions(request, runtime);
}

model DescribeDedicatedHostGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  imageCategory?: string(name='ImageCategory'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      diskAllocateRation?: float(name='DiskAllocateRation'),
      createTime?: string(name='CreateTime'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType'),
      text?: string(name='Text'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      diskUtility?: float(name='DiskUtility'),
      memUsedAmount?: float(name='MemUsedAmount'),
      memAllocatedAmount?: float(name='MemAllocatedAmount'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
      memAllocationRatio?: int32(name='MemAllocationRatio'),
      memUtility?: float(name='MemUtility'),
      memAllocateRation?: float(name='MemAllocateRation'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
      cpuAllocateRation?: float(name='CpuAllocateRation'),
      instanceNumber?: int32(name='InstanceNumber'),
      openPermission?: string(name='OpenPermission'),
      VPCId?: string(name='VPCId'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount'),
      hostNumber?: int32(name='HostNumber'),
      diskUsedAmount?: float(name='DiskUsedAmount'),
      allocationPolicy?: string(name='AllocationPolicy'),
      engine?: string(name='Engine'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      hostReplacePolicy?: string(name='HostReplacePolicy'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostGroups', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostGroupsWithOptions(request, runtime);
}

model DescribeDedicatedHostImageCategoriesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  hostGroup?: string(name='HostGroup'),
}

model DescribeDedicatedHostImageCategoriesResponseBody = {
  requestId?: string(name='RequestId'),
  images?: {
    images?: [ 
    {
      imageCode?: string(name='ImageCode'),
      imageName?: string(name='ImageName'),
    }
  ](name='Images')
  }(name='Images'),
}

model DescribeDedicatedHostImageCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostImageCategoriesResponseBody(name='body'),
}

async function describeDedicatedHostImageCategoriesWithOptions(request: DescribeDedicatedHostImageCategoriesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostImageCategoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostImageCategories', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostImageCategories(request: DescribeDedicatedHostImageCategoriesRequest): DescribeDedicatedHostImageCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostImageCategoriesWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  orderId?: long(name='OrderId'),
  hostType?: string(name='HostType'),
  hostStatus?: string(name='HostStatus'),
  allocationStatus?: string(name='AllocationStatus'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      hostType?: string(name='HostType'),
      hostStorage?: string(name='HostStorage'),
      memoryUsed?: string(name='MemoryUsed'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      allocationStatus?: string(name='AllocationStatus'),
      storageUsed?: string(name='StorageUsed'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      memAllocationRatio?: string(name='MemAllocationRatio'),
      createdTime?: string(name='CreatedTime'),
      IPAddress?: string(name='IPAddress'),
      hostStatus?: string(name='HostStatus'),
      hostName?: string(name='HostName'),
      hostCPU?: string(name='HostCPU'),
      instanceNumber?: string(name='InstanceNumber'),
      openPermission?: string(name='OpenPermission'),
      cpuUsed?: string(name='CpuUsed'),
      VPCId?: string(name='VPCId'),
      hostClass?: string(name='HostClass'),
      endTime?: string(name='EndTime'),
      vSwitchId?: string(name='VSwitchId'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio'),
      zoneId?: string(name='ZoneId'),
      imageCategory?: string(name='ImageCategory'),
      engine?: string(name='Engine'),
      diskAllocationRatio?: string(name='DiskAllocationRatio'),
      hostMem?: string(name='HostMem'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      accountName?: string(name='AccountName'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHosts', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDetachedBackupsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  backupStatus?: string(name='BackupStatus'),
  backupMode?: string(name='BackupMode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  region?: string(name='Region'),
}

model DescribeDetachedBackupsResponseBody = {
  pageNumber?: string(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: string(name='PageRecordCount'),
  totalRecordCount?: string(name='TotalRecordCount'),
  items?: {
    backup?: [ 
    {
      consistentTime?: long(name='ConsistentTime'),
      storeStatus?: string(name='StoreStatus'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      backupDownloadURL?: string(name='BackupDownloadURL'),
      isAvail?: int32(name='IsAvail'),
      metaStatus?: string(name='MetaStatus'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      hostInstanceID?: string(name='HostInstanceID'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL'),
      backupSize?: long(name='BackupSize'),
      backupMode?: string(name='BackupMode'),
      DBInstanceId?: string(name='DBInstanceId'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Items'),
}

model DescribeDetachedBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDetachedBackupsResponseBody(name='body'),
}

async function describeDetachedBackupsWithOptions(request: DescribeDetachedBackupsRequest, runtime: Util.RuntimeOptions): DescribeDetachedBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDetachedBackups', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDetachedBackupsWithOptions(request, runtime);
}

model DescribeDiagnosticReportListRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDiagnosticReportListResponseBody = {
  requestId?: string(name='RequestId'),
  reportList?: [ 
    {
      endTime?: string(name='EndTime'),
      diagnosticTime?: string(name='DiagnosticTime'),
      startTime?: string(name='StartTime'),
      score?: int32(name='Score'),
      downloadURL?: string(name='DownloadURL'),
    }
  ](name='ReportList'),
}

model DescribeDiagnosticReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportListResponseBody(name='body'),
}

async function describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiagnosticReportList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportListWithOptions(request, runtime);
}

model DescribeDownloadLinkDetailsRequest {
  backupSetId?: int32(name='BackupSetId', description='实例 ID。'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  pageNumbers?: int32(name='PageNumbers'),
  regionId?: string(name='RegionId'),
  dataBaseName?: string(name='DataBaseName'),
}

model DescribeDownloadLinkDetailsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  message?: string(name='Message'),
  data?: {
    backupDownloadLinkByDB?: [ 
      {
        dataBase?: string(name='DataBase', description='数据库名称'),
        downloadLink?: string(name='DownloadLink', description='下载链接'),
        intranetDownloadLink?: string(name='IntranetDownloadLink', description='内网下载链接'),
      }
    ](name='BackupDownloadLinkByDB', description='备份下载链接详情'),
    maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
    pageNumbers?: int32(name='PageNumbers'),
    totalRecords?: int32(name='TotalRecords'),
    backupStartTime?: string(name='BackupStartTime'),
    backupEndTime?: string(name='BackupEndTime'),
    backupType?: string(name='BackupType'),
    backupMethod?: string(name='BackupMethod'),
    backupStatus?: string(name='BackupStatus'),
    hostInstanceId?: int32(name='HostInstanceId'),
  }(name='Data'),
  code?: int32(name='Code'),
}

model DescribeDownloadLinkDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadLinkDetailsResponseBody(name='body'),
}

async function describeDownloadLinkDetailsWithOptions(request: DescribeDownloadLinkDetailsRequest, runtime: Util.RuntimeOptions): DescribeDownloadLinkDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDownloadLinkDetails', '2014-08-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDownloadLinkDetails(request: DescribeDownloadLinkDetailsRequest): DescribeDownloadLinkDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadLinkDetailsWithOptions(request, runtime);
}

model DescribeDTCSecurityIpHostsForSQLServerRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDTCSecurityIpHostsForSQLServerResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  ipHostPairNum?: string(name='IpHostPairNum'),
  items?: {
    whiteListGroups?: [ 
    {
      securityIpHosts?: string(name='SecurityIpHosts'),
      whitelistGroupName?: string(name='WhitelistGroupName'),
    }
  ](name='WhiteListGroups')
  }(name='Items'),
}

model DescribeDTCSecurityIpHostsForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDTCSecurityIpHostsForSQLServerResponseBody(name='body'),
}

async function describeDTCSecurityIpHostsForSQLServerWithOptions(request: DescribeDTCSecurityIpHostsForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeDTCSecurityIpHostsForSQLServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDTCSecurityIpHostsForSQLServer', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDTCSecurityIpHostsForSQLServer(request: DescribeDTCSecurityIpHostsForSQLServerRequest): DescribeDTCSecurityIpHostsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
}

model DescribeErrorLogsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeErrorLogsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    errorLog?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorInfo?: string(name='ErrorInfo'),
    }
  ](name='ErrorLog')
  }(name='Items'),
}

model DescribeErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeErrorLogsResponseBody(name='body'),
}

async function describeErrorLogsWithOptions(request: DescribeErrorLogsRequest, runtime: Util.RuntimeOptions): DescribeErrorLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeErrorLogs', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeErrorLogs(request: DescribeErrorLogsRequest): DescribeErrorLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeErrorLogsWithOptions(request, runtime);
}

model DescribeEventsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeEventsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  eventItems?: {
    eventItems?: [ 
    {
      eventName?: string(name='EventName'),
      eventTime?: string(name='EventTime'),
      eventUserType?: string(name='EventUserType'),
      eventRecordTime?: string(name='EventRecordTime'),
      callerUid?: long(name='CallerUid'),
      regionId?: string(name='RegionId'),
      eventId?: int32(name='EventId'),
      eventType?: string(name='EventType'),
      resourceType?: string(name='ResourceType'),
      eventPayload?: string(name='EventPayload'),
      eventReason?: string(name='EventReason'),
      resourceName?: string(name='ResourceName'),
    }
  ](name='EventItems')
  }(name='EventItems'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvents', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventsWithOptions(request, runtime);
}

model DescribeHADiagnoseConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeHADiagnoseConfigResponseBody = {
  tcpConnectionType?: string(name='TcpConnectionType'),
  requestId?: string(name='RequestId'),
}

model DescribeHADiagnoseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHADiagnoseConfigResponseBody(name='body'),
}

async function describeHADiagnoseConfigWithOptions(request: DescribeHADiagnoseConfigRequest, runtime: Util.RuntimeOptions): DescribeHADiagnoseConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHADiagnoseConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHADiagnoseConfig(request: DescribeHADiagnoseConfigRequest): DescribeHADiagnoseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHADiagnoseConfigWithOptions(request, runtime);
}

model DescribeHASwitchConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeHASwitchConfigResponseBody = {
  requestId?: string(name='RequestId'),
  manualHATime?: string(name='ManualHATime'),
  HAConfig?: string(name='HAConfig'),
}

model DescribeHASwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHASwitchConfigResponseBody(name='body'),
}

async function describeHASwitchConfigWithOptions(request: DescribeHASwitchConfigRequest, runtime: Util.RuntimeOptions): DescribeHASwitchConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHASwitchConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHASwitchConfig(request: DescribeHASwitchConfigRequest): DescribeHASwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHASwitchConfigWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    item?: [ 
    {
      status?: string(name='Status'),
      duration?: int32(name='Duration'),
      DBInstanceId?: string(name='DBInstanceId'),
      autoRenew?: string(name='AutoRenew'),
      regionId?: string(name='RegionId'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAutoRenewalAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model DescribeInstanceCrossBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeInstanceCrossBackupPolicyResponseBody = {
  logBackupEnabledTime?: string(name='LogBackupEnabledTime'),
  backupEnabled?: string(name='BackupEnabled'),
  DBInstanceStatus?: string(name='DBInstanceStatus'),
  lockMode?: string(name='LockMode'),
  engineVersion?: string(name='EngineVersion'),
  regionId?: string(name='RegionId'),
  logBackupEnabled?: string(name='LogBackupEnabled'),
  requestId?: string(name='RequestId'),
  retentType?: int32(name='RetentType'),
  retention?: int32(name='Retention'),
  crossBackupType?: string(name='CrossBackupType'),
  crossBackupRegion?: string(name='CrossBackupRegion'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  backupEnabledTime?: string(name='BackupEnabledTime'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
}

model DescribeInstanceCrossBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceCrossBackupPolicyResponseBody(name='body'),
}

async function describeInstanceCrossBackupPolicyWithOptions(request: DescribeInstanceCrossBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeInstanceCrossBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceCrossBackupPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceCrossBackupPolicy(request: DescribeInstanceCrossBackupPolicyRequest): DescribeInstanceCrossBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceCrossBackupPolicyWithOptions(request, runtime);
}

model DescribeInstanceKeywordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  key?: string(name='Key'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceKeywordsResponseBody = {
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
  words?: {
    word?: [ string ](name='word')
  }(name='Words'),
}

model DescribeInstanceKeywordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceKeywordsResponseBody(name='body'),
}

async function describeInstanceKeywordsWithOptions(request: DescribeInstanceKeywordsRequest, runtime: Util.RuntimeOptions): DescribeInstanceKeywordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceKeywords', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceKeywords(request: DescribeInstanceKeywordsRequest): DescribeInstanceKeywordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceKeywordsWithOptions(request, runtime);
}

model DescribeLocalAvailableRecoveryTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  region?: string(name='Region'),
}

model DescribeLocalAvailableRecoveryTimeResponseBody = {
  recoveryEndTime?: string(name='RecoveryEndTime'),
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  recoveryBeginTime?: string(name='RecoveryBeginTime'),
}

model DescribeLocalAvailableRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLocalAvailableRecoveryTimeResponseBody(name='body'),
}

async function describeLocalAvailableRecoveryTimeWithOptions(request: DescribeLocalAvailableRecoveryTimeRequest, runtime: Util.RuntimeOptions): DescribeLocalAvailableRecoveryTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLocalAvailableRecoveryTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLocalAvailableRecoveryTime(request: DescribeLocalAvailableRecoveryTimeRequest): DescribeLocalAvailableRecoveryTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLocalAvailableRecoveryTimeWithOptions(request, runtime);
}

model DescribeLogBackupFilesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeLogBackupFilesResponseBody = {
  totalFileSize?: long(name='TotalFileSize'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    binLogFile?: [ 
    {
      logBeginTime?: string(name='LogBeginTime'),
      intranetDownloadLink?: string(name='IntranetDownloadLink'),
      linkExpiredTime?: string(name='LinkExpiredTime'),
      downloadLink?: string(name='DownloadLink'),
      logEndTime?: string(name='LogEndTime'),
      fileSize?: long(name='FileSize'),
    }
  ](name='BinLogFile')
  }(name='Items'),
}

model DescribeLogBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogBackupFilesResponseBody(name='body'),
}

async function describeLogBackupFilesWithOptions(request: DescribeLogBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeLogBackupFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogBackupFiles', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogBackupFiles(request: DescribeLogBackupFilesRequest): DescribeLogBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupFilesWithOptions(request, runtime);
}

model DescribeMetaListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  restoreType?: string(name='RestoreType'),
  backupSetID?: int32(name='BackupSetID'),
  restoreTime?: string(name='RestoreTime'),
  getDbName?: string(name='GetDbName'),
  pattern?: string(name='Pattern'),
  pageSize?: int32(name='PageSize'),
  pageIndex?: int32(name='PageIndex'),
}

model DescribeMetaListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  totalPageCount?: int32(name='TotalPageCount'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    meta?: [ 
    {
      tables?: string(name='Tables'),
      database?: string(name='Database'),
      size?: string(name='Size'),
    }
  ](name='Meta')
  }(name='Items'),
}

model DescribeMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetaListResponseBody(name='body'),
}

async function describeMetaListWithOptions(request: DescribeMetaListRequest, runtime: Util.RuntimeOptions): DescribeMetaListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMetaList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMetaList(request: DescribeMetaListRequest): DescribeMetaListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMetaListWithOptions(request, runtime);
}

model DescribeMigrateTaskByIdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  migrateTaskId?: string(name='MigrateTaskId'),
}

model DescribeMigrateTaskByIdResponseBody = {
  status?: string(name='Status'),
  endTime?: string(name='EndTime'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  createTime?: string(name='CreateTime'),
  DBName?: string(name='DBName'),
  backupMode?: string(name='BackupMode'),
  migrateTaskId?: string(name='MigrateTaskId'),
  isDBReplaced?: string(name='IsDBReplaced'),
}

model DescribeMigrateTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrateTaskByIdResponseBody(name='body'),
}

async function describeMigrateTaskByIdWithOptions(request: DescribeMigrateTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeMigrateTaskByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrateTaskById', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrateTaskById(request: DescribeMigrateTaskByIdRequest): DescribeMigrateTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTaskByIdWithOptions(request, runtime);
}

model DescribeMigrateTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeMigrateTasksResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    migrateTask?: [ 
    {
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      description?: string(name='Description'),
      createTime?: string(name='CreateTime'),
      DBName?: string(name='DBName'),
      backupMode?: string(name='BackupMode'),
      migrateTaskId?: string(name='MigrateTaskId'),
      isDBReplaced?: string(name='IsDBReplaced'),
    }
  ](name='MigrateTask')
  }(name='Items'),
}

model DescribeMigrateTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrateTasksResponseBody(name='body'),
}

async function describeMigrateTasksWithOptions(request: DescribeMigrateTasksRequest, runtime: Util.RuntimeOptions): DescribeMigrateTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrateTasks', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrateTasks(request: DescribeMigrateTasksRequest): DescribeMigrateTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTasksWithOptions(request, runtime);
}

model DescribeMigrateTasksForSQLServerRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeMigrateTasksForSQLServerResponseBody = {
  endTime?: string(name='EndTime'),
  DBInstanceName?: string(name='DBInstanceName'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  DBInstanceID?: string(name='DBInstanceID'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    migrateTask?: [ 
    {
      migrateIaskId?: string(name='MigrateIaskId'),
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      taskType?: string(name='TaskType'),
      createTime?: string(name='CreateTime'),
      DBName?: string(name='DBName'),
      isDBReplaced?: string(name='IsDBReplaced'),
      desc?: string(name='Desc'),
    }
  ](name='MigrateTask')
  }(name='Items'),
}

model DescribeMigrateTasksForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrateTasksForSQLServerResponseBody(name='body'),
}

async function describeMigrateTasksForSQLServerWithOptions(request: DescribeMigrateTasksForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeMigrateTasksForSQLServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrateTasksForSQLServer', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrateTasksForSQLServer(request: DescribeMigrateTasksForSQLServerRequest): DescribeMigrateTasksForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTasksForSQLServerWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeModifyParameterLogResponseBody = {
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  pageNumber?: int32(name='PageNumber'),
  engineVersion?: string(name='EngineVersion'),
  items?: {
    parameterChangeLog?: [ 
    {
      status?: string(name='Status'),
      oldParameterValue?: string(name='OldParameterValue'),
      parameterName?: string(name='ParameterName'),
      newParameterValue?: string(name='NewParameterValue'),
      modifyTime?: string(name='ModifyTime'),
    }
  ](name='ParameterChangeLog')
  }(name='Items'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeModifyParameterLog', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeOssDownloadsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  migrateTaskId?: string(name='MigrateTaskId'),
}

model DescribeOssDownloadsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  migrateTaskId?: string(name='MigrateTaskId'),
  items?: {
    ossDownload?: [ 
    {
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      description?: string(name='Description'),
      createTime?: string(name='CreateTime'),
      backupMode?: string(name='BackupMode'),
      isAvailable?: string(name='IsAvailable'),
      fileName?: string(name='FileName'),
      fileSize?: string(name='FileSize'),
    }
  ](name='OssDownload')
  }(name='Items'),
}

model DescribeOssDownloadsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssDownloadsResponseBody(name='body'),
}

async function describeOssDownloadsWithOptions(request: DescribeOssDownloadsRequest, runtime: Util.RuntimeOptions): DescribeOssDownloadsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOssDownloads', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOssDownloads(request: DescribeOssDownloadsRequest): DescribeOssDownloadsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssDownloadsWithOptions(request, runtime);
}

model DescribeOssDownloadsForSQLServerRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  migrateTaskId?: string(name='MigrateTaskId'),
}

model DescribeOssDownloadsForSQLServerResponseBody = {
  migrateIaskId?: string(name='MigrateIaskId'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  items?: {
    ossDownload?: [ 
    {
      status?: string(name='Status'),
      createTime?: string(name='CreateTime'),
      isAvail?: string(name='IsAvail'),
      fileName?: string(name='FileName'),
      bakType?: string(name='BakType'),
      desc?: string(name='Desc'),
      fileSize?: string(name='FileSize'),
    }
  ](name='OssDownload')
  }(name='Items'),
}

model DescribeOssDownloadsForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOssDownloadsForSQLServerResponseBody(name='body'),
}

async function describeOssDownloadsForSQLServerWithOptions(request: DescribeOssDownloadsForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeOssDownloadsForSQLServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOssDownloadsForSQLServer', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOssDownloadsForSQLServer(request: DescribeOssDownloadsForSQLServerRequest): DescribeOssDownloadsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssDownloadsForSQLServerWithOptions(request, runtime);
}

model DescribeParameterGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  parameterGroupId?: string(name='ParameterGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeParameterGroupResponseBody = {
  requestId?: string(name='RequestId'),
  paramGroup?: {
    parameterGroup?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      parameterGroupDesc?: string(name='ParameterGroupDesc'),
      createTime?: string(name='CreateTime'),
      forceRestart?: int32(name='ForceRestart'),
      parameterGroupId?: string(name='ParameterGroupId'),
      parameterGroupName?: string(name='ParameterGroupName'),
      engine?: string(name='Engine'),
      paramCounts?: int32(name='ParamCounts'),
      engineVersion?: string(name='EngineVersion'),
      parameterGroupType?: int32(name='ParameterGroupType'),
      paramDetail?: {
        parameterDetail?: [ 
        {
          paramName?: string(name='ParamName'),
          paramValue?: string(name='ParamValue'),
        }
      ](name='ParameterDetail')
      }(name='ParamDetail'),
    }
  ](name='ParameterGroup')
  }(name='ParamGroup'),
}

model DescribeParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupResponseBody(name='body'),
}

async function describeParameterGroupWithOptions(request: DescribeParameterGroupRequest, runtime: Util.RuntimeOptions): DescribeParameterGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterGroup(request: DescribeParameterGroupRequest): DescribeParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterGroupWithOptions(request, runtime);
}

model DescribeParameterGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeParameterGroupsResponseBody = {
  signalForOptimizeParams?: boolean(name='SignalForOptimizeParams'),
  requestId?: string(name='RequestId'),
  parameterGroups?: {
    parameterGroup?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      parameterGroupDesc?: string(name='ParameterGroupDesc'),
      createTime?: string(name='CreateTime'),
      forceRestart?: int32(name='ForceRestart'),
      parameterGroupId?: string(name='ParameterGroupId'),
      parameterGroupName?: string(name='ParameterGroupName'),
      engine?: string(name='Engine'),
      paramCounts?: int32(name='ParamCounts'),
      engineVersion?: string(name='EngineVersion'),
      parameterGroupType?: int32(name='ParameterGroupType'),
    }
  ](name='ParameterGroup')
  }(name='ParameterGroups'),
}

model DescribeParameterGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterGroupsResponseBody(name='body'),
}

async function describeParameterGroupsWithOptions(request: DescribeParameterGroupsRequest, runtime: Util.RuntimeOptions): DescribeParameterGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterGroups', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterGroups(request: DescribeParameterGroupsRequest): DescribeParameterGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterGroupsWithOptions(request, runtime);
}

model DescribeParametersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeParametersResponseBody = {
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  configParameters?: {
    DBInstanceParameter?: [ 
    {
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='DBInstanceParameter')
  }(name='ConfigParameters'),
  runningParameters?: {
    DBInstanceParameter?: [ 
    {
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='DBInstanceParameter')
  }(name='RunningParameters'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameters', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  ownerAccount?: string(name='OwnerAccount'),
  category?: string(name='Category'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeParameterTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
  parameterCount?: string(name='ParameterCount'),
  engineVersion?: string(name='EngineVersion'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceModify?: string(name='ForceModify'),
      forceRestart?: string(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
    }
  ](name='TemplateRecord')
  }(name='Parameters'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterTemplates', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribePriceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  commodityCode?: string(name='CommodityCode'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  payType?: string(name='PayType'),
  zoneId?: string(name='ZoneId'),
  usedTime?: int32(name='UsedTime'),
  timeType?: string(name='TimeType'),
  quantity?: int32(name='Quantity'),
  instanceUsedType?: int32(name='InstanceUsedType'),
  orderType?: string(name='OrderType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribePriceResponseBody = {
  requestId?: string(name='RequestId'),
  priceInfo?: {
    originalPrice?: float(name='OriginalPrice'),
    discountPrice?: float(name='DiscountPrice'),
    currency?: string(name='Currency'),
    tradePrice?: float(name='TradePrice'),
    coupons?: {
      coupon?: [ 
      {
        isSelected?: string(name='IsSelected'),
        couponNo?: string(name='CouponNo'),
        name?: string(name='Name'),
        description?: string(name='Description'),
      }
    ](name='Coupon')
    }(name='Coupons'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds'),
    activityInfo?: {
      checkErrMsg?: string(name='CheckErrMsg'),
      errorCode?: string(name='ErrorCode'),
      success?: string(name='Success'),
    }(name='ActivityInfo'),
  }(name='PriceInfo'),
  rules?: {
    rule?: [ 
    {
      name?: string(name='Name'),
      description?: string(name='Description'),
      ruleId?: long(name='RuleId'),
    }
  ](name='Rule')
  }(name='Rules'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRdsResourceSettingsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceNiche?: string(name='ResourceNiche'),
}

model DescribeRdsResourceSettingsResponseBody = {
  requestId?: string(name='RequestId'),
  rdsInstanceResourceSettings?: {
    rdsInstanceResourceSetting?: [ 
    {
      poppedUpButtonType?: string(name='PoppedUpButtonType'),
      noticeBarContent?: string(name='NoticeBarContent'),
      endDate?: string(name='EndDate'),
      poppedUpContent?: string(name='PoppedUpContent'),
      startDate?: string(name='StartDate'),
      poppedUpButtonText?: string(name='PoppedUpButtonText'),
      isTop?: string(name='IsTop'),
      resourceNiche?: string(name='ResourceNiche'),
      poppedUpButtonUrl?: string(name='PoppedUpButtonUrl'),
    }
  ](name='RdsInstanceResourceSetting')
  }(name='RdsInstanceResourceSettings'),
}

model DescribeRdsResourceSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsResourceSettingsResponseBody(name='body'),
}

async function describeRdsResourceSettingsWithOptions(request: DescribeRdsResourceSettingsRequest, runtime: Util.RuntimeOptions): DescribeRdsResourceSettingsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRdsResourceSettings', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRdsResourceSettings(request: DescribeRdsResourceSettingsRequest): DescribeRdsResourceSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsResourceSettingsWithOptions(request, runtime);
}

model DescribeReadDBInstanceDelayRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  readInstanceId?: string(name='ReadInstanceId'),
}

model DescribeReadDBInstanceDelayResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  delayTime?: int32(name='DelayTime'),
  readDBInstanceId?: string(name='ReadDBInstanceId'),
  items?: {
    items?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId'),
      readonlyInstanceDelay?: {
        readonlyInstanceDelay?: [ 
        {
          writeLatency?: string(name='WriteLatency'),
          flushLatency?: string(name='FlushLatency'),
          readDBInstanceName?: string(name='ReadDBInstanceName'),
          writeLag?: string(name='WriteLag'),
          flushLag?: string(name='FlushLag'),
          sendLatency?: string(name='SendLatency'),
          replayLag?: string(name='ReplayLag'),
          replayLatency?: string(name='ReplayLatency'),
        }
      ](name='ReadonlyInstanceDelay')
      }(name='ReadonlyInstanceDelay'),
      readDelayTimes?: {
        readDelayTime?: [ string ](name='ReadDelayTime')
      }(name='ReadDelayTimes'),
      readDBInstanceNames?: {
        readDBInstanceName?: [ string ](name='ReadDBInstanceName')
      }(name='ReadDBInstanceNames'),
    }
  ](name='Items')
  }(name='Items'),
}

model DescribeReadDBInstanceDelayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReadDBInstanceDelayResponseBody(name='body'),
}

async function describeReadDBInstanceDelayWithOptions(request: DescribeReadDBInstanceDelayRequest, runtime: Util.RuntimeOptions): DescribeReadDBInstanceDelayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeReadDBInstanceDelay', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReadDBInstanceDelay(request: DescribeReadDBInstanceDelayRequest): DescribeReadDBInstanceDelayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReadDBInstanceDelayWithOptions(request, runtime);
}

model DescribeRegionInfosRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  instanceUsedType?: string(name='InstanceUsedType'),
  specifyCount?: string(name='SpecifyCount'),
  hostType?: string(name='HostType'),
}

model DescribeRegionInfosResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    RDSRegion?: [ 
    {
      cnLocalName?: string(name='CnLocalName'),
      regionName?: string(name='RegionName'),
      avz?: string(name='Avz'),
      avzStatus?: string(name='AvzStatus'),
      regionEndpoint?: string(name='RegionEndpoint'),
      category?: string(name='Category'),
      enLocalName?: string(name='EnLocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
}

model DescribeRegionInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionInfosResponseBody(name='body'),
}

async function describeRegionInfosWithOptions(request: DescribeRegionInfosRequest, runtime: Util.RuntimeOptions): DescribeRegionInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionInfos', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionInfos(request: DescribeRegionInfosRequest): DescribeRegionInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionInfosWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    RDSRegion?: [ 
    {
      zoneId?: string(name='ZoneId'),
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
  payType?: string(name='PayType'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  usedTime?: int32(name='UsedTime'),
  timeType?: string(name='TimeType'),
  quantity?: int32(name='Quantity'),
  orderType?: string(name='OrderType'),
  businessInfo?: string(name='BusinessInfo'),
}

model DescribeRenewalPriceResponseBody = {
  requestId?: string(name='RequestId'),
  priceInfo?: {
    originalPrice?: float(name='OriginalPrice'),
    discountPrice?: float(name='DiscountPrice'),
    currency?: string(name='Currency'),
    tradePrice?: float(name='TradePrice'),
    coupons?: {
      coupon?: [ 
      {
        isSelected?: string(name='IsSelected'),
        couponNo?: string(name='CouponNo'),
        name?: string(name='Name'),
        description?: string(name='Description'),
      }
    ](name='Coupon')
    }(name='Coupons'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds'),
    activityInfo?: {
      checkErrMsg?: string(name='CheckErrMsg'),
      errorCode?: string(name='ErrorCode'),
      success?: string(name='Success'),
    }(name='ActivityInfo'),
  }(name='PriceInfo'),
  rules?: {
    rule?: [ 
    {
      name?: string(name='Name'),
      description?: string(name='Description'),
      ruleId?: long(name='RuleId'),
    }
  ](name='Rule')
  }(name='Rules'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRenewalPrice', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribeResourceUsageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeResourceUsageResponseBody = {
  backupOssDataSize?: long(name='BackupOssDataSize'),
  diskUsed?: long(name='DiskUsed'),
  archiveBackupSize?: long(name='ArchiveBackupSize'),
  backupOssLogSize?: long(name='BackupOssLogSize'),
  backupLogSize?: long(name='BackupLogSize'),
  backupDataSize?: long(name='BackupDataSize'),
  coldBackupSize?: long(name='ColdBackupSize'),
  dataSize?: long(name='DataSize'),
  paidBackupSize?: long(name='PaidBackupSize'),
  requestId?: string(name='RequestId'),
  logSize?: long(name='LogSize'),
  backupSize?: long(name='BackupSize'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  SQLSize?: long(name='SQLSize'),
}

model DescribeResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageResponseBody(name='body'),
}

async function describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceUsage', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageWithOptions(request, runtime);
}

model DescribeSecurityGroupConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      networkType?: string(name='NetworkType'),
      securityGroupId?: string(name='SecurityGroupId'),
      regionId?: string(name='RegionId'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

async function describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupConfiguration', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupConfigurationWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  SQLHASH?: string(name='SQLHASH'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSlowLogRecordsResponseBody = {
  rowsAffectedCount?: long(name='RowsAffectedCount'),
  pageRecordCount?: int32(name='PageRecordCount'),
  writesIOCount?: long(name='WritesIOCount'),
  SQLHash?: string(name='SQLHash'),
  logicalIORead?: long(name='LogicalIORead'),
  requestId?: string(name='RequestId'),
  physicalIORead?: long(name='PhysicalIORead'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  DBInstanceId?: string(name='DBInstanceId'),
  engine?: string(name='Engine'),
  pageNumber?: int32(name='PageNumber'),
  CPUTime?: long(name='CPUTime'),
  userName?: string(name='UserName'),
  lastRowsAffectedCount?: long(name='LastRowsAffectedCount'),
  items?: {
    SQLSlowRecord?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      rowsAffectedCount?: long(name='RowsAffectedCount'),
      queryTimes?: long(name='QueryTimes'),
      SQLText?: string(name='SQLText'),
      cpuTime?: long(name='CpuTime'),
      queryTimeMS?: long(name='QueryTimeMS'),
      applicationName?: string(name='ApplicationName'),
      lockTimes?: long(name='LockTimes'),
      executionStartTime?: string(name='ExecutionStartTime'),
      logicalIORead?: long(name='LogicalIORead'),
      writeIOCount?: long(name='WriteIOCount'),
      physicalIORead?: long(name='PhysicalIORead'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      parseRowCounts?: long(name='ParseRowCounts'),
      DBName?: string(name='DBName'),
      clientHostName?: string(name='ClientHostName'),
      userName?: string(name='UserName'),
      lastRowsAffectedCount?: long(name='LastRowsAffectedCount'),
    }
  ](name='SQLSlowRecord')
  }(name='Items'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeSlowLogsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  sortKey?: string(name='SortKey'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSlowLogsResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  engine?: string(name='Engine'),
  items?: {
    SQLSlowLog?: [ 
    {
      maxLastRowsAffectedCounts?: long(name='MaxLastRowsAffectedCounts'),
      returnMaxRowCount?: long(name='ReturnMaxRowCount'),
      SQLText?: string(name='SQLText'),
      SQLServerMaxCpuTime?: long(name='SQLServerMaxCpuTime'),
      createTime?: string(name='CreateTime'),
      avgLastRowsAffectedCounts?: long(name='AvgLastRowsAffectedCounts'),
      minLastRowsAffectedCounts?: long(name='MinLastRowsAffectedCounts'),
      parseTotalRowCounts?: long(name='ParseTotalRowCounts'),
      totalLockTimes?: long(name='TotalLockTimes'),
      mySQLTotalExecutionCounts?: long(name='MySQLTotalExecutionCounts'),
      SQLServerMinCpuTime?: long(name='SQLServerMinCpuTime'),
      SQLHASH?: string(name='SQLHASH'),
      minIOWriteCounts?: long(name='MinIOWriteCounts'),
      parseMaxRowCount?: long(name='ParseMaxRowCount'),
      maxLogicalReadCounts?: long(name='MaxLogicalReadCounts'),
      mySQLTotalExecutionTimes?: long(name='MySQLTotalExecutionTimes'),
      SQLServerTotalExecutionCounts?: long(name='SQLServerTotalExecutionCounts'),
      returnTotalRowCounts?: long(name='ReturnTotalRowCounts'),
      maxLockTime?: long(name='MaxLockTime'),
      DBName?: string(name='DBName'),
      minRowsAffectedCounts?: long(name='MinRowsAffectedCounts'),
      totalLogicalReadCounts?: long(name='TotalLogicalReadCounts'),
      totalPhysicalReadCounts?: long(name='TotalPhysicalReadCounts'),
      reportTime?: string(name='ReportTime'),
      maxPhysicalReadCounts?: long(name='MaxPhysicalReadCounts'),
      SQLServerTotalCpuTime?: long(name='SQLServerTotalCpuTime'),
      totalIOWriteCounts?: long(name='TotalIOWriteCounts'),
      maxRowsAffectedCounts?: long(name='MaxRowsAffectedCounts'),
      avgIOWriteCounts?: long(name='AvgIOWriteCounts'),
      minPhysicalReadCounts?: long(name='MinPhysicalReadCounts'),
      slowLogId?: long(name='SlowLogId'),
      maxExecutionTime?: long(name='MaxExecutionTime'),
      avgExecutionTime?: long(name='AvgExecutionTime'),
      SQLServerAvgExecutionTime?: long(name='SQLServerAvgExecutionTime'),
      maxIOWriteCounts?: long(name='MaxIOWriteCounts'),
      SQLServerAvgCpuTime?: long(name='SQLServerAvgCpuTime'),
      totalLastRowsAffectedCounts?: long(name='TotalLastRowsAffectedCounts'),
      avgLogicalReadCounts?: long(name='AvgLogicalReadCounts'),
      SQLServerMinExecutionTime?: long(name='SQLServerMinExecutionTime'),
      SQLIdStr?: string(name='SQLIdStr'),
      SQLServerTotalExecutionTimes?: long(name='SQLServerTotalExecutionTimes'),
      avgRowsAffectedCounts?: long(name='AvgRowsAffectedCounts'),
      totalRowsAffectedCounts?: long(name='TotalRowsAffectedCounts'),
      avgPhysicalReadCounts?: long(name='AvgPhysicalReadCounts'),
      minLogicalReadCounts?: long(name='MinLogicalReadCounts'),
    }
  ](name='SQLSlowLog')
  }(name='Items'),
}

model DescribeSlowLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogsResponseBody(name='body'),
}

async function describeSlowLogsWithOptions(request: DescribeSlowLogsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogs', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogs(request: DescribeSlowLogsRequest): DescribeSlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogsWithOptions(request, runtime);
}

model DescribeSQLCollectorPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
  storagePeriod?: int32(name='StoragePeriod'),
}

model DescribeSQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLCollectorPolicyResponseBody(name='body'),
}

async function describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLCollectorPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorPolicyWithOptions(request, runtime);
}

model DescribeSQLCollectorRetentionRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSQLCollectorRetentionResponseBody = {
  configValue?: string(name='ConfigValue'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLCollectorRetentionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLCollectorRetentionResponseBody(name='body'),
}

async function describeSQLCollectorRetentionWithOptions(request: DescribeSQLCollectorRetentionRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorRetentionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLCollectorRetention', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLCollectorRetention(request: DescribeSQLCollectorRetentionRequest): DescribeSQLCollectorRetentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorRetentionWithOptions(request, runtime);
}

model DescribeSQLLogFilesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  fileName?: string(name='FileName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSQLLogFilesResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    logFile?: [ 
    {
      fileID?: string(name='FileID'),
      logStartTime?: string(name='LogStartTime'),
      logSize?: string(name='LogSize'),
      logDownloadURL?: string(name='LogDownloadURL'),
      logEndTime?: string(name='LogEndTime'),
      logStatus?: string(name='LogStatus'),
    }
  ](name='LogFile')
  }(name='Items'),
}

model DescribeSQLLogFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogFilesResponseBody(name='body'),
}

async function describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogFiles', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogFilesWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  SQLId?: long(name='SQLId'),
  queryKeywords?: string(name='QueryKeywords'),
  startTime?: string(name='StartTime'),
  database?: string(name='Database'),
  user?: string(name='User'),
  form?: string(name='Form'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSQLLogRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: long(name='TotalRecordCount'),
  items?: {
    SQLRecord?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      SQLText?: string(name='SQLText'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      threadID?: string(name='ThreadID'),
      totalExecutionTimes?: long(name='TotalExecutionTimes'),
      accountName?: string(name='AccountName'),
    }
  ](name='SQLRecord')
  }(name='Items'),
}

model DescribeSQLLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogRecordsResponseBody(name='body'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogRecords', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model DescribeSQLLogReportListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSQLLogReportListResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    item?: [ 
    {
      reportTime?: string(name='ReportTime'),
      latencyTopNItems?: {
        latencyTopNItem?: [ 
        {
          SQLText?: string(name='SQLText'),
          SQLExecuteTimes?: long(name='SQLExecuteTimes'),
          avgLatency?: long(name='AvgLatency'),
        }
      ](name='LatencyTopNItem')
      }(name='LatencyTopNItems'),
      QPSTopNItems?: {
        QPSTopNItem?: [ 
        {
          SQLExecuteTimes?: long(name='SQLExecuteTimes'),
          SQLText?: string(name='SQLText'),
        }
      ](name='QPSTopNItem')
      }(name='QPSTopNItems'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeSQLLogReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogReportListResponseBody(name='body'),
}

async function describeSQLLogReportListWithOptions(request: DescribeSQLLogReportListRequest, runtime: Util.RuntimeOptions): DescribeSQLLogReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogReportList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogReportList(request: DescribeSQLLogReportListRequest): DescribeSQLLogReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogReportListWithOptions(request, runtime);
}

model DescribeSQLLogReportsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSQLLogReportsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    item?: [ 
    {
      reportTime?: string(name='ReportTime'),
      latencyTopNItems?: {
        latencyTopNItem?: [ 
        {
          SQLText?: string(name='SQLText'),
          SQLExecuteTimes?: long(name='SQLExecuteTimes'),
          avgLatency?: long(name='AvgLatency'),
        }
      ](name='LatencyTopNItem')
      }(name='LatencyTopNItems'),
      QPSTopNItems?: {
        QPSTopNItem?: [ 
        {
          SQLExecuteTimes?: long(name='SQLExecuteTimes'),
          SQLText?: string(name='SQLText'),
        }
      ](name='QPSTopNItem')
      }(name='QPSTopNItems'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeSQLLogReportsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogReportsResponseBody(name='body'),
}

async function describeSQLLogReportsWithOptions(request: DescribeSQLLogReportsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogReportsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSQLLogReports', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSQLLogReports(request: DescribeSQLLogReportsRequest): DescribeSQLLogReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogReportsWithOptions(request, runtime);
}

model DescribeTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    tagInfos?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
      DBInstanceIds?: {
        DBInstanceIds?: [ string ](name='DBInstanceIds')
      }(name='DBInstanceIds'),
    }
  ](name='TagInfos')
  }(name='Items'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTags', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  status?: string(name='Status'),
  taskAction?: string(name='TaskAction'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeTasksResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    taskProgressInfo?: [ 
    {
      status?: string(name='Status'),
      finishTime?: string(name='FinishTime'),
      progress?: string(name='Progress'),
      stepsInfo?: string(name='StepsInfo'),
      beginTime?: string(name='BeginTime'),
      expectedFinishTime?: string(name='ExpectedFinishTime'),
      taskErrorCode?: string(name='TaskErrorCode'),
      currentStepName?: string(name='CurrentStepName'),
      progressInfo?: string(name='ProgressInfo'),
      stepProgressInfo?: string(name='StepProgressInfo'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskAction?: string(name='TaskAction'),
      remain?: int32(name='Remain'),
      DBName?: string(name='DBName'),
      taskId?: string(name='TaskId'),
    }
  ](name='TaskProgressInfo')
  }(name='Items'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTasks', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeVSwitchesResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  vSwitchs?: [ 
    {
      aliUid?: string(name='AliUid'),
      bid?: string(name='Bid'),
      cidrBlock?: string(name='CidrBlock'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      isDefault?: boolean(name='IsDefault'),
      izNo?: string(name='IzNo'),
      regionNo?: string(name='RegionNo'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
    }
  ](name='VSwitchs'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVSwitches', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DestroyDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DestroyDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestroyDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyDBInstanceResponseBody(name='body'),
}

async function destroyDBInstanceWithOptions(request: DestroyDBInstanceRequest, runtime: Util.RuntimeOptions): DestroyDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DestroyDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function destroyDBInstance(request: DestroyDBInstanceRequest): DestroyDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyDBInstanceWithOptions(request, runtime);
}

model DropDedicatedHostUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  userName?: string(name='UserName'),
  regionId?: string(name='RegionId'),
}

model DropDedicatedHostUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DropDedicatedHostUserResponse = {
  headers: map[string]string(name='headers'),
  body: DropDedicatedHostUserResponseBody(name='body'),
}

async function dropDedicatedHostUserWithOptions(request: DropDedicatedHostUserRequest, runtime: Util.RuntimeOptions): DropDedicatedHostUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DropDedicatedHostUser', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dropDedicatedHostUser(request: DropDedicatedHostUserRequest): DropDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return dropDedicatedHostUserWithOptions(request, runtime);
}

model EvaluateDedicatedHostInstanceResourceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  diskType?: string(name='DiskType'),
  diskSize?: string(name='DiskSize'),
  instanceClassNames?: string(name='InstanceClassNames'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
}

model EvaluateDedicatedHostInstanceResourceResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  available?: int32(name='Available'),
}

model EvaluateDedicatedHostInstanceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: EvaluateDedicatedHostInstanceResourceResponseBody(name='body'),
}

async function evaluateDedicatedHostInstanceResourceWithOptions(request: EvaluateDedicatedHostInstanceResourceRequest, runtime: Util.RuntimeOptions): EvaluateDedicatedHostInstanceResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EvaluateDedicatedHostInstanceResource', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function evaluateDedicatedHostInstanceResource(request: EvaluateDedicatedHostInstanceResourceRequest): EvaluateDedicatedHostInstanceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return evaluateDedicatedHostInstanceResourceWithOptions(request, runtime);
}

model GetDbProxyInstanceSslRequest {
  regionId?: string(name='RegionId'),
  dbInstanceId?: string(name='DbInstanceId'),
}

model GetDbProxyInstanceSslResponseBody = {
  requestId?: string(name='RequestId'),
  dbProxyCertListItems?: {
    dbProxyCertListItems?: [ 
    {
      dbInstanceName?: string(name='DbInstanceName'),
      endpointName?: string(name='EndpointName'),
      endpointType?: string(name='EndpointType'),
      sslExpiredTime?: string(name='SslExpiredTime'),
      certCommonName?: string(name='CertCommonName'),
    }
  ](name='DbProxyCertListItems')
  }(name='DbProxyCertListItems'),
}

model GetDbProxyInstanceSslResponse = {
  headers: map[string]string(name='headers'),
  body: GetDbProxyInstanceSslResponseBody(name='body'),
}

async function getDbProxyInstanceSslWithOptions(request: GetDbProxyInstanceSslRequest, runtime: Util.RuntimeOptions): GetDbProxyInstanceSslResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDbProxyInstanceSsl', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDbProxyInstanceSsl(request: GetDbProxyInstanceSslRequest): GetDbProxyInstanceSslResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDbProxyInstanceSslWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  DBName?: string(name='DBName'),
  accountPrivilege?: string(name='AccountPrivilege'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantAccountPrivilege', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model GrantOperatorPermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  expiredTime?: string(name='ExpiredTime'),
  privileges?: string(name='Privileges'),
  ownerAccount?: string(name='OwnerAccount'),
}

model GrantOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantOperatorPermissionResponseBody(name='body'),
}

async function grantOperatorPermissionWithOptions(request: GrantOperatorPermissionRequest, runtime: Util.RuntimeOptions): GrantOperatorPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantOperatorPermission', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantOperatorPermissionWithOptions(request, runtime);
}

model ImportDatabaseBetweenInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  sourceDBInstanceId?: string(name='SourceDBInstanceId'),
  DBInfo?: string(name='DBInfo'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ImportDatabaseBetweenInstancesResponseBody = {
  importId?: string(name='ImportId'),
  requestId?: string(name='RequestId'),
}

model ImportDatabaseBetweenInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDatabaseBetweenInstancesResponseBody(name='body'),
}

async function importDatabaseBetweenInstancesWithOptions(request: ImportDatabaseBetweenInstancesRequest, runtime: Util.RuntimeOptions): ImportDatabaseBetweenInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportDatabaseBetweenInstances', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importDatabaseBetweenInstances(request: ImportDatabaseBetweenInstancesRequest): ImportDatabaseBetweenInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDatabaseBetweenInstancesWithOptions(request, runtime);
}

model ImportUserBackupFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engineVersion?: string(name='EngineVersion'),
  bucketRegion?: string(name='BucketRegion'),
  backupFile?: string(name='BackupFile'),
  comment?: string(name='Comment'),
  restoreSize?: int32(name='RestoreSize'),
  retention?: int32(name='Retention'),
  zoneId?: string(name='ZoneId'),
}

model ImportUserBackupFileResponseBody = {
  status?: boolean(name='Status'),
  requestId?: string(name='RequestId'),
  backupId?: string(name='BackupId'),
}

model ImportUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: ImportUserBackupFileResponseBody(name='body'),
}

async function importUserBackupFileWithOptions(request: ImportUserBackupFileRequest, runtime: Util.RuntimeOptions): ImportUserBackupFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportUserBackupFile', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importUserBackupFile(request: ImportUserBackupFileRequest): ImportUserBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return importUserBackupFileWithOptions(request, runtime);
}

model ListClassesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  commodityCode?: string(name='CommodityCode'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderType?: string(name='OrderType'),
  regionId?: string(name='RegionId'),
}

model ListClassesResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
  items?: [ 
    {
      maxIOPS?: string(name='MaxIOPS'),
      cpu?: string(name='Cpu'),
      referencePrice?: string(name='ReferencePrice'),
      maxConnections?: string(name='MaxConnections'),
      memoryClass?: string(name='MemoryClass'),
      classCode?: string(name='ClassCode'),
      classGroup?: string(name='ClassGroup'),
      maxIOMBPS?: string(name='MaxIOMBPS'),
    }
  ](name='Items'),
}

model ListClassesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClassesResponseBody(name='body'),
}

async function listClassesWithOptions(request: ListClassesRequest, runtime: Util.RuntimeOptions): ListClassesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListClasses', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listClasses(request: ListClassesRequest): ListClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClassesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserBackupFilesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  regionId?: string(name='RegionId'),
  comment?: string(name='Comment'),
  backupId?: string(name='BackupId'),
  ossUrl?: string(name='OssUrl'),
  tags?: string(name='Tags'),
}

model ListUserBackupFilesResponseBody = {
  requestId?: string(name='RequestId'),
  records?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      finishTime?: string(name='FinishTime'),
      comment?: string(name='Comment'),
      ossFilePath?: string(name='OssFilePath'),
      ossBucket?: string(name='OssBucket'),
      modificationTime?: string(name='ModificationTime'),
      ossFileSize?: long(name='OssFileSize'),
      ossFileName?: string(name='OssFileName'),
      engineVersion?: string(name='EngineVersion'),
      backupId?: string(name='BackupId'),
      restoreSize?: string(name='RestoreSize'),
      zoneId?: string(name='ZoneId'),
      retention?: int32(name='Retention'),
      engine?: string(name='Engine'),
      ossUrl?: string(name='OssUrl'),
      ossFileMetaData?: string(name='OssFileMetaData'),
      binlogInfo?: string(name='BinlogInfo'),
      reason?: string(name='Reason'),
    }
  ](name='Records'),
}

model ListUserBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserBackupFilesResponseBody(name='body'),
}

async function listUserBackupFilesWithOptions(request: ListUserBackupFilesRequest, runtime: Util.RuntimeOptions): ListUserBackupFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserBackupFiles', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserBackupFiles(request: ListUserBackupFilesRequest): ListUserBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserBackupFilesWithOptions(request, runtime);
}

model LockAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
}

model LockAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model LockAccountResponse = {
  headers: map[string]string(name='headers'),
  body: LockAccountResponseBody(name='body'),
}

async function lockAccountWithOptions(request: LockAccountRequest, runtime: Util.RuntimeOptions): LockAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockAccount(request: LockAccountRequest): LockAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockAccountWithOptions(request, runtime);
}

model MigrateDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave'),
  effectiveTime?: string(name='EffectiveTime'),
  specifiedTime?: string(name='SpecifiedTime'),
  zoneIdForLog?: string(name='ZoneIdForLog'),
  zoneIdForFollower?: string(name='ZoneIdForFollower'),
}

model MigrateDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
  migrationId?: int32(name='MigrationId'),
}

model MigrateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateDBInstanceResponseBody(name='body'),
}

async function migrateDBInstanceWithOptions(request: MigrateDBInstanceRequest, runtime: Util.RuntimeOptions): MigrateDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateDBInstance(request: MigrateDBInstanceRequest): MigrateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateDBInstanceWithOptions(request, runtime);
}

model MigrateSecurityIPModeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model MigrateSecurityIPModeResponseBody = {
  securityIPMode?: string(name='SecurityIPMode'),
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
}

model MigrateSecurityIPModeResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateSecurityIPModeResponseBody(name='body'),
}

async function migrateSecurityIPModeWithOptions(request: MigrateSecurityIPModeRequest, runtime: Util.RuntimeOptions): MigrateSecurityIPModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateSecurityIPMode', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateSecurityIPMode(request: MigrateSecurityIPModeRequest): MigrateSecurityIPModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateSecurityIPModeWithOptions(request, runtime);
}

model MigrateToOtherZoneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  VPCId?: string(name='VPCId'),
  zoneId?: string(name='ZoneId'),
  ownerAccount?: string(name='OwnerAccount'),
  effectiveTime?: string(name='EffectiveTime'),
  vSwitchId?: string(name='VSwitchId'),
  category?: string(name='Category'),
  zoneIdSlave1?: string(name='ZoneIdSlave1'),
  zoneIdSlave2?: string(name='ZoneIdSlave2'),
}

model MigrateToOtherZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

async function migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateToOtherZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateToOtherZone', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateToOtherZoneWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyActionEventPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  enableEventLog?: string(name='EnableEventLog'),
}

model ModifyActionEventPolicyResponseBody = {
  enableEventLog?: string(name='EnableEventLog'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model ModifyActionEventPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActionEventPolicyResponseBody(name='body'),
}

async function modifyActionEventPolicyWithOptions(request: ModifyActionEventPolicyRequest, runtime: Util.RuntimeOptions): ModifyActionEventPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyActionEventPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyActionEventPolicy(request: ModifyActionEventPolicyRequest): ModifyActionEventPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActionEventPolicyWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupPolicyMode?: string(name='BackupPolicyMode'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  backupLog?: string(name='BackupLog'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
  ownerAccount?: string(name='OwnerAccount'),
  enableBackupLog?: string(name='EnableBackupLog'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
  logBackupFrequency?: string(name='LogBackupFrequency'),
  compressType?: string(name='CompressType'),
  archiveBackupRetentionPeriod?: string(name='ArchiveBackupRetentionPeriod'),
  archiveBackupKeepPolicy?: string(name='ArchiveBackupKeepPolicy'),
  archiveBackupKeepCount?: int32(name='ArchiveBackupKeepCount'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber'),
  category?: string(name='Category'),
  backupInterval?: string(name='BackupInterval'),
  backupMethod?: string(name='BackupMethod'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  compressType?: string(name='CompressType'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
  logBackupLocalRetentionNumber?: int32(name='LogBackupLocalRetentionNumber'),
  DBInstanceID?: string(name='DBInstanceID'),
  enableBackupLog?: string(name='EnableBackupLog'),
  localLogRetentionHours?: int32(name='LocalLogRetentionHours'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyCollationTimeZoneRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  collation?: string(name='Collation'),
  timezone?: string(name='Timezone'),
}

model ModifyCollationTimeZoneResponseBody = {
  collation?: string(name='Collation'),
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  timezone?: string(name='Timezone'),
  taskId?: string(name='TaskId'),
}

model ModifyCollationTimeZoneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCollationTimeZoneResponseBody(name='body'),
}

async function modifyCollationTimeZoneWithOptions(request: ModifyCollationTimeZoneRequest, runtime: Util.RuntimeOptions): ModifyCollationTimeZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCollationTimeZone', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCollationTimeZone(request: ModifyCollationTimeZoneRequest): ModifyCollationTimeZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCollationTimeZoneWithOptions(request, runtime);
}

model ModifyDasInstanceConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  storageAutoScale?: string(name='StorageAutoScale'),
  storageThreshold?: int32(name='StorageThreshold'),
  storageUpperBound?: int32(name='StorageUpperBound'),
}

model ModifyDasInstanceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDasInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDasInstanceConfigResponseBody(name='body'),
}

async function modifyDasInstanceConfigWithOptions(request: ModifyDasInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyDasInstanceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDasInstanceConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDasInstanceConfig(request: ModifyDasInstanceConfigRequest): ModifyDasInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDasInstanceConfigWithOptions(request, runtime);
}

model ModifyDBDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  DBDescription?: string(name='DBDescription'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBDescriptionResponseBody(name='body'),
}

async function modifyDBDescriptionWithOptions(request: ModifyDBDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBDescription', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceAutoUpgradeMinorVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  autoUpgradeMinorVersion?: string(name='AutoUpgradeMinorVersion'),
}

model ModifyDBInstanceAutoUpgradeMinorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceAutoUpgradeMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceAutoUpgradeMinorVersionResponseBody(name='body'),
}

async function modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceAutoUpgradeMinorVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceAutoUpgradeMinorVersion', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceAutoUpgradeMinorVersion(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest): ModifyDBInstanceAutoUpgradeMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionModeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionMode?: string(name='ConnectionMode'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceConnectionModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionModeResponseBody(name='body'),
}

async function modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceConnectionMode', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionModeWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  ownerAccount?: string(name='OwnerAccount'),
  generalGroupName?: string(name='GeneralGroupName'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceConnectionString', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceDescription', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceHAConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  syncMode?: string(name='SyncMode'),
  HAMode?: string(name='HAMode'),
  dbInstanceId?: string(name='DbInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceHAConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceHAConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceHAConfigResponseBody(name='body'),
}

async function modifyDBInstanceHAConfigWithOptions(request: ModifyDBInstanceHAConfigRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceHAConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceHAConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceHAConfig(request: ModifyDBInstanceHAConfigRequest): ModifyDBInstanceHAConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceHAConfigWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  maintainTime?: string(name='MaintainTime'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMaintainTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceMetricsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
  scope?: string(name='Scope'),
  metricsConfig?: string(name='MetricsConfig'),
}

model ModifyDBInstanceMetricsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  scope?: string(name='Scope'),
}

model ModifyDBInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMetricsResponseBody(name='body'),
}

async function modifyDBInstanceMetricsWithOptions(request: ModifyDBInstanceMetricsRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMetrics', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMetrics(request: ModifyDBInstanceMetricsRequest): ModifyDBInstanceMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMetricsWithOptions(request, runtime);
}

model ModifyDBInstanceMonitorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  period?: string(name='Period'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMonitorResponseBody(name='body'),
}

async function modifyDBInstanceMonitorWithOptions(request: ModifyDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMonitor', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): ModifyDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMonitorWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkExpireTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionString?: string(name='ConnectionString'),
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceNetworkExpireTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceNetworkExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetworkExpireTimeResponseBody(name='body'),
}

async function modifyDBInstanceNetworkExpireTimeWithOptions(request: ModifyDBInstanceNetworkExpireTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkExpireTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceNetworkExpireTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceNetworkExpireTime(request: ModifyDBInstanceNetworkExpireTimeRequest): ModifyDBInstanceNetworkExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkExpireTimeWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  retainClassic?: string(name='RetainClassic'),
  classicExpiredDays?: string(name='ClassicExpiredDays'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  readWriteSplittingClassicExpiredDays?: int32(name='ReadWriteSplittingClassicExpiredDays'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  readWriteSplittingPrivateIpAddress?: string(name='ReadWriteSplittingPrivateIpAddress'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceNetworkTypeResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  connectionString?: string(name='ConnectionString'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceNetworkTypeResponseBody(name='body'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceNetworkType', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstancePayTypeRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  usedTime?: int32(name='UsedTime'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
}

model ModifyDBInstancePayTypeResponseBody = {
  orderId?: long(name='OrderId'),
}

model ModifyDBInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstancePayTypeResponseBody(name='body'),
}

async function modifyDBInstancePayTypeWithOptions(request: ModifyDBInstancePayTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstancePayTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstancePayType', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstancePayType(request: ModifyDBInstancePayTypeRequest): ModifyDBInstancePayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstancePayTypeWithOptions(request, runtime);
}

model ModifyDBInstanceProxyConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  proxyConfigurationKey?: string(name='ProxyConfigurationKey'),
  proxyConfigurationValue?: string(name='ProxyConfigurationValue'),
}

model ModifyDBInstanceProxyConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceProxyConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceProxyConfigurationResponseBody(name='body'),
}

async function modifyDBInstanceProxyConfigurationWithOptions(request: ModifyDBInstanceProxyConfigurationRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceProxyConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceProxyConfiguration', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceProxyConfiguration(request: ModifyDBInstanceProxyConfigurationRequest): ModifyDBInstanceProxyConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceProxyConfigurationWithOptions(request, runtime);
}

model ModifyDBInstanceSpecRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  payType?: string(name='PayType'),
  ownerAccount?: string(name='OwnerAccount'),
  effectiveTime?: string(name='EffectiveTime'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
  direction?: string(name='Direction'),
  sourceBiz?: string(name='SourceBiz'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  zoneId?: string(name='ZoneId'),
  switchTime?: string(name='SwitchTime'),
}

model ModifyDBInstanceSpecResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  orderId?: long(name='OrderId'),
}

model ModifyDBInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSpecResponseBody(name='body'),
}

async function modifyDBInstanceSpecWithOptions(request: ModifyDBInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceSpec', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceSpec(request: ModifyDBInstanceSpecRequest): ModifyDBInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSpecWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionString?: string(name='ConnectionString'),
  ownerAccount?: string(name='OwnerAccount'),
  SSLEnabled?: int32(name='SSLEnabled'),
  CAType?: string(name='CAType'),
  serverCert?: string(name='ServerCert'),
  serverKey?: string(name='ServerKey'),
  clientCAEnabled?: int32(name='ClientCAEnabled'),
  clientCACert?: string(name='ClientCACert'),
  clientCrlEnabled?: int32(name='ClientCrlEnabled'),
  clientCertRevocationList?: string(name='ClientCertRevocationList'),
  ACL?: string(name='ACL'),
  replicationACL?: string(name='ReplicationACL'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceSSL', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model ModifyDBInstanceTDERequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  TDEStatus?: string(name='TDEStatus'),
  DBName?: string(name='DBName'),
  ownerAccount?: string(name='OwnerAccount'),
  encryptionKey?: string(name='EncryptionKey'),
  roleArn?: string(name='RoleArn'),
  certificate?: string(name='Certificate'),
  privateKey?: string(name='PrivateKey'),
  passWord?: string(name='PassWord'),
}

model ModifyDBInstanceTDEResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceTDEResponseBody(name='body'),
}

async function modifyDBInstanceTDEWithOptions(request: ModifyDBInstanceTDERequest, runtime: Util.RuntimeOptions): ModifyDBInstanceTDEResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceTDE', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceTDE(request: ModifyDBInstanceTDERequest): ModifyDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceTDEWithOptions(request, runtime);
}

model ModifyDBProxyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  configDBProxyService?: string(name='ConfigDBProxyService'),
  DBProxyInstanceNum?: string(name='DBProxyInstanceNum'),
  regionId?: string(name='RegionId'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
}

model ModifyDBProxyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBProxyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyResponseBody(name='body'),
}

async function modifyDBProxyWithOptions(request: ModifyDBProxyRequest, runtime: Util.RuntimeOptions): ModifyDBProxyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBProxy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBProxy(request: ModifyDBProxyRequest): ModifyDBProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyWithOptions(request, runtime);
}

model ModifyDBProxyEndpointRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  configDBProxyFeatures?: string(name='ConfigDBProxyFeatures'),
  regionId?: string(name='RegionId'),
  readOnlyInstanceMaxDelayTime?: string(name='ReadOnlyInstanceMaxDelayTime'),
  readOnlyInstanceDistributionType?: string(name='ReadOnlyInstanceDistributionType'),
  readOnlyInstanceWeight?: string(name='ReadOnlyInstanceWeight'),
  dbEndpointOperator?: string(name='DbEndpointOperator'),
  dbEndpointAliases?: string(name='DbEndpointAliases'),
  dbEndpointType?: string(name='DbEndpointType'),
  dbEndpointReadWriteMode?: string(name='DbEndpointReadWriteMode'),
}

model ModifyDBProxyEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBProxyEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyEndpointResponseBody(name='body'),
}

async function modifyDBProxyEndpointWithOptions(request: ModifyDBProxyEndpointRequest, runtime: Util.RuntimeOptions): ModifyDBProxyEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBProxyEndpoint', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBProxyEndpoint(request: ModifyDBProxyEndpointRequest): ModifyDBProxyEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyEndpointWithOptions(request, runtime);
}

model ModifyDBProxyEndpointAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId'),
  DBProxyNewConnectString?: string(name='DBProxyNewConnectString'),
  DBProxyNewConnectStringPort?: string(name='DBProxyNewConnectStringPort'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType'),
}

model ModifyDBProxyEndpointAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBProxyEndpointAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyEndpointAddressResponseBody(name='body'),
}

async function modifyDBProxyEndpointAddressWithOptions(request: ModifyDBProxyEndpointAddressRequest, runtime: Util.RuntimeOptions): ModifyDBProxyEndpointAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBProxyEndpointAddress', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBProxyEndpointAddress(request: ModifyDBProxyEndpointAddressRequest): ModifyDBProxyEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyEndpointAddressWithOptions(request, runtime);
}

model ModifyDBProxyInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType'),
  DBProxyInstanceNum?: string(name='DBProxyInstanceNum'),
  effectiveTime?: string(name='EffectiveTime'),
  effectiveSpecificTime?: string(name='EffectiveSpecificTime'),
  regionId?: string(name='RegionId'),
}

model ModifyDBProxyInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBProxyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBProxyInstanceResponseBody(name='body'),
}

async function modifyDBProxyInstanceWithOptions(request: ModifyDBProxyInstanceRequest, runtime: Util.RuntimeOptions): ModifyDBProxyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBProxyInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBProxyInstance(request: ModifyDBProxyInstanceRequest): ModifyDBProxyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyInstanceWithOptions(request, runtime);
}

model ModifyDbProxyInstanceSslRequest {
  regionId?: string(name='RegionId'),
  dbInstanceId?: string(name='DbInstanceId'),
  dbProxyEndpointId?: string(name='DbProxyEndpointId'),
  dbProxyConnectString?: string(name='DbProxyConnectString'),
  dbProxySslEnabled?: string(name='DbProxySslEnabled'),
}

model ModifyDbProxyInstanceSslResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDbProxyInstanceSslResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDbProxyInstanceSslResponseBody(name='body'),
}

async function modifyDbProxyInstanceSslWithOptions(request: ModifyDbProxyInstanceSslRequest, runtime: Util.RuntimeOptions): ModifyDbProxyInstanceSslResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDbProxyInstanceSsl', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDbProxyInstanceSsl(request: ModifyDbProxyInstanceSslRequest): ModifyDbProxyInstanceSslResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDbProxyInstanceSslWithOptions(request, runtime);
}

model ModifyDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  regionId?: string(name='RegionId'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccountWithOptions(request: ModifyDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAccountWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  hostName?: string(name='HostName'),
  allocationStatus?: string(name='AllocationStatus'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostGroupAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttributeWithOptions(request: ModifyDedicatedHostGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostGroupAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostGroupAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  userName?: string(name='UserName'),
  oldPassword?: string(name='OldPassword'),
  newPassword?: string(name='NewPassword'),
  regionId?: string(name='RegionId'),
}

model ModifyDedicatedHostUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostUserResponseBody(name='body'),
}

async function modifyDedicatedHostUserWithOptions(request: ModifyDedicatedHostUserRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostUser', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostUser(request: ModifyDedicatedHostUserRequest): ModifyDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostUserWithOptions(request, runtime);
}

model ModifyDTCSecurityIpHostsForSQLServerRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityIpHosts?: string(name='SecurityIpHosts'),
  whiteListGroupName?: string(name='WhiteListGroupName'),
  regionId?: string(name='RegionId'),
}

model ModifyDTCSecurityIpHostsForSQLServerResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  DTCSetResult?: string(name='DTCSetResult'),
}

model ModifyDTCSecurityIpHostsForSQLServerResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDTCSecurityIpHostsForSQLServerResponseBody(name='body'),
}

async function modifyDTCSecurityIpHostsForSQLServerWithOptions(request: ModifyDTCSecurityIpHostsForSQLServerRequest, runtime: Util.RuntimeOptions): ModifyDTCSecurityIpHostsForSQLServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDTCSecurityIpHostsForSQLServer', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDTCSecurityIpHostsForSQLServer(request: ModifyDTCSecurityIpHostsForSQLServerRequest): ModifyDTCSecurityIpHostsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
}

model ModifyHADiagnoseConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  tcpConnectionType?: string(name='TcpConnectionType'),
  regionId?: string(name='RegionId'),
}

model ModifyHADiagnoseConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHADiagnoseConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHADiagnoseConfigResponseBody(name='body'),
}

async function modifyHADiagnoseConfigWithOptions(request: ModifyHADiagnoseConfigRequest, runtime: Util.RuntimeOptions): ModifyHADiagnoseConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHADiagnoseConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHADiagnoseConfig(request: ModifyHADiagnoseConfigRequest): ModifyHADiagnoseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHADiagnoseConfigWithOptions(request, runtime);
}

model ModifyHASwitchConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  HAConfig?: string(name='HAConfig'),
  manualHATime?: string(name='ManualHATime'),
  regionId?: string(name='RegionId'),
}

model ModifyHASwitchConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHASwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHASwitchConfigResponseBody(name='body'),
}

async function modifyHASwitchConfigWithOptions(request: ModifyHASwitchConfigRequest, runtime: Util.RuntimeOptions): ModifyHASwitchConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHASwitchConfig', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHASwitchConfig(request: ModifyHASwitchConfigRequest): ModifyHASwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHASwitchConfigWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  duration?: string(name='Duration'),
  autoRenew?: string(name='AutoRenew'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAutoRenewalAttribute', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model ModifyInstanceCrossBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
  crossBackupType?: string(name='CrossBackupType'),
  logBackupEnabled?: string(name='LogBackupEnabled'),
  backupEnabled?: string(name='BackupEnabled'),
  crossBackupRegion?: string(name='CrossBackupRegion'),
  retentType?: int32(name='RetentType'),
  retention?: int32(name='Retention'),
}

model ModifyInstanceCrossBackupPolicyResponseBody = {
  backupEnabled?: string(name='BackupEnabled'),
  regionId?: string(name='RegionId'),
  logBackupEnabled?: string(name='LogBackupEnabled'),
  requestId?: string(name='RequestId'),
  retentType?: int32(name='RetentType'),
  crossBackupRegion?: string(name='CrossBackupRegion'),
  crossBackupType?: string(name='CrossBackupType'),
  retention?: int32(name='Retention'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ModifyInstanceCrossBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceCrossBackupPolicyResponseBody(name='body'),
}

async function modifyInstanceCrossBackupPolicyWithOptions(request: ModifyInstanceCrossBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyInstanceCrossBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceCrossBackupPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceCrossBackupPolicy(request: ModifyInstanceCrossBackupPolicyRequest): ModifyInstanceCrossBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceCrossBackupPolicyWithOptions(request, runtime);
}

model ModifyParameterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  parameters?: string(name='Parameters'),
  forcerestart?: boolean(name='Forcerestart'),
  ownerAccount?: string(name='OwnerAccount'),
  parameterGroupId?: string(name='ParameterGroupId'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameterWithOptions(request: ModifyParameterRequest, runtime: Util.RuntimeOptions): ModifyParameterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyParameter', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterWithOptions(request, runtime);
}

model ModifyParameterGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  parameterGroupId?: string(name='ParameterGroupId'),
  parameterGroupName?: string(name='ParameterGroupName'),
  parameterGroupDesc?: string(name='ParameterGroupDesc'),
  parameters?: string(name='Parameters'),
  regionId?: string(name='RegionId'),
}

model ModifyParameterGroupResponseBody = {
  parameterGroupId?: string(name='ParameterGroupId'),
  requestId?: string(name='RequestId'),
}

model ModifyParameterGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterGroupResponseBody(name='body'),
}

async function modifyParameterGroupWithOptions(request: ModifyParameterGroupRequest, runtime: Util.RuntimeOptions): ModifyParameterGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyParameterGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyParameterGroup(request: ModifyParameterGroupRequest): ModifyParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterGroupWithOptions(request, runtime);
}

model ModifyReadonlyInstanceDelayReplicationTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  readSQLReplicationTime?: string(name='ReadSQLReplicationTime'),
}

model ModifyReadonlyInstanceDelayReplicationTimeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  readSQLReplicationTime?: string(name='ReadSQLReplicationTime'),
}

model ModifyReadonlyInstanceDelayReplicationTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReadonlyInstanceDelayReplicationTimeResponseBody(name='body'),
}

async function modifyReadonlyInstanceDelayReplicationTimeWithOptions(request: ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime: Util.RuntimeOptions): ModifyReadonlyInstanceDelayReplicationTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyReadonlyInstanceDelayReplicationTime', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyReadonlyInstanceDelayReplicationTime(request: ModifyReadonlyInstanceDelayReplicationTimeRequest): ModifyReadonlyInstanceDelayReplicationTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReadonlyInstanceDelayReplicationTimeWithOptions(request, runtime);
}

model ModifyReadWriteSplittingConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  maxDelayTime?: string(name='MaxDelayTime'),
  distributionType?: string(name='DistributionType'),
  weight?: string(name='Weight'),
}

model ModifyReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReadWriteSplittingConnectionResponseBody(name='body'),
}

async function modifyReadWriteSplittingConnectionWithOptions(request: ModifyReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): ModifyReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyReadWriteSplittingConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyReadWriteSplittingConnection(request: ModifyReadWriteSplittingConnectionRequest): ModifyReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReadWriteSplittingConnectionWithOptions(request, runtime);
}

model ModifyResourceGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyResourceGroupResponseBody(name='body'),
}

async function modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyResourceGroup', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceGroupWithOptions(request, runtime);
}

model ModifySecurityGroupConfigurationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      networkType?: string(name='NetworkType'),
      securityGroupId?: string(name='SecurityGroupId'),
      regionId?: string(name='RegionId'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

async function modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupConfiguration', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupConfigurationWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityIps?: string(name='SecurityIps'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName'),
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute'),
  securityIPType?: string(name='SecurityIPType'),
  whitelistNetworkType?: string(name='WhitelistNetworkType'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifySecurityIpsResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityIps', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySQLCollectorPolicy', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model ModifySQLCollectorRetentionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  configValue?: string(name='ConfigValue'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifySQLCollectorRetentionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySQLCollectorRetentionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySQLCollectorRetentionResponseBody(name='body'),
}

async function modifySQLCollectorRetentionWithOptions(request: ModifySQLCollectorRetentionRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorRetentionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySQLCollectorRetention', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySQLCollectorRetention(request: ModifySQLCollectorRetentionRequest): ModifySQLCollectorRetentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorRetentionWithOptions(request, runtime);
}

model PurgeDBInstanceLogRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model PurgeDBInstanceLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model PurgeDBInstanceLogResponse = {
  headers: map[string]string(name='headers'),
  body: PurgeDBInstanceLogResponseBody(name='body'),
}

async function purgeDBInstanceLogWithOptions(request: PurgeDBInstanceLogRequest, runtime: Util.RuntimeOptions): PurgeDBInstanceLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PurgeDBInstanceLog', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function purgeDBInstanceLog(request: PurgeDBInstanceLogRequest): PurgeDBInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return purgeDBInstanceLogWithOptions(request, runtime);
}

model RebuildDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  DBInstanceId?: string(name='DBInstanceId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  rebuildNodeType?: string(name='RebuildNodeType'),
}

model RebuildDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
  migrationId?: int32(name='MigrationId'),
}

model RebuildDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebuildDBInstanceResponseBody(name='body'),
}

async function rebuildDBInstanceWithOptions(request: RebuildDBInstanceRequest, runtime: Util.RuntimeOptions): RebuildDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebuildDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebuildDBInstance(request: RebuildDBInstanceRequest): RebuildDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildDBInstanceWithOptions(request, runtime);
}

model RecoveryDBInstanceRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceStorage?: int32(name='DBInstanceStorage'),
  payType?: string(name='PayType'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetDBInstanceId?: string(name='TargetDBInstanceId'),
  dbNames?: string(name='DbNames'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  usedTime?: string(name='UsedTime'),
  period?: string(name='Period'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType'),
}

model RecoveryDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RecoveryDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RecoveryDBInstanceResponseBody(name='body'),
}

async function recoveryDBInstanceWithOptions(request: RecoveryDBInstanceRequest, runtime: Util.RuntimeOptions): RecoveryDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecoveryDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recoveryDBInstance(request: RecoveryDBInstanceRequest): RecoveryDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoveryDBInstanceWithOptions(request, runtime);
}

model ReleaseInstanceConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ReleaseInstanceConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceConnectionResponseBody(name='body'),
}

async function releaseInstanceConnectionWithOptions(request: ReleaseInstanceConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstanceConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstanceConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstanceConnection(request: ReleaseInstanceConnectionRequest): ReleaseInstanceConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceConnectionWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstancePublicConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ReleaseReadWriteSplittingConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ReleaseReadWriteSplittingConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseReadWriteSplittingConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseReadWriteSplittingConnectionResponseBody(name='body'),
}

async function releaseReadWriteSplittingConnectionWithOptions(request: ReleaseReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): ReleaseReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseReadWriteSplittingConnection', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseReadWriteSplittingConnection(request: ReleaseReadWriteSplittingConnectionRequest): ReleaseReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseReadWriteSplittingConnectionWithOptions(request, runtime);
}

model RemoveTagsFromResourceRequest {
  tag?: [
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='Tag'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  proxyId?: string(name='proxyId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  tags?: string(name='Tags'),
  ownerAccount?: string(name='OwnerAccount'),
}

model RemoveTagsFromResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagsFromResourceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsFromResourceResponseBody(name='body'),
}

async function removeTagsFromResourceWithOptions(request: RemoveTagsFromResourceRequest, runtime: Util.RuntimeOptions): RemoveTagsFromResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTagsFromResource', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTagsFromResource(request: RemoveTagsFromResourceRequest): RemoveTagsFromResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsFromResourceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  period?: int32(name='Period'),
  autoPay?: string(name='AutoPay'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ReplaceDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHostWithOptions(request: ReplaceDedicatedHostRequest, runtime: Util.RuntimeOptions): ReplaceDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReplaceDedicatedHost', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceDedicatedHostWithOptions(request, runtime);
}

model ResetAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ResetAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountResponseBody(name='body'),
}

async function resetAccountWithOptions(request: ResetAccountRequest, runtime: Util.RuntimeOptions): ResetAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccountPassword', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model RestartDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHostWithOptions(request: RestartDedicatedHostRequest, runtime: Util.RuntimeOptions): RestartDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDedicatedHost', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDedicatedHostWithOptions(request, runtime);
}

model RestoreDdrTableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  restoreType?: string(name='RestoreType'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  sourceRegion?: string(name='SourceRegion'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName'),
  tableMeta?: string(name='TableMeta'),
}

model RestoreDdrTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreDdrTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreDdrTableResponseBody(name='body'),
}

async function restoreDdrTableWithOptions(request: RestoreDdrTableRequest, runtime: Util.RuntimeOptions): RestoreDdrTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestoreDdrTable', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restoreDdrTable(request: RestoreDdrTableRequest): RestoreDdrTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreDdrTableWithOptions(request, runtime);
}

model RestoreTableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  backupId?: string(name='BackupId'),
  restoreTime?: string(name='RestoreTime'),
  ownerAccount?: string(name='OwnerAccount'),
  tableMeta?: string(name='TableMeta'),
}

model RestoreTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreTableResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreTableResponseBody(name='body'),
}

async function restoreTableWithOptions(request: RestoreTableRequest, runtime: Util.RuntimeOptions): RestoreTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestoreTable', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restoreTable(request: RestoreTableRequest): RestoreTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreTableWithOptions(request, runtime);
}

model RevokeAccountPrivilegeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
  DBName?: string(name='DBName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model RevokeAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeAccountPrivilegeResponseBody(name='body'),
}

async function revokeAccountPrivilegeWithOptions(request: RevokeAccountPrivilegeRequest, runtime: Util.RuntimeOptions): RevokeAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeAccountPrivilege', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeAccountPrivilegeWithOptions(request, runtime);
}

model RevokeOperatorPermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model RevokeOperatorPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeOperatorPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeOperatorPermissionResponseBody(name='body'),
}

async function revokeOperatorPermissionWithOptions(request: RevokeOperatorPermissionRequest, runtime: Util.RuntimeOptions): RevokeOperatorPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeOperatorPermission', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeOperatorPermissionWithOptions(request, runtime);
}

model StartDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  DBInstanceId?: string(name='DBInstanceId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog'),
  effectiveTime?: string(name='EffectiveTime'),
  specifiedTime?: string(name='SpecifiedTime'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass'),
  engineVersion?: string(name='EngineVersion'),
  DBInstanceTransType?: int32(name='DBInstanceTransType'),
  storage?: int32(name='Storage'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model StartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
  migrationId?: int32(name='MigrationId'),
}

model StartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartDBInstanceResponseBody(name='body'),
}

async function startDBInstanceWithOptions(request: StartDBInstanceRequest, runtime: Util.RuntimeOptions): StartDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDBInstance(request: StartDBInstanceRequest): StartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDBInstanceWithOptions(request, runtime);
}

model StopDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  regionId?: string(name='RegionId'),
}

model StopDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopDBInstanceResponseBody(name='body'),
}

async function stopDBInstanceWithOptions(request: StopDBInstanceRequest, runtime: Util.RuntimeOptions): StopDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDBInstance', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDBInstance(request: StopDBInstanceRequest): StopDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDBInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceHARequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
  force?: string(name='Force'),
  ownerAccount?: string(name='OwnerAccount'),
  effectiveTime?: string(name='EffectiveTime'),
}

model SwitchDBInstanceHAResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceHAResponseBody(name='body'),
}

async function switchDBInstanceHAWithOptions(request: SwitchDBInstanceHARequest, runtime: Util.RuntimeOptions): SwitchDBInstanceHAResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchDBInstanceHA', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceHAWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  connectionStringType?: string(name='ConnectionStringType'),
  ownerAccount?: string(name='OwnerAccount'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  newConnectionString?: string(name='NewConnectionString'),
  requestId?: string(name='RequestId'),
  oldConnectionString?: string(name='OldConnectionString'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchDBInstanceNetType', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model SwitchDBInstanceVpcRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
}

model SwitchDBInstanceVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchDBInstanceVpcResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceVpcResponseBody(name='body'),
}

async function switchDBInstanceVpcWithOptions(request: SwitchDBInstanceVpcRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchDBInstanceVpc', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchDBInstanceVpc(request: SwitchDBInstanceVpcRequest): SwitchDBInstanceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceVpcWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TerminateMigrateTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  migrateTaskId?: string(name='MigrateTaskId'),
}

model TerminateMigrateTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminateMigrateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateMigrateTaskResponseBody(name='body'),
}

async function terminateMigrateTaskWithOptions(request: TerminateMigrateTaskRequest, runtime: Util.RuntimeOptions): TerminateMigrateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TerminateMigrateTask', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function terminateMigrateTask(request: TerminateMigrateTaskRequest): TerminateMigrateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateMigrateTaskWithOptions(request, runtime);
}

model TransformDBInstancePayTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  usedTime?: int32(name='UsedTime'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  businessInfo?: string(name='BusinessInfo'),
}

model TransformDBInstancePayTypeResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  requestId?: string(name='RequestId'),
  expiredTime?: string(name='ExpiredTime'),
  orderId?: long(name='OrderId'),
  chargeType?: string(name='ChargeType'),
}

model TransformDBInstancePayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransformDBInstancePayTypeResponseBody(name='body'),
}

async function transformDBInstancePayTypeWithOptions(request: TransformDBInstancePayTypeRequest, runtime: Util.RuntimeOptions): TransformDBInstancePayTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransformDBInstancePayType', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transformDBInstancePayType(request: TransformDBInstancePayTypeRequest): TransformDBInstancePayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformDBInstancePayTypeWithOptions(request, runtime);
}

model UnlockAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
}

model UnlockAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockAccountResponseBody(name='body'),
}

async function unlockAccountWithOptions(request: UnlockAccountRequest, runtime: Util.RuntimeOptions): UnlockAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockAccount', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockAccount(request: UnlockAccountRequest): UnlockAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockAccountWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateUserBackupFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  backupId?: string(name='BackupId'),
  regionId?: string(name='RegionId'),
  comment?: string(name='Comment'),
  retention?: int32(name='Retention'),
}

model UpdateUserBackupFileResponseBody = {
  backupId?: string(name='BackupId'),
  requestId?: string(name='RequestId'),
}

model UpdateUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserBackupFileResponseBody(name='body'),
}

async function updateUserBackupFileWithOptions(request: UpdateUserBackupFileRequest, runtime: Util.RuntimeOptions): UpdateUserBackupFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUserBackupFile', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUserBackupFile(request: UpdateUserBackupFileRequest): UpdateUserBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserBackupFileWithOptions(request, runtime);
}

model UpgradeDBInstanceEngineVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  engineVersion?: string(name='EngineVersion'),
  ownerAccount?: string(name='OwnerAccount'),
  effectiveTime?: string(name='EffectiveTime'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceEngineVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBInstanceEngineVersion', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceEngineVersionWithOptions(request, runtime);
}

model UpgradeDBInstanceKernelVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  upgradeTime?: string(name='UpgradeTime'),
  switchTime?: string(name='SwitchTime'),
  targetMinorVersion?: string(name='TargetMinorVersion'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  targetMinorVersion?: string(name='TargetMinorVersion'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceKernelVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBInstanceKernelVersion', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceKernelVersionWithOptions(request, runtime);
}

model UpgradeDBProxyInstanceKernelVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  upgradeTime?: string(name='UpgradeTime'),
  switchTime?: string(name='SwitchTime'),
}

model UpgradeDBProxyInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model UpgradeDBProxyInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBProxyInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBProxyInstanceKernelVersionWithOptions(request: UpgradeDBProxyInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBProxyInstanceKernelVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBProxyInstanceKernelVersion', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBProxyInstanceKernelVersion(request: UpgradeDBProxyInstanceKernelVersionRequest): UpgradeDBProxyInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBProxyInstanceKernelVersionWithOptions(request, runtime);
}

