/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hsm';
  @version = '2023-11-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConfigAuditLogRequest {
  auditAction: string(name='AuditAction', description='The status of the audit log feature.

*   enable
*   disable', example='enable', position='Query'),
  auditOssBucket?: string(name='AuditOssBucket', description='The bucket to which audit logs are delivered.', example='hsm-log', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ConfigAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='42B118FB-16A6-56FB-B877-D58637EEC6AF'),
}

model ConfigAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigAuditLogResponseBody(name='body'),
}

/**
  * *   The region of the bucket must be the same as the region where the security audit feature is enabled.
  * *   If the security audit feature is enabled, do not delete Object Storage Service (OSS) buckets. If you delete OSS buckets, audit logs fail to be delivered.
  * *   Only electronic virtual security modules (EVSMs) and general virtual security modules (GVSMs) within the Chinese mainland support the security audit feature.
  *
 */
async function configAuditLog(request: ConfigAuditLogRequest): ConfigAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ConfigBackupRemarkRequest {
  backupId: string(name='BackupId', example='backup-fdb897sdfg****', position='Query'),
  name?: string(name='Name', example='backup-test', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ConfigBackupRemarkResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupRemarkResponseBody(name='body'),
}

async function configBackupRemark(request: ConfigBackupRemarkRequest): ConfigBackupRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigBackupRemark', 'POST', '/', 'json', false, 'json', request);
}

model ConfigBackupTaskRequest {
  backupHourInDay: long(name='BackupHourInDay', example='12', minimum=0, maximum=23, position='Query'),
  backupId: string(name='BackupId', example='backup-173620705****', position='Query'),
  backupPeriod: long(name='BackupPeriod', example='3', minimum=1, maximum=30, position='Query'),
  manual2PeriodicList?: [ string ](name='Manual2PeriodicList', position='Query'),
  periodic2ManualList?: [ string ](name='Periodic2ManualList', position='Query'),
}

model ConfigBackupTaskResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupTaskResponseBody(name='body'),
}

async function configBackupTask(request: ConfigBackupTaskRequest): ConfigBackupTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigBackupTask', 'POST', '/', 'json', false, 'json', request);
}

model ConfigClusterCertificateRequest {
  clusterCertificate: string(name='ClusterCertificate', example='-----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****-----END CERTIFICATE-----', position='Body'),
  clusterId: string(name='ClusterId', example='cluster-BqxX63Bsg****', position='Body'),
  issuerCertificate: string(name='IssuerCertificate', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----', position='Body'),
}

model ConfigClusterCertificateResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterCertificateResponseBody(name='body'),
}

async function configClusterCertificate(request: ConfigClusterCertificateRequest): ConfigClusterCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterNameRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-BqxX63Bsgfaisdf****', position='Body'),
  clusterName: string(name='ClusterName', description='The cluster name.', example='cluster_on****', position='Body'),
}

model ConfigClusterNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterNameResponseBody(name='body'),
}

async function configClusterName(request: ConfigClusterNameRequest): ConfigClusterNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterName', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterSubnetRequest {
  clusterId: string(name='ClusterId', example='cluster-BqxX63Bsg****', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
  vSwitchIds: [ string ](name='VSwitchIds', shrink='json', position='Body'),
  vpcId: string(name='VpcId', example='vpc-7xvkh90cw39p0****', position='Body'),
}

model ConfigClusterSubnetResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model ConfigClusterSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterSubnetResponseBody(name='body'),
}

async function configClusterSubnet(request: ConfigClusterSubnetRequest): ConfigClusterSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterSubnet', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterWhitelistRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-729dm40FG****', position='Body'),
  whitelist: string(name='Whitelist', description='The IP address whitelist of the cluster.', example='18.68.XX.XX', position='Body'),
}

model ConfigClusterWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterWhitelistResponseBody(name='body'),
}

/**
  * The IP address whitelist of a cluster has a higher priority than the IP address whitelist of a hardware security module (HSM) in the cluster. In cluster mode, we recommend that you create an IP address whitelist for your cluster. In this case, you do not need to create an IP address for the HSM in the cluster.
  *
 */
async function configClusterWhitelist(request: ConfigClusterWhitelistRequest): ConfigClusterWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model ConfigImageRemarkRequest {
  imageId: string(name='ImageId', example='image-d79x4k11pmg19****', position='Query'),
  remark: string(name='Remark', example='hsm-****', position='Query'),
}

model ConfigImageRemarkResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigImageRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigImageRemarkResponseBody(name='body'),
}

async function configImageRemark(request: ConfigImageRemarkRequest): ConfigImageRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigImageRemark', 'POST', '/', 'json', false, 'json', request);
}

model ConfigInstanceIpAddressRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-mp90fxef****', position='Body'),
  ip: string(name='Ip', description='The IP address of the HSM in the VPC.', example='192.168.XX.XX', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
  vSwitchId: string(name='VSwitchId', description='The vSwitch ID of the subnet to which the HSM belongs.', example='vsw-u7gb0qahu****', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the VPC to which the HSM belongs.', example='vpc-lmkmivmo6****', position='Body'),
}

model ConfigInstanceIpAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceIpAddressResponseBody(name='body'),
}

/**
  * After you add an HSM to a cluster, you cannot modify the VPC endpoint of the HSM.
  *
 */
async function configInstanceIpAddress(request: ConfigInstanceIpAddressRequest): ConfigInstanceIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model ConfigInstanceRemarkRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil8****', position='Body'),
  remark: string(name='Remark', description='The description.', example='hsmOnline', position='Body'),
}

model ConfigInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceRemarkResponseBody(name='body'),
}

async function configInstanceRemark(request: ConfigInstanceRemarkRequest): ConfigInstanceRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceRemark', 'POST', '/', 'json', true, 'form', request);
}

model ConfigInstanceWhitelistRequest {
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8****', position='Body'),
  whitelist: string(name='Whitelist', example='18.68.XX.XX,18.68.XX.XX', position='Body'),
}

model ConfigInstanceWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceWhitelistResponseBody(name='body'),
}

async function configInstanceWhitelist(request: ConfigInstanceWhitelistRequest): ConfigInstanceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model CopyImageRequest {
  imageUid?: string(name='ImageUid', example='image-hafiudfahdd****', position='Body'),
  targetRegionId?: string(name='TargetRegionId', example='cn-beijing', position='Body'),
}

model CopyImageResponseBody = {
  completed?: boolean(name='Completed', example='true'),
  createTime?: string(name='CreateTime', example='1724379766191'),
  error?: string(name='Error', example='OperationTimeout'),
  jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
  progress?: int32(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
  response?: string(name='Response', example='success'),
  status?: string(name='Status', example='running'),
  type?: string(name='Type', example='create'),
}

model CopyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyImageResponseBody(name='body'),
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyImage', 'POST', '/', 'json', true, 'form', request);
}

model CreateClusterRequest {
  clusterName: string(name='ClusterName', description='The cluster name.', example='cluster_on****', position='Body'),
  masterInstanceId: string(name='MasterInstanceId', description='The HSM ID.', example='hsm_intl-sg-uz63ixak****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-729dm40FG****'),
  requestId?: string(name='RequestId', description='The request ID.', example='5F58413E-8F57-585B-BE48-64CC1E31133C'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * The master HSM that you specify to create a cluster must be in the ACTIVE state.
  *
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-NZB9Oj5Yfd8Y****', position='Body'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
  * You can delete a cluster only when no hardware security modules (HSMs) exist in the cluster.
  *
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: [ 
        {
          cluster?: string(name='Cluster', example='yes'),
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model EnableBackupRequest {
  backupId: string(name='BackupId', example='backup-1736207****', position='Query'),
  instanceId: string(name='InstanceId', example='hsm-cn-mp90fxef****', position='Query'),
}

model EnableBackupResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model EnableBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableBackupResponseBody(name='body'),
}

async function enableBackup(request: EnableBackupRequest): EnableBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBackup', 'POST', '/', 'json', false, 'json', request);
}

model ExportImageRequest {
  imageId: string(name='ImageId', example='image-8vbdd5uc6v10ecn5****', position='Query'),
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8****', position='Query'),
}

model ExportImageResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    error?: string(name='Error', example='Job.Canceled'),
    jobId?: string(name='JobId', example='b1748ca6-6b55-49f4-a6d4-2d694a9f3693'),
    process?: int32(name='Process', example='100'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='running'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ExportImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportImageResponseBody(name='body'),
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportImage', 'POST', '/', 'json', false, 'json', request);
}

model GetAuditLogStatusRequest {
  getOssBucket?: boolean(name='GetOssBucket', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetAuditLogStatusResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus', example='enable'),
  auditOssBucket?: string(name='AuditOssBucket', example='bucket-test'),
  grantedServiceAccess?: boolean(name='GrantedServiceAccess', example='true'),
  ossBuckets?: [ string ](name='OssBuckets'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
  success?: boolean(name='Success', example='true'),
}

model GetAuditLogStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditLogStatusResponseBody(name='body'),
}

async function getAuditLogStatus(request: GetAuditLogStatusRequest): GetAuditLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuditLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupRequest {
  backupId?: string(name='BackupId', example='backup-fdb897sdf****', position='Query'),
}

model GetBackupResponseBody = {
  backup?: {
    autoImageCount?: long(name='AutoImageCount', example='1'),
    backupHourInDay?: string(name='BackupHourInDay', example='10'),
    backupId?: string(name='BackupId', example='backup-fdb897sdf****'),
    backupPeriod?: long(name='BackupPeriod', example='3'),
    createTime?: long(name='CreateTime', example='1682417553781'),
    expireTime?: long(name='ExpireTime', example='1682417553781'),
    instanceId?: string(name='InstanceId', example='hsm-cn-5yd35431****'),
    maxImageCount?: string(name='MaxImageCount', example='3'),
    name?: string(name='Name', example='backup-te****'),
    nextImageCreateTime?: long(name='NextImageCreateTime', example='1682417553781'),
    ownerInstanceId?: string(name='OwnerInstanceId', example='hsm-cn-huoahd****'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    releaseTime?: long(name='ReleaseTime', example='1641275680000'),
    remark?: string(name='Remark', example='test'),
    spInstanceId?: string(name='SpInstanceId', example='backup-fdb897sdfg53****'),
    status?: string(name='Status', example='NEW'),
    type?: string(name='Type', example='DEFAULT'),
  }(name='Backup'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupResponseBody(name='body'),
}

async function getBackup(request: GetBackupRequest): GetBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackup', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-p94y1dud9ts****', position='Body'),
}

model GetClusterResponseBody = {
  cluster?: {
    clusterCertificate?: string(name='ClusterCertificate', description='The cluster certificate.', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----'),
    clusterCsr?: string(name='ClusterCsr', description='The certificate signing request (CSR) file of the cluster.', example='-----BEGIN CERTIFICATE REQUEST-----\\nMIIC5TCCAc0CAQAwgZ8xWTAJBgNVBAYTAlVTMAkGA1UECAwCQ0EwDQYDVQQKDAZD\\nYXZpdW0wDQYDVQQLDAZOM0ZJUFMwDgYDVQQHDAdTYW5Kb3NlMBMGA1UdEQwMMTk****
-----END CERTIFICATE REQUEST-----'),
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-p94y1dud9ts****'),
    clusterName?: string(name='ClusterName', description='The cluster name.', example='cluster_polar_****'),
    clusterOwnerCertificate?: string(name='ClusterOwnerCertificate', description='The self-signed certificate of the cluster.', example='----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****
-----END CERTIFICATE-----'),
    createTime?: long(name='CreateTime', description='The time when the cluster was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1641275680000'),
    deviceType?: string(name='DeviceType', description='The device type.', example='jnta'),
    instances?: [ 
      {
        instanceId?: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-g6z3v0uf****'),
        master?: boolean(name='Master', description='Indicates whether the HSM is the master HSM.

*   true
*   false', example='true'),
        nodeId?: int32(name='NodeId', description='The sequence number of the HSM in the cluster.', example='1'),
      }
    ](name='Instances', description='The HSMs in the cluster.'),
    regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
    size?: int32(name='Size', description='The number of hardware security modules (HSMs) in the cluster.', example='2'),
    status?: string(name='Status', description='The cluster status.

*   NEW: The cluster is not initialized.
*   INITIALIZED: The cluster is initialized.
*   DELETED: The cluster is deleted.
*   SYNCHRONIZING: The cluster is being synchronized.
*   TO_DELETE: The cluster is to be deleted.', example='NEW'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the cluster belongs.', example='vpc-8vbt0fjdm29hofvbo****'),
    whitelist?: string(name='Whitelist', description='The IP address whitelist of the cluster.', example='130.176.XX.XX'),
    zones?: [ 
      {
        vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-uf61s651p69bdgmki****'),
        zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-j'),
      }
    ](name='Zones', description='The information about the zone in which the cluster is deployed.'),
  }(name='Cluster', description='The information about the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCluster', 'POST', '/', 'json', true, 'form', request);
}

model GetImageRequest {
  imageId: string(name='ImageId', example='image-wz9c5ths5dfuwx47****', position='Query'),
}

model GetImageResponseBody = {
  image?: {
    backupId?: string(name='BackupId', example='backup-1618017313'),
    copyTime?: long(name='CopyTime', example='1641275680000'),
    exportTime?: long(name='ExportTime', example='1786776567788'),
    imageId?: string(name='ImageId', example='image-wz9c5ths5dfuwx47****'),
    instanceId?: string(name='InstanceId', example='hsm-cn-9lb32vll****'),
    mode?: string(name='Mode', example='MANUAL'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    remark?: string(name='Remark', example='hsm-test'),
    sourceBackupUid?: string(name='SourceBackupUid', example='backup-gfuiasdfa****'),
    sourceImageUid?: string(name='SourceImageUid', example='image-kklhhhh****'),
    sourceInstanceId?: string(name='SourceInstanceId', example='hsm-wz9fnmvx190shfbk****'),
    sourceRegionId?: string(name='SourceRegionId', example='cn-beijing'),
    status?: string(name='Status', example='NEW'),
    vsmDigest?: string(name='VsmDigest', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
  }(name='Image'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImage', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil****', position='Body'),
}

model GetInstanceResponseBody = {
  instance?: {
    clusterId?: string(name='ClusterId', description='The ID of the cluster to which the HSM belongs.', example='cluster-w3G9vOJI2****'),
    clusterName?: string(name='ClusterName', description='The cluster name.', example='cluster_online'),
    createTime?: long(name='CreateTime', description='The time when the HSM was created.', example='1699515963000'),
    deviceType?: string(name='DeviceType', description='The device type.', example='jnta.SJJ1528-G'),
    expireTime?: long(name='ExpireTime', description='The time when the instance expired.', example='1699496389720'),
    instanceId?: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-g4t3jwsc****'),
    ip?: string(name='Ip', description='The IP address of the HSM in the VPC.', example='10.192.XX.XX'),
    isTrial?: boolean(name='IsTrial', description='Indicates whether the HSM is for trial use. Valid values:

*   true
*   false', example='false'),
    master?: boolean(name='Master', description='Indicates whether the HSM is the master HSM.

*   true
*   false', example='true'),
    orderId?: string(name='OrderId', description='The order ID.', example='23576634952****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    remark?: string(name='Remark', description='The HSM description.', example='hsmOnline'),
    status?: string(name='Status', description='The HSM status.

*   PENDING
*   ACTIVE
*   EXPIRED
*   INVALID
*   FAILURE
*   RESET
*   PAUSED
*   MODIFYING', example='EXPIRED'),
    tenantIsolationType?: string(name='TenantIsolationType'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch configured for the HSM.', example='vsw-bp1mvfs31ltt0wyhf****'),
    vendor?: string(name='Vendor', description='The vendor information.', example='jnta'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the HSM belongs.', example='vpc-uf69i66j9kmoko52p****'),
    whitelist?: string(name='Whitelist', description='The IP address whitelist of the HSM.', example='18.68.XX.XX'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-b'),
  }(name='Instance', description='The HSM details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetJobRequest {
  jobId: string(name='JobId', example='job-202401250936hze747fd7e0007005', position='Query'),
}

model GetJobResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    error?: string(name='Error', example='OperationTimeout'),
    jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
    progress?: long(name='Progress', example='95'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='fail'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJob', 'POST', '/', 'json', false, 'json', request);
}

model InitializeAuditLogRequest {
}

model InitializeAuditLogResponseBody = {
  requestId?: string(name='RequestId', example='4FE969D9-E1C7-5274-BE7D-8C3534587605'),
}

model InitializeAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeAuditLogResponseBody(name='body'),
}

async function initializeAuditLog(request: InitializeAuditLogRequest): InitializeAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model InitializeClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-p94y1dud9****', position='Body'),
}

model InitializeClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model InitializeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeClusterResponseBody(name='body'),
}

/**
  * *   The cluster is not initialized, but the master hardware security module (HSM) of the cluster is initialized.
  * *   Two or more vSwitches are configured for the cluster.
  *
 */
async function initializeCluster(request: InitializeClusterRequest): InitializeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeCluster', 'POST', '/', 'json', true, 'form', request);
}

model JoinClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-NZB9Oj5Yfd8Y****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM that you want to add to the cluster.', example='hsm-cn-vj30bil8****', position='Body'),
}

model JoinClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The task ID.', example='job-202401250936hze747fd7e0007005'),
    progress?: int32(name='Progress', description='The task progress. Unit: percent (%).', example='86'),
    response?: string(name='Response', description='The response parameters.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='running'),
    type?: string(name='Type', description='The type of the action.

*   create: creates a task.
*   cancel: cancels a task.', example='create'),
  }(name='Job', description='The task details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model JoinClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinClusterResponseBody(name='body'),
}

/**
  * You can add an HSM only to the cluster that is in the INITIALIZED state, and the HSM must be enabled or disabled and is not initialized.
  *
 */
async function joinCluster(request: JoinClusterRequest): JoinClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinCluster', 'POST', '/', 'json', true, 'form', request);
}

model LeaveClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-729dm40FG****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM that you want to remove from the cluster.', example='hsm-cn-mp90fxef****', position='Body'),
}

model LeaveClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model LeaveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LeaveClusterResponseBody(name='body'),
}

/**
  * *   If non-master HSMs exist in a cluster, you cannot remove the master HSM from the cluster.
  * *   After the master HSM is removed from a cluster, the cluster enters the TO_DELETE state and cannot be restored to be available. Proceed with caution.
  *
 */
async function leaveCluster(request: LeaveClusterRequest): LeaveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveCluster', 'POST', '/', 'json', true, 'form', request);
}

model ListBackupsRequest {
  backupId?: string(name='BackupId', example='backup-1648438****', position='Query'),
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  instanceId?: string(name='InstanceId', example='hsm-cn-vj30bil8****', position='Query'),
  name?: string(name='Name', example='hsm-te****', position='Query'),
  pageSize: long(name='PageSize', example='20', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListBackupsResponseBody = {
  backups?: [ 
    {
      autoImageCount?: long(name='AutoImageCount', example='1'),
      backupHourInDay?: string(name='BackupHourInDay', example='13'),
      backupId?: string(name='BackupId', example='backup-1648438****'),
      backupPeriod?: long(name='BackupPeriod', example='3'),
      createTime?: long(name='CreateTime', example='1637229596000'),
      expireTime?: long(name='ExpireTime', example='1682417553781'),
      instanceId?: string(name='InstanceId', example='hsm-cn-vj30bil8****'),
      maxImageCount?: string(name='MaxImageCount', example='3'),
      name?: string(name='Name', example='backup-te****'),
      nextImageCreateTime?: long(name='NextImageCreateTime', example='1682417553781'),
      ownerInstanceId?: string(name='OwnerInstanceId', example='hsm-cn-vj30bil8****'),
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      releaseTime?: long(name='ReleaseTime', example='1641275680000'),
      remark?: string(name='Remark', example='normal backup'),
      spInstanceId?: string(name='SpInstanceId', example='backup-fdb897sdfg534-****'),
      status?: string(name='Status', example='ENABLED'),
      type?: string(name='Type', example='NORMAL'),
    }
  ](name='Backups'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model ListBackupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBackupsResponseBody(name='body'),
}

async function listBackups(request: ListBackupsRequest): ListBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBackups', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  currentPage: int32(name='CurrentPage', description='The page number.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-w3G9vOJI2****'),
      status?: string(name='Status', description='The cluster status.

*   NEW: not initialized
*   INITIALIZED: initialized
*   DELETED: deleted
*   SYNCHRONIZING: being synchronized
*   TO_DELETE: pending deletion', example='INITIALIZED'),
    }
  ](name='Clusters', description='Details of the clusters.'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of entries returned.', example='114'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', true, 'form', request);
}

model ListImagesRequest {
  backupId: string(name='BackupId', example='backup-fdb897sdf****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  mode?: string(name='Mode', example='MANUAL', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListImagesResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  images?: [ 
    {
      backupId?: string(name='BackupId', example='backup-fdb897sdf****'),
      copyTime?: string(name='CopyTime', example='1641275680000'),
      exportTime?: long(name='ExportTime', example='1782849566738'),
      imageId?: string(name='ImageId', example='image-d79x4k11pmg19****'),
      instanceId?: string(name='InstanceId', example='hsm-cn-6ja1xknf****'),
      mode?: string(name='Mode', example='MANUAL'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      remark?: string(name='Remark', example='hsm-test'),
      sourceBackupUid?: string(name='SourceBackupUid', example='backup-hodfhaol****'),
      sourceImageUid?: string(name='SourceImageUid', example='image-ooopjygsn****'),
      sourceInstanceId?: string(name='SourceInstanceId', example='hsm-cn-wz9i2dmefudfxtmb****'),
      sourceRegionId?: string(name='SourceRegionId', example='cn-shanghai'),
      status?: string(name='Status', example='CREATING'),
      vsmDigest?: string(name='VsmDigest', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
    }
  ](name='Images'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', example='1000'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
  tenantIsolationType?: string(name='TenantIsolationType', position='Body'),
}

model ListInstancesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil8****'),
      status?: string(name='Status', description='The HSM status. PENDING ACTIVE EXPIRED INVALID FAILURE RESET PAUSED MODIFYING', example='ACTIVE'),
    }
  ](name='Instances', description='The HSMs.'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of entries returned.', example='80'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceGroupRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', example='rg-aek2tsvbnfe****', position='Query'),
  resourceId: string(name='ResourceId', example='hsm-2ze0qae64mjuc0ni****', position='Query'),
  resourceType: string(name='ResourceType', example='instance', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model PauseInstanceRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil8****', position='Body'),
}

model PauseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model PauseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseInstanceResponseBody(name='body'),
}

/**
  * After you deactivate an HSM, the relevant service operations fail. Proceed with caution.
  *
 */
async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseInstance', 'POST', '/', 'json', true, 'form', request);
}

model QuickInitInstanceRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-mp90fxef****', position='Body'),
}

model QuickInitInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1699515963000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The task ID.', example='job-000fi9k1v2hclo321sal'),
    progress?: int32(name='Progress', description='The task progress. Unit: percent (%).', example='100'),
    response?: string(name='Response', description='The response parameters.', example='success'),
    status?: string(name='Status', description='The task status. Valid values: success running cancel fail', example='success'),
    type?: string(name='Type', description='The type of the SQL statement. Valid values: create: creates a task. cancel: cancels a task.', example='create'),
  }(name='Job', description='The task details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model QuickInitInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuickInitInstanceResponseBody(name='body'),
}

/**
  * This operation is supported only for general virtual security modules (GVSMs) that are deployed in regions in the Chinese mainland.
  *
 */
async function quickInitInstance(request: QuickInitInstanceRequest): QuickInitInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuickInitInstance', 'POST', '/', 'json', true, 'form', request);
}

model ResetBackupRequest {
  backupId?: string(name='BackupId', example='backup-fdb897sdfg5****', position='Query'),
}

model ResetBackupResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetBackupResponseBody(name='body'),
}

async function resetBackup(request: ResetBackupRequest): ResetBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetBackup', 'POST', '/', 'json', false, 'json', request);
}

model ResetInstanceRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil8****', position='Body'),
}

model ResetInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1653274407000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The task ID.', example='job-0007bl8oev0u3jqyfu6a'),
    progress?: int32(name='Progress', description='The task progress. Unit: percent (%).', example='80'),
    response?: string(name='Response', description='The response parameters.', example='success'),
    status?: string(name='Status', description='The task status. Valid values: success running cancel fail', example='success'),
    type?: string(name='Type', description='The type of the action. create: creates a task. cancel: cancels a task.', example='create'),
  }(name='Job', description='The task details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetInstanceResponseBody(name='body'),
}

/**
  * After an HSM is reset, all related data is deleted and cannot be recovered. Exercise caution.
  *
 */
async function resetInstance(request: ResetInstanceRequest): ResetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetInstance', 'POST', '/', 'json', true, 'form', request);
}

model RestoreInstanceRequest {
  imageId: string(name='ImageId', description='The ID of the image that you want to use to restore the HSM.', example='image-eaOGHkRDQgh4****', position='Body'),
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-mp90fxef****', position='Body'),
}

model RestoreInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The task ID.', example='job-540356379023708160'),
    progress?: int32(name='Progress', description='The task progress. Unit: percent (%).', example='50'),
    response?: string(name='Response', description='The response returned if the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:', example='success'),
    type?: string(name='Type', description='The type of the action. Valid values: create: creates a task. cancel: cancels a task.', example='create'),
  }(name='Job', description='The task details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model RestoreInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreInstanceResponseBody(name='body'),
}

/**
  * You can use images to restore only HSMs that are suspended or deactivated.
  *
 */
async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreInstance', 'POST', '/', 'json', true, 'form', request);
}

model ResumeInstanceRequest {
  instanceId: string(name='InstanceId', description='The HSM ID.', example='hsm-cn-vj30bil8****', position='Body'),
}

model ResumeInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeInstance', 'POST', '/', 'json', true, 'form', request);
}

model SwitchClusterMasterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-w3G9vOJI2****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM that you want to promote to the master HSM.', example='hsm-cn-vj30bil8****', position='Body'),
}

model SwitchClusterMasterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SwitchClusterMasterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchClusterMasterResponseBody(name='body'),
}

async function switchClusterMaster(request: SwitchClusterMasterRequest): SwitchClusterMasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchClusterMaster', 'POST', '/', 'json', true, 'form', request);
}

model SyncClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cluster-BqxX63Bsgytet****', position='Body'),
}

model SyncClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The task ID.', example='job-000bu7m5vjmyz9s7qz85'),
    progress?: int32(name='Progress', description='The task progress. Unit: percent (%).', example='90'),
    response?: string(name='Response', description='The response parameters.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The type of the action.

*   create: creates a task.
*   cancel: cancels a task.', example='create'),
  }(name='Job', description='The task details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SyncClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncClusterResponseBody(name='body'),
}

/**
  * This operation is supported only for hardware security modules (HSMs) that are created in regions in the Chinese mainland.
  *
 */
async function syncCluster(request: SyncClusterRequest): SyncClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncCluster', 'POST', '/', 'json', true, 'form', request);
}

