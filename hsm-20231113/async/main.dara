/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hsm';
  @version = '2023-11-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConfigAuditLogRequest {
  auditAction: string(name='AuditAction', description='Specifies whether to enable the audit log feature. Valid values:

*   enable
*   disable

This parameter is required.', example='enable', position='Query'),
  auditOssBucket?: string(name='AuditOssBucket', description='The bucket to which audit logs are delivered.', example='hsm-log', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ConfigAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='42B118FB-16A6-56FB-B877-D58637EEC6AF'),
}

model ConfigAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigAuditLogResponseBody(name='body'),
}

/**
  * @description *   The region of the bucket must be the same as the region where the security audit feature is enabled.
  * *   If the security audit feature is enabled, do not delete Object Storage Service (OSS) buckets. If you delete OSS buckets, audit logs fail to be delivered.
  * *   Only electronic virtual security modules (EVSMs) and general virtual security modules (GVSMs) within the Chinese mainland support the security audit feature.
  * @param request  the request parameters of ConfigAuditLog  ConfigAuditLogRequest
  * @return ConfigAuditLogResponse
 */
async function configAuditLog(request: ConfigAuditLogRequest): ConfigAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ConfigBackupRemarkRequest {
  backupId: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-fdb897sdfg****', position='Query'),
  name?: string(name='Name', description='The name of the backup.', example='backup-test', position='Query'),
  remark?: string(name='Remark', description='The description of the backup.', example='Test backup.', position='Query'),
}

model ConfigBackupRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupRemarkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigBackupRemark  ConfigBackupRemarkRequest
  * @return ConfigBackupRemarkResponse
 */
async function configBackupRemark(request: ConfigBackupRemarkRequest): ConfigBackupRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigBackupRemark', 'POST', '/', 'json', false, 'json', request);
}

model ConfigBackupTaskRequest {
  backupHourInDay: long(name='BackupHourInDay', description='The backup time in the 24-hour format. Valid values: 1 to 24.

Enumeration values:

*   0
*   1
*   2
*   3
*   4
*   5
*   6
*   7
*   8
*   9
*   10
*   11
*   12
*   13
*   14
*   15
*   16
*   17
*   18
*   19
*   20
*   21
*   22
*   23

This parameter is required.', example='12', minimum=0, maximum=23, position='Query'),
  backupId: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-173620705****', position='Query'),
  backupPeriod: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days. Valid values: 1, 3, 7, and 30.

This parameter is required.', example='3', minimum=1, maximum=30, position='Query'),
  manual2PeriodicList?: [ string ](name='Manual2PeriodicList', description='The IDs of images for which the manual backup mode is updated to the automatic backup mode.', position='Query'),
  periodic2ManualList?: [ string ](name='Periodic2ManualList', description='The IDs of images for which the automatic backup mode is updated to the manual backup mode.', position='Query'),
}

model ConfigBackupTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupTaskResponseBody(name='body'),
}

/**
  * @description Only hardware security modules (HSMs) in the Chinese mainland support the operation.
  * @param request  the request parameters of ConfigBackupTask  ConfigBackupTaskRequest
  * @return ConfigBackupTaskResponse
 */
async function configBackupTask(request: ConfigBackupTaskRequest): ConfigBackupTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigBackupTask', 'POST', '/', 'json', false, 'json', request);
}

model ConfigClusterCertificateRequest {
  clusterCertificate: string(name='ClusterCertificate', description='The cluster certificate.

This parameter is required.', example='-----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****-----END CERTIFICATE-----', position='Body'),
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsg****', position='Body'),
  issuerCertificate: string(name='IssuerCertificate', description='The self-signed certificate.

This parameter is required.', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----', position='Body'),
}

model ConfigClusterCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterCertificateResponseBody(name='body'),
}

/**
  * @description For more information about how to create a self-signed certificate and a cluster certificate on an Elastic Compute Service (ECS) instance, see [Create a NIST FIPS-validated GVSM cluster](https://help.aliyun.com/document_detail/293585.html).
  * @param request  the request parameters of ConfigClusterCertificate  ConfigClusterCertificateRequest
  * @return ConfigClusterCertificateResponse
 */
async function configClusterCertificate(request: ConfigClusterCertificateRequest): ConfigClusterCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterNameRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsgfaisdf****', position='Body'),
  clusterName: string(name='ClusterName', description='The name of the cluster.

This parameter is required.', example='cluster_on****', position='Body'),
}

model ConfigClusterNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigClusterName  ConfigClusterNameRequest
  * @return ConfigClusterNameResponse
 */
async function configClusterName(request: ConfigClusterNameRequest): ConfigClusterNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterName', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterSubnetRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster. You can call the ListCluster operation to obtain cluster IDs.

This parameter is required.', example='cluster-BqxX63Bsg****', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Body'),
  vSwitchIds: [ string ](name='VSwitchIds', description='A list of vSwitches that are associated with the cluster. Note: You must include all vSwitches that you want to associate with the cluster.

This parameter is required.', shrink='json', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC).

This parameter is required.', example='vpc-7xvkh90cw39p0****', position='Body'),
}

model ConfigClusterSubnetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model ConfigClusterSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterSubnetResponseBody(name='body'),
}

/**
  * @description You can call the operation to configure all vSwitches that are associated with a HSM cluster. You can only add new vSwitches. You cannot delete vSwitches.
  * @param request  the request parameters of ConfigClusterSubnet  ConfigClusterSubnetRequest
  * @return ConfigClusterSubnetResponse
 */
async function configClusterSubnet(request: ConfigClusterSubnetRequest): ConfigClusterSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterSubnet', 'POST', '/', 'json', true, 'form', request);
}

model ConfigClusterWhitelistRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-729dm40FG****', position='Body'),
  whitelist: string(name='Whitelist', description='The IP address whitelist of the cluster.

This parameter is required.', example='18.68.XX.XX', position='Body'),
}

model ConfigClusterWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterWhitelistResponseBody(name='body'),
}

/**
  * @description The IP address whitelist of a cluster has a higher priority than the IP address whitelist of a hardware security module (HSM) in the cluster. In cluster mode, we recommend that you create an IP address whitelist for your cluster. You do not need to create an IP address for the HSM in the cluster.
  * @param request  the request parameters of ConfigClusterWhitelist  ConfigClusterWhitelistRequest
  * @return ConfigClusterWhitelistResponse
 */
async function configClusterWhitelist(request: ConfigClusterWhitelistRequest): ConfigClusterWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model ConfigImageRemarkRequest {
  imageId: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-d79x4k11pmg19****', position='Query'),
  remark: string(name='Remark', description='The description of the image.

This parameter is required.', example='hsm-****', position='Query'),
}

model ConfigImageRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigImageRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigImageRemarkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigImageRemark  ConfigImageRemarkRequest
  * @return ConfigImageRemarkResponse
 */
async function configImageRemark(request: ConfigImageRemarkRequest): ConfigImageRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigImageRemark', 'POST', '/', 'json', false, 'json', request);
}

model ConfigInstanceIpAddressRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****', position='Body'),
  ip: string(name='Ip', description='The endpoint of the VPC to which the HMS belongs.

This parameter is required.', example='192.168.XX.XX', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Body'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which the HMS belongs.

This parameter is required.', example='vsw-u7gb0qahu****', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the VPC to which the HMS belongs.

This parameter is required.', example='vpc-lmkmivmo6****', position='Body'),
}

model ConfigInstanceIpAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceIpAddressResponseBody(name='body'),
}

/**
  * @description After you add an HSM to a cluster, you cannot modify the VPC endpoint of the HSM.
  * @param request  the request parameters of ConfigInstanceIpAddress  ConfigInstanceIpAddressRequest
  * @return ConfigInstanceIpAddressResponse
 */
async function configInstanceIpAddress(request: ConfigInstanceIpAddressRequest): ConfigInstanceIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model ConfigInstanceRemarkRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
  remark: string(name='Remark', description='The description of the HSM.

This parameter is required.', example='hsmOnline', position='Body'),
}

model ConfigInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceRemarkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigInstanceRemark  ConfigInstanceRemarkRequest
  * @return ConfigInstanceRemarkResponse
 */
async function configInstanceRemark(request: ConfigInstanceRemarkRequest): ConfigInstanceRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceRemark', 'POST', '/', 'json', true, 'form', request);
}

model ConfigInstanceWhitelistRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
  whitelist: string(name='Whitelist', description='A list of IP addresses that you want to configure in the whitelist. Separate multiple IP addresses with spaces or commas (,).

This parameter is required.', example='18.68.XX.XX,18.68.XX.XX', position='Body'),
}

model ConfigInstanceWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceWhitelistResponseBody(name='body'),
}

/**
  * @description You can configure the IP address whitelist for HSMs that are not added to a cluster and are in the ACTIVE state.
  * @param request  the request parameters of ConfigInstanceWhitelist  ConfigInstanceWhitelistRequest
  * @return ConfigInstanceWhitelistResponse
 */
async function configInstanceWhitelist(request: ConfigInstanceWhitelistRequest): ConfigInstanceWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceWhitelist', 'POST', '/', 'json', true, 'form', request);
}

model CopyImageRequest {
  imageUid?: string(name='ImageUid', description='The ID of the image.', example='image-hafiudfahdd****', position='Body'),
  targetRegionId?: string(name='TargetRegionId', description='The ID of the destination region.', example='cn-beijing', position='Body'),
}

model CopyImageResponseBody = {
  completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
  createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1724379766191'),
  error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
  jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
  progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='100'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
  status?: string(name='Status', description='The task status.', example='running'),
  type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
}

model CopyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyImageResponseBody(name='body'),
}

/**
  * @description This operation requires that the destination region does not have the same image. This operation is available only for hardware security modules (HSMs) outside the Chinese mainland.
  * @param request  the request parameters of CopyImage  CopyImageRequest
  * @return CopyImageResponse
 */
async function copyImage(request: CopyImageRequest): CopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyImage', 'POST', '/', 'json', true, 'form', request);
}

model CreateClusterRequest {
  clusterName: string(name='ClusterName', description='The name of the cluster.

This parameter is required.', example='cluster_on****', position='Body'),
  masterInstanceId: string(name='MasterInstanceId', description='The ID of the master HSM.

This parameter is required.', example='hsm_intl-sg-uz63ixak****', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Body'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-729dm40FG****'),
  requestId?: string(name='RequestId', description='The request ID.', example='5F58413E-8F57-585B-BE48-64CC1E31133C'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * @description The master HSM that you specify to create a cluster must be in the ACTIVE state.
  * @param request  the request parameters of CreateCluster  CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-NZB9Oj5Yfd8Y****', position='Body'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
  * @description You can delete an HSM only if the cluster does not contain HSMs.
  * @param request  the request parameters of DeleteCluster  DeleteClusterRequest
  * @return DeleteClusterResponse
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the content. Valid values:

*   zh: Chinese.
*   en: English.', example='en', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='Singapore'),
      regionId?: string(name='RegionId', description='The region ID.', example='ap-southeast-1'),
      zones?: [ 
        {
          cluster?: string(name='Cluster', description='Indicates whether clusters are supported. Valid values:

*   yes
*   no', example='yes'),
          localName?: string(name='LocalName', description='The name of the zone.', example='Singapore Zone A'),
          zoneId?: string(name='ZoneId', description='The zone ID.', example='ap-southeast-1a'),
        }
      ](name='Zones', description='The zones.'),
    }
  ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DownloadClusterManagedCertRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='cluster-001***hui', position='Query'),
}

model DownloadClusterManagedCertResponseBody = {
  content?: string(name='Content', example='emhlbmdza****W5qaWFuYmlhbm1hY2VzaGk='),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DownloadClusterManagedCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadClusterManagedCertResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - 该API允许用户获取特定集群的管理证书。
  * - 返回的数据是经过base64编码的证书内容。
  * @param request  the request parameters of DownloadClusterManagedCert  DownloadClusterManagedCertRequest
  * @return DownloadClusterManagedCertResponse
 */
async function downloadClusterManagedCert(request: DownloadClusterManagedCertRequest): DownloadClusterManagedCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadClusterManagedCert', 'POST', '/', 'json', false, 'json', request);
}

model EnableBackupRequest {
  backupId: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-1736207****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****', position='Query'),
}

model EnableBackupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model EnableBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableBackupResponseBody(name='body'),
}

/**
  * @description This operation is available only for backups in the Chinese mainland.
  * @param request  the request parameters of EnableBackup  EnableBackupRequest
  * @return EnableBackupResponse
 */
async function enableBackup(request: EnableBackupRequest): EnableBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBackup', 'POST', '/', 'json', false, 'json', request);
}

model ExportImageRequest {
  imageId: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-8vbdd5uc6v10ecn5****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Query'),
}

model ExportImageResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    error?: string(name='Error', description='The error message returned if the operation is abnormal or fails.', example='Job.Canceled'),
    jobId?: string(name='JobId', description='The ID of the task.', example='b1748ca6-6b55-49f4-a6d4-2d694a9f3693'),
    process?: int32(name='Process', description='The progress of the task. Unit: percent (%).', example='100'),
    response?: string(name='Response', description='The response returned after the operation succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   running
*   cancel
*   fail
*   success', example='running'),
    type?: string(name='Type', description='The type of the task operation. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The information about the asynchronous task returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ExportImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportImage  ExportImageRequest
  * @return ExportImageResponse
 */
async function exportImage(request: ExportImageRequest): ExportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportImage', 'POST', '/', 'json', false, 'json', request);
}

model GetAuditLogStatusRequest {
  getOssBucket?: boolean(name='GetOssBucket', description='Specifies whether to obtain the list of OSS buckets that can be used to store audit logs. Valid values:

*   true
*   false', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetAuditLogStatusResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus', description='Indicates whether the audit log feature is enabled. Valid values:

*   enable
*   disable', example='enable'),
  auditOssBucket?: string(name='AuditOssBucket', description='The bucket that stores audit logs.', example='bucket-test'),
  grantedServiceAccess?: boolean(name='GrantedServiceAccess', description='Indicates whether Cloud Hardware Security Module is authorized to deliver logs. Valid values:

*   true
*   false', example='true'),
  ossBuckets?: [ string ](name='OssBuckets', description='A list of buckets that can be used to store audit logs.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='true'),
}

model GetAuditLogStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditLogStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAuditLogStatus  GetAuditLogStatusRequest
  * @return GetAuditLogStatusResponse
 */
async function getAuditLogStatus(request: GetAuditLogStatusRequest): GetAuditLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuditLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****', position='Query'),
}

model GetBackupResponseBody = {
  backup?: {
    autoImageCount?: long(name='AutoImageCount', description='The number of images that are automatically backed up.', example='1'),
    backupHourInDay?: string(name='BackupHourInDay', description='The backup time in the 24-hour format.', example='10'),
    backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****'),
    backupPeriod?: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days.', example='3'),
    createTime?: long(name='CreateTime', description='The time when the backup is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    expireTime?: long(name='ExpireTime', description='The expiration time of the backup. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM) that is associated with the backup.', example='hsm-cn-5yd35431****'),
    maxImageCount?: string(name='MaxImageCount', description='The maximum number of images.', example='3'),
    name?: string(name='Name', description='The name of the backup.', example='backup-te****'),
    nextImageCreateTime?: long(name='NextImageCreateTime', description='The next time when the image is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    ownerInstanceId?: string(name='OwnerInstanceId', description='The ID of the HSM to which the backup belongs. This parameter is available only for HSM backups outside the Chinese mainland and the value of this parameter is consistent with the value of InstanceId.', example='hsm-cn-huoahd****'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    releaseTime?: long(name='ReleaseTime', description='The time when the backup is released. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
    remark?: string(name='Remark', description='The description of the backup.', example='test'),
    spInstanceId?: string(name='SpInstanceId', description='The ID of the backup. This parameter is available only for HSM backups in the Chinese mainland.', example='backup-fdb897sdfg53****'),
    status?: string(name='Status', description='The status of the backup. Valid values:

*   NEW
*   EXPIRED
*   ENABLED', example='NEW'),
    type?: string(name='Type', description='The type of the backup. Valid values:

*   DEFAULT
*   NORMAL', example='DEFAULT'),
  }(name='Backup', description='The information about the backup.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBackup  GetBackupRequest
  * @return GetBackupResponse
 */
async function getBackup(request: GetBackupRequest): GetBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackup', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-p94y1dud9ts****', position='Body'),
}

model GetClusterResponseBody = {
  cluster?: {
    certManaged?: boolean(name='CertManaged'),
    clusterCertificate?: string(name='ClusterCertificate', description='The cluster certificate.', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----'),
    clusterCsr?: string(name='ClusterCsr', description='The certificate signing request (CSR) file of the cluster.', example='-----BEGIN CERTIFICATE REQUEST-----\\nMIIC5TCCAc0CAQAwgZ8xWTAJBgNVBAYTAlVTMAkGA1UECAwCQ0EwDQYDVQQKDAZD\\nYXZpdW0wDQYDVQQLDAZOM0ZJUFMwDgYDVQQHDAdTYW5Kb3NlMBMGA1UdEQwMMTk****
-----END CERTIFICATE REQUEST-----'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-p94y1dud9ts****'),
    clusterMode?: int32(name='ClusterMode', description='The cluster mode.

2: automatically synchronizes the cluster.', example='2'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster_polar_****'),
    clusterOwnerCertificate?: string(name='ClusterOwnerCertificate', description='The self-signed certificate of the cluster.', example='----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****
-----END CERTIFICATE-----'),
    createTime?: long(name='CreateTime', description='The time when the cluster was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1641275680000'),
    deviceType?: string(name='DeviceType', description='The type of the device.', example='jnta'),
    entityCertExpireTime?: string(name='EntityCertExpireTime'),
    instances?: [ 
      {
        instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-g6z3v0uf****'),
        master?: boolean(name='Master', description='Indicates whether the HSM is a master HSM. Valid values:

*   true
*   false', example='true'),
        nodeId?: int32(name='NodeId', description='The ID of the HSM in the cluster.', example='1'),
      }
    ](name='Instances', description='The HSMs in the cluster.'),
    regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
    size?: int32(name='Size', description='The number of hardware security modules (HSMs) in the cluster.', example='2'),
    status?: string(name='Status', description='The status of the cluster. Valid values:

*   NEW: The cluster is not initialized.
*   INITIALIZED: The cluster is initialized.
*   DELETED: The cluster is deleted.
*   SYNCHRONIZING: The cluster is being synchronized.
*   TO_DELETE: The cluster is pending deletion.', example='NEW'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the cluster belongs.', example='vpc-8vbt0fjdm29hofvbo****'),
    whitelist?: string(name='Whitelist', description='The IP address whitelist of the cluster.', example='130.176.XX.XX'),
    zones?: [ 
      {
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf61s651p69bdgmki****'),
        zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-j'),
      }
    ](name='Zones', description='The information about the zones in which the cluster is deployed.'),
  }(name='Cluster', description='The cluster details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCluster  GetClusterRequest
  * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCluster', 'POST', '/', 'json', true, 'form', request);
}

model GetImageRequest {
  imageId: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-wz9c5ths5dfuwx47****', position='Query'),
}

model GetImageResponseBody = {
  image?: {
    backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1618017313'),
    copyTime?: long(name='CopyTime', description='The time when the image was copied. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
    exportTime?: long(name='ExportTime', description='The time when the image was generated. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1786776567788'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='image-wz9c5ths5dfuwx47****'),
    instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-9lb32vll****'),
    mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC
*   MANUAL', example='MANUAL'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    remark?: string(name='Remark', description='The description of the backup.', example='hsm-test'),
    sourceBackupUid?: string(name='SourceBackupUid', description='The ID of the source backup.', example='backup-gfuiasdfa****'),
    sourceImageUid?: string(name='SourceImageUid', description='The ID of the source image.', example='image-kklhhhh****'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source HSM.', example='hsm-wz9fnmvx190shfbk****'),
    sourceRegionId?: string(name='SourceRegionId', description='The region ID of the source image.', example='cn-beijing'),
    status?: string(name='Status', description='The status of the image. Valid values:

*   NEW
*   DELETED
*   CREATING
*   NORMAL', example='NEW'),
    vsmDigest?: string(name='VsmDigest', description='The digest of the HSM.', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
  }(name='Image', description='The image information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImage  GetImageRequest
  * @return GetImageResponse
 */
async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImage', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-vj30bil****', position='Body'),
}

model GetInstanceResponseBody = {
  instance?: {
    clusterId?: string(name='ClusterId', description='The ID of the cluster to which the HSM belongs.', example='cluster-w3G9vOJI2****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster_online'),
    createTime?: long(name='CreateTime', description='The time when the HSM was created.', example='1699515963000'),
    deviceType?: string(name='DeviceType', description='The type of the device.', example='jnta.SJJ1528-G'),
    expireTime?: long(name='ExpireTime', description='The time when the HSM expired.', example='1699496389720'),
    instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-g4t3jwsc****'),
    ip?: string(name='Ip', description='The IP address of the HSM in the VPC.', example='10.192.XX.XX'),
    isTrial?: boolean(name='IsTrial', description='Indicates whether the HSM is for trial use. Valid values:

*   true
*   false', example='false'),
    master?: boolean(name='Master', description='Indicates whether the HSM is a master HSM. Valid values:

*   true
*   false', example='true'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='23576634952****'),
    pqcEnabled?: int32(name='PqcEnabled', example='1'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    remark?: string(name='Remark', description='The description of the HSM.', example='hsmOnline'),
    status?: string(name='Status', description='The status of the HSM. Valid values:

*   PENDING: The HSM is disabled.
*   ACTIVE: The HSM is enabled.
*   EXPIRED: The HSM expired.
*   INVALID: The HSM is invalid.
*   FAILURE: The HSM failed to be created.
*   RESET: The HSM is being reset.
*   PAUSED: The HSM is paused.
*   MODIFYING: The HSM is being modified.', example='EXPIRED'),
    tenantIsolationType?: string(name='TenantIsolationType', description='The type of HSMs that is classified based on resource isolation. Valid values: 
- vsm: Virtual security modules (VSMs)
- hostedHsm: Dedicated HSMs.', example='vsm'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is configured for the HSM.', example='vsw-bp1mvfs31ltt0wyhf****'),
    vendor?: string(name='Vendor', description='The information about the vendor.', example='jnta'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the HSM belongs.', example='vpc-uf69i66j9kmoko52p****'),
    whitelist?: string(name='Whitelist', description='The IP addresses in the whitelist.', example='18.68.XX.XX'),
    zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b'),
  }(name='Instance', description='The information about the HSM.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetJobRequest {
  jobId: string(name='JobId', description='The ID of the task.

This parameter is required.', example='job-202401250936hze747fd7e0007005', position='Query'),
}

model GetJobResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
    progress?: long(name='Progress', description='The progress of the task. Unit: percent (%).', example='95'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   fail
*   cancel', example='fail'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJob  GetJobRequest
  * @return GetJobResponse
 */
async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJob', 'POST', '/', 'json', false, 'json', request);
}

model InitializeAuditLogRequest {
}

model InitializeAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4FE969D9-E1C7-5274-BE7D-8C3534587605'),
}

model InitializeAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitializeAuditLog  InitializeAuditLogRequest
  * @return InitializeAuditLogResponse
 */
async function initializeAuditLog(request: InitializeAuditLogRequest): InitializeAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model InitializeClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-p94y1dud9****', position='Body'),
}

model InitializeClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model InitializeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeClusterResponseBody(name='body'),
}

/**
  * @description *   The cluster is not initialized, but the master hardware security module (HSM) of the cluster is initialized.
  * *   Two or more vSwitches are configured for the cluster.
  * @param request  the request parameters of InitializeCluster  InitializeClusterRequest
  * @return InitializeClusterResponse
 */
async function initializeCluster(request: InitializeClusterRequest): InitializeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeCluster', 'POST', '/', 'json', true, 'form', request);
}

model JoinClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-NZB9Oj5Yfd8Y****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM that you want to add to the cluster.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
}

model JoinClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='86'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   success
*   running
*   cancel
*   fail', example='running'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model JoinClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinClusterResponseBody(name='body'),
}

/**
  * @description *   You can add the HSM to only the cluster that is in the INITIALIZED state.
  * *   The HSM that you want to add to the cluster is enabled or disabled and is not initialized.
  * @param request  the request parameters of JoinCluster  JoinClusterRequest
  * @return JoinClusterResponse
 */
async function joinCluster(request: JoinClusterRequest): JoinClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinCluster', 'POST', '/', 'json', true, 'form', request);
}

model LeaveClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-729dm40FG****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****', position='Body'),
}

model LeaveClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model LeaveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LeaveClusterResponseBody(name='body'),
}

/**
  * @description *   If non-master HSMs exist in a cluster, the master HSM cannot be removed from the cluster.
  * *   After the master HSM is removed from a cluster, the cluster enters the TO_DELETE state and cannot be restored to the available state. Proceed with caution.
  * @param request  the request parameters of LeaveCluster  LeaveClusterRequest
  * @return LeaveClusterResponse
 */
async function leaveCluster(request: LeaveClusterRequest): LeaveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveCluster', 'POST', '/', 'json', true, 'form', request);
}

model ListBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1648438****', position='Query'),
  currentPage: long(name='CurrentPage', description='The page number.

This parameter is required.', example='1', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-vj30bil8****', position='Query'),
  name?: string(name='Name', description='The name of the backup.', example='hsm-te****', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListBackupsResponseBody = {
  backups?: [ 
    {
      autoImageCount?: long(name='AutoImageCount', description='The number of images that are automatically backed up.', example='1'),
      backupHourInDay?: string(name='BackupHourInDay', description='The backup time on the hour that is in the 24-hour clock.', example='13'),
      backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1648438****'),
      backupPeriod?: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days.', example='3'),
      createTime?: long(name='CreateTime', description='The time when the backup is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1637229596000'),
      expireTime?: long(name='ExpireTime', description='The expiration time of the backup. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
      instanceId?: string(name='InstanceId', description='The ID of the HSM that is associated with the backup.', example='hsm-cn-vj30bil8****'),
      maxImageCount?: string(name='MaxImageCount', description='The number of images.', example='3'),
      name?: string(name='Name', description='The name of the backup.', example='backup-te****'),
      nextImageCreateTime?: long(name='NextImageCreateTime', description='The time when the image is created next time. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
      ownerInstanceId?: string(name='OwnerInstanceId', description='The ID of the HSM to which the backup belongs. This parameter is available only for HSM backups outside the Chinese mainland and the value of this parameter is consistent with the value of InstanceId.', example='hsm-cn-vj30bil8****'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='ap-southeast-1'),
      releaseTime?: long(name='ReleaseTime', description='The time when the backup is released. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
      remark?: string(name='Remark', description='The description of the backup.', example='normal backup'),
      spInstanceId?: string(name='SpInstanceId', description='The ID of the backup. This parameter is available only for HSM backups in the Chinese mainland.', example='backup-fdb897sdfg534-****'),
      status?: string(name='Status', description='The status of the backup. Valid values:

*   NEW: The backup is disabled.
*   EXPIRED: The backup expired.
*   ENABLED: The backup is enabled.', example='ENABLED'),
      type?: string(name='Type', description='The type of the backup. Valid values:

*   DEFAULT
*   NORMAL', example='NORMAL'),
    }
  ](name='Backups', description='The backups returned.'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='30'),
}

model ListBackupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBackupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBackups  ListBackupsRequest
  * @return ListBackupsResponse
 */
async function listBackups(request: ListBackupsRequest): ListBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBackups', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  currentPage: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Body'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-w3G9vOJI2****'),
      status?: string(name='Status', description='The status of the cluster. Valid values:

*   NEW: The cluster is not initialized.
*   INITIALIZED: The cluster is initialized.
*   DELETED: The cluster is deleted.
*   SYNCHRONIZING: The cluster is being synchronized.
*   TO_DELETE: The cluster is pending deletion.', example='INITIALIZED'),
    }
  ](name='Clusters', description='The clusters.'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of clusters.', example='114'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusters  ListClustersRequest
  * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', true, 'form', request);
}

model ListImagesRequest {
  backupId: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-fdb897sdf****', position='Query'),
  currentPage: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1', position='Query'),
  mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC: It is automatically generated.
*   MANUAL: It is manually generated.', example='MANUAL', position='Query'),
  pageSize: int32(name='PageSize', description='The number of images per page. Valid values: 1 to 1000.

This parameter is required.', example='20', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListImagesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  images?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****'),
      copyTime?: string(name='CopyTime', description='The time when the image was copied. Unit: milliseconds. The value is a UNIX timestamp.', example='1641275680000'),
      exportTime?: long(name='ExportTime', description='The time when the image was generated. Unit: milliseconds. The value is a UNIX timestamp.', example='1782849566738'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='image-d79x4k11pmg19****'),
      instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-6ja1xknf****'),
      mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC: It is automatically generated.
*   MANUAL: It is manually generated.', example='MANUAL'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The description of the backup.', example='hsm-test'),
      sourceBackupUid?: string(name='SourceBackupUid', description='The ID of the source backup.', example='backup-hodfhaol****'),
      sourceImageUid?: string(name='SourceImageUid', description='The ID of the source image.', example='image-ooopjygsn****'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source HSM.', example='hsm-cn-wz9i2dmefudfxtmb****'),
      sourceRegionId?: string(name='SourceRegionId', description='The ID of the region in which the source image resides.', example='cn-shanghai'),
      status?: string(name='Status', description='The status of the image. Valid values:

*   NEW: It is disabled.
*   DELETED: It is deleted.
*   CREATING: It is being created.
*   NORMAL: It is created.', example='CREATING'),
      vsmDigest?: string(name='VsmDigest', description='The digest of the HSM.', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
    }
  ](name='Images', description='The images returned.'),
  pageSize?: int32(name='PageSize', description='The number of images per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', description='The total number of images returned.', example='1000'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImages  ListImagesRequest
  * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  currentPage: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Body'),
  tenantIsolationType?: string(name='TenantIsolationType', description='The type of HSMs that is classified based on resource isolation. Valid values:
- vsm: Virtual security modules (VSMs).
- hostedHsm: Dedicated HSMs.', example='vsm', position='Body'),
}

model ListInstancesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-vj30bil8****'),
      status?: string(name='Status', description='The HSM status. Valid values:

*   PENDING: The HSM is disabled.
*   ACTIVE: The HSM is enabled.
*   EXPIRED: The HSM expired.
*   INVALID: The HSM is invalid.
*   FAILURE: The HSM failed to be created.
*   RESET: The HSM is being reset.
*   PAUSED: The HSM is paused.
*   MODIFYING: The HSM is being modified.', example='ACTIVE'),
    }
  ](name='Instances', description='The HSMs.'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of entries returned.', example='80'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceGroupRequest {
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='rg-aek2tsvbnfe****', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the hardware security module (HSM).

This parameter is required.', example='hsm-2ze0qae64mjuc0ni****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

This parameter is required.', example='instance', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model PauseInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
}

model PauseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model PauseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseInstanceResponseBody(name='body'),
}

/**
  * @description After you disable an HSM, the relevant service operations fail. Proceed with caution.
  * @param request  the request parameters of PauseInstance  PauseInstanceRequest
  * @return PauseInstanceResponse
 */
async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseInstance', 'POST', '/', 'json', true, 'form', request);
}

model QuickDeployClusterRequest {
  certManaged?: boolean(name='CertManaged', position='Query'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='cluster_on****', position='Query'),
  instanceList: [ string ](name='InstanceList', description='This parameter is required.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  vSwitchIdList: [ string ](name='VSwitchIdList', description='This parameter is required.', shrink='json', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-7xvkh90cw39p0****', position='Query'),
  whiteList?: [ string ](name='WhiteList', shrink='json', position='Query'),
}

model QuickDeployClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    createTime?: string(name='CreateTime', example='1653274407000'),
    error?: string(name='Error', example='OperationTimeout'),
    jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
    progress?: int32(name='Progress', example='86'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='success'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model QuickDeployClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuickDeployClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuickDeployCluster  QuickDeployClusterRequest
  * @return QuickDeployClusterResponse
 */
async function quickDeployCluster(request: QuickDeployClusterRequest): QuickDeployClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuickDeployCluster', 'POST', '/', 'json', false, 'json', request);
}

model QuickInitInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****', position='Body'),
}

model QuickInitInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1699515963000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-000fi9k1v2hclo321sal'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='100'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model QuickInitInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuickInitInstanceResponseBody(name='body'),
}

/**
  * @description This operation is supported only for general virtual security modules (GVSMs) in the Chinese mainland.
  * @param request  the request parameters of QuickInitInstance  QuickInitInstanceRequest
  * @return QuickInitInstanceResponse
 */
async function quickInitInstance(request: QuickInitInstanceRequest): QuickInitInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuickInitInstance', 'POST', '/', 'json', true, 'form', request);
}

model ResetBackupRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdfg5****', position='Query'),
}

model ResetBackupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetBackupResponseBody(name='body'),
}

/**
  * @description This operation is available only for HSMs in the Chinese mainland.
  * @param request  the request parameters of ResetBackup  ResetBackupRequest
  * @return ResetBackupResponse
 */
async function resetBackup(request: ResetBackupRequest): ResetBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetBackup', 'POST', '/', 'json', false, 'json', request);
}

model ResetInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
}

model ResetInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1653274407000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-0007bl8oev0u3jqyfu6a'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='80'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetInstanceResponseBody(name='body'),
}

/**
  * @description After an HSM is reset, all related data is deleted and cannot be recovered. Proceed with caution.
  * @param request  the request parameters of ResetInstance  ResetInstanceRequest
  * @return ResetInstanceResponse
 */
async function resetInstance(request: ResetInstanceRequest): ResetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetInstance', 'POST', '/', 'json', true, 'form', request);
}

model RestoreInstanceRequest {
  imageId: string(name='ImageId', description='The ID of the image that you want to use to restore the HSM.

This parameter is required.', example='image-eaOGHkRDQgh4****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****', position='Body'),
}

model RestoreInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-540356379023708160'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='50'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status.', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model RestoreInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreInstanceResponseBody(name='body'),
}

/**
  * @description You can use images to restore only HSMs that are paused or disabled.
  * @param request  the request parameters of RestoreInstance  RestoreInstanceRequest
  * @return RestoreInstanceResponse
 */
async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreInstance', 'POST', '/', 'json', true, 'form', request);
}

model ResumeInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
}

model ResumeInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeInstance  ResumeInstanceRequest
  * @return ResumeInstanceResponse
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeInstance', 'POST', '/', 'json', true, 'form', request);
}

model RotateClusterManagedCertRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='cluster-hfau****gkaud', position='Query'),
}

model RotateClusterManagedCertResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    createTime?: string(name='CreateTime', example='1653274407000'),
    error?: string(name='Error', example='OperationTimeout'),
    jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
    process?: int32(name='Process', example='100'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='running'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model RotateClusterManagedCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RotateClusterManagedCertResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * 该API用于触发指定集群的管理证书轮转过程。通过提供`ClusterId`参数，可以指定需要进行证书轮转的集群。此操作有助于提高集群的安全性，建议定期执行。
  * ### 注意事项
  * - 确保提供的`ClusterId`是有效的，并且用户具有对该集群的操作权限。
  * - 证书轮转可能会影响依赖于旧证书的服务，请在适当的时间窗口内执行此操作。
  * @param request  the request parameters of RotateClusterManagedCert  RotateClusterManagedCertRequest
  * @return RotateClusterManagedCertResponse
 */
async function rotateClusterManagedCert(request: RotateClusterManagedCertRequest): RotateClusterManagedCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RotateClusterManagedCert', 'POST', '/', 'json', false, 'json', request);
}

model SwitchClusterMasterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-w3G9vOJI2****', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the HSM that you want to promote to the master HSM.

This parameter is required.', example='hsm-cn-vj30bil8****', position='Body'),
}

model SwitchClusterMasterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SwitchClusterMasterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchClusterMasterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchClusterMaster  SwitchClusterMasterRequest
  * @return SwitchClusterMasterResponse
 */
async function switchClusterMaster(request: SwitchClusterMasterRequest): SwitchClusterMasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchClusterMaster', 'POST', '/', 'json', true, 'form', request);
}

model SyncClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsgytet****', position='Body'),
}

model SyncClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-000bu7m5vjmyz9s7qz85'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='90'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SyncClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncClusterResponseBody(name='body'),
}

/**
  * @description *   This operation is used for manually synchronizing data within clusters located in the Chinese Mainland. For clusters outside the Chinese Mainland, automatic data synchronization is supported, and this operation is unnecessary. If you attempt to use this operation, a 400 error code will be returned.
  * *   The data synchronization takes approximately 5 minutes. To avoid service interruptions, we recommend performing this operation during off-peak hours.
  * @param request  the request parameters of SyncCluster  SyncClusterRequest
  * @return SyncClusterResponse
 */
async function syncCluster(request: SyncClusterRequest): SyncClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncCluster', 'POST', '/', 'json', true, 'form', request);
}

