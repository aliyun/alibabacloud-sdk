/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hsm';
  @version = '2023-11-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConfigClusterSubnetRequest {
  clusterId: string(name='ClusterId', example='cluster-BqxX63Bsg****', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
  vSwitchIds: [ string ](name='VSwitchIds', shrink='json', position='Body'),
  vpcId: string(name='VpcId', example='vpc-7xvkh90cw39p0****', position='Body'),
}

model ConfigClusterSubnetResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model ConfigClusterSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterSubnetResponseBody(name='body'),
}

async function configClusterSubnet(request: ConfigClusterSubnetRequest): ConfigClusterSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterSubnet', 'POST', '/', 'json', true, 'form', request);
}

