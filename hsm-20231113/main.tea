/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('hsm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConfigClusterSubnetRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='cluster-BqxX63Bsg****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='This parameter is required.'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-7xvkh90cw39p0****'),
}

model ConfigClusterSubnetShrinkRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='cluster-BqxX63Bsg****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  vSwitchIdsShrink?: string(name='VSwitchIds', description='This parameter is required.'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-7xvkh90cw39p0****'),
}

model ConfigClusterSubnetResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model ConfigClusterSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterSubnetResponseBody(name='body'),
}

/**
 * @summary 配置集群子网
 *
 * @param tmpReq ConfigClusterSubnetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigClusterSubnetResponse
 */
async function configClusterSubnetWithOptions(tmpReq: ConfigClusterSubnetRequest, runtime: Util.RuntimeOptions): ConfigClusterSubnetResponse {
  Util.validateModel(tmpReq);
  var request = new ConfigClusterSubnetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.vSwitchIds)) {
    request.vSwitchIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vSwitchIds, 'VSwitchIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchIdsShrink)) {
    body['VSwitchIds'] = request.vSwitchIdsShrink;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfigClusterSubnet',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 配置集群子网
 *
 * @param request ConfigClusterSubnetRequest
 * @return ConfigClusterSubnetResponse
 */
async function configClusterSubnet(request: ConfigClusterSubnetRequest): ConfigClusterSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return configClusterSubnetWithOptions(request, runtime);
}

