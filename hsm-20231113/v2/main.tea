/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('hsm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConfigAuditLogRequest {
  auditAction?: string(name='AuditAction', description='Specifies whether to enable the audit log feature. Valid values:

*   enable
*   disable

This parameter is required.', example='enable'),
  auditOssBucket?: string(name='AuditOssBucket', description='The bucket to which audit logs are delivered.', example='hsm-log'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model ConfigAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='42B118FB-16A6-56FB-B877-D58637EEC6AF'),
}

model ConfigAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigAuditLogResponseBody(name='body'),
}

/**
 * @summary Enables or disables the audit log feature and delivers audit logs to buckets.
 *
 * @description *   The region of the bucket must be the same as the region where the security audit feature is enabled.
 * *   If the security audit feature is enabled, do not delete Object Storage Service (OSS) buckets. If you delete OSS buckets, audit logs fail to be delivered.
 * *   Only electronic virtual security modules (EVSMs) and general virtual security modules (GVSMs) within the Chinese mainland support the security audit feature.
 *
 * @param request ConfigAuditLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigAuditLogResponse
 */
@context("configAuditLogWithContext")
async function configAuditLogWithOptions(request: ConfigAuditLogRequest, runtime: $RuntimeOptions): ConfigAuditLogResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditAction)) {
    query['AuditAction'] = request.auditAction;
  }
  if (!$isNull(request.auditOssBucket)) {
    query['AuditOssBucket'] = request.auditOssBucket;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigAuditLog',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables the audit log feature and delivers audit logs to buckets.
 *
 * @description *   The region of the bucket must be the same as the region where the security audit feature is enabled.
 * *   If the security audit feature is enabled, do not delete Object Storage Service (OSS) buckets. If you delete OSS buckets, audit logs fail to be delivered.
 * *   Only electronic virtual security modules (EVSMs) and general virtual security modules (GVSMs) within the Chinese mainland support the security audit feature.
 *
 * @param request ConfigAuditLogRequest
 * @return ConfigAuditLogResponse
 */
async function configAuditLog(request: ConfigAuditLogRequest): ConfigAuditLogResponse {
  var runtime = new $RuntimeOptions{};
  return configAuditLogWithOptions(request, runtime);
}

model ConfigBackupRemarkRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-fdb897sdfg****'),
  name?: string(name='Name', description='The name of the backup.', example='backup-test'),
  remark?: string(name='Remark', description='The description of the backup.', example='Test backup.'),
}

model ConfigBackupRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupRemarkResponseBody(name='body'),
}

/**
 * @summary Configures the name and description of a backup.
 *
 * @param request ConfigBackupRemarkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigBackupRemarkResponse
 */
@context("configBackupRemarkWithContext")
async function configBackupRemarkWithOptions(request: ConfigBackupRemarkRequest, runtime: $RuntimeOptions): ConfigBackupRemarkResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigBackupRemark',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures the name and description of a backup.
 *
 * @param request ConfigBackupRemarkRequest
 * @return ConfigBackupRemarkResponse
 */
async function configBackupRemark(request: ConfigBackupRemarkRequest): ConfigBackupRemarkResponse {
  var runtime = new $RuntimeOptions{};
  return configBackupRemarkWithOptions(request, runtime);
}

model ConfigBackupTaskRequest {
  backupHourInDay?: long(name='BackupHourInDay', description='The backup time in the 24-hour format. Valid values: 1 to 24.

Enumeration values:

*   0
*   1
*   2
*   3
*   4
*   5
*   6
*   7
*   8
*   9
*   10
*   11
*   12
*   13
*   14
*   15
*   16
*   17
*   18
*   19
*   20
*   21
*   22
*   23

This parameter is required.', example='12'),
  backupId?: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-173620705****'),
  backupPeriod?: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days. Valid values: 1, 3, 7, and 30.

This parameter is required.', example='3'),
  manual2PeriodicList?: [ string ](name='Manual2PeriodicList', description='The IDs of images for which the manual backup mode is updated to the automatic backup mode.'),
  periodic2ManualList?: [ string ](name='Periodic2ManualList', description='The IDs of images for which the automatic backup mode is updated to the manual backup mode.'),
}

model ConfigBackupTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigBackupTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigBackupTaskResponseBody(name='body'),
}

/**
 * @summary Modifies the execution mode of a backup task.
 *
 * @description Only hardware security modules (HSMs) in the Chinese mainland support the operation.
 *
 * @param request ConfigBackupTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigBackupTaskResponse
 */
@context("configBackupTaskWithContext")
async function configBackupTaskWithOptions(request: ConfigBackupTaskRequest, runtime: $RuntimeOptions): ConfigBackupTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupHourInDay)) {
    query['BackupHourInDay'] = request.backupHourInDay;
  }
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!$isNull(request.backupPeriod)) {
    query['BackupPeriod'] = request.backupPeriod;
  }
  if (!$isNull(request.manual2PeriodicList)) {
    query['Manual2PeriodicList'] = request.manual2PeriodicList;
  }
  if (!$isNull(request.periodic2ManualList)) {
    query['Periodic2ManualList'] = request.periodic2ManualList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigBackupTask',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the execution mode of a backup task.
 *
 * @description Only hardware security modules (HSMs) in the Chinese mainland support the operation.
 *
 * @param request ConfigBackupTaskRequest
 * @return ConfigBackupTaskResponse
 */
async function configBackupTask(request: ConfigBackupTaskRequest): ConfigBackupTaskResponse {
  var runtime = new $RuntimeOptions{};
  return configBackupTaskWithOptions(request, runtime);
}

model ConfigClusterCertificateRequest {
  clusterCertificate?: string(name='ClusterCertificate', description='The cluster certificate.

This parameter is required.', example='-----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****-----END CERTIFICATE-----'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsg****'),
  issuerCertificate?: string(name='IssuerCertificate', description='The self-signed certificate.

This parameter is required.', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----'),
}

model ConfigClusterCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterCertificateResponseBody(name='body'),
}

/**
 * @summary Configures a certificate for a cluster of hardware security modules (HSMs) outside the Chinese mainland.
 *
 * @description For more information about how to create a self-signed certificate and a cluster certificate on an Elastic Compute Service (ECS) instance, see [Create a NIST FIPS-validated GVSM cluster](https://help.aliyun.com/document_detail/293585.html).
 *
 * @param request ConfigClusterCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigClusterCertificateResponse
 */
@context("configClusterCertificateWithContext")
async function configClusterCertificateWithOptions(request: ConfigClusterCertificateRequest, runtime: $RuntimeOptions): ConfigClusterCertificateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterCertificate)) {
    body['ClusterCertificate'] = request.clusterCertificate;
  }
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.issuerCertificate)) {
    body['IssuerCertificate'] = request.issuerCertificate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigClusterCertificate',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures a certificate for a cluster of hardware security modules (HSMs) outside the Chinese mainland.
 *
 * @description For more information about how to create a self-signed certificate and a cluster certificate on an Elastic Compute Service (ECS) instance, see [Create a NIST FIPS-validated GVSM cluster](https://help.aliyun.com/document_detail/293585.html).
 *
 * @param request ConfigClusterCertificateRequest
 * @return ConfigClusterCertificateResponse
 */
async function configClusterCertificate(request: ConfigClusterCertificateRequest): ConfigClusterCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return configClusterCertificateWithOptions(request, runtime);
}

model ConfigClusterNameRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsgfaisdf****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.

This parameter is required.', example='cluster_on****'),
}

model ConfigClusterNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterNameResponseBody(name='body'),
}

/**
 * @summary Changes the name of a cluster.
 *
 * @param request ConfigClusterNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigClusterNameResponse
 */
@context("configClusterNameWithContext")
async function configClusterNameWithOptions(request: ConfigClusterNameRequest, runtime: $RuntimeOptions): ConfigClusterNameResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.clusterName)) {
    body['ClusterName'] = request.clusterName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigClusterName',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the name of a cluster.
 *
 * @param request ConfigClusterNameRequest
 * @return ConfigClusterNameResponse
 */
async function configClusterName(request: ConfigClusterNameRequest): ConfigClusterNameResponse {
  var runtime = new $RuntimeOptions{};
  return configClusterNameWithOptions(request, runtime);
}

model ConfigClusterSubnetRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster. You can call the ListCluster operation to obtain cluster IDs.

This parameter is required.', example='cluster-BqxX63Bsg****'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='A list of vSwitches that are associated with the cluster. Note: You must include all vSwitches that you want to associate with the cluster.

This parameter is required.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).

This parameter is required.', example='vpc-7xvkh90cw39p0****'),
}

model ConfigClusterSubnetShrinkRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster. You can call the ListCluster operation to obtain cluster IDs.

This parameter is required.', example='cluster-BqxX63Bsg****'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
  vSwitchIdsShrink?: string(name='VSwitchIds', description='A list of vSwitches that are associated with the cluster. Note: You must include all vSwitches that you want to associate with the cluster.

This parameter is required.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).

This parameter is required.', example='vpc-7xvkh90cw39p0****'),
}

model ConfigClusterSubnetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model ConfigClusterSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterSubnetResponseBody(name='body'),
}

/**
 * @summary Modifies a list of vSwitches that are associated with a hardware security module (HSM) cluster.
 *
 * @description You can call the operation to configure all vSwitches that are associated with a HSM cluster. You can only add new vSwitches. You cannot delete vSwitches.
 *
 * @param tmpReq ConfigClusterSubnetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigClusterSubnetResponse
 */
@context("configClusterSubnetWithContext")
async function configClusterSubnetWithOptions(tmpReq: ConfigClusterSubnetRequest, runtime: $RuntimeOptions): ConfigClusterSubnetResponse {
  tmpReq.validate();
  var request = new ConfigClusterSubnetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.vSwitchIds)) {
    request.vSwitchIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vSwitchIds, 'VSwitchIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.vSwitchIdsShrink)) {
    body['VSwitchIds'] = request.vSwitchIdsShrink;
  }
  if (!$isNull(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigClusterSubnet',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a list of vSwitches that are associated with a hardware security module (HSM) cluster.
 *
 * @description You can call the operation to configure all vSwitches that are associated with a HSM cluster. You can only add new vSwitches. You cannot delete vSwitches.
 *
 * @param request ConfigClusterSubnetRequest
 * @return ConfigClusterSubnetResponse
 */
async function configClusterSubnet(request: ConfigClusterSubnetRequest): ConfigClusterSubnetResponse {
  var runtime = new $RuntimeOptions{};
  return configClusterSubnetWithOptions(request, runtime);
}

model ConfigClusterWhitelistRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-729dm40FG****'),
  whitelist?: string(name='Whitelist', description='The IP address whitelist of the cluster.

This parameter is required.', example='18.68.XX.XX'),
}

model ConfigClusterWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigClusterWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigClusterWhitelistResponseBody(name='body'),
}

/**
 * @summary Modifies the IP address whitelist of a cluster.
 *
 * @description The IP address whitelist of a cluster has a higher priority than the IP address whitelist of a hardware security module (HSM) in the cluster. In cluster mode, we recommend that you create an IP address whitelist for your cluster. You do not need to create an IP address for the HSM in the cluster.
 *
 * @param request ConfigClusterWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigClusterWhitelistResponse
 */
@context("configClusterWhitelistWithContext")
async function configClusterWhitelistWithOptions(request: ConfigClusterWhitelistRequest, runtime: $RuntimeOptions): ConfigClusterWhitelistResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.whitelist)) {
    body['Whitelist'] = request.whitelist;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigClusterWhitelist',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the IP address whitelist of a cluster.
 *
 * @description The IP address whitelist of a cluster has a higher priority than the IP address whitelist of a hardware security module (HSM) in the cluster. In cluster mode, we recommend that you create an IP address whitelist for your cluster. You do not need to create an IP address for the HSM in the cluster.
 *
 * @param request ConfigClusterWhitelistRequest
 * @return ConfigClusterWhitelistResponse
 */
async function configClusterWhitelist(request: ConfigClusterWhitelistRequest): ConfigClusterWhitelistResponse {
  var runtime = new $RuntimeOptions{};
  return configClusterWhitelistWithOptions(request, runtime);
}

model ConfigImageRemarkRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-d79x4k11pmg19****'),
  remark?: string(name='Remark', description='The description of the image.

This parameter is required.', example='hsm-****'),
}

model ConfigImageRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigImageRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigImageRemarkResponseBody(name='body'),
}

/**
 * @summary Modifies the description of an image.
 *
 * @param request ConfigImageRemarkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigImageRemarkResponse
 */
@context("configImageRemarkWithContext")
async function configImageRemarkWithOptions(request: ConfigImageRemarkRequest, runtime: $RuntimeOptions): ConfigImageRemarkResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigImageRemark',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the description of an image.
 *
 * @param request ConfigImageRemarkRequest
 * @return ConfigImageRemarkResponse
 */
async function configImageRemark(request: ConfigImageRemarkRequest): ConfigImageRemarkResponse {
  var runtime = new $RuntimeOptions{};
  return configImageRemarkWithOptions(request, runtime);
}

model ConfigInstanceIpAddressRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****'),
  ip?: string(name='Ip', description='The endpoint of the VPC to which the HMS belongs.

This parameter is required.', example='192.168.XX.XX'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the HMS belongs.

This parameter is required.', example='vsw-u7gb0qahu****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the HMS belongs.

This parameter is required.', example='vpc-lmkmivmo6****'),
}

model ConfigInstanceIpAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceIpAddressResponseBody(name='body'),
}

/**
 * @summary Modifies the virtual private cloud (VPC) endpoint of a hardware security module (HSM).
 *
 * @description After you add an HSM to a cluster, you cannot modify the VPC endpoint of the HSM.
 *
 * @param request ConfigInstanceIpAddressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigInstanceIpAddressResponse
 */
@context("configInstanceIpAddressWithContext")
async function configInstanceIpAddressWithOptions(request: ConfigInstanceIpAddressRequest, runtime: $RuntimeOptions): ConfigInstanceIpAddressResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.vSwitchId)) {
    body['VSwitchId'] = request.vSwitchId;
  }
  if (!$isNull(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigInstanceIpAddress',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the virtual private cloud (VPC) endpoint of a hardware security module (HSM).
 *
 * @description After you add an HSM to a cluster, you cannot modify the VPC endpoint of the HSM.
 *
 * @param request ConfigInstanceIpAddressRequest
 * @return ConfigInstanceIpAddressResponse
 */
async function configInstanceIpAddress(request: ConfigInstanceIpAddressRequest): ConfigInstanceIpAddressResponse {
  var runtime = new $RuntimeOptions{};
  return configInstanceIpAddressWithOptions(request, runtime);
}

model ConfigInstanceRemarkRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
  remark?: string(name='Remark', description='The description of the HSM.

This parameter is required.', example='hsmOnline'),
}

model ConfigInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceRemarkResponseBody(name='body'),
}

/**
 * @summary Modifies the description of a hardware security module (HSM).
 *
 * @param request ConfigInstanceRemarkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigInstanceRemarkResponse
 */
@context("configInstanceRemarkWithContext")
async function configInstanceRemarkWithOptions(request: ConfigInstanceRemarkRequest, runtime: $RuntimeOptions): ConfigInstanceRemarkResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigInstanceRemark',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the description of a hardware security module (HSM).
 *
 * @param request ConfigInstanceRemarkRequest
 * @return ConfigInstanceRemarkResponse
 */
async function configInstanceRemark(request: ConfigInstanceRemarkRequest): ConfigInstanceRemarkResponse {
  var runtime = new $RuntimeOptions{};
  return configInstanceRemarkWithOptions(request, runtime);
}

model ConfigInstanceWhitelistRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
  whitelist?: string(name='Whitelist', description='A list of IP addresses that you want to configure in the whitelist. Separate multiple IP addresses with spaces or commas (,).

This parameter is required.', example='18.68.XX.XX,18.68.XX.XX'),
}

model ConfigInstanceWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigInstanceWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceWhitelistResponseBody(name='body'),
}

/**
 * @summary Modifies the IP address whitelist of a hardware security module (HSM).
 *
 * @description You can configure the IP address whitelist for HSMs that are not added to a cluster and are in the ACTIVE state.
 *
 * @param request ConfigInstanceWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigInstanceWhitelistResponse
 */
@context("configInstanceWhitelistWithContext")
async function configInstanceWhitelistWithOptions(request: ConfigInstanceWhitelistRequest, runtime: $RuntimeOptions): ConfigInstanceWhitelistResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.whitelist)) {
    body['Whitelist'] = request.whitelist;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfigInstanceWhitelist',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the IP address whitelist of a hardware security module (HSM).
 *
 * @description You can configure the IP address whitelist for HSMs that are not added to a cluster and are in the ACTIVE state.
 *
 * @param request ConfigInstanceWhitelistRequest
 * @return ConfigInstanceWhitelistResponse
 */
async function configInstanceWhitelist(request: ConfigInstanceWhitelistRequest): ConfigInstanceWhitelistResponse {
  var runtime = new $RuntimeOptions{};
  return configInstanceWhitelistWithOptions(request, runtime);
}

model CopyImageRequest {
  imageUid?: string(name='ImageUid', description='The ID of the image.', example='image-hafiudfahdd****'),
  targetRegionId?: string(name='TargetRegionId', description='The ID of the destination region.', example='cn-beijing'),
}

model CopyImageResponseBody = {
  completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
  createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1724379766191'),
  error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
  jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
  progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='100'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
  status?: string(name='Status', description='The task status.', example='running'),
  type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
}

model CopyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyImageResponseBody(name='body'),
}

/**
 * @summary Copies an image to another region.
 *
 * @description This operation requires that the destination region does not have the same image. This operation is available only for hardware security modules (HSMs) outside the Chinese mainland.
 *
 * @param request CopyImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CopyImageResponse
 */
@context("copyImageWithContext")
async function copyImageWithOptions(request: CopyImageRequest, runtime: $RuntimeOptions): CopyImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageUid)) {
    body['ImageUid'] = request.imageUid;
  }
  if (!$isNull(request.targetRegionId)) {
    body['TargetRegionId'] = request.targetRegionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CopyImage',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Copies an image to another region.
 *
 * @description This operation requires that the destination region does not have the same image. This operation is available only for hardware security modules (HSMs) outside the Chinese mainland.
 *
 * @param request CopyImageRequest
 * @return CopyImageResponse
 */
async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new $RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CreateClusterRequest {
  clusterName?: string(name='ClusterName', description='The name of the cluster.

This parameter is required.', example='cluster_on****'),
  masterInstanceId?: string(name='MasterInstanceId', description='The ID of the master HSM.

This parameter is required.', example='hsm_intl-sg-uz63ixak****'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-729dm40FG****'),
  requestId?: string(name='RequestId', description='The request ID.', example='5F58413E-8F57-585B-BE48-64CC1E31133C'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
 * @summary Creates a cluster by specifying a hardware security module (HSM) as the master HSM.
 *
 * @description The master HSM that you specify to create a cluster must be in the ACTIVE state.
 *
 * @param request CreateClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClusterResponse
 */
@context("createClusterWithContext")
async function createClusterWithOptions(request: CreateClusterRequest, runtime: $RuntimeOptions): CreateClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterName)) {
    body['ClusterName'] = request.clusterName;
  }
  if (!$isNull(request.masterInstanceId)) {
    body['MasterInstanceId'] = request.masterInstanceId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a cluster by specifying a hardware security module (HSM) as the master HSM.
 *
 * @description The master HSM that you specify to create a cluster must be in the ACTIVE state.
 *
 * @param request CreateClusterRequest
 * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new $RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-NZB9Oj5Yfd8Y****'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
 * @summary Deletes a hardware security module (HSM) cluster.
 *
 * @description You can delete an HSM only if the cluster does not contain HSMs.
 *
 * @param request DeleteClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClusterResponse
 */
@context("deleteClusterWithContext")
async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: $RuntimeOptions): DeleteClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a hardware security module (HSM) cluster.
 *
 * @description You can delete an HSM only if the cluster does not contain HSMs.
 *
 * @param request DeleteClusterRequest
 * @return DeleteClusterResponse
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new $RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the content. Valid values:

*   zh: Chinese.
*   en: English.', example='en'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='Singapore'),
      regionId?: string(name='RegionId', description='The region ID.', example='ap-southeast-1'),
      zones?: [ 
        {
          cluster?: string(name='Cluster', description='Indicates whether clusters are supported. Valid values:

*   yes
*   no', example='yes'),
          localName?: string(name='LocalName', description='The name of the zone.', example='Singapore Zone A'),
          zoneId?: string(name='ZoneId', description='The zone ID.', example='ap-southeast-1a'),
        }
      ](name='Zones', description='The zones.'),
    }
  ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary Queries the regions that are supported by Cloud Hardware Security Module.
 *
 * @param request DescribeRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
@context("describeRegionsWithContext")
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $RuntimeOptions): DescribeRegionsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRegions',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the regions that are supported by Cloud Hardware Security Module.
 *
 * @param request DescribeRegionsRequest
 * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DownloadClusterManagedCertRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='cluster-001***hui'),
}

model DownloadClusterManagedCertResponseBody = {
  content?: string(name='Content', example='emhlbmdza****W5qaWFuYmlhbm1hY2VzaGk='),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DownloadClusterManagedCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadClusterManagedCertResponseBody(name='body'),
}

/**
 * @summary 下载集群托管证书
 *
 * @description ## 请求说明
 * - 该API允许用户获取特定集群的管理证书。
 * - 返回的数据是经过base64编码的证书内容。
 *
 * @param request DownloadClusterManagedCertRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DownloadClusterManagedCertResponse
 */
@context("downloadClusterManagedCertWithContext")
async function downloadClusterManagedCertWithOptions(request: DownloadClusterManagedCertRequest, runtime: $RuntimeOptions): DownloadClusterManagedCertResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DownloadClusterManagedCert',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 下载集群托管证书
 *
 * @description ## 请求说明
 * - 该API允许用户获取特定集群的管理证书。
 * - 返回的数据是经过base64编码的证书内容。
 *
 * @param request DownloadClusterManagedCertRequest
 * @return DownloadClusterManagedCertResponse
 */
async function downloadClusterManagedCert(request: DownloadClusterManagedCertRequest): DownloadClusterManagedCertResponse {
  var runtime = new $RuntimeOptions{};
  return downloadClusterManagedCertWithOptions(request, runtime);
}

model EnableBackupRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-1736207****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****'),
}

model EnableBackupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model EnableBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableBackupResponseBody(name='body'),
}

/**
 * @summary Binds a backup to a specified hardware security module (HSM).
 *
 * @description This operation is available only for backups in the Chinese mainland.
 *
 * @param request EnableBackupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableBackupResponse
 */
@context("enableBackupWithContext")
async function enableBackupWithOptions(request: EnableBackupRequest, runtime: $RuntimeOptions): EnableBackupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnableBackup',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Binds a backup to a specified hardware security module (HSM).
 *
 * @description This operation is available only for backups in the Chinese mainland.
 *
 * @param request EnableBackupRequest
 * @return EnableBackupResponse
 */
async function enableBackup(request: EnableBackupRequest): EnableBackupResponse {
  var runtime = new $RuntimeOptions{};
  return enableBackupWithOptions(request, runtime);
}

model ExportImageRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-8vbdd5uc6v10ecn5****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model ExportImageResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    error?: string(name='Error', description='The error message returned if the operation is abnormal or fails.', example='Job.Canceled'),
    jobId?: string(name='JobId', description='The ID of the task.', example='b1748ca6-6b55-49f4-a6d4-2d694a9f3693'),
    process?: int32(name='Process', description='The progress of the task. Unit: percent (%).', example='100'),
    response?: string(name='Response', description='The response returned after the operation succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   running
*   cancel
*   fail
*   success', example='running'),
    type?: string(name='Type', description='The type of the task operation. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The information about the asynchronous task returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ExportImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportImageResponseBody(name='body'),
}

/**
 * @summary Exports the image for a specified hardware security module (HSM).
 *
 * @param request ExportImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportImageResponse
 */
@context("exportImageWithContext")
async function exportImageWithOptions(request: ExportImageRequest, runtime: $RuntimeOptions): ExportImageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportImage',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports the image for a specified hardware security module (HSM).
 *
 * @param request ExportImageRequest
 * @return ExportImageResponse
 */
async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new $RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model GetAuditLogStatusRequest {
  getOssBucket?: boolean(name='GetOssBucket', description='Specifies whether to obtain the list of OSS buckets that can be used to store audit logs. Valid values:

*   true
*   false', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model GetAuditLogStatusResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus', description='Indicates whether the audit log feature is enabled. Valid values:

*   enable
*   disable', example='enable'),
  auditOssBucket?: string(name='AuditOssBucket', description='The bucket that stores audit logs.', example='bucket-test'),
  grantedServiceAccess?: boolean(name='GrantedServiceAccess', description='Indicates whether Cloud Hardware Security Module is authorized to deliver logs. Valid values:

*   true
*   false', example='true'),
  ossBuckets?: [ string ](name='OssBuckets', description='A list of buckets that can be used to store audit logs.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true
*   false', example='true'),
}

model GetAuditLogStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuditLogStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of the audit log feature in the current region.
 *
 * @param request GetAuditLogStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAuditLogStatusResponse
 */
@context("getAuditLogStatusWithContext")
async function getAuditLogStatusWithOptions(request: GetAuditLogStatusRequest, runtime: $RuntimeOptions): GetAuditLogStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.getOssBucket)) {
    query['GetOssBucket'] = request.getOssBucket;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAuditLogStatus',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status of the audit log feature in the current region.
 *
 * @param request GetAuditLogStatusRequest
 * @return GetAuditLogStatusResponse
 */
async function getAuditLogStatus(request: GetAuditLogStatusRequest): GetAuditLogStatusResponse {
  var runtime = new $RuntimeOptions{};
  return getAuditLogStatusWithOptions(request, runtime);
}

model GetBackupRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****'),
}

model GetBackupResponseBody = {
  backup?: {
    autoImageCount?: long(name='AutoImageCount', description='The number of images that are automatically backed up.', example='1'),
    backupHourInDay?: string(name='BackupHourInDay', description='The backup time in the 24-hour format.', example='10'),
    backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****'),
    backupPeriod?: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days.', example='3'),
    createTime?: long(name='CreateTime', description='The time when the backup is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    expireTime?: long(name='ExpireTime', description='The expiration time of the backup. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM) that is associated with the backup.', example='hsm-cn-5yd35431****'),
    maxImageCount?: string(name='MaxImageCount', description='The maximum number of images.', example='3'),
    name?: string(name='Name', description='The name of the backup.', example='backup-te****'),
    nextImageCreateTime?: long(name='NextImageCreateTime', description='The next time when the image is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
    ownerInstanceId?: string(name='OwnerInstanceId', description='The ID of the HSM to which the backup belongs. This parameter is available only for HSM backups outside the Chinese mainland and the value of this parameter is consistent with the value of InstanceId.', example='hsm-cn-huoahd****'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    releaseTime?: long(name='ReleaseTime', description='The time when the backup is released. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
    remark?: string(name='Remark', description='The description of the backup.', example='test'),
    spInstanceId?: string(name='SpInstanceId', description='The ID of the backup. This parameter is available only for HSM backups in the Chinese mainland.', example='backup-fdb897sdfg53****'),
    status?: string(name='Status', description='The status of the backup. Valid values:

*   NEW
*   EXPIRED
*   ENABLED', example='NEW'),
    type?: string(name='Type', description='The type of the backup. Valid values:

*   DEFAULT
*   NORMAL', example='DEFAULT'),
  }(name='Backup', description='The information about the backup.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupResponseBody(name='body'),
}

/**
 * @summary Queries the information about a specified backup.
 *
 * @param request GetBackupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBackupResponse
 */
@context("getBackupWithContext")
async function getBackupWithOptions(request: GetBackupRequest, runtime: $RuntimeOptions): GetBackupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetBackup',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a specified backup.
 *
 * @param request GetBackupRequest
 * @return GetBackupResponse
 */
async function getBackup(request: GetBackupRequest): GetBackupResponse {
  var runtime = new $RuntimeOptions{};
  return getBackupWithOptions(request, runtime);
}

model GetClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-p94y1dud9ts****'),
}

model GetClusterResponseBody = {
  cluster?: {
    certManaged?: boolean(name='CertManaged'),
    clusterCertificate?: string(name='ClusterCertificate', description='The cluster certificate.', example='-----BEGIN CERTIFICATE-----
MIIDfTCCAmWgAwIBAgIJAMRqQMr5if66MA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNV
BAYTAmNuMQswCQYDVQQIDAJ6ajELMAkGA1UEBwwCaHoxFjAUBgNVBAoMDUFsaWJh
YmEgQ2xvdWQxFDA****
-----END CERTIFICATE-----'),
    clusterCsr?: string(name='ClusterCsr', description='The certificate signing request (CSR) file of the cluster.', example='-----BEGIN CERTIFICATE REQUEST-----\\\\nMIIC5TCCAc0CAQAwgZ8xWTAJBgNVBAYTAlVTMAkGA1UECAwCQ0EwDQYDVQQKDAZD\\\\nYXZpdW0wDQYDVQQLDAZOM0ZJUFMwDgYDVQQHDAdTYW5Kb3NlMBMGA1UdEQwMMTk****
-----END CERTIFICATE REQUEST-----'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-p94y1dud9ts****'),
    clusterMode?: int32(name='ClusterMode', description='The cluster mode.

2: automatically synchronizes the cluster.', example='2'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster_polar_****'),
    clusterOwnerCertificate?: string(name='ClusterOwnerCertificate', description='The self-signed certificate of the cluster.', example='----BEGIN CERTIFICATE-----
MIIDaTCCAlECAQEwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UEBhMCY24xCzAJBgNV
BAgMAnpqMQswCQYDVQQHDAJoejEWMBQGA1UECgwNQWxpYmFiYSBDbG91ZDEUMBIG
A1UECwwLU2VjQ2xvdWRIc20wHhcNMjQwNzAzM****
-----END CERTIFICATE-----'),
    createTime?: long(name='CreateTime', description='The time when the cluster was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1641275680000'),
    deviceType?: string(name='DeviceType', description='The type of the device.', example='jnta'),
    entityCertExpireTime?: string(name='EntityCertExpireTime'),
    instances?: [ 
      {
        instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-g6z3v0uf****'),
        master?: boolean(name='Master', description='Indicates whether the HSM is a master HSM. Valid values:

*   true
*   false', example='true'),
        nodeId?: int32(name='NodeId', description='The ID of the HSM in the cluster.', example='1'),
      }
    ](name='Instances', description='The HSMs in the cluster.'),
    regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
    size?: int32(name='Size', description='The number of hardware security modules (HSMs) in the cluster.', example='2'),
    status?: string(name='Status', description='The status of the cluster. Valid values:

*   NEW: The cluster is not initialized.
*   INITIALIZED: The cluster is initialized.
*   DELETED: The cluster is deleted.
*   SYNCHRONIZING: The cluster is being synchronized.
*   TO_DELETE: The cluster is pending deletion.', example='NEW'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the cluster belongs.', example='vpc-8vbt0fjdm29hofvbo****'),
    whitelist?: string(name='Whitelist', description='The IP address whitelist of the cluster.', example='130.176.XX.XX'),
    zones?: [ 
      {
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf61s651p69bdgmki****'),
        zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-j'),
      }
    ](name='Zones', description='The information about the zones in which the cluster is deployed.'),
  }(name='Cluster', description='The cluster details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
 * @summary Queries information about a specified cluster.
 *
 * @param request GetClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClusterResponse
 */
@context("getClusterWithContext")
async function getClusterWithOptions(request: GetClusterRequest, runtime: $RuntimeOptions): GetClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a specified cluster.
 *
 * @param request GetClusterRequest
 * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  var runtime = new $RuntimeOptions{};
  return getClusterWithOptions(request, runtime);
}

model GetImageRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='image-wz9c5ths5dfuwx47****'),
}

model GetImageResponseBody = {
  image?: {
    backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1618017313'),
    copyTime?: long(name='CopyTime', description='The time when the image was copied. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
    exportTime?: long(name='ExportTime', description='The time when the image was generated. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1786776567788'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='image-wz9c5ths5dfuwx47****'),
    instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-9lb32vll****'),
    mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC
*   MANUAL', example='MANUAL'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    remark?: string(name='Remark', description='The description of the backup.', example='hsm-test'),
    sourceBackupUid?: string(name='SourceBackupUid', description='The ID of the source backup.', example='backup-gfuiasdfa****'),
    sourceImageUid?: string(name='SourceImageUid', description='The ID of the source image.', example='image-kklhhhh****'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source HSM.', example='hsm-wz9fnmvx190shfbk****'),
    sourceRegionId?: string(name='SourceRegionId', description='The region ID of the source image.', example='cn-beijing'),
    status?: string(name='Status', description='The status of the image. Valid values:

*   NEW
*   DELETED
*   CREATING
*   NORMAL', example='NEW'),
    vsmDigest?: string(name='VsmDigest', description='The digest of the HSM.', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
  }(name='Image', description='The image information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
 * @summary Queries information about an image.
 *
 * @param request GetImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageResponse
 */
@context("getImageWithContext")
async function getImageWithOptions(request: GetImageRequest, runtime: $RuntimeOptions): GetImageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetImage',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about an image.
 *
 * @param request GetImageRequest
 * @return GetImageResponse
 */
async function getImage(request: GetImageRequest): GetImageResponse {
  var runtime = new $RuntimeOptions{};
  return getImageWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-vj30bil****'),
}

model GetInstanceResponseBody = {
  instance?: {
    clusterId?: string(name='ClusterId', description='The ID of the cluster to which the HSM belongs.', example='cluster-w3G9vOJI2****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster_online'),
    createTime?: long(name='CreateTime', description='The time when the HSM was created.', example='1699515963000'),
    deviceType?: string(name='DeviceType', description='The type of the device.', example='jnta.SJJ1528-G'),
    expireTime?: long(name='ExpireTime', description='The time when the HSM expired.', example='1699496389720'),
    instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-g4t3jwsc****'),
    ip?: string(name='Ip', description='The IP address of the HSM in the VPC.', example='10.192.XX.XX'),
    isTrial?: boolean(name='IsTrial', description='Indicates whether the HSM is for trial use. Valid values:

*   true
*   false', example='false'),
    master?: boolean(name='Master', description='Indicates whether the HSM is a master HSM. Valid values:

*   true
*   false', example='true'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='23576634952****'),
    pqcEnabled?: int32(name='PqcEnabled', example='1'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    remark?: string(name='Remark', description='The description of the HSM.', example='hsmOnline'),
    status?: string(name='Status', description='The status of the HSM. Valid values:

*   PENDING: The HSM is disabled.
*   ACTIVE: The HSM is enabled.
*   EXPIRED: The HSM expired.
*   INVALID: The HSM is invalid.
*   FAILURE: The HSM failed to be created.
*   RESET: The HSM is being reset.
*   PAUSED: The HSM is paused.
*   MODIFYING: The HSM is being modified.', example='EXPIRED'),
    tenantIsolationType?: string(name='TenantIsolationType', description='The type of HSMs that is classified based on resource isolation. Valid values: 
- vsm: Virtual security modules (VSMs)
- hostedHsm: Dedicated HSMs.', example='vsm'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is configured for the HSM.', example='vsw-bp1mvfs31ltt0wyhf****'),
    vendor?: string(name='Vendor', description='The information about the vendor.', example='jnta'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the HSM belongs.', example='vpc-uf69i66j9kmoko52p****'),
    whitelist?: string(name='Whitelist', description='The IP addresses in the whitelist.', example='18.68.XX.XX'),
    zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b'),
  }(name='Instance', description='The information about the HSM.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
 * @summary Queries information about a specified hardware security module (HSM).
 *
 * @param request GetInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceResponse
 */
@context("getInstanceWithContext")
async function getInstanceWithOptions(request: GetInstanceRequest, runtime: $RuntimeOptions): GetInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a specified hardware security module (HSM).
 *
 * @param request GetInstanceRequest
 * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetJobRequest {
  jobId?: string(name='JobId', description='The ID of the task.

This parameter is required.', example='job-202401250936hze747fd7e0007005'),
}

model GetJobResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
    progress?: long(name='Progress', description='The progress of the task. Unit: percent (%).', example='95'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   fail
*   cancel', example='fail'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
 * @summary Queries the details of an asynchronous task.
 *
 * @param request GetJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobResponse
 */
@context("getJobWithContext")
async function getJobWithOptions(request: GetJobRequest, runtime: $RuntimeOptions): GetJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetJob',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of an asynchronous task.
 *
 * @param request GetJobRequest
 * @return GetJobResponse
 */
async function getJob(request: GetJobRequest): GetJobResponse {
  var runtime = new $RuntimeOptions{};
  return getJobWithOptions(request, runtime);
}

model InitializeAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4FE969D9-E1C7-5274-BE7D-8C3534587605'),
}

model InitializeAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeAuditLogResponseBody(name='body'),
}

/**
 * @summary Authorizes Cloud Hardware Security Module to deliver logs.
 *
 * @param request InitializeAuditLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitializeAuditLogResponse
 */
async function initializeAuditLogWithOptions(runtime: $RuntimeOptions): InitializeAuditLogResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'InitializeAuditLog',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Authorizes Cloud Hardware Security Module to deliver logs.
 *
 * @return InitializeAuditLogResponse
 */
async function initializeAuditLog(): InitializeAuditLogResponse {
  var runtime = new $RuntimeOptions{};
  return initializeAuditLogWithOptions(runtime);
}

model InitializeClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-p94y1dud9****'),
}

model InitializeClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model InitializeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeClusterResponseBody(name='body'),
}

/**
 * @summary Initializes a cluster.
 *
 * @description *   The cluster is not initialized, but the master hardware security module (HSM) of the cluster is initialized.
 * *   Two or more vSwitches are configured for the cluster.
 *
 * @param request InitializeClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitializeClusterResponse
 */
@context("initializeClusterWithContext")
async function initializeClusterWithOptions(request: InitializeClusterRequest, runtime: $RuntimeOptions): InitializeClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'InitializeCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Initializes a cluster.
 *
 * @description *   The cluster is not initialized, but the master hardware security module (HSM) of the cluster is initialized.
 * *   Two or more vSwitches are configured for the cluster.
 *
 * @param request InitializeClusterRequest
 * @return InitializeClusterResponse
 */
async function initializeCluster(request: InitializeClusterRequest): InitializeClusterResponse {
  var runtime = new $RuntimeOptions{};
  return initializeClusterWithOptions(request, runtime);
}

model JoinClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-NZB9Oj5Yfd8Y****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM that you want to add to the cluster.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model JoinClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-202401250936hze747fd7e0007005'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='86'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   success
*   running
*   cancel
*   fail', example='running'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model JoinClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinClusterResponseBody(name='body'),
}

/**
 * @summary Adds a hardware security module (HSM) to the current cluster.
 *
 * @description *   You can add the HSM to only the cluster that is in the INITIALIZED state.
 * *   The HSM that you want to add to the cluster is enabled or disabled and is not initialized.
 *
 * @param request JoinClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return JoinClusterResponse
 */
@context("joinClusterWithContext")
async function joinClusterWithOptions(request: JoinClusterRequest, runtime: $RuntimeOptions): JoinClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'JoinCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a hardware security module (HSM) to the current cluster.
 *
 * @description *   You can add the HSM to only the cluster that is in the INITIALIZED state.
 * *   The HSM that you want to add to the cluster is enabled or disabled and is not initialized.
 *
 * @param request JoinClusterRequest
 * @return JoinClusterResponse
 */
async function joinCluster(request: JoinClusterRequest): JoinClusterResponse {
  var runtime = new $RuntimeOptions{};
  return joinClusterWithOptions(request, runtime);
}

model LeaveClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-729dm40FG****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****'),
}

model LeaveClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model LeaveClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LeaveClusterResponseBody(name='body'),
}

/**
 * @summary Removes a hardware security module (HSM) from the current cluster.
 *
 * @description *   If non-master HSMs exist in a cluster, the master HSM cannot be removed from the cluster.
 * *   After the master HSM is removed from a cluster, the cluster enters the TO_DELETE state and cannot be restored to the available state. Proceed with caution.
 *
 * @param request LeaveClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LeaveClusterResponse
 */
@context("leaveClusterWithContext")
async function leaveClusterWithOptions(request: LeaveClusterRequest, runtime: $RuntimeOptions): LeaveClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'LeaveCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes a hardware security module (HSM) from the current cluster.
 *
 * @description *   If non-master HSMs exist in a cluster, the master HSM cannot be removed from the cluster.
 * *   After the master HSM is removed from a cluster, the cluster enters the TO_DELETE state and cannot be restored to the available state. Proceed with caution.
 *
 * @param request LeaveClusterRequest
 * @return LeaveClusterResponse
 */
async function leaveCluster(request: LeaveClusterRequest): LeaveClusterResponse {
  var runtime = new $RuntimeOptions{};
  return leaveClusterWithOptions(request, runtime);
}

model ListBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1648438****'),
  currentPage?: long(name='CurrentPage', description='The page number.

This parameter is required.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-vj30bil8****'),
  name?: string(name='Name', description='The name of the backup.', example='hsm-te****'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model ListBackupsResponseBody = {
  backups?: [ 
    {
      autoImageCount?: long(name='AutoImageCount', description='The number of images that are automatically backed up.', example='1'),
      backupHourInDay?: string(name='BackupHourInDay', description='The backup time on the hour that is in the 24-hour clock.', example='13'),
      backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-1648438****'),
      backupPeriod?: long(name='BackupPeriod', description='The automatic backup cycle. Unit: days.', example='3'),
      createTime?: long(name='CreateTime', description='The time when the backup is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1637229596000'),
      expireTime?: long(name='ExpireTime', description='The expiration time of the backup. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
      instanceId?: string(name='InstanceId', description='The ID of the HSM that is associated with the backup.', example='hsm-cn-vj30bil8****'),
      maxImageCount?: string(name='MaxImageCount', description='The number of images.', example='3'),
      name?: string(name='Name', description='The name of the backup.', example='backup-te****'),
      nextImageCreateTime?: long(name='NextImageCreateTime', description='The time when the image is created next time. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1682417553781'),
      ownerInstanceId?: string(name='OwnerInstanceId', description='The ID of the HSM to which the backup belongs. This parameter is available only for HSM backups outside the Chinese mainland and the value of this parameter is consistent with the value of InstanceId.', example='hsm-cn-vj30bil8****'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='ap-southeast-1'),
      releaseTime?: long(name='ReleaseTime', description='The time when the backup is released. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1641275680000'),
      remark?: string(name='Remark', description='The description of the backup.', example='normal backup'),
      spInstanceId?: string(name='SpInstanceId', description='The ID of the backup. This parameter is available only for HSM backups in the Chinese mainland.', example='backup-fdb897sdfg534-****'),
      status?: string(name='Status', description='The status of the backup. Valid values:

*   NEW: The backup is disabled.
*   EXPIRED: The backup expired.
*   ENABLED: The backup is enabled.', example='ENABLED'),
      type?: string(name='Type', description='The type of the backup. Valid values:

*   DEFAULT
*   NORMAL', example='NORMAL'),
    }
  ](name='Backups', description='The backups returned.'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='30'),
}

model ListBackupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBackupsResponseBody(name='body'),
}

/**
 * @summary Queries the backups that meet the query conditions.
 *
 * @param request ListBackupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBackupsResponse
 */
@context("listBackupsWithContext")
async function listBackupsWithOptions(request: ListBackupsRequest, runtime: $RuntimeOptions): ListBackupsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListBackups',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the backups that meet the query conditions.
 *
 * @param request ListBackupsRequest
 * @return ListBackupsResponse
 */
async function listBackups(request: ListBackupsRequest): ListBackupsResponse {
  var runtime = new $RuntimeOptions{};
  return listBackupsWithOptions(request, runtime);
}

model ListClustersRequest {
  currentPage?: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cluster-w3G9vOJI2****'),
      status?: string(name='Status', description='The status of the cluster. Valid values:

*   NEW: The cluster is not initialized.
*   INITIALIZED: The cluster is initialized.
*   DELETED: The cluster is deleted.
*   SYNCHRONIZING: The cluster is being synchronized.
*   TO_DELETE: The cluster is pending deletion.', example='INITIALIZED'),
    }
  ](name='Clusters', description='The clusters.'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of clusters.', example='114'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
 * @summary Queries the clusters that meet the query conditions.
 *
 * @param request ListClustersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClustersResponse
 */
@context("listClustersWithContext")
async function listClustersWithOptions(request: ListClustersRequest, runtime: $RuntimeOptions): ListClustersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListClusters',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the clusters that meet the query conditions.
 *
 * @param request ListClustersRequest
 * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new $RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListImagesRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.

This parameter is required.', example='backup-fdb897sdf****'),
  currentPage?: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1'),
  mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC: It is automatically generated.
*   MANUAL: It is manually generated.', example='MANUAL'),
  pageSize?: int32(name='PageSize', description='The number of images per page. Valid values: 1 to 1000.

This parameter is required.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
}

model ListImagesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  images?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdf****'),
      copyTime?: string(name='CopyTime', description='The time when the image was copied. Unit: milliseconds. The value is a UNIX timestamp.', example='1641275680000'),
      exportTime?: long(name='ExportTime', description='The time when the image was generated. Unit: milliseconds. The value is a UNIX timestamp.', example='1782849566738'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='image-d79x4k11pmg19****'),
      instanceId?: string(name='InstanceId', description='The ID of the hardware security module (HSM).', example='hsm-cn-6ja1xknf****'),
      mode?: string(name='Mode', description='The image generation mode. Valid values:

*   PERIODIC: It is automatically generated.
*   MANUAL: It is manually generated.', example='MANUAL'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The description of the backup.', example='hsm-test'),
      sourceBackupUid?: string(name='SourceBackupUid', description='The ID of the source backup.', example='backup-hodfhaol****'),
      sourceImageUid?: string(name='SourceImageUid', description='The ID of the source image.', example='image-ooopjygsn****'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source HSM.', example='hsm-cn-wz9i2dmefudfxtmb****'),
      sourceRegionId?: string(name='SourceRegionId', description='The ID of the region in which the source image resides.', example='cn-shanghai'),
      status?: string(name='Status', description='The status of the image. Valid values:

*   NEW: It is disabled.
*   DELETED: It is deleted.
*   CREATING: It is being created.
*   NORMAL: It is created.', example='CREATING'),
      vsmDigest?: string(name='VsmDigest', description='The digest of the HSM.', example='3kGeHnmQzXwSsfF0Jk9eJYhe2gP6An0/HlYIiZh1****'),
    }
  ](name='Images', description='The images returned.'),
  pageSize?: int32(name='PageSize', description='The number of images per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', description='The total number of images returned.', example='1000'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
 * @summary Queries the images that meet the specified conditions.
 *
 * @param request ListImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImagesResponse
 */
@context("listImagesWithContext")
async function listImagesWithOptions(request: ListImagesRequest, runtime: $RuntimeOptions): ListImagesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!$isNull(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListImages',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the images that meet the specified conditions.
 *
 * @param request ListImagesRequest
 * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new $RuntimeOptions{};
  return listImagesWithOptions(request, runtime);
}

model ListInstancesRequest {
  currentPage?: int32(name='CurrentPage', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
  tenantIsolationType?: string(name='TenantIsolationType', description='The type of HSMs that is classified based on resource isolation. Valid values:
- vsm: Virtual security modules (VSMs).
- hostedHsm: Dedicated HSMs.', example='vsm'),
}

model ListInstancesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the HSM.', example='hsm-cn-vj30bil8****'),
      status?: string(name='Status', description='The HSM status. Valid values:

*   PENDING: The HSM is disabled.
*   ACTIVE: The HSM is enabled.
*   EXPIRED: The HSM expired.
*   INVALID: The HSM is invalid.
*   FAILURE: The HSM failed to be created.
*   RESET: The HSM is being reset.
*   PAUSED: The HSM is paused.
*   MODIFYING: The HSM is being modified.', example='ACTIVE'),
    }
  ](name='Instances', description='The HSMs.'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
  total?: int32(name='Total', description='The total number of entries returned.', example='80'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the hardware security modules (HSMs) that meet the query conditions.
 *
 * @param request ListInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstancesResponse
 */
@context("listInstancesWithContext")
async function listInstancesWithOptions(request: ListInstancesRequest, runtime: $RuntimeOptions): ListInstancesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.tenantIsolationType)) {
    body['TenantIsolationType'] = request.tenantIsolationType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListInstances',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the hardware security modules (HSMs) that meet the query conditions.
 *
 * @param request ListInstancesRequest
 * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  regionId?: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='rg-aek2tsvbnfe****'),
  resourceId?: string(name='ResourceId', description='The ID of the hardware security module (HSM).

This parameter is required.', example='hsm-2ze0qae64mjuc0ni****'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

This parameter is required.', example='instance'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
 * @summary Moves a resource to a new resource group.
 *
 * @param request MoveResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveResourceGroupResponse
 */
@context("moveResourceGroupWithContext")
async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: $RuntimeOptions): MoveResourceGroupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'MoveResourceGroup',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a resource to a new resource group.
 *
 * @param request MoveResourceGroupRequest
 * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model PauseInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model PauseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model PauseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseInstanceResponseBody(name='body'),
}

/**
 * @summary Disables a hardware security module (HSM).
 *
 * @description After you disable an HSM, the relevant service operations fail. Proceed with caution.
 *
 * @param request PauseInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PauseInstanceResponse
 */
@context("pauseInstanceWithContext")
async function pauseInstanceWithOptions(request: PauseInstanceRequest, runtime: $RuntimeOptions): PauseInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PauseInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables a hardware security module (HSM).
 *
 * @description After you disable an HSM, the relevant service operations fail. Proceed with caution.
 *
 * @param request PauseInstanceRequest
 * @return PauseInstanceResponse
 */
async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return pauseInstanceWithOptions(request, runtime);
}

model QuickDeployClusterRequest {
  certManaged?: boolean(name='CertManaged'),
  clusterName?: string(name='ClusterName', description='This parameter is required.', example='cluster_on****'),
  instanceList?: [ string ](name='InstanceList', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  vSwitchIdList?: [ string ](name='VSwitchIdList', description='This parameter is required.'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-7xvkh90cw39p0****'),
  whiteList?: [ string ](name='WhiteList'),
}

model QuickDeployClusterShrinkRequest {
  certManaged?: boolean(name='CertManaged'),
  clusterName?: string(name='ClusterName', description='This parameter is required.', example='cluster_on****'),
  instanceListShrink?: string(name='InstanceList', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  vSwitchIdListShrink?: string(name='VSwitchIdList', description='This parameter is required.'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-7xvkh90cw39p0****'),
  whiteListShrink?: string(name='WhiteList'),
}

model QuickDeployClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    createTime?: string(name='CreateTime', example='1653274407000'),
    error?: string(name='Error', example='OperationTimeout'),
    jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
    progress?: int32(name='Progress', example='86'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='success'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model QuickDeployClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuickDeployClusterResponseBody(name='body'),
}

/**
 * @summary 快速部署集群
 *
 * @param tmpReq QuickDeployClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuickDeployClusterResponse
 */
@context("quickDeployClusterWithContext")
async function quickDeployClusterWithOptions(tmpReq: QuickDeployClusterRequest, runtime: $RuntimeOptions): QuickDeployClusterResponse {
  tmpReq.validate();
  var request = new QuickDeployClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  if (!$isNull(tmpReq.vSwitchIdList)) {
    request.vSwitchIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vSwitchIdList, 'VSwitchIdList', 'json');
  }
  if (!$isNull(tmpReq.whiteList)) {
    request.whiteListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.whiteList, 'WhiteList', 'json');
  }
  var query = {};
  if (!$isNull(request.certManaged)) {
    query['CertManaged'] = request.certManaged;
  }
  if (!$isNull(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!$isNull(request.instanceListShrink)) {
    query['InstanceList'] = request.instanceListShrink;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.vSwitchIdListShrink)) {
    query['VSwitchIdList'] = request.vSwitchIdListShrink;
  }
  if (!$isNull(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!$isNull(request.whiteListShrink)) {
    query['WhiteList'] = request.whiteListShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuickDeployCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 快速部署集群
 *
 * @param request QuickDeployClusterRequest
 * @return QuickDeployClusterResponse
 */
async function quickDeployCluster(request: QuickDeployClusterRequest): QuickDeployClusterResponse {
  var runtime = new $RuntimeOptions{};
  return quickDeployClusterWithOptions(request, runtime);
}

model QuickInitInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****'),
}

model QuickInitInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1699515963000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-000fi9k1v2hclo321sal'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='100'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model QuickInitInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuickInitInstanceResponseBody(name='body'),
}

/**
 * @summary Initializes a hardware security module (HSM).
 *
 * @description This operation is supported only for general virtual security modules (GVSMs) in the Chinese mainland.
 *
 * @param request QuickInitInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuickInitInstanceResponse
 */
@context("quickInitInstanceWithContext")
async function quickInitInstanceWithOptions(request: QuickInitInstanceRequest, runtime: $RuntimeOptions): QuickInitInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuickInitInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Initializes a hardware security module (HSM).
 *
 * @description This operation is supported only for general virtual security modules (GVSMs) in the Chinese mainland.
 *
 * @param request QuickInitInstanceRequest
 * @return QuickInitInstanceResponse
 */
async function quickInitInstance(request: QuickInitInstanceRequest): QuickInitInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return quickInitInstanceWithOptions(request, runtime);
}

model ResetBackupRequest {
  backupId?: string(name='BackupId', description='The ID of the backup.', example='backup-fdb897sdfg5****'),
}

model ResetBackupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetBackupResponseBody(name='body'),
}

/**
 * @summary Disassociates a backup from a hardware security module (HSM).
 *
 * @description This operation is available only for HSMs in the Chinese mainland.
 *
 * @param request ResetBackupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetBackupResponse
 */
@context("resetBackupWithContext")
async function resetBackupWithOptions(request: ResetBackupRequest, runtime: $RuntimeOptions): ResetBackupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResetBackup',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a backup from a hardware security module (HSM).
 *
 * @description This operation is available only for HSMs in the Chinese mainland.
 *
 * @param request ResetBackupRequest
 * @return ResetBackupResponse
 */
async function resetBackup(request: ResetBackupRequest): ResetBackupResponse {
  var runtime = new $RuntimeOptions{};
  return resetBackupWithOptions(request, runtime);
}

model ResetInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model ResetInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1653274407000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-0007bl8oev0u3jqyfu6a'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='80'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetInstanceResponseBody(name='body'),
}

/**
 * @summary Resets a hardware security module (HSM).
 *
 * @description After an HSM is reset, all related data is deleted and cannot be recovered. Proceed with caution.
 *
 * @param request ResetInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetInstanceResponse
 */
@context("resetInstanceWithContext")
async function resetInstanceWithOptions(request: ResetInstanceRequest, runtime: $RuntimeOptions): ResetInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResetInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets a hardware security module (HSM).
 *
 * @description After an HSM is reset, all related data is deleted and cannot be recovered. Proceed with caution.
 *
 * @param request ResetInstanceRequest
 * @return ResetInstanceResponse
 */
async function resetInstance(request: ResetInstanceRequest): ResetInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return resetInstanceWithOptions(request, runtime);
}

model RestoreInstanceRequest {
  imageId?: string(name='ImageId', description='The ID of the image that you want to use to restore the HSM.

This parameter is required.', example='image-eaOGHkRDQgh4****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-mp90fxef****'),
}

model RestoreInstanceResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task is created. The value is accurate to the millisecond. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-540356379023708160'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='50'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The task status.', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049366F216'),
}

model RestoreInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreInstanceResponseBody(name='body'),
}

/**
 * @summary Restores a hardware security module (HSM) by using an image.
 *
 * @description You can use images to restore only HSMs that are paused or disabled.
 *
 * @param request RestoreInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestoreInstanceResponse
 */
@context("restoreInstanceWithContext")
async function restoreInstanceWithOptions(request: RestoreInstanceRequest, runtime: $RuntimeOptions): RestoreInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RestoreInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Restores a hardware security module (HSM) by using an image.
 *
 * @description You can use images to restore only HSMs that are paused or disabled.
 *
 * @param request RestoreInstanceRequest
 * @return RestoreInstanceResponse
 */
async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return restoreInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model ResumeInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

/**
 * @summary Resumes a disabled hardware security module (HSM).
 *
 * @param request ResumeInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumeInstanceResponse
 */
@context("resumeInstanceWithContext")
async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: $RuntimeOptions): ResumeInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResumeInstance',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resumes a disabled hardware security module (HSM).
 *
 * @param request ResumeInstanceRequest
 * @return ResumeInstanceResponse
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model RotateClusterManagedCertRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='cluster-hfau****gkaud'),
}

model RotateClusterManagedCertResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='true'),
    createTime?: string(name='CreateTime', example='1653274407000'),
    error?: string(name='Error', example='OperationTimeout'),
    jobId?: string(name='JobId', example='job-202401250936hze747fd7e0007005'),
    process?: int32(name='Process', example='100'),
    response?: string(name='Response', example='success'),
    status?: string(name='Status', example='running'),
    type?: string(name='Type', example='create'),
  }(name='Job'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model RotateClusterManagedCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RotateClusterManagedCertResponseBody(name='body'),
}

/**
 * @summary 轮转集群托管证书
 *
 * @description ## 请求说明
 * 该API用于触发指定集群的管理证书轮转过程。通过提供`ClusterId`参数，可以指定需要进行证书轮转的集群。此操作有助于提高集群的安全性，建议定期执行。
 * ### 注意事项
 * - 确保提供的`ClusterId`是有效的，并且用户具有对该集群的操作权限。
 * - 证书轮转可能会影响依赖于旧证书的服务，请在适当的时间窗口内执行此操作。
 *
 * @param request RotateClusterManagedCertRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RotateClusterManagedCertResponse
 */
@context("rotateClusterManagedCertWithContext")
async function rotateClusterManagedCertWithOptions(request: RotateClusterManagedCertRequest, runtime: $RuntimeOptions): RotateClusterManagedCertResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RotateClusterManagedCert',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 轮转集群托管证书
 *
 * @description ## 请求说明
 * 该API用于触发指定集群的管理证书轮转过程。通过提供`ClusterId`参数，可以指定需要进行证书轮转的集群。此操作有助于提高集群的安全性，建议定期执行。
 * ### 注意事项
 * - 确保提供的`ClusterId`是有效的，并且用户具有对该集群的操作权限。
 * - 证书轮转可能会影响依赖于旧证书的服务，请在适当的时间窗口内执行此操作。
 *
 * @param request RotateClusterManagedCertRequest
 * @return RotateClusterManagedCertResponse
 */
async function rotateClusterManagedCert(request: RotateClusterManagedCertRequest): RotateClusterManagedCertResponse {
  var runtime = new $RuntimeOptions{};
  return rotateClusterManagedCertWithOptions(request, runtime);
}

model SwitchClusterMasterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-w3G9vOJI2****'),
  instanceId?: string(name='InstanceId', description='The ID of the HSM that you want to promote to the master HSM.

This parameter is required.', example='hsm-cn-vj30bil8****'),
}

model SwitchClusterMasterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SwitchClusterMasterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchClusterMasterResponseBody(name='body'),
}

/**
 * @summary Promotes a slave hardware security module (HSM) to the master HSM within the cluster. Clusters that are manually synchronized in the Chinese Mainland do not support this operation.
 *
 * @param request SwitchClusterMasterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchClusterMasterResponse
 */
@context("switchClusterMasterWithContext")
async function switchClusterMasterWithOptions(request: SwitchClusterMasterRequest, runtime: $RuntimeOptions): SwitchClusterMasterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SwitchClusterMaster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Promotes a slave hardware security module (HSM) to the master HSM within the cluster. Clusters that are manually synchronized in the Chinese Mainland do not support this operation.
 *
 * @param request SwitchClusterMasterRequest
 * @return SwitchClusterMasterResponse
 */
async function switchClusterMaster(request: SwitchClusterMasterRequest): SwitchClusterMasterResponse {
  var runtime = new $RuntimeOptions{};
  return switchClusterMasterWithOptions(request, runtime);
}

model SyncClusterRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

This parameter is required.', example='cluster-BqxX63Bsgytet****'),
}

model SyncClusterResponseBody = {
  job?: {
    completed?: boolean(name='Completed', description='Indicates whether the task is complete. Valid values:

*   true
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the task was created. Unit: milliseconds. The value is a UNIX timestamp.', example='1711764127000'),
    error?: string(name='Error', description='The error message returned if the task fails.', example='OperationTimeout'),
    jobId?: string(name='JobId', description='The ID of the task.', example='job-000bu7m5vjmyz9s7qz85'),
    progress?: int32(name='Progress', description='The progress of the task. Unit: percent (%).', example='90'),
    response?: string(name='Response', description='The response returned after the task succeeds.', example='success'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   success
*   running
*   cancel
*   fail', example='success'),
    type?: string(name='Type', description='The operation type. Valid values:

*   create
*   cancel', example='create'),
  }(name='Job', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model SyncClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncClusterResponseBody(name='body'),
}

/**
 * @summary Synchronizes the data of hardware security modules (HSMs) in a cluster.
 *
 * @description *   This operation is used for manually synchronizing data within clusters located in the Chinese Mainland. For clusters outside the Chinese Mainland, automatic data synchronization is supported, and this operation is unnecessary. If you attempt to use this operation, a 400 error code will be returned.
 * *   The data synchronization takes approximately 5 minutes. To avoid service interruptions, we recommend performing this operation during off-peak hours.
 *
 * @param request SyncClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncClusterResponse
 */
@context("syncClusterWithContext")
async function syncClusterWithOptions(request: SyncClusterRequest, runtime: $RuntimeOptions): SyncClusterResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SyncCluster',
    version = '2023-11-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Synchronizes the data of hardware security modules (HSMs) in a cluster.
 *
 * @description *   This operation is used for manually synchronizing data within clusters located in the Chinese Mainland. For clusters outside the Chinese Mainland, automatic data synchronization is supported, and this operation is unnecessary. If you attempt to use this operation, a 400 error code will be returned.
 * *   The data synchronization takes approximately 5 minutes. To avoid service interruptions, we recommend performing this operation during off-peak hours.
 *
 * @param request SyncClusterRequest
 * @return SyncClusterResponse
 */
async function syncCluster(request: SyncClusterRequest): SyncClusterResponse {
  var runtime = new $RuntimeOptions{};
  return syncClusterWithOptions(request, runtime);
}

