/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('outboundbot-inner', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CheckResourceRequest {
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
  level?: long(name='Level'),
  url?: string(name='Url'),
  prompt?: string(name='Prompt'),
}

model CheckResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  prompt?: string(name='Prompt'),
  level?: long(name='Level'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
}

model CheckResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckResourceResponseBody(name='body'),
}

async function checkResourceWithOptions(request: CheckResourceRequest, runtime: Util.RuntimeOptions): CheckResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckResource', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkResource(request: CheckResourceRequest): CheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourceWithOptions(request, runtime);
}

model LogicalDeleteResourceRequest {
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
}

model LogicalDeleteResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  invoker?: string(name='Invoker'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  success?: boolean(name='Success'),
  interrupt?: boolean(name='Interrupt'),
}

model LogicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: LogicalDeleteResourceResponseBody(name='body'),
}

async function logicalDeleteResourceWithOptions(request: LogicalDeleteResourceRequest, runtime: Util.RuntimeOptions): LogicalDeleteResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LogicalDeleteResource', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function logicalDeleteResource(request: LogicalDeleteResourceRequest): LogicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return logicalDeleteResourceWithOptions(request, runtime);
}

model AddNumberSupplierRequest {
  instanceId?: string(name='InstanceId'),
  supplierName?: string(name='SupplierName'),
  concurrency?: int32(name='Concurrency'),
  numbers?: string(name='Numbers'),
  throttlingPolicy?: string(name='ThrottlingPolicy'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
  useCccNumberPicker?: boolean(name='UseCccNumberPicker'),
}

model AddNumberSupplierResponseBody = {
  supplierId?: string(name='SupplierId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AddNumberSupplierResponse = {
  headers: map[string]string(name='headers'),
  body: AddNumberSupplierResponseBody(name='body'),
}

async function addNumberSupplierWithOptions(request: AddNumberSupplierRequest, runtime: Util.RuntimeOptions): AddNumberSupplierResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddNumberSupplier', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addNumberSupplier(request: AddNumberSupplierRequest): AddNumberSupplierResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNumberSupplierWithOptions(request, runtime);
}

model RemoveNumberSupplierRequest {
  instanceId?: string(name='InstanceId'),
  supplierId?: string(name='SupplierId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
}

model RemoveNumberSupplierResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveNumberSupplierResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveNumberSupplierResponseBody(name='body'),
}

async function removeNumberSupplierWithOptions(request: RemoveNumberSupplierRequest, runtime: Util.RuntimeOptions): RemoveNumberSupplierResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveNumberSupplier', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeNumberSupplier(request: RemoveNumberSupplierRequest): RemoveNumberSupplierResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeNumberSupplierWithOptions(request, runtime);
}

model ModifyNumberSupplierRequest {
  instanceId?: string(name='InstanceId'),
  supplierId?: string(name='SupplierId'),
  concurrency?: int32(name='Concurrency'),
  numbers?: string(name='Numbers'),
  throttlingPolicy?: string(name='ThrottlingPolicy'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
  useCccNumberPicker?: boolean(name='UseCccNumberPicker'),
}

model ModifyNumberSupplierResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyNumberSupplierResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNumberSupplierResponseBody(name='body'),
}

async function modifyNumberSupplierWithOptions(request: ModifyNumberSupplierRequest, runtime: Util.RuntimeOptions): ModifyNumberSupplierResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNumberSupplier', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNumberSupplier(request: ModifyNumberSupplierRequest): ModifyNumberSupplierResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNumberSupplierWithOptions(request, runtime);
}

model PhysicalDeleteResourceRequest {
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
}

model PhysicalDeleteResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  invoker?: string(name='Invoker'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  success?: boolean(name='Success'),
  interrupt?: boolean(name='Interrupt'),
}

model PhysicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: PhysicalDeleteResourceResponseBody(name='body'),
}

async function physicalDeleteResourceWithOptions(request: PhysicalDeleteResourceRequest, runtime: Util.RuntimeOptions): PhysicalDeleteResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PhysicalDeleteResource', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function physicalDeleteResource(request: PhysicalDeleteResourceRequest): PhysicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return physicalDeleteResourceWithOptions(request, runtime);
}

model ListNumberSuppliersForSbcMonitorRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model ListNumberSuppliersForSbcMonitorResponseBody = {
  numberSupplierForSbcMonitors?: {
    list?: {
      numberSupplierForSbcMonitor?: [ 
      {
        supplierId?: string(name='SupplierId'),
        instanceId?: string(name='InstanceId'),
        name?: string(name='Name'),
        ramId?: string(name='RamId'),
        numbers?: string(name='Numbers'),
      }
    ](name='NumberSupplierForSbcMonitor')
    }(name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='NumberSupplierForSbcMonitors'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListNumberSuppliersForSbcMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ListNumberSuppliersForSbcMonitorResponseBody(name='body'),
}

async function listNumberSuppliersForSbcMonitorWithOptions(request: ListNumberSuppliersForSbcMonitorRequest, runtime: Util.RuntimeOptions): ListNumberSuppliersForSbcMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListNumberSuppliersForSbcMonitor', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listNumberSuppliersForSbcMonitor(request: ListNumberSuppliersForSbcMonitorRequest): ListNumberSuppliersForSbcMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNumberSuppliersForSbcMonitorWithOptions(request, runtime);
}

