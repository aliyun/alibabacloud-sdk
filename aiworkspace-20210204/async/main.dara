/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AIWorkSpace';
  @version = '2021-02-04';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user'),
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  mountPath?: string(name='MountPath', example='/root/code/'),
  userId?: string(name='UserId', example='1157290171663117'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model Collection {
  collectionName?: string(name='CollectionName', example='AI4D'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  userId?: string(name='UserId', example='155770209******'),
}

model Dataset {
  accessibility?: string(name='Accessibility', example='PRIVATE PUBLIC'),
  dataSourceType?: string(name='DataSourceType', example='OSS URL'),
  dataType?: string(name='DataType', example='COMMON PIC TEXT VIDEO AUDIO'),
  datasetId?: string(name='DatasetId', example='d-c0h44g3wlwkj8o4348'),
  description?: string(name='Description', example='Animal images.'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: DatasetVersion(name='LatestVersion'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='AnimalDataset'),
  options?: string(name='Options', example='jsonstring'),
  ownerId?: string(name='OwnerId', example='1004110000006048'),
  property?: string(name='Property', example='FILE DIRECTORY TABULAR'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceDatasetId?: string(name='SourceDatasetId', example='d-bvfasdf4wxxj8o411'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', example='v2'),
  sourceId?: string(name='SourceId', example='Source Id'),
  sourceType?: string(name='SourceType', example='USER ITAG  PAI_PUBLIC_DATASET'),
  tagTemplateType?: string(name='TagTemplateType', example='text-classification'),
  uri?: string(name='Uri', example='oss://xxx'),
  userId?: string(name='UserId', example='2004110000006048'),
  workspaceId?: string(name='WorkspaceId', example='Workspace Id'),
}

model DatasetFileMeta {
  dataSize?: long(name='DataSize', example='12'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  downloadUrl?: string(name='DownloadUrl'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName', example='car.png'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  score?: float(name='Score', example='0.6'),
  tags?: string(name='Tags'),
  uri?: string(name='Uri', example='oss://test-bucket/dataset/car.png'),
}

model DatasetFileMetaConentUpdate {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId: string(name='DatasetFileMetaId', description='This parameter is required.'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags', example='{"ai":["cat"], "user":["dog"]}'),
}

model DatasetFileMetaContentCreate {
  comment?: string(name='Comment'),
  contentType: string(name='ContentType', description='This parameter is required.'),
  dataSize?: long(name='DataSize'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileFingerPrint: string(name='FileFingerPrint', description='This parameter is required.'),
  fileName?: string(name='FileName'),
  fileType: string(name='FileType', description='This parameter is required.'),
  fileUpdateTime: string(name='FileUpdateTime', description='This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags', example='{"user":["cat"]}'),
  uri: string(name='Uri', description='This parameter is required.'),
}

model DatasetFileMetaContentGet {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags'),
  uri?: string(name='Uri'),
}

model DatasetFileMetaResponse {
  datasetFileMetaId: string(name='DatasetFileMetaId', description='This parameter is required.'),
  result: string(name='Result', description='This parameter is required.'),
  uri?: string(name='Uri'),
}

model DatasetJob {
  completedFileCount?: long(name='CompletedFileCount'),
  createTime?: string(name='CreateTime'),
  datasetJobId?: string(name='DatasetJobId'),
  datasetVersion?: string(name='DatasetVersion'),
  description?: string(name='Description'),
  failedFileCount?: long(name='FailedFileCount'),
  finishTime?: string(name='FinishTime'),
  jobAction?: string(name='JobAction'),
  jobMode?: string(name='JobMode'),
  jobSpec?: string(name='JobSpec'),
  logs?: [ string ](name='Logs'),
  status?: string(name='Status'),
  totalFileCount?: long(name='TotalFileCount'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetJobConfig {
  config?: string(name='Config'),
  configType?: string(name='ConfigType'),
  createTime?: string(name='CreateTime'),
  datasetJobConfigId?: string(name='DatasetJobConfigId'),
  modifyTime?: string(name='ModifyTime'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetLabel {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model DatasetVersion {
  dataCount?: long(name='DataCount'),
  dataSize?: long(name='DataSize'),
  dataSourceType?: string(name='DataSourceType', example='OSS'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  options?: string(name='Options'),
  property?: string(name='Property', example='FILE'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri', example='OSS://xxx'),
  versionName?: string(name='VersionName', example='v1'),
}

model Experiment {
  accessibility?: string(name='Accessibility'),
  artifactUri?: string(name='ArtifactUri'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    ExperimentLabel
  ](name='Labels'),
  latestRun?: Run(name='LatestRun'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  requestId?: string(name='RequestId'),
  tensorboardLogUri?: string(name='TensorboardLogUri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model ExperimentLabel {
  experimentId?: string(name='ExperimentId', example='exp-890waerw09a0f'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model Label {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model LabelInfo {
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model LineageEntity {
  attributes?: map[string]any(name='Attributes'),
  entityType?: string(name='EntityType'),
  name?: string(name='Name'),
  qualifiedName?: string(name='QualifiedName'),
}

model LineageRelation {
  destEntityQualifiedName?: string(name='DestEntityQualifiedName'),
  relationshipGuid?: string(name='RelationshipGuid'),
  srcEntityQualifiedName?: string(name='SrcEntityQualifiedName'),
}

model Model {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-1123*****'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1557702098******'),
  provider?: string(name='Provider', example='pai'),
  task?: string(name='Task', example='text-classifiaction'),
  userId?: string(name='UserId', example='1557702098******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model ModelVersion {
  approvalStatus?: string(name='ApprovalStatus'),
  compressionSpec?: map[string]any(name='CompressionSpec'),
  evaluationSpec?: map[string]any(name='EvaluationSpec'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trainingSpec?: map[string]any(name='TrainingSpec'),
  uri?: string(name='Uri', example='oss://bucket/path-to-model'),
  userId?: string(name='UserId', example='155770209******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='1.0.0'),
}

model Relation {
  errMsg?: string(name='ErrMsg'),
  lineageRelation?: LineageRelation(name='LineageRelation'),
  result?: boolean(name='Result'),
}

model Relationship {
  attributes?: map[string]any(name='Attributes'),
  dataChannel?: string(name='DataChannel'),
  relationshipGuid?: string(name='RelationshipGuid'),
  relationshipType?: string(name='RelationshipType'),
}

model Run {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    RunLabel
  ](name='Labels'),
  metrics?: [
    RunMetric
  ](name='Metrics'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  params?: [
    RunParam
  ](name='Params'),
  requestId?: string(name='RequestId'),
  runId?: string(name='RunId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model RunLabel {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  key: string(name='Key', description='This parameter is required.'),
  runId?: string(name='RunId'),
  value: string(name='Value', description='This parameter is required.'),
}

model RunMetric {
  key: string(name='Key', description='This parameter is required.'),
  step?: long(name='Step'),
  timestamp?: long(name='Timestamp'),
  value: float(name='Value', description='This parameter is required.'),
}

model RunParam {
  key: string(name='Key', description='This parameter is required.'),
  value: string(name='Value', description='This parameter is required.'),
}

model Trial {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [  map[string]any ](name='Labels'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trialId?: string(name='TrialId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model TrialLabel {
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  trialId?: string(name='TrialId'),
  value?: string(name='Value', example='value'),
}

model AcceptDataworksEventRequest {
  data?: map[string]any(name='Data', example='{"eventCode":"d****ct","projectId":"8***6","tenantId":4*******8,"operator":"115*****901"}', position='Body'),
  messageId?: string(name='MessageId', example='539306ba-*****-41a0-****-6dc81060985c', position='Body'),
}

model AcceptDataworksEventResponseBody = {
  requestId?: string(name='requestId', example='ADF6D849-*****-7E7030F0CE53'),
}

model AcceptDataworksEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptDataworksEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AcceptDataworksEvent  AcceptDataworksEventRequest
  * @return AcceptDataworksEventResponse
 */
async function acceptDataworksEvent(request: AcceptDataworksEventRequest): AcceptDataworksEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AcceptDataworksEvent', 'POST', '/api/v1/workspaces/action/acceptdataworksevent', 'json', false, 'json', request);
}

model AddImageRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC', position='Body'),
  description?: string(name='Description', position='Body'),
  imageId?: string(name='ImageId', position='Body'),
  imageUri: string(name='ImageUri', description='This parameter is required.', example='registry.cn-hangzhou.aliyuncs.com/pai-compression/nlp:gpu', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='nlp-compression', position='Body'),
  size?: int32(name='Size', position='Body'),
  sourceId?: string(name='SourceId', position='Body'),
  sourceType?: string(name='SourceType', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='15******45', position='Body'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', example='image-4c62******53uor'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImage  AddImageRequest
  * @return AddImageResponse
 */
async function addImage(request: AddImageRequest): AddImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddImage', 'POST', '/api/v1/images', 'json', false, 'json', request);
}

model AddImageLabelsRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='image-4c62******53uor', position='Path'),
  labels: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels', description='This parameter is required.', position='Body'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImageLabels  AddImageLabelsRequest
  * @return AddImageLabelsResponse
 */
async function addImageLabels(request: AddImageLabelsRequest): AddImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddImageLabels', 'POST', '/api/v1/images/{ImageId}/labels', 'json', false, 'json', request);
}

model AddMemberRoleRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='145883', position='Path'),
  memberId: string(name='MemberId', description='This parameter is required.', example='145883-215139******688039', position='Path'),
  roleName: string(name='RoleName', description='This parameter is required.', example='PAI.AlgoDeveloper', position='Path'),
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMemberRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMemberRole  AddMemberRoleRequest
  * @return AddMemberRoleResponse
 */
async function addMemberRole(request: AddMemberRoleRequest): AddMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddMemberRole', 'POST', '/api/v1/workspaces/{WorkspaceId}/members/{MemberId}/roles/{RoleName}', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-df********534dy', position='Body'),
  resourceId?: string(name='ResourceId', example='12**56', position='Body'),
  resourceType?: string(name='ResourceType', example='workspace', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='requestId', example='6****27E-****-5144-A002-89C****8660F'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroups/action/changeresourcegroup', 'json', false, 'json', request);
}

model CreateCodeSourceRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  codeBranch?: string(name='CodeBranch', example='master', position='Body'),
  codeCommit?: string(name='CodeCommit', position='Body'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/******', position='Body'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='***', position='Body'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='use***', position='Body'),
  description?: string(name='Description', example='code source of dlc examples', position='Body'),
  displayName: string(name='DisplayName', description='This parameter is required.', example='MyCodeSource1', position='Body'),
  mountPath?: string(name='MountPath', example='/root/code/code-source-1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='1234', position='Body'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20********'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3**********'),
}

model CreateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCodeSource  CreateCodeSourceRequest
  * @return CreateCodeSourceResponse
 */
async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCodeSource', 'POST', '/api/v1/codesources', 'json', false, 'json', request);
}

model CreateDatasetRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  dataCount?: long(name='DataCount', minimum=1, maximum=999999999999, position='Body'),
  dataSize?: long(name='DataSize', minimum=1, maximum=999999999999, position='Body'),
  dataSourceType: string(name='DataSourceType', description='This parameter is required.', example='NAS', position='Body'),
  dataType?: string(name='DataType', example='COMMON', position='Body'),
  description?: string(name='Description', position='Body'),
  importInfo?: string(name='ImportInfo', position='Body'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='myName', position='Body'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
  property: string(name='Property', description='This parameter is required.', example='DIRECTORY', position='Body'),
  provider?: string(name='Provider', position='Body'),
  providerType?: string(name='ProviderType', example='Ecs', position='Body'),
  sourceDatasetId?: string(name='SourceDatasetId', position='Body'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', position='Body'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv', position='Body'),
  sourceType?: string(name='SourceType', example='USER', position='Body'),
  uri: string(name='Uri', description='This parameter is required.', example='nas://09f****f2.cn-hangzhou/', position='Body'),
  userId?: string(name='UserId', example='29884000000186970', position='Body'),
  versionDescription?: string(name='VersionDescription', position='Body'),
  versionLabels?: [
    Label
  ](name='VersionLabels', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='478**', position='Body'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', example='d-rbvg5*****jhc9ks92'),
  requestId?: string(name='RequestId', example='B2C51F93-1C07-5477-9705-5FDB****F19F'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataset  CreateDatasetRequest
  * @return CreateDatasetResponse
 */
async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataset', 'POST', '/api/v1/datasets', 'json', false, 'json', request);
}

model CreateDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetas: [
    DatasetFileMetaContentCreate
  ](name='DatasetFileMetas', description='This parameter is required.', position='Body'),
  datasetVersion: string(name='DatasetVersion', description='This parameter is required.', example='v1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='478**', position='Body'),
}

model CreateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
  succeedDetails?: [
    DatasetFileMetaResponse
  ](name='SucceedDetails'),
}

model CreateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetFileMetas  CreateDatasetFileMetasRequest
  * @return CreateDatasetFileMetasResponse
 */
async function createDatasetFileMetas(request: CreateDatasetFileMetasRequest): CreateDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetFileMetas', 'POST', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model CreateDatasetJobRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Body'),
  description?: string(name='Description', position='Body'),
  jobAction: string(name='JobAction', description='This parameter is required.', example='SemanticIndex', position='Body'),
  jobMode?: string(name='JobMode', example='Full', position='Body'),
  jobSpec: string(name='JobSpec', description='This parameter is required.', example='{\\"modelId\\":\\"xxx\\"}', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='478**', position='Body'),
}

model CreateDatasetJobResponseBody = {
  datasetJobId?: string(name='DatasetJobId', example='dsjob-9jx1******uj9e'),
  requestId?: string(name='RequestId', example='99341606-****-0757724D97EE'),
}

model CreateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetJob  CreateDatasetJobRequest
  * @return CreateDatasetJobResponse
 */
async function createDatasetJob(request: CreateDatasetJobRequest): CreateDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetJob', 'POST', '/api/v1/datasets/{DatasetId}/datasetjobs', 'json', false, 'json', request);
}

model CreateDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
  config: string(name='Config', description='This parameter is required.', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }', position='Body'),
  configType: string(name='ConfigType', description='This parameter is required.', example='MultimodalIntelligentTag', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='454716', position='Body'),
}

model CreateDatasetJobConfigResponseBody = {
  datasetJobConfigId?: string(name='DatasetJobConfigId', example='dscfg-xxxxxxxxxxxxxx'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetJobConfig  CreateDatasetJobConfigRequest
  * @return CreateDatasetJobConfigResponse
 */
async function createDatasetJobConfig(request: CreateDatasetJobConfigRequest): CreateDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetJobConfig', 'POST', '/api/v1/datasets/{DatasetId}/datasetjobconfigs', 'json', false, 'json', request);
}

model CreateDatasetLabelsRequest {
  datasetId?: string(name='DatasetId', example='d-lfd60v0p****ujtsdx', position='Path'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
}

model CreateDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='A083731B-4973-54D1-B324-E53****4DD44'),
}

model CreateDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetLabels  CreateDatasetLabelsRequest
  * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabels(request: CreateDatasetLabelsRequest): CreateDatasetLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetLabels', 'POST', '/api/v1/datasets/{DatasetId}/labels', 'json', false, 'json', request);
}

model CreateDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  dataCount?: long(name='DataCount', example='300', position='Body'),
  dataSize?: long(name='DataSize', example='19000', position='Body'),
  dataSourceType: string(name='DataSourceType', description='This parameter is required.', example='OSS', position='Body'),
  description?: string(name='Description', position='Body'),
  importInfo?: string(name='ImportInfo', position='Body'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
  property: string(name='Property', description='This parameter is required.', example='DIRECTORY', position='Body'),
  sourceId?: string(name='SourceId', example='d-a0xbe5n03bhqof46ce', position='Body'),
  sourceType?: string(name='SourceType', example='USER', position='Body'),
  uri: string(name='Uri', description='This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/', position='Body'),
}

model CreateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetVersion  CreateDatasetVersionRequest
  * @return CreateDatasetVersionResponse
 */
async function createDatasetVersion(request: CreateDatasetVersionRequest): CreateDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetVersion', 'POST', '/api/v1/datasets/{DatasetId}/versions', 'json', false, 'json', request);
}

model CreateDatasetVersionLabelsRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v1', position='Path'),
  labels: [
    Label
  ](name='Labels', description='This parameter is required.', position='Body'),
}

model CreateDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetVersionLabels  CreateDatasetVersionLabelsRequest
  * @return CreateDatasetVersionLabelsResponse
 */
async function createDatasetVersionLabels(request: CreateDatasetVersionLabelsRequest): CreateDatasetVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetVersionLabels', 'PUT', '/api/v1/datasets/{DatasetId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model CreateExperimentRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  artifactUri?: string(name='ArtifactUri', description='Artifact的OSS存储路径', example='oss://test-bucket.oss-cn-hangzhou.aliyuncs.com/test', position='Body'),
  labels?: [
    LabelInfo
  ](name='Labels', description='标签', position='Body'),
  name: string(name='Name', description='名称

This parameter is required.', example='exp-test', position='Body'),
  workspaceId: string(name='WorkspaceId', description='工作空间ID

This parameter is required.', example='478**', position='Body'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExperiment  CreateExperimentRequest
  * @return CreateExperimentResponse
 */
async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperiment', 'POST', '/api/v1/experiments', 'json', false, 'json', request);
}

model CreateMemberRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  members: [ 
    {
      roles: [ string ](name='Roles', description='This parameter is required.'),
      userId: string(name='UserId', description='This parameter is required.', example='21513926******88039'),
    }
  ](name='Members', description='This parameter is required.', position='Body'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', example='myDisplayName'),
      memberId?: string(name='MemberId', example='145883-21513926******88039'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='21513926******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model CreateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMember  CreateMemberRequest
  * @return CreateMemberResponse
 */
async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMember', 'POST', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model CreateModelRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  domain?: string(name='Domain', example='nlp', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', position='Body'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  modelDescription?: string(name='ModelDescription', position='Body'),
  modelDoc?: string(name='ModelDoc', example='https://*.md', position='Body'),
  modelName: string(name='ModelName', description='This parameter is required.', position='Body'),
  modelType?: string(name='ModelType', example='Checkpoint', position='Body'),
  orderNumber?: long(name='OrderNumber', example='101', position='Body'),
  origin?: string(name='Origin', example='ModelScope', position='Body'),
  task?: string(name='Task', example='text-classification', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='796**', position='Body'),
}

model CreateModelResponseBody = {
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  requestId?: string(name='RequestId', example='9DAD3112-AE22-5563-9A02-5C7E8****E35'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModel  CreateModelRequest
  * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModel', 'POST', '/api/v1/models', 'json', false, 'json', request);
}

model CreateModelLabelsRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-1dkasjfhds23dft', position='Path'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
}

model CreateModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='F81D9EC0-1872-50F5-A96C-A0647D****1D'),
}

model CreateModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelLabels  CreateModelLabelsRequest
  * @return CreateModelLabelsResponse
 */
async function createModelLabels(request: CreateModelLabelsRequest): CreateModelLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelLabels', 'POST', '/api/v1/models/{ModelId}/labels', 'json', false, 'json', request);
}

model CreateModelVersionRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-dfs1****5c', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', example='Approved', position='Body'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}', position='Body'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}', position='Body'),
  formatType?: string(name='FormatType', example='SavedModel', position='Body'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow', position='Body'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "processor": "tensorflow_gpu_1.12"
}', position='Body'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  metrics?: map[string]any(name='Metrics', example='{}', position='Body'),
  options?: string(name='Options', example='{}', position='Body'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Body'),
  sourceType?: string(name='SourceType', example='PAIFlow', position='Body'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}', position='Body'),
  uri: string(name='Uri', description='This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/', position='Body'),
  versionDescription?: string(name='VersionDescription', position='Body'),
  versionName?: string(name='VersionName', example='0.1.0', position='Body'),
}

model CreateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='21645FCD-BAB9-5742-89AE-AEB27****B2E'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model CreateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelVersion  CreateModelVersionRequest
  * @return CreateModelVersionResponse
 */
async function createModelVersion(request: CreateModelVersionRequest): CreateModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelVersion', 'POST', '/api/v1/models/{ModelId}/versions', 'json', false, 'json', request);
}

model CreateModelVersionLabelsRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='0.1.1', position='Path'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
}

model CreateModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelVersionLabels  CreateModelVersionLabelsRequest
  * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabels(request: CreateModelVersionLabelsRequest): CreateModelVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelVersionLabels', 'POST', '/api/v1/models/{ModelId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model CreateProductOrdersRequest {
  autoPay?: boolean(name='AutoPay', example='true', position='Body'),
  products?: [ 
    {
      autoRenew?: boolean(name='AutoRenew', example='true'),
      chargeType?: string(name='ChargeType', example='POSTPAY'),
      duration?: long(name='Duration', example='1'),
      instanceProperties?: [ 
        {
          code?: string(name='Code', example='commodity_type。'),
          name?: string(name='Name'),
          value?: string(name='Value', example='oss。'),
        }
      ](name='InstanceProperties'),
      orderType?: string(name='OrderType', example='BUY'),
      pricingCycle?: string(name='PricingCycle', example='Month'),
      productCode?: string(name='ProductCode', example='DataWorks_share'),
    }
  ](name='Products', position='Body'),
}

model CreateProductOrdersResponseBody = {
  buyProductRequestId?: string(name='BuyProductRequestId', example='3ed6a882-0d85-4dd8-ad36-cd8d74ab9fdb'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId', example='210292536260646'),
  requestId?: string(name='RequestId', example='ksdjf-jksd-*****slkdjf'),
}

model CreateProductOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductOrdersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProductOrders  CreateProductOrdersRequest
  * @return CreateProductOrdersResponse
 */
async function createProductOrders(request: CreateProductOrdersRequest): CreateProductOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProductOrders', 'POST', '/api/v1/productorders', 'json', false, 'json', request);
}

model CreateRunRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='exp-6thbb5xrbmp*****', position='Body'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  name?: string(name='Name', example='myName', position='Body'),
  params?: [
    RunParam
  ](name='Params', position='Body'),
  sourceId?: string(name='SourceId', example='job-jdnhf***fnrimv', position='Body'),
  sourceType?: string(name='SourceType', example='DLC', position='Body'),
}

model CreateRunResponseBody = {
  runId?: string(name='RunId', example='run-1meoz7VJd2C6f****'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model CreateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRun  CreateRunRequest
  * @return CreateRunResponse
 */
async function createRun(request: CreateRunRequest): CreateRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRun', 'POST', '/api/v1/runs', 'json', false, 'json', request);
}

model CreateWorkspaceRequest {
  description: string(name='Description', description='This parameter is required.', example='description', position='Body'),
  displayName?: string(name='DisplayName', example='display name', position='Body'),
  envTypes: [ string ](name='EnvTypes', description='This parameter is required.', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  workspaceName: string(name='WorkspaceName', description='This parameter is required.', example='workspace_example', position='Body'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspace  CreateWorkspaceRequest
  * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspace', 'POST', '/api/v1/workspaces', 'json', false, 'json', request);
}

model CreateWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  option?: string(name='Option', example='CreateAndAttach', position='Body'),
  resources: [ 
    {
      envType: string(name='EnvType', description='This parameter is required.', example='prod'),
      groupName?: string(name='GroupName', example='groupName'),
      isDefault?: boolean(name='IsDefault', example='false'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name: string(name='Name', description='This parameter is required.', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          id: string(name='Id', description='This parameter is required.', example='232892******92912'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec'),
      workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123'),
    }
  ](name='Resources', description='This parameter is required.', position='Body'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      id?: string(name='Id', example='1234'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CreateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspaceResource  CreateWorkspaceResourceRequest
  * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResource(request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspaceResource', 'POST', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

model DeleteCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='This parameter is required.', example='code-20210111103721-85qz78ia96lu', position='Path'),
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCodeSource  DeleteCodeSourceRequest
  * @return DeleteCodeSourceResponse
 */
async function deleteCodeSource(request: DeleteCodeSourceRequest): DeleteCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCodeSource', 'DELETE', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model DeleteDatasetRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataset  DeleteDatasetRequest
  * @return DeleteDatasetResponse
 */
async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataset', 'DELETE', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model DeleteDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetaIds: string(name='DatasetFileMetaIds', description='This parameter is required.', example='07914c9534586e4e7aa6e9dbca5009082df******fd8a0d857b33296c59bf6', position='Query'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='132602', position='Query'),
}

model DeleteDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
}

model DeleteDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetFileMetas  DeleteDatasetFileMetasRequest
  * @return DeleteDatasetFileMetasResponse
 */
async function deleteDatasetFileMetas(request: DeleteDatasetFileMetasRequest): DeleteDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetFileMetas', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model DeleteDatasetJobRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='This parameter is required.', example='dsjob-9jx1******uj9e', position='Path'),
}

model DeleteDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetJob  DeleteDatasetJobRequest
  * @return DeleteDatasetJobResponse
 */
async function deleteDatasetJob(request: DeleteDatasetJobRequest): DeleteDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetJob', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model DeleteDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  workspaceId?: string(name='WorkspaceId', example='513663', position='Query'),
}

model DeleteDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model DeleteDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetJobConfig  DeleteDatasetJobConfigRequest
  * @return DeleteDatasetJobConfigResponse
 */
async function deleteDatasetJobConfig(request: DeleteDatasetJobConfigRequest): DeleteDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetJobConfig', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model DeleteDatasetLabelsRequest {
  datasetId?: string(name='DatasetId', example='d-rbvg5****jhc9ks92', position='Path'),
  labelKeys?: string(name='LabelKeys', example='key1,key2', position='Query'),
}

model DeleteDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
}

model DeleteDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetLabels  DeleteDatasetLabelsRequest
  * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabels(request: DeleteDatasetLabelsRequest): DeleteDatasetLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetLabels', 'DELETE', '/api/v1/datasets/{DatasetId}/labels', 'json', false, 'json', request);
}

model DeleteDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v2', position='Path'),
}

model DeleteDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetVersion  DeleteDatasetVersionRequest
  * @return DeleteDatasetVersionResponse
 */
async function deleteDatasetVersion(request: DeleteDatasetVersionRequest): DeleteDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetVersion', 'DELETE', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model DeleteDatasetVersionLabelsRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v1', position='Path'),
  keys: string(name='Keys', description='This parameter is required.', example='key1,key2', position='Query'),
}

model DeleteDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetVersionLabels  DeleteDatasetVersionLabelsRequest
  * @return DeleteDatasetVersionLabelsResponse
 */
async function deleteDatasetVersionLabels(request: DeleteDatasetVersionLabelsRequest): DeleteDatasetVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetVersionLabels', 'DELETE', '/api/v1/datasets/{DatasetId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model DeleteExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='exp-1zpfthdx******', position='Path'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
}

model DeleteExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperiment  DeleteExperimentRequest
  * @return DeleteExperimentResponse
 */
async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperiment', 'DELETE', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model DeleteExperimentLabelRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  key: string(name='Key', description='This parameter is required.', example='is_evaluate', position='Path'),
}

model DeleteExperimentLabelResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteExperimentLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperimentLabel  DeleteExperimentLabelRequest
  * @return DeleteExperimentLabelResponse
 */
async function deleteExperimentLabel(request: DeleteExperimentLabelRequest): DeleteExperimentLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperimentLabel', 'DELETE', '/api/v1/experiments/{ExperimentId}/labels/{Key}', 'json', false, 'json', request);
}

model DeleteMembersRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='145883', position='Path'),
  memberIds: string(name='MemberIds', description='This parameter is required.', example='145883-21513926******88039,145883-2769726******87513', position='Query'),
}

model DeleteMembersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model DeleteMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMembers  DeleteMembersRequest
  * @return DeleteMembersResponse
 */
async function deleteMembers(request: DeleteMembersRequest): DeleteMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMembers', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model DeleteModelRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5wzl****ks92', position='Path'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModel  DeleteModelRequest
  * @return DeleteModelResponse
 */
async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModel', 'DELETE', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model DeleteModelLabelsRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-d8dfd****sjfd', position='Path'),
  labelKeys?: string(name='LabelKeys', example='key1,key2', position='Query'),
}

model DeleteModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelLabels  DeleteModelLabelsRequest
  * @return DeleteModelLabelsResponse
 */
async function deleteModelLabels(request: DeleteModelLabelsRequest): DeleteModelLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelLabels', 'DELETE', '/api/v1/models/{ModelId}/labels', 'json', false, 'json', request);
}

model DeleteModelVersionRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='0.1.1', position='Path'),
}

model DeleteModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelVersion  DeleteModelVersionRequest
  * @return DeleteModelVersionResponse
 */
async function deleteModelVersion(request: DeleteModelVersionRequest): DeleteModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelVersion', 'DELETE', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model DeleteModelVersionLabelsRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-d8dfd****sjfd', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='0.1.1', position='Path'),
  labelKeys?: string(name='LabelKeys', example='key1,key2', position='Query'),
}

model DeleteModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelVersionLabels  DeleteModelVersionLabelsRequest
  * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabels(request: DeleteModelVersionLabelsRequest): DeleteModelVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelVersionLabels', 'DELETE', '/api/v1/models/{ModelId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model DeleteRunRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
}

model DeleteRunResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRun  DeleteRunRequest
  * @return DeleteRunResponse
 */
async function deleteRun(request: DeleteRunRequest): DeleteRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRun', 'DELETE', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model DeleteRunLabelRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  key: string(name='Key', description='This parameter is required.', example='is_evaluate', position='Path'),
}

model DeleteRunLabelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRunLabel  DeleteRunLabelRequest
  * @return DeleteRunLabelResponse
 */
async function deleteRunLabel(request: DeleteRunLabelRequest): DeleteRunLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRunLabel', 'DELETE', '/api/v1/runs/{RunId}/labels/{Key}', 'json', false, 'json', request);
}

model DeleteWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspace  DeleteWorkspaceRequest
  * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspace', 'DELETE', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model DeleteWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  groupName?: string(name='GroupName', example='group', position='Query'),
  labels?: string(name='Labels', position='Query'),
  option?: string(name='Option', example='DetachAndDelete', position='Query'),
  productType?: string(name='ProductType', example='DLC', position='Query'),
  resourceIds?: string(name='ResourceIds', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model DeleteWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspaceResource  DeleteWorkspaceResourceRequest
  * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResource(request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspaceResource', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

model GetCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='This parameter is required.', example='code-202**********', position='Path'),
}

model GetCodeSourceResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da10***********'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='xxxx'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user1'),
  codeSourceId?: string(name='CodeSourceId', example='code-202**********'),
  description?: string(name='Description', example='This is my data source 1.'),
  displayName?: string(name='DisplayName', example='MyCodeSource1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T23:36:01.123Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T23:36:01.123Z'),
  mountPath?: string(name='MountPath', example='/root/code'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  userId?: string(name='UserId', example='1722********'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model GetCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCodeSource  GetCodeSourceRequest
  * @return GetCodeSourceResponse
 */
async function getCodeSource(request: GetCodeSourceRequest): GetCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeSource', 'GET', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model GetDatasetRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
}

model GetDatasetResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  dataSourceType?: string(name='DataSourceType', example='NAS'),
  dataType?: string(name='DataType', example='COMMON'),
  datasetId?: string(name='DatasetId', example='d-rbvg5wz****c9ks92'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: DatasetVersion(name='LatestVersion'),
  mountAccess?: string(name='MountAccess'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  ownerId?: string(name='OwnerId', example='1631044****3440'),
  property?: string(name='Property', example='DIRECTORY'),
  provider?: string(name='Provider'),
  providerType?: string(name='ProviderType'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceDatasetId?: string(name='SourceDatasetId'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='USER'),
  tagTemplateType?: string(name='TagTemplateType'),
  uri?: string(name='Uri', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', example='2485765****023475'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model GetDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataset  GetDatasetRequest
  * @return GetDatasetResponse
 */
async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataset', 'GET', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model GetDatasetFileMetaRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetFileMetaId: string(name='DatasetFileMetaId', description='This parameter is required.', example='07914c9534586e4e7aa6e9dbca5009082df******fd8a0d857b33296c59bf6', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='1234', position='Query'),
}

model GetDatasetFileMetaResponseBody = {
  datasetFileMeta?: DatasetFileMetaContentGet(name='DatasetFileMeta'),
  datasetId?: string(name='DatasetId'),
  datasetVersion?: string(name='DatasetVersion'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetDatasetFileMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetFileMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetFileMeta  GetDatasetFileMetaRequest
  * @return GetDatasetFileMetaResponse
 */
async function getDatasetFileMeta(request: GetDatasetFileMetaRequest): GetDatasetFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetFileMeta', 'GET', '/api/v1/datasets/{DatasetId}/datasetfilemetas/{DatasetFileMetaId}', 'json', false, 'json', request);
}

model GetDatasetJobRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='This parameter is required.', example='dsjob-9jx1xxxxxxuj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='478**', position='Query'),
}

model GetDatasetJobResponseBody = {
  completedFileCount?: long(name='CompletedFileCount', example='990'),
  createTime?: string(name='CreateTime', example='2024-11-15T07:06:42Z'),
  description?: string(name='Description'),
  failedFileCount?: long(name='FailedFileCount', example='10'),
  finishTime?: string(name='FinishTime', example='2024-07-16T02:03:23Z'),
  jobAction?: string(name='JobAction', example='SemanticIndex'),
  jobMode?: string(name='JobMode', example='Full'),
  jobSpec?: string(name='JobSpec', example='{\\"modelId\\":\\"xxx\\"}'),
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
  status?: string(name='Status', example='Running'),
  totalFileCount?: long(name='TotalFileCount', example='1000'),
}

model GetDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetJob  GetDatasetJobRequest
  * @return GetDatasetJobResponse
 */
async function getDatasetJob(request: GetDatasetJobRequest): GetDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetJob', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model GetDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  workspaceId?: string(name='WorkspaceId', example='114243', position='Query'),
}

model GetDatasetJobConfigResponseBody = {
  config?: string(name='Config', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }'),
  configType?: string(name='ConfigType', example='MultimodalIntelligentTag'),
  createTime?: string(name='CreateTime', example='2024-10-16T01:44:10Z'),
  datasetId?: string(name='DatasetId', example='d-lfd60v0p****ujtsdx'),
  modifyTime?: string(name='ModifyTime', example='2024-12-26T02:17:18Z'),
  requestId?: string(name='RequestId', description='Id of the request', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetJobConfig  GetDatasetJobConfigRequest
  * @return GetDatasetJobConfigResponse
 */
async function getDatasetJobConfig(request: GetDatasetJobConfigRequest): GetDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetJobConfig', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model GetDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v1', position='Path'),
}

model GetDatasetVersionResponseBody = {
  dataCount?: long(name='DataCount', description='数据集的数据量'),
  dataSize?: long(name='DataSize', description='数据集版本的数据大小。'),
  dataSourceType: string(name='DataSourceType', description='数据源类型。支持以下取值：
- OSS：阿里云对象存储（OSS）。
- NAS：阿里云文件存储（NAS）。

This parameter is required.'),
  datasetId?: string(name='DatasetId', description='代表资源一级ID的资源属性字段'),
  description?: string(name='Description', description='数据集版本的描述信息。'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='创建时间。'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels', description='代表资源标签的资源属性字段'),
  mountAccess?: string(name='MountAccess'),
  options?: string(name='Options', description='扩展字段，JsonString类型。
当DLC使用数据集时，可通过配置mountPath字段指定数据集默认挂载路径。'),
  property: string(name='Property', description='数据集的属性。支持以下取值：
- FILE：文件。
- DIRECTORY：文件夹。

This parameter is required.'),
  requestId?: string(name='RequestId'),
  sourceId?: string(name='SourceId', description='数据来源ID。'),
  sourceType?: string(name='SourceType', description='数据来源类型，默认为USER。支持以下取值：
- PAI-PUBLIC-DATASET：PAI公共数据集。
- ITAG：iTAG模块标注结果生成的数据集。
- USER：用户注册的数据集。'),
  uri: string(name='Uri', description='Uri配置样例如下：
- 数据源类型为OSS：`oss://bucket.endpoint/object`
- 数据源类型为NAS：
通用型NAS格式为：`nas://<nasfisid>.region/subpath/to/dir/`；
CPFS1.0：`nas://<cpfs-fsid>.region/subpath/to/dir/`；
CPFS2.0：`nas://<cpfs-fsid>.region/<protocolserviceid>/`。
CPFS1.0和CPFS2.0根据fsid的格式来区分：CPFS1.0 格式为cpfs-<8位ascii字符>；CPFS2.0 格式为cpfs-<16为ascii字符>。

This parameter is required.'),
  versionName?: string(name='VersionName', description='代表资源名称的资源属性字段'),
}

model GetDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetVersion  GetDatasetVersionRequest
  * @return GetDatasetVersionResponse
 */
async function getDatasetVersion(request: GetDatasetVersionRequest): GetDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetVersion', 'GET', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose', example='false', position='Query'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code', example='200'),
      message?: string(name='Message', example='Create Failed'),
      type?: string(name='Type', example='CREATING'),
    }
  ](name='Conditions'),
  creator?: string(name='Creator', example='17915******4216'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  owner?: {
    userId?: string(name='UserId', example='17915******4216'),
    userKp?: string(name='UserKp', example='17915******4216'),
    userName?: string(name='UserName', example='username'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDefaultWorkspace  GetDefaultWorkspaceRequest
  * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDefaultWorkspace', 'GET', '/api/v1/defaultWorkspaces', 'json', false, 'json', request);
}

model GetExperimentRequest {
  experimentId?: string(name='ExperimentId', example='exp-1zpfthdx******', position='Path'),
  verbose?: boolean(name='Verbose', example='false', position='Query'),
}

model GetExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Experiment  
}

/**
  * @param request  the request parameters of GetExperiment  GetExperimentRequest
  * @return GetExperimentResponse
 */
async function getExperiment(request: GetExperimentRequest): GetExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperiment', 'GET', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model GetImageRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='image-4c62******53uor', position='Path'),
  verbose?: boolean(name='Verbose', example='false', position='Query'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  imageUri?: string(name='ImageUri', example='registry.cn-hangzhou.aliyuncs.******ession/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  name?: string(name='Name', example='nlp-compression'),
  parentUserId?: string(name='ParentUserId', example='15577******8921'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  size?: int32(name='Size'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  userId?: string(name='UserId', example='15577******8921'),
  workspaceId?: string(name='WorkspaceId', example='15945'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImage  GetImageRequest
  * @return GetImageResponse
 */
async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetImage', 'GET', '/api/v1/images/{ImageId}', 'json', false, 'json', request);
}

model GetMemberRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='145883', position='Path'),
  memberId?: string(name='MemberId', position='Query'),
  userId?: string(name='UserId', example='21513926******88039', position='Query'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName', example='myDisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  memberId?: string(name='MemberId', example='145883-21513926******88039'),
  memberName?: string(name='MemberName', example='user1'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  roles?: [ string ](name='Roles'),
  userId?: string(name='UserId', example='21513926******88039'),
}

model GetMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMember  GetMemberRequest
  * @return GetMemberResponse
 */
async function getMember(request: GetMemberRequest): GetMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMember', 'GET', '/api/v1/workspaces/{WorkspaceId}/member', 'json', false, 'json', request);
}

model GetModelRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5****c9ks92', position='Path'),
}

model GetModelResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='1'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  provider?: string(name='Provider', example='pai'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  task?: string(name='Task', example='text-classification'),
  userId?: string(name='UserId', example='1234567890******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model GetModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModel  GetModelRequest
  * @return GetModelResponse
 */
async function getModel(request: GetModelRequest): GetModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModel', 'GET', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model GetModelVersionRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='1.0.1', position='Path'),
}

model GetModelVersionResponseBody = {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "Processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId', example='1234567890******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model GetModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModelVersion  GetModelVersionRequest
  * @return GetModelVersionResponse
 */
async function getModelVersion(request: GetModelVersionRequest): GetModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelVersion', 'GET', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model GetPermissionRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  permissionCode: string(name='PermissionCode', description='This parameter is required.', example='PaiDLC:GetTensorboard', position='Path'),
  accessibility?: string(name='Accessibility', example='PUBLIC', position='Query'),
  creator?: string(name='Creator', example='17915******4216', position='Query'),
  labels?: map[string]any(name='Labels', shrink='json', position='Query'),
  option?: string(name='Option', position='Query'),
  resource?: string(name='Resource', position='Query'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode', example='PaiDLC:ListJobs'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility', example='PRIVATE'),
      entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
    }
  ](name='PermissionRules'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model GetPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPermission  GetPermissionRequest
  * @return GetPermissionResponse
 */
async function getPermission(request: GetPermissionRequest): GetPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPermission', 'GET', '/api/v1/workspaces/{WorkspaceId}/permissions/{PermissionCode}', 'json', false, 'json', request);
}

model GetRunRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
}

model GetRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Run  
}

/**
  * @param request  the request parameters of GetRun  GetRunRequest
  * @return GetRunResponse
 */
async function getRun(request: GetRunRequest): GetRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRun', 'GET', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='12345', position='Path'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames'),
  creator?: string(name='Creator', example='1157******94123'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  isDefault?: boolean(name='IsDefault', example='true'),
  owner?: {
    displayName?: string(name='DisplayName', example='mings****t'),
    userId?: string(name='UserId', example='1157******94123'),
    userKp?: string(name='UserKp', example='1157******94123'),
    userName?: string(name='UserName', example='mings****t'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B4DED1B5A34C'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkspace  GetWorkspaceRequest
  * @return GetWorkspaceResponse
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspace', 'GET', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', example='MyDataSource', position='Query'),
  order?: string(name='Order', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtModifyTime', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='1234', position='Query'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListCodeSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCodeSources  ListCodeSourcesRequest
  * @return ListCodeSourcesResponse
 */
async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCodeSources', 'GET', '/api/v1/codesources', 'json', false, 'json', request);
}

model ListDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetVersion: string(name='DatasetVersion', description='This parameter is required.', example='v1', position='Query'),
  endFileUpdateTime?: string(name='EndFileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z', position='Query'),
  nextToken?: string(name='NextToken', example='90a6ee35-****-4cd4-927e-1f45e1cb8b62_1729644433000', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  queryText?: string(name='QueryText', position='Query'),
  queryType?: string(name='QueryType', example='TAG', position='Query'),
  scoreThreshold?: float(name='ScoreThreshold', example='0.6', position='Query'),
  sortBy?: string(name='SortBy', example='FileCreateTime', position='Query'),
  startFileUpdateTime?: string(name='StartFileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z', position='Query'),
  topK?: int32(name='TopK', example='100', minimum=1, maximum=1000, position='Query'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='105173', position='Query'),
}

model ListDatasetFileMetasResponseBody = {
  datasetFileMetas?: [
    DatasetFileMeta
  ](name='DatasetFileMetas'),
  datasetId?: string(name='DatasetId'),
  datasetVersion?: string(name='DatasetVersion'),
  nextToken?: string(name='NextToken', example='90******-f5c5-4cd4-927e-1f45e1cb8b62_1729644433000'),
  pageSize?: int32(name='PageSize', example='30'),
  totalCount?: int32(name='TotalCount', example='123'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetFileMetas  ListDatasetFileMetasRequest
  * @return ListDatasetFileMetasResponse
 */
async function listDatasetFileMetas(request: ListDatasetFileMetasRequest): ListDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetFileMetas', 'GET', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model ListDatasetJobConfigsRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  configType?: string(name='ConfigType', example='MultimodalIntelligentTag', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='431514', position='Query'),
}

model ListDatasetJobConfigsResponseBody = {
  datasetJobConfigs?: [
    DatasetJobConfig
  ](name='DatasetJobConfigs'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListDatasetJobConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetJobConfigs  ListDatasetJobConfigsRequest
  * @return ListDatasetJobConfigsResponse
 */
async function listDatasetJobConfigs(request: ListDatasetJobConfigsRequest): ListDatasetJobConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetJobConfigs', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/', 'json', false, 'json', request);
}

model ListDatasetJobsRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Query'),
  jobAction?: string(name='JobAction', example='SemanticIndex', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='1234', position='Query'),
}

model ListDatasetJobsResponseBody = {
  datasetJobs?: [
    DatasetJob
  ](name='DatasetJobs'),
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  totalCount?: int32(name='TotalCount'),
}

model ListDatasetJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetJobs  ListDatasetJobsRequest
  * @return ListDatasetJobsResponse
 */
async function listDatasetJobs(request: ListDatasetJobsRequest): ListDatasetJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetJobs', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobs', 'json', false, 'json', request);
}

model ListDatasetVersionsRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  labelKeys?: string(name='LabelKeys', example='key1,key2', position='Query'),
  labelValues?: string(name='LabelValues', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  properties?: string(name='Properties', example='DIRECTORY', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', example='d-a0xbe5n03bhqof46ce', position='Query'),
  sourceTypes?: string(name='SourceTypes', example='USER', position='Query'),
}

model ListDatasetVersionsResponseBody = {
  datasetVersions?: [
    DatasetVersion
  ](name='DatasetVersions'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListDatasetVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetVersions  ListDatasetVersionsRequest
  * @return ListDatasetVersionsResponse
 */
async function listDatasetVersions(request: ListDatasetVersionsRequest): ListDatasetVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetVersions', 'GET', '/api/v1/datasets/{DatasetId}/versions', 'json', false, 'json', request);
}

model ListDatasetsRequest {
  dataSourceTypes?: string(name='DataSourceTypes', example='OSS', position='Query'),
  dataTypes?: string(name='DataTypes', example='COMMON,TEXT', position='Query'),
  label?: string(name='Label', example='test', position='Query'),
  name?: string(name='Name', example='myName', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  properties?: string(name='Properties', example='FILE', position='Query'),
  provider?: string(name='Provider', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sourceDatasetId?: string(name='SourceDatasetId', position='Query'),
  sourceId?: string(name='SourceId', example='d-rbvg5wzljzjhc9ks92', position='Query'),
  sourceTypes?: string(name='SourceTypes', example='USER,ITAG', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='324**', position='Query'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListDatasetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasets  ListDatasetsRequest
  * @return ListDatasetsResponse
 */
async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasets', 'GET', '/api/v1/datasets', 'json', false, 'json', request);
}

model ListExperimentRequest {
  labels?: string(name='Labels', example='is_evaluation:true', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  name?: string(name='Name', example='exp-test', position='Query'),
  options?: {
    matchNameExactly?: string(name='match_name_exactly', example='true'),
  }(name='Options', shrink='json', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  orderBy?: string(name='OrderBy', example='GmtCreateTime DESC,Name ASC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  pageToken?: long(name='PageToken', example='0', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  verbose?: boolean(name='Verbose', example='false', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='151739', position='Query'),
}

model ListExperimentResponseBody = {
  experiments?: [
    Experiment
  ](name='Experiments'),
  nextPageToken?: long(name='NextPageToken', example='0'),
  totalCount?: long(name='TotalCount', example='5'),
  requestId?: string(name='requestId', example='0C6835C5-A424-5AFB-ACC2-F1E3CA1ABF7C'),
}

model ListExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExperiment  ListExperimentRequest
  * @return ListExperimentResponse
 */
async function listExperiment(request: ListExperimentRequest): ListExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperiment', 'GET', '/api/v1/experiments', 'json', false, 'json', request);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId', example='image-4c62******53uor', position='Query'),
  labelFilter?: string(name='LabelFilter', example='system.framework=XGBoost 1.6.0,system.official=true', position='Query'),
  labelKeys?: string(name='LabelKeys', example='system.framework,system.official', position='Query'),
  region?: string(name='Region', example='cn-shanghai', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='12345', position='Query'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImageLabels  ListImageLabelsRequest
  * @return ListImageLabelsResponse
 */
async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListImageLabels', 'GET', '/api/v1/image/labels', 'json', false, 'json', request);
}

model ListImagesRequest {
  accessibility?: string(name='Accessibility', position='Query'),
  imageUri?: string(name='ImageUri', position='Query'),
  labels?: string(name='Labels', example='system.framework=XGBoost 1.6.0,system.official=true', position='Query'),
  name?: string(name='Name', example='tensorflow_2.9', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  query?: string(name='Query', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='20******55', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility', example='PUBLIC'),
      description?: string(name='Description', example='desc'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      imageId?: string(name='ImageId', example='image-tzi7f9******s45t'),
      imageUri?: string(name='ImageUri'),
      labels?: [ 
        {
          key?: string(name='Key', example='system.chipType'),
          value?: string(name='Value', example='GPU'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='tensorflow_2.9'),
      parentUserId?: string(name='ParentUserId', example='15577******82932'),
      size?: int32(name='Size'),
      sourceId?: string(name='SourceId'),
      sourceType?: string(name='SourceType'),
      userId?: string(name='UserId', example='15577******82932'),
      workspaceId?: string(name='WorkspaceId', example='20******55'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImages  ListImagesRequest
  * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListImages', 'GET', '/api/v1/images', 'json', false, 'json', request);
}

model ListMembersRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  memberName?: string(name='MemberName', example='zhangsan', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  roles?: string(name='Roles', example='PAI.AlgoDeveloper', position='Query'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      accountName?: string(name='AccountName'),
      displayName?: string(name='DisplayName', example='myDisplayName'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      memberId?: string(name='MemberId', example='14588*****51688039'),
      memberName?: string(name='MemberName', example='user1'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='215139******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMembers  ListMembersRequest
  * @return ListMembersResponse
 */
async function listMembers(request: ListMembersRequest): ListMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMembers', 'GET', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model ListModelVersionsRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-dajbueh******', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', example='Approved', position='Query'),
  formatType?: string(name='FormatType', example='SavedModel', position='Query'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow', position='Query'),
  label?: string(name='Label', example='key1', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Query'),
  sourceType?: string(name='SourceType', example='PAIFlow', position='Query'),
  versionName?: string(name='VersionName', example='1.0.1', position='Query'),
}

model ListModelVersionsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC***3C83E'),
  totalCount?: long(name='TotalCount', example='15'),
  versions?: [
    ModelVersion
  ](name='Versions'),
}

model ListModelVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModelVersions  ListModelVersionsRequest
  * @return ListModelVersionsResponse
 */
async function listModelVersions(request: ListModelVersionsRequest): ListModelVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModelVersions', 'GET', '/api/v1/models/{ModelId}/versions', 'json', false, 'json', request);
}

model ListModelsRequest {
  collections?: string(name='Collections', example='AI4D,QuickStart', position='Query'),
  domain?: string(name='Domain', example='nlp', position='Query'),
  label?: string(name='Label', example='key1', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  modelType?: string(name='ModelType', example='Endpoint', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  origin?: string(name='Origin', example='ModelScope', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  provider?: string(name='Provider', example='pai', position='Query'),
  query?: string(name='Query', example='nlp', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  task?: string(name='Task', example='text-classification', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='324**', position='Query'),
}

model ListModelsResponseBody = {
  models?: [
    Model
  ](name='Models'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModels  ListModelsRequest
  * @return ListModelsResponse
 */
async function listModels(request: ListModelsRequest): ListModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModels', 'GET', '/api/v1/models', 'json', false, 'json', request);
}

model ListPermissionsRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', example='PaiDLC:GetTensorboard'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', example='PRIVATE'),
          entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
        }
      ](name='PermissionRules'),
    }
  ](name='Permissions'),
  requestId?: string(name='RequestId', example='2AE63638-5420-56DC-B******8174039A0'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPermissions  ListPermissionsRequest
  * @return ListPermissionsResponse
 */
async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPermissions', 'GET', '/api/v1/workspaces/{WorkspaceId}/permissions', 'json', false, 'json', request);
}

model ListProductsRequest {
  productCodes?: string(name='ProductCodes', example='PAI_isolate', position='Query'),
  serviceCodes?: string(name='ServiceCodes', example='oss', position='Query'),
  verbose?: boolean(name='Verbose', position='Query'),
}

model ListProductsResponseBody = {
  products?: [ 
    {
      hasPermissionToPurchase?: boolean(name='HasPermissionToPurchase'),
      isPurchased?: boolean(name='IsPurchased', example='true'),
      productCode?: string(name='ProductCode', example='DataWorks_isolate'),
      productInstanceId?: string(name='ProductInstanceId'),
      purchaseUrl?: string(name='PurchaseUrl', example='https://common-buy.aliy'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  services?: [ 
    {
      isOpen?: boolean(name='IsOpen', example='true'),
      openUrl?: string(name='OpenUrl'),
      serviceCode?: string(name='ServiceCode', example='oss'),
    }
  ](name='Services'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/api/v1/products', 'json', false, 'json', request);
}

model ListQuotasRequest {
  name?: string(name='Name', example='quota-name', position='Query'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      displayName?: string(name='DisplayName'),
      id?: string(name='Id', example='1828233'),
      mode?: string(name='Mode', example='isolate'),
      name?: string(name='Name', example='quota-name'),
      productCode?: string(name='ProductCode', example='MaxCompute_share'),
      quotaType?: string(name='QuotaType', example='MaxCompute'),
      specs?: [ 
        {
          name?: string(name='Name', example='cu'),
          type?: string(name='Type', example='string'),
          value?: string(name='Value', example='11500'),
        }
      ](name='Specs', example='{\\"cu\\":\\"11500\\",\\"minCu\\":\\"2300\\",\\"parentId\\":\\"0\\"}'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQuotas  ListQuotasRequest
  * @return ListQuotasResponse
 */
async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotas', 'GET', '/api/v1/quotas', 'json', false, 'json', request);
}

model ListResourcesRequest {
  groupName?: string(name='GroupName', example='group', position='Query'),
  labels?: string(name='Labels', position='Query'),
  option?: string(name='Option', example='ListResourceByWorkspace', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productTypes?: string(name='ProductTypes', example='MaxCompute', position='Query'),
  quotaIds?: string(name='QuotaIds', position='Query'),
  resourceName?: string(name='ResourceName', example='resource', position='Query'),
  resourceTypes?: string(name='ResourceTypes', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
  verboseFields?: string(name='VerboseFields', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='123', position='Query'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      encryption?: {
        algorithm?: string(name='Algorithm'),
        enabled?: boolean(name='Enabled'),
        key?: string(name='Key'),
      }(name='Encryption'),
      envType?: string(name='EnvType', example='prod'),
      executor?: {
        ownerId?: string(name='OwnerId'),
      }(name='Executor'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      groupName?: string(name='GroupName', example='groupName'),
      id?: string(name='Id', example='123'),
      isDefault?: boolean(name='IsDefault', example='true'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', example='cpu'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='123'),
          mode?: string(name='Mode', example='develop'),
          name?: string(name='Name', example='QuotaName'),
          productCode?: string(name='ProductCode', example='MaxCompute_isolate'),
          quotaType?: string(name='QuotaType', example='MaxCompute'),
          specs?: [ 
            {
              name?: string(name='Name', example='cu'),
              value?: string(name='Value', example='11500'),
            }
          ](name='Specs', example='{\\"cu\\":\\"11500\\",\\"minCu\\":\\"2300\\",\\"parentId\\":\\"0\\"}'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec', example='对于MaxCompute {"Endpoint": "odps.alibaba-inc.com", "Project": "mignshi"}'),
      workspaceId?: string(name='WorkspaceId', example='123'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v1/resources', 'json', false, 'json', request);
}

model ListRunMetricsRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  key: string(name='Key', description='This parameter is required.', example='loss', position='Query'),
  maxResults?: long(name='MaxResults', example='100', position='Query'),
  pageToken?: long(name='PageToken', example='0', position='Query'),
}

model ListRunMetricsResponseBody = {
  metrics?: [
    RunMetric
  ](name='Metrics'),
  nextPageToken?: long(name='NextPageToken', example='0'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRunMetrics  ListRunMetricsRequest
  * @return ListRunMetricsResponse
 */
async function listRunMetrics(request: ListRunMetricsRequest): ListRunMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRunMetrics', 'GET', '/api/v1/runs/{RunId}/metrics', 'json', false, 'json', request);
}

model ListRunsRequest {
  experimentId?: string(name='ExperimentId', example='exp-1zpfthdx******', position='Query'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z', position='Query'),
  labels?: string(name='Labels', example='is_evaluation:true', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  name?: string(name='Name', example='myName', position='Query'),
  order?: string(name='Order', example='DESC', position='Query'),
  orderBy?: string(name='OrderBy', example='GmtCreateTime DESC,Name ASC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  pageToken?: long(name='PageToken', example='0', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', example='job-rbvg5wzlj****', position='Query'),
  sourceType?: string(name='SourceType', example='TrainingService', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='22840', position='Query'),
}

model ListRunsResponseBody = {
  nextPageToken?: long(name='NextPageToken', example='0'),
  runs?: [
    Run
  ](name='Runs'),
  totalCount?: long(name='TotalCount', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRuns  ListRunsRequest
  * @return ListRunsResponse
 */
async function listRuns(request: ListRunsRequest): ListRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuns', 'GET', '/api/v1/runs', 'json', false, 'json', request);
}

model ListWorkspaceUsersRequest {
  workspaceId?: string(name='WorkspaceId', example='12345', position='Path'),
  userName?: string(name='UserName', position='Query'),
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  totalCount?: long(name='TotalCount', example='2'),
  users?: [ 
    {
      userId?: string(name='UserId', example='1611******3000'),
      userName?: string(name='UserName', example='she******mo'),
    }
  ](name='Users'),
}

model ListWorkspaceUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaceUsers  ListWorkspaceUsersRequest
  * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsers(request: ListWorkspaceUsersRequest): ListWorkspaceUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaceUsers', 'GET', '/api/v1/workspaces/{WorkspaceId}/users', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields', example='Id', position='Query'),
  moduleList?: string(name='ModuleList', example='PAI', position='Query'),
  option?: string(name='Option', example='GetWorkspaces', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', example='ENABLED', position='Query'),
  verbose?: boolean(name='Verbose', example='true', position='Query'),
  workspaceIds?: string(name='WorkspaceIds', example='123,234', position='Query'),
  workspaceName?: string(name='WorkspaceName', example='abc', position='Query'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  resourceLimits?: map[string]any(name='ResourceLimits', example='{
   "MaxCompute_share": 1,
   "MaxCompute_isolate": 1,
   "DLC_share": 1
}'),
  totalCount?: long(name='TotalCount', example='1'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames'),
      creator?: string(name='Creator', example='122424353535'),
      description?: string(name='Description', example='workspace description example'),
      envTypes?: [ string ](name='EnvTypes'),
      extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      isDefault?: boolean(name='IsDefault', example='false'),
      status?: string(name='Status', example='ENABLED'),
      workspaceId?: string(name='WorkspaceId', example='123'),
      workspaceName?: string(name='WorkspaceName', example='workspace-example'),
      resourceGroupId?: string(name='resourceGroupId'),
    }
  ](name='Workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaces  ListWorkspacesRequest
  * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/api/v1/workspaces', 'json', false, 'json', request);
}

model LogRunMetricsRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  metrics?: [
    RunMetric
  ](name='Metrics', position='Body'),
}

model LogRunMetricsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model LogRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogRunMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LogRunMetrics  LogRunMetricsRequest
  * @return LogRunMetricsResponse
 */
async function logRunMetrics(request: LogRunMetricsRequest): LogRunMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogRunMetrics', 'POST', '/api/v1/runs/{RunId}/metrics/action/log', 'json', false, 'json', request);
}

model PublishCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='This parameter is required.', example='code-a797*******', position='Path'),
}

model PublishCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-a797*******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model PublishCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishCodeSource  PublishCodeSourceRequest
  * @return PublishCodeSourceResponse
 */
async function publishCodeSource(request: PublishCodeSourceRequest): PublishCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishCodeSource', 'PUT', '/api/v1/codesources/{CodeSourceId}/publish', 'json', false, 'json', request);
}

model PublishDatasetRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5w****c9ks92', position='Path'),
}

model PublishDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishDataset  PublishDatasetRequest
  * @return PublishDatasetResponse
 */
async function publishDataset(request: PublishDatasetRequest): PublishDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishDataset', 'PUT', '/api/v1/datasets/{DatasetId}/publish', 'json', false, 'json', request);
}

model PublishImageRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='image-dk******fa', position='Path'),
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId', example='image-dk******fa'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishImage  PublishImageRequest
  * @return PublishImageResponse
 */
async function publishImage(request: PublishImageRequest): PublishImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishImage', 'PUT', '/api/v1/images/{ImageId}/publish', 'json', false, 'json', request);
}

model RemoveImageRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='image-rbv******c9ks92', position='Path'),
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveImage  RemoveImageRequest
  * @return RemoveImageResponse
 */
async function removeImage(request: RemoveImageRequest): RemoveImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveImage', 'DELETE', '/api/v1/images/{ImageId}', 'json', false, 'json', request);
}

model RemoveImageLabelsRequest {
  imageId: string(name='ImageId', description='This parameter is required.', example='image-d8df******dsjfd', position='Path'),
  labelKey: string(name='LabelKey', description='This parameter is required.', example='key1', position='Path'),
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveImageLabels  RemoveImageLabelsRequest
  * @return RemoveImageLabelsResponse
 */
async function removeImageLabels(request: RemoveImageLabelsRequest): RemoveImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveImageLabels', 'DELETE', '/api/v1/images/{ImageId}/labels/{LabelKey}', 'json', false, 'json', request);
}

model RemoveMemberRoleRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='145883', position='Path'),
  memberId: string(name='MemberId', description='This parameter is required.', example='145883-21513926******88039', position='Path'),
  roleName: string(name='RoleName', description='This parameter is required.', example='PAI.AlgoDeveloper', position='Path'),
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMemberRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveMemberRole  RemoveMemberRoleRequest
  * @return RemoveMemberRoleResponse
 */
async function removeMemberRole(request: RemoveMemberRoleRequest): RemoveMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveMemberRole', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/members/{MemberId}/roles/{RoleName}', 'json', false, 'json', request);
}

model SetExperimentLabelsRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  labels?: [
    LabelInfo
  ](name='Labels', position='Body'),
}

model SetExperimentLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model SetExperimentLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetExperimentLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetExperimentLabels  SetExperimentLabelsRequest
  * @return SetExperimentLabelsResponse
 */
async function setExperimentLabels(request: SetExperimentLabelsRequest): SetExperimentLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetExperimentLabels', 'POST', '/api/v1/experiments/{ExperimentId}/labels', 'json', false, 'json', request);
}

model StopDatasetJobRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='This parameter is required.', example='dsjob-9jx1*****uj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='478**', position='Body'),
}

model StopDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='F620FFD3-FFDC-5873-A70C-6971CC45F467'),
}

model StopDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDatasetJob  StopDatasetJobRequest
  * @return StopDatasetJobResponse
 */
async function stopDatasetJob(request: StopDatasetJobRequest): StopDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopDatasetJob', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}/action/stop', 'json', false, 'json', request);
}

model UpdateCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='This parameter is required.', example='code-202**********', position='Path'),
  codeBranch?: string(name='CodeBranch', example='dev', position='Body'),
  codeCommit?: string(name='CodeCommit', position='Body'),
  codeRepo?: string(name='CodeRepo', position='Body'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', position='Body'),
  codeRepoUserName?: string(name='CodeRepoUserName', position='Body'),
  description?: string(name='Description', position='Body'),
  displayName?: string(name='DisplayName', position='Body'),
  mountPath?: string(name='MountPath', example='/root/code/code-source-1', position='Body'),
}

model UpdateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20********'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCodeSource  UpdateCodeSourceRequest
  * @return UpdateCodeSourceResponse
 */
async function updateCodeSource(request: UpdateCodeSourceRequest): UpdateCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCodeSource', 'PUT', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model UpdateDatasetRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  description?: string(name='Description', position='Body'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList', position='Body'),
  name?: string(name='Name', example='myName', position='Body'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataset  UpdateDatasetRequest
  * @return UpdateDatasetResponse
 */
async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDataset', 'PUT', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model UpdateDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetas: [
    DatasetFileMetaConentUpdate
  ](name='DatasetFileMetas', description='This parameter is required.', position='Body'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Body'),
  tagJobId?: string(name='TagJobId', example='dsjob-hv0b1****u8taig3y', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='796**', position='Body'),
}

model UpdateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
}

model UpdateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetFileMetas  UpdateDatasetFileMetasRequest
  * @return UpdateDatasetFileMetasResponse
 */
async function updateDatasetFileMetas(request: UpdateDatasetFileMetasRequest): UpdateDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetFileMetas', 'PUT', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model UpdateDatasetJobRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='This parameter is required.', example='dsjob-9jx1*****uj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', example='v1', position='Body'),
  description?: string(name='Description', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='478**', position='Body'),
}

model UpdateDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetJob  UpdateDatasetJobRequest
  * @return UpdateDatasetJobResponse
 */
async function updateDatasetJob(request: UpdateDatasetJobRequest): UpdateDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetJob', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model UpdateDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  config?: string(name='Config', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }', position='Body'),
  configType?: string(name='ConfigType', example='MultimodalSemanticIndex', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='167497', position='Body'),
}

model UpdateDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model UpdateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetJobConfig  UpdateDatasetJobConfigRequest
  * @return UpdateDatasetJobConfigResponse
 */
async function updateDatasetJobConfig(request: UpdateDatasetJobConfigRequest): UpdateDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetJobConfig', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model UpdateDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5****jhc9ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v1', position='Path'),
  dataCount?: long(name='DataCount', example='100', position='Body'),
  dataSize?: long(name='DataSize', example='100000', position='Body'),
  description?: string(name='Description', position='Body'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
}

model UpdateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetVersion  UpdateDatasetVersionRequest
  * @return UpdateDatasetVersionResponse
 */
async function updateDatasetVersion(request: UpdateDatasetVersionRequest): UpdateDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetVersion', 'PUT', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model UpdateDefaultWorkspaceRequest {
  workspaceId?: string(name='WorkspaceId', example='12345', position='Body'),
}

model UpdateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='17915******4216'),
}

model UpdateDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDefaultWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDefaultWorkspace  UpdateDefaultWorkspaceRequest
  * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspace(request: UpdateDefaultWorkspaceRequest): UpdateDefaultWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDefaultWorkspace', 'PUT', '/api/v1/defaultWorkspaces', 'json', false, 'json', request);
}

model UpdateExperimentRequest {
  experimentId: string(name='ExperimentId', description='This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  accessibility?: string(name='Accessibility', example='PRIVATE', position='Body'),
  name?: string(name='Name', description='名称', example='myName', position='Body'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperiment  UpdateExperimentRequest
  * @return UpdateExperimentResponse
 */
async function updateExperiment(request: UpdateExperimentRequest): UpdateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperiment', 'PUT', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model UpdateModelRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-rbvg5wz******ks92', position='Path'),
  accessibility?: string(name='Accessibility', example='PUBLIC', position='Body'),
  domain?: string(name='Domain', example='nlp', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', position='Body'),
  modelDescription?: string(name='ModelDescription', position='Body'),
  modelDoc?: string(name='ModelDoc', example='https://*.md', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  modelType?: string(name='ModelType', example='Checkpoint', position='Body'),
  orderNumber?: long(name='OrderNumber', example='101', position='Body'),
  origin?: string(name='Origin', example='ModelScope', position='Body'),
  task?: string(name='Task', example='text-classification', position='Body'),
}

model UpdateModelResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model UpdateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModel  UpdateModelRequest
  * @return UpdateModelResponse
 */
async function updateModel(request: UpdateModelRequest): UpdateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModel', 'PUT', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model UpdateModelVersionRequest {
  modelId: string(name='ModelId', description='This parameter is required.', example='model-dfs1****5c', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='0.1.0', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', example='Approved', position='Body'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}', position='Body'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}', position='Body'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{     "processor": "tensorflow_gpu_1.12" }', position='Body'),
  metrics?: map[string]any(name='Metrics', example='{}', position='Body'),
  options?: string(name='Options', example='{}', position='Body'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Body'),
  sourceType?: string(name='SourceType', example='PAIFlow', position='Body'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}', position='Body'),
  versionDescription?: string(name='VersionDescription', position='Body'),
}

model UpdateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D61***C4B9'),
}

model UpdateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModelVersion  UpdateModelVersionRequest
  * @return UpdateModelVersionResponse
 */
async function updateModelVersion(request: UpdateModelVersionRequest): UpdateModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModelVersion', 'PUT', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model UpdateRunRequest {
  runId: string(name='RunId', description='This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  labels?: [
    Label
  ](name='Labels', position='Body'),
  name?: string(name='Name', example='myName', position='Body'),
  params?: [
    RunParam
  ](name='Params', position='Body'),
}

model UpdateRunResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model UpdateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRun  UpdateRunRequest
  * @return UpdateRunResponse
 */
async function updateRun(request: UpdateRunRequest): UpdateRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRun', 'PUT', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model UpdateWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  description?: string(name='Description', example='Description', position='Body'),
  displayName?: string(name='DisplayName', example='workspace-example', position='Body'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspace  UpdateWorkspaceRequest
  * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspace', 'PUT', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model UpdateWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='123', position='Path'),
  groupName?: string(name='GroupName', example='group-kjds******sd', position='Body'),
  isDefault?: boolean(name='IsDefault', example='true', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels', position='Body'),
  productType?: string(name='ProductType', example='MaxCompute', position='Body'),
  resourceIds?: [ string ](name='ResourceIds', position='Body'),
  resourceType?: string(name='ResourceType', position='Body'),
  spec?: map[string]any(name='Spec', position='Body'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model UpdateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspaceResource  UpdateWorkspaceResourceRequest
  * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResource(request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspaceResource', 'PUT', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

