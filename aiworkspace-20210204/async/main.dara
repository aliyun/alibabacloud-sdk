/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AIWorkSpace';
  @version = '2021-02-04';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user'),
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  mountPath?: string(name='MountPath', example='/root/code/'),
  userId?: string(name='UserId', example='1157290171663117'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model Collection {
  collectionName?: string(name='CollectionName', example='AI4D'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  userId?: string(name='UserId', example='155770209******'),
}

model Connection {
  accessibility?: string(name='Accessibility'),
  configs?: map[string]string(name='Configs'),
  connectionId?: string(name='ConnectionId'),
  connectionName?: string(name='ConnectionName'),
  connectionType?: string(name='ConnectionType'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  models?: [ 
    {
      displayName?: string(name='DisplayName'),
      model?: string(name='Model'),
      modelType?: string(name='ModelType'),
    }
  ](name='Models'),
  resourceMeta?: {
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
  }(name='ResourceMeta'),
  secrets?: map[string]string(name='Secrets'),
  workspaceId?: string(name='WorkspaceId'),
}

model Dataset {
  accessibility?: string(name='Accessibility', example='PRIVATE PUBLIC'),
  dataSourceType?: string(name='DataSourceType', example='OSS URL'),
  dataType?: string(name='DataType', example='COMMON PIC TEXT VIDEO AUDIO'),
  datasetId?: string(name='DatasetId', example='d-c0h44g3wlwkj8o4348'),
  description?: string(name='Description', example='Animal images.'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: DatasetVersion(name='LatestVersion'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='AnimalDataset'),
  options?: string(name='Options', example='jsonstring'),
  ownerId?: string(name='OwnerId', example='1004110000006048'),
  property?: string(name='Property', example='FILE DIRECTORY TABULAR'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceDatasetId?: string(name='SourceDatasetId', example='d-bvfasdf4wxxj8o411'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', example='v2'),
  sourceId?: string(name='SourceId', example='Source Id'),
  sourceType?: string(name='SourceType', example='USER ITAG  PAI_PUBLIC_DATASET'),
  tagTemplateType?: string(name='TagTemplateType', example='text-classification'),
  uri?: string(name='Uri', example='oss://xxx'),
  userId?: string(name='UserId', example='2004110000006048'),
  workspaceId?: string(name='WorkspaceId', example='Workspace Id'),
}

model DatasetFileMeta {
  contentType?: string(name='ContentType', example='image/jpeg'),
  dataSize?: long(name='DataSize', example='12'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  downloadUrl?: string(name='DownloadUrl'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName', example='car.png'),
  fileType?: string(name='FileType', example='image'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  metaAttributes?: string(name='MetaAttributes', example='{     "ImageHeight": 400,     "ImageWidth": 800 }'),
  score?: float(name='Score', example='0.6'),
  semanticIndexJobId?: string(name='SemanticIndexJobId'),
  semanticIndexUpdateTime?: string(name='SemanticIndexUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  tags?: string(name='Tags'),
  thumbnailUrl?: string(name='ThumbnailUrl'),
  uri?: string(name='Uri', example='oss://test-bucket/dataset/car.png'),
}

model DatasetFileMetaConentUpdate {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId: string(name='DatasetFileMetaId', description='This parameter is required.'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  metaAttributes?: string(name='MetaAttributes'),
  semanticIndexJobId?: string(name='SemanticIndexJobId'),
  semanticIndexUpdateTime?: string(name='SemanticIndexUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  tags?: string(name='Tags', example='● 执行算法打标更新（必须设置有效的TagJobId）： {    "ai":["车道线", "水马", "晴天"] } ● 用户手动打标：(add/remove表示对标签组内的标签进行增加/删除操作) 用户可操作的标签组为：   ○ user: 对单个元数据，用户自行添加的标签名列表。   ○ user-delete-ai-tags: 对单个元数据，算法标签组中用户需要删除的标签名列表。 {     "user":{         "add":["车道线","晴天"],         "remove":["水马"]     },     "user-delete-ai-tags":{         "add": ["地面阴影"],         "remove": []     } }'),
}

model DatasetFileMetaContentCreate {
  comment?: string(name='Comment'),
  contentType: string(name='ContentType', description='This parameter is required.'),
  dataSize?: long(name='DataSize'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  fileFingerPrint: string(name='FileFingerPrint', description='This parameter is required.'),
  fileName?: string(name='FileName'),
  fileType: string(name='FileType', description='This parameter is required.'),
  fileUpdateTime: string(name='FileUpdateTime', description='This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags', example='{"user":{"add":["cat"]}}'),
  uri: string(name='Uri', description='This parameter is required.'),
}

model DatasetFileMetaContentGet {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  fileDir?: string(name='FileDir'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  metaAttributes?: string(name='MetaAttributes'),
  semanticIndexJobId?: string(name='SemanticIndexJobId'),
  semanticIndexUpdateTime?: string(name='SemanticIndexUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  tagUpdateTime?: string(name='TagUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01.000Z'),
  tags?: string(name='Tags'),
  uri?: string(name='Uri'),
}

model DatasetFileMetaResponse {
  datasetFileMetaId: string(name='DatasetFileMetaId', description='This parameter is required.'),
  result: string(name='Result', description='This parameter is required.'),
  uri?: string(name='Uri'),
}

model DatasetFileMetasStat {
  count?: int32(name='Count', example='10'),
  key?: string(name='Key', example='cat'),
}

model DatasetJob {
  completedFileCount?: long(name='CompletedFileCount'),
  createTime?: string(name='CreateTime'),
  datasetJobId?: string(name='DatasetJobId'),
  datasetVersion?: string(name='DatasetVersion'),
  description?: string(name='Description'),
  failedFileCount?: long(name='FailedFileCount'),
  finishTime?: string(name='FinishTime'),
  jobAction?: string(name='JobAction'),
  jobMode?: string(name='JobMode'),
  jobSpec?: string(name='JobSpec'),
  logs?: [ string ](name='Logs'),
  status?: string(name='Status'),
  totalFileCount?: long(name='TotalFileCount'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetJobConfig {
  config?: string(name='Config'),
  configType?: string(name='ConfigType'),
  createTime?: string(name='CreateTime'),
  datasetJobConfigId?: string(name='DatasetJobConfigId'),
  modifyTime?: string(name='ModifyTime'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetLabel {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model DatasetVersion {
  dataCount?: long(name='DataCount'),
  dataSize?: long(name='DataSize'),
  dataSourceType?: string(name='DataSourceType', example='OSS'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  options?: string(name='Options'),
  property?: string(name='Property', example='FILE'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri', example='OSS://xxx'),
  versionName?: string(name='VersionName', example='v1'),
}

model Experiment {
  accessibility?: string(name='Accessibility'),
  artifactUri?: string(name='ArtifactUri'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    ExperimentLabel
  ](name='Labels'),
  latestRun?: Run(name='LatestRun'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  requestId?: string(name='RequestId'),
  tensorboardLogUri?: string(name='TensorboardLogUri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model ExperimentLabel {
  experimentId?: string(name='ExperimentId', example='exp-890waerw09a0f'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model Label {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model LabelInfo {
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model LineageEntity {
  attributes?: map[string]any(name='Attributes'),
  entityType?: string(name='EntityType'),
  name?: string(name='Name'),
  qualifiedName?: string(name='QualifiedName'),
}

model LineageRelation {
  destEntityQualifiedName?: string(name='DestEntityQualifiedName'),
  relationshipGuid?: string(name='RelationshipGuid'),
  srcEntityQualifiedName?: string(name='SrcEntityQualifiedName'),
}

model Model {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-1123*****'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1557702098******'),
  provider?: string(name='Provider', example='pai'),
  tags?: [
    Label
  ](name='Tags'),
  task?: string(name='Task', example='text-classifiaction'),
  userId?: string(name='UserId', example='1557702098******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model ModelVersion {
  approvalStatus?: string(name='ApprovalStatus'),
  compressionSpec?: map[string]any(name='CompressionSpec'),
  evaluationSpec?: map[string]any(name='EvaluationSpec'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trainingSpec?: map[string]any(name='TrainingSpec'),
  uri?: string(name='Uri', example='oss://bucket/path-to-model'),
  userId?: string(name='UserId', example='155770209******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='1.0.0'),
}

model Relation {
  errMsg?: string(name='ErrMsg'),
  lineageRelation?: LineageRelation(name='LineageRelation'),
  result?: boolean(name='Result'),
}

model Relationship {
  attributes?: map[string]any(name='Attributes'),
  dataChannel?: string(name='DataChannel'),
  relationshipGuid?: string(name='RelationshipGuid'),
  relationshipType?: string(name='RelationshipType'),
}

model Run {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    RunLabel
  ](name='Labels'),
  metrics?: [
    RunMetric
  ](name='Metrics'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  params?: [
    RunParam
  ](name='Params'),
  requestId?: string(name='RequestId'),
  runId?: string(name='RunId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model RunLabel {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  key: string(name='Key', description='This parameter is required.'),
  runId?: string(name='RunId'),
  value: string(name='Value', description='This parameter is required.'),
}

model RunMetric {
  key: string(name='Key', description='This parameter is required.'),
  step?: long(name='Step'),
  timestamp?: long(name='Timestamp'),
  value: float(name='Value', description='This parameter is required.'),
}

model RunParam {
  key: string(name='Key', description='This parameter is required.'),
  value: string(name='Value', description='This parameter is required.'),
}

model Trial {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [  map[string]any ](name='Labels'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trialId?: string(name='TrialId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model TrialLabel {
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  trialId?: string(name='TrialId'),
  value?: string(name='Value', example='value'),
}

model AcceptDataworksEventRequest {
  data?: map[string]any(name='Data', description='The event content in the message.', example='{"eventCode":"d****ct","projectId":"8***6","tenantId":4*******8,"operator":"115*****901"}', position='Body'),
  messageId?: string(name='MessageId', description='The message ID. You can obtain the ID from the message received when an extension point event is triggered. For more information about the message format, see [Message formats](https://help.aliyun.com/document_detail/436911.html).', example='539306ba-*****-41a0-****-6dc81060985c', position='Body'),
}

model AcceptDataworksEventResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='ADF6D849-*****-7E7030F0CE53'),
}

model AcceptDataworksEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptDataworksEventResponseBody(name='body'),
}

/**
  * @description This operation can be called only by the internal system and cannot be called by external users.
  * @param request  the request parameters of AcceptDataworksEvent  AcceptDataworksEventRequest
  * @return AcceptDataworksEventResponse
 */
async function acceptDataworksEvent(request: AcceptDataworksEventRequest): AcceptDataworksEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AcceptDataworksEvent', 'POST', '/api/v1/workspaces/action/acceptdataworksevent', 'json', false, 'json', request);
}

model AddImageRequest {
  accessibility?: string(name='Accessibility', description='The accessibility of the image. Valid values:

*   PUBLIC: The image is accessible to all members in the workspace.
*   PRIVATE: The image is accessible only to the image creator.', example='PUBLIC', position='Body'),
  description?: string(name='Description', description='The image description.', position='Body'),
  imageId?: string(name='ImageId', description='The image ID. If you do not specify this parameter, the system automatically generates an image ID. The image ID must start with image- followed by 18 characters in letters or digits.', example='image-k83*****cv', position='Body'),
  imageUri: string(name='ImageUri', description='The URL of the image, which can be repeated. You can call [ListImage](https://help.aliyun.com/document_detail/449118.html) to view the image URL.

This parameter is required.', example='registry.cn-hangzhou.aliyuncs.com/pai-compression/nlp:gpu', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='system.chipType'),
      value?: string(name='Value', description='The tag value.', example='GPU'),
    }
  ](name='Labels', description='The image tag, which is an array. Each element in the array contains a key-value pair. Alibaba Cloud images have the system.official=true tag. You can add the following keys to an image:

*   system.chipType
*   system.dsw.cudaVersion
*   system.dsw.fromImageId
*   system.dsw.fromInstanceId
*   system.dsw.id
*   system.dsw.os
*   system.dsw.osVersion
*   system.dsw.resourceType
*   system.dsw.rootImageId
*   system.dsw.stage
*   system.dsw.tag
*   system.dsw.type
*   system.framework
*   system.origin
*   system.pythonVersion
*   system.source
*   system.supported.dlc
*   system.supported.dsw', position='Body'),
  name: string(name='Name', description='The image name. The name must meet the following requirements:

*   The name must be 1 to 50 characters in length.
*   The name can contain lowercase letters, digits, and hyphens (-). The name must start with a lowercase letter.
*   The name must be unique in a workspace.

This parameter is required.', example='nlp-compression', position='Body'),
  size?: int32(name='Size', description='The size of the image. Unit: GB.', example='2', position='Body'),
  sourceId?: string(name='SourceId', position='Body'),
  sourceType?: string(name='SourceType', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='15******45', position='Body'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='image-4c62******53uor'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImage  AddImageRequest
  * @return AddImageResponse
 */
async function addImage(request: AddImageRequest): AddImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddImage', 'POST', '/api/v1/images', 'json', false, 'json', request);
}

model AddImageLabelsRequest {
  imageId: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.

This parameter is required.', example='image-4c62******53uor', position='Path'),
  labels: [ 
    {
      key?: string(name='Key', description='The tag key. The following keys can be added:

*   system.chipType
*   system.dsw.cudaVersion
*   system.dsw.fromImageId
*   system.dsw.fromInstanceId
*   system.dsw.id
*   system.dsw.os
*   system.dsw.osVersion
*   system.dsw.resourceType
*   system.dsw.rootImageId
*   system.dsw.stage
*   system.dsw.tag
*   system.dsw.type
*   system.framework
*   system.origin
*   system.pythonVersion
*   system.source
*   system.supported.dlc
*   system.supported.dsw', example='system.chipType'),
      value?: string(name='Value', description='The tag value.', example='GPU'),
    }
  ](name='Labels', description='The list of image tags.

This parameter is required.', position='Body'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImageLabels  AddImageLabelsRequest
  * @return AddImageLabelsResponse
 */
async function addImageLabels(request: AddImageLabelsRequest): AddImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddImageLabels', 'POST', '/api/v1/images/{ImageId}/labels', 'json', false, 'json', request);
}

model AddMemberRoleRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='145883', position='Path'),
  memberId: string(name='MemberId', description='The member ID. You can call [ListMembers](https://help.aliyun.com/document_detail/449135.html) to obtain the member ID.

This parameter is required.', example='145883-215139******688039', position='Path'),
  roleName: string(name='RoleName', description='The name of the role. For more information about the mappings between role names and permissions, see [Appendix: Roles and permissions](https://help.aliyun.com/document_detail/2840449.html). Valid values:

*   PAI.AlgoDeveloper: algorithm developer
*   PAI.AlgoOperator: algorithm O\\&M engineer
*   PAI.LabelManager: labeling administrator
*   PAI.MaxComputeDeveloper: MaxCompute developer
*   PAI.WorkspaceAdmin: administrator
*   PAI.WorkspaceGuest: guest
*   PAI.WorkspaceOwner: owner

This parameter is required.', example='PAI.AlgoDeveloper', position='Path'),
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMemberRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMemberRole  AddMemberRoleRequest
  * @return AddMemberRoleResponse
 */
async function addMemberRole(request: AddMemberRoleRequest): AddMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddMemberRole', 'POST', '/api/v1/workspaces/{WorkspaceId}/members/{MemberId}/roles/{RoleName}', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the target resource group. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).', example='rg-df********534dy', position='Body'),
  resourceId?: string(name='ResourceId', description='The resource ID, which is the workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='12**56', position='Body'),
  resourceType?: string(name='ResourceType', description='The resource group type, which must be set to workspace.', example='workspace', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='6****27E-****-5144-A002-89C****8660F'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroups/action/changeresourcegroup', 'json', false, 'json', request);
}

model CreateCodeSourceRequest {
  accessibility?: string(name='Accessibility', description='The visibility of the code build. Valid values:

*   PUBLIC: The code build is visible to all members in the workspace.
*   PRIVATE: The code build is visible only to you and the administrator of the workspace.', example='PRIVATE', position='Body'),
  codeBranch?: string(name='CodeBranch', description='The code branch.', example='master', position='Body'),
  codeCommit?: string(name='CodeCommit', position='Body'),
  codeRepo?: string(name='CodeRepo', description='The URL of the code repository.', example='https://code.aliyun.com/******', position='Body'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='The token used to access the code repository.', example='***', position='Body'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='The username of the code repository.', example='use***', position='Body'),
  description?: string(name='Description', description='The description of the code build, which helps you distinguish between code builds.', example='code source of dlc examples', position='Body'),
  displayName: string(name='DisplayName', description='The name of the code build.

This parameter is required.', example='MyCodeSource1', position='Body'),
  mountPath?: string(name='MountPath', description='The local mount path of the code. By default, the code is mounted to the /root/code/ path.', example='/root/code/code-source-1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='1234', position='Body'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='The ID of the created code build.', example='code-20********'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3**********'),
}

model CreateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCodeSource  CreateCodeSourceRequest
  * @return CreateCodeSourceResponse
 */
async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCodeSource', 'POST', '/api/v1/codesources', 'json', false, 'json', request);
}

model CreateDatasetRequest {
  accessibility?: string(name='Accessibility', description='The visibility of the workspace. Valid values:

*   PRIVATE (default): The workspace is visible only to you and the administrator of the workspace.
*   PUBLIC: The workspace is visible to all users.', example='PRIVATE', position='Body'),
  dataCount?: long(name='DataCount', description='The number of dataset files.', example='500', minimum=1, maximum=999999999999, position='Body'),
  dataSize?: long(name='DataSize', description='The size of the dataset file. Unit: bytes.', example='10000', minimum=1, maximum=999999999999, position='Body'),
  dataSourceType: string(name='DataSourceType', description='The type of the data source. Valid values:

*   OSS: Object Storage Service (OSS).
*   NAS: File Storage NAS (NAS).

This parameter is required.', example='NAS', position='Body'),
  dataType?: string(name='DataType', description='The type of the dataset. Default value: COMMON. Valid values:

*   COMMON: common
*   PIC: picture
*   TEXT: text
*   Video: video
*   AUDIO: audio', example='COMMON', position='Body'),
  description?: string(name='Description', description='The description of the dataset. Descriptions are used to differentiate datasets.', position='Body'),
  importInfo?: string(name='ImportInfo', description='The dataset configurations to be imported to a storage, such as OSS, NAS, or Cloud Parallel File Storage (CPFS).

**OSS**

{\\
"region": "${region}",// The region ID\\
"bucket": "${bucket}",//The bucket name\\
"path": "${path}" // The file path\\
}\\


**NAS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The file system path\\
"mountTarget": "${mount_target}" // The mount point of the file system\\
}\\


**CPFS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"protocolServiceId":"${protocol_service_id}", // The file system protocol service\\
"exportId": "${export_id}", // The file system export directory\\
"path": "${path}", // The file system path\\
}\\


**CPFS for Lingjun**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The file system path\\
"mountTarget": "${mount_target}" // The mount point of the file system, CPFS for Lingjun only\\
"isVpcMount": boolean, // Whether the mount point is a virtual private cloud (VPC) mount point, CPFS for Lingjun only\\
}\\', example='{
    "region": "cn-wulanchabu",
    "fileSystemId": "bmcpfs-xxxxxxxxxxx",
    "path": "/mnt",
    "mountTarget": "cpfs-xxxxxxxxxxxx-vpc-gacs9f.cn-wulanchabu.cpfs.aliyuncs.com",
    "isVpcMount": true
}', position='Body'),
  labels?: [
    Label
  ](name='Labels', description='The tags.', position='Body'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList', description='The list of role names in the workspace that have read and write permissions on the mounted database. The names start with PAI are basic role names and the names start with role- are custom role names. If the list contains asterisks (\\*), all roles have read and write permissions.

*   If you set the value to ["PAI.AlgoOperator", "role-hiuwpd01ncrokkgp21"], the account of the specified role is granted the read and write permissions.
*   If you set the value to ["\\*"], all accounts are granted the read and write permissions.
*   If you set the value to [], only the creator of the dataset has the read and write permissions.', position='Body'),
  name: string(name='Name', description='The dataset name. The name must meet the following requirements:

*   The name must start with a letter, digit, or Chinese character.
*   The name can contain underscores (_) and hyphens (-).
*   The name must be 1 to 127 characters in length.

This parameter is required.', example='myName', position='Body'),
  options?: string(name='Options', description='The extended field, which is a JSON string. When you use the dataset in Deep Learning Containers (DLC), you can configure the mountPath field to specify the default mount path of the dataset.', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
  property: string(name='Property', description='The property of the dataset. Valid values:

*   FILE
*   DIRECTORY

This parameter is required.', example='DIRECTORY', position='Body'),
  provider?: string(name='Provider', description='The dataset provider. The value cannot be set to pai.', example='Github', position='Body'),
  providerType?: string(name='ProviderType', description='The source type of the dataset. Valid values:

*   Ecs (default)
*   Lingjun', example='Ecs', position='Body'),
  sourceDatasetId?: string(name='SourceDatasetId', description='The ID of the source dataset of the labeled dataset.', example='d-bvfasdfxxxxj8o411', position='Body'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', description='The version of the source dataset of the labeled dataset.', example='v2', position='Body'),
  sourceId?: string(name='SourceId', description='The ID of the data source.

*   If SourceType is set to USER, the value of SourceId can be a custom string.
*   If SourceType is set to ITAG, the value of SourceId is the ID of the labeling job of iTAG.
*   If SourceType is set to PAI_PUBLIC_DATASET, the value of SourceId is empty by default.', example='jdnhf***fnrimv', position='Body'),
  sourceType?: string(name='SourceType', description='The type of the data source. Default value: USER. Valid values:

*   PAI-PUBLIC-DATASET: a public dataset of Platform for AI (PAI).
*   ITAG: a dataset generated from a labeling job of iTAG.
*   USER: a dataset registered by a user.', example='USER', position='Body'),
  uri: string(name='Uri', description='The URI of the data source.

*   Value format when DataSourceType is set to OSS: `oss://bucket.endpoint/object`.
*   Value formats when DataSourceType is set to NAS: General-purpose NAS: `nas://<nasfisid>.region/subpath/to/dir/`. CPFS 1.0: `nas://<cpfs-fsid>.region/subpath/to/dir/`. CPFS 2.0: `nas://<cpfs-fsid>.region/<protocolserviceid>/`. You can distinguish CPFS 1.0 and CPFS 2.0 file systems based on the format of the file system ID: The ID for CPFS 1.0 is in the cpfs-<8-bit ASCII characters> format. The ID for CPFS 2.0 is in the cpfs-<16-bit ASCII characters> format.

This parameter is required.', example='nas://09f****f2.cn-hangzhou/', position='Body'),
  userId?: string(name='UserId', description='The ID of the Alibaba Cloud account to which the dataset belongs. The workspace owner and administrator have permissions to create datasets for specified members in the workspace.', example='2485765****023475', position='Body'),
  versionDescription?: string(name='VersionDescription', description='The description of the dataset of the initial version.', example='The initial version', position='Body'),
  versionLabels?: [
    Label
  ](name='VersionLabels', description='The list of tags to be added to the dataset of the initial version.', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID. If you do not specify this parameter, the default workspace is used. If the default workspace does not exist, an error is reported.', example='478**', position='Body'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-rbvg5*****jhc9ks92'),
  requestId?: string(name='RequestId', description='The request ID.', example='B2C51F93-1C07-5477-9705-5FDB****F19F'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataset  CreateDatasetRequest
  * @return CreateDatasetResponse
 */
async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataset', 'POST', '/api/v1/datasets', 'json', false, 'json', request);
}

model CreateDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetas: [
    DatasetFileMetaContentCreate
  ](name='DatasetFileMetas', description='The metadata of the file.

This parameter is required.', position='Body'),
  datasetVersion: string(name='DatasetVersion', description='The dataset version name.

This parameter is required.', example='v1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='478**', position='Body'),
}

model CreateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails', description='The metadata that failed to be created.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', description='Indicates whether the metadata records of all dataset files were created. The value true indicates that the metadata records of all dataset files are created. If the value is false, view the failure details specified by FailedDetails.

Valid values:

*   true
*   false', example='true'),
  succeedDetails?: [
    DatasetFileMetaResponse
  ](name='SucceedDetails', description='The metadata that is created.'),
}

model CreateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetFileMetas  CreateDatasetFileMetasRequest
  * @return CreateDatasetFileMetasResponse
 */
async function createDatasetFileMetas(request: CreateDatasetFileMetasRequest): CreateDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetFileMetas', 'POST', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model CreateDatasetJobRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1', position='Body'),
  description?: string(name='Description', description='The job description.', position='Body'),
  jobAction: string(name='JobAction', description='The job action.

Valid values:

*   SemanticIndex
*   IntelligentTag
*   FileMetaExport

This parameter is required.', example='SemanticIndex', position='Body'),
  jobMode?: string(name='JobMode', description='The job mode.

Valid values:

*   Full: full mode.', example='Full', position='Body'),
  jobSpec: string(name='JobSpec', description='The job configuration.

This parameter is required.', example='{\\"modelId\\":\\"xxx\\"}', position='Body'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='478**', position='Body'),
}

model CreateDatasetJobResponseBody = {
  datasetJobId?: string(name='DatasetJobId', description='The ID of the dataset job.', example='dsjob-9jx1******uj9e'),
  requestId?: string(name='RequestId', description='The request ID.', example='99341606-****-0757724D97EE'),
}

model CreateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetJob  CreateDatasetJobRequest
  * @return CreateDatasetJobResponse
 */
async function createDatasetJob(request: CreateDatasetJobRequest): CreateDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetJob', 'POST', '/api/v1/datasets/{DatasetId}/datasetjobs', 'json', false, 'json', request);
}

model CreateDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='The dataset ID.

This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
  config: string(name='Config', description='The configuration content. Format:

*   MultimodalIntelligentTag

{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }

*   MultimodalSemanticIndex

{ "defaultModelId": "xxx" "defaultModelVersion":"1.0.0" }

This parameter is required.', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }', position='Body'),
  configType: string(name='ConfigType', description='The configuration type.

Valid values:

*   MultimodalIntelligentTag
*   MultimodalSemanticIndex

This parameter is required.', example='MultimodalIntelligentTag', position='Body'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='454716', position='Body'),
}

model CreateDatasetJobConfigResponseBody = {
  datasetJobConfigId?: string(name='DatasetJobConfigId', description='The configuration ID.', example='dscfg-xxxxxxxxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetJobConfig  CreateDatasetJobConfigRequest
  * @return CreateDatasetJobConfigResponse
 */
async function createDatasetJobConfig(request: CreateDatasetJobConfigRequest): CreateDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetJobConfig', 'POST', '/api/v1/datasets/{DatasetId}/datasetjobconfigs', 'json', false, 'json', request);
}

model CreateDatasetLabelsRequest {
  datasetId?: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.', example='d-lfd60v0p****ujtsdx', position='Path'),
  labels?: [
    Label
  ](name='Labels', description='The tags.', position='Body'),
}

model CreateDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A083731B-4973-54D1-B324-E53****4DD44'),
}

model CreateDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetLabelsResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   The tag key and value are not empty strings and cannot exceed 128 characters in length.
  * *   The tag key cannot start with any of the following strings: "aliyun", "acs", "http://", and "https://".
  * @param request  the request parameters of CreateDatasetLabels  CreateDatasetLabelsRequest
  * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabels(request: CreateDatasetLabelsRequest): CreateDatasetLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetLabels', 'POST', '/api/v1/datasets/{DatasetId}/labels', 'json', false, 'json', request);
}

model CreateDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  dataCount?: long(name='DataCount', description='The number of dataset files.', example='300', position='Body'),
  dataSize?: long(name='DataSize', description='The size of the dataset file. Unit: bytes.', example='19000', position='Body'),
  dataSourceType: string(name='DataSourceType', description='The type of the data source. Separate multiple types with commas (,). Valid values:

*   NAS: File Storage NAS (NAS).
*   OSS: Object Storage Service (OSS).
*   CPFS

Note: The DataSourceType value of a dataset version must be the same as that of the dataset. When you create a dataset version, the system checks whether the values are the same.

This parameter is required.', example='OSS', position='Body'),
  description?: string(name='Description', description='The description of the dataset. Descriptions are used to differentiate datasets.', position='Body'),
  importInfo?: string(name='ImportInfo', description='The dataset storage import configurations, such as OSS, NAS, and CPFS.

**OSS**

{\\
"region": "${region}",// The region ID\\
"bucket": "${bucket}",//The bucket name\\
"path": "${path}" // The file path\\
}\\


**NAS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The file system path\\
"mountTarget": "${mount_target}" // The mount point of the file system\\
}\\


**CPFS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"protocolServiceId":"${protocol_service_id}", // The file system protocol service\\
"exportId": "${export_id}", // The file system export directory\\
"path": "${path}", // The file system path\\
}\\


**CPFS for Lingjun**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The ile system path\\
"mountTarget": "${mount_target}" // The mount point of the file system, CPFS for Lingjun only\\
"isVpcMount": boolean, // Whether the mount point is a VPC mount point, CPFS for Lingjun only\\
}\\', example='{
    "region": "cn-wulanchabu",
    "fileSystemId": "bmcpfs-xxxxxxxxxxx",
    "path": "/mnt",
    "mountTarget": "cpfs-xxxxxxxxxxxx-vpc-gacs9f.cn-wulanchabu.cpfs.aliyuncs.com",
    "isVpcMount": true
}', position='Body'),
  labels?: [
    Label
  ](name='Labels', description='The tags of the dataset version.', position='Body'),
  options?: string(name='Options', description='The extended field, which is of the JsonString type. When you use the dataset in Deep Learning Containers (DLC), you can use the mountPath field to specify the default mount path of the dataset.', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
  property: string(name='Property', description='The property of the dataset. Valid values:

*   FILE
*   DIRECTORY

This parameter is required.', example='DIRECTORY', position='Body'),
  sourceId?: string(name='SourceId', description='The ID of the data source.

*   If SourceType is set to USER, the value of SourceId can be a custom string.
*   If SourceType is set to ITAG, the value of SourceId is the ID of the labeling job of iTAG.
*   If SourceType is set to PAI_PUBLIC_DATASET, SourceId is empty by default.', example='d-a0xbe5n03bhqof46ce', position='Body'),
  sourceType?: string(name='SourceType', description='The type of the data source. Default value: USER. Valid values:

*   PAI-PUBLIC-DATASET: a public dataset of Platform for AI (PAI).
*   ITAG: a dataset generated from a labeling job of iTAG.
*   USER: a dataset registered by a user.

For each job type:

*   PAI_PUBLIC_DATASET: PAI_PUBLIC_DATASET.
*   ITAG: ITAG.
*   USER: USER.', example='USER', position='Body'),
  uri: string(name='Uri', description='Example format:

*   Value format when DataSourceType is set to OSS: `oss://bucket.endpoint/object`.
*   Value formats when DataSourceType is set to NAS: General-purpose NAS: `nas://<nasfisid>.region/subpath/to/dir/`. CPFS 1.0: `nas://<cpfs-fsid>.region/subpath/to/dir/`. CPFS 2.0: `nas://<cpfs-fsid>.region/<protocolserviceid>/`. You can distinguish CPFS 1.0 and CPFS 2.0 file systems based on the format of the file system ID: The ID for CPFS 1.0 is in the cpfs-<8-bit ASCII characters> format. The ID for CPFS 2.0 is in the cpfs-<16-bit ASCII characters> format.

This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/', position='Body'),
}

model CreateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  versionName?: string(name='VersionName', description='The dataset version name.', example='v1'),
}

model CreateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetVersion  CreateDatasetVersionRequest
  * @return CreateDatasetVersionResponse
 */
async function createDatasetVersion(request: CreateDatasetVersionRequest): CreateDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetVersion', 'POST', '/api/v1/datasets/{DatasetId}/versions', 'json', false, 'json', request);
}

model CreateDatasetVersionLabelsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
  versionName: string(name='VersionName', description='The dataset version name.

This parameter is required.', example='v1', position='Path'),
  labels: [
    Label
  ](name='Labels', description='The tags.

This parameter is required.', position='Body'),
}

model CreateDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
}

model CreateDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatasetVersionLabels  CreateDatasetVersionLabelsRequest
  * @return CreateDatasetVersionLabelsResponse
 */
async function createDatasetVersionLabels(request: CreateDatasetVersionLabelsRequest): CreateDatasetVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDatasetVersionLabels', 'PUT', '/api/v1/datasets/{DatasetId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model CreateExperimentRequest {
  accessibility?: string(name='Accessibility', description='The visibility of the experiment. Valid values: PRIVATE (the experiment is visible only to the creator and the Alibaba Cloud account) and PUBLIC (the experiment is visible to all users). This parameter is optional and the default value is PRIVATE.', example='PRIVATE', position='Body'),
  artifactUri?: string(name='ArtifactUri', description='The default artifact output path of all jobs that are associated with the experiment. Only Object Storage Service (OSS) paths are supported.', example='oss://test-bucket.oss-cn-hangzhou.aliyuncs.com/test', position='Body'),
  labels?: [
    LabelInfo
  ](name='Labels', description='The tags.', position='Body'),
  name: string(name='Name', description='The experiment name. The name must meet the following requirements:

*   The name must start with a letter.
*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must be 1 to 63 characters in length.

This parameter is required.', example='exp-test', position='Body'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='478**', position='Body'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId', description='The returned data. If the operation is asynchronously implemented, the job ID is returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.'),
}

model CreateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExperiment  CreateExperimentRequest
  * @return CreateExperimentResponse
 */
async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateExperiment', 'POST', '/api/v1/experiments', 'json', false, 'json', request);
}

model CreateMemberRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  members: [ 
    {
      roles: [ string ](name='Roles', description='The list of roles.

This parameter is required.'),
      userId: string(name='UserId', description='The member IDs. Multiple member IDs are separated by commas (,). You can call [ListMembers](https://help.aliyun.com/document_detail/449135.html) to obtain the member IDs.

This parameter is required.', example='21513926******88039'),
    }
  ](name='Members', description='The members.

This parameter is required.', position='Body'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name.', example='myDisplayName'),
      memberId?: string(name='MemberId', description='The member ID.', example='145883-21513926******88039'),
      roles?: [ string ](name='Roles', description='The list of roles.'),
      userId?: string(name='UserId', description='The user ID.', example='21513926******88039'),
    }
  ](name='Members', description='The returned members.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model CreateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMember  CreateMemberRequest
  * @return CreateMemberResponse
 */
async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMember', 'POST', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model CreateModelRequest {
  accessibility?: string(name='Accessibility', description='The visibility of the model in the workspace. Valid values:

*   PRIVATE (default): Visible only to you and the administrator of the workspace.
*   PUBLIC: Vvisible to all users in the workspace.', example='PRIVATE', position='Body'),
  domain?: string(name='Domain', description='The domain of the model. Describes the domain in which the model is for. Example: nlp (natural language processing), cv (computer vision), and others.', example='nlp', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', description='Other information about the model.', example='{
	"RatingCount": 2866,
	"Rating": 4.94,
	"FavoriteCount": 34992,
	"CommentCount": 754,
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/drea***w.png"],
	"TippedAmountCount": 32,
	"DownloadCount": 606056
}', position='Body'),
  labels?: [
    Label
  ](name='Labels', description='The tags. This parameter will be deprecated and replaced by Tag.', position='Body'),
  modelDescription?: string(name='ModelDescription', description='The model description, used to distinguish different models.', position='Body'),
  modelDoc?: string(name='ModelDoc', description='The documentation of the model.', example='https://*.md', position='Body'),
  modelName: string(name='ModelName', description='The name of the model. The name must be 1 to 127 characters in length.

This parameter is required.', position='Body'),
  modelType?: string(name='ModelType', description='The model type. Example: Checkpoint or LoRA.', example='Checkpoint', position='Body'),
  orderNumber?: long(name='OrderNumber', description='The sequence number of the model. Can be used for custom sorting.', example='0', position='Body'),
  origin?: string(name='Origin', description='The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.', example='ModelScope', position='Body'),
  tag?: [
    Label
  ](name='Tag', description='The tags.', position='Body'),
  task?: string(name='Task', description='The task of the model. Describes the specific problem that the model solves. Example: text-classification.', example='text-classification', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. Call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='796**', position='Body'),
}

model CreateModelResponseBody = {
  modelId?: string(name='ModelId', description='The model ID.', example='model-rbvg5wzljz****ks92'),
  requestId?: string(name='RequestId', description='The request ID.', example='9DAD3112-AE22-5563-9A02-5C7E8****E35'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModel  CreateModelRequest
  * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModel', 'POST', '/api/v1/models', 'json', false, 'json', request);
}

model CreateModelLabelsRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-1dkasjfhds23dft', position='Path'),
  labels?: [
    Label
  ](name='Labels', description='The tags.', position='Body'),
}

model CreateModelLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F81D9EC0-1872-50F5-A96C-A0647D****1D'),
}

model CreateModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelLabels  CreateModelLabelsRequest
  * @return CreateModelLabelsResponse
 */
async function createModelLabels(request: CreateModelLabelsRequest): CreateModelLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelLabels', 'POST', '/api/v1/models/{ModelId}/labels', 'json', false, 'json', request);
}

model CreateModelVersionRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-dfs1****5c', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', description='The approval status. Valid values:

*   Pending
*   Approved
*   Rejected', example='Approved', position='Body'),
  compressionSpec?: map[string]any(name='CompressionSpec', description='Compression Configuration', example='{}', position='Body'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', description='Evaluation Configuration', example='{}', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', description='Other information.', example='{
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/st****017.preview.png"],
	"TrainedWords": ["albedo_overlord"]
}', position='Body'),
  formatType?: string(name='FormatType', description='The format of the model. Valid values:

*   OfflineModel
*   SavedModel
*   Keras H5
*   Frozen Pb
*   Caffe Prototxt
*   TorchScript
*   XGBoost
*   PMML
*   AlinkModel
*   ONNX', example='SavedModel', position='Body'),
  frameworkType?: string(name='FrameworkType', description='The framework of the model. Valid values:

*   Pytorch 
*   XGBoost
*   Keras
*   Caffe
*   Alink
*   Xflow
*   TensorFlow', example='TensorFlow', position='Body'),
  inferenceSpec?: map[string]any(name='InferenceSpec', description='Describes how to apply to downstream inference services. For example, describes the processor and container of EAS. Example: `{ "processor": "tensorflow_gpu_1.12" }`', example='{
    "processor": "tensorflow_gpu_1.12"
}', position='Body'),
  labels?: [
    Label
  ](name='Labels', description='The tags.', position='Body'),
  metrics?: map[string]any(name='Metrics', description='The metrics for the model. The length after serialization is limited to 8,192.', example='{
  "Results": [{
    "Dataset": {
      "DatasetId": "d-sdkjanksaklerhfd"
    },
    "Metrics": {
      "cer": 0.175
    }
  }, {
    "Dataset": {
      "Uri": "oss://xxxx/"
    },
    "Metrics": {
      "cer": 0.172
    }
  }]
}', position='Body'),
  options?: string(name='Options', description='The extended field. This is a JSON string.', example='{}', position='Body'),
  sourceId?: string(name='SourceId', description='The source ID.

*   If the source type is Custom, this field is not limited.
*   If the source is PAIFlow or TrainingService, the format is:

<!---->

    region=<region_id>,workspaceId=<workspace_id>,kind=<kind>,id=<id>

Where,

*   region is the region ID.
*   workspaceId is the ID of the workspace.
*   kind is the type. Valid values: PipelineRun (PAIFlow) and ServiceJob (training service).
*   id: a unique identifier.', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Body'),
  sourceType?: string(name='SourceType', description='The type of the model source. Valid values:

*   Custom (default)
*   PAIFlow
*   TrainingService: PAI training service.', example='PAIFlow', position='Body'),
  trainingSpec?: map[string]any(name='TrainingSpec', description='The training configurations. Used for fine-tuning and incremental training.', example='{}', position='Body'),
  uri: string(name='Uri', description='The URI of the model version, which is the location where the model is stored. Valid values:

*   The HTTP(S) address of the model. Example: `https://myweb.com/mymodel.tar.gz`.
*   The OSS path of the model, in the format of `oss://<bucket>.<endpoint>/object`. For endpoint, see [OSS regions and endpoints](https://help.aliyun.com/document_detail/31837.html). Example: `oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/`.

This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/', position='Body'),
  versionDescription?: string(name='VersionDescription', description='The version descriptions.', position='Body'),
  versionName?: string(name='VersionName', description='The model version, which is unique for each model. If left empty, the first version is **0.1.0** by default. After that, the version number is increased by 1 in sequence. For example, the second version number is **0.2.0**. A version number consists of a major version number, a minor version number, and a stage version number, separated by periods (.). Among them: the major version number and minor version number are numeric. The stage version number begins with a digit and can include numbers, underscores, and letters. For example, the version number is 1.1.0 or 2.3.4_beta.', example='0.1.0', position='Body'),
}

model CreateModelVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='21645FCD-BAB9-5742-89AE-AEB27****B2E'),
  versionName?: string(name='VersionName', description='The version of the model.', example='0.1.0'),
}

model CreateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelVersion  CreateModelVersionRequest
  * @return CreateModelVersionResponse
 */
async function createModelVersion(request: CreateModelVersionRequest): CreateModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelVersion', 'POST', '/api/v1/models/{ModelId}/versions', 'json', false, 'json', request);
}

model CreateModelVersionLabelsRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='The model version.

This parameter is required.', example='0.1.1', position='Path'),
  labels?: [
    Label
  ](name='Labels', description='The tags.', position='Body'),
}

model CreateModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModelVersionLabels  CreateModelVersionLabelsRequest
  * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabels(request: CreateModelVersionLabelsRequest): CreateModelVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModelVersionLabels', 'POST', '/api/v1/models/{ModelId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model CreateProductOrdersRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically pay for the provided products.

*   true
*   false', example='true', position='Body'),
  products?: [ 
    {
      autoRenew?: boolean(name='AutoRenew', description='Specifies whether to automatically renew the product.

*   true
*   false', example='true'),
      chargeType?: string(name='ChargeType', description='The billing method. Only POSTPAY is supported.', example='POSTPAY'),
      duration?: long(name='Duration', description='The purchase duration. You can use this parameter together with pricingCycle. Only 1 is supported.', example='1'),
      instanceProperties?: [ 
        {
          code?: string(name='Code', description='The property code.', example='commodity_type'),
          name?: string(name='Name', description='The property name.'),
          value?: string(name='Value', description='The property value.', example='oss'),
        }
      ](name='InstanceProperties', description='The properties of the instance.

*   DataWorks_share: [ { "Code": "region", "Value": "cn-shanghai" } ]
*   OSS_share: [ { "Code": "commodity_type", "Value": "oss", "Name": "Object Storage Service" }, { "Code": "ord_time", "Value": "1:Hour", "Name": "1 Hour" } ]
*   PAI_share: None
*   China bid MaxCompute_share: [ { "Code": "region", "Value": "cn-hangzhou" }, { "Code": "odps_specification_type", "Value": "OdpsStandard" }, { "Code": "ord_time", "Value": "1:Hour" } ]
*   International bid MaxCompute_share: [ { "Code": "region", "Value": "cn-hangzhou" }, { "Code": "ord_time", "Value": "1:Hour" } ]'),
      orderType?: string(name='OrderType', description='The type of the order. Only BUY is supported.', example='BUY'),
      pricingCycle?: string(name='PricingCycle', description='The billing cycle. Valid values:

*   Month: The price is calculated every month. DataWorks_share only supports Month.
*   Hour: The price is calculated every hour. OSS_share and MaxCompute_share only support Hour.', example='Month'),
      productCode?: string(name='ProductCode', description='The product code. Valid values:

*   DataWorks_share: pay-as-you-go DataWorks
*   MaxCompute_share: pay-as-you-go MaxCompute
*   PAI_share: pay-as-you-go PAI.
*   OSS_share: pay-as-you-go OSS', example='DataWorks_share'),
    }
  ](name='Products', description='The list of products to be purchased. Separate them with commas (,).', position='Body'),
}

model CreateProductOrdersResponseBody = {
  buyProductRequestId?: string(name='BuyProductRequestId', description='The ID of the product purchase request.', example='3ed6a882-0d85-4dd8-ad36-cd8d74ab9fdb'),
  message?: string(name='Message', description='The returned message.'),
  orderId?: string(name='OrderId', description='The purchase order ID.', example='210292536260646'),
  requestId?: string(name='RequestId', description='The request ID.', example='ksdjf-jksd-*****slkdjf'),
}

model CreateProductOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductOrdersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProductOrders  CreateProductOrdersRequest
  * @return CreateProductOrdersResponse
 */
async function createProductOrders(request: CreateProductOrdersRequest): CreateProductOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProductOrders', 'POST', '/api/v1/productorders', 'json', false, 'json', request);
}

model CreateRunRequest {
  experimentId: string(name='ExperimentId', description='The ID of the experiment that corresponds to the run.

This parameter is required.', example='exp-6thbb5xrbmp*****', position='Body'),
  labels?: [
    Label
  ](name='Labels', description='The list of tags added to the run.', position='Body'),
  name?: string(name='Name', description='The name of the run. The name must meet the following requirements:

*   The name must start with a letter.
*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must be 1 to 63 characters in length.

If the name is left empty when you create a run, a random run ID generated by the server is used as the name.', example='myName', position='Body'),
  params?: [
    RunParam
  ](name='Params', description='The parameters of the run.', position='Body'),
  sourceId?: string(name='SourceId', description='The ID of the workload associated with the run.', example='job-jdnhf***fnrimv', position='Body'),
  sourceType?: string(name='SourceType', description='The type of the workload source that is associated with the run. Valid values: TrainingService and DLC. You can also leave this parameter empty. This parameter is optional and left empty by default.', example='DLC', position='Body'),
}

model CreateRunResponseBody = {
  runId?: string(name='RunId', description='The run ID.', example='run-1meoz7VJd2C6f****'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model CreateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRun  CreateRunRequest
  * @return CreateRunResponse
 */
async function createRun(request: CreateRunRequest): CreateRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRun', 'POST', '/api/v1/runs', 'json', false, 'json', request);
}

model CreateWorkspaceRequest {
  description: string(name='Description', description='The description of the workspace. The description can be up to 80 characters in length.

This parameter is required.', example='description', position='Body'),
  displayName?: string(name='DisplayName', description='The display name of the workspace. You can set it based on the purpose of the workspace. If left empty, the name of the workspace is used.', example='display name', position='Body'),
  envTypes: [ string ](name='EnvTypes', description='The environment of the workspace.

*   Workspaces in basic mode can run only in the production environment (prod).
*   Workspaces in standard mode can run in both the development and production environments (dev and prod).

This parameter is required.', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  workspaceName: string(name='WorkspaceName', description='The name of the workspace. Format:

*   The name must be 3 to 23 characters in length, and can contain letters, underscores (_), and digits.
*   The name must start with a letter.
*   It must be unique in the current region.

This parameter is required.', example='workspace_example', position='Body'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1e195c5116124202371861018d5bde'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspace  CreateWorkspaceRequest
  * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspace', 'POST', '/api/v1/workspaces', 'json', false, 'json', request);
}

model CreateWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  option?: string(name='Option', description='The operation to perform. Valid values:

*   CreateAndAttach: creates resources and associates the resources with a workspace.
*   Attach: associates resources with a workspace.

>  MaxCompute supports only the Attach operation.', example='CreateAndAttach', position='Body'),
  resources: [ 
    {
      envType: string(name='EnvType', description='The environment type. Valid values:

*   dev: development environment
*   prod: production environment

This parameter is required.', example='prod'),
      groupName?: string(name='GroupName', description='The name of the resource group, which is unique within your Alibaba Cloud account. This parameter is required for MaxCompute, Elastic Compute Service (ECS), Lingjun, Alibaba Cloud Container Compute Service (ACS), and Realtime Compute for Apache Flink resources.', example='groupName'),
      isDefault?: boolean(name='IsDefault', description='Specifies whether the resource is the default resource. Each type of resources has a default resource. Valid values:

*   false (default)
*   true', example='false'),
      labels?: [ 
        {
          key?: string(name='Key', description='The label key.', example='system.support.eas'),
          value?: string(name='Value', description='The label value.', example='true'),
        }
      ](name='Labels', description='The labels added to the resource.'),
      name: string(name='Name', description='The resource name. The name must meet the following requirements:

*   The name must be 3 to 28 characters in length, and can contain only letters, digits, and underscores (_). The name must start with a letter.
*   The name must be unique in the region.

This parameter is required.', example='ResourceName'),
      productType?: string(name='ProductType', description='**This parameter is no longer used and will be removed. Use the ResourceType parameter instead.', example='MaxCompute'),
      quotas?: [ 
        {
          id: string(name='Id', description='The quota ID. You can call [ListQuotas](https://help.aliyun.com/document_detail/449144.html) to obtain the quota ID.

This parameter is required.', example='232892******92912'),
        }
      ](name='Quotas', description='The quotas. Only MaxCompute quotas are available.'),
      resourceType?: string(name='ResourceType', description='The resource types. Valid values:

*   MaxCompute
*   ECS
*   Lingjun
*   ACS
*   FLINK', example='MaxCompute'),
      spec?: map[string]any(name='Spec', description='The resource specifications in the JSON format.'),
      workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123'),
    }
  ](name='Resources', description='The resources.

This parameter is required.', position='Body'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      id?: string(name='Id', description='The resource ID.', example='1234'),
    }
  ](name='Resources', description='The resources.'),
  totalCount?: long(name='TotalCount', description='The total number of resources.', example='1'),
}

model CreateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspaceResource  CreateWorkspaceResourceRequest
  * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResource(request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkspaceResource', 'POST', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

model DeleteCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='The ID of the code source to be deleted. You can call [ListCodeSources](https://help.aliyun.com/document_detail/459922.html) to query the code source ID.

This parameter is required.', example='code-20210111103721-85qz78ia96lu', position='Path'),
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='The ID of the deleted code source.', example='code-20210111103721-85qz78ia96lu'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCodeSource  DeleteCodeSourceRequest
  * @return DeleteCodeSourceResponse
 */
async function deleteCodeSource(request: DeleteCodeSourceRequest): DeleteCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCodeSource', 'DELETE', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model DeleteConfigRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='98***', position='Path'),
  configKey: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.

This parameter is required.', example='tempStoragePath', position='Path'),
  categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle - DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig', position='Query'),
  labels?: string(name='Labels', description='The filter conditions. Separate multiple conditions with commas (,). The conditions have an AND relationship.', example='key1=value;key2=value2', position='Query'),
}

model DeleteConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A******C83E'),
}

model DeleteConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConfig  DeleteConfigRequest
  * @return DeleteConfigResponse
 */
async function deleteConfig(request: DeleteConfigRequest): DeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfig', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/configs/{ConfigKey}', 'json', false, 'json', request);
}

model DeleteDatasetRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wzlj****9ks92', position='Path'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataset  DeleteDatasetRequest
  * @return DeleteDatasetResponse
 */
async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataset', 'DELETE', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model DeleteDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetaIds: string(name='DatasetFileMetaIds', description='The metadata ID of the dataset file.

This parameter is required.', example='07914c9534586e4e7aa6e9dbca5009082df******fd8a0d857b33296c59bf6', position='Query'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='132602', position='Query'),
}

model DeleteDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails', description='The metadata records that fail to be deleted for the dataset files.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', description='Indicates whether the metadata records of all dataset files were deleted. The value true indicates that the metadata records of all dataset files are deleted. If the value is false, view the failure details specified by FailedDetails.', example='true'),
}

model DeleteDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetFileMetas  DeleteDatasetFileMetasRequest
  * @return DeleteDatasetFileMetasResponse
 */
async function deleteDatasetFileMetas(request: DeleteDatasetFileMetasRequest): DeleteDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetFileMetas', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model DeleteDatasetJobRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='The ID of the dataset job.

This parameter is required.', example='dsjob-9jx1******uj9e', position='Path'),
}

model DeleteDatasetJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetJob  DeleteDatasetJobRequest
  * @return DeleteDatasetJobResponse
 */
async function deleteDatasetJob(request: DeleteDatasetJobRequest): DeleteDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetJob', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model DeleteDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='The dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='The configuration ID.

This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='513663', position='Query'),
}

model DeleteDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model DeleteDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetJobConfig  DeleteDatasetJobConfigRequest
  * @return DeleteDatasetJobConfigResponse
 */
async function deleteDatasetJobConfig(request: DeleteDatasetJobConfigRequest): DeleteDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetJobConfig', 'DELETE', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model DeleteDatasetLabelsRequest {
  datasetId?: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.', example='d-rbvg5****jhc9ks92', position='Path'),
  labelKeys?: string(name='LabelKeys', description='The tag key. You can call [GetDataset](https://help.aliyun.com/document_detail/457218.html) to obtain the tag key. Multiple tag keys are separated by commas (,).', example='key1,key2', position='Query'),
}

model DeleteDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
}

model DeleteDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetLabels  DeleteDatasetLabelsRequest
  * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabels(request: DeleteDatasetLabelsRequest): DeleteDatasetLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetLabels', 'DELETE', '/api/v1/datasets/{DatasetId}/labels', 'json', false, 'json', request);
}

model DeleteDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  versionName: string(name='VersionName', description='The dataset version name. The version number must be later than v1. Version v1 can only be deleted when the dataset is deleted.

This parameter is required.', example='v2', position='Path'),
}

model DeleteDatasetVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetVersion  DeleteDatasetVersionRequest
  * @return DeleteDatasetVersionResponse
 */
async function deleteDatasetVersion(request: DeleteDatasetVersionRequest): DeleteDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetVersion', 'DELETE', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model DeleteDatasetVersionLabelsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  versionName: string(name='VersionName', description='The dataset version name.

This parameter is required.', example='v1', position='Path'),
  keys: string(name='Keys', description='The tag keys. Multiple tags are separated by commas (,).

This parameter is required.', example='key1,key2', position='Query'),
}

model DeleteDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetVersionLabels  DeleteDatasetVersionLabelsRequest
  * @return DeleteDatasetVersionLabelsResponse
 */
async function deleteDatasetVersionLabels(request: DeleteDatasetVersionLabelsRequest): DeleteDatasetVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDatasetVersionLabels', 'DELETE', '/api/v1/datasets/{DatasetId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model DeleteExperimentRequest {
  experimentId: string(name='ExperimentId', description='The experiment ID.

This parameter is required.', example='exp-1zpfthdx******', position='Path'),
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
}

model DeleteExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperiment  DeleteExperimentRequest
  * @return DeleteExperimentResponse
 */
async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperiment', 'DELETE', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model DeleteExperimentLabelRequest {
  experimentId: string(name='ExperimentId', description='The ID of the experiment.

This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  key: string(name='Key', description='The key of the experiment tag to be deleted.

This parameter is required.', example='is_evaluate', position='Path'),
}

model DeleteExperimentLabelResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteExperimentLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExperimentLabel  DeleteExperimentLabelRequest
  * @return DeleteExperimentLabelResponse
 */
async function deleteExperimentLabel(request: DeleteExperimentLabelRequest): DeleteExperimentLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExperimentLabel', 'DELETE', '/api/v1/experiments/{ExperimentId}/labels/{Key}', 'json', false, 'json', request);
}

model DeleteMembersRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='145883', position='Path'),
  memberIds: string(name='MemberIds', description='The list of member IDs. Separate multiple member IDs with commas (,). You can call [ListMembers](https://help.aliyun.com/document_detail/449135.html) to obtain the member ID.

This parameter is required.', example='145883-21513926******88039,145883-2769726******87513', position='Query'),
}

model DeleteMembersResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed.', example='100600017'),
  message?: string(name='Message', description='The error message returned if the call failed.', example='Owner not allowed to delete'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model DeleteMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMembers  DeleteMembersRequest
  * @return DeleteMembersResponse
 */
async function deleteMembers(request: DeleteMembersRequest): DeleteMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMembers', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model DeleteModelRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5wzl****ks92', position='Path'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModel  DeleteModelRequest
  * @return DeleteModelResponse
 */
async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModel', 'DELETE', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model DeleteModelLabelsRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-d8dfd****sjfd', position='Path'),
  labelKeys?: string(name='LabelKeys', description='The label key to be deleted. To delete multiple label keys, separate them with commas (,).', example='key1,key2', position='Query'),
}

model DeleteModelLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelLabels  DeleteModelLabelsRequest
  * @return DeleteModelLabelsResponse
 */
async function deleteModelLabels(request: DeleteModelLabelsRequest): DeleteModelLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelLabels', 'DELETE', '/api/v1/models/{ModelId}/labels', 'json', false, 'json', request);
}

model DeleteModelVersionRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='The model version.

This parameter is required.', example='0.1.1', position='Path'),
}

model DeleteModelVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelVersion  DeleteModelVersionRequest
  * @return DeleteModelVersionResponse
 */
async function deleteModelVersion(request: DeleteModelVersionRequest): DeleteModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelVersion', 'DELETE', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model DeleteModelVersionLabelsRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-d8dfd****sjfd', position='Path'),
  versionName: string(name='VersionName', description='The version of the model.

This parameter is required.', example='0.1.1', position='Path'),
  labelKeys?: string(name='LabelKeys', description='The key of the tag to be deleted. Separate multiple tag keys with commas (,).', example='key1,key2', position='Query'),
}

model DeleteModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModelVersionLabels  DeleteModelVersionLabelsRequest
  * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabels(request: DeleteModelVersionLabelsRequest): DeleteModelVersionLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModelVersionLabels', 'DELETE', '/api/v1/models/{ModelId}/versions/{VersionName}/labels', 'json', false, 'json', request);
}

model DeleteRunRequest {
  runId: string(name='RunId', description='The run ID

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
}

model DeleteRunResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRun  DeleteRunRequest
  * @return DeleteRunResponse
 */
async function deleteRun(request: DeleteRunRequest): DeleteRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRun', 'DELETE', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model DeleteRunLabelRequest {
  runId: string(name='RunId', description='The run ID.

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  key: string(name='Key', description='The key of the run tag to be deleted.

This parameter is required.', example='is_evaluate', position='Path'),
}

model DeleteRunLabelResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRunLabel  DeleteRunLabelRequest
  * @return DeleteRunLabelResponse
 */
async function deleteRunLabel(request: DeleteRunLabelRequest): DeleteRunLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRunLabel', 'DELETE', '/api/v1/runs/{RunId}/labels/{Key}', 'json', false, 'json', request);
}

model DeleteUserConfigRequest {
  categoryName: string(name='CategoryName', description='The category. Currently, only DataPrivacyConfig is supported.

This parameter is required.', example='DataPrivacyConfig', position='Path'),
  configKey?: string(name='ConfigKey', description='The configuration item keys. Currently, only customizePAIAssumedRole.', example='tempStoragePath', position='Query'),
}

model DeleteUserConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='dsjk****dfjksdf'),
}

model DeleteUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserConfig  DeleteUserConfigRequest
  * @return DeleteUserConfigResponse
 */
async function deleteUserConfig(request: DeleteUserConfigRequest): DeleteUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUserConfig', 'DELETE', '/api/v1/userconfigs/{CategoryName}', 'json', false, 'json', request);
}

model DeleteWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspace  DeleteWorkspaceRequest
  * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspace', 'DELETE', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model DeleteWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  groupName?: string(name='GroupName', description='The name of the resource group. You can call [ListResources](https://help.aliyun.com/document_detail/449143.html) to obtain the name of the resource group.', example='group', position='Query'),
  labels?: string(name='Labels', description='The tags. Multiple tags are separated by commas (,).', example='system.supported.eas=true', position='Query'),
  option?: string(name='Option', description='The operation to perform. Valid values:

*   DetachAndDelete: disassociates a resource from a workspace and deletes the resource in the workspace. This is the default value.
*   Detach: disassociates a resource group from a workspace.', example='DetachAndDelete', position='Query'),
  productType?: string(name='ProductType', description='**This field is no longer used and will be removed. Use the ResourceType field instead.', example='DLC', position='Query'),
  resourceIds?: string(name='ResourceIds', description='The resource IDs. Multiple resource IDs are separated by commas (,). The GroupName values for the specified resources must be the same. You cannot leave both GroupName and ResourceIds empty. You can specify both parameters.', example='Resource-dks******jkf,Resource-adf******dss', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   ECS
*   Lingjun
*   ACS
*   FLINK
*   MaxCompute (This resource type is valid only if Option is set to Detach.)', example='DLC', position='Query'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs.'),
}

model DeleteWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspaceResource  DeleteWorkspaceResourceRequest
  * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResource(request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkspaceResource', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

model GetCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='The ID of the code source. You can call [ListCodeSources](https://help.aliyun.com/document_detail/459922.html) to query the code source ID.

This parameter is required.', example='code-202**********', position='Path'),
}

model GetCodeSourceResponseBody = {
  accessibility?: string(name='Accessibility', description='The visibility of the code source. Valid values:

*   PRIVATE: Visible only to you and the administrator of the workspace.
*   PUBLIC: Visible to all members in the workspace.', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', description='The code repository branch.', example='master'),
  codeCommit?: string(name='CodeCommit', description='The code commit ID.', example='44da10***********'),
  codeRepo?: string(name='CodeRepo', description='The address of the code repository.', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='The token used to access the code repository.', example='xxxx'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='The username of the code repository.', example='user1'),
  codeSourceId?: string(name='CodeSourceId', description='The ID of the code source.', example='code-202**********'),
  description?: string(name='Description', description='The description of the code source.', example='This is my data source 1.'),
  displayName?: string(name='DisplayName', description='The name of the code source.', example='MyCodeSource1'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the code source was created, in the ISO8601 format.', example='2021-01-12T23:36:01.123Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='The time when the code source was modified, in the ISO8601 format.', example='2021-01-12T23:36:01.123Z'),
  mountPath?: string(name='MountPath', description='The local mount path of the code.', example='/root/code'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  userId?: string(name='UserId', description='The ID of the creator.', example='1722********'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234'),
}

model GetCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCodeSource  GetCodeSourceRequest
  * @return GetCodeSourceResponse
 */
async function getCodeSource(request: GetCodeSourceRequest): GetCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeSource', 'GET', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model GetConfigRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='1234******2', position='Path'),
  categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle
*   DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig', position='Query'),
  configKey?: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempStoragePath', position='Query'),
  verbose?: string(name='Verbose', description='The value of the configuration item.', example='oss://***', position='Query'),
}

model GetConfigResponseBody = {
  categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle
*   DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig'),
  configKey?: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempStoragePath'),
  configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='oss://***'),
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Labels', description='The tags of the configuration item.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A******C83E'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234******2'),
}

model GetConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConfig  GetConfigRequest
  * @return GetConfigResponse
 */
async function getConfig(request: GetConfigRequest): GetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConfig', 'GET', '/api/v1/workspaces/{WorkspaceId}/config', 'json', false, 'json', request);
}

model GetDatasetRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
}

model GetDatasetResponseBody = {
  accessibility?: string(name='Accessibility', description='The visibility of the workspace. Valid values:

*   PRIVATE: The workspace is visible only to you and the administrator of the workspace.
*   PUBLIC: The workspace is visible to all users.', example='PRIVATE'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   OSS: Object Storage Service (OSS)
*   NAS: File Storage NAS (NAS)', example='NAS'),
  dataType?: string(name='DataType', description='The data type. Valid values:

*   COMMON: common
*   PIC: picture
*   TEXT: text
*   VIDEO: video
*   AUDIO: audio', example='COMMON'),
  datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-rbvg5wz****c9ks92'),
  description?: string(name='Description', description='The description.'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The creation time.', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The update time.', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo', description='The dataset configurations to be imported to a storage, such as OSS, NAS, or CPFS.

**OSS**

{\\
"region": "${region}",// The region ID\\
"bucket": "${bucket}",// The bucket name\\
"path": "${path}" // The file path\\
}\\


**NAS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The file system path\\
"mountTarget": "${mount_target}" // The mount point of the file system\\
}\\


**CPFS**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"protocolServiceId":"${protocol_service_id}", // The file system protocol service\\
"exportId": "${export_id}", // The file system export directory\\
"path": "${path}", // The file system path\\
}\\


**CPFS for Lingjun**

{\\
"region": "${region}",// The region ID\\
"fileSystemId": "${file_system_id}", // The file system ID\\
"path": "${path}", // The file system path\\
"mountTarget": "${mount_target}" // The mount point of the file system, CPFS for Lingjun only\\
"isVpcMount": boolean, // Whether the mount point is a VPC mount point, CPFS for Lingjun only\\
}\\', example='{
    "region": "cn-wulanchabu",
    "fileSystemId": "bmcpfs-xxxxxxxxxxx",
    "path": "/mnt",
    "mountTarget": "cpfs-xxxxxxxxxxxx-vpc-gacs9f.cn-wulanchabu.cpfs.aliyuncs.com",
    "isVpcMount": true
}'),
  labels?: [
    Label
  ](name='Labels', description='The tags.'),
  latestVersion?: DatasetVersion(name='LatestVersion', description='The latest version of the dataset.'),
  mountAccess?: string(name='MountAccess', description='The access permission on the dataset when the dataset is mounted. Valid values:

*   RO: read-only permissions
*   RW: read and write permissions', example='RW'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList', description='The list of role names in the workspace that have read and write permissions on the mounted database. The names start with PAI are basic role names and the names start with role- are custom role names. If the list contains asterisks (\\*), all roles have read and write permissions.'),
  name?: string(name='Name', description='The dataset name.', example='myName'),
  options?: string(name='Options', description='The extended fields of the dataset v1 (initial version). The value is a JSON string. When you use the dataset in Deep Learning Containers (DLC), you can use the mountPath field to specify the default mount path of the dataset.', example='{
  "mountPath": "/mnt/data/"
}'),
  ownerId?: string(name='OwnerId', description='The ID of the Alibaba Could account.', example='1631044****3440'),
  property?: string(name='Property', description='The property of the dataset of the initial version v1. Valid values:

*   FILE
*   DIRECTORY', example='DIRECTORY'),
  provider?: string(name='Provider', description='The dataset provider. If the value pai is returned, the dataset is a public dataset in PAI.', example='pai'),
  providerType?: string(name='ProviderType', description='The type of the data source for the dataset. Valid values:

*   Ecs (default)
*   Lingjun', example='Ecs'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceDatasetId?: string(name='SourceDatasetId', description='The ID of the source dataset generated from a labeling job of iTAG.', example='d-rcdg3wxxxxxhc5jk87'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', description='The version of the source dataset generated from a labeling job of iTAG.', example='v2'),
  sourceId?: string(name='SourceId', description='The ID of the source for the dataset v1 (initial version). Valid values:

*   If SourceType is set to USER, the value of SourceId can be a custom string.
*   If SourceType is set to ITAG, the value of SourceId is the ID of the labeling job of iTAG.
*   If SourceType is set to PAI_PUBLIC_DATASET, SourceId is empty by default.', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', description='The type of the source for the dataset v1 (initial version). Valid values:

*   PAI-PUBLIC-DATASET: a public dataset of Platform for AI (PAI).
*   ITAG: a dataset generated from a labeling job of iTAG.
*   USER: a dataset registered by a user.', example='USER'),
  tagTemplateType?: string(name='TagTemplateType', description='The labeling template for the source dataset generated from a labeling job of iTAG.', example='TextClassification'),
  uri?: string(name='Uri', description='The URI of the initial version v1.

*   Sample format for the OSS data source: `oss://bucket.endpoint/object`
*   Sample formats for the NAS data source: `nas://<nasfisid>.region/subpath/to/dir/`: General-purpose NAS. `nas://<cpfs-fsid>.region/subpath/to/dir/`: Cloud Parallel File Storage (CPFS) 1.0. `nas://<cpfs-fsid>.region/<protocolserviceid>/`: CPFS 2.0. You can distinguish CPFS 1.0 and CPFS 2.0 file systems based on the format of the file system ID. The ID for CPFS 1.0 is in the cpfs-<8-bit ASCII characters> format. The ID for CPFS 2.0 is in the cpfs-<16-bit ASCII characters> format.', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', description='The ID of the user to which the dataset belongs.', example='2485765****023475'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs.', example='478**'),
}

model GetDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataset  GetDatasetRequest
  * @return GetDatasetResponse
 */
async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDataset', 'GET', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model GetDatasetFileMetaRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  datasetFileMetaId: string(name='DatasetFileMetaId', description='The metadata ID of the dataset file.

This parameter is required.', example='07914c9534586e4e7aa6e9dbca5009082df******fd8a0d857b33296c59bf6', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='1234', position='Query'),
}

model GetDatasetFileMetaResponseBody = {
  datasetFileMeta?: DatasetFileMetaContentGet(name='DatasetFileMeta', description='The queried metadata records of dataset files.'),
  datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-rbvg5wz****c9ks92'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234'),
}

model GetDatasetFileMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetFileMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetFileMeta  GetDatasetFileMetaRequest
  * @return GetDatasetFileMetaResponse
 */
async function getDatasetFileMeta(request: GetDatasetFileMetaRequest): GetDatasetFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetFileMeta', 'GET', '/api/v1/datasets/{DatasetId}/datasetfilemetas/{DatasetFileMetaId}', 'json', false, 'json', request);
}

model GetDatasetFileMetasStatisticsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  aggregateBy?: string(name='AggregateBy', description='Aggregates statistics based on the specified metadata field. The value is not case-sensitive. If not specified, the total number of dataset file metadata will be returned, instead of aggregation lists. Valid values:

*   filedir: the directory path of the file
*   file_type: the file type
*   tags.user: user-defined tag
*   tags.user-delete-ai-tags: algorithm tags deleted by the user
*   tags.ai: algorithm tags (aggregated by all tagging tasks)
*   tags.all: algorithm tags and user-defined tags (excluding alogorithm tags deleted by the user)', example='filedir', position='Query'),
  datasetVersion: string(name='DatasetVersion', description='The dataset version.

This parameter is required.', example='v1', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of results to be returned from a single query when the NextToken parameter is used in the query. Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='145883', position='Query'),
}

model GetDatasetFileMetasStatisticsResponseBody = {
  datasetFileMetasStats?: [
    DatasetFileMetasStat
  ](name='DatasetFileMetasStats', description='The details of the returned aggregation list, including the number of each aggregate item. The list is by default sorted in descending order based on the count number.'),
  totalCount?: int32(name='TotalCount', description='The returned number. Example: the number of metadata records or the number of user-defined tags.', example='73'),
  requestId?: string(name='requestId', description='The request ID.', example='ADF6D849-*****-7E7030F0CE53'),
}

model GetDatasetFileMetasStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetFileMetasStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetFileMetasStatistics  GetDatasetFileMetasStatisticsRequest
  * @return GetDatasetFileMetasStatisticsResponse
 */
async function getDatasetFileMetasStatistics(request: GetDatasetFileMetasStatisticsRequest): GetDatasetFileMetasStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetFileMetasStatistics', 'GET', '/api/v1/statistics/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model GetDatasetJobRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='The ID of the dataset job.

This parameter is required.', example='dsjob-9jx1xxxxxxuj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version name.', example='v1', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='478**', position='Query'),
}

model GetDatasetJobResponseBody = {
  completedFileCount?: long(name='CompletedFileCount', description='The total number of completed files.', example='990'),
  createTime?: string(name='CreateTime', description='The time when the job is started.', example='2024-11-15T07:06:42Z'),
  description?: string(name='Description', description='The job description.'),
  failedFileCount?: long(name='FailedFileCount', description='The total number of failed files.', example='10'),
  finishTime?: string(name='FinishTime', description='The time when the job ends.', example='2024-07-16T02:03:23Z'),
  jobAction?: string(name='JobAction', description='The action that is performed on the job.

Valid values:

*   SemanticIndex: semantic indexing
*   IntelligentTag: smart labeling
*   FileMetaExport: metadata export', example='SemanticIndex'),
  jobMode?: string(name='JobMode', description='The job mode.

Valid value:

*   Full: full data mode.', example='Full'),
  jobSpec?: string(name='JobSpec', description='The job details.', example='{\\"modelId\\":\\"xxx\\"}'),
  logs?: [ string ](name='Logs', description='The job logs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
  status?: string(name='Status', description='The job state.

Valid values:

*   Succeeded
*   Failed
*   Running
*   Pending
*   PartialFailed
*   Deleting
*   ManuallyStop', example='Running'),
  totalFileCount?: long(name='TotalFileCount', description='The total number of job files.', example='1000'),
}

model GetDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetJob  GetDatasetJobRequest
  * @return GetDatasetJobResponse
 */
async function getDatasetJob(request: GetDatasetJobRequest): GetDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetJob', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model GetDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='The dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='The configuration ID.

This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='114243', position='Query'),
}

model GetDatasetJobConfigResponseBody = {
  config?: string(name='Config', description='The configuration content. Configuration format for MultimodalIntelligentTag:

{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }

MultimodalSemanticIndex

{ "defaultModelId": "xxx" "defaultModelVersion":"1.0.0" }', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }'),
  configType?: string(name='ConfigType', description='The configuration type. Valid values:

*   MultimodalIntelligentTag
*   MultimodalSemanticIndex', example='MultimodalIntelligentTag'),
  createTime?: string(name='CreateTime', description='The time when the configuration is created.', example='2024-10-16T01:44:10Z'),
  datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-lfd60v0p****ujtsdx'),
  modifyTime?: string(name='ModifyTime', description='The time when the configuration is modified.', example='2024-12-26T02:17:18Z'),
  requestId?: string(name='RequestId', description='The request ID.', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='114243'),
}

model GetDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetJobConfig  GetDatasetJobConfigRequest
  * @return GetDatasetJobConfigResponse
 */
async function getDatasetJobConfig(request: GetDatasetJobConfigRequest): GetDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetJobConfig', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model GetDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  versionName: string(name='VersionName', description='The version name.

This parameter is required.', example='v1', position='Path'),
}

model GetDatasetVersionResponseBody = {
  dataCount?: long(name='DataCount', description='The number of data records.', example='10000'),
  dataSize?: long(name='DataSize', description='The size of the dataset.', example='10000'),
  dataSourceType: string(name='DataSourceType', description='The type of the data source.

This parameter is required.'),
  datasetId?: string(name='DatasetId', description='The request ID.', example='d-dkdbnnap0g7b6su4yg'),
  description?: string(name='Description', description='The version description.'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The creation time.', example='2023-12-13T10:22:05.694Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The last modification time.', example='2023-12-13T10:22:05.694Z'),
  importInfo?: string(name='ImportInfo', description='The dataset configurations to be imported to a storage, such as Object Storage Service (OSS), File Storage NAS (NAS), or Cloud Parallel File Storage (CPFS).

**OSS**

{ "region": "${region}",// The region ID. $bucket = $options["bucket"]; // The bucket name. "path": "${path}" // The file path. }

**NAS**

**CPFS**

**CPFS for Lingjun**', example='{
    "region": "cn-wulanchabu",
    "fileSystemId": "bmcpfs-xxxxxxxxxxx",
    "path": "/mnt",
    "mountTarget": "cpfs-xxxxxxxxxxxx-vpc-gacs9f.cn-wulanchabu.cpfs.aliyuncs.com",
    "isVpcMount": true
}'),
  labels?: [
    Label
  ](name='Labels', description='The resource tags.'),
  mountAccess?: string(name='MountAccess', description='The access permission on the dataset when the dataset is mounted. Valid values:

*   RO: read-only permissions
*   RW: read and write permissions', example='RO'),
  options?: string(name='Options', description='The extended fields.', example='{
  "mountPath": "/mnt/data/"
}'),
  property: string(name='Property', description='The property of the dataset.

This parameter is required.', example='DIRECTORY'),
  requestId?: string(name='RequestId', description='Id of the request', example='C55DF3DA-F120-5E37-A374-F49365531701'),
  sourceId?: string(name='SourceId', description='The ID of the source dataset.', example='d-rbvg5wzljzjhc9ks92'),
  sourceType?: string(name='SourceType', description='The type of the data source.', example='USER'),
  uri: string(name='Uri', description='The sample URI of the dataset.

This parameter is required.', example='oss://ai4d-br7hx9ngzelo2o6uip.oss-cn-shanghai.aliyuncs.com/365349/data-1157703270994901/datasets/aka108o/'),
  versionName?: string(name='VersionName', description='The version name of the dataset.', example='v1'),
}

model GetDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetVersion  GetDatasetVersionRequest
  * @return GetDatasetVersionResponse
 */
async function getDatasetVersion(request: GetDatasetVersionRequest): GetDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDatasetVersion', 'GET', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose', description='Specifies whether to show the details of the default workspace. The details include the conditions of the workspace in different phases. Valid values:

*   false (default)
*   true', example='false', position='Query'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code', description='The returned status code. HTTP status code 200 indicates that the request was successful. Other HTTP status codes indicate that the request failed.', example='200'),
      message?: string(name='Message', description='The error message. If the returned status code is 200, this parameter is empty.', example='Create Failed'),
      type?: string(name='Type', description='The task type. Valid values:

*   CREATING: The workspace is being created.
*   WORKSPACE_CREATED: The workspace is created.
*   MEMBERS_ADDED: The member is added.
*   ENABLED: The workspace is created and the member is added.', example='CREATING'),
    }
  ](name='Conditions', description='The conditions of the default workspace in the creation process.'),
  creator?: string(name='Creator', description='The UID of the Alibaba Cloud account.', example='17915******4216'),
  description?: string(name='Description', description='The workspace description.', example='workspace description example'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes', description='The environments of the workspace. Valid values:

*   Workspaces in basic mode can run only in the production environment.
*   Workspaces in standard mode can run in both the development and production environments.'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the workspace was created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the workspace was modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  owner?: {
    userId?: string(name='UserId', description='The user ID.', example='17915******4216'),
    userKp?: string(name='UserKp', description='The user ID.', example='17915******4216'),
    userName?: string(name='UserName', description='The username.', example='username'),
  }(name='Owner', description='The UID of the Alibaba Cloud account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: string(name='Status', description='The workspace status. Valid values:

*   ENABLED
*   INITIALIZING
*   FAILURE
*   DISABLED
*   FROZEN
*   UPDATING', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234'),
  workspaceName?: string(name='WorkspaceName', description='The workspace name, which is unique in a region.', example='workspace-example'),
}

model GetDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDefaultWorkspace  GetDefaultWorkspaceRequest
  * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDefaultWorkspace', 'GET', '/api/v1/defaultWorkspaces', 'json', false, 'json', request);
}

model GetExperimentRequest {
  experimentId?: string(name='ExperimentId', description='The ID of the experiment.', example='exp-1zpfthdx******', position='Path'),
  verbose?: boolean(name='Verbose', description='Specifies whether to obtain the latest run information associated with the experiment

Valid values:

*   true
*   false', example='false', position='Query'),
}

model GetExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Experiment  
}

/**
  * @param request  the request parameters of GetExperiment  GetExperimentRequest
  * @return GetExperimentResponse
 */
async function getExperiment(request: GetExperimentRequest): GetExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExperiment', 'GET', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model GetImageRequest {
  imageId: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.

This parameter is required.', example='image-4c62******53uor', position='Path'),
  verbose?: boolean(name='Verbose', description='Specifies whether to display non-essential information, which contains tags. Valid values:

*   false (default)
*   true', example='false', position='Query'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility', description='The accessibility of the image. Valid values:

*   PUBLIC: All members can access the workspace.
*   PRIVATE: Only the creator can access the workspace.', example='PUBLIC'),
  description?: string(name='Description', description='The image description.'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the image is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the image is modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  imageUri?: string(name='ImageUri', description='The image address, which contains the version number.', example='registry.cn-hangzhou.aliyuncs.******ession/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='system.chipType'),
      value?: string(name='Value', description='The tag value.', example='GPU'),
    }
  ](name='Labels', description='The image tags, which are of the array data type. Each element in the array contains a key-value pair. The key of official tags is system.official and the tag value is true.'),
  name?: string(name='Name', description='The image name.', example='nlp-compression'),
  parentUserId?: string(name='ParentUserId', description='The Alibaba Cloud account of the creator.', example='15577******8921'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  size?: int32(name='Size', description='The size of the image. Unit: GB.', example='10'),
  sourceId?: string(name='SourceId', description='镜像来源 ID'),
  sourceType?: string(name='SourceType', description='镜像来源类型'),
  userId?: string(name='UserId', description='The user ID of the image.', example='15577******8921'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='15945'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImage  GetImageRequest
  * @return GetImageResponse
 */
async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetImage', 'GET', '/api/v1/images/{ImageId}', 'json', false, 'json', request);
}

model GetMemberRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='145883', position='Path'),
  memberId?: string(name='MemberId', description='The member ID. You must specify only one of the following parameters: UserId and MemberId.', example='145883-21513926******88039', position='Query'),
  userId?: string(name='UserId', description='The ID of the Alibaba Cloud account. You can call [ListWorkspaceUsers](https://help.aliyun.com/document_detail/449133.html) to obtain the ID of the Alibaba Cloud account. You must specify only one of the following parameters: UserId and MemberId.', example='21513926******88039', position='Query'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName', description='The display name of the member.', example='myDisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the workspace is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  memberId?: string(name='MemberId', description='The member ID.', example='145883-21513926******88039'),
  memberName?: string(name='MemberName', description='The username.', example='user1'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  roles?: [ string ](name='Roles', description='The list of roles.'),
  userId?: string(name='UserId', description='The user ID.', example='21513926******88039'),
}

model GetMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMember  GetMemberRequest
  * @return GetMemberResponse
 */
async function getMember(request: GetMemberRequest): GetMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMember', 'GET', '/api/v1/workspaces/{WorkspaceId}/member', 'json', false, 'json', request);
}

model GetModelRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5****c9ks92', position='Path'),
}

model GetModelResponseBody = {
  accessibility?: string(name='Accessibility', description='The visibility of the workspace.

*   PRIVATE: The workspace is visible only to you and the administrator of the workspace.
*   PUBLIC: The workspace is visible to all users.', example='PUBLIC'),
  domain?: string(name='Domain', description='The domain. This parameter specifies the domain for which the model is developed. Valid values: nlp and cv. nlp indicates natural language processing and cv indicates computer vision.', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo', description='Other information about the model.', example='{
	"RatingCount": 2866,
	"Rating": 4.94,
	"FavoriteCount": 34992,
	"CommentCount": 754,
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/drea***w.png"],
	"TippedAmountCount": 32,
	"DownloadCount": 606056
}'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the model is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the model is last modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-30T12:51:33.028Z'),
  labels?: [
    Label
  ](name='Labels', description='The model tags.'),
  latestVersion?: ModelVersion(name='LatestVersion', description='The latest version of the model.'),
  modelDescription?: string(name='ModelDescription', description='The model description.'),
  modelDoc?: string(name='ModelDoc', description='The documentation of the model.', example='https://***.md'),
  modelId?: string(name='ModelId', description='The model ID.', example='model-rbvg5wzljz****ks92'),
  modelName?: string(name='ModelName', description='The model name.'),
  modelType?: string(name='ModelType', description='The model type.', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', description='The sequence number of the model.', example='1'),
  origin?: string(name='Origin', description='The source of the model. The community or organization to which the model belongs, such as ModelScope or HuggingFace.', example='ModelScope'),
  ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account.', example='1234567890******'),
  provider?: string(name='Provider', description='The provider.', example='pai'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  task?: string(name='Task', description='The task of the model. This parameter describes specific issues that the model solves, such as text-classification.', example='text-classification'),
  userId?: string(name='UserId', description='The user ID.', example='1234567890******'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='234**'),
}

model GetModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModel  GetModelRequest
  * @return GetModelResponse
 */
async function getModel(request: GetModelRequest): GetModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModel', 'GET', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model GetModelVersionRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5wzljz****ks92', position='Path'),
  versionName: string(name='VersionName', description='The model version.

This parameter is required.', example='1.0.1', position='Path'),
}

model GetModelVersionResponseBody = {
  approvalStatus?: string(name='ApprovalStatus', description='The approval status. Valid values:

*   Pending
*   Approved
*   Rejected', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', description='The compression configuration.', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', description='The evaluation configuration.', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', description='The additional information.', example='{
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/st****017.preview.png"],
	"TrainedWords": ["albedo_overlord"]
}'),
  formatType?: string(name='FormatType', description='The model format. Valid values:

*   OfflineModel
*   SavedModel
*   Keras H5
*   Frozen Pb
*   Caffe Prototxt
*   TorchScript
*   XGBoost
*   PMML
*   AlinkModel
*   ONNX', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', description='The model framework. Valid values:

*   Pytorch -XGBoost
*   Keras
*   Caffe
*   Alink
*   Xflow
*   TensorFlow', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the model was created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the model was last modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-30T12:51:33.028Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', description='Describes how to apply to downstream inference services. For example, describes the processor and container of Elastic Algorithm Service (EAS).', example='{
    "Processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels', description='The labels.'),
  metrics?: map[string]any(name='Metrics', description='The metrics.', example='{}'),
  options?: string(name='Options', description='The extended field. The value of this parameter is a JSON string.', example='{}'),
  ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account.', example='1234567890******'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceId?: string(name='SourceId', description='The source ID.

*   If the source type is Custom, this field is not limited.
*   If the source type is PAIFlow or TrainingService, the format is:

<!---->

    region=<region_id>,workspaceId=<workspace_id>,kind=<kind>,id=<id>

Take note of the following parameters:

*   region is the region ID.
*   workspaceId is the ID of the workspace.
*   kind is the type. Valid values: PipelineRun (PAIFlow) and ServiceJob (training service).
*   id is a unique identifier.', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', description='The source type of the model. Valid values:

*   Custom
*   PAIFlow
*   TrainingService', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', description='The training configurations used for fine-tuning and incremental training.', example='{}'),
  uri?: string(name='Uri', description='The URI of the model version, which is the location where the model is stored. Valid values:

*   The HTTP(S) address of the model. Example: `https://myweb.com/mymodel.tar.gz`.
*   The Object Storage Service (OSS) path of the model, in the format of `oss://<bucket>.<endpoint>/object`. For endpoint, see [OSS regions and endpoints](https://help.aliyun.com/document_detail/31837.html). Example: `oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/`.'),
  userId?: string(name='UserId', description='The user ID.', example='1234567890******'),
  versionDescription?: string(name='VersionDescription', description='The version description.'),
  versionName?: string(name='VersionName', description='The model version.', example='0.1.0'),
}

model GetModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModelVersion  GetModelVersionRequest
  * @return GetModelVersionResponse
 */
async function getModelVersion(request: GetModelVersionRequest): GetModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelVersion', 'GET', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model GetPermissionRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  permissionCode: string(name='PermissionCode', description='The permission name, which is unique in a region. For more information about permissions, see [Appendix: Roles and permissions](https://help.aliyun.com/document_detail/2840449.html). For more information about how to obtain the permission name, see [ListPermissions](https://help.aliyun.com/document_detail/449132.html).

This parameter is required.', example='PaiDLC:GetTensorboard', position='Path'),
  accessibility?: string(name='Accessibility', description='The accessibility. Valid values:

*   PUBLIC: All members in the workspace can access the workspace.
*   PRIVATE: Only the creator can access the workspace.', example='PUBLIC', position='Query'),
  creator?: string(name='Creator', description='The UID of the Alibaba Cloud account that is used to create the workspace.', example='17915******4216', position='Query'),
  labels?: map[string]any(name='Labels', shrink='json', position='Query'),
  option?: string(name='Option', description='The configuration. Separate multiple configurations with commas (,). Valid values:

*   ResourceEmpty: The Resource parameter is not configured.
*   DisableRam: The RAM check is not performed.', example='ResourceEmpty,DisableRam', position='Query'),
  resource?: string(name='Resource', description='The resource.', example='job/dlc-ksd******s12', position='Query'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode', description='The permission name, which is unique in a region. For more information about permissions, see [Appendix: Roles and permissions](https://help.aliyun.com/document_detail/2840449.html).', example='PaiDLC:ListJobs'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility', description='The accessibility. Valid values:

*   PUBLIC: All members can access the workspace.
*   PRIVATE: Only the creator can access the workspace.
*   ANY: All users can access the workspace.', example='PRIVATE'),
      entityAccessType?: string(name='EntityAccessType', description='The access type. If you set Accessibility to PUBLIC, all users can access the workspace. This parameter is invalid. If you set Accessibility to PRIVATE, the value of this parameter can be:

*   PRIVATE: Only the creator can access the workspace.
*   ANY: All users can access the workspace.', example='CREATOR'),
    }
  ](name='PermissionRules', description='The permission rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model GetPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPermission  GetPermissionRequest
  * @return GetPermissionResponse
 */
async function getPermission(request: GetPermissionRequest): GetPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPermission', 'GET', '/api/v1/workspaces/{WorkspaceId}/permissions/{PermissionCode}', 'json', false, 'json', request);
}

model GetRunRequest {
  runId: string(name='RunId', description='The run ID.

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  verbose?: boolean(name='Verbose', description='Specifies whether to obtain the Metrics, Params, and Labels information. Default value: false.', example='true', position='Query'),
}

model GetRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Run  
}

/**
  * @param request  the request parameters of GetRun  GetRunRequest
  * @return GetRunResponse
 */
async function getRun(request: GetRunRequest): GetRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRun', 'GET', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='12345', position='Path'),
  verbose?: boolean(name='Verbose', description='Specifies whether to display supplementary information such as the workspace owner. Valid values:

*   false (default)
*   true', example='true', position='Query'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames', description='The names of the administrator accounts.'),
  creator?: string(name='Creator', description='The ID of the user who creates the workspace.', example='1157******94123'),
  description?: string(name='Description', description='The description of the workspace.', example='workspace description example'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes', description='The environment information of the workspace.

*   Workspaces in basic mode can run only in the production environment.
*   Workspaces in standard mode can run in both the development and production environments.'),
  extraInfos?: map[string]any(name='ExtraInfos', description='The additional information, which only contains the TenantId field.', example='{"TenantId": "4286******98"}'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the workspace is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the workspace is modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
  isDefault?: boolean(name='IsDefault', description='Indicates whether the workspace is the default workspace. Valid values:

*   false
*   true', example='true'),
  owner?: {
    displayName?: string(name='DisplayName', description='The display name.', example='mings****t'),
    userId?: string(name='UserId', description='The user ID.', example='1157******94123'),
    userKp?: string(name='UserKp', description='The user ID.', example='1157******94123'),
    userName?: string(name='UserName', description='The username.', example='mings****t'),
  }(name='Owner', description='The information about the workspace owner. This parameter is valid only when Verbose is set to true.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A0F049F0-8D69-5BAC-8F10-B4DED1B5A34C'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmwp7rkyq****'),
  status?: string(name='Status', description='The workspace state. Valid values:

*   ENABLED
*   INITIALIZING
*   FAILURE:
*   DISABLED
*   FROZEN
*   UPDATING', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='1234'),
  workspaceName?: string(name='WorkspaceName', description='The name of the workspace.', example='workspace-example'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkspace  GetWorkspaceRequest
  * @return GetWorkspaceResponse
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWorkspace', 'GET', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', description='The display name of the code source. Fuzzy match is supported.', example='MyDataSource', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. Valid values:

*   ASC (default)
*   DESC', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Valid values:

*   GmtModifyTime: the time when the code source was modified.
*   DisplayName: the display name.
*   CodeSourceId: the code source ID.
*   GmtCreateTime: the time when the code source was created. This is the default value.', example='GmtModifyTime', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='1234', position='Query'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources', description='The code sources.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', description='The total number of code sources that meet the filter conditions.', example='2'),
}

model ListCodeSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCodeSources  ListCodeSourcesRequest
  * @return ListCodeSourcesResponse
 */
async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCodeSources', 'GET', '/api/v1/codesources', 'json', false, 'json', request);
}

model ListConfigsRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='87***', position='Path'),
  categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle
*   DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig', position='Query'),
  configKeys?: string(name='ConfigKeys', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempStoragePath', position='Query'),
  labels?: string(name='Labels', description='The tags used as filter conditions. Separate multiple tags with commas (,). These conditions are in an AND relationship.', example='key1=value1,key2=value2', position='Query'),
  verbose?: string(name='Verbose', description='Specifies whether to show the tag information.

*   true
*   false', example='true', position='Query'),
}

model ListConfigsResponseBody = {
  configs?: [ 
    {
      configKey?: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempTableLifecycle'),
      configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='oss://***'),
      labels?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='key1'),
          value?: string(name='Value', description='The tag value.', example='value1'),
        }
      ](name='Labels', description='The tags of the configuration item.'),
    }
  ](name='Configs', description='The configuration items.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A******C83E'),
  totalCount?: long(name='TotalCount', description='The number of items returned.', example='15'),
}

model ListConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConfigs  ListConfigsRequest
  * @return ListConfigsResponse
 */
async function listConfigs(request: ListConfigsRequest): ListConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfigs', 'GET', '/api/v1/workspaces/{WorkspaceId}/configs', 'json', false, 'json', request);
}

model ListDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetVersion: string(name='DatasetVersion', description='The dataset version.

This parameter is required.', example='v1', position='Query'),
  endFileUpdateTime?: string(name='EndFileUpdateTime', description='The update time range to query. The end time. The time follows the ISO 8601 standard. This parameter is valid only when QueryType is set to TAG.

Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z', position='Query'),
  endTagUpdateTime?: string(name='EndTagUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01.000Z', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token.

>  If you do not configure this parameter, the data on the first page is returned. A return value other than Null of this parameter indicates that not all entries have been returned. You can use this value as an input parameter to obtain entries on the next page. The value Null indicates that all query results have been returned.', example='90a6ee35-****-4cd4-927e-1f45e1cb8b62_1729644433000', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. This parameter must be used together with SortBy. Default value: ASC.

*   ASC
*   DESC', example='DESC', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 1000.', example='10', deprecated='true', position='Query'),
  queryFileDir?: string(name='QueryFileDir', example='cars/20250221/', position='Query'),
  queryFileName?: string(name='QueryFileName', example='shuima', position='Query'),
  queryFileTypeIncludeAny?: [ string ](name='QueryFileTypeIncludeAny', shrink='simple', position='Query'),
  queryImage?: string(name='QueryImage', example='oss://test-xxx-oss/car/0001.png', position='Query'),
  queryTagsExclude?: [ string ](name='QueryTagsExclude', shrink='simple', position='Query'),
  queryTagsIncludeAll?: [ string ](name='QueryTagsIncludeAll', shrink='simple', position='Query'),
  queryTagsIncludeAny?: [ string ](name='QueryTagsIncludeAny', shrink='simple', position='Query'),
  queryText?: string(name='QueryText', description='The text content to be queried.', position='Query'),
  queryType?: string(name='QueryType', description='The retrieval type.

*   TAG (default)
*   VECTOR', example='TAG', position='Query'),
  scoreThreshold?: float(name='ScoreThreshold', description='The similarity score. Only dataset files whose similarity score is greater than the value of ScoreThreshold are returned. This parameter is valid only when QueryType is set to VECTOR.', example='0.6', position='Query'),
  sortBy?: string(name='SortBy', description='The field used to sort the results. Default value: GmtCreateTime. Valid values:

*   FileCreateTime (default): The results are sorted by the time when the file is created.
*   FileUpdateTime: The results are sorted by the time when the file is last modified.', example='FileCreateTime', position='Query'),
  startFileUpdateTime?: string(name='StartFileUpdateTime', description='The update time range to query. The start time. The time follows the ISO 8601 standard. This parameter is valid only when QueryType is set to TAG.

Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z', position='Query'),
  startTagUpdateTime?: string(name='StartTagUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01.000Z', position='Query'),
  thumbnailMode?: string(name='ThumbnailMode', example='w_100', position='Query'),
  topK?: int32(name='TopK', description='The number of search results to return. A maximum of Top K search results can be returned. This parameter is valid only when QueryType is set to VECTOR.', example='100', minimum=1, maximum=1000, position='Query'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='105173', position='Query'),
}

model ListDatasetFileMetasResponseBody = {
  datasetFileMetas?: [
    DatasetFileMeta
  ](name='DatasetFileMetas', description='The metadata records of the dataset files.'),
  datasetId?: string(name='DatasetId', description='The dataset ID.', example='d-rbvg5*****jhc9ks92'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token. If the number of results exceeds the maximum number of entries allowed per page, a pagination token is returned. This token can be used as an input parameter to obtain the next page of results. If all results are obtained, no token is returned.', example='90******-f5c5-4cd4-927e-1f45e1cb8b62_1729644433000'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30', deprecated='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='123'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='105173'),
}

model ListDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetFileMetas  ListDatasetFileMetasRequest
  * @return ListDatasetFileMetasResponse
 */
async function listDatasetFileMetas(request: ListDatasetFileMetasRequest): ListDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetFileMetas', 'GET', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model ListDatasetJobConfigsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  configType?: string(name='ConfigType', description='The configuration type.

*   MultimodalIntelligentTag
*   MultimodalSemanticIndex', example='MultimodalIntelligentTag', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='431514', position='Query'),
}

model ListDatasetJobConfigsResponseBody = {
  datasetJobConfigs?: [
    DatasetJobConfig
  ](name='DatasetJobConfigs', description='The dataset job configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='15'),
}

model ListDatasetJobConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetJobConfigs  ListDatasetJobConfigsRequest
  * @return ListDatasetJobConfigsResponse
 */
async function listDatasetJobConfigs(request: ListDatasetJobConfigsRequest): ListDatasetJobConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetJobConfigs', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/', 'json', false, 'json', request);
}

model ListDatasetJobsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version name.', example='v1', position='Query'),
  jobAction?: string(name='JobAction', description='The action to be performed on the job.', example='SemanticIndex', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='1234', position='Query'),
}

model ListDatasetJobsResponseBody = {
  datasetJobs?: [
    DatasetJob
  ](name='DatasetJobs', description='The jobs in the dataset.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  totalCount?: int32(name='TotalCount', description='The total number of jobs.'),
}

model ListDatasetJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetJobs  ListDatasetJobsRequest
  * @return ListDatasetJobsResponse
 */
async function listDatasetJobs(request: ListDatasetJobsRequest): ListDatasetJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetJobs', 'GET', '/api/v1/datasets/{DatasetId}/datasetjobs', 'json', false, 'json', request);
}

model ListDatasetVersionsRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  labelKeys?: string(name='LabelKeys', description='The dataset tag keys, which are used to filter datasets. Datasets whose tag keys or tag values contain a specified string are filtered.', example='key1,key2', position='Query'),
  labelValues?: string(name='LabelValues', description='The dataset tag values, which are used to filter datasets. Datasets whose tag keys or tag values contain a specified string are filtered.', example='value1,value2', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. Default value: ASC. Valid values:

*   ASC: ascending order
*   DESC: descending order.', example='ASC', position='Query'),
  pageNumber: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.

This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Default value: 10.

This parameter is required.', example='10', position='Query'),
  properties?: string(name='Properties', description='The dataset properties. Valid values:

*   DIRECTORY
*   FILE', example='DIRECTORY', position='Query'),
  sortBy?: string(name='SortBy', description='The field used to sort the results in queries by page. Default value: GmtCreateTime.
Valid values:

*   SourceType
*   DataSourceType
*   DataSize
*   DataCount
*   Property
*   GmtCreateTime: The results are sorted by creation time. This is the default value.
*   GmtModifiedTime: The results are sorted by modification time.
*   DatasetId', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', description='The data source ID.

*   If SourceType is set to USER, the value of SourceId is a custom string.
*   If SourceType is set to ITAG, the value of SourceId is the ID of the labeling job of iTAG.
*   If SourceType is set to PAI_PUBLIC_DATASET, SourceId is empty by default.', example='d-a0xbe5n03bhqof46ce', position='Query'),
  sourceTypes?: string(name='SourceTypes', description='The source type. Valid values:

*   PAI-PUBLIC-DATASET: a public dataset of Platform for AI (PAI).
*   ITAG: a dataset generated from a labeling job of iTAG.
*   USER: a dataset registered by a user.', example='USER', position='Query'),
}

model ListDatasetVersionsResponseBody = {
  datasetVersions?: [
    DatasetVersion
  ](name='DatasetVersions', description='The dataset versions.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0648C5BB-68D0-54D2-92A5-607135B8806B'),
  totalCount?: int32(name='TotalCount', description='The number of dataset versions that meet the filter conditions.', example='5'),
}

model ListDatasetVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetVersions  ListDatasetVersionsRequest
  * @return ListDatasetVersionsResponse
 */
async function listDatasetVersions(request: ListDatasetVersionsRequest): ListDatasetVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasetVersions', 'GET', '/api/v1/datasets/{DatasetId}/versions', 'json', false, 'json', request);
}

model ListDatasetsRequest {
  dataSourceTypes?: string(name='DataSourceTypes', description='The storage types of the data source. Multiple data source types are separated by commas (,). Valid values:

*   NAS: File Storage NAS (NAS).
*   OSS: Object Storage Service (OSS).', example='OSS', position='Query'),
  dataTypes?: string(name='DataTypes', description='The dataset types. Multiple dataset types are separated by commas (,). Valid values:

*   Video: video
*   COMMON: common
*   TEXT: text
*   PIC: picture
*   AUDIO: audio', example='COMMON,TEXT', position='Query'),
  label?: string(name='Label', description='The dataset tag, which is used to filter datasets. Datasets whose tag key or tag value contains a specified string are filtered.', example='test', position='Query'),
  name?: string(name='Name', description='The dataset name. Fuzzy search based on the dataset name is supported.', example='myName', position='Query'),
  order?: string(name='Order', description='The order of specific fields of the entries on the returned page. Valid values: ASC and DESC. Default value: ASC.

*   ASC: The entries are sorted in ascending order.
*   DESC: The entries are sorted in descending order.', example='ASC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  properties?: string(name='Properties', description='The dataset properties. Multiple properties are separated by commas (,). Valid values:

*   DIRECTORY
*   FILE', example='FILE', position='Query'),
  provider?: string(name='Provider', description='The dataset provider. If the value pai is returned, the dataset is a public dataset provided by PAI.', example='pai', position='Query'),
  sortBy?: string(name='SortBy', description='The field used for sorting.', example='GmtCreateTime', position='Query'),
  sourceDatasetId?: string(name='SourceDatasetId', description='The ID of the iTAG labeled dataset that is used as the source dataset.', example='d-rcdg3wxxxxxhc5jk87', position='Query'),
  sourceId?: string(name='SourceId', description='The data source ID.

*   If SourceType is set to USER, the value of SourceId is a custom string.
*   If SourceType is set to ITAG, the value of SourceId is the ID of the labeling job of iTAG.
*   If SourceType is set to PAI_PUBLIC_DATASET, SourceId is empty by default.', example='d-rbvg5wzljzjhc9ks92', position='Query'),
  sourceTypes?: string(name='SourceTypes', description='The source types. Multiple source types are separated by commas (,). Valid values:

*   PAI-PUBLIC-DATASET: a public dataset of Platform for AI (PAI).
*   ITAG: a dataset generated from a labeling job of iTAG.
*   USER: a dataset registered by a user.', example='USER,ITAG', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID. If you do not specify this parameter, the default workspace is used. If the default workspace does not exist, an error is reported.', example='324**', position='Query'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets', description='The datasets.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='15'),
}

model ListDatasetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasets  ListDatasetsRequest
  * @return ListDatasetsResponse
 */
async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDatasets', 'GET', '/api/v1/datasets', 'json', false, 'json', request);
}

model ListExperimentRequest {
  labels?: string(name='Labels', description='The tag filter conditions. Multiple conditions are separated by commas (,). The format of a single condition filter is `key=value`.', example='is_evaluation:true', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries in the request. Default value: 10.', example='10', position='Query'),
  name?: string(name='Name', description='The experiment name.', example='exp-test', position='Query'),
  options?: {
    matchNameExactly?: string(name='match_name_exactly', description='Specifies whether to exactly match the experiment by name. Valid values: true and false.', example='true'),
  }(name='Options', description='The optional parameters.', shrink='json', position='Query'),
  order?: string(name='Order', description='The order of specific fields of results in a paged query (ascending or descending).

*   ASC: ascending order
*   DESC: descending order. This is the default value.', example='DESC', position='Query'),
  orderBy?: string(name='OrderBy', description='The strings used for sorting. The following fields can be used for sorting: GmtCreateTime, Name, GmtModifiedTime, and ExperimentId. The sorting order can be ASC (default) and DESC.', example='GmtCreateTime DESC,Name ASC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. The value starts from 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  pageToken?: long(name='PageToken', description='The pagination token, which starts from 0. Default value: 0.', example='0', position='Query'),
  sortBy?: string(name='SortBy', description='The field used for sorting. The GmtCreateTime field is used.', example='GmtCreateTime', position='Query'),
  verbose?: boolean(name='Verbose', description='Specifies whether to obtain the LatestRun value that is related to the experiment.', example='false', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the experiment belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

>  If you do not specify a workspace ID, the system returns the experiments in the default workspace.', example='151739', position='Query'),
}

model ListExperimentResponseBody = {
  experiments?: [
    Experiment
  ](name='Experiments', description='The list of experiments.'),
  nextPageToken?: long(name='NextPageToken', description='The pagination token. It can be used in the next request to retrieve a new page of results.', example='0'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='5'),
  requestId?: string(name='requestId', description='The request ID.', example='0C6835C5-A424-5AFB-ACC2-F1E3CA1ABF7C'),
}

model ListExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExperiment  ListExperimentRequest
  * @return ListExperimentResponse
 */
async function listExperiment(request: ListExperimentRequest): ListExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExperiment', 'GET', '/api/v1/experiments', 'json', false, 'json', request);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.', example='image-4c62******53uor', position='Query'),
  labelFilter?: string(name='LabelFilter', description='The tag filter conditions, separated with commas (,). The format of a single condition filter is `key=value`. Takes effect independently from LabelKeys.', example='system.framework=XGBoost 1.6.0,system.official=true', position='Query'),
  labelKeys?: string(name='LabelKeys', description='The tag keys, separated with commas (,). System tags start with system and take effect independently from LabelFilter.', example='system.framework,system.official', position='Query'),
  region?: string(name='Region', description='The region where the image resides.', example='cn-shanghai', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='12345', position='Query'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='system.chipType'),
      value?: string(name='Value', description='The tag value.', example='GPU'),
    }
  ](name='Labels', description='The image tags.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', description='The total number of the images that meet the filter conditions.', example='2'),
}

model ListImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImageLabels  ListImageLabelsRequest
  * @return ListImageLabelsResponse
 */
async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListImageLabels', 'GET', '/api/v1/image/labels', 'json', false, 'json', request);
}

model ListImagesRequest {
  accessibility?: string(name='Accessibility', description='The visibility of the image. This parameter is valid only for custom images.

*   PUBLIC: The image is visible to all users.
*   PRIVATE: The image is visible only to you and the administrator of the workspace.', example='PUBLIC', position='Query'),
  imageUri?: string(name='ImageUri', position='Query'),
  labels?: string(name='Labels', description='The tag filter conditions. Multiple conditions are separated by commas (,). The format of a single condition filter is `key=value`. The following keys are supported:

*   system.chipType
*   system.dsw.cudaVersion
*   system.dsw.fromImageId
*   system.dsw.fromInstanceId
*   system.dsw.id
*   system.dsw.os
*   system.dsw.osVersion
*   system.dsw.resourceType
*   system.dsw.rootImageId
*   system.dsw.stage
*   system.dsw.tag
*   system.dsw.type
*   system.framework
*   system.origin
*   system.pythonVersion
*   system.source
*   system.supported.dlc
*   system.supported.dsw', example='system.framework=XGBoost 1.6.0,system.official=true', position='Query'),
  name?: string(name='Name', description='The image name. Fuzzy match is supported.', example='tensorflow_2.9', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. This parameter must be used together with SortBy. Default value: ASC. Valid values:

*   ASC: ascending order
*   DESC: descending order.', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Query'),
  query?: string(name='Query', description='The image name and description that are used for fuzzy search.', example='name', position='Query'),
  sortBy?: string(name='SortBy', description='The field used for sorting. The GmtCreateTime field is used.', example='GmtCreateTime', position='Query'),
  verbose?: boolean(name='Verbose', description='Specifies whether to display non-essential information, which contains tags. Valid values:

*   true
*   false', example='true', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='20******55', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility', description='The accessibility of the image. Valid values:

*   PUBLIC: All members can access the image.
*   PRIVATE: Only the creator can access the image.', example='PUBLIC'),
      description?: string(name='Description', description='The image description.', example='desc'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the image is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the image is modified, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
      imageId?: string(name='ImageId', description='The image ID.', example='image-tzi7f9******s45t'),
      imageUri?: string(name='ImageUri', description='The image address, which includes the version number.'),
      labels?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='system.chipType'),
          value?: string(name='Value', description='The tag value.', example='GPU'),
        }
      ](name='Labels', description='The image tags.'),
      name?: string(name='Name', description='The image name.', example='tensorflow_2.9'),
      parentUserId?: string(name='ParentUserId', description='The ID of the Alibaba Cloud account.', example='15577******82932'),
      size?: int32(name='Size', description='The image size. Unit: GB.', example='2'),
      sourceId?: string(name='SourceId', description='镜像来源 ID'),
      sourceType?: string(name='SourceType', description='镜像来源类型'),
      userId?: string(name='UserId', description='The user ID.', example='15577******82932'),
      workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='20******55'),
    }
  ](name='Images', description='The images.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', description='The total number of returned images.', example='2'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImages  ListImagesRequest
  * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListImages', 'GET', '/api/v1/images', 'json', false, 'json', request);
}

model ListMembersRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  memberName?: string(name='MemberName', description='The member name. Fuzzy match is supported.', example='zhangsan', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the workspace list. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Query'),
  roles?: string(name='Roles', description='The roles that are used to filter members. Multiple roles are separated by commas (,). Valid values:

*   PAI.AlgoDeveloper: algorithm developer
*   PAI.AlgoOperator: algorithm O\\&M engineer
*   PAI.LabelManager: labeling administrator
*   PAI.MaxComputeDeveloper: MaxCompute developer
*   PAI.WorkspaceAdmin: administrator
*   PAI.WorkspaceGuest: guest
*   PAI.WorkspaceOwner: owner', example='PAI.AlgoDeveloper', position='Query'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      accountName?: string(name='AccountName'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='myDisplayName'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the user is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
      memberId?: string(name='MemberId', description='The member ID.', example='14588*****51688039'),
      memberName?: string(name='MemberName', description='The username.', example='user1'),
      roles?: [ string ](name='Roles', description='The list of roles.'),
      userId?: string(name='UserId', description='The user ID.', example='215139******88039'),
    }
  ](name='Members', description='The members.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The number of members that meet the filter conditions.', example='1'),
}

model ListMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMembers  ListMembersRequest
  * @return ListMembersResponse
 */
async function listMembers(request: ListMembersRequest): ListMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMembers', 'GET', '/api/v1/workspaces/{WorkspaceId}/members', 'json', false, 'json', request);
}

model ListModelVersionsRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-dajbueh******', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', description='The approval status based on which the model versions are queried. Valid values:

*   Pending
*   Approved
*   Rejected', example='Approved', position='Query'),
  formatType?: string(name='FormatType', description='The model format used to filter model versions. Valid values:

*   OfflineModel
*   SavedModel
*   Keras H5
*   Frozen Pb
*   Caffe Prototxt
*   TorchScript
*   XGBoost
*   PMML
*   AlinkModel
*   ONNX', example='SavedModel', position='Query'),
  frameworkType?: string(name='FrameworkType', description='The framework used to filter model versions.

*   Pytorch -XGBoost
*   Keras
*   Caffe
*   Alink
*   Xflow
*   TensorFlow', example='TensorFlow', position='Query'),
  label?: string(name='Label', description='The label. Model versions whose label key or label value contains a specific label are filtered.', example='key1', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. Default value: ASC.

*   ASC
*   DESC', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The field used to sort the results. The GmtCreateTime field is used for sorting.', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', description='The source ID.

*   If the source type is Custom, this field is not limited.
*   If the source type is PAIFlow or TrainingService, the format is:

<!---->

    region=<region_id>,workspaceId=<workspace_id>,kind=<kind>,id=<id>

Take note of the following parameters:

*   region is the region ID.
*   workspaceId is the ID of the workspace.
*   kind is the type. Valid values: PipelineRun (PAIFlow) and ServiceJob (training service).
*   id is a unique identifier.', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Query'),
  sourceType?: string(name='SourceType', description='The source type used to filter model versions. Valid values:

*   Custom (default)
*   PAIFlow
*   TrainingService', example='PAIFlow', position='Query'),
  versionName?: string(name='VersionName', description='The model version used to filter model versions.', example='1.0.1', position='Query'),
}

model ListModelVersionsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC***3C83E'),
  totalCount?: long(name='TotalCount', description='The total number of model versions.', example='15'),
  versions?: [
    ModelVersion
  ](name='Versions', description='The model versions.'),
}

model ListModelVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModelVersions  ListModelVersionsRequest
  * @return ListModelVersionsResponse
 */
async function listModelVersions(request: ListModelVersionsRequest): ListModelVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModelVersions', 'GET', '/api/v1/models/{ModelId}/versions', 'json', false, 'json', request);
}

model ListModelsRequest {
  collections?: string(name='Collections', description='The collection where the model is located. You can specify multiple collections and separate them with commas (,).', example='AI4D,QuickStart', position='Query'),
  domain?: string(name='Domain', description='The domain. Only models in the domain are returned. Valid values: nlp (Natural Language Processing) and cv (Computer Vision).', example='nlp', position='Query'),
  label?: string(name='Label', description='The label. Models whose label key or label value contains a specific label are filtered.', example='key1', position='Query'),
  modelName?: string(name='ModelName', description='The model name used to filter the returned models.', position='Query'),
  modelType?: string(name='ModelType', description='The model type.', example='Endpoint', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. Default value: ASC.

*   ASC
*   DESC', example='DESC', position='Query'),
  origin?: string(name='Origin', description='The model source used to filter the models that belong to a community or organization, such as ModelScope and Hugging Face.', example='ModelScope', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  provider?: string(name='Provider', description='The provider. If you configure this parameter, only the models exposed by the provider are returned. If you leave this parameter empty, only models owned by the user are returned.', example='pai', position='Query'),
  query?: string(name='Query', description='The query condition. For example, if you set the value to nlp, all models that match ModelName, Domain, Task, LabelKey, and LabelValue are returned.', example='nlp', position='Query'),
  sortBy?: string(name='SortBy', description='The field used to sort the results. The GmtCreateTime field is used for sorting.', example='GmtCreateTime', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tags of the model.', shrink='json', position='Query'),
  task?: string(name='Task', description='The task used to filter the models that belong to the task type. Example: text-classification.', example='text-classification', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. Only models in this workspace are queried. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='324**', position='Query'),
}

model ListModelsResponseBody = {
  models?: [
    Model
  ](name='Models', description='The models.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', description='The total number of models.', example='15'),
}

model ListModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModels  ListModelsRequest
  * @return ListModelsResponse
 */
async function listModels(request: ListModelsRequest): ListModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModels', 'GET', '/api/v1/models', 'json', false, 'json', request);
}

model ListPermissionsRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', description='The permission name, which is unique in a region. For more information about permissions, see [Appendix: Roles and permissions](https://help.aliyun.com/document_detail/2840449.html). The example value PaiDLC:GetTensorboard indicates the permission to view details about a TensorBoard job on the Deep Learning Containers (DLC) page.', example='PaiDLC:GetTensorboard'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', description='The accessibility of the permission rule. Valid values:

*   PUBLIC: All members in the workspace can access the permission rule.
*   PRIVATE: Only the creator can access the permission rule.
*   ANY: All users can access the permission rule.', example='PRIVATE'),
          entityAccessType?: string(name='EntityAccessType', description='The type of access. If you set Accessibility to PUBLIC, all users can access the workspace. This parameter is invalid. If you set Accessibility to PRIVATE, the permissions are determined based on the value of EntityAccessType. The value of EntityAccessType can be:

*   CREATOR: Only the creator can access the workspace.
*   ANY: All users can access the workspace.', example='CREATOR'),
        }
      ](name='PermissionRules', description='The permission rules.'),
    }
  ](name='Permissions', description='The permissions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2AE63638-5420-56DC-B******8174039A0'),
  totalCount?: long(name='TotalCount', description='The number of permissions that meet the filter conditions.', example='1'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPermissions  ListPermissionsRequest
  * @return ListPermissionsResponse
 */
async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPermissions', 'GET', '/api/v1/workspaces/{WorkspaceId}/permissions', 'json', false, 'json', request);
}

model ListProductsRequest {
  productCodes?: string(name='ProductCodes', example='PAI_isolate', position='Query'),
  serviceCodes?: string(name='ServiceCodes', example='oss', position='Query'),
  verbose?: boolean(name='Verbose', position='Query'),
}

model ListProductsResponseBody = {
  products?: [ 
    {
      hasPermissionToPurchase?: boolean(name='HasPermissionToPurchase'),
      isPurchased?: boolean(name='IsPurchased', example='true'),
      productCode?: string(name='ProductCode', example='DataWorks_isolate'),
      productInstanceId?: string(name='ProductInstanceId'),
      purchaseUrl?: string(name='PurchaseUrl', example='https://common-buy.aliy'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  services?: [ 
    {
      isOpen?: boolean(name='IsOpen', example='true'),
      openUrl?: string(name='OpenUrl'),
      serviceCode?: string(name='ServiceCode', example='oss'),
    }
  ](name='Services'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/api/v1/products', 'json', false, 'json', request);
}

model ListQuotasRequest {
  name?: string(name='Name', description='The quota name. Fuzzy search is supported.', example='quota-name', position='Query'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      displayName?: string(name='DisplayName', description='The alias of the quota.'),
      id?: string(name='Id', description='The quota ID.', example='1828233'),
      mode?: string(name='Mode', description='The billing method. Valid values:

*   isolate: subscription
*   share: pay-as-you-go', example='isolate'),
      name?: string(name='Name', description='The quota name.', example='quota-name'),
      productCode?: string(name='ProductCode', description='The product code. Valid values:

*   PAI_isolate: CPU subscription resource groups of PAI
*   PAI_share: GPU pay-as-you-go resource groups of PAI', example='MaxCompute_share'),
      quotaType?: string(name='QuotaType', description='The quota type. Valid value:

PAI: indicates GPU resource groups of MaxCompute.', example='MaxCompute'),
      specs?: [ 
        {
          name?: string(name='Name', description='The specification name.', example='cu'),
          type?: string(name='Type', description='The specification type. The parameter can be left empty.', example='string'),
          value?: string(name='Value', description='The specification value.', example='11500'),
        }
      ](name='Specs', description='The quota specifications.', example='{\\"cu\\":\\"11500\\",\\"minCu\\":\\"2300\\",\\"parentId\\":\\"0\\"}'),
    }
  ](name='Quotas', description='The returned quotas.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The number of quotas that meet the filter conditions.', example='1'),
}

model ListQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQuotas  ListQuotasRequest
  * @return ListQuotasResponse
 */
async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotas', 'GET', '/api/v1/quotas', 'json', false, 'json', request);
}

model ListResourcesRequest {
  groupName?: string(name='GroupName', description='The name of the resource group. You can call [ListResources](https://help.aliyun.com/document_detail/449143.html) to obtain the name of the resource group.', example='group', position='Query'),
  labels?: string(name='Labels', description='Tag-based filter conditions. Multiple conditions are separated by commas (,). Only resources that meet all the specified tag-based filter conditions are returned.

This parameter is available only for resources whose ProductType is ACS.', example='system.supported.dsw=true,system.supported.dlc=true', position='Query'),
  option?: string(name='Option', description='The operation to perform. Valid values:

*   ListResourceByWorkspace: obtains the resources in the workspace. This is the default value.
*   ListResource: obtains the resources of the user.', example='ListResourceByWorkspace', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. The pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Query'),
  productTypes?: string(name='ProductTypes', description='**This field is no longer used and will be removed. Use the ResourceType field instead.', example='MaxCompute', position='Query'),
  quotaIds?: string(name='QuotaIds', description='The quota IDs, which are separated by commas (,). Only resources that contain all the specified quotas are returned.

>  This parameter is available only for resources whose ResourceTypes is ACS.', example='quota-k******da,quota-cd******w', position='Query'),
  resourceName?: string(name='ResourceName', description='The resource name. The value must meet the following requirements:

*   The name must be 3 to 28 characters in length.
*   The name is unique in the region.', example='resource', position='Query'),
  resourceTypes?: string(name='ResourceTypes', description='The resource types. Valid values:

*   MaxCompute
*   ECS
*   Lingjun
*   ACS
*   FLINK', example='MaxCompute', position='Query'),
  verbose?: boolean(name='Verbose', description='Specifies whether to show detailed information, which includes the Quotas field. Valid values:

*   true (default)
*   false', example='true', position='Query'),
  verboseFields?: string(name='VerboseFields', description='The fields to return. Multiple fields are separated by commas (,). Valid values:

*   Quota
*   Label
*   IsDefault', example='Quota,IsDefault', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

*   This parameter is required when the Option parameter is set to ListResourceByWorkspace.
*   You do not need to configure this parameter when the Option parameter is set to ListResource.', example='123', position='Query'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      encryption?: {
        algorithm?: string(name='Algorithm', description='The encryption algorithm.', example='AESCTR'),
        enabled?: boolean(name='Enabled', description='Indicates whether the resources are encrypted.', example='false'),
        key?: string(name='Key', description='The primary key for the encryption.', example='DEFAULT'),
      }(name='Encryption', description='The encryption information, which is valid only for MaxCompute resources.'),
      envType?: string(name='EnvType', description='The environment type. Valid values:

*   dev: development environment
*   prod: production environment', example='prod'),
      executor?: {
        ownerId?: string(name='OwnerId', description='This parameter is invalid and deprecated.', example='110973******7793'),
      }(name='Executor', description='This parameter is invalid and deprecated.'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the resource group is created, in UTC. The time follows the ISO 8601 standard.', example='2021-01-21T17:12:35.232Z'),
      groupName?: string(name='GroupName', description='The name of the resource group, which is unique within the Alibaba Cloud account.', example='groupName'),
      id?: string(name='Id', description='The resource ID.', example='123'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the resource is the default resource. Each type of resources has a default resource. Valid values:

*   true
*   false', example='true'),
      labels?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='system.supported.dsw'),
          value?: string(name='Value', description='The tag value.', example='true'),
        }
      ](name='Labels', description='The tags.'),
      name?: string(name='Name', description='The resource name.', example='ResourceName'),
      productType?: string(name='ProductType', description='**This field is no longer used and will be removed. Use the ResourceType field.', example='MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', description='The resource group type. Valid values:

*   CPU
*   GPU', example='cpu'),
          displayName?: string(name='DisplayName', description='The alias of the quota.'),
          id?: string(name='Id', description='The quota ID.', example='123'),
          mode?: string(name='Mode', description='The billing method. Valid values:

*   isolate: subscription
*   share: pay-as-you-go', example='develop'),
          name?: string(name='Name', description='The quota name.', example='QuotaName'),
          productCode?: string(name='ProductCode', description='The product code. Valid values:

*   PAI_isolate: CPU subscription resource groups of PAI
*   PAI_share: GPU pay-as-you-go resource groups of PAI
*   MaxCompute_share: pay-as-you-go resource groups of MaxCompute
*   MaxCompute_isolate: subscription resource groups of MaxCompute
*   DataWorks_isolate: subscription resource groups of DataWorks
*   DataWorks_share: pay-as-you-go resource groups of DataWorks
*   DLC_share: pay-as-you-go resource groups of Deep Learning Containers (DLC)', example='MaxCompute_isolate'),
          quotaType?: string(name='QuotaType', description='The quota type. Valid values:

*   PAI
*   MaxCompute
*   DLC', example='MaxCompute'),
          specs?: [ 
            {
              name?: string(name='Name', description='The specification name.', example='cu'),
              value?: string(name='Value', description='The specification description.', example='11500'),
            }
          ](name='Specs', description='The quota specifications.', example='{\\"cu\\":\\"11500\\",\\"minCu\\":\\"2300\\",\\"parentId\\":\\"0\\"}'),
        }
      ](name='Quotas', description='The quotas.'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   MaxCompute
*   DLC
*   FLINK', example='MaxCompute'),
      spec?: map[string]any(name='Spec', description='The resource specification.', example='对于MaxCompute {"Endpoint": "odps.alibaba-inc.com", "Project": "mignshi"}'),
      workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123'),
    }
  ](name='Resources', description='The resources.'),
  totalCount?: long(name='TotalCount', description='The number of resources that meet the filter conditions.', example='2'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v1/resources', 'json', false, 'json', request);
}

model ListRunMetricsRequest {
  runId: string(name='RunId', description='The run ID.

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  key: string(name='Key', description='The metric key of the run.

This parameter is required.', example='loss', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries in the request. Default value: 10.', example='100', position='Query'),
  pageToken?: long(name='PageToken', description='The pagination token, which starts from 0. Default value: 0.', example='0', position='Query'),
}

model ListRunMetricsResponseBody = {
  metrics?: [
    RunMetric
  ](name='Metrics', description='The metrics.'),
  nextPageToken?: long(name='NextPageToken', description='The pagination token that is used to retrieve the next page. You do not need to specify this parameter for the first request. You must specify the pagination token in the result of the previous query. If the pagination token is 0, no next page exists. You can obtain the pagination token that is used to retrieve the next page in the value of the **NextPageToken** field.', example='0'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRunMetrics  ListRunMetricsRequest
  * @return ListRunMetricsResponse
 */
async function listRunMetrics(request: ListRunMetricsRequest): ListRunMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRunMetrics', 'GET', '/api/v1/runs/{RunId}/metrics', 'json', false, 'json', request);
}

model ListRunsRequest {
  experimentId?: string(name='ExperimentId', description='The ID of the experiment that the run belongs.', example='exp-1zpfthdx******', position='Query'),
  gmtCreateTime?: string(name='GmtCreateTime', description='The time when the instance was created.', example='2021-01-30T12:51:33.028Z', position='Query'),
  labels?: string(name='Labels', description='The label. Exact match is supported. Valid values:

*   Single-label query: Set the value to is_evaluation.
*   Multi-label query (not recommended in non-special scenarios and may have performance issues): Set the value to is_evaluation:true,LLM_evaluation:true. Multiple labels are separated with commas (,), indicating that the key-value pairs of multiple labels must be matched at the same time.', example='is_evaluation:true', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries in the request. Default value: 10.', example='10', position='Query'),
  name?: string(name='Name', description='The run name.', example='myName', position='Query'),
  order?: string(name='Order', description='The order in which the entries are sorted by the specific field on the returned page. This parameter must be used together with SortBy.

*   ASC
*   DESC (default)', example='DESC', position='Query'),
  orderBy?: string(name='OrderBy', description='The strings by which the results are sorted. The following parameters can be used to sort the results: GmtCreateTime and Name. The sorting order can be ASC (default) and DESC. Separate multiple strings with commas (,).', example='GmtCreateTime DESC,Name ASC', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. The value must be greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  pageToken?: long(name='PageToken', description='The pagination token, which starts from 0. Default value: 0.', example='0', position='Query'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Valid values:

*   Name: the name of the run.
*   GmtCreateTime: the time when the run is created.', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', description='The ID of the workload associated with the run.', example='job-rbvg5wzlj****', position='Query'),
  sourceType?: string(name='SourceType', description='The type of the workload associated with the run.', example='TrainingService', position='Query'),
  verbose?: boolean(name='Verbose', description='Specifies whether to show detailed information, including Metrics, Params, and Labels. Valid values:

*   true
*   false (default)', example='true', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the experiment belongs. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

>  If you do not specify a workspace ID, the system returns the runs of the default workspace.', example='22840', position='Query'),
}

model ListRunsResponseBody = {
  nextPageToken?: long(name='NextPageToken', description='The pagination token that is used to retrieve the next page. You do not need to specify this parameter for the first request. You must specify the pagination token in the result of the previous query. If the pagination token is 0, no next page exists. You can obtain the pagination token that is used to retrieve the next page in the value of the **NextPageToken** field.', example='0'),
  runs?: [
    Run
  ](name='Runs', description='The runs.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. By default, this parameter is not returned.', example='1'),
  requestId?: string(name='requestId', description='The request ID.', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRuns  ListRunsRequest
  * @return ListRunsResponse
 */
async function listRuns(request: ListRunsRequest): ListRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuns', 'GET', '/api/v1/runs', 'json', false, 'json', request);
}

model ListUserConfigsRequest {
  categoryNames?: string(name='CategoryNames', description='The category. Currently, only DataPrivacyConfig is supported.', example='DataPrivacyConfig', position='Query'),
  configKeys?: string(name='ConfigKeys', description='The configuration item keys. Currently, only customizePAIAssumedRole is supported.', example='customizePAIAssumedRole', position='Query'),
}

model ListUserConfigsResponseBody = {
  configs?: [ 
    {
      categoryName?: string(name='CategoryName', description='The category. Currently, only DataPrivacyConfig is supported.', example='DataPrivacyConfig'),
      configKey?: string(name='ConfigKey', description='The key of the configuration item.', example='customizePAIAssumedRole'),
      configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='role'),
      scope?: string(name='Scope', description='The scope. Currently, subUser and owner are supported.', example='subUser'),
    }
  ](name='Configs', description='The configurations list.'),
  requestId?: string(name='RequestId', description='The request ID.', example='sdjksdk-******-dsfds'),
  totalCount?: long(name='TotalCount', description='The number of items returned.', example='15'),
}

model ListUserConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserConfigs  ListUserConfigsRequest
  * @return ListUserConfigsResponse
 */
async function listUserConfigs(request: ListUserConfigsRequest): ListUserConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserConfigs', 'GET', '/api/v1/userconfigs', 'json', false, 'json', request);
}

model ListWorkspaceUsersRequest {
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='12345', position='Path'),
  userName?: string(name='UserName', description='The display names of users who can be added to the workspace as members.', example='doctest****', position='Query'),
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1e195c5116124202371861018d5bde'),
  totalCount?: long(name='TotalCount', description='The number of users who meet the filter conditions.', example='2'),
  users?: [ 
    {
      userId?: string(name='UserId', description='The user ID.', example='1611******3000'),
      userName?: string(name='UserName', description='The username.', example='she******mo'),
    }
  ](name='Users', description='The users.'),
}

model ListWorkspaceUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaceUsers  ListWorkspaceUsersRequest
  * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsers(request: ListWorkspaceUsersRequest): ListWorkspaceUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaceUsers', 'GET', '/api/v1/workspaces/{WorkspaceId}/users', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields', description='The list of returned fields of workspace details. Used to limit the fields in the returned results. Separate multiple fields with commas (,). Currently, only Id is supported, which is the workspace ID.', example='Id', position='Query'),
  moduleList?: string(name='ModuleList', description='The modules, separated by commas (,). Default value: PAI.', example='PAI', position='Query'),
  option?: string(name='Option', description='The query options. Valid values:

*   GetWorkspaces (default): Obtains a list of Workspaces.
*   GetResourceLimits: Obtains a list of ResourceLimits.', example='GetWorkspaces', position='Query'),
  order?: string(name='Order', description='The order of results (ascending or descending). Valid values:

*   ASC: ascending order. This is the default value.
*   DESC: descending order.', example='ASC', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the workspace list. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. To obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).', example='rg-acfmwp7rky****', position='Query'),
  sortBy?: string(name='SortBy', description='Specifies how to sort the results. Default value: GmtCreateTime. Valid values:

*   GmtCreateTime: Sort by the time when created.
*   GmtModifiedTime: Sort by the time when modified.', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', description='The workspace status. Valid values:

*   ENABLED
*   INITIALIZING
*   FAILURE
*   DISABLED
*   FROZEN
*   UPDATING', example='ENABLED', position='Query'),
  verbose?: boolean(name='Verbose', description='Specifies whether to display workspace details. Valid values:

*   false (default)
*   true', example='true', position='Query'),
  workspaceIds?: string(name='WorkspaceIds', description='The workspace IDs. Separate multiple IDs by commas (,).', example='123,234', position='Query'),
  workspaceName?: string(name='WorkspaceName', description='The name of the workspace.', example='abc', position='Query'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  resourceLimits?: map[string]any(name='ResourceLimits', description='The type and quantity of resources that can be activated in a workspace. This list is returned when the Option is set to GetResourceLimits. Valid values:

*   MaxCompute_share: pay-as-you-go MaxCompute
*   MaxCompute_isolate: subscription MaxCompute
*   DLC_share: pay-as-you-go DLC
*   PAI_Isolate: subscription PAI
*   PAI_share: pay-as-you-go PAI
*   DataWorks_isolate: subscription DataWorks
*   DataWorks_share: pay-as-you-go DataWorks', example='{
   "MaxCompute_share": 1,
   "MaxCompute_isolate": 1,
   "DLC_share": 1
}'),
  totalCount?: long(name='TotalCount', description='The number of workspaces that meet the query conditions.', example='1'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames', description='The names of the administrator accounts.'),
      creator?: string(name='Creator', description='The user ID of the creator.', example='122424353535'),
      description?: string(name='Description', description='The description of the workspace.', example='workspace description example'),
      envTypes?: [ string ](name='EnvTypes', description='The environment types of the workspace.'),
      extraInfos?: map[string]any(name='ExtraInfos', description='the additional information. Only contains TenantId.', example='{"TenantId": "4286******98"}'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The time when the workspace was created. The time (UTC+0) follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ss.SSSZ format.', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='The time when the workspace was modified. The time (UTC+0) follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ss.SSSZ format.', example='2021-01-21T17:12:35.232Z'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the workspace is the default workspace.', example='false'),
      status?: string(name='Status', description='The status of the workspace.', example='ENABLED'),
      workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123'),
      workspaceName?: string(name='WorkspaceName', description='The name of the workspace.', example='workspace-example'),
      resourceGroupId?: string(name='resourceGroupId', description='The resource group ID.', example='rg-acfmwp7rky****'),
    }
  ](name='Workspaces', description='The list of workspace details. This list is returned when Option is set to GetWorkspaces.'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
  * @description You can use the option parameter to specify query options, so as to obtain different information about the workspaces.
  * @param request  the request parameters of ListWorkspaces  ListWorkspacesRequest
  * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkspaces', 'GET', '/api/v1/workspaces', 'json', false, 'json', request);
}

model LogRunMetricsRequest {
  runId: string(name='RunId', description='The run ID.

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  metrics?: [
    RunMetric
  ](name='Metrics', description='The metrics.', position='Body'),
}

model LogRunMetricsResponseBody = {
  requestId?: string(name='requestId', description='The ID of the request.', example='ADF6D849-*****-7E7030F0CE53'),
}

model LogRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogRunMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LogRunMetrics  LogRunMetricsRequest
  * @return LogRunMetricsResponse
 */
async function logRunMetrics(request: LogRunMetricsRequest): LogRunMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LogRunMetrics', 'POST', '/api/v1/runs/{RunId}/metrics/action/log', 'json', false, 'json', request);
}

model PublishCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='The ID of the code source to be published. You can call [ListCodeSources](https://help.aliyun.com/document_detail/459922.html) to query the code source ID.

This parameter is required.', example='code-a797*******', position='Path'),
}

model PublishCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='The ID of the code source that is successfully published.', example='code-a797*******'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model PublishCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishCodeSource  PublishCodeSourceRequest
  * @return PublishCodeSourceResponse
 */
async function publishCodeSource(request: PublishCodeSourceRequest): PublishCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishCodeSource', 'PUT', '/api/v1/codesources/{CodeSourceId}/publish', 'json', false, 'json', request);
}

model PublishDatasetRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5w****c9ks92', position='Path'),
}

model PublishDatasetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishDataset  PublishDatasetRequest
  * @return PublishDatasetResponse
 */
async function publishDataset(request: PublishDatasetRequest): PublishDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishDataset', 'PUT', '/api/v1/datasets/{DatasetId}/publish', 'json', false, 'json', request);
}

model PublishImageRequest {
  imageId: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.

This parameter is required.', example='image-dk******fa', position='Path'),
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='image-dk******fa'),
  requestId?: string(name='RequestId', description='The request ID.', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishImage  PublishImageRequest
  * @return PublishImageResponse
 */
async function publishImage(request: PublishImageRequest): PublishImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishImage', 'PUT', '/api/v1/images/{ImageId}/publish', 'json', false, 'json', request);
}

model RemoveImageRequest {
  imageId: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.

This parameter is required.', example='image-rbv******c9ks92', position='Path'),
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveImage  RemoveImageRequest
  * @return RemoveImageResponse
 */
async function removeImage(request: RemoveImageRequest): RemoveImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveImage', 'DELETE', '/api/v1/images/{ImageId}', 'json', false, 'json', request);
}

model RemoveImageLabelsRequest {
  imageId: string(name='ImageId', description='The image ID. You can call [ListImages](https://help.aliyun.com/document_detail/449118.html) to obtain the image ID.

This parameter is required.', example='image-d8df******dsjfd', position='Path'),
  labelKey: string(name='LabelKey', description='The tag key.

This parameter is required.', example='key1', position='Path'),
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveImageLabels  RemoveImageLabelsRequest
  * @return RemoveImageLabelsResponse
 */
async function removeImageLabels(request: RemoveImageLabelsRequest): RemoveImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveImageLabels', 'DELETE', '/api/v1/images/{ImageId}/labels/{LabelKey}', 'json', false, 'json', request);
}

model RemoveMemberRoleRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='145883', position='Path'),
  memberId: string(name='MemberId', description='The member ID. You can call [ListMembers](https://help.aliyun.com/document_detail/449135.html) to obtain the member ID.

This parameter is required.', example='145883-21513926******88039', position='Path'),
  roleName: string(name='RoleName', description='The role name. For more information about the mappings between role names and permissions, see [Appendix: Roles and permissions](https://help.aliyun.com/document_detail/2840449.html). Valid values:

*   PAI.AlgoDeveloper: algorithm developer
*   PAI.AlgoOperator: algorithm O\\&M engineer
*   PAI.LabelManager: labeling administrator
*   PAI.MaxComputeDeveloper: MaxCompute developer
*   PAI.WorkspaceAdmin: administrator
*   PAI.WorkspaceGuest: guest
*   PAI.WorkspaceOwner: owner

This parameter is required.', example='PAI.AlgoDeveloper', position='Path'),
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMemberRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveMemberRole  RemoveMemberRoleRequest
  * @return RemoveMemberRoleResponse
 */
async function removeMemberRole(request: RemoveMemberRoleRequest): RemoveMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveMemberRole', 'DELETE', '/api/v1/workspaces/{WorkspaceId}/members/{MemberId}/roles/{RoleName}', 'json', false, 'json', request);
}

model SetExperimentLabelsRequest {
  experimentId: string(name='ExperimentId', description='The experiment ID.

This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  labels?: [
    LabelInfo
  ](name='Labels', description='The tags.', position='Body'),
}

model SetExperimentLabelsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model SetExperimentLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetExperimentLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetExperimentLabels  SetExperimentLabelsRequest
  * @return SetExperimentLabelsResponse
 */
async function setExperimentLabels(request: SetExperimentLabelsRequest): SetExperimentLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetExperimentLabels', 'POST', '/api/v1/experiments/{ExperimentId}/labels', 'json', false, 'json', request);
}

model SetUserConfigsRequest {
  configs?: [ 
    {
      categoryName?: string(name='CategoryName', description='The category. Currently, only DataPrivacyConfig is supported.', example='DataPrivacyConfig'),
      configKey?: string(name='ConfigKey', description='The key of the configuration item.', example='customizePAIAssumedRole'),
      configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='role'),
      scope?: string(name='Scope', description='The scope. Currently, subUser and owner are supported.', example='owner'),
    }
  ](name='Configs', description='The configurations list.', position='Body'),
}

model SetUserConfigsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='dsjk****dfjksdf'),
}

model SetUserConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetUserConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetUserConfigs  SetUserConfigsRequest
  * @return SetUserConfigsResponse
 */
async function setUserConfigs(request: SetUserConfigsRequest): SetUserConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetUserConfigs', 'PUT', '/api/v1/userconfigs', 'json', false, 'json', request);
}

model StopDatasetJobRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='The ID of the dataset job.

This parameter is required.', example='dsjob-9jx1*****uj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='478**', position='Body'),
}

model StopDatasetJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F620FFD3-FFDC-5873-A70C-6971CC45F467'),
}

model StopDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDatasetJob  StopDatasetJobRequest
  * @return StopDatasetJobResponse
 */
async function stopDatasetJob(request: StopDatasetJobRequest): StopDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopDatasetJob', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}/action/stop', 'json', false, 'json', request);
}

model UpdateCodeSourceRequest {
  codeSourceId: string(name='CodeSourceId', description='The ID of the code build. You can call CreateCodeSource, GetCodeSource, or ListCodeSources to obtain the ID of the code build.

This parameter is required.', example='code-202**********', position='Path'),
  codeBranch?: string(name='CodeBranch', description='The name of the code branch.', example='dev', position='Body'),
  codeCommit?: string(name='CodeCommit', description='The code commit ID.', example='3a6*****', position='Body'),
  codeRepo?: string(name='CodeRepo', description='The address of the code repository.', example='https://code.aliyun.com/******', position='Body'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='The access token corresponding to the username.', example='***', position='Body'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='The username used to access the code repository.', example='demo-user', position='Body'),
  description?: string(name='Description', description='The description of the code build.', position='Body'),
  displayName?: string(name='DisplayName', description='The name of the code build.', example='MyCodeSource1', position='Body'),
  mountPath?: string(name='MountPath', description='The default mount path.', example='/root/code/code-source-1', position='Body'),
}

model UpdateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='The ID of the code build.', example='code-20********'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCodeSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCodeSource  UpdateCodeSourceRequest
  * @return UpdateCodeSourceResponse
 */
async function updateCodeSource(request: UpdateCodeSourceRequest): UpdateCodeSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCodeSource', 'PUT', '/api/v1/codesources/{CodeSourceId}', 'json', false, 'json', request);
}

model UpdateConfigRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='1234******2', position='Path'),
  categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle
*   DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig', position='Body'),
  configKey?: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempStoragePath', position='Body'),
  configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='oss://***', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key1'),
      value?: string(name='Value', description='The value of the tag.', example='value1'),
    }
  ](name='Labels', description='The tags of the configuration item.', position='Body'),
}

model UpdateConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A******C83E'),
}

model UpdateConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateConfig  UpdateConfigRequest
  * @return UpdateConfigResponse
 */
async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfig', 'PUT', '/api/v1/workspaces/{WorkspaceId}/config', 'json', false, 'json', request);
}

model UpdateConfigsRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='83***', position='Path'),
  configs?: [ 
    {
      categoryName?: string(name='CategoryName', description='The category of the configuration item. Supported categories:

*   CommonResourceConfig
*   DLCAutoRecycle
*   DLCPriorityConfig
*   DSWPriorityConfig
*   QuotaMaximumDuration', example='CommonResourceConfig'),
      configKey?: string(name='ConfigKey', description='The key of the configuration item. Supported keys:

*   tempStoragePath: Temporary storage path. This key can be used only when CategoryName is set to CommonResourceConfig.
*   isAutoRecycle: Automatic recycle configuration. This key can be used only when CategoryName is set to DLCAutoRecycle.
*   priorityConfig: Priority configuration. This key can be used only when CategoryName is set to DLCPriorityConfig or DSWPriorityConfig.
*   quotaMaximumDuration Maximum run time of DLC jobs for a quota. This key can be used only when CategoryName is set to QuotaMaximumDuration.', example='tempStoragePath'),
      configValue?: string(name='ConfigValue', description='The value of the configuration item.', example='oss://test/s/'),
      labels?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='key1'),
          value?: string(name='Value', description='The value of the tag.', example='value1'),
        }
      ](name='Labels', description='The tags of the configuration item.'),
    }
  ](name='Configs', description='The list of workspace configurations to update or add.', position='Body'),
}

model UpdateConfigsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A******C83E'),
}

model UpdateConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateConfigs  UpdateConfigsRequest
  * @return UpdateConfigsResponse
 */
async function updateConfigs(request: UpdateConfigsRequest): UpdateConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfigs', 'PUT', '/api/v1/workspaces/{WorkspaceId}/configs', 'json', false, 'json', request);
}

model UpdateDatasetRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5wz****c9ks92', position='Path'),
  description?: string(name='Description', description='The description of the dataset.', position='Body'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList', description='The list of role names in the workspace that have read and write permissions on the mounted database. The names start with PAI are basic role names and the names start with role- are custom role names. If the list contains asterisks (\\*), all roles have read and write permissions.

*   If you set the value to ["PAI.AlgoOperator", "role-hiuwpd01ncrokkgp21"], the account of the specified role is granted the read and write permissions.
*   If you set the value to ["\\*"], all accounts are granted the read and write permissions.
*   If you set the value to [], only the creator of the dataset has the read and write permissions.', position='Body'),
  name?: string(name='Name', description='The dataset name. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset name.', example='myName', position='Body'),
  options?: string(name='Options', description='The extended field, which is a JSON string. When you use the dataset in Deep Learning Containers (DLC), you can configure the mountPath field to specify the default mount path of the dataset.', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataset  UpdateDatasetRequest
  * @return UpdateDatasetResponse
 */
async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDataset', 'PUT', '/api/v1/datasets/{DatasetId}', 'json', false, 'json', request);
}

model UpdateDatasetFileMetasRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-lfd60v0p****ujtsdx', position='Path'),
  datasetFileMetas: [
    DatasetFileMetaConentUpdate
  ](name='DatasetFileMetas', description='The metadata records to be updated for the dataset files.

This parameter is required.', position='Body'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version.', example='v1', position='Body'),
  tagJobId?: string(name='TagJobId', description='The ID of the tagging job that is associated with the metadata tag of the dataset file.', example='dsjob-hv0b1****u8taig3y', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the dataset belongs. To obtain the workspace ID, see [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html).', example='796**', position='Body'),
}

model UpdateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails', description='The metadata records that fail to be updated for the dataset files.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', description='Indicates whether the metadata records of all dataset files were updated. Valid values: true and false. If the value is false, view the failure details specified by FailedDetails.', example='true'),
}

model UpdateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetFileMetasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetFileMetas  UpdateDatasetFileMetasRequest
  * @return UpdateDatasetFileMetasResponse
 */
async function updateDatasetFileMetas(request: UpdateDatasetFileMetasRequest): UpdateDatasetFileMetasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetFileMetas', 'PUT', '/api/v1/datasets/{DatasetId}/datasetfilemetas', 'json', false, 'json', request);
}

model UpdateDatasetJobRequest {
  datasetId: string(name='DatasetId', description='The dataset ID. You can call [ListDatasets](https://help.aliyun.com/document_detail/457222.html) to obtain the dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobId: string(name='DatasetJobId', description='The dataset job ID.

This parameter is required.', example='dsjob-9jx1*****uj9e', position='Path'),
  datasetVersion?: string(name='DatasetVersion', description='The dataset version name.', example='v1', position='Body'),
  description?: string(name='Description', description='The dataset job description.', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='478**', position='Body'),
}

model UpdateDatasetJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetJob  UpdateDatasetJobRequest
  * @return UpdateDatasetJobResponse
 */
async function updateDatasetJob(request: UpdateDatasetJobRequest): UpdateDatasetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetJob', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobs/{DatasetJobId}', 'json', false, 'json', request);
}

model UpdateDatasetJobConfigRequest {
  datasetId: string(name='DatasetId', description='The dataset ID.

This parameter is required.', example='d-rbvg5*****jhc9ks92', position='Path'),
  datasetJobConfigId: string(name='DatasetJobConfigId', description='The configuration ID.

This parameter is required.', example='dscfg-xxxxxxxxxxxx', position='Path'),
  config?: string(name='Config', description='The configuration content. Formats:

*   MultimodalIntelligentTag

{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }

*   MultimodalSemanticIndex

{ "defaultModelId": "xxx" "defaultModelVersion":"1.0.0" }', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }', position='Body'),
  configType?: string(name='ConfigType', description='The configuration type.

*   MultimodalIntelligentTag
*   MultimodalSemanticIndex', example='MultimodalSemanticIndex', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='167497', position='Body'),
}

model UpdateDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model UpdateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetJobConfig  UpdateDatasetJobConfigRequest
  * @return UpdateDatasetJobConfigResponse
 */
async function updateDatasetJobConfig(request: UpdateDatasetJobConfigRequest): UpdateDatasetJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetJobConfig', 'PUT', '/api/v1/datasets/{DatasetId}/datasetjobconfigs/{DatasetJobConfigId}', 'json', false, 'json', request);
}

model UpdateDatasetVersionRequest {
  datasetId: string(name='DatasetId', description='This parameter is required.', example='d-rbvg5****jhc9ks92', position='Path'),
  versionName: string(name='VersionName', description='This parameter is required.', example='v1', position='Path'),
  dataCount?: long(name='DataCount', example='100', position='Body'),
  dataSize?: long(name='DataSize', example='100000', position='Body'),
  description?: string(name='Description', position='Body'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}', position='Body'),
}

model UpdateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetVersion  UpdateDatasetVersionRequest
  * @return UpdateDatasetVersionResponse
 */
async function updateDatasetVersion(request: UpdateDatasetVersionRequest): UpdateDatasetVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDatasetVersion', 'PUT', '/api/v1/datasets/{DatasetId}/versions/{VersionName}', 'json', false, 'json', request);
}

model UpdateDefaultWorkspaceRequest {
  workspaceId?: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.', example='12345', position='Body'),
}

model UpdateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='17915******4216'),
}

model UpdateDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDefaultWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDefaultWorkspace  UpdateDefaultWorkspaceRequest
  * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspace(request: UpdateDefaultWorkspaceRequest): UpdateDefaultWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDefaultWorkspace', 'PUT', '/api/v1/defaultWorkspaces', 'json', false, 'json', request);
}

model UpdateExperimentRequest {
  experimentId: string(name='ExperimentId', description='The experiment ID.

This parameter is required.', example='exp-1zpfthdx******', position='Path'),
  accessibility?: string(name='Accessibility', description='The accessibility of the experiment in the workspace. Valid values:

*   PRIVATE: The experiment is accessible only to you and the administrator of the workspace.
*   PUBLIC: The experiment is accessible to all users in the workspace.', example='PRIVATE', position='Body'),
  name?: string(name='Name', description='The experiment name. The name must meet the following requirements:

*   The name must start with a letter.
*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must be 1 to 63 characters in length.', example='myName', position='Body'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExperiment  UpdateExperimentRequest
  * @return UpdateExperimentResponse
 */
async function updateExperiment(request: UpdateExperimentRequest): UpdateExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExperiment', 'PUT', '/api/v1/experiments/{ExperimentId}', 'json', false, 'json', request);
}

model UpdateModelRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-rbvg5wz******ks92', position='Path'),
  accessibility?: string(name='Accessibility', description='The visibility of the model in the workspace. Valid values:

*   PRIVATE: The model is visible only to you and the administrator of the workspace.
*   PUBLIC: The model is visible to all users in the workspace.', example='PUBLIC', position='Body'),
  domain?: string(name='Domain', description='The domain. This parameter describes the domain in which the model is applied. Valid values: nlp (natural language processing) and cv (computer vision).', example='nlp', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', description='Other information about the model.', example='{
	"RatingCount": 2866,
	"Rating": 4.94,
	"FavoriteCount": 34992,
	"CommentCount": 754,
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/drea***w.png"],
	"TippedAmountCount": 32,
	"DownloadCount": 606056
}', position='Body'),
  modelDescription?: string(name='ModelDescription', description='The model description.', position='Body'),
  modelDoc?: string(name='ModelDoc', description='The documentation of the model.', example='https://*.md', position='Body'),
  modelName?: string(name='ModelName', description='The model name, which must be 1 to 127 characters in length.', position='Body'),
  modelType?: string(name='ModelType', description='The model type. Valid values: Checkpoint and LoRA.', example='Checkpoint', position='Body'),
  orderNumber?: long(name='OrderNumber', description='The sequence number of the model. This parameter can be used for custom sorting.', example='0', position='Body'),
  origin?: string(name='Origin', description='The source of the model. This parameter describes the community or organization to which the source model belongs. Valid values: ModelScope and HuggingFace.', example='ModelScope', position='Body'),
  task?: string(name='Task', description='The task. This parameter specifies the specific issue that the model resolves. Example: text-classification.', example='text-classification', position='Body'),
}

model UpdateModelResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model UpdateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModel  UpdateModelRequest
  * @return UpdateModelResponse
 */
async function updateModel(request: UpdateModelRequest): UpdateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModel', 'PUT', '/api/v1/models/{ModelId}', 'json', false, 'json', request);
}

model UpdateModelVersionRequest {
  modelId: string(name='ModelId', description='The model ID. You can call [ListModels](https://help.aliyun.com/document_detail/461944.html) to obtain the model ID.

This parameter is required.', example='model-dfs1****5c', position='Path'),
  versionName: string(name='VersionName', description='The model version.

This parameter is required.', example='0.1.0', position='Path'),
  approvalStatus?: string(name='ApprovalStatus', description='The approval status. Valid values:

*   Pending
*   Approved
*   Rejected', example='Approved', position='Body'),
  compressionSpec?: map[string]any(name='CompressionSpec', description='The compression configuration.', example='{}', position='Body'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', description='The evaluation configuration.', example='{}', position='Body'),
  extraInfo?: map[string]any(name='ExtraInfo', description='The additional information.', example='{
	"CoverUris": ["https://e***u.oss-cn-hangzhou.aliyuncs.com/st****017.preview.png"],
	"TrainedWords": ["albedo_overlord"]
}', position='Body'),
  inferenceSpec?: map[string]any(name='InferenceSpec', description='Describes how to apply to downstream inference services. For example, describes the processor and container of Elastic Algorithm Service (EAS). Example: `{ "processor": "tensorflow_gpu_1.12" }`.', example='{     "processor": "tensorflow_gpu_1.12" }', position='Body'),
  metrics?: map[string]any(name='Metrics', description='The model metrics. The length after serialization is limited to 8,192.', example='{
  "Results": [{
    "Dataset": {
      "DatasetId": "d-sdkjanksaklerhfd"
    },
    "Metrics": {
      "cer": 0.175
    }
  }, {
    "Dataset": {
      "Uri": "oss://xxxx/"
    },
    "Metrics": {
      "cer": 0.172
    }
  }]
}', position='Body'),
  options?: string(name='Options', description='The extended field, which is of the JsonString type.', example='{}', position='Body'),
  sourceId?: string(name='SourceId', description='The source ID.

*   If the source type is Custom, this field is not limited.
*   If the source type is PAIFlow or TrainingService, the format is:

<!---->

    region=<region_id>,workspaceId=<workspace_id>,kind=<kind>,id=<id>

Take note of the following parameters:

*   region is the region ID.
*   workspaceId is the ID of the workspace.
*   kind is the type. Valid values: PipelineRun (PAIFlow) and ServiceJob (training service).
*   id is a unique identifier.', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf', position='Body'),
  sourceType?: string(name='SourceType', description='The type of the model source. Valid values:

*   Custom (default)
*   PAIFlow
*   TrainingService', example='PAIFlow', position='Body'),
  trainingSpec?: map[string]any(name='TrainingSpec', description='The training configurations used for fine-tuning and incremental training.', example='{}', position='Body'),
  versionDescription?: string(name='VersionDescription', description='The model version description.', position='Body'),
}

model UpdateModelVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D5BFFEE3-6025-443F-8A03-02D61***C4B9'),
}

model UpdateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModelVersion  UpdateModelVersionRequest
  * @return UpdateModelVersionResponse
 */
async function updateModelVersion(request: UpdateModelVersionRequest): UpdateModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModelVersion', 'PUT', '/api/v1/models/{ModelId}/versions/{VersionName}', 'json', false, 'json', request);
}

model UpdateRunRequest {
  runId: string(name='RunId', description='The run ID.

This parameter is required.', example='run-1qJhzJ2YXgX****', position='Path'),
  labels?: [
    Label
  ](name='Labels', description='The labels.', position='Body'),
  name?: string(name='Name', description='The run name. The name must meet the following requirements:

*   The name must start with a letter.
*   The name can contain letters, digits, underscores (_), and hyphens (-).
*   The name must be 1 to 63 characters in length.', example='myName', position='Body'),
  params?: [
    RunParam
  ](name='Params', description='The parameters.', position='Body'),
}

model UpdateRunResponseBody = {
  requestId?: string(name='requestId', description='The request ID.', example='ADF6D849-*****-7E7030F0CE53'),
}

model UpdateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRun  UpdateRunRequest
  * @return UpdateRunResponse
 */
async function updateRun(request: UpdateRunRequest): UpdateRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRun', 'PUT', '/api/v1/runs/{RunId}', 'json', false, 'json', request);
}

model UpdateWorkspaceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  description?: string(name='Description', description='The workspace description.', example='Description', position='Body'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.

*   The name must be 3 to 23 characters in length, and can contain letters, underscores (_), and digits.
*   The name must start with a letter.
*   The name must be unique in the current region.', example='workspace-example', position='Body'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspace  UpdateWorkspaceRequest
  * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspace', 'PUT', '/api/v1/workspaces/{WorkspaceId}', 'json', false, 'json', request);
}

model UpdateWorkspaceResourceRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID. You can call [ListWorkspaces](https://help.aliyun.com/document_detail/449124.html) to obtain the workspace ID.

This parameter is required.', example='123', position='Path'),
  groupName?: string(name='GroupName', description='The group name.', example='group-kjds******sd', position='Body'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether the resource is the default resource. This parameter can only be set to true and cannot be set to false.', example='true', position='Body'),
  labels?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='system.******'),
      value?: string(name='Value', description='The tag value.', example='True'),
    }
  ](name='Labels', description='The resource tags. If you specify multiple tags, only resources that meet all the specified tag-based filter conditions are returned.', position='Body'),
  productType?: string(name='ProductType', description='**This field is no longer used and will be removed. Use the ResourceType field.', example='MaxCompute', position='Body'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs.

You cannot leave both GroupName and ResourceIds empty. If you specify both the parameters, the value of GroupName of each resource ID in the dataset must be the same.', position='Body'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   MaxCompute
*   ECS
*   Lingjun
*   ACS
*   FLINK', example='MaxCompute', position='Body'),
  spec?: map[string]any(name='Spec', description='The specification of the resource.', example='{
      "clusterType": "share"
}', position='Body'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds', description='The updated resource IDs.', example='Resource-dks******jkf'),
}

model UpdateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspaceResource  UpdateWorkspaceResourceRequest
  * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResource(request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkspaceResource', 'PUT', '/api/v1/workspaces/{WorkspaceId}/resources', 'json', false, 'json', request);
}

