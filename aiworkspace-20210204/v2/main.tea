/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiworkspace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user'),
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  mountPath?: string(name='MountPath', example='/root/code/'),
  userId?: string(name='UserId', example='1157290171663117'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model Collection {
  collectionName?: string(name='CollectionName', example='AI4D'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  userId?: string(name='UserId', example='155770209******'),
}

model Dataset {
  accessibility?: string(name='Accessibility', example='PRIVATE PUBLIC'),
  dataSourceType?: string(name='DataSourceType', example='OSS URL'),
  dataType?: string(name='DataType', example='COMMON PIC TEXT VIDEO AUDIO'),
  datasetId?: string(name='DatasetId', example='d-c0h44g3wlwkj8o4348'),
  description?: string(name='Description', example='Animal images.'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: DatasetVersion(name='LatestVersion'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='AnimalDataset'),
  options?: string(name='Options', example='jsonstring'),
  ownerId?: string(name='OwnerId', example='1004110000006048'),
  property?: string(name='Property', example='FILE DIRECTORY TABULAR'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceDatasetId?: string(name='SourceDatasetId', example='d-bvfasdf4wxxj8o411'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion', example='v2'),
  sourceId?: string(name='SourceId', example='Source Id'),
  sourceType?: string(name='SourceType', example='USER ITAG  PAI_PUBLIC_DATASET'),
  tagTemplateType?: string(name='TagTemplateType', example='text-classification'),
  uri?: string(name='Uri', example='oss://xxx'),
  userId?: string(name='UserId', example='2004110000006048'),
  workspaceId?: string(name='WorkspaceId', example='Workspace Id'),
}

model DatasetFileMeta {
  dataSize?: long(name='DataSize', example='12'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  downloadUrl?: string(name='DownloadUrl'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName', example='car.png'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  score?: float(name='Score', example='0.6'),
  tags?: string(name='Tags'),
  uri?: string(name='Uri', example='oss://test-bucket/dataset/car.png'),
}

model DatasetFileMetaConentUpdate {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId?: string(name='DatasetFileMetaId', description='This parameter is required.'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags', example='{"ai":["cat"], "user":["dog"]}'),
}

model DatasetFileMetaContentCreate {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType', description='This parameter is required.'),
  dataSize?: long(name='DataSize'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileFingerPrint?: string(name='FileFingerPrint', description='This parameter is required.'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType', description='This parameter is required.'),
  fileUpdateTime?: string(name='FileUpdateTime', description='This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags', example='{"user":["cat"]}'),
  uri?: string(name='Uri', description='This parameter is required.'),
}

model DatasetFileMetaContentGet {
  comment?: string(name='Comment'),
  contentType?: string(name='ContentType'),
  dataSize?: long(name='DataSize'),
  datasetFileMetaId?: string(name='DatasetFileMetaId'),
  fileCreateTime?: string(name='FileCreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  fileFingerPrint?: string(name='FileFingerPrint'),
  fileName?: string(name='FileName'),
  fileType?: string(name='FileType'),
  fileUpdateTime?: string(name='FileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2021-01-12T14:36:01Z'),
  metaAttributes?: string(name='MetaAttributes'),
  tags?: string(name='Tags'),
  uri?: string(name='Uri'),
}

model DatasetFileMetaResponse {
  datasetFileMetaId?: string(name='DatasetFileMetaId', description='This parameter is required.'),
  result?: string(name='Result', description='This parameter is required.'),
  uri?: string(name='Uri'),
}

model DatasetJob {
  completedFileCount?: long(name='CompletedFileCount'),
  createTime?: string(name='CreateTime'),
  datasetJobId?: string(name='DatasetJobId'),
  datasetVersion?: string(name='DatasetVersion'),
  description?: string(name='Description'),
  failedFileCount?: long(name='FailedFileCount'),
  finishTime?: string(name='FinishTime'),
  jobAction?: string(name='JobAction'),
  jobMode?: string(name='JobMode'),
  jobSpec?: string(name='JobSpec'),
  logs?: [ string ](name='Logs'),
  status?: string(name='Status'),
  totalFileCount?: long(name='TotalFileCount'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetJobConfig {
  config?: string(name='Config'),
  configType?: string(name='ConfigType'),
  createTime?: string(name='CreateTime'),
  datasetJobConfigId?: string(name='DatasetJobConfigId'),
  modifyTime?: string(name='ModifyTime'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetLabel {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model DatasetVersion {
  dataCount?: long(name='DataCount'),
  dataSize?: long(name='DataSize'),
  dataSourceType?: string(name='DataSourceType', example='OSS'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  mountAccess?: string(name='MountAccess', example='RO RW'),
  options?: string(name='Options'),
  property?: string(name='Property', example='FILE'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri', example='OSS://xxx'),
  versionName?: string(name='VersionName', example='v1'),
}

model Experiment {
  accessibility?: string(name='Accessibility'),
  artifactUri?: string(name='ArtifactUri'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    ExperimentLabel
  ](name='Labels'),
  latestRun?: Run(name='LatestRun'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  requestId?: string(name='RequestId'),
  tensorboardLogUri?: string(name='TensorboardLogUri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model ExperimentLabel {
  experimentId?: string(name='ExperimentId', example='exp-890waerw09a0f'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model Label {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model LabelInfo {
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model LineageEntity {
  attributes?: map[string]any(name='Attributes'),
  entityType?: string(name='EntityType'),
  name?: string(name='Name'),
  qualifiedName?: string(name='QualifiedName'),
}

model LineageRelation {
  destEntityQualifiedName?: string(name='DestEntityQualifiedName'),
  relationshipGuid?: string(name='RelationshipGuid'),
  srcEntityQualifiedName?: string(name='SrcEntityQualifiedName'),
}

model Model {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-1123*****'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1557702098******'),
  provider?: string(name='Provider', example='pai'),
  task?: string(name='Task', example='text-classifiaction'),
  userId?: string(name='UserId', example='1557702098******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model ModelVersion {
  approvalStatus?: string(name='ApprovalStatus'),
  compressionSpec?: map[string]any(name='CompressionSpec'),
  evaluationSpec?: map[string]any(name='EvaluationSpec'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trainingSpec?: map[string]any(name='TrainingSpec'),
  uri?: string(name='Uri', example='oss://bucket/path-to-model'),
  userId?: string(name='UserId', example='155770209******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='1.0.0'),
}

model Relation {
  errMsg?: string(name='ErrMsg'),
  lineageRelation?: LineageRelation(name='LineageRelation'),
  result?: boolean(name='Result'),
}

model Relationship {
  attributes?: map[string]any(name='Attributes'),
  dataChannel?: string(name='DataChannel'),
  relationshipGuid?: string(name='RelationshipGuid'),
  relationshipType?: string(name='RelationshipType'),
}

model Run {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    RunLabel
  ](name='Labels'),
  metrics?: [
    RunMetric
  ](name='Metrics'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  params?: [
    RunParam
  ](name='Params'),
  requestId?: string(name='RequestId'),
  runId?: string(name='RunId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model RunLabel {
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  key?: string(name='Key', description='This parameter is required.'),
  runId?: string(name='RunId'),
  value?: string(name='Value', description='This parameter is required.'),
}

model RunMetric {
  key?: string(name='Key', description='This parameter is required.'),
  step?: long(name='Step'),
  timestamp?: long(name='Timestamp'),
  value?: float(name='Value', description='This parameter is required.'),
}

model RunParam {
  key?: string(name='Key', description='This parameter is required.'),
  value?: string(name='Value', description='This parameter is required.'),
}

model Trial {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [  map[string]any ](name='Labels'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trialId?: string(name='TrialId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model TrialLabel {
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  trialId?: string(name='TrialId'),
  value?: string(name='Value', example='value'),
}

model AcceptDataworksEventRequest {
  data?: map[string]any(name='Data', example='{"eventCode":"d****ct","projectId":"8***6","tenantId":4*******8,"operator":"115*****901"}'),
  messageId?: string(name='MessageId', example='539306ba-*****-41a0-****-6dc81060985c'),
}

model AcceptDataworksEventResponseBody = {
  requestId?: string(name='requestId', example='ADF6D849-*****-7E7030F0CE53'),
}

model AcceptDataworksEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptDataworksEventResponseBody(name='body'),
}

/**
 * @summary 接受并处理Dataworks发送的事件
 *
 * @param request AcceptDataworksEventRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AcceptDataworksEventResponse
 */
async function acceptDataworksEventWithOptions(request: AcceptDataworksEventRequest, headers: map[string]string, runtime: $RuntimeOptions): AcceptDataworksEventResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.data)) {
    body['Data'] = request.data;
  }
  if (!$isNull(request.messageId)) {
    body['MessageId'] = request.messageId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AcceptDataworksEvent',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/action/acceptdataworksevent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 接受并处理Dataworks发送的事件
 *
 * @param request AcceptDataworksEventRequest
 * @return AcceptDataworksEventResponse
 */
async function acceptDataworksEvent(request: AcceptDataworksEventRequest): AcceptDataworksEventResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return acceptDataworksEventWithOptions(request, headers, runtime);
}

model AddImageRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  description?: string(name='Description'),
  imageId?: string(name='ImageId'),
  imageUri?: string(name='ImageUri', description='This parameter is required.', example='registry.cn-hangzhou.aliyuncs.com/pai-compression/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  name?: string(name='Name', description='This parameter is required.', example='nlp-compression'),
  size?: int32(name='Size'),
  workspaceId?: string(name='WorkspaceId', example='15******45'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', example='image-4c62******53uor'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

/**
 * @summary 增加 Image
 *
 * @param request AddImageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddImageResponse
 */
async function addImageWithOptions(request: AddImageRequest, headers: map[string]string, runtime: $RuntimeOptions): AddImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!$isNull(request.imageUri)) {
    body['ImageUri'] = request.imageUri;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.size)) {
    body['Size'] = request.size;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 增加 Image
 *
 * @param request AddImageRequest
 * @return AddImageResponse
 */
async function addImage(request: AddImageRequest): AddImageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageWithOptions(request, headers, runtime);
}

model AddImageLabelsRequest {
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels', description='This parameter is required.'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageLabelsResponseBody(name='body'),
}

/**
 * @summary 增加 Image 的标签
 *
 * @param request AddImageLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddImageLabelsResponse
 */
async function addImageLabelsWithOptions(ImageId: string, request: AddImageLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): AddImageLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${$URL.percentEncode(ImageId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 增加 Image 的标签
 *
 * @param request AddImageLabelsRequest
 * @return AddImageLabelsResponse
 */
async function addImageLabels(ImageId: string, request: AddImageLabelsRequest): AddImageLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageLabelsWithOptions(ImageId, request, headers, runtime);
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMemberRoleResponseBody(name='body'),
}

/**
 * @summary 增加成员角色
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMemberRoleResponse
 */
async function addMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: $RuntimeOptions): AddMemberRoleResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'AddMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/members/${$URL.percentEncode(MemberId)}/roles/${$URL.percentEncode(RoleName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 增加成员角色
 *
 * @return AddMemberRoleResponse
 */
async function addMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): AddMemberRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return addMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-df********534dy'),
  resourceId?: string(name='ResourceId', example='12**56'),
  resourceType?: string(name='ResourceType', example='workspace'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='requestId', example='6****27E-****-5144-A002-89C****8660F'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
 * @summary 更改资源组
 *
 * @param request ChangeResourceGroupRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, headers: map[string]string, runtime: $RuntimeOptions): ChangeResourceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.newResourceGroupId)) {
    body['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!$isNull(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ChangeResourceGroup',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/resourcegroups/action/changeresourcegroup`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更改资源组
 *
 * @param request ChangeResourceGroupRequest
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return changeResourceGroupWithOptions(request, headers, runtime);
}

model CreateCodeSourceRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/******'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='***'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='use***'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', description='This parameter is required.', example='MyCodeSource1'),
  mountPath?: string(name='MountPath', example='/root/code/code-source-1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='1234'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20********'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3**********'),
}

model CreateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCodeSourceResponseBody(name='body'),
}

/**
 * @summary 创建一个代码源配置
 *
 * @param request CreateCodeSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCodeSourceResponse
 */
async function createCodeSourceWithOptions(request: CreateCodeSourceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateCodeSourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.codeBranch)) {
    body['CodeBranch'] = request.codeBranch;
  }
  if (!$isNull(request.codeCommit)) {
    body['CodeCommit'] = request.codeCommit;
  }
  if (!$isNull(request.codeRepo)) {
    body['CodeRepo'] = request.codeRepo;
  }
  if (!$isNull(request.codeRepoAccessToken)) {
    body['CodeRepoAccessToken'] = request.codeRepoAccessToken;
  }
  if (!$isNull(request.codeRepoUserName)) {
    body['CodeRepoUserName'] = request.codeRepoUserName;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建一个代码源配置
 *
 * @param request CreateCodeSourceRequest
 * @return CreateCodeSourceResponse
 */
async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeSourceWithOptions(request, headers, runtime);
}

model CreateDatasetRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  dataCount?: long(name='DataCount'),
  dataSize?: long(name='DataSize'),
  dataSourceType?: string(name='DataSourceType', description='This parameter is required.', example='NAS'),
  dataType?: string(name='DataType', example='COMMON'),
  description?: string(name='Description'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', description='This parameter is required.', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  property?: string(name='Property', description='This parameter is required.', example='DIRECTORY'),
  provider?: string(name='Provider'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceDatasetId?: string(name='SourceDatasetId'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='USER'),
  uri?: string(name='Uri', description='This parameter is required.', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', example='29884000000186970'),
  versionDescription?: string(name='VersionDescription'),
  versionLabels?: [
    Label
  ](name='VersionLabels'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', example='d-rbvg5*****jhc9ks92'),
  requestId?: string(name='RequestId', example='B2C51F93-1C07-5477-9705-5FDB****F19F'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDatasetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetResponse
 */
async function createDatasetWithOptions(request: CreateDatasetRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.dataCount)) {
    body['DataCount'] = request.dataCount;
  }
  if (!$isNull(request.dataSize)) {
    body['DataSize'] = request.dataSize;
  }
  if (!$isNull(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.dataType)) {
    body['DataType'] = request.dataType;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.importInfo)) {
    body['ImportInfo'] = request.importInfo;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.mountAccessReadWriteRoleIdList)) {
    body['MountAccessReadWriteRoleIdList'] = request.mountAccessReadWriteRoleIdList;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }
  if (!$isNull(request.property)) {
    body['Property'] = request.property;
  }
  if (!$isNull(request.provider)) {
    body['Provider'] = request.provider;
  }
  if (!$isNull(request.providerType)) {
    body['ProviderType'] = request.providerType;
  }
  if (!$isNull(request.sourceDatasetId)) {
    body['SourceDatasetId'] = request.sourceDatasetId;
  }
  if (!$isNull(request.sourceDatasetVersion)) {
    body['SourceDatasetVersion'] = request.sourceDatasetVersion;
  }
  if (!$isNull(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  if (!$isNull(request.versionDescription)) {
    body['VersionDescription'] = request.versionDescription;
  }
  if (!$isNull(request.versionLabels)) {
    body['VersionLabels'] = request.versionLabels;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDatasetRequest
 * @return CreateDatasetResponse
 */
async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetWithOptions(request, headers, runtime);
}

model CreateDatasetFileMetasRequest {
  datasetFileMetas?: [
    DatasetFileMetaContentCreate
  ](name='DatasetFileMetas', description='This parameter is required.'),
  datasetVersion?: string(name='DatasetVersion', description='This parameter is required.', example='v1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='478**'),
}

model CreateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
  succeedDetails?: [
    DatasetFileMetaResponse
  ](name='SucceedDetails'),
}

model CreateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetFileMetasResponseBody(name='body'),
}

/**
 * @summary 批量创建数据集下的文件元数据记录
 *
 * @param request CreateDatasetFileMetasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetFileMetasResponse
 */
async function createDatasetFileMetasWithOptions(DatasetId: string, request: CreateDatasetFileMetasRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetFileMetasResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasetFileMetas)) {
    body['DatasetFileMetas'] = request.datasetFileMetas;
  }
  if (!$isNull(request.datasetVersion)) {
    body['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetFileMetas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetfilemetas`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 批量创建数据集下的文件元数据记录
 *
 * @param request CreateDatasetFileMetasRequest
 * @return CreateDatasetFileMetasResponse
 */
async function createDatasetFileMetas(DatasetId: string, request: CreateDatasetFileMetasRequest): CreateDatasetFileMetasResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetFileMetasWithOptions(DatasetId, request, headers, runtime);
}

model CreateDatasetJobRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  description?: string(name='Description'),
  jobAction?: string(name='JobAction', description='This parameter is required.', example='SemanticIndex'),
  jobMode?: string(name='JobMode', example='Full'),
  jobSpec?: string(name='JobSpec', description='This parameter is required.', example='{\\\\"modelId\\\\":\\\\"xxx\\\\"}'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='478**'),
}

model CreateDatasetJobResponseBody = {
  datasetJobId?: string(name='DatasetJobId', example='dsjob-9jx1******uj9e'),
  requestId?: string(name='RequestId', example='99341606-****-0757724D97EE'),
}

model CreateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobResponseBody(name='body'),
}

/**
 * @summary 创建数据集任务
 *
 * @param request CreateDatasetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetJobResponse
 */
async function createDatasetJobWithOptions(DatasetId: string, request: CreateDatasetJobRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetJobResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    body['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.jobAction)) {
    body['JobAction'] = request.jobAction;
  }
  if (!$isNull(request.jobMode)) {
    body['JobMode'] = request.jobMode;
  }
  if (!$isNull(request.jobSpec)) {
    body['JobSpec'] = request.jobSpec;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetJob',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据集任务
 *
 * @param request CreateDatasetJobRequest
 * @return CreateDatasetJobResponse
 */
async function createDatasetJob(DatasetId: string, request: CreateDatasetJobRequest): CreateDatasetJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetJobWithOptions(DatasetId, request, headers, runtime);
}

model CreateDatasetJobConfigRequest {
  config?: string(name='Config', description='This parameter is required.', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }'),
  configType?: string(name='ConfigType', description='This parameter is required.', example='MultimodalIntelligentTag'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='454716'),
}

model CreateDatasetJobConfigResponseBody = {
  datasetJobConfigId?: string(name='DatasetJobConfigId', example='dscfg-xxxxxxxxxxxxxx'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetJobConfigResponseBody(name='body'),
}

/**
 * @summary 创建数据集任务配置
 *
 * @param request CreateDatasetJobConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetJobConfigResponse
 */
async function createDatasetJobConfigWithOptions(DatasetId: string, request: CreateDatasetJobConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetJobConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.configType)) {
    body['ConfigType'] = request.configType;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetJobConfig',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobconfigs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据集任务配置
 *
 * @param request CreateDatasetJobConfigRequest
 * @return CreateDatasetJobConfigResponse
 */
async function createDatasetJobConfig(DatasetId: string, request: CreateDatasetJobConfigRequest): CreateDatasetJobConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetJobConfigWithOptions(DatasetId, request, headers, runtime);
}

model CreateDatasetLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='A083731B-4973-54D1-B324-E53****4DD44'),
}

model CreateDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新 Dataset 的标签
 *
 * @param request CreateDatasetLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabelsWithOptions(DatasetId: string, request: CreateDatasetLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建或更新 Dataset 的标签
 *
 * @param request CreateDatasetLabelsRequest
 * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabels(DatasetId: string, request: CreateDatasetLabelsRequest): CreateDatasetLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

model CreateDatasetVersionRequest {
  dataCount?: long(name='DataCount', example='300'),
  dataSize?: long(name='DataSize', example='19000'),
  dataSourceType?: string(name='DataSourceType', description='This parameter is required.', example='OSS'),
  description?: string(name='Description'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  property?: string(name='Property', description='This parameter is required.', example='DIRECTORY'),
  sourceId?: string(name='SourceId', example='d-a0xbe5n03bhqof46ce'),
  sourceType?: string(name='SourceType', example='USER'),
  uri?: string(name='Uri', description='This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/'),
}

model CreateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionName?: string(name='VersionName', example='v1'),
}

model CreateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionResponseBody(name='body'),
}

/**
 * @summary 创建数据集版本
 *
 * @param request CreateDatasetVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetVersionResponse
 */
async function createDatasetVersionWithOptions(DatasetId: string, request: CreateDatasetVersionRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataCount)) {
    body['DataCount'] = request.dataCount;
  }
  if (!$isNull(request.dataSize)) {
    body['DataSize'] = request.dataSize;
  }
  if (!$isNull(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.importInfo)) {
    body['ImportInfo'] = request.importInfo;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }
  if (!$isNull(request.property)) {
    body['Property'] = request.property;
  }
  if (!$isNull(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据集版本
 *
 * @param request CreateDatasetVersionRequest
 * @return CreateDatasetVersionResponse
 */
async function createDatasetVersion(DatasetId: string, request: CreateDatasetVersionRequest): CreateDatasetVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetVersionWithOptions(DatasetId, request, headers, runtime);
}

model CreateDatasetVersionLabelsRequest {
  labels?: [
    Label
  ](name='Labels', description='This parameter is required.'),
}

model CreateDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 创建数据集版本的标签
 *
 * @param request CreateDatasetVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetVersionLabelsResponse
 */
async function createDatasetVersionLabelsWithOptions(DatasetId: string, VersionName: string, request: CreateDatasetVersionLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatasetVersionLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatasetVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions/${$URL.percentEncode(VersionName)}/labels`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据集版本的标签
 *
 * @param request CreateDatasetVersionLabelsRequest
 * @return CreateDatasetVersionLabelsResponse
 */
async function createDatasetVersionLabels(DatasetId: string, VersionName: string, request: CreateDatasetVersionLabelsRequest): CreateDatasetVersionLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetVersionLabelsWithOptions(DatasetId, VersionName, request, headers, runtime);
}

model CreateExperimentRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  artifactUri?: string(name='ArtifactUri', description='Artifact的OSS存储路径', example='oss://test-bucket.oss-cn-hangzhou.aliyuncs.com/test'),
  labels?: [
    LabelInfo
  ](name='Labels', description='标签'),
  name?: string(name='Name', description='名称

This parameter is required.', example='exp-test'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID

This parameter is required.', example='478**'),
}

model CreateExperimentResponseBody = {
  experimentId?: string(name='ExperimentId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExperimentResponseBody(name='body'),
}

/**
 * @summary 创建实验
 *
 * @param request CreateExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateExperimentResponse
 */
async function createExperimentWithOptions(request: CreateExperimentRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateExperimentResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.artifactUri)) {
    body['ArtifactUri'] = request.artifactUri;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateExperiment',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建实验
 *
 * @param request CreateExperimentRequest
 * @return CreateExperimentResponse
 */
async function createExperiment(request: CreateExperimentRequest): CreateExperimentResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createExperimentWithOptions(request, headers, runtime);
}

model CreateMemberRequest {
  members?: [ 
    {
      roles?: [ string ](name='Roles', description='This parameter is required.'),
      userId?: string(name='UserId', description='This parameter is required.', example='21513926******88039'),
    }
  ](name='Members', description='This parameter is required.'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', example='myDisplayName'),
      memberId?: string(name='MemberId', example='145883-21513926******88039'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='21513926******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model CreateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemberResponseBody(name='body'),
}

/**
 * @summary 创建成员
 *
 * @param request CreateMemberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemberResponse
 */
async function createMemberWithOptions(WorkspaceId: string, request: CreateMemberRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateMemberResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.members)) {
    body['Members'] = request.members;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建成员
 *
 * @param request CreateMemberRequest
 * @return CreateMemberResponse
 */
async function createMember(WorkspaceId: string, request: CreateMemberRequest): CreateMemberResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemberWithOptions(WorkspaceId, request, headers, runtime);
}

model CreateModelRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  domain?: string(name='Domain', example='nlp'),
  extraInfo?: map[string]any(name='ExtraInfo', nullable=true),
  labels?: [
    Label
  ](name='Labels'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://*.md'),
  modelName?: string(name='ModelName', description='This parameter is required.'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  task?: string(name='Task', example='text-classification'),
  workspaceId?: string(name='WorkspaceId', example='796**'),
}

model CreateModelResponseBody = {
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  requestId?: string(name='RequestId', example='9DAD3112-AE22-5563-9A02-5C7E8****E35'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
 * @summary 创建模型
 *
 * @param request CreateModelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelResponse
 */
async function createModelWithOptions(request: CreateModelRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateModelResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!$isNull(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.modelDescription)) {
    body['ModelDescription'] = request.modelDescription;
  }
  if (!$isNull(request.modelDoc)) {
    body['ModelDoc'] = request.modelDoc;
  }
  if (!$isNull(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!$isNull(request.modelType)) {
    body['ModelType'] = request.modelType;
  }
  if (!$isNull(request.orderNumber)) {
    body['OrderNumber'] = request.orderNumber;
  }
  if (!$isNull(request.origin)) {
    body['Origin'] = request.origin;
  }
  if (!$isNull(request.task)) {
    body['Task'] = request.task;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建模型
 *
 * @param request CreateModelRequest
 * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelWithOptions(request, headers, runtime);
}

model CreateModelLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='F81D9EC0-1872-50F5-A96C-A0647D****1D'),
}

model CreateModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新模型的标签
 *
 * @param request CreateModelLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelLabelsResponse
 */
async function createModelLabelsWithOptions(ModelId: string, request: CreateModelLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateModelLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModelLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建或更新模型的标签
 *
 * @param request CreateModelLabelsRequest
 * @return CreateModelLabelsResponse
 */
async function createModelLabels(ModelId: string, request: CreateModelLabelsRequest): CreateModelLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelLabelsWithOptions(ModelId, request, headers, runtime);
}

model CreateModelVersionRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  uri?: string(name='Uri', description='This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model CreateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='21645FCD-BAB9-5742-89AE-AEB27****B2E'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model CreateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionResponseBody(name='body'),
}

/**
 * @summary 创建模型版本
 *
 * @param request CreateModelVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelVersionResponse
 */
async function createModelVersionWithOptions(ModelId: string, request: CreateModelVersionRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateModelVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.approvalStatus)) {
    body['ApprovalStatus'] = request.approvalStatus;
  }
  if (!$isNull(request.compressionSpec)) {
    body['CompressionSpec'] = request.compressionSpec;
  }
  if (!$isNull(request.evaluationSpec)) {
    body['EvaluationSpec'] = request.evaluationSpec;
  }
  if (!$isNull(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!$isNull(request.formatType)) {
    body['FormatType'] = request.formatType;
  }
  if (!$isNull(request.frameworkType)) {
    body['FrameworkType'] = request.frameworkType;
  }
  if (!$isNull(request.inferenceSpec)) {
    body['InferenceSpec'] = request.inferenceSpec;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }
  if (!$isNull(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.trainingSpec)) {
    body['TrainingSpec'] = request.trainingSpec;
  }
  if (!$isNull(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!$isNull(request.versionDescription)) {
    body['VersionDescription'] = request.versionDescription;
  }
  if (!$isNull(request.versionName)) {
    body['VersionName'] = request.versionName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建模型版本
 *
 * @param request CreateModelVersionRequest
 * @return CreateModelVersionResponse
 */
async function createModelVersion(ModelId: string, request: CreateModelVersionRequest): CreateModelVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelVersionWithOptions(ModelId, request, headers, runtime);
}

model CreateModelVersionLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新模型版本的标签
 *
 * @param request CreateModelVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabelsWithOptions(ModelId: string, VersionName: string, request: CreateModelVersionLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateModelVersionLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateModelVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions/${$URL.percentEncode(VersionName)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建或更新模型版本的标签
 *
 * @param request CreateModelVersionLabelsRequest
 * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabels(ModelId: string, VersionName: string, request: CreateModelVersionLabelsRequest): CreateModelVersionLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelVersionLabelsWithOptions(ModelId, VersionName, request, headers, runtime);
}

model CreateProductOrdersRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  products?: [ 
    {
      autoRenew?: boolean(name='AutoRenew', example='true'),
      chargeType?: string(name='ChargeType', example='POSTPAY'),
      duration?: long(name='Duration', example='1'),
      instanceProperties?: [ 
        {
          code?: string(name='Code', example='commodity_type。'),
          name?: string(name='Name'),
          value?: string(name='Value', example='oss。'),
        }
      ](name='InstanceProperties'),
      orderType?: string(name='OrderType', example='BUY'),
      pricingCycle?: string(name='PricingCycle', example='Month'),
      productCode?: string(name='ProductCode', example='DataWorks_share'),
    }
  ](name='Products'),
}

model CreateProductOrdersResponseBody = {
  buyProductRequestId?: string(name='BuyProductRequestId', example='3ed6a882-0d85-4dd8-ad36-cd8d74ab9fdb'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId', example='210292536260646'),
  requestId?: string(name='RequestId', example='ksdjf-jksd-*****slkdjf'),
}

model CreateProductOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductOrdersResponseBody(name='body'),
}

/**
 * @summary 创建产品订单
 *
 * @param request CreateProductOrdersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductOrdersResponse
 */
async function createProductOrdersWithOptions(request: CreateProductOrdersRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateProductOrdersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.products)) {
    body['Products'] = request.products;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProductOrders',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/productorders`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建产品订单
 *
 * @param request CreateProductOrdersRequest
 * @return CreateProductOrdersResponse
 */
async function createProductOrders(request: CreateProductOrdersRequest): CreateProductOrdersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductOrdersWithOptions(request, headers, runtime);
}

model CreateRunRequest {
  experimentId?: string(name='ExperimentId', description='This parameter is required.', example='exp-6thbb5xrbmp*****'),
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name', example='myName'),
  params?: [
    RunParam
  ](name='Params'),
  sourceId?: string(name='SourceId', example='job-jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='DLC'),
}

model CreateRunResponseBody = {
  runId?: string(name='RunId', example='run-1meoz7VJd2C6f****'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model CreateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRunResponseBody(name='body'),
}

/**
 * @summary 创建一次运行
 *
 * @param request CreateRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRunResponse
 */
async function createRunWithOptions(request: CreateRunRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateRunResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.experimentId)) {
    body['ExperimentId'] = request.experimentId;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.params)) {
    body['Params'] = request.params;
  }
  if (!$isNull(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRun',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建一次运行
 *
 * @param request CreateRunRequest
 * @return CreateRunResponse
 */
async function createRun(request: CreateRunRequest): CreateRunResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createRunWithOptions(request, headers, runtime);
}

model CreateWorkspaceRequest {
  description?: string(name='Description', description='This parameter is required.', example='description'),
  displayName?: string(name='DisplayName', example='display name'),
  envTypes?: [ string ](name='EnvTypes', description='This parameter is required.'),
  resourceGroupId?: string(name='ResourceGroupId'),
  workspaceName?: string(name='WorkspaceName', description='This parameter is required.', example='workspace_example'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
 * @summary 创建工作空间
 *
 * @param request CreateWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceResponse
 */
async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateWorkspaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.envTypes)) {
    body['EnvTypes'] = request.envTypes;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建工作空间
 *
 * @param request CreateWorkspaceRequest
 * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

model CreateWorkspaceResourceRequest {
  option?: string(name='Option', example='CreateAndAttach'),
  resources?: [ 
    {
      envType?: string(name='EnvType', description='This parameter is required.', example='prod'),
      groupName?: string(name='GroupName', example='groupName'),
      isDefault?: boolean(name='IsDefault', example='false'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name', description='This parameter is required.', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          id?: string(name='Id', description='This parameter is required.', example='232892******92912'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec'),
      workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
    }
  ](name='Resources', description='This parameter is required.'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      id?: string(name='Id', example='1234'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CreateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 创建资源
 *
 * @param request CreateWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResourceWithOptions(WorkspaceId: string, request: CreateWorkspaceResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateWorkspaceResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.option)) {
    body['Option'] = request.option;
  }
  if (!$isNull(request.resources)) {
    body['Resources'] = request.resources;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建资源
 *
 * @param request CreateWorkspaceResourceRequest
 * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResource(WorkspaceId: string, request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeSourceResponseBody(name='body'),
}

/**
 * @summary 删除一个代码源配置
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCodeSourceResponse
 */
async function deleteCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteCodeSourceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${$URL.percentEncode(CodeSourceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除一个代码源配置
 *
 * @return DeleteCodeSourceResponse
 */
async function deleteCodeSource(CodeSourceId: string): DeleteCodeSourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

/**
 * @summary 删除数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetResponse
 */
async function deleteDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除数据集
 *
 * @return DeleteDatasetResponse
 */
async function deleteDataset(DatasetId: string): DeleteDatasetResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetWithOptions(DatasetId, headers, runtime);
}

model DeleteDatasetFileMetasRequest {
  datasetFileMetaIds?: string(name='DatasetFileMetaIds', description='This parameter is required.', example='07914c9534586e4e7aa6e9dbca5009082df******fd8a0d857b33296c59bf6'),
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='132602'),
}

model DeleteDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
}

model DeleteDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetFileMetasResponseBody(name='body'),
}

/**
 * @summary 批量删除数据集下的文件元数据记录
 *
 * @param request DeleteDatasetFileMetasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetFileMetasResponse
 */
async function deleteDatasetFileMetasWithOptions(DatasetId: string, request: DeleteDatasetFileMetasRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetFileMetasResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.datasetFileMetaIds)) {
    query['DatasetFileMetaIds'] = request.datasetFileMetaIds;
  }
  if (!$isNull(request.datasetVersion)) {
    query['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetFileMetas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetfilemetas`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 批量删除数据集下的文件元数据记录
 *
 * @param request DeleteDatasetFileMetasRequest
 * @return DeleteDatasetFileMetasResponse
 */
async function deleteDatasetFileMetas(DatasetId: string, request: DeleteDatasetFileMetasRequest): DeleteDatasetFileMetasResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetFileMetasWithOptions(DatasetId, request, headers, runtime);
}

model DeleteDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobResponseBody(name='body'),
}

/**
 * @summary 删除数据集任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetJobResponse
 */
async function deleteDatasetJobWithOptions(DatasetId: string, DatasetJobId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetJobResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetJob',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs/${$URL.percentEncode(DatasetJobId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除数据集任务
 *
 * @return DeleteDatasetJobResponse
 */
async function deleteDatasetJob(DatasetId: string, DatasetJobId: string): DeleteDatasetJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetJobWithOptions(DatasetId, DatasetJobId, headers, runtime);
}

model DeleteDatasetJobConfigRequest {
  workspaceId?: string(name='WorkspaceId', example='513663'),
}

model DeleteDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model DeleteDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetJobConfigResponseBody(name='body'),
}

/**
 * @summary 删除数据集任务配置
 *
 * @param request DeleteDatasetJobConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetJobConfigResponse
 */
async function deleteDatasetJobConfigWithOptions(DatasetId: string, DatasetJobConfigId: string, request: DeleteDatasetJobConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetJobConfigResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetJobConfig',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobconfigs/${$URL.percentEncode(DatasetJobConfigId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除数据集任务配置
 *
 * @param request DeleteDatasetJobConfigRequest
 * @return DeleteDatasetJobConfigResponse
 */
async function deleteDatasetJobConfig(DatasetId: string, DatasetJobConfigId: string, request: DeleteDatasetJobConfigRequest): DeleteDatasetJobConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetJobConfigWithOptions(DatasetId, DatasetJobConfigId, request, headers, runtime);
}

model DeleteDatasetLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
}

model DeleteDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetLabelsResponseBody(name='body'),
}

/**
 * @summary 删除 Dataset 的标签
 *
 * @param request DeleteDatasetLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabelsWithOptions(DatasetId: string, request: DeleteDatasetLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetLabelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除 Dataset 的标签
 *
 * @param request DeleteDatasetLabelsRequest
 * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabels(DatasetId: string, request: DeleteDatasetLabelsRequest): DeleteDatasetLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

model DeleteDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionResponseBody(name='body'),
}

/**
 * @summary 删除指定版本的数据集信息，如果删除的版本是该数据集的仅存版本，版本删除后会联动删除dataset 表中的数据集信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetVersionResponse
 */
async function deleteDatasetVersionWithOptions(DatasetId: string, VersionName: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetVersionResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除指定版本的数据集信息，如果删除的版本是该数据集的仅存版本，版本删除后会联动删除dataset 表中的数据集信息
 *
 * @return DeleteDatasetVersionResponse
 */
async function deleteDatasetVersion(DatasetId: string, VersionName: string): DeleteDatasetVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetVersionWithOptions(DatasetId, VersionName, headers, runtime);
}

model DeleteDatasetVersionLabelsRequest {
  keys?: string(name='Keys', description='This parameter is required.', example='key1,key2'),
}

model DeleteDatasetVersionLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 删除数据集版本的标签。
 *
 * @param request DeleteDatasetVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetVersionLabelsResponse
 */
async function deleteDatasetVersionLabelsWithOptions(DatasetId: string, VersionName: string, request: DeleteDatasetVersionLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteDatasetVersionLabelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.keys)) {
    query['Keys'] = request.keys;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDatasetVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions/${$URL.percentEncode(VersionName)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除数据集版本的标签。
 *
 * @param request DeleteDatasetVersionLabelsRequest
 * @return DeleteDatasetVersionLabelsResponse
 */
async function deleteDatasetVersionLabels(DatasetId: string, VersionName: string, request: DeleteDatasetVersionLabelsRequest): DeleteDatasetVersionLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetVersionLabelsWithOptions(DatasetId, VersionName, request, headers, runtime);
}

model DeleteExperimentResponseBody = {
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
}

model DeleteExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentResponseBody(name='body'),
}

/**
 * @summary 删除实验
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteExperimentResponse
 */
async function deleteExperimentWithOptions(ExperimentId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteExperimentResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteExperiment',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${$URL.percentEncode(ExperimentId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除实验
 *
 * @return DeleteExperimentResponse
 */
async function deleteExperiment(ExperimentId: string): DeleteExperimentResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExperimentWithOptions(ExperimentId, headers, runtime);
}

model DeleteExperimentLabelResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteExperimentLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExperimentLabelResponseBody(name='body'),
}

/**
 * @summary 删除实验标签
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteExperimentLabelResponse
 */
async function deleteExperimentLabelWithOptions(ExperimentId: string, Key: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteExperimentLabelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteExperimentLabel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${$URL.percentEncode(ExperimentId)}/labels/${$URL.percentEncode(Key)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除实验标签
 *
 * @return DeleteExperimentLabelResponse
 */
async function deleteExperimentLabel(ExperimentId: string, Key: string): DeleteExperimentLabelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExperimentLabelWithOptions(ExperimentId, Key, headers, runtime);
}

model DeleteMembersRequest {
  memberIds?: string(name='MemberIds', description='This parameter is required.', example='145883-21513926******88039,145883-2769726******87513'),
}

model DeleteMembersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model DeleteMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMembersResponseBody(name='body'),
}

/**
 * @summary 删除工作空间成员
 *
 * @param request DeleteMembersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMembersResponse
 */
async function deleteMembersWithOptions(WorkspaceId: string, request: DeleteMembersRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteMembersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.memberIds)) {
    query['MemberIds'] = request.memberIds;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/members`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除工作空间成员
 *
 * @param request DeleteMembersRequest
 * @return DeleteMembersResponse
 */
async function deleteMembers(WorkspaceId: string, request: DeleteMembersRequest): DeleteMembersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMembersWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

/**
 * @summary 删除模型
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelResponse
 */
async function deleteModelWithOptions(ModelId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteModelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除模型
 *
 * @return DeleteModelResponse
 */
async function deleteModel(ModelId: string): DeleteModelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelWithOptions(ModelId, headers, runtime);
}

model DeleteModelLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelLabelsResponseBody(name='body'),
}

/**
 * @summary 删除模型的标签
 *
 * @param request DeleteModelLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelLabelsResponse
 */
async function deleteModelLabelsWithOptions(ModelId: string, request: DeleteModelLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteModelLabelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteModelLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除模型的标签
 *
 * @param request DeleteModelLabelsRequest
 * @return DeleteModelLabelsResponse
 */
async function deleteModelLabels(ModelId: string, request: DeleteModelLabelsRequest): DeleteModelLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelLabelsWithOptions(ModelId, request, headers, runtime);
}

model DeleteModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionResponseBody(name='body'),
}

/**
 * @summary 删除模型版本
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelVersionResponse
 */
async function deleteModelVersionWithOptions(ModelId: string, VersionName: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteModelVersionResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除模型版本
 *
 * @return DeleteModelVersionResponse
 */
async function deleteModelVersion(ModelId: string, VersionName: string): DeleteModelVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelVersionWithOptions(ModelId, VersionName, headers, runtime);
}

model DeleteModelVersionLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 删除模型版本的标签
 *
 * @param request DeleteModelVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabelsWithOptions(ModelId: string, VersionName: string, request: DeleteModelVersionLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteModelVersionLabelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteModelVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions/${$URL.percentEncode(VersionName)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除模型版本的标签
 *
 * @param request DeleteModelVersionLabelsRequest
 * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabels(ModelId: string, VersionName: string, request: DeleteModelVersionLabelsRequest): DeleteModelVersionLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelVersionLabelsWithOptions(ModelId, VersionName, request, headers, runtime);
}

model DeleteRunResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunResponseBody(name='body'),
}

/**
 * @summary 删除Run
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRunResponse
 */
async function deleteRunWithOptions(RunId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteRunResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRun',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除Run
 *
 * @return DeleteRunResponse
 */
async function deleteRun(RunId: string): DeleteRunResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRunWithOptions(RunId, headers, runtime);
}

model DeleteRunLabelResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model DeleteRunLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunLabelResponseBody(name='body'),
}

/**
 * @summary 删除Run标签
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRunLabelResponse
 */
async function deleteRunLabelWithOptions(RunId: string, Key: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteRunLabelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRunLabel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}/labels/${$URL.percentEncode(Key)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除Run标签
 *
 * @return DeleteRunLabelResponse
 */
async function deleteRunLabel(RunId: string, Key: string): DeleteRunLabelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRunLabelWithOptions(RunId, Key, headers, runtime);
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
 * @summary 删除工作空间
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceResponse
 */
async function deleteWorkspaceWithOptions(WorkspaceId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteWorkspaceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除工作空间
 *
 * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(WorkspaceId: string): DeleteWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceWithOptions(WorkspaceId, headers, runtime);
}

model DeleteWorkspaceResourceRequest {
  groupName?: string(name='GroupName', example='group'),
  labels?: string(name='Labels'),
  option?: string(name='Option', example='DetachAndDelete'),
  productType?: string(name='ProductType', example='DLC'),
  resourceIds?: string(name='ResourceIds'),
  resourceType?: string(name='ResourceType'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model DeleteWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 删除工作空间资源
 *
 * @param request DeleteWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResourceWithOptions(WorkspaceId: string, request: DeleteWorkspaceResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteWorkspaceResourceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!$isNull(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/resources`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除工作空间资源
 *
 * @param request DeleteWorkspaceResourceRequest
 * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResource(WorkspaceId: string, request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

model GetCodeSourceResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da10***********'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='xxxx'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user1'),
  codeSourceId?: string(name='CodeSourceId', example='code-202**********'),
  description?: string(name='Description', example='This is my data source 1.'),
  displayName?: string(name='DisplayName', example='MyCodeSource1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T23:36:01.123Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T23:36:01.123Z'),
  mountPath?: string(name='MountPath', example='/root/code'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  userId?: string(name='UserId', example='1722********'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model GetCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCodeSourceResponseBody(name='body'),
}

/**
 * @summary 获取一个代码源配置
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCodeSourceResponse
 */
async function getCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: $RuntimeOptions): GetCodeSourceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${$URL.percentEncode(CodeSourceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取一个代码源配置
 *
 * @return GetCodeSourceResponse
 */
async function getCodeSource(CodeSourceId: string): GetCodeSourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model GetDatasetResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  dataSourceType?: string(name='DataSourceType', example='NAS'),
  dataType?: string(name='DataType', example='COMMON'),
  datasetId?: string(name='DatasetId', example='d-rbvg5wz****c9ks92'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: DatasetVersion(name='LatestVersion'),
  mountAccess?: string(name='MountAccess'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  ownerId?: string(name='OwnerId', example='1631044****3440'),
  property?: string(name='Property', example='DIRECTORY'),
  provider?: string(name='Provider'),
  providerType?: string(name='ProviderType'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceDatasetId?: string(name='SourceDatasetId'),
  sourceDatasetVersion?: string(name='SourceDatasetVersion'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='USER'),
  tagTemplateType?: string(name='TagTemplateType'),
  uri?: string(name='Uri', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', example='2485765****023475'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model GetDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetResponseBody(name='body'),
}

/**
 * @summary 获取数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetResponse
 */
async function getDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatasetResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集
 *
 * @return GetDatasetResponse
 */
async function getDataset(DatasetId: string): GetDatasetResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetWithOptions(DatasetId, headers, runtime);
}

model GetDatasetFileMetaRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model GetDatasetFileMetaResponseBody = {
  datasetFileMeta?: DatasetFileMetaContentGet(name='DatasetFileMeta'),
  datasetId?: string(name='DatasetId'),
  datasetVersion?: string(name='DatasetVersion'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetDatasetFileMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetFileMetaResponseBody(name='body'),
}

/**
 * @summary 获取数据集下的指定文件元数据记录
 *
 * @param request GetDatasetFileMetaRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetFileMetaResponse
 */
async function getDatasetFileMetaWithOptions(DatasetId: string, DatasetFileMetaId: string, request: GetDatasetFileMetaRequest, headers: map[string]string, runtime: $RuntimeOptions): GetDatasetFileMetaResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    query['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasetFileMeta',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetfilemetas/${$URL.percentEncode(DatasetFileMetaId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集下的指定文件元数据记录
 *
 * @param request GetDatasetFileMetaRequest
 * @return GetDatasetFileMetaResponse
 */
async function getDatasetFileMeta(DatasetId: string, DatasetFileMetaId: string, request: GetDatasetFileMetaRequest): GetDatasetFileMetaResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetFileMetaWithOptions(DatasetId, DatasetFileMetaId, request, headers, runtime);
}

model GetDatasetJobRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model GetDatasetJobResponseBody = {
  completedFileCount?: long(name='CompletedFileCount', example='990'),
  createTime?: string(name='CreateTime', example='2024-11-15T07:06:42Z'),
  description?: string(name='Description'),
  failedFileCount?: long(name='FailedFileCount', example='10'),
  finishTime?: string(name='FinishTime', example='2024-07-16T02:03:23Z'),
  jobAction?: string(name='JobAction', example='SemanticIndex'),
  jobMode?: string(name='JobMode', example='Full'),
  jobSpec?: string(name='JobSpec', example='{\\\\"modelId\\\\":\\\\"xxx\\\\"}'),
  logs?: [ string ](name='Logs'),
  requestId?: string(name='RequestId', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
  status?: string(name='Status', example='Running'),
  totalFileCount?: long(name='TotalFileCount', example='1000'),
}

model GetDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobResponseBody(name='body'),
}

/**
 * @summary 获取数据集任务
 *
 * @param request GetDatasetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetJobResponse
 */
async function getDatasetJobWithOptions(DatasetId: string, DatasetJobId: string, request: GetDatasetJobRequest, headers: map[string]string, runtime: $RuntimeOptions): GetDatasetJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    query['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasetJob',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs/${$URL.percentEncode(DatasetJobId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集任务
 *
 * @param request GetDatasetJobRequest
 * @return GetDatasetJobResponse
 */
async function getDatasetJob(DatasetId: string, DatasetJobId: string, request: GetDatasetJobRequest): GetDatasetJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetJobWithOptions(DatasetId, DatasetJobId, request, headers, runtime);
}

model GetDatasetJobConfigRequest {
  workspaceId?: string(name='WorkspaceId', example='114243'),
}

model GetDatasetJobConfigResponseBody = {
  config?: string(name='Config', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }'),
  configType?: string(name='ConfigType', example='MultimodalIntelligentTag'),
  createTime?: string(name='CreateTime', example='2024-10-16T01:44:10Z'),
  datasetId?: string(name='DatasetId', example='d-lfd60v0p****ujtsdx'),
  modifyTime?: string(name='ModifyTime', example='2024-12-26T02:17:18Z'),
  requestId?: string(name='RequestId', description='Id of the request', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetJobConfigResponseBody(name='body'),
}

/**
 * @summary 获取数据集任务配置
 *
 * @param request GetDatasetJobConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetJobConfigResponse
 */
async function getDatasetJobConfigWithOptions(DatasetId: string, DatasetJobConfigId: string, request: GetDatasetJobConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): GetDatasetJobConfigResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasetJobConfig',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobconfigs/${$URL.percentEncode(DatasetJobConfigId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集任务配置
 *
 * @param request GetDatasetJobConfigRequest
 * @return GetDatasetJobConfigResponse
 */
async function getDatasetJobConfig(DatasetId: string, DatasetJobConfigId: string, request: GetDatasetJobConfigRequest): GetDatasetJobConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetJobConfigWithOptions(DatasetId, DatasetJobConfigId, request, headers, runtime);
}

model GetDatasetVersionResponseBody = {
  dataCount?: long(name='DataCount', description='数据集的数据量'),
  dataSize?: long(name='DataSize', description='数据集版本的数据大小。'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型。支持以下取值：
- OSS：阿里云对象存储（OSS）。
- NAS：阿里云文件存储（NAS）。

This parameter is required.'),
  datasetId?: string(name='DatasetId', description='代表资源一级ID的资源属性字段'),
  description?: string(name='Description', description='数据集版本的描述信息。'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='创建时间。'),
  importInfo?: string(name='ImportInfo'),
  labels?: [
    Label
  ](name='Labels', description='代表资源标签的资源属性字段'),
  mountAccess?: string(name='MountAccess'),
  options?: string(name='Options', description='扩展字段，JsonString类型。
当DLC使用数据集时，可通过配置mountPath字段指定数据集默认挂载路径。'),
  property?: string(name='Property', description='数据集的属性。支持以下取值：
- FILE：文件。
- DIRECTORY：文件夹。

This parameter is required.'),
  requestId?: string(name='RequestId'),
  sourceId?: string(name='SourceId', description='数据来源ID。'),
  sourceType?: string(name='SourceType', description='数据来源类型，默认为USER。支持以下取值：
- PAI-PUBLIC-DATASET：PAI公共数据集。
- ITAG：iTAG模块标注结果生成的数据集。
- USER：用户注册的数据集。'),
  uri?: string(name='Uri', description='Uri配置样例如下：
- 数据源类型为OSS：`oss://bucket.endpoint/object`
- 数据源类型为NAS：
通用型NAS格式为：`nas://<nasfisid>.region/subpath/to/dir/`；
CPFS1.0：`nas://<cpfs-fsid>.region/subpath/to/dir/`；
CPFS2.0：`nas://<cpfs-fsid>.region/<protocolserviceid>/`。
CPFS1.0和CPFS2.0根据fsid的格式来区分：CPFS1.0 格式为cpfs-<8位ascii字符>；CPFS2.0 格式为cpfs-<16为ascii字符>。

This parameter is required.'),
  versionName?: string(name='VersionName', description='代表资源名称的资源属性字段'),
}

model GetDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetVersionResponseBody(name='body'),
}

/**
 * @summary 获取指定版本的数据集信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetVersionResponse
 */
async function getDatasetVersionWithOptions(DatasetId: string, VersionName: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatasetVersionResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatasetVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取指定版本的数据集信息
 *
 * @return GetDatasetVersionResponse
 */
async function getDatasetVersion(DatasetId: string, VersionName: string): GetDatasetVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetVersionWithOptions(DatasetId, VersionName, headers, runtime);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose', example='false'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code', example='200'),
      message?: string(name='Message', example='Create Failed'),
      type?: string(name='Type', example='CREATING'),
    }
  ](name='Conditions'),
  creator?: string(name='Creator', example='17915******4216'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  owner?: {
    userId?: string(name='UserId', example='17915******4216'),
    userKp?: string(name='UserKp', example='17915******4216'),
    userName?: string(name='UserName', example='username'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取默认工作空间
 *
 * @param request GetDefaultWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspaceWithOptions(request: GetDefaultWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): GetDefaultWorkspaceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取默认工作空间
 *
 * @param request GetDefaultWorkspaceRequest
 * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDefaultWorkspaceWithOptions(request, headers, runtime);
}

model GetExperimentRequest {
  verbose?: boolean(name='Verbose', example='false'),
}

model GetExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Experiment  
}

/**
 * @summary 获取实验
 *
 * @param request GetExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetExperimentResponse
 */
async function getExperimentWithOptions(ExperimentId: string, request: GetExperimentRequest, headers: map[string]string, runtime: $RuntimeOptions): GetExperimentResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetExperiment',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${$URL.percentEncode(ExperimentId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取实验
 *
 * @param request GetExperimentRequest
 * @return GetExperimentResponse
 */
async function getExperiment(ExperimentId: string, request: GetExperimentRequest): GetExperimentResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model GetImageRequest {
  verbose?: boolean(name='Verbose', example='false'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  imageUri?: string(name='ImageUri', example='registry.cn-hangzhou.aliyuncs.******ession/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  name?: string(name='Name', example='nlp-compression'),
  parentUserId?: string(name='ParentUserId', example='15577******8921'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  size?: int32(name='Size'),
  userId?: string(name='UserId', example='15577******8921'),
  workspaceId?: string(name='WorkspaceId', example='15945'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
 * @summary 获取镜像
 *
 * @param request GetImageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageResponse
 */
async function getImageWithOptions(ImageId: string, request: GetImageRequest, headers: map[string]string, runtime: $RuntimeOptions): GetImageResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${$URL.percentEncode(ImageId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取镜像
 *
 * @param request GetImageRequest
 * @return GetImageResponse
 */
async function getImage(ImageId: string, request: GetImageRequest): GetImageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getImageWithOptions(ImageId, request, headers, runtime);
}

model GetMemberRequest {
  memberId?: string(name='MemberId'),
  userId?: string(name='UserId', example='21513926******88039'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName', example='myDisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  memberId?: string(name='MemberId', example='145883-21513926******88039'),
  memberName?: string(name='MemberName', example='user1'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  roles?: [ string ](name='Roles'),
  userId?: string(name='UserId', example='21513926******88039'),
}

model GetMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemberResponseBody(name='body'),
}

/**
 * @summary 获取成员
 *
 * @param request GetMemberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemberResponse
 */
async function getMemberWithOptions(WorkspaceId: string, request: GetMemberRequest, headers: map[string]string, runtime: $RuntimeOptions): GetMemberResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!$isNull(request.userId)) {
    query['UserId'] = request.userId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/member`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取成员
 *
 * @param request GetMemberRequest
 * @return GetMemberResponse
 */
async function getMember(WorkspaceId: string, request: GetMemberRequest): GetMemberResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemberWithOptions(WorkspaceId, request, headers, runtime);
}

model GetModelResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='1'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  provider?: string(name='Provider', example='pai'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  task?: string(name='Task', example='text-classification'),
  userId?: string(name='UserId', example='1234567890******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model GetModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelResponseBody(name='body'),
}

/**
 * @summary 获取模型
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelResponse
 */
async function getModelWithOptions(ModelId: string, headers: map[string]string, runtime: $RuntimeOptions): GetModelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取模型
 *
 * @return GetModelResponse
 */
async function getModel(ModelId: string): GetModelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelWithOptions(ModelId, headers, runtime);
}

model GetModelVersionResponseBody = {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "Processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId', example='1234567890******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model GetModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelVersionResponseBody(name='body'),
}

/**
 * @summary 获取模型版本
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelVersionResponse
 */
async function getModelVersionWithOptions(ModelId: string, VersionName: string, headers: map[string]string, runtime: $RuntimeOptions): GetModelVersionResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取模型版本
 *
 * @return GetModelVersionResponse
 */
async function getModelVersion(ModelId: string, VersionName: string): GetModelVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelVersionWithOptions(ModelId, VersionName, headers, runtime);
}

model GetPermissionRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  creator?: string(name='Creator', example='17915******4216'),
  labels?: map[string]any(name='Labels'),
  option?: string(name='Option'),
  resource?: string(name='Resource'),
}

model GetPermissionShrinkRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  creator?: string(name='Creator', example='17915******4216'),
  labelsShrink?: string(name='Labels'),
  option?: string(name='Option'),
  resource?: string(name='Resource'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode', example='PaiDLC:ListJobs'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility', example='PRIVATE'),
      entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
    }
  ](name='PermissionRules'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model GetPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionResponseBody(name='body'),
}

/**
 * @summary 获取权限，若无权限则返回错误
 *
 * @param tmpReq GetPermissionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPermissionResponse
 */
async function getPermissionWithOptions(WorkspaceId: string, PermissionCode: string, tmpReq: GetPermissionRequest, headers: map[string]string, runtime: $RuntimeOptions): GetPermissionResponse {
  tmpReq.validate();
  var request = new GetPermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.labels)) {
    request.labelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labels, 'Labels', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!$isNull(request.labelsShrink)) {
    query['Labels'] = request.labelsShrink;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.resource)) {
    query['Resource'] = request.resource;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPermission',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/permissions/${$URL.percentEncode(PermissionCode)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取权限，若无权限则返回错误
 *
 * @param request GetPermissionRequest
 * @return GetPermissionResponse
 */
async function getPermission(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest): GetPermissionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getPermissionWithOptions(WorkspaceId, PermissionCode, request, headers, runtime);
}

model GetRunRequest {
  verbose?: boolean(name='Verbose', example='true'),
}

model GetRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Run  
}

/**
 * @summary 获取Run详情
 *
 * @param request GetRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRunResponse
 */
async function getRunWithOptions(RunId: string, request: GetRunRequest, headers: map[string]string, runtime: $RuntimeOptions): GetRunResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRun',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取Run详情
 *
 * @param request GetRunRequest
 * @return GetRunResponse
 */
async function getRun(RunId: string, request: GetRunRequest): GetRunResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunWithOptions(RunId, request, headers, runtime);
}

model GetWorkspaceRequest {
  verbose?: boolean(name='Verbose', example='true'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames'),
  creator?: string(name='Creator', example='1157******94123'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  isDefault?: boolean(name='IsDefault', example='true'),
  owner?: {
    displayName?: string(name='DisplayName', example='mings****t'),
    userId?: string(name='UserId', example='1157******94123'),
    userKp?: string(name='UserKp', example='1157******94123'),
    userName?: string(name='UserName', example='mings****t'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B4DED1B5A34C'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取工作空间
 *
 * @param request GetWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkspaceResponse
 */
async function getWorkspaceWithOptions(WorkspaceId: string, request: GetWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): GetWorkspaceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取工作空间
 *
 * @param request GetWorkspaceRequest
 * @return GetWorkspaceResponse
 */
async function getWorkspace(WorkspaceId: string, request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', example='MyDataSource'),
  order?: string(name='Order', example='desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtModifyTime'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListCodeSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeSourcesResponseBody(name='body'),
}

/**
 * @summary 获取代码源配置列表
 *
 * @param request ListCodeSourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCodeSourcesResponse
 */
async function listCodeSourcesWithOptions(request: ListCodeSourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListCodeSourcesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCodeSources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取代码源配置列表
 *
 * @param request ListCodeSourcesRequest
 * @return ListCodeSourcesResponse
 */
async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeSourcesWithOptions(request, headers, runtime);
}

model ListDatasetFileMetasRequest {
  datasetVersion?: string(name='DatasetVersion', description='This parameter is required.', example='v1'),
  endFileUpdateTime?: string(name='EndFileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z'),
  nextToken?: string(name='NextToken', example='90a6ee35-****-4cd4-927e-1f45e1cb8b62_1729644433000'),
  order?: string(name='Order', example='DESC'),
  pageSize?: int32(name='PageSize', example='10'),
  queryText?: string(name='QueryText'),
  queryType?: string(name='QueryType', example='TAG'),
  scoreThreshold?: float(name='ScoreThreshold', example='0.6'),
  sortBy?: string(name='SortBy', example='FileCreateTime'),
  startFileUpdateTime?: string(name='StartFileUpdateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-01-12T14:36:01Z'),
  topK?: int32(name='TopK', example='100'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='105173'),
}

model ListDatasetFileMetasResponseBody = {
  datasetFileMetas?: [
    DatasetFileMeta
  ](name='DatasetFileMetas'),
  datasetId?: string(name='DatasetId'),
  datasetVersion?: string(name='DatasetVersion'),
  nextToken?: string(name='NextToken', example='90******-f5c5-4cd4-927e-1f45e1cb8b62_1729644433000'),
  pageSize?: int32(name='PageSize', example='30'),
  totalCount?: int32(name='TotalCount', example='123'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetFileMetasResponseBody(name='body'),
}

/**
 * @summary 查询数据集文件列表
 *
 * @param request ListDatasetFileMetasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetFileMetasResponse
 */
async function listDatasetFileMetasWithOptions(DatasetId: string, request: ListDatasetFileMetasRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasetFileMetasResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    query['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.endFileUpdateTime)) {
    query['EndFileUpdateTime'] = request.endFileUpdateTime;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.queryText)) {
    query['QueryText'] = request.queryText;
  }
  if (!$isNull(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!$isNull(request.scoreThreshold)) {
    query['ScoreThreshold'] = request.scoreThreshold;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.startFileUpdateTime)) {
    query['StartFileUpdateTime'] = request.startFileUpdateTime;
  }
  if (!$isNull(request.topK)) {
    query['TopK'] = request.topK;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasetFileMetas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetfilemetas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询数据集文件列表
 *
 * @param request ListDatasetFileMetasRequest
 * @return ListDatasetFileMetasResponse
 */
async function listDatasetFileMetas(DatasetId: string, request: ListDatasetFileMetasRequest): ListDatasetFileMetasResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetFileMetasWithOptions(DatasetId, request, headers, runtime);
}

model ListDatasetJobConfigsRequest {
  configType?: string(name='ConfigType', example='MultimodalIntelligentTag'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  workspaceId?: string(name='WorkspaceId', example='431514'),
}

model ListDatasetJobConfigsResponseBody = {
  datasetJobConfigs?: [
    DatasetJobConfig
  ](name='DatasetJobConfigs'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListDatasetJobConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobConfigsResponseBody(name='body'),
}

/**
 * @summary 批量查询数据集任务配置
 *
 * @param request ListDatasetJobConfigsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetJobConfigsResponse
 */
async function listDatasetJobConfigsWithOptions(DatasetId: string, request: ListDatasetJobConfigsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasetJobConfigsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasetJobConfigs',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobconfigs/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 批量查询数据集任务配置
 *
 * @param request ListDatasetJobConfigsRequest
 * @return ListDatasetJobConfigsResponse
 */
async function listDatasetJobConfigs(DatasetId: string, request: ListDatasetJobConfigsRequest): ListDatasetJobConfigsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetJobConfigsWithOptions(DatasetId, request, headers, runtime);
}

model ListDatasetJobsRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  jobAction?: string(name='JobAction', example='SemanticIndex'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model ListDatasetJobsResponseBody = {
  datasetJobs?: [
    DatasetJob
  ](name='DatasetJobs'),
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  totalCount?: int32(name='TotalCount'),
}

model ListDatasetJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetJobsResponseBody(name='body'),
}

/**
 * @summary 获取数据集任务
 *
 * @param request ListDatasetJobsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetJobsResponse
 */
async function listDatasetJobsWithOptions(DatasetId: string, request: ListDatasetJobsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasetJobsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    query['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.jobAction)) {
    query['JobAction'] = request.jobAction;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasetJobs',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集任务
 *
 * @param request ListDatasetJobsRequest
 * @return ListDatasetJobsResponse
 */
async function listDatasetJobs(DatasetId: string, request: ListDatasetJobsRequest): ListDatasetJobsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetJobsWithOptions(DatasetId, request, headers, runtime);
}

model ListDatasetVersionsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
  labelValues?: string(name='LabelValues'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  properties?: string(name='Properties', example='DIRECTORY'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  sourceId?: string(name='SourceId', example='d-a0xbe5n03bhqof46ce'),
  sourceTypes?: string(name='SourceTypes', example='USER'),
}

model ListDatasetVersionsResponseBody = {
  datasetVersions?: [
    DatasetVersion
  ](name='DatasetVersions'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListDatasetVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetVersionsResponseBody(name='body'),
}

/**
 * @summary 获取数据集版本列表
 *
 * @param request ListDatasetVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetVersionsResponse
 */
async function listDatasetVersionsWithOptions(DatasetId: string, request: ListDatasetVersionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasetVersionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!$isNull(request.labelValues)) {
    query['LabelValues'] = request.labelValues;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.properties)) {
    query['Properties'] = request.properties;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceTypes)) {
    query['SourceTypes'] = request.sourceTypes;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasetVersions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集版本列表
 *
 * @param request ListDatasetVersionsRequest
 * @return ListDatasetVersionsResponse
 */
async function listDatasetVersions(DatasetId: string, request: ListDatasetVersionsRequest): ListDatasetVersionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetVersionsWithOptions(DatasetId, request, headers, runtime);
}

model ListDatasetsRequest {
  dataSourceTypes?: string(name='DataSourceTypes', example='OSS'),
  dataTypes?: string(name='DataTypes', example='COMMON,TEXT'),
  label?: string(name='Label', example='test'),
  name?: string(name='Name', example='myName'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  properties?: string(name='Properties', example='FILE'),
  provider?: string(name='Provider'),
  sortBy?: string(name='SortBy'),
  sourceDatasetId?: string(name='SourceDatasetId'),
  sourceId?: string(name='SourceId', example='d-rbvg5wzljzjhc9ks92'),
  sourceTypes?: string(name='SourceTypes', example='USER,ITAG'),
  workspaceId?: string(name='WorkspaceId', example='324**'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListDatasetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetsResponseBody(name='body'),
}

/**
 * @summary 获取数据集列表
 *
 * @param request ListDatasetsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetsResponse
 */
async function listDatasetsWithOptions(request: ListDatasetsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatasetsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.dataSourceTypes)) {
    query['DataSourceTypes'] = request.dataSourceTypes;
  }
  if (!$isNull(request.dataTypes)) {
    query['DataTypes'] = request.dataTypes;
  }
  if (!$isNull(request.label)) {
    query['Label'] = request.label;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.properties)) {
    query['Properties'] = request.properties;
  }
  if (!$isNull(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.sourceDatasetId)) {
    query['SourceDatasetId'] = request.sourceDatasetId;
  }
  if (!$isNull(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceTypes)) {
    query['SourceTypes'] = request.sourceTypes;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatasets',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据集列表
 *
 * @param request ListDatasetsRequest
 * @return ListDatasetsResponse
 */
async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetsWithOptions(request, headers, runtime);
}

model ListExperimentRequest {
  labels?: string(name='Labels', example='is_evaluation:true'),
  maxResults?: long(name='MaxResults', example='10'),
  name?: string(name='Name', example='exp-test'),
  options?: {
    matchNameExactly?: string(name='match_name_exactly', example='true'),
  }(name='Options'),
  order?: string(name='Order', example='DESC'),
  orderBy?: string(name='OrderBy', example='GmtCreateTime DESC,Name ASC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  pageToken?: long(name='PageToken', example='0'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  verbose?: boolean(name='Verbose', example='false'),
  workspaceId?: string(name='WorkspaceId', example='151739'),
}

model ListExperimentShrinkRequest {
  labels?: string(name='Labels', example='is_evaluation:true'),
  maxResults?: long(name='MaxResults', example='10'),
  name?: string(name='Name', example='exp-test'),
  optionsShrink?: string(name='Options'),
  order?: string(name='Order', example='DESC'),
  orderBy?: string(name='OrderBy', example='GmtCreateTime DESC,Name ASC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  pageToken?: long(name='PageToken', example='0'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  verbose?: boolean(name='Verbose', example='false'),
  workspaceId?: string(name='WorkspaceId', example='151739'),
}

model ListExperimentResponseBody = {
  experiments?: [
    Experiment
  ](name='Experiments'),
  nextPageToken?: long(name='NextPageToken', example='0'),
  totalCount?: long(name='TotalCount', example='5'),
  requestId?: string(name='requestId', example='0C6835C5-A424-5AFB-ACC2-F1E3CA1ABF7C'),
}

model ListExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExperimentResponseBody(name='body'),
}

/**
 * @summary 获取实验列表
 *
 * @param tmpReq ListExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListExperimentResponse
 */
async function listExperimentWithOptions(tmpReq: ListExperimentRequest, headers: map[string]string, runtime: $RuntimeOptions): ListExperimentResponse {
  tmpReq.validate();
  var request = new ListExperimentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.options)) {
    request.optionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.options, 'Options', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.optionsShrink)) {
    query['Options'] = request.optionsShrink;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.pageToken)) {
    query['PageToken'] = request.pageToken;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListExperiment',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取实验列表
 *
 * @param request ListExperimentRequest
 * @return ListExperimentResponse
 */
async function listExperiment(request: ListExperimentRequest): ListExperimentResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listExperimentWithOptions(request, headers, runtime);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId', example='image-4c62******53uor'),
  labelFilter?: string(name='LabelFilter', example='system.framework=XGBoost 1.6.0,system.official=true'),
  labelKeys?: string(name='LabelKeys', example='system.framework,system.official'),
  region?: string(name='Region', example='cn-shanghai'),
  workspaceId?: string(name='WorkspaceId', example='12345'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageLabelsResponseBody(name='body'),
}

/**
 * @summary 列举标签
 *
 * @param request ListImageLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImageLabelsResponse
 */
async function listImageLabelsWithOptions(request: ListImageLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListImageLabelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!$isNull(request.labelFilter)) {
    query['LabelFilter'] = request.labelFilter;
  }
  if (!$isNull(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/image/labels`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举标签
 *
 * @param request ListImageLabelsRequest
 * @return ListImageLabelsResponse
 */
async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listImageLabelsWithOptions(request, headers, runtime);
}

model ListImagesRequest {
  accessibility?: string(name='Accessibility'),
  imageUri?: string(name='ImageUri'),
  labels?: string(name='Labels', example='system.framework=XGBoost 1.6.0,system.official=true'),
  name?: string(name='Name', example='tensorflow_2.9'),
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  query?: string(name='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceId?: string(name='WorkspaceId', example='20******55'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility', example='PUBLIC'),
      description?: string(name='Description', example='desc'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      imageId?: string(name='ImageId', example='image-tzi7f9******s45t'),
      imageUri?: string(name='ImageUri'),
      labels?: [ 
        {
          key?: string(name='Key', example='system.chipType'),
          value?: string(name='Value', example='GPU'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='tensorflow_2.9'),
      parentUserId?: string(name='ParentUserId', example='15577******82932'),
      size?: int32(name='Size'),
      userId?: string(name='UserId', example='15577******82932'),
      workspaceId?: string(name='WorkspaceId', example='20******55'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
 * @summary 列举已注册镜像
 *
 * @param request ListImagesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImagesResponse
 */
async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListImagesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.imageUri)) {
    query['ImageUri'] = request.imageUri;
  }
  if (!$isNull(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.query)) {
    query['Query'] = request.query;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListImages',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举已注册镜像
 *
 * @param request ListImagesRequest
 * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

model ListMembersRequest {
  memberName?: string(name='MemberName', example='zhangsan'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  roles?: string(name='Roles', example='PAI.AlgoDeveloper'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      accountName?: string(name='AccountName'),
      displayName?: string(name='DisplayName', example='myDisplayName'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      memberId?: string(name='MemberId', example='14588*****51688039'),
      memberName?: string(name='MemberName', example='user1'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='215139******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMembersResponseBody(name='body'),
}

/**
 * @summary 列举工作空间成员
 *
 * @param request ListMembersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMembersResponse
 */
async function listMembersWithOptions(WorkspaceId: string, request: ListMembersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListMembersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.memberName)) {
    query['MemberName'] = request.memberName;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.roles)) {
    query['Roles'] = request.roles;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举工作空间成员
 *
 * @param request ListMembersRequest
 * @return ListMembersResponse
 */
async function listMembers(WorkspaceId: string, request: ListMembersRequest): ListMembersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listMembersWithOptions(WorkspaceId, request, headers, runtime);
}

model ListModelVersionsRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  label?: string(name='Label', example='key1'),
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  versionName?: string(name='VersionName', example='1.0.1'),
}

model ListModelVersionsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC***3C83E'),
  totalCount?: long(name='TotalCount', example='15'),
  versions?: [
    ModelVersion
  ](name='Versions'),
}

model ListModelVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelVersionsResponseBody(name='body'),
}

/**
 * @summary 获取模型版本列表
 *
 * @param request ListModelVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelVersionsResponse
 */
async function listModelVersionsWithOptions(ModelId: string, request: ListModelVersionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListModelVersionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.approvalStatus)) {
    query['ApprovalStatus'] = request.approvalStatus;
  }
  if (!$isNull(request.formatType)) {
    query['FormatType'] = request.formatType;
  }
  if (!$isNull(request.frameworkType)) {
    query['FrameworkType'] = request.frameworkType;
  }
  if (!$isNull(request.label)) {
    query['Label'] = request.label;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.versionName)) {
    query['VersionName'] = request.versionName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListModelVersions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取模型版本列表
 *
 * @param request ListModelVersionsRequest
 * @return ListModelVersionsResponse
 */
async function listModelVersions(ModelId: string, request: ListModelVersionsRequest): ListModelVersionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelVersionsWithOptions(ModelId, request, headers, runtime);
}

model ListModelsRequest {
  collections?: string(name='Collections', example='AI4D,QuickStart'),
  domain?: string(name='Domain', example='nlp'),
  label?: string(name='Label', example='key1'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Endpoint'),
  order?: string(name='Order', example='DESC'),
  origin?: string(name='Origin', example='ModelScope'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  provider?: string(name='Provider', example='pai'),
  query?: string(name='Query', example='nlp'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  task?: string(name='Task', example='text-classification'),
  workspaceId?: string(name='WorkspaceId', example='324**'),
}

model ListModelsResponseBody = {
  models?: [
    Model
  ](name='Models'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelsResponseBody(name='body'),
}

/**
 * @summary 获取模型列表
 *
 * @param request ListModelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelsResponse
 */
async function listModelsWithOptions(request: ListModelsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListModelsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.collections)) {
    query['Collections'] = request.collections;
  }
  if (!$isNull(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!$isNull(request.label)) {
    query['Label'] = request.label;
  }
  if (!$isNull(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!$isNull(request.modelType)) {
    query['ModelType'] = request.modelType;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.origin)) {
    query['Origin'] = request.origin;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!$isNull(request.query)) {
    query['Query'] = request.query;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.task)) {
    query['Task'] = request.task;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListModels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取模型列表
 *
 * @param request ListModelsRequest
 * @return ListModelsResponse
 */
async function listModels(request: ListModelsRequest): ListModelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelsWithOptions(request, headers, runtime);
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', example='PaiDLC:GetTensorboard'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', example='PRIVATE'),
          entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
        }
      ](name='PermissionRules'),
    }
  ](name='Permissions'),
  requestId?: string(name='RequestId', example='2AE63638-5420-56DC-B******8174039A0'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
 * @summary 列举权限
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionsResponse
 */
async function listPermissionsWithOptions(WorkspaceId: string, headers: map[string]string, runtime: $RuntimeOptions): ListPermissionsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPermissions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/permissions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举权限
 *
 * @return ListPermissionsResponse
 */
async function listPermissions(WorkspaceId: string): ListPermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(WorkspaceId, headers, runtime);
}

model ListProductsRequest {
  productCodes?: string(name='ProductCodes', example='PAI_isolate'),
  serviceCodes?: string(name='ServiceCodes', example='oss'),
  verbose?: boolean(name='Verbose'),
}

model ListProductsResponseBody = {
  products?: [ 
    {
      hasPermissionToPurchase?: boolean(name='HasPermissionToPurchase'),
      isPurchased?: boolean(name='IsPurchased', example='true'),
      productCode?: string(name='ProductCode', example='DataWorks_isolate'),
      productInstanceId?: string(name='ProductInstanceId'),
      purchaseUrl?: string(name='PurchaseUrl', example='https://common-buy.aliy'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  services?: [ 
    {
      isOpen?: boolean(name='IsOpen', example='true'),
      openUrl?: string(name='OpenUrl'),
      serviceCode?: string(name='ServiceCode', example='oss'),
    }
  ](name='Services'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
 * @summary 列举产品
 *
 * @param request ListProductsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductsResponse
 */
async function listProductsWithOptions(request: ListProductsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListProductsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.productCodes)) {
    query['ProductCodes'] = request.productCodes;
  }
  if (!$isNull(request.serviceCodes)) {
    query['ServiceCodes'] = request.serviceCodes;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProducts',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举产品
 *
 * @param request ListProductsRequest
 * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(request, headers, runtime);
}

model ListQuotasRequest {
  name?: string(name='Name', example='quota-name'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      displayName?: string(name='DisplayName'),
      id?: string(name='Id', example='1828233'),
      mode?: string(name='Mode', example='isolate'),
      name?: string(name='Name', example='quota-name'),
      productCode?: string(name='ProductCode', example='MaxCompute_share'),
      quotaType?: string(name='QuotaType', example='MaxCompute'),
      specs?: [ 
        {
          name?: string(name='Name', example='cu'),
          type?: string(name='Type', example='string'),
          value?: string(name='Value', example='11500'),
        }
      ](name='Specs', example='{\\\\"cu\\\\":\\\\"11500\\\\",\\\\"minCu\\\\":\\\\"2300\\\\",\\\\"parentId\\\\":\\\\"0\\\\"}'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasResponseBody(name='body'),
}

/**
 * @summary 获取已有配额列表
 *
 * @param request ListQuotasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQuotasResponse
 */
async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: $RuntimeOptions): ListQuotasResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListQuotas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取已有配额列表
 *
 * @param request ListQuotasRequest
 * @return ListQuotasResponse
 */
async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

model ListResourcesRequest {
  groupName?: string(name='GroupName', example='group'),
  labels?: string(name='Labels'),
  option?: string(name='Option', example='ListResourceByWorkspace'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productTypes?: string(name='ProductTypes', example='MaxCompute'),
  quotaIds?: string(name='QuotaIds'),
  resourceName?: string(name='ResourceName', example='resource'),
  resourceTypes?: string(name='ResourceTypes'),
  verbose?: boolean(name='Verbose', example='true'),
  verboseFields?: string(name='VerboseFields'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      encryption?: {
        algorithm?: string(name='Algorithm'),
        enabled?: boolean(name='Enabled'),
        key?: string(name='Key'),
      }(name='Encryption'),
      envType?: string(name='EnvType', example='prod'),
      executor?: {
        ownerId?: string(name='OwnerId'),
      }(name='Executor'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      groupName?: string(name='GroupName', example='groupName'),
      id?: string(name='Id', example='123'),
      isDefault?: boolean(name='IsDefault', example='true'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', example='cpu'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='123'),
          mode?: string(name='Mode', example='develop'),
          name?: string(name='Name', example='QuotaName'),
          productCode?: string(name='ProductCode', example='MaxCompute_isolate'),
          quotaType?: string(name='QuotaType', example='MaxCompute'),
          specs?: [ 
            {
              name?: string(name='Name', example='cu'),
              value?: string(name='Value', example='11500'),
            }
          ](name='Specs', example='{\\\\"cu\\\\":\\\\"11500\\\\",\\\\"minCu\\\\":\\\\"2300\\\\",\\\\"parentId\\\\":\\\\"0\\\\"}'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec', example='对于MaxCompute {"Endpoint": "odps.alibaba-inc.com", "Project": "mignshi"}'),
      workspaceId?: string(name='WorkspaceId', example='123'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
 * @summary 列举工作空间资源
 *
 * @param request ListResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcesResponse
 */
async function listResourcesWithOptions(request: ListResourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListResourcesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!$isNull(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productTypes)) {
    query['ProductTypes'] = request.productTypes;
  }
  if (!$isNull(request.quotaIds)) {
    query['QuotaIds'] = request.quotaIds;
  }
  if (!$isNull(request.resourceName)) {
    query['ResourceName'] = request.resourceName;
  }
  if (!$isNull(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!$isNull(request.verboseFields)) {
    query['VerboseFields'] = request.verboseFields;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListResources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列举工作空间资源
 *
 * @param request ListResourcesRequest
 * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(request, headers, runtime);
}

model ListRunMetricsRequest {
  key?: string(name='Key', description='This parameter is required.', example='loss'),
  maxResults?: long(name='MaxResults', example='100'),
  pageToken?: long(name='PageToken', example='0'),
}

model ListRunMetricsResponseBody = {
  metrics?: [
    RunMetric
  ](name='Metrics'),
  nextPageToken?: long(name='NextPageToken', example='0'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunMetricsResponseBody(name='body'),
}

/**
 * @summary 获取Run的指标记录列表
 *
 * @param request ListRunMetricsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRunMetricsResponse
 */
async function listRunMetricsWithOptions(RunId: string, request: ListRunMetricsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRunMetricsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['PageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRunMetrics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取Run的指标记录列表
 *
 * @param request ListRunMetricsRequest
 * @return ListRunMetricsResponse
 */
async function listRunMetrics(RunId: string, request: ListRunMetricsRequest): ListRunMetricsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunMetricsWithOptions(RunId, request, headers, runtime);
}

model ListRunsRequest {
  experimentId?: string(name='ExperimentId', example='exp-1zpfthdx******'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  labels?: string(name='Labels', example='is_evaluation:true'),
  maxResults?: long(name='MaxResults', example='10'),
  name?: string(name='Name', example='myName'),
  order?: string(name='Order', example='DESC'),
  orderBy?: string(name='OrderBy', example='GmtCreateTime DESC,Name ASC'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  pageToken?: long(name='PageToken', example='0'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  sourceId?: string(name='SourceId', example='job-rbvg5wzlj****'),
  sourceType?: string(name='SourceType', example='TrainingService'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceId?: string(name='WorkspaceId', example='22840'),
}

model ListRunsResponseBody = {
  nextPageToken?: long(name='NextPageToken', example='0'),
  runs?: [
    Run
  ](name='Runs'),
  totalCount?: long(name='TotalCount', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model ListRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunsResponseBody(name='body'),
}

/**
 * @summary 获取Run列表
 *
 * @param request ListRunsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRunsResponse
 */
async function listRunsWithOptions(request: ListRunsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRunsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.experimentId)) {
    query['ExperimentId'] = request.experimentId;
  }
  if (!$isNull(request.gmtCreateTime)) {
    query['GmtCreateTime'] = request.gmtCreateTime;
  }
  if (!$isNull(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.pageToken)) {
    query['PageToken'] = request.pageToken;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!$isNull(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRuns',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取Run列表
 *
 * @param request ListRunsRequest
 * @return ListRunsResponse
 */
async function listRuns(request: ListRunsRequest): ListRunsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRunsWithOptions(request, headers, runtime);
}

model ListWorkspaceUsersRequest {
  userName?: string(name='UserName'),
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  totalCount?: long(name='TotalCount', example='2'),
  users?: [ 
    {
      userId?: string(name='UserId', example='1611******3000'),
      userName?: string(name='UserName', example='she******mo'),
    }
  ](name='Users'),
}

model ListWorkspaceUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceUsersResponseBody(name='body'),
}

/**
 * @summary 列出工作空间的可变为成员的用户
 *
 * @param request ListWorkspaceUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsersWithOptions(WorkspaceId: string, request: ListWorkspaceUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListWorkspaceUsersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkspaceUsers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 列出工作空间的可变为成员的用户
 *
 * @param request ListWorkspaceUsersRequest
 * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsers(WorkspaceId: string, request: ListWorkspaceUsersRequest): ListWorkspaceUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspaceUsersWithOptions(WorkspaceId, request, headers, runtime);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields', example='Id'),
  moduleList?: string(name='ModuleList', example='PAI'),
  option?: string(name='Option', example='GetWorkspaces'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  status?: string(name='Status', example='ENABLED'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceIds?: string(name='WorkspaceIds', example='123,234'),
  workspaceName?: string(name='WorkspaceName', example='abc'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  resourceLimits?: map[string]any(name='ResourceLimits', example='{
   "MaxCompute_share": 1,
   "MaxCompute_isolate": 1,
   "DLC_share": 1
}'),
  totalCount?: long(name='TotalCount', example='1'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames'),
      creator?: string(name='Creator', example='122424353535'),
      description?: string(name='Description', example='workspace description example'),
      envTypes?: [ string ](name='EnvTypes'),
      extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      isDefault?: boolean(name='IsDefault', example='false'),
      status?: string(name='Status', example='ENABLED'),
      workspaceId?: string(name='WorkspaceId', example='123'),
      workspaceName?: string(name='WorkspaceName', example='workspace-example'),
      resourceGroupId?: string(name='resourceGroupId'),
    }
  ](name='Workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
 * @summary 获得工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspacesResponse
 */
async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListWorkspacesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!$isNull(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!$isNull(request.option)) {
    query['Option'] = request.option;
  }
  if (!$isNull(request.order)) {
    query['Order'] = request.order;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!$isNull(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }
  if (!$isNull(request.workspaceName)) {
    query['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkspaces',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获得工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model LogRunMetricsRequest {
  metrics?: [
    RunMetric
  ](name='Metrics'),
}

model LogRunMetricsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model LogRunMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogRunMetricsResponseBody(name='body'),
}

/**
 * @summary 批量记录Run的指标
 *
 * @param request LogRunMetricsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return LogRunMetricsResponse
 */
async function logRunMetricsWithOptions(RunId: string, request: LogRunMetricsRequest, headers: map[string]string, runtime: $RuntimeOptions): LogRunMetricsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.metrics)) {
    body['Metrics'] = request.metrics;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'LogRunMetrics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}/metrics/action/log`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 批量记录Run的指标
 *
 * @param request LogRunMetricsRequest
 * @return LogRunMetricsResponse
 */
async function logRunMetrics(RunId: string, request: LogRunMetricsRequest): LogRunMetricsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return logRunMetricsWithOptions(RunId, request, headers, runtime);
}

model PublishCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-a797*******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model PublishCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishCodeSourceResponseBody(name='body'),
}

/**
 * @summary 发布一个代码源配置为本工作空间下所有人可见
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishCodeSourceResponse
 */
async function publishCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: $RuntimeOptions): PublishCodeSourceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${$URL.percentEncode(CodeSourceId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 发布一个代码源配置为本工作空间下所有人可见
 *
 * @return PublishCodeSourceResponse
 */
async function publishCodeSource(CodeSourceId: string): PublishCodeSourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return publishCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model PublishDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishDatasetResponseBody(name='body'),
}

/**
 * @summary 更新数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishDatasetResponse
 */
async function publishDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: $RuntimeOptions): PublishDatasetResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新数据集
 *
 * @return PublishDatasetResponse
 */
async function publishDataset(DatasetId: string): PublishDatasetResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return publishDatasetWithOptions(DatasetId, headers, runtime);
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId', example='image-dk******fa'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishImageResponseBody(name='body'),
}

/**
 * @summary 发布 Image
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishImageResponse
 */
async function publishImageWithOptions(ImageId: string, headers: map[string]string, runtime: $RuntimeOptions): PublishImageResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${$URL.percentEncode(ImageId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 发布 Image
 *
 * @return PublishImageResponse
 */
async function publishImage(ImageId: string): PublishImageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return publishImageWithOptions(ImageId, headers, runtime);
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageResponseBody(name='body'),
}

/**
 * @summary 删除 Image
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveImageResponse
 */
async function removeImageWithOptions(ImageId: string, headers: map[string]string, runtime: $RuntimeOptions): RemoveImageResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${$URL.percentEncode(ImageId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除 Image
 *
 * @return RemoveImageResponse
 */
async function removeImage(ImageId: string): RemoveImageResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageWithOptions(ImageId, headers, runtime);
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageLabelsResponseBody(name='body'),
}

/**
 * @summary 删除 Image 的标签
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveImageLabelsResponse
 */
async function removeImageLabelsWithOptions(ImageId: string, LabelKey: string, headers: map[string]string, runtime: $RuntimeOptions): RemoveImageLabelsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${$URL.percentEncode(ImageId)}/labels/${$URL.percentEncode(LabelKey)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除 Image 的标签
 *
 * @return RemoveImageLabelsResponse
 */
async function removeImageLabels(ImageId: string, LabelKey: string): RemoveImageLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageLabelsWithOptions(ImageId, LabelKey, headers, runtime);
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMemberRoleResponseBody(name='body'),
}

/**
 * @summary 删除成员角色
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveMemberRoleResponse
 */
async function removeMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: $RuntimeOptions): RemoveMemberRoleResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/members/${$URL.percentEncode(MemberId)}/roles/${$URL.percentEncode(RoleName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除成员角色
 *
 * @return RemoveMemberRoleResponse
 */
async function removeMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): RemoveMemberRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return removeMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

model SetExperimentLabelsRequest {
  labels?: [
    LabelInfo
  ](name='Labels'),
}

model SetExperimentLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model SetExperimentLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetExperimentLabelsResponseBody(name='body'),
}

/**
 * @summary 更新实验标签
 *
 * @param request SetExperimentLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetExperimentLabelsResponse
 */
async function setExperimentLabelsWithOptions(ExperimentId: string, request: SetExperimentLabelsRequest, headers: map[string]string, runtime: $RuntimeOptions): SetExperimentLabelsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetExperimentLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${$URL.percentEncode(ExperimentId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新实验标签
 *
 * @param request SetExperimentLabelsRequest
 * @return SetExperimentLabelsResponse
 */
async function setExperimentLabels(ExperimentId: string, request: SetExperimentLabelsRequest): SetExperimentLabelsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return setExperimentLabelsWithOptions(ExperimentId, request, headers, runtime);
}

model StopDatasetJobRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model StopDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='F620FFD3-FFDC-5873-A70C-6971CC45F467'),
}

model StopDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDatasetJobResponseBody(name='body'),
}

/**
 * @summary 停止数据集任务
 *
 * @param request StopDatasetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDatasetJobResponse
 */
async function stopDatasetJobWithOptions(DatasetId: string, DatasetJobId: string, request: StopDatasetJobRequest, headers: map[string]string, runtime: $RuntimeOptions): StopDatasetJobResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    body['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopDatasetJob',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs/${$URL.percentEncode(DatasetJobId)}/action/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 停止数据集任务
 *
 * @param request StopDatasetJobRequest
 * @return StopDatasetJobResponse
 */
async function stopDatasetJob(DatasetId: string, DatasetJobId: string, request: StopDatasetJobRequest): StopDatasetJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return stopDatasetJobWithOptions(DatasetId, DatasetJobId, request, headers, runtime);
}

model UpdateCodeSourceRequest {
  codeBranch?: string(name='CodeBranch', example='dev'),
  codeCommit?: string(name='CodeCommit'),
  codeRepo?: string(name='CodeRepo'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  mountPath?: string(name='MountPath', example='/root/code/code-source-1'),
}

model UpdateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20********'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCodeSourceResponseBody(name='body'),
}

/**
 * @summary 更新代码配置
 *
 * @param request UpdateCodeSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCodeSourceResponse
 */
async function updateCodeSourceWithOptions(CodeSourceId: string, request: UpdateCodeSourceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateCodeSourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.codeBranch)) {
    body['CodeBranch'] = request.codeBranch;
  }
  if (!$isNull(request.codeCommit)) {
    body['CodeCommit'] = request.codeCommit;
  }
  if (!$isNull(request.codeRepo)) {
    body['CodeRepo'] = request.codeRepo;
  }
  if (!$isNull(request.codeRepoAccessToken)) {
    body['CodeRepoAccessToken'] = request.codeRepoAccessToken;
  }
  if (!$isNull(request.codeRepoUserName)) {
    body['CodeRepoUserName'] = request.codeRepoUserName;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${$URL.percentEncode(CodeSourceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新代码配置
 *
 * @param request UpdateCodeSourceRequest
 * @return UpdateCodeSourceResponse
 */
async function updateCodeSource(CodeSourceId: string, request: UpdateCodeSourceRequest): UpdateCodeSourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateCodeSourceWithOptions(CodeSourceId, request, headers, runtime);
}

model UpdateDatasetRequest {
  description?: string(name='Description'),
  mountAccessReadWriteRoleIdList?: [ string ](name='MountAccessReadWriteRoleIdList'),
  name?: string(name='Name', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetResponseBody(name='body'),
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDatasetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetResponse
 */
async function updateDatasetWithOptions(DatasetId: string, request: UpdateDatasetRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasetResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.mountAccessReadWriteRoleIdList)) {
    body['MountAccessReadWriteRoleIdList'] = request.mountAccessReadWriteRoleIdList;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDatasetRequest
 * @return UpdateDatasetResponse
 */
async function updateDataset(DatasetId: string, request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetWithOptions(DatasetId, request, headers, runtime);
}

model UpdateDatasetFileMetasRequest {
  datasetFileMetas?: [
    DatasetFileMetaConentUpdate
  ](name='DatasetFileMetas', description='This parameter is required.'),
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  tagJobId?: string(name='TagJobId', example='dsjob-hv0b1****u8taig3y'),
  workspaceId?: string(name='WorkspaceId', example='796**'),
}

model UpdateDatasetFileMetasResponseBody = {
  failedDetails?: [
    DatasetFileMetaResponse
  ](name='FailedDetails'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: boolean(name='Status', example='true'),
}

model UpdateDatasetFileMetasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetFileMetasResponseBody(name='body'),
}

/**
 * @summary 批量更新数据集下的文件元数据记录
 *
 * @param request UpdateDatasetFileMetasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetFileMetasResponse
 */
async function updateDatasetFileMetasWithOptions(DatasetId: string, request: UpdateDatasetFileMetasRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasetFileMetasResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasetFileMetas)) {
    body['DatasetFileMetas'] = request.datasetFileMetas;
  }
  if (!$isNull(request.datasetVersion)) {
    body['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.tagJobId)) {
    body['TagJobId'] = request.tagJobId;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDatasetFileMetas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetfilemetas`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 批量更新数据集下的文件元数据记录
 *
 * @param request UpdateDatasetFileMetasRequest
 * @return UpdateDatasetFileMetasResponse
 */
async function updateDatasetFileMetas(DatasetId: string, request: UpdateDatasetFileMetasRequest): UpdateDatasetFileMetasResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetFileMetasWithOptions(DatasetId, request, headers, runtime);
}

model UpdateDatasetJobRequest {
  datasetVersion?: string(name='DatasetVersion', example='v1'),
  description?: string(name='Description'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model UpdateDatasetJobResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobResponseBody(name='body'),
}

/**
 * @summary 更新数据集任务
 *
 * @param request UpdateDatasetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetJobResponse
 */
async function updateDatasetJobWithOptions(DatasetId: string, DatasetJobId: string, request: UpdateDatasetJobRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasetJobResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.datasetVersion)) {
    body['DatasetVersion'] = request.datasetVersion;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDatasetJob',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobs/${$URL.percentEncode(DatasetJobId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新数据集任务
 *
 * @param request UpdateDatasetJobRequest
 * @return UpdateDatasetJobResponse
 */
async function updateDatasetJob(DatasetId: string, DatasetJobId: string, request: UpdateDatasetJobRequest): UpdateDatasetJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetJobWithOptions(DatasetId, DatasetJobId, request, headers, runtime);
}

model UpdateDatasetJobConfigRequest {
  config?: string(name='Config', example='{ "apiKey":"sk-xxxxxxxxxxxxxxxxxxxxx" }'),
  configType?: string(name='ConfigType', example='MultimodalSemanticIndex'),
  workspaceId?: string(name='WorkspaceId', example='167497'),
}

model UpdateDatasetJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model UpdateDatasetJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetJobConfigResponseBody(name='body'),
}

/**
 * @summary 更新数据集任务配置
 *
 * @param request UpdateDatasetJobConfigRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetJobConfigResponse
 */
async function updateDatasetJobConfigWithOptions(DatasetId: string, DatasetJobConfigId: string, request: UpdateDatasetJobConfigRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasetJobConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.config)) {
    body['Config'] = request.config;
  }
  if (!$isNull(request.configType)) {
    body['ConfigType'] = request.configType;
  }
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDatasetJobConfig',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/datasetjobconfigs/${$URL.percentEncode(DatasetJobConfigId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新数据集任务配置
 *
 * @param request UpdateDatasetJobConfigRequest
 * @return UpdateDatasetJobConfigResponse
 */
async function updateDatasetJobConfig(DatasetId: string, DatasetJobConfigId: string, request: UpdateDatasetJobConfigRequest): UpdateDatasetJobConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetJobConfigWithOptions(DatasetId, DatasetJobConfigId, request, headers, runtime);
}

model UpdateDatasetVersionRequest {
  dataCount?: long(name='DataCount', example='100'),
  dataSize?: long(name='DataSize', example='100000'),
  description?: string(name='Description'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
}

model UpdateDatasetVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDatasetVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetVersionResponseBody(name='body'),
}

/**
 * @summary 更新指定版本的数据集信息
 *
 * @param request UpdateDatasetVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetVersionResponse
 */
async function updateDatasetVersionWithOptions(DatasetId: string, VersionName: string, request: UpdateDatasetVersionRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDatasetVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataCount)) {
    body['DataCount'] = request.dataCount;
  }
  if (!$isNull(request.dataSize)) {
    body['DataSize'] = request.dataSize;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDatasetVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${$URL.percentEncode(DatasetId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新指定版本的数据集信息
 *
 * @param request UpdateDatasetVersionRequest
 * @return UpdateDatasetVersionResponse
 */
async function updateDatasetVersion(DatasetId: string, VersionName: string, request: UpdateDatasetVersionRequest): UpdateDatasetVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetVersionWithOptions(DatasetId, VersionName, request, headers, runtime);
}

model UpdateDefaultWorkspaceRequest {
  workspaceId?: string(name='WorkspaceId', example='12345'),
}

model UpdateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='17915******4216'),
}

model UpdateDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDefaultWorkspaceResponseBody(name='body'),
}

/**
 * @summary 更新默认工作空间
 *
 * @param request UpdateDefaultWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspaceWithOptions(request: UpdateDefaultWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateDefaultWorkspaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新默认工作空间
 *
 * @param request UpdateDefaultWorkspaceRequest
 * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspace(request: UpdateDefaultWorkspaceRequest): UpdateDefaultWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDefaultWorkspaceWithOptions(request, headers, runtime);
}

model UpdateExperimentRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  name?: string(name='Name', description='名称', example='myName'),
}

model UpdateExperimentResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExperimentResponseBody(name='body'),
}

/**
 * @summary 更新实验
 *
 * @param request UpdateExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateExperimentResponse
 */
async function updateExperimentWithOptions(ExperimentId: string, request: UpdateExperimentRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateExperimentResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateExperiment',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/experiments/${$URL.percentEncode(ExperimentId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新实验
 *
 * @param request UpdateExperimentRequest
 * @return UpdateExperimentResponse
 */
async function updateExperiment(ExperimentId: string, request: UpdateExperimentRequest): UpdateExperimentResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateExperimentWithOptions(ExperimentId, request, headers, runtime);
}

model UpdateModelRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='nlp'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://*.md'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  task?: string(name='Task', example='text-classification'),
}

model UpdateModelResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model UpdateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelResponseBody(name='body'),
}

/**
 * @summary 更新模型
 *
 * @param request UpdateModelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelResponse
 */
async function updateModelWithOptions(ModelId: string, request: UpdateModelRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateModelResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!$isNull(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!$isNull(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!$isNull(request.modelDescription)) {
    body['ModelDescription'] = request.modelDescription;
  }
  if (!$isNull(request.modelDoc)) {
    body['ModelDoc'] = request.modelDoc;
  }
  if (!$isNull(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!$isNull(request.modelType)) {
    body['ModelType'] = request.modelType;
  }
  if (!$isNull(request.orderNumber)) {
    body['OrderNumber'] = request.orderNumber;
  }
  if (!$isNull(request.origin)) {
    body['Origin'] = request.origin;
  }
  if (!$isNull(request.task)) {
    body['Task'] = request.task;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新模型
 *
 * @param request UpdateModelRequest
 * @return UpdateModelResponse
 */
async function updateModel(ModelId: string, request: UpdateModelRequest): UpdateModelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelWithOptions(ModelId, request, headers, runtime);
}

model UpdateModelVersionRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{     "processor": "tensorflow_gpu_1.12" }'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  versionDescription?: string(name='VersionDescription'),
}

model UpdateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D61***C4B9'),
}

model UpdateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelVersionResponseBody(name='body'),
}

/**
 * @summary 更新模型版本
 *
 * @param request UpdateModelVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelVersionResponse
 */
async function updateModelVersionWithOptions(ModelId: string, VersionName: string, request: UpdateModelVersionRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateModelVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.approvalStatus)) {
    body['ApprovalStatus'] = request.approvalStatus;
  }
  if (!$isNull(request.compressionSpec)) {
    body['CompressionSpec'] = request.compressionSpec;
  }
  if (!$isNull(request.evaluationSpec)) {
    body['EvaluationSpec'] = request.evaluationSpec;
  }
  if (!$isNull(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!$isNull(request.inferenceSpec)) {
    body['InferenceSpec'] = request.inferenceSpec;
  }
  if (!$isNull(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!$isNull(request.options)) {
    body['Options'] = request.options;
  }
  if (!$isNull(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!$isNull(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.trainingSpec)) {
    body['TrainingSpec'] = request.trainingSpec;
  }
  if (!$isNull(request.versionDescription)) {
    body['VersionDescription'] = request.versionDescription;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${$URL.percentEncode(ModelId)}/versions/${$URL.percentEncode(VersionName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新模型版本
 *
 * @param request UpdateModelVersionRequest
 * @return UpdateModelVersionResponse
 */
async function updateModelVersion(ModelId: string, VersionName: string, request: UpdateModelVersionRequest): UpdateModelVersionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelVersionWithOptions(ModelId, VersionName, request, headers, runtime);
}

model UpdateRunRequest {
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name', example='myName'),
  params?: [
    RunParam
  ](name='Params'),
}

model UpdateRunResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='ADF6D849-*****-7E7030F0CE53'),
}

model UpdateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRunResponseBody(name='body'),
}

/**
 * @summary 更新Run
 *
 * @param request UpdateRunRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRunResponse
 */
async function updateRunWithOptions(RunId: string, request: UpdateRunRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateRunResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.params)) {
    body['Params'] = request.params;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRun',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/runs/${$URL.percentEncode(RunId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新Run
 *
 * @param request UpdateRunRequest
 * @return UpdateRunResponse
 */
async function updateRun(RunId: string, request: UpdateRunRequest): UpdateRunResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRunWithOptions(RunId, request, headers, runtime);
}

model UpdateWorkspaceRequest {
  description?: string(name='Description', example='Description'),
  displayName?: string(name='DisplayName', example='workspace-example'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceResponse
 */
async function updateWorkspaceWithOptions(WorkspaceId: string, request: UpdateWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateWorkspaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateWorkspaceRequest
 * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(WorkspaceId: string, request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

model UpdateWorkspaceResourceRequest {
  groupName?: string(name='GroupName', example='group-kjds******sd'),
  isDefault?: boolean(name='IsDefault', example='true'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  productType?: string(name='ProductType', example='MaxCompute'),
  resourceIds?: [ string ](name='ResourceIds'),
  resourceType?: string(name='ResourceType'),
  spec?: map[string]any(name='Spec'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model UpdateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 更新工作空间资源
 *
 * @param request UpdateWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResourceWithOptions(WorkspaceId: string, request: UpdateWorkspaceResourceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateWorkspaceResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!$isNull(request.isDefault)) {
    body['IsDefault'] = request.isDefault;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!$isNull(request.resourceIds)) {
    body['ResourceIds'] = request.resourceIds;
  }
  if (!$isNull(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${$URL.percentEncode(WorkspaceId)}/resources`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新工作空间资源
 *
 * @param request UpdateWorkspaceResourceRequest
 * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResource(WorkspaceId: string, request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

