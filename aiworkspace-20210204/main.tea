/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiworkspace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user'),
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  mountPath?: string(name='MountPath', example='/root/code/'),
  userId?: string(name='UserId', example='1157290171663117'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model Collection {
  collectionName?: string(name='CollectionName', example='AI4D'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  userId?: string(name='UserId', example='155770209******'),
}

model Dataset {
  accessibility?: string(name='Accessibility', example='PRIVATE PUBLIC'),
  dataSourceType?: string(name='DataSourceType', example='OSS URL'),
  dataType?: string(name='DataType', example='COMMON PIC TEXT VIDEO AUDIO'),
  datasetId?: string(name='DatasetId', example='d-c0h44g3wlwkj8o4348'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name'),
  options?: string(name='Options', example='jsonstring'),
  ownerId?: string(name='OwnerId'),
  property?: string(name='Property', example='FILE DIRECTORY TABULAR'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceId?: string(name='SourceId', example='Source Id'),
  sourceType?: string(name='SourceType', example='USER ITAG  PAI_PUBLIC_DATASET'),
  uri?: string(name='Uri', example='oss://xxx'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId', example='Workspace Id'),
}

model DatasetLabel {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model Experiment {
  artifactUri?: string(name='ArtifactUri'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [  map[string]any ](name='Labels'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  tensorboardLogUri?: string(name='TensorboardLogUri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model ExperimentLabel {
  experimentId?: string(name='ExperimentId', example='exp-890waerw09a0f'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model Label {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model LabelInfo {
  key?: string(name='Key', example='key'),
  value?: string(name='Value', example='value'),
}

model Model {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-1123*****'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1557702098******'),
  provider?: string(name='Provider', example='pai'),
  task?: string(name='Task', example='text-classifiaction'),
  userId?: string(name='UserId', example='1557702098******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model ModelVersion {
  approvalStatus?: string(name='ApprovalStatus'),
  compressionSpec?: map[string]any(name='CompressionSpec'),
  evaluationSpec?: map[string]any(name='EvaluationSpec'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId', example='155770209******'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trainingSpec?: map[string]any(name='TrainingSpec'),
  uri?: string(name='Uri', example='oss://bucket/path-to-model'),
  userId?: string(name='UserId', example='155770209******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='1.0.0'),
}

model ServiceTemplate {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{     "processor": "tensorflow_gpu_1.12" }'),
  labels?: [
    Label
  ](name='Labels'),
  orderNumber?: long(name='OrderNumber', example='1'),
  ownerId?: string(name='OwnerId', example='155770209****904'),
  provider?: string(name='Provider', example='pai'),
  serviceTemplateDescription?: string(name='ServiceTemplateDescription', example='这里是一个描述。'),
  serviceTemplateDoc?: string(name='ServiceTemplateDoc', example='https://***.md'),
  serviceTemplateId?: string(name='ServiceTemplateId', example='st-asdkjf**skdhh'),
  serviceTemplateName?: string(name='ServiceTemplateName', example='foo'),
  userId?: string(name='UserId', example='155770209****904'),
}

model Trial {
  accessibility?: string(name='Accessibility'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [  map[string]any ](name='Labels'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  trialId?: string(name='TrialId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model TrialLabel {
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-12-27T03:30:04Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-12-27T03:30:04Z'),
  key?: string(name='Key', example='key'),
  trialId?: string(name='TrialId'),
  value?: string(name='Value', example='value'),
}

model AddImageRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  description?: string(name='Description'),
  imageId?: string(name='ImageId'),
  imageUri?: string(name='ImageUri', description='This parameter is required.', example='registry.cn-hangzhou.aliyuncs.com/pai-compression/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  name?: string(name='Name', description='This parameter is required.', example='nlp-compression'),
  size?: int32(name='Size'),
  workspaceId?: string(name='WorkspaceId', example='15******45'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', example='image-4c62******53uor'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageResponseBody(name='body'),
}

/**
 * @summary 增加 Image
 *
 * @param request AddImageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddImageResponse
 */
async function addImageWithOptions(request: AddImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUri)) {
    body['ImageUri'] = request.imageUri;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 增加 Image
 *
 * @param request AddImageRequest
 * @return AddImageResponse
 */
async function addImage(request: AddImageRequest): AddImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageWithOptions(request, headers, runtime);
}

model AddImageLabelsRequest {
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels', description='This parameter is required.'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageLabelsResponseBody(name='body'),
}

/**
 * @summary 增加 Image 的标签
 *
 * @param request AddImageLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddImageLabelsResponse
 */
async function addImageLabelsWithOptions(ImageId: string, request: AddImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 增加 Image 的标签
 *
 * @param request AddImageLabelsRequest
 * @return AddImageLabelsResponse
 */
async function addImageLabels(ImageId: string, request: AddImageLabelsRequest): AddImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageLabelsWithOptions(ImageId, request, headers, runtime);
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model AddMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMemberRoleResponseBody(name='body'),
}

/**
 * @summary 增加成员角色
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMemberRoleResponse
 */
async function addMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): AddMemberRoleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AddMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members/${OpenApiUtil.getEncodeParam(MemberId)}/roles/${OpenApiUtil.getEncodeParam(RoleName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 增加成员角色
 *
 * @return AddMemberRoleResponse
 */
async function addMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): AddMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

model CreateCodeSourceRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/******'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='***'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='use***'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', description='This parameter is required.', example='MyCodeSource1'),
  mountPath?: string(name='MountPath', example='/root/code/code-source-1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='1234'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20********'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3**********'),
}

model CreateCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCodeSourceResponseBody(name='body'),
}

/**
 * @summary 创建一个代码源配置
 *
 * @param request CreateCodeSourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCodeSourceResponse
 */
async function createCodeSourceWithOptions(request: CreateCodeSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCodeSourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.codeBranch)) {
    body['CodeBranch'] = request.codeBranch;
  }
  if (!Util.isUnset(request.codeRepo)) {
    body['CodeRepo'] = request.codeRepo;
  }
  if (!Util.isUnset(request.codeRepoAccessToken)) {
    body['CodeRepoAccessToken'] = request.codeRepoAccessToken;
  }
  if (!Util.isUnset(request.codeRepoUserName)) {
    body['CodeRepoUserName'] = request.codeRepoUserName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个代码源配置
 *
 * @param request CreateCodeSourceRequest
 * @return CreateCodeSourceResponse
 */
async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeSourceWithOptions(request, headers, runtime);
}

model CreateDatasetRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  dataSourceType?: string(name='DataSourceType', description='This parameter is required.', example='NAS'),
  dataType?: string(name='DataType', example='COMMON'),
  description?: string(name='Description'),
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name', description='This parameter is required.', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  property?: string(name='Property', description='This parameter is required.', example='DIRECTORY'),
  provider?: string(name='Provider'),
  providerType?: string(name='ProviderType', example='Ecs'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='USER'),
  uri?: string(name='Uri', description='This parameter is required.', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', example='29884000000186970'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', example='d-rbvg5*****jhc9ks92'),
  requestId?: string(name='RequestId', example='B2C51F93-1C07-5477-9705-5FDB****F19F'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDatasetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetResponse
 */
async function createDatasetWithOptions(request: CreateDatasetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataType)) {
    body['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.provider)) {
    body['Provider'] = request.provider;
  }
  if (!Util.isUnset(request.providerType)) {
    body['ProviderType'] = request.providerType;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDatasetRequest
 * @return CreateDatasetResponse
 */
async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetWithOptions(request, headers, runtime);
}

model CreateDatasetLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='A083731B-4973-54D1-B324-E53****4DD44'),
}

model CreateDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新 Dataset 的标签
 *
 * @param request CreateDatasetLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabelsWithOptions(DatasetId: string, request: CreateDatasetLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatasetLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建或更新 Dataset 的标签
 *
 * @param request CreateDatasetLabelsRequest
 * @return CreateDatasetLabelsResponse
 */
async function createDatasetLabels(DatasetId: string, request: CreateDatasetLabelsRequest): CreateDatasetLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

model CreateMemberRequest {
  members?: [ 
    {
      roles?: [ string ](name='Roles', description='This parameter is required.'),
      userId?: string(name='UserId', description='This parameter is required.', example='21513926******88039'),
    }
  ](name='Members', description='This parameter is required.'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', example='myDisplayName'),
      memberId?: string(name='MemberId', example='145883-21513926******88039'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='21513926******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='DA869D1B-035A-43B2-ACC1-C56681BD9FAA'),
}

model CreateMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemberResponseBody(name='body'),
}

/**
 * @summary 创建成员
 *
 * @param request CreateMemberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemberResponse
 */
async function createMemberWithOptions(WorkspaceId: string, request: CreateMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.members)) {
    body['Members'] = request.members;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建成员
 *
 * @param request CreateMemberRequest
 * @return CreateMemberResponse
 */
async function createMember(WorkspaceId: string, request: CreateMemberRequest): CreateMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemberWithOptions(WorkspaceId, request, headers, runtime);
}

model CreateModelRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  domain?: string(name='Domain', example='nlp'),
  extraInfo?: map[string]any(name='ExtraInfo', nullable=true),
  labels?: [
    Label
  ](name='Labels'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://*.md'),
  modelName?: string(name='ModelName', description='This parameter is required.'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  task?: string(name='Task', example='text-classification'),
  workspaceId?: string(name='WorkspaceId', example='796**'),
}

model CreateModelResponseBody = {
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  requestId?: string(name='RequestId', example='9DAD3112-AE22-5563-9A02-5C7E8****E35'),
}

model CreateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelResponseBody(name='body'),
}

/**
 * @summary 创建模型
 *
 * @param request CreateModelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelResponse
 */
async function createModelWithOptions(request: CreateModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.modelDescription)) {
    body['ModelDescription'] = request.modelDescription;
  }
  if (!Util.isUnset(request.modelDoc)) {
    body['ModelDoc'] = request.modelDoc;
  }
  if (!Util.isUnset(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.modelType)) {
    body['ModelType'] = request.modelType;
  }
  if (!Util.isUnset(request.orderNumber)) {
    body['OrderNumber'] = request.orderNumber;
  }
  if (!Util.isUnset(request.origin)) {
    body['Origin'] = request.origin;
  }
  if (!Util.isUnset(request.task)) {
    body['Task'] = request.task;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建模型
 *
 * @param request CreateModelRequest
 * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelWithOptions(request, headers, runtime);
}

model CreateModelLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='F81D9EC0-1872-50F5-A96C-A0647D****1D'),
}

model CreateModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新模型的标签
 *
 * @param request CreateModelLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelLabelsResponse
 */
async function createModelLabelsWithOptions(ModelId: string, request: CreateModelLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateModelLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建或更新模型的标签
 *
 * @param request CreateModelLabelsRequest
 * @return CreateModelLabelsResponse
 */
async function createModelLabels(ModelId: string, request: CreateModelLabelsRequest): CreateModelLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelLabelsWithOptions(ModelId, request, headers, runtime);
}

model CreateModelVersionRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  uri?: string(name='Uri', description='This parameter is required.', example='oss://mybucket.oss-cn-beijing.aliyuncs.com/mypath/'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model CreateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='21645FCD-BAB9-5742-89AE-AEB27****B2E'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model CreateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionResponseBody(name='body'),
}

/**
 * @summary 创建模型版本
 *
 * @param request CreateModelVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelVersionResponse
 */
async function createModelVersionWithOptions(ModelId: string, request: CreateModelVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.approvalStatus)) {
    body['ApprovalStatus'] = request.approvalStatus;
  }
  if (!Util.isUnset(request.compressionSpec)) {
    body['CompressionSpec'] = request.compressionSpec;
  }
  if (!Util.isUnset(request.evaluationSpec)) {
    body['EvaluationSpec'] = request.evaluationSpec;
  }
  if (!Util.isUnset(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.formatType)) {
    body['FormatType'] = request.formatType;
  }
  if (!Util.isUnset(request.frameworkType)) {
    body['FrameworkType'] = request.frameworkType;
  }
  if (!Util.isUnset(request.inferenceSpec)) {
    body['InferenceSpec'] = request.inferenceSpec;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.trainingSpec)) {
    body['TrainingSpec'] = request.trainingSpec;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.versionDescription)) {
    body['VersionDescription'] = request.versionDescription;
  }
  if (!Util.isUnset(request.versionName)) {
    body['VersionName'] = request.versionName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建模型版本
 *
 * @param request CreateModelVersionRequest
 * @return CreateModelVersionResponse
 */
async function createModelVersion(ModelId: string, request: CreateModelVersionRequest): CreateModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelVersionWithOptions(ModelId, request, headers, runtime);
}

model CreateModelVersionLabelsRequest {
  labels?: [
    Label
  ](name='Labels'),
}

model CreateModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model CreateModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModelVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 创建或更新模型版本的标签
 *
 * @param request CreateModelVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabelsWithOptions(ModelId: string, VersionName: string, request: CreateModelVersionLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelVersionLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateModelVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions/${OpenApiUtil.getEncodeParam(VersionName)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建或更新模型版本的标签
 *
 * @param request CreateModelVersionLabelsRequest
 * @return CreateModelVersionLabelsResponse
 */
async function createModelVersionLabels(ModelId: string, VersionName: string, request: CreateModelVersionLabelsRequest): CreateModelVersionLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelVersionLabelsWithOptions(ModelId, VersionName, request, headers, runtime);
}

model CreateProductOrdersRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  products?: [ 
    {
      autoRenew?: boolean(name='AutoRenew', example='true'),
      chargeType?: string(name='ChargeType', example='POSTPAY'),
      duration?: long(name='Duration', example='1'),
      instanceProperties?: [ 
        {
          code?: string(name='Code', example='commodity_type。'),
          name?: string(name='Name'),
          value?: string(name='Value', example='oss。'),
        }
      ](name='InstanceProperties'),
      orderType?: string(name='OrderType', example='BUY'),
      pricingCycle?: string(name='PricingCycle', example='Month'),
      productCode?: string(name='ProductCode', example='DataWorks_share'),
    }
  ](name='Products'),
}

model CreateProductOrdersResponseBody = {
  buyProductRequestId?: string(name='BuyProductRequestId', example='3ed6a882-0d85-4dd8-ad36-cd8d74ab9fdb'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId', example='210292536260646'),
  requestId?: string(name='RequestId', example='ksdjf-jksd-*****slkdjf'),
}

model CreateProductOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductOrdersResponseBody(name='body'),
}

/**
 * @summary 创建产品订单
 *
 * @param request CreateProductOrdersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductOrdersResponse
 */
async function createProductOrdersWithOptions(request: CreateProductOrdersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProductOrdersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.products)) {
    body['Products'] = request.products;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductOrders',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/productorders`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建产品订单
 *
 * @param request CreateProductOrdersRequest
 * @return CreateProductOrdersResponse
 */
async function createProductOrders(request: CreateProductOrdersRequest): CreateProductOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductOrdersWithOptions(request, headers, runtime);
}

model CreateWorkspaceRequest {
  description?: string(name='Description', description='This parameter is required.', example='description'),
  displayName?: string(name='DisplayName', example='display name'),
  envTypes?: [ string ](name='EnvTypes', description='This parameter is required.'),
  workspaceName?: string(name='WorkspaceName', description='This parameter is required.', example='workspace_example'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
 * @summary 创建工作空间
 *
 * @param request CreateWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceResponse
 */
async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.envTypes)) {
    body['EnvTypes'] = request.envTypes;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工作空间
 *
 * @param request CreateWorkspaceRequest
 * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

model CreateWorkspaceResourceRequest {
  option?: string(name='Option', example='CreateAndAttach'),
  resources?: [ 
    {
      envType?: string(name='EnvType', description='This parameter is required.', example='prod'),
      groupName?: string(name='GroupName', example='groupName'),
      isDefault?: boolean(name='IsDefault', example='false'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name', description='This parameter is required.', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          id?: string(name='Id', description='This parameter is required.', example='232892******92912'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec'),
      workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='123'),
    }
  ](name='Resources', description='This parameter is required.'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      id?: string(name='Id', example='1234'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='1'),
}

model CreateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 创建资源
 *
 * @param request CreateWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResourceWithOptions(WorkspaceId: string, request: CreateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.option)) {
    body['Option'] = request.option;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建资源
 *
 * @param request CreateWorkspaceResourceRequest
 * @return CreateWorkspaceResourceResponse
 */
async function createWorkspaceResource(WorkspaceId: string, request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeSourceResponseBody(name='body'),
}

/**
 * @summary 删除一个代码源配置
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCodeSourceResponse
 */
async function deleteCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCodeSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${OpenApiUtil.getEncodeParam(CodeSourceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个代码源配置
 *
 * @return DeleteCodeSourceResponse
 */
async function deleteCodeSource(CodeSourceId: string): DeleteCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

/**
 * @summary 删除数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetResponse
 */
async function deleteDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据集
 *
 * @return DeleteDatasetResponse
 */
async function deleteDataset(DatasetId: string): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetWithOptions(DatasetId, headers, runtime);
}

model DeleteDatasetLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', example='64B50C1D-D4C2-560C-86A3-A6ED****16D'),
}

model DeleteDatasetLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetLabelsResponseBody(name='body'),
}

/**
 * @summary 删除 Dataset 的标签
 *
 * @param request DeleteDatasetLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabelsWithOptions(DatasetId: string, request: DeleteDatasetLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatasetLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除 Dataset 的标签
 *
 * @param request DeleteDatasetLabelsRequest
 * @return DeleteDatasetLabelsResponse
 */
async function deleteDatasetLabels(DatasetId: string, request: DeleteDatasetLabelsRequest): DeleteDatasetLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

model DeleteMembersRequest {
  memberIds?: string(name='MemberIds', description='This parameter is required.', example='145883-21513926******88039,145883-2769726******87513'),
}

model DeleteMembersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D619B5C4B9'),
}

model DeleteMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMembersResponseBody(name='body'),
}

/**
 * @summary 删除工作空间成员
 *
 * @param request DeleteMembersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMembersResponse
 */
async function deleteMembersWithOptions(WorkspaceId: string, request: DeleteMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMembersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.memberIds)) {
    query['MemberIds'] = request.memberIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除工作空间成员
 *
 * @param request DeleteMembersRequest
 * @return DeleteMembersResponse
 */
async function deleteMembers(WorkspaceId: string, request: DeleteMembersRequest): DeleteMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMembersWithOptions(WorkspaceId, request, headers, runtime);
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelResponseBody(name='body'),
}

/**
 * @summary 删除模型
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelResponse
 */
async function deleteModelWithOptions(ModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除模型
 *
 * @return DeleteModelResponse
 */
async function deleteModel(ModelId: string): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelWithOptions(ModelId, headers, runtime);
}

model DeleteModelLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteModelLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelLabelsResponseBody(name='body'),
}

/**
 * @summary 删除模型的标签
 *
 * @param request DeleteModelLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelLabelsResponse
 */
async function deleteModelLabelsWithOptions(ModelId: string, request: DeleteModelLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteModelLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除模型的标签
 *
 * @param request DeleteModelLabelsRequest
 * @return DeleteModelLabelsResponse
 */
async function deleteModelLabels(ModelId: string, request: DeleteModelLabelsRequest): DeleteModelLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelLabelsWithOptions(ModelId, request, headers, runtime);
}

model DeleteModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionResponseBody(name='body'),
}

/**
 * @summary 删除模型版本
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelVersionResponse
 */
async function deleteModelVersionWithOptions(ModelId: string, VersionName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions/${OpenApiUtil.getEncodeParam(VersionName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除模型版本
 *
 * @return DeleteModelVersionResponse
 */
async function deleteModelVersion(ModelId: string, VersionName: string): DeleteModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelVersionWithOptions(ModelId, VersionName, headers, runtime);
}

model DeleteModelVersionLabelsRequest {
  labelKeys?: string(name='LabelKeys', example='key1,key2'),
}

model DeleteModelVersionLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteModelVersionLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModelVersionLabelsResponseBody(name='body'),
}

/**
 * @summary 删除模型版本的标签
 *
 * @param request DeleteModelVersionLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabelsWithOptions(ModelId: string, VersionName: string, request: DeleteModelVersionLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelVersionLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteModelVersionLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions/${OpenApiUtil.getEncodeParam(VersionName)}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除模型版本的标签
 *
 * @param request DeleteModelVersionLabelsRequest
 * @return DeleteModelVersionLabelsResponse
 */
async function deleteModelVersionLabels(ModelId: string, VersionName: string, request: DeleteModelVersionLabelsRequest): DeleteModelVersionLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelVersionLabelsWithOptions(ModelId, VersionName, request, headers, runtime);
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
 * @summary 删除工作空间
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceResponse
 */
async function deleteWorkspaceWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除工作空间
 *
 * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(WorkspaceId: string): DeleteWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceWithOptions(WorkspaceId, headers, runtime);
}

model DeleteWorkspaceResourceRequest {
  groupName?: string(name='GroupName', example='group'),
  labels?: string(name='Labels'),
  option?: string(name='Option', example='DetachAndDelete'),
  productType?: string(name='ProductType', example='DLC'),
  resourceIds?: string(name='ResourceIds'),
  resourceType?: string(name='ResourceType'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model DeleteWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 删除工作空间资源
 *
 * @param request DeleteWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResourceWithOptions(WorkspaceId: string, request: DeleteWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除工作空间资源
 *
 * @param request DeleteWorkspaceResourceRequest
 * @return DeleteWorkspaceResourceResponse
 */
async function deleteWorkspaceResource(WorkspaceId: string, request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

model GetCodeSourceResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da10***********'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', example='xxxx'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user1'),
  codeSourceId?: string(name='CodeSourceId', example='code-202**********'),
  description?: string(name='Description', example='This is my data source 1.'),
  displayName?: string(name='DisplayName', example='MyCodeSource1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T23:36:01.123Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T23:36:01.123Z'),
  mountPath?: string(name='MountPath', example='/root/code'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  userId?: string(name='UserId', example='1722********'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model GetCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCodeSourceResponseBody(name='body'),
}

/**
 * @summary 获取一个代码源配置
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCodeSourceResponse
 */
async function getCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${OpenApiUtil.getEncodeParam(CodeSourceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个代码源配置
 *
 * @return GetCodeSourceResponse
 */
async function getCodeSource(CodeSourceId: string): GetCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model GetDatasetResponseBody = {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  dataSourceType?: string(name='DataSourceType', example='NAS'),
  dataType?: string(name='DataType', example='COMMON'),
  datasetId?: string(name='DatasetId', example='d-rbvg5wz****c9ks92'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
  ownerId?: string(name='OwnerId', example='1631044****3440'),
  property?: string(name='Property', example='DIRECTORY'),
  provider?: string(name='Provider'),
  providerType?: string(name='ProviderType'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceId?: string(name='SourceId', example='jdnhf***fnrimv'),
  sourceType?: string(name='SourceType', example='USER'),
  uri?: string(name='Uri', example='nas://09f****f2.cn-hangzhou/'),
  userId?: string(name='UserId', example='2485765****023475'),
  workspaceId?: string(name='WorkspaceId', example='478**'),
}

model GetDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetResponseBody(name='body'),
}

/**
 * @summary 获取数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatasetResponse
 */
async function getDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDatasetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集
 *
 * @return GetDatasetResponse
 */
async function getDataset(DatasetId: string): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetWithOptions(DatasetId, headers, runtime);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose', example='false'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code', example='200'),
      message?: string(name='Message', example='Create Failed'),
      type?: string(name='Type', example='CREATING'),
    }
  ](name='Conditions'),
  creator?: string(name='Creator', example='17915******4216'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  owner?: {
    userId?: string(name='UserId', example='17915******4216'),
    userKp?: string(name='UserKp', example='17915******4216'),
    userName?: string(name='UserName', example='username'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDefaultWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取默认工作空间
 *
 * @param request GetDefaultWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspaceWithOptions(request: GetDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDefaultWorkspaceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取默认工作空间
 *
 * @param request GetDefaultWorkspaceRequest
 * @return GetDefaultWorkspaceResponse
 */
async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDefaultWorkspaceWithOptions(request, headers, runtime);
}

model GetImageRequest {
  verbose?: boolean(name='Verbose', example='false'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  imageUri?: string(name='ImageUri', example='registry.cn-hangzhou.aliyuncs.******ession/nlp:gpu'),
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  name?: string(name='Name', example='nlp-compression'),
  parentUserId?: string(name='ParentUserId', example='15577******8921'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  size?: int32(name='Size'),
  userId?: string(name='UserId', example='15577******8921'),
  workspaceId?: string(name='WorkspaceId', example='15945'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

/**
 * @summary 获取镜像
 *
 * @param request GetImageRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageResponse
 */
async function getImageWithOptions(ImageId: string, request: GetImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetImageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取镜像
 *
 * @param request GetImageRequest
 * @return GetImageResponse
 */
async function getImage(ImageId: string, request: GetImageRequest): GetImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getImageWithOptions(ImageId, request, headers, runtime);
}

model GetMemberRequest {
  memberId?: string(name='MemberId'),
  userId?: string(name='UserId', example='21513926******88039'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName', example='myDisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  memberId?: string(name='MemberId', example='145883-21513926******88039'),
  memberName?: string(name='MemberName', example='user1'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  roles?: [ string ](name='Roles'),
  userId?: string(name='UserId', example='21513926******88039'),
}

model GetMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemberResponseBody(name='body'),
}

/**
 * @summary 获取成员
 *
 * @param request GetMemberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemberResponse
 */
async function getMemberWithOptions(WorkspaceId: string, request: GetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemberResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.memberId)) {
    query['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/member`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取成员
 *
 * @param request GetMemberRequest
 * @return GetMemberResponse
 */
async function getMember(WorkspaceId: string, request: GetMemberRequest): GetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemberWithOptions(WorkspaceId, request, headers, runtime);
}

model GetModelResponseBody = {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='cv'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://***.md'),
  modelId?: string(name='ModelId', example='model-rbvg5wzljz****ks92'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='1'),
  origin?: string(name='Origin', example='ModelScope'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  provider?: string(name='Provider', example='pai'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  task?: string(name='Task', example='text-classification'),
  userId?: string(name='UserId', example='1234567890******'),
  workspaceId?: string(name='WorkspaceId', example='234**'),
}

model GetModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelResponseBody(name='body'),
}

/**
 * @summary 获取模型
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelResponse
 */
async function getModelWithOptions(ModelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型
 *
 * @return GetModelResponse
 */
async function getModel(ModelId: string): GetModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelWithOptions(ModelId, headers, runtime);
}

model GetModelVersionResponseBody = {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
    "Processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId', example='1234567890******'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName', example='0.1.0'),
}

model GetModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModelVersionResponseBody(name='body'),
}

/**
 * @summary 获取模型版本
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetModelVersionResponse
 */
async function getModelVersionWithOptions(ModelId: string, VersionName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions/${OpenApiUtil.getEncodeParam(VersionName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型版本
 *
 * @return GetModelVersionResponse
 */
async function getModelVersion(ModelId: string, VersionName: string): GetModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelVersionWithOptions(ModelId, VersionName, headers, runtime);
}

model GetPermissionRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  creator?: string(name='Creator', example='17915******4216'),
  option?: string(name='Option'),
  resource?: string(name='Resource'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode', example='PaiDLC:ListJobs'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility', example='PRIVATE'),
      entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
    }
  ](name='PermissionRules'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model GetPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionResponseBody(name='body'),
}

/**
 * @summary 获取权限，若无权限则返回错误
 *
 * @param request GetPermissionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPermissionResponse
 */
async function getPermissionWithOptions(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPermissionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermission',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/permissions/${OpenApiUtil.getEncodeParam(PermissionCode)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取权限，若无权限则返回错误
 *
 * @param request GetPermissionRequest
 * @return GetPermissionResponse
 */
async function getPermission(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest): GetPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPermissionWithOptions(WorkspaceId, PermissionCode, request, headers, runtime);
}

model GetServiceTemplateResponseBody = {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-30T12:51:33.028Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-30T12:51:33.028Z'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{
      "processor": "tensorflow_gpu_1.12"
}'),
  labels?: [
    Label
  ](name='Labels'),
  ownerId?: string(name='OwnerId', example='1234567890******'),
  provider?: string(name='Provider', example='pai'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  serviceTemplateDescription?: string(name='ServiceTemplateDescription', example='stable diffusion 1.5'),
  serviceTemplateDoc?: string(name='ServiceTemplateDoc', example='https://***.md'),
  serviceTemplateId?: string(name='ServiceTemplateId', example='st-rbvg5wzlj****9ks92'),
  serviceTemplateName?: string(name='ServiceTemplateName', example='stable_diffusion_aigc'),
  userId?: string(name='UserId', example='1234567890******'),
}

model GetServiceTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceTemplateResponseBody(name='body'),
}

/**
 * @summary 获取服务模版
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetServiceTemplateResponse
 */
async function getServiceTemplateWithOptions(ServiceTemplateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetServiceTemplate',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/servicetemplates/${OpenApiUtil.getEncodeParam(ServiceTemplateId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取服务模版
 *
 * @return GetServiceTemplateResponse
 */
async function getServiceTemplate(ServiceTemplateId: string): GetServiceTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceTemplateWithOptions(ServiceTemplateId, headers, runtime);
}

model GetWorkspaceRequest {
  verbose?: boolean(name='Verbose', example='true'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames'),
  creator?: string(name='Creator', example='1157******94123'),
  description?: string(name='Description', example='workspace description example'),
  displayName?: string(name='DisplayName', example='workspace-example'),
  envTypes?: [ string ](name='EnvTypes'),
  extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
  isDefault?: boolean(name='IsDefault', example='true'),
  owner?: {
    displayName?: string(name='DisplayName', example='mings****t'),
    userId?: string(name='UserId', example='1157******94123'),
    userKp?: string(name='UserKp', example='1157******94123'),
    userName?: string(name='UserName', example='mings****t'),
  }(name='Owner'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B4DED1B5A34C'),
  status?: string(name='Status', example='ENABLED'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
  workspaceName?: string(name='WorkspaceName', example='workspace-example'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取工作空间
 *
 * @param request GetWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkspaceResponse
 */
async function getWorkspaceWithOptions(WorkspaceId: string, request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工作空间
 *
 * @param request GetWorkspaceRequest
 * @return GetWorkspaceResponse
 */
async function getWorkspace(WorkspaceId: string, request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', example='MyDataSource'),
  order?: string(name='Order', example='desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtModifyTime'),
  workspaceId?: string(name='WorkspaceId', example='1234'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListCodeSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeSourcesResponseBody(name='body'),
}

/**
 * @summary 获取代码源配置列表
 *
 * @param request ListCodeSourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCodeSourcesResponse
 */
async function listCodeSourcesWithOptions(request: ListCodeSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCodeSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCodeSources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取代码源配置列表
 *
 * @param request ListCodeSourcesRequest
 * @return ListCodeSourcesResponse
 */
async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeSourcesWithOptions(request, headers, runtime);
}

model ListDatasetsRequest {
  dataSourceTypes?: string(name='DataSourceTypes', example='OSS'),
  dataTypes?: string(name='DataTypes', example='COMMON,TEXT'),
  label?: string(name='Label', example='test'),
  name?: string(name='Name', example='myName'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  properties?: string(name='Properties', example='FILE'),
  provider?: string(name='Provider'),
  sourceId?: string(name='SourceId', example='d-rbvg5wzljzjhc9ks92'),
  sourceTypes?: string(name='SourceTypes', example='USER,ITAG'),
  workspaceId?: string(name='WorkspaceId', example='324**'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListDatasetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetsResponseBody(name='body'),
}

/**
 * @summary 获取数据集列表
 *
 * @param request ListDatasetsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatasetsResponse
 */
async function listDatasetsWithOptions(request: ListDatasetsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dataSourceTypes)) {
    query['DataSourceTypes'] = request.dataSourceTypes;
  }
  if (!Util.isUnset(request.dataTypes)) {
    query['DataTypes'] = request.dataTypes;
  }
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.properties)) {
    query['Properties'] = request.properties;
  }
  if (!Util.isUnset(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceTypes)) {
    query['SourceTypes'] = request.sourceTypes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatasets',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集列表
 *
 * @param request ListDatasetsRequest
 * @return ListDatasetsResponse
 */
async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetsWithOptions(request, headers, runtime);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId', example='image-4c62******53uor'),
  labelFilter?: string(name='LabelFilter', example='system.framework=XGBoost 1.6.0,system.official=true'),
  labelKeys?: string(name='LabelKeys', example='system.framework,system.official'),
  region?: string(name='Region', example='cn-shanghai'),
  workspaceId?: string(name='WorkspaceId', example='12345'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key', example='system.chipType'),
      value?: string(name='Value', example='GPU'),
    }
  ](name='Labels'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageLabelsResponseBody(name='body'),
}

/**
 * @summary 列举标签
 *
 * @param request ListImageLabelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImageLabelsResponse
 */
async function listImageLabelsWithOptions(request: ListImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImageLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.labelFilter)) {
    query['LabelFilter'] = request.labelFilter;
  }
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/image/labels`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举标签
 *
 * @param request ListImageLabelsRequest
 * @return ListImageLabelsResponse
 */
async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImageLabelsWithOptions(request, headers, runtime);
}

model ListImagesRequest {
  accessibility?: string(name='Accessibility'),
  labels?: string(name='Labels', example='system.framework=XGBoost 1.6.0,system.official=true'),
  name?: string(name='Name', example='tensorflow_2.9'),
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  parentUserId?: string(name='ParentUserId', example='155**********904'),
  query?: string(name='Query'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  userId?: string(name='UserId', example='155**********904'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceId?: string(name='WorkspaceId', example='20******55'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility', example='PUBLIC'),
      description?: string(name='Description', example='desc'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      imageId?: string(name='ImageId', example='image-tzi7f9******s45t'),
      imageUri?: string(name='ImageUri'),
      labels?: [ 
        {
          key?: string(name='Key', example='system.chipType'),
          value?: string(name='Value', example='GPU'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='tensorflow_2.9'),
      parentUserId?: string(name='ParentUserId', example='15577******82932'),
      size?: int32(name='Size'),
      userId?: string(name='UserId', example='15577******82932'),
      workspaceId?: string(name='WorkspaceId', example='20******55'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesResponseBody(name='body'),
}

/**
 * @summary 列举已注册镜像
 *
 * @param request ListImagesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImagesResponse
 */
async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举已注册镜像
 *
 * @param request ListImagesRequest
 * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

model ListMembersRequest {
  memberName?: string(name='MemberName', example='zhangsan'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  roles?: string(name='Roles', example='PAI.AlgoDeveloper'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', example='myDisplayName'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      memberId?: string(name='MemberId', example='14588*****51688039'),
      memberName?: string(name='MemberName', example='user1'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId', example='215139******88039'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMembersResponseBody(name='body'),
}

/**
 * @summary 列举工作空间成员
 *
 * @param request ListMembersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMembersResponse
 */
async function listMembersWithOptions(WorkspaceId: string, request: ListMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMembersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.memberName)) {
    query['MemberName'] = request.memberName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.roles)) {
    query['Roles'] = request.roles;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举工作空间成员
 *
 * @param request ListMembersRequest
 * @return ListMembersResponse
 */
async function listMembers(WorkspaceId: string, request: ListMembersRequest): ListMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMembersWithOptions(WorkspaceId, request, headers, runtime);
}

model ListModelVersionsRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  formatType?: string(name='FormatType', example='SavedModel'),
  frameworkType?: string(name='FrameworkType', example='TensorFlow'),
  label?: string(name='Label', example='key1'),
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  versionName?: string(name='VersionName', example='1.0.1'),
}

model ListModelVersionsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC***3C83E'),
  totalCount?: long(name='TotalCount', example='15'),
  versions?: [
    ModelVersion
  ](name='Versions'),
}

model ListModelVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelVersionsResponseBody(name='body'),
}

/**
 * @summary 获取模型版本列表
 *
 * @param request ListModelVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelVersionsResponse
 */
async function listModelVersionsWithOptions(ModelId: string, request: ListModelVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListModelVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.approvalStatus)) {
    query['ApprovalStatus'] = request.approvalStatus;
  }
  if (!Util.isUnset(request.formatType)) {
    query['FormatType'] = request.formatType;
  }
  if (!Util.isUnset(request.frameworkType)) {
    query['FrameworkType'] = request.frameworkType;
  }
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.versionName)) {
    query['VersionName'] = request.versionName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListModelVersions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型版本列表
 *
 * @param request ListModelVersionsRequest
 * @return ListModelVersionsResponse
 */
async function listModelVersions(ModelId: string, request: ListModelVersionsRequest): ListModelVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelVersionsWithOptions(ModelId, request, headers, runtime);
}

model ListModelsRequest {
  collections?: string(name='Collections', example='AI4D,QuickStart'),
  domain?: string(name='Domain', example='nlp'),
  label?: string(name='Label', example='key1'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Endpoint'),
  order?: string(name='Order', example='DESC'),
  origin?: string(name='Origin', example='ModelScope'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  provider?: string(name='Provider', example='pai'),
  query?: string(name='Query', example='nlp'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  task?: string(name='Task', example='text-classification'),
  workspaceId?: string(name='WorkspaceId', example='324**'),
}

model ListModelsResponseBody = {
  models?: [
    Model
  ](name='Models'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListModelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModelsResponseBody(name='body'),
}

/**
 * @summary 获取模型列表
 *
 * @param request ListModelsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListModelsResponse
 */
async function listModelsWithOptions(request: ListModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListModelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.collections)) {
    query['Collections'] = request.collections;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.modelType)) {
    query['ModelType'] = request.modelType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.origin)) {
    query['Origin'] = request.origin;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.task)) {
    query['Task'] = request.task;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListModels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模型列表
 *
 * @param request ListModelsRequest
 * @return ListModelsResponse
 */
async function listModels(request: ListModelsRequest): ListModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelsWithOptions(request, headers, runtime);
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', example='PaiDLC:GetTensorboard'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', example='PRIVATE'),
          entityAccessType?: string(name='EntityAccessType', example='CREATOR'),
        }
      ](name='PermissionRules'),
    }
  ](name='Permissions'),
  requestId?: string(name='RequestId', example='2AE63638-5420-56DC-B******8174039A0'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
 * @summary 列举权限
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionsResponse
 */
async function listPermissionsWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPermissionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListPermissions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/permissions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举权限
 *
 * @return ListPermissionsResponse
 */
async function listPermissions(WorkspaceId: string): ListPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(WorkspaceId, headers, runtime);
}

model ListProductsRequest {
  productCodes?: string(name='ProductCodes', example='PAI_isolate'),
  serviceCodes?: string(name='ServiceCodes', example='oss'),
  verbose?: boolean(name='Verbose'),
}

model ListProductsResponseBody = {
  products?: [ 
    {
      hasPermissionToPurchase?: boolean(name='HasPermissionToPurchase'),
      isPurchased?: boolean(name='IsPurchased', example='true'),
      productCode?: string(name='ProductCode', example='DataWorks_isolate'),
      productInstanceId?: string(name='ProductInstanceId'),
      purchaseUrl?: string(name='PurchaseUrl', example='https://common-buy.aliy'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  services?: [ 
    {
      isOpen?: boolean(name='IsOpen', example='true'),
      openUrl?: string(name='OpenUrl'),
      serviceCode?: string(name='ServiceCode', example='oss'),
    }
  ](name='Services'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
 * @summary 列举产品
 *
 * @param request ListProductsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductsResponse
 */
async function listProductsWithOptions(request: ListProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.productCodes)) {
    query['ProductCodes'] = request.productCodes;
  }
  if (!Util.isUnset(request.serviceCodes)) {
    query['ServiceCodes'] = request.serviceCodes;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProducts',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举产品
 *
 * @param request ListProductsRequest
 * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(request, headers, runtime);
}

model ListQuotasRequest {
  name?: string(name='Name', example='quota-name'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      displayName?: string(name='DisplayName'),
      id?: string(name='Id', example='1828233'),
      mode?: string(name='Mode', example='isolate'),
      name?: string(name='Name', example='quota-name'),
      productCode?: string(name='ProductCode', example='MaxCompute_share'),
      quotaType?: string(name='QuotaType', example='MaxCompute'),
      specs?: [ 
        {
          name?: string(name='Name', example='cu'),
          type?: string(name='Type', example='string'),
          value?: string(name='Value', example='11500'),
        }
      ](name='Specs', example='{\\\\"cu\\\\":\\\\"11500\\\\",\\\\"minCu\\\\":\\\\"2300\\\\",\\\\"parentId\\\\":\\\\"0\\\\"}'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasResponseBody(name='body'),
}

/**
 * @summary 获取已有配额列表
 *
 * @param request ListQuotasRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQuotasResponse
 */
async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取已有配额列表
 *
 * @param request ListQuotasRequest
 * @return ListQuotasResponse
 */
async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

model ListResourcesRequest {
  groupName?: string(name='GroupName', example='group'),
  labels?: string(name='Labels'),
  option?: string(name='Option', example='ListResourceByWorkspace'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productTypes?: string(name='ProductTypes', example='MaxCompute'),
  quotaIds?: string(name='QuotaIds'),
  resourceName?: string(name='ResourceName', example='resource'),
  resourceTypes?: string(name='ResourceTypes'),
  verbose?: boolean(name='Verbose', example='true'),
  verboseFields?: string(name='VerboseFields'),
  workspaceId?: string(name='WorkspaceId', example='123'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  resources?: [ 
    {
      encryption?: {
        algorithm?: string(name='Algorithm'),
        enabled?: boolean(name='Enabled'),
        key?: string(name='Key'),
      }(name='Encryption'),
      envType?: string(name='EnvType', example='prod'),
      executor?: {
        ownerId?: string(name='OwnerId'),
      }(name='Executor'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      groupName?: string(name='GroupName', example='groupName'),
      id?: string(name='Id', example='123'),
      isDefault?: boolean(name='IsDefault', example='true'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name', example='ResourceName'),
      productType?: string(name='ProductType', example='MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', example='cpu'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id', example='123'),
          mode?: string(name='Mode', example='develop'),
          name?: string(name='Name', example='QuotaName'),
          productCode?: string(name='ProductCode', example='MaxCompute_isolate'),
          quotaType?: string(name='QuotaType', example='MaxCompute'),
          specs?: [ 
            {
              name?: string(name='Name', example='cu'),
              value?: string(name='Value', example='11500'),
            }
          ](name='Specs', example='{\\\\"cu\\\\":\\\\"11500\\\\",\\\\"minCu\\\\":\\\\"2300\\\\",\\\\"parentId\\\\":\\\\"0\\\\"}'),
        }
      ](name='Quotas'),
      resourceType?: string(name='ResourceType'),
      spec?: map[string]any(name='Spec', example='对于MaxCompute {"Endpoint": "odps.alibaba-inc.com", "Project": "mignshi"}'),
      workspaceId?: string(name='WorkspaceId', example='123'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
 * @summary 列举工作空间资源
 *
 * @param request ListResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcesResponse
 */
async function listResourcesWithOptions(request: ListResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productTypes)) {
    query['ProductTypes'] = request.productTypes;
  }
  if (!Util.isUnset(request.quotaIds)) {
    query['QuotaIds'] = request.quotaIds;
  }
  if (!Util.isUnset(request.resourceName)) {
    query['ResourceName'] = request.resourceName;
  }
  if (!Util.isUnset(request.resourceTypes)) {
    query['ResourceTypes'] = request.resourceTypes;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.verboseFields)) {
    query['VerboseFields'] = request.verboseFields;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举工作空间资源
 *
 * @param request ListResourcesRequest
 * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(request, headers, runtime);
}

model ListServiceTemplatesRequest {
  label?: string(name='Label', example='aigc'),
  order?: string(name='Order', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  provider?: string(name='Provider', example='pai'),
  query?: string(name='Query', example='aigc'),
  serviceTemplateName?: string(name='ServiceTemplateName', example='stable_diffusion_aigc'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
}

model ListServiceTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  serviceTemplates?: [
    ServiceTemplate
  ](name='ServiceTemplates'),
  totalCount?: long(name='TotalCount', example='15'),
}

model ListServiceTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceTemplatesResponseBody(name='body'),
}

/**
 * @summary 获取服务模版列表
 *
 * @param request ListServiceTemplatesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListServiceTemplatesResponse
 */
async function listServiceTemplatesWithOptions(request: ListServiceTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.serviceTemplateName)) {
    query['ServiceTemplateName'] = request.serviceTemplateName;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceTemplates',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/servicetemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取服务模版列表
 *
 * @param request ListServiceTemplatesRequest
 * @return ListServiceTemplatesResponse
 */
async function listServiceTemplates(request: ListServiceTemplatesRequest): ListServiceTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceTemplatesWithOptions(request, headers, runtime);
}

model ListWorkspaceUsersRequest {
  userName?: string(name='UserName'),
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', example='1e195c5116124202371861018d5bde'),
  totalCount?: long(name='TotalCount', example='2'),
  users?: [ 
    {
      userId?: string(name='UserId', example='1611******3000'),
      userName?: string(name='UserName', example='she******mo'),
    }
  ](name='Users'),
}

model ListWorkspaceUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceUsersResponseBody(name='body'),
}

/**
 * @summary 列出工作空间的可变为成员的用户
 *
 * @param request ListWorkspaceUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsersWithOptions(WorkspaceId: string, request: ListWorkspaceUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspaceUsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaceUsers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出工作空间的可变为成员的用户
 *
 * @param request ListWorkspaceUsersRequest
 * @return ListWorkspaceUsersResponse
 */
async function listWorkspaceUsers(WorkspaceId: string, request: ListWorkspaceUsersRequest): ListWorkspaceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspaceUsersWithOptions(WorkspaceId, request, headers, runtime);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields', example='Id'),
  moduleList?: string(name='ModuleList', example='PAI'),
  option?: string(name='Option', example='GetWorkspaces'),
  order?: string(name='Order', example='ASC'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  status?: string(name='Status', example='ENABLED'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceIds?: string(name='WorkspaceIds', example='123,234'),
  workspaceName?: string(name='WorkspaceName', example='abc'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', example='8D7B2E70-F770-505B-A672-09F1D8F2EC1E'),
  resourceLimits?: map[string]any(name='ResourceLimits', example='{
   "MaxCompute_share": 1,
   "MaxCompute_isolate": 1,
   "DLC_share": 1
}'),
  totalCount?: long(name='TotalCount', example='1'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames'),
      creator?: string(name='Creator', example='122424353535'),
      description?: string(name='Description', example='workspace description example'),
      envTypes?: [ string ](name='EnvTypes'),
      extraInfos?: map[string]any(name='ExtraInfos', example='{"TenantId": "4286******98"}'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-21T17:12:35.232Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-21T17:12:35.232Z'),
      isDefault?: boolean(name='IsDefault', example='false'),
      status?: string(name='Status', example='ENABLED'),
      workspaceId?: string(name='WorkspaceId', example='123'),
      workspaceName?: string(name='WorkspaceName', example='workspace-example'),
    }
  ](name='Workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
 * @summary 获得工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspacesResponse
 */
async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }
  if (!Util.isUnset(request.workspaceName)) {
    query['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model PublishCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', example='code-a797*******'),
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model PublishCodeSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishCodeSourceResponseBody(name='body'),
}

/**
 * @summary 发布一个代码源配置为本工作空间下所有人可见
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishCodeSourceResponse
 */
async function publishCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishCodeSourceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${OpenApiUtil.getEncodeParam(CodeSourceId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布一个代码源配置为本工作空间下所有人可见
 *
 * @return PublishCodeSourceResponse
 */
async function publishCodeSource(CodeSourceId: string): PublishCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

model PublishDatasetResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishDatasetResponseBody(name='body'),
}

/**
 * @summary 更新数据集
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishDatasetResponse
 */
async function publishDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishDatasetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集
 *
 * @return PublishDatasetResponse
 */
async function publishDataset(DatasetId: string): PublishDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishDatasetWithOptions(DatasetId, headers, runtime);
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId', example='image-dk******fa'),
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model PublishImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishImageResponseBody(name='body'),
}

/**
 * @summary 发布 Image
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishImageResponse
 */
async function publishImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishImageResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布 Image
 *
 * @return PublishImageResponse
 */
async function publishImage(ImageId: string): PublishImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishImageWithOptions(ImageId, headers, runtime);
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageResponseBody(name='body'),
}

/**
 * @summary 删除 Image
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveImageResponse
 */
async function removeImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除 Image
 *
 * @return RemoveImageResponse
 */
async function removeImage(ImageId: string): RemoveImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageWithOptions(ImageId, headers, runtime);
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveImageLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveImageLabelsResponseBody(name='body'),
}

/**
 * @summary 删除 Image 的标签
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveImageLabelsResponse
 */
async function removeImageLabelsWithOptions(ImageId: string, LabelKey: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageLabelsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/labels/${OpenApiUtil.getEncodeParam(LabelKey)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除 Image 的标签
 *
 * @return RemoveImageLabelsResponse
 */
async function removeImageLabels(ImageId: string, LabelKey: string): RemoveImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageLabelsWithOptions(ImageId, LabelKey, headers, runtime);
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model RemoveMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveMemberRoleResponseBody(name='body'),
}

/**
 * @summary 删除成员角色
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveMemberRoleResponse
 */
async function removeMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveMemberRoleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members/${OpenApiUtil.getEncodeParam(MemberId)}/roles/${OpenApiUtil.getEncodeParam(RoleName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除成员角色
 *
 * @return RemoveMemberRoleResponse
 */
async function removeMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): RemoveMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

model UpdateDatasetRequest {
  description?: string(name='Description'),
  name?: string(name='Name', example='myName'),
  options?: string(name='Options', example='{
  "mountPath": "/mnt/data/"
}'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetResponseBody(name='body'),
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDatasetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDatasetResponse
 */
async function updateDatasetWithOptions(DatasetId: string, request: UpdateDatasetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatasetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${OpenApiUtil.getEncodeParam(DatasetId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDatasetRequest
 * @return UpdateDatasetResponse
 */
async function updateDataset(DatasetId: string, request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetWithOptions(DatasetId, request, headers, runtime);
}

model UpdateDefaultWorkspaceRequest {
  workspaceId?: string(name='WorkspaceId', example='12345'),
}

model UpdateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='17915******4216'),
}

model UpdateDefaultWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDefaultWorkspaceResponseBody(name='body'),
}

/**
 * @summary 更新默认工作空间
 *
 * @param request UpdateDefaultWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspaceWithOptions(request: UpdateDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDefaultWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新默认工作空间
 *
 * @param request UpdateDefaultWorkspaceRequest
 * @return UpdateDefaultWorkspaceResponse
 */
async function updateDefaultWorkspace(request: UpdateDefaultWorkspaceRequest): UpdateDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDefaultWorkspaceWithOptions(request, headers, runtime);
}

model UpdateModelRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  domain?: string(name='Domain', example='nlp'),
  extraInfo?: map[string]any(name='ExtraInfo'),
  modelDescription?: string(name='ModelDescription'),
  modelDoc?: string(name='ModelDoc', example='https://*.md'),
  modelName?: string(name='ModelName'),
  modelType?: string(name='ModelType', example='Checkpoint'),
  orderNumber?: long(name='OrderNumber', example='101'),
  origin?: string(name='Origin', example='ModelScope'),
  task?: string(name='Task', example='text-classification'),
}

model UpdateModelResponseBody = {
  requestId?: string(name='RequestId', example='A0F049F0-8D69-5BAC-8F10-B******A34C'),
}

model UpdateModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelResponseBody(name='body'),
}

/**
 * @summary 更新模型
 *
 * @param request UpdateModelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelResponse
 */
async function updateModelWithOptions(ModelId: string, request: UpdateModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateModelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.domain)) {
    body['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.modelDescription)) {
    body['ModelDescription'] = request.modelDescription;
  }
  if (!Util.isUnset(request.modelDoc)) {
    body['ModelDoc'] = request.modelDoc;
  }
  if (!Util.isUnset(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.modelType)) {
    body['ModelType'] = request.modelType;
  }
  if (!Util.isUnset(request.orderNumber)) {
    body['OrderNumber'] = request.orderNumber;
  }
  if (!Util.isUnset(request.origin)) {
    body['Origin'] = request.origin;
  }
  if (!Util.isUnset(request.task)) {
    body['Task'] = request.task;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateModel',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新模型
 *
 * @param request UpdateModelRequest
 * @return UpdateModelResponse
 */
async function updateModel(ModelId: string, request: UpdateModelRequest): UpdateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelWithOptions(ModelId, request, headers, runtime);
}

model UpdateModelVersionRequest {
  approvalStatus?: string(name='ApprovalStatus', example='Approved'),
  compressionSpec?: map[string]any(name='CompressionSpec', example='{}'),
  evaluationSpec?: map[string]any(name='EvaluationSpec', example='{}'),
  extraInfo?: map[string]any(name='ExtraInfo', example='{}'),
  inferenceSpec?: map[string]any(name='InferenceSpec', example='{     "processor": "tensorflow_gpu_1.12" }'),
  metrics?: map[string]any(name='Metrics', example='{}'),
  options?: string(name='Options', example='{}'),
  sourceId?: string(name='SourceId', example='region=cn-shanghai,workspaceId=13**,kind=PipelineRun,id=run-sakdb****jdf'),
  sourceType?: string(name='SourceType', example='PAIFlow'),
  trainingSpec?: map[string]any(name='TrainingSpec', example='{}'),
  versionDescription?: string(name='VersionDescription'),
}

model UpdateModelVersionResponseBody = {
  requestId?: string(name='RequestId', example='D5BFFEE3-6025-443F-8A03-02D61***C4B9'),
}

model UpdateModelVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModelVersionResponseBody(name='body'),
}

/**
 * @summary 更新模型版本
 *
 * @param request UpdateModelVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateModelVersionResponse
 */
async function updateModelVersionWithOptions(ModelId: string, VersionName: string, request: UpdateModelVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateModelVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.approvalStatus)) {
    body['ApprovalStatus'] = request.approvalStatus;
  }
  if (!Util.isUnset(request.compressionSpec)) {
    body['CompressionSpec'] = request.compressionSpec;
  }
  if (!Util.isUnset(request.evaluationSpec)) {
    body['EvaluationSpec'] = request.evaluationSpec;
  }
  if (!Util.isUnset(request.extraInfo)) {
    body['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.inferenceSpec)) {
    body['InferenceSpec'] = request.inferenceSpec;
  }
  if (!Util.isUnset(request.metrics)) {
    body['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.trainingSpec)) {
    body['TrainingSpec'] = request.trainingSpec;
  }
  if (!Util.isUnset(request.versionDescription)) {
    body['VersionDescription'] = request.versionDescription;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateModelVersion',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/models/${OpenApiUtil.getEncodeParam(ModelId)}/versions/${OpenApiUtil.getEncodeParam(VersionName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新模型版本
 *
 * @param request UpdateModelVersionRequest
 * @return UpdateModelVersionResponse
 */
async function updateModelVersion(ModelId: string, VersionName: string, request: UpdateModelVersionRequest): UpdateModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateModelVersionWithOptions(ModelId, VersionName, request, headers, runtime);
}

model UpdateWorkspaceRequest {
  description?: string(name='Description', example='Description'),
  displayName?: string(name='DisplayName', example='workspace-example'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceResponse
 */
async function updateWorkspaceWithOptions(WorkspaceId: string, request: UpdateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateWorkspaceRequest
 * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(WorkspaceId: string, request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

model UpdateWorkspaceResourceRequest {
  groupName?: string(name='GroupName', example='group-kjds******sd'),
  isDefault?: boolean(name='IsDefault', example='true'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  productType?: string(name='ProductType', example='MaxCompute'),
  resourceIds?: [ string ](name='ResourceIds'),
  resourceType?: string(name='ResourceType'),
  spec?: map[string]any(name='Spec'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', example='5A14FA81-DD4E-******-6343FE44B941'),
  resourceIds?: [ string ](name='ResourceIds'),
}

model UpdateWorkspaceResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResourceResponseBody(name='body'),
}

/**
 * @summary 更新工作空间资源
 *
 * @param request UpdateWorkspaceResourceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResourceWithOptions(WorkspaceId: string, request: UpdateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.isDefault)) {
    body['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.resourceIds)) {
    body['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新工作空间资源
 *
 * @param request UpdateWorkspaceResourceRequest
 * @return UpdateWorkspaceResourceResponse
 */
async function updateWorkspaceResource(WorkspaceId: string, request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

