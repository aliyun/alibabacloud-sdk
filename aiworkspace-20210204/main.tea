/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiworkspace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility', description='表示代码是否是工作空间下公开的,可选值PRIVATE,PUBLIC'),
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit ID'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库所用的AccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='访问代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源ID'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置的名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  userId?: string(name='UserId', description='代码源配置的用户ID'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model Dataset {
  accessibility?: string(name='Accessibility', description='Accessibility'),
  dataSourceType?: string(name='DataSourceType', description='DataSourceType'),
  dataType?: string(name='DataType', description='DataType'),
  datasetId?: string(name='DatasetId', description='Dataset Id'),
  description?: string(name='Description', description='Description'),
  gmtCreateTime?: string(name='GmtCreateTime', description='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='GmtModifiedTime'),
  labels?: [
    DatasetLabel
  ](name='Labels', description='Labels'),
  name?: string(name='Name', description='Name'),
  options?: string(name='Options', description='Options'),
  ownerId?: string(name='OwnerId', description='Owner Id'),
  property?: string(name='Property', description='Property'),
  sourceId?: string(name='SourceId', description='SourceId'),
  sourceType?: string(name='SourceType', description='SourceType'),
  uri?: string(name='Uri', description='Uri'),
  userId?: string(name='UserId', description='User Id'),
  workspaceId?: string(name='WorkspaceId', description='WorkspaceId'),
}

model DatasetLabel {
  key?: string(name='Key', description='Key'),
  value?: string(name='Value', description='Value'),
}

model AddImageRequest {
  accessibility?: string(name='Accessibility', description='可见性 Public 公有 Private 私有'),
  description?: string(name='Description', description='镜像描述'),
  imageUri?: string(name='ImageUri', description='镜像地址'),
  labels?: [ 
    {
      key?: string(name='Key', description='Key'),
      value?: string(name='Value', description='Value'),
    }
  ](name='Labels', description='镜像标签，是个数组'),
  name?: string(name='Name', description='镜像名称'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId', description='镜像 id'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model AddImageResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageResponseBody(name='body'),
}

async function addImage(request: AddImageRequest): AddImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageWithOptions(request, headers, runtime);
}

async function addImageWithOptions(request: AddImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageUri)) {
    body['ImageUri'] = request.imageUri;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddImageLabelsRequest {
  labels?: [ 
    {
      key?: string(name='Key', description='Key'),
      value?: string(name='Value', description='Value'),
    }
  ](name='Labels', description='标签'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model AddImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageLabelsResponseBody(name='body'),
}

async function addImageLabels(ImageId: string, request: AddImageLabelsRequest): AddImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageLabelsWithOptions(ImageId, request, headers, runtime);
}

async function addImageLabelsWithOptions(ImageId: string, request: AddImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageLabelsResponse {
  Util.validateModel(request);
  ImageId = OpenApiUtil.getEncodeParam(ImageId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${ImageId}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model AddMemberRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AddMemberRoleResponseBody(name='body'),
}

async function addMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): AddMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

async function addMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): AddMemberRoleResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  MemberId = OpenApiUtil.getEncodeParam(MemberId);
  RoleName = OpenApiUtil.getEncodeParam(RoleName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AddMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/members/${MemberId}/roles/${RoleName}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddWorkspaceQuotaRequest {
  mode?: string(name='Mode', description='模式  isolate 预付费  share 后付费  develop 开发模式'),
  productCode?: string(name='ProductCode', description='产品代码'),
  quotaType?: string(name='QuotaType', description='产品类型，  支持PAI，MaxCompute，'),
}

model AddWorkspaceQuotaResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model AddWorkspaceQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: AddWorkspaceQuotaResponseBody(name='body'),
}

async function addWorkspaceQuota(WorkspaceId: string, QuotaId: string, request: AddWorkspaceQuotaRequest): AddWorkspaceQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addWorkspaceQuotaWithOptions(WorkspaceId, QuotaId, request, headers, runtime);
}

async function addWorkspaceQuotaWithOptions(WorkspaceId: string, QuotaId: string, request: AddWorkspaceQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddWorkspaceQuotaResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  QuotaId = OpenApiUtil.getEncodeParam(QuotaId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.mode)) {
    body['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.quotaType)) {
    body['QuotaType'] = request.quotaType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceQuota',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/[WorkspaceId]/quotas/[QuotaId]`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateCodeSourceRequest {
  accessibility?: string(name='Accessibility', description='代码是否是本工作空间内公开的，可选值PRIVATE、PUBLIC'),
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='代码仓库访问Token'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='代码仓库的用户名'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名称'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='创建的代码源配置的ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCodeSourceResponseBody(name='body'),
}

async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeSourceWithOptions(request, headers, runtime);
}

async function createCodeSourceWithOptions(request: CreateCodeSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCodeSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.codeBranch)) {
    body['CodeBranch'] = request.codeBranch;
  }
  if (!Util.isUnset(request.codeRepo)) {
    body['CodeRepo'] = request.codeRepo;
  }
  if (!Util.isUnset(request.codeRepoAccessToken)) {
    body['CodeRepoAccessToken'] = request.codeRepoAccessToken;
  }
  if (!Util.isUnset(request.codeRepoUserName)) {
    body['CodeRepoUserName'] = request.codeRepoUserName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDatasetRequest {
  accessibility?: string(name='Accessibility', description='Accessibility'),
  dataSourceType?: string(name='DataSourceType', description='DataSourceType'),
  dataType?: string(name='DataType', description='DataType'),
  description?: string(name='Description', description='Description'),
  labels?: [
    DatasetLabel
  ](name='Labels', description='Labels'),
  name?: string(name='Name', description='Name'),
  options?: string(name='Options', description='Options'),
  property?: string(name='Property', description='Property'),
  sourceId?: string(name='SourceId', description='SourceId'),
  sourceType?: string(name='SourceType', description='SourceType'),
  uri?: string(name='Uri', description='Uri'),
  workspaceId?: string(name='WorkspaceId', description='WorkspaceId'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetWithOptions(request, headers, runtime);
}

async function createDatasetWithOptions(request: CreateDatasetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataType)) {
    body['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDatasetLabelsRequest {
  labels?: [
    DatasetLabel
  ](name='Labels'),
}

model CreateDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDatasetLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetLabelsResponseBody(name='body'),
}

async function createDatasetLabels(DatasetId: string, request: CreateDatasetLabelsRequest): CreateDatasetLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

async function createDatasetLabelsWithOptions(DatasetId: string, request: CreateDatasetLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatasetLabelsResponse {
  Util.validateModel(request);
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDefaultWorkspaceRequest {
  description?: string(name='Description', description='描述，最多80个字符'),
  envTypes?: [ string ](name='EnvTypes', description='环境列表'),
  resources?: [ 
    {
      productType?: string(name='ProductType', description='产品类型'),
    }
  ](name='Resources', description='资源'),
}

model CreateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
}

model CreateDefaultWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefaultWorkspaceResponseBody(name='body'),
}

async function createDefaultWorkspace(request: CreateDefaultWorkspaceRequest): CreateDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDefaultWorkspaceWithOptions(request, headers, runtime);
}

async function createDefaultWorkspaceWithOptions(request: CreateDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDefaultWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.envTypes)) {
    body['EnvTypes'] = request.envTypes;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateMemberRequest {
  members?: [ 
    {
      roles?: [ string ](name='Roles', description='角色列表'),
      userId?: string(name='UserId', description='用户 id'),
    }
  ](name='Members', description='用户列表'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', description='成员显示名'),
      memberId?: string(name='MemberId', description='成员 id'),
      roles?: [ string ](name='Roles', description='角色列表'),
      userId?: string(name='UserId', description='用户 id'),
    }
  ](name='Members', description='成员列表'),
  requestId?: string(name='RequestId', description='请求 id'),
}

model CreateMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMemberResponseBody(name='body'),
}

async function createMember(WorkspaceId: string, request: CreateMemberRequest): CreateMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemberWithOptions(WorkspaceId, request, headers, runtime);
}

async function createMemberWithOptions(WorkspaceId: string, request: CreateMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemberResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.members)) {
    body['Members'] = request.members;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateProductOrdersRequest {
  autoPay?: boolean(name='AutoPay', description='是否自动购买所有产品'),
  products?: {
    autoRenew?: boolean(name='AutoRenew', description='是否自动续费'),
    chargeType?: string(name='ChargeType', description='付费类型'),
    duration?: long(name='Duration', description='购买时长,与pricingCycle配合使用'),
    instanceProperties?: [ 
      {
        code?: string(name='Code', description='代号'),
        name?: string(name='Name', description='名'),
        value?: string(name='Value', description='值'),
      }
    ](name='InstanceProperties', description='实例属性信息'),
    orderType?: string(name='OrderType', description='订单类型'),
    pricingCycle?: string(name='PricingCycle', description='计价单位'),
    productCode?: string(name='ProductCode', description='产品code'),
  }(name='Products', description='逗号分隔的产品'),
}

model CreateProductOrdersResponseBody = {
  buyProductRequestId?: string(name='BuyProductRequestId', description='产品购买请求id'),
  message?: string(name='Message', description='消息'),
  orderId?: string(name='OrderId', description='订单id'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProductOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductOrdersResponseBody(name='body'),
}

async function createProductOrders(request: CreateProductOrdersRequest): CreateProductOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductOrdersWithOptions(request, headers, runtime);
}

async function createProductOrdersWithOptions(request: CreateProductOrdersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProductOrdersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.products)) {
    body['Products'] = request.products;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductOrders',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/productorders`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  userId?: string(name='UserId', description='用户 id'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUserWithOptions(headers, runtime);
}

async function createUserWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateUserResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/users`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceRequest {
  description?: string(name='Description', description='描述，最多80个字符'),
  displayName?: string(name='DisplayName', description='显示名称'),
  envTypes?: [ string ](name='EnvTypes', description='环境列表'),
  workspaceName?: string(name='WorkspaceName', description='名字 3-23 个字符, 需要字母开头，只能包含字母下划线和数字，region内唯一'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.envTypes)) {
    body['EnvTypes'] = request.envTypes;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceResourceRequest {
  resources?: [ 
    {
      envType?: string(name='EnvType', description='环境， 支持dev（开发）、prod（生产）'),
      groupName?: string(name='GroupName', description='分组名，主账户内唯一 一个 GroupName 下可能有一个 dev 资源和一个 prod 资源'),
      isDefault?: boolean(name='IsDefault', description='是否默认资源 每个类型都有一个默认的资源'),
      name?: string(name='Name', description='资源名 长度需要在3到27个字符 region内唯一'),
      productType?: string(name='ProductType', description='产品类型， 支持PAI，MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', description='卡类型，支持cpu、gpu'),
          mode?: string(name='Mode', description='模式 isolate 预付费 share 后付费 develop 开发模式'),
          name?: string(name='Name', description='配额名称'),
          productCode?: string(name='ProductCode', description='商品 code'),
          quotaType?: string(name='QuotaType', description='产品类型， 支持PAI，MaxCompute'),
          spec?: string(name='Spec', description='规格描述'),
        }
      ](name='Quotas'),
      spec?: string(name='Spec', description='对于MaxCompute是个json，有如下key： Endpoint Project'),
      workspaceId?: string(name='WorkspaceId', description='所属的工作空间 id'),
    }
  ](name='Resources', description='资源列表'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  resources?: [ 
    {
      id?: string(name='Id', description='资源Id'),
    }
  ](name='Resources', description='资源集合'),
  totalCount?: long(name='TotalCount', description='总数'),
}

model CreateWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResourceResponseBody(name='body'),
}

async function createWorkspaceResource(WorkspaceId: string, request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

async function createWorkspaceResourceWithOptions(WorkspaceId: string, request: CreateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResourceResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='被删除的代码源配置ID'),
  requestId?: string(name='RequestId'),
}

model DeleteCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCodeSourceResponseBody(name='body'),
}

async function deleteCodeSource(CodeSourceId: string): DeleteCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function deleteCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${CodeSourceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigResponseBody(name='body'),
}

async function deleteConfig(WorkspaceId: string, ConfigKey: string): DeleteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConfigWithOptions(WorkspaceId, ConfigKey, headers, runtime);
}

async function deleteConfigWithOptions(WorkspaceId: string, ConfigKey: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConfigResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  ConfigKey = OpenApiUtil.getEncodeParam(ConfigKey);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteConfig',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/configs/${ConfigKey}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDataset(DatasetId: string): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetWithOptions(DatasetId, headers, runtime);
}

async function deleteDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteDatasetLabelsRequest {
  keys?: string(name='Keys'),
}

model DeleteDatasetLabelsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetLabelsResponseBody(name='body'),
}

async function deleteDatasetLabels(DatasetId: string, request: DeleteDatasetLabelsRequest): DeleteDatasetLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDatasetLabelsWithOptions(DatasetId, request, headers, runtime);
}

async function deleteDatasetLabelsWithOptions(DatasetId: string, request: DeleteDatasetLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatasetLabelsResponse {
  Util.validateModel(request);
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.keys)) {
    query['Keys'] = request.keys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatasetLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}/labels`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteMembersRequest {
  memberIds?: string(name='MemberIds', description='需要删除的成员 Id 列表，以逗号分隔'),
}

model DeleteMembersResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model DeleteMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMembersResponseBody(name='body'),
}

async function deleteMembers(WorkspaceId: string, request: DeleteMembersRequest): DeleteMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMembersWithOptions(WorkspaceId, request, headers, runtime);
}

async function deleteMembersWithOptions(WorkspaceId: string, request: DeleteMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMembersResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.memberIds)) {
    query['MemberIds'] = request.memberIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/members`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkspaceResponseBody(name='body'),
}

async function deleteWorkspace(WorkspaceId: string): DeleteWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceWithOptions(WorkspaceId, headers, runtime);
}

async function deleteWorkspaceWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteWorkspaceResourceRequest {
  productType?: string(name='ProductType'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkspaceResourceResponseBody(name='body'),
}

async function deleteWorkspaceResource(ResourceGroupName: string, WorkspaceId: string, request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceResourceWithOptions(ResourceGroupName, WorkspaceId, request, headers, runtime);
}

async function deleteWorkspaceResourceWithOptions(ResourceGroupName: string, WorkspaceId: string, request: DeleteWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResourceResponse {
  Util.validateModel(request);
  ResourceGroupName = OpenApiUtil.getEncodeParam(ResourceGroupName);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/resources/${ResourceGroupName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCodeSourceResponseBody = {
  accessibility?: string(name='Accessibility', description='代码是否是本工作空间内公开的，可选值PRIVATE、PUBLIC'),
  codeBranch?: string(name='CodeBranch', description='代码仓库分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库的token'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源配置ID'),
  description?: string(name='Description', description='详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
  requestId?: string(name='RequestId', description='请求ID'),
  userId?: string(name='UserId', description='代码配置源的创建者ID'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model GetCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetCodeSourceResponseBody(name='body'),
}

async function getCodeSource(CodeSourceId: string): GetCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function getCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${CodeSourceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCodeSourcesStatisticsRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model GetCodeSourcesStatisticsResponseBody = {
  count?: long(name='Count', description='此用户可以查看的代码的数目'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetCodeSourcesStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCodeSourcesStatisticsResponseBody(name='body'),
}

async function getCodeSourcesStatistics(request: GetCodeSourcesStatisticsRequest): GetCodeSourcesStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourcesStatisticsWithOptions(request, headers, runtime);
}

async function getCodeSourcesStatisticsWithOptions(request: GetCodeSourcesStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeSourcesStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCodeSourcesStatistics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/statistics/codesources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDatasetResponseBody = {
  accessibility?: string(name='Accessibility'),
  dataSourceType?: string(name='DataSourceType'),
  dataType?: string(name='DataType'),
  datasetId?: string(name='DatasetId'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    DatasetLabel
  ](name='Labels'),
  name?: string(name='Name'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId'),
  property?: string(name='Property'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDataset(DatasetId: string): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetWithOptions(DatasetId, headers, runtime);
}

async function getDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDatasetResponse {
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDatasetsStatisticsRequest {
  workspaceId?: string(name='WorkspaceId', description='WorkspaceId'),
}

model GetDatasetsStatisticsResponseBody = {
  count?: long(name='Count', description='Count'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetDatasetsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatasetsStatisticsResponseBody(name='body'),
}

async function getDatasetsStatistics(request: GetDatasetsStatisticsRequest): GetDatasetsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatasetsStatisticsWithOptions(request, headers, runtime);
}

async function getDatasetsStatisticsWithOptions(request: GetDatasetsStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDatasetsStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDatasetsStatistics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/statistics/datasets`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code', description='返回码，正常是200，其他都是错误'),
      message?: string(name='Message', description='消息'),
      type?: string(name='Type', description='类型'),
    }
  ](name='Conditions', description='任务详情 创建默认工作空间会有多个任务依次进行，如果一个任务未开始，不会显示在任务详情里。'),
  creator?: string(name='Creator', description='创建人'),
  description?: string(name='Description', description='描述'),
  displayName?: string(name='DisplayName', description='显示名称'),
  envTypes?: [ string ](name='EnvTypes', description='环境，用作判断简单模式还是标准模式，含义见'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改 UTC 时间，日期格式 iso8601'),
  owner?: {
    userId?: string(name='UserId', description='用户id'),
    userKp?: string(name='UserKp', description='用户kp'),
    userName?: string(name='UserName', description='用户名'),
  }(name='Owner', description='拥有者'),
  status?: string(name='Status', description='工作空间状态'),
  workspaceId?: string(name='WorkspaceId', description='工作空间 ID'),
  workspaceName?: string(name='WorkspaceName', description='项目空间名称， region 内唯一'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetDefaultWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultWorkspaceResponseBody(name='body'),
}

async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDefaultWorkspaceWithOptions(request, headers, runtime);
}

async function getDefaultWorkspaceWithOptions(request: GetDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDefaultWorkspaceResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetImageRequest {
  verbose?: boolean(name='Verbose', description='是否显示非必要信息：Labels'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility', description='可见性'),
  description?: string(name='Description', description='描述'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='创建 UTC 时间，日期格式 iso8601'),
  imageUri?: string(name='ImageUri', description='镜像地址，包含版本号'),
  labels?: [ 
    {
      key?: string(name='Key', description='Key'),
      value?: string(name='Value', description='Value'),
    }
  ](name='Labels', description='镜像标签'),
  name?: string(name='Name', description='镜像名称'),
  operatorCreate?: string(name='OperatorCreate', description='创建人'),
  parentOperatorCreate?: string(name='ParentOperatorCreate', description='创建人父账户'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageResponseBody(name='body'),
}

async function getImage(ImageId: string, request: GetImageRequest): GetImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getImageWithOptions(ImageId, request, headers, runtime);
}

async function getImageWithOptions(ImageId: string, request: GetImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetImageResponse {
  Util.validateModel(request);
  ImageId = OpenApiUtil.getEncodeParam(ImageId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${ImageId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetImagesStatisticsRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model GetImagesStatisticsResponseBody = {
  count?: long(name='Count', description='镜像总数'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetImagesStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetImagesStatisticsResponseBody(name='body'),
}

async function getImagesStatistics(request: GetImagesStatisticsRequest): GetImagesStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getImagesStatisticsWithOptions(request, headers, runtime);
}

async function getImagesStatisticsWithOptions(request: GetImagesStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetImagesStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImagesStatistics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/statistics/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMemberRequest {
  userId?: string(name='UserId', description='用户id'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName', description='成员显示名'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
  memberId?: string(name='MemberId', description='成员 id'),
  roles?: [ string ](name='Roles', description='角色列表'),
  userId?: string(name='UserId', description='用户 id'),
  userName?: string(name='UserName', description='云账号用户名'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetMemberResponseBody(name='body'),
}

async function getMember(WorkspaceId: string, request: GetMemberRequest): GetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemberWithOptions(WorkspaceId, request, headers, runtime);
}

async function getMemberWithOptions(WorkspaceId: string, request: GetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemberResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/member`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPermissionRequest {
  accessibility?: string(name='Accessibility', description='待鉴权实例的可见性 PUBLIC表示当前工作空间所有人都可以访问 PRIVATE表示只有Owner可以访问'),
  creator?: string(name='Creator', description='创建者'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode', description='权限'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility', description='待鉴权实例的可见性 PUBLIC表示当前工作空间所有人都可以访问 PRIVATE表示只有Owner可以访问'),
      entityAccessType?: string(name='EntityAccessType', description='存取类型 CREATOR 代表能看自已创建的 OTHERS 代表可以看别人创建的 ALL代表所有'),
    }
  ](name='PermissionRules'),
  requestId?: string(name='RequestId', description='请求 id'),
}

model GetPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPermissionResponseBody(name='body'),
}

async function getPermission(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest): GetPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPermissionWithOptions(WorkspaceId, PermissionCode, request, headers, runtime);
}

async function getPermissionWithOptions(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPermissionResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  PermissionCode = OpenApiUtil.getEncodeParam(PermissionCode);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermission',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/permissions/${PermissionCode}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetRoleStatisticsRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
}

model GetRoleStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  roles?: [ 
    {
      memberSize?: long(name='MemberSize', description='成员数量'),
      roleName?: string(name='RoleName', description='角色名'),
    }
  ](name='Roles', description='角色信息统计'),
  totalCount?: long(name='TotalCount', description='总数'),
}

model GetRoleStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleStatisticsResponseBody(name='body'),
}

async function getRoleStatistics(request: GetRoleStatisticsRequest): GetRoleStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRoleStatisticsWithOptions(request, headers, runtime);
}

async function getRoleStatisticsWithOptions(request: GetRoleStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRoleStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRoleStatistics',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/statistics/roles`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkspaceRequest {
  verbose?: boolean(name='Verbose'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames', description='管理员账户'),
  creator?: string(name='Creator', description='创建人'),
  description?: string(name='Description', description='描述'),
  displayName?: string(name='DisplayName', description='显示名称'),
  envTypes?: [ string ](name='EnvTypes', description='环境，用作判断简单模式还是标准模式'),
  extraInfos?: map[string]any(name='ExtraInfos', description='附加信息'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='修改 UTC 时间，日期格式 iso8601'),
  isDefault?: boolean(name='IsDefault', description='是否为默认工作空间'),
  requestId?: string(name='RequestId', description='请求 id'),
  resourceCount?: int32(name='ResourceCount', description='资源数目'),
  status?: string(name='Status', description='工作空间状态'),
  workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
  workspaceName?: string(name='WorkspaceName', description='项目空间名称， region 内唯一'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(WorkspaceId: string, request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

async function getWorkspaceWithOptions(WorkspaceId: string, request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', description='代码源显示名称，支持模糊匹配'),
  order?: string(name='Order', description='排序顺序, 枚举值 desc 或者 asc'),
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  sortBy?: string(name='SortBy', description='用于排序的字段名，可选字段名："DisplayName" "GmtCreateTime" "GmtModifyTime"'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources', description='代码源配置列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
}

model ListCodeSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCodeSourcesResponseBody(name='body'),
}

async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeSourcesWithOptions(request, headers, runtime);
}

async function listCodeSourcesWithOptions(request: ListCodeSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCodeSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCodeSources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListConfigsRequest {
  configKeys?: string(name='ConfigKeys', description='配置键'),
}

model ListConfigsResponseBody = {
  configs?: [ 
    {
      configKey?: string(name='ConfigKey', description='配置键'),
      configValue?: string(name='ConfigValue', description='配置值'),
    }
  ](name='Configs', description='配置列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: long(name='TotalCount', description='返回数量'),
}

model ListConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigsResponseBody(name='body'),
}

async function listConfigs(WorkspaceId: string, request: ListConfigsRequest): ListConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConfigsWithOptions(WorkspaceId, request, headers, runtime);
}

async function listConfigsWithOptions(WorkspaceId: string, request: ListConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListConfigsResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.configKeys)) {
    query['ConfigKeys'] = request.configKeys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigs',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/configs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDatasetsRequest {
  dataSourceTypes?: string(name='DataSourceTypes'),
  dataTypes?: string(name='DataTypes'),
  labelKeys?: string(name='LabelKeys'),
  labelValues?: string(name='LabelValues'),
  name?: string(name='Name'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  properties?: string(name='Properties'),
  sourceTypes?: string(name='SourceTypes'),
  workspaceId?: string(name='WorkspaceId', description='Workspace Id'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model ListDatasetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatasetsResponseBody(name='body'),
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatasetsWithOptions(request, headers, runtime);
}

async function listDatasetsWithOptions(request: ListDatasetsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataSourceTypes)) {
    query['DataSourceTypes'] = request.dataSourceTypes;
  }
  if (!Util.isUnset(request.dataTypes)) {
    query['DataTypes'] = request.dataTypes;
  }
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!Util.isUnset(request.labelValues)) {
    query['LabelValues'] = request.labelValues;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.properties)) {
    query['Properties'] = request.properties;
  }
  if (!Util.isUnset(request.sourceTypes)) {
    query['SourceTypes'] = request.sourceTypes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatasets',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListFeaturesRequest {
  names?: string(name='Names', description='特性名称，以逗号分隔'),
}

model ListFeaturesResponseBody = {
  features?: [ string ](name='Features', description='特性列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='特性总数'),
}

model ListFeaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFeaturesResponseBody(name='body'),
}

async function listFeatures(request: ListFeaturesRequest): ListFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFeaturesWithOptions(request, headers, runtime);
}

async function listFeaturesWithOptions(request: ListFeaturesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeaturesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.names)) {
    query['Names'] = request.names;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFeatures',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/features`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListGlobalPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', description='PermissionCode'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', description='待鉴权实例的可见性 PUBLIC表示当前工作空间所有人都可以访问 PRIVATE表示只有Owner可以访问'),
          entityAccessType?: string(name='EntityAccessType', description='存取类型 CREATOR 代表能看自已创建的 OTHERS 代表可以看别人创建的 ALL代表所有'),
        }
      ](name='PermissionRules', description='PermissionRules'),
    }
  ](name='Permissions', description='Permissions'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListGlobalPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGlobalPermissionsResponseBody(name='body'),
}

async function listGlobalPermissions(WorkspaceId: string): ListGlobalPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGlobalPermissionsWithOptions(WorkspaceId, headers, runtime);
}

async function listGlobalPermissionsWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListGlobalPermissionsResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListGlobalPermissions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/permissions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId', description='镜像id'),
  labelFilter?: string(name='LabelFilter', description='image过滤条件，获取满足条件的image的所有label'),
  labelKeys?: string(name='LabelKeys', description='标签列表，以逗号分隔'),
  region?: string(name='Region', description='地域'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key', description='键'),
      value?: string(name='Value', description='值'),
    }
  ](name='Labels', description='镜像标签'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的数量'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListImageLabelsResponseBody(name='body'),
}

async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImageLabelsWithOptions(request, headers, runtime);
}

async function listImageLabelsWithOptions(request: ListImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImageLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.labelFilter)) {
    query['LabelFilter'] = request.labelFilter;
  }
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/image/labels`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListImagesRequest {
  labels?: string(name='Labels', description='过滤值 以逗号分隔'),
  name?: string(name='Name', description='镜像名称，支持模糊搜索'),
  operatorCreate?: string(name='OperatorCreate', description='创建者'),
  order?: string(name='Order', description='排序方向： ASC - 升序 DESC - 降序'),
  pageNumber?: int32(name='PageNumber', description='分页，从1开始，默认1'),
  pageSize?: int32(name='PageSize', description='页大小，默认20'),
  sortBy?: string(name='SortBy', description='排序字段'),
  verbose?: boolean(name='Verbose', description='是否显示非必要信息：Labels'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility', description='可见性'),
      description?: string(name='Description', description='镜像描述'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='修改时间'),
      imageId?: string(name='ImageId', description='镜像id'),
      imageUri?: string(name='ImageUri', description='镜像地址，包含版本号'),
      labels?: [ 
        {
          key?: string(name='Key', description='Key'),
          value?: string(name='Value', description='Value'),
        }
      ](name='Labels', description='镜像标签，是个map'),
      name?: string(name='Name', description='镜像名称'),
      operatorCreate?: string(name='OperatorCreate', description='创建人'),
      parentOperatorCreate?: string(name='ParentOperatorCreate', description='父创建人'),
      workspaceId?: string(name='WorkspaceId', description='工作空间id'),
    }
  ](name='Images', description='镜像列表'),
  totalCount?: long(name='TotalCount', description='总数'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operatorCreate)) {
    query['OperatorCreate'] = request.operatorCreate;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMembersRequest {
  memberName?: string(name='MemberName', description='成员名'),
  pageNumber?: long(name='PageNumber', description='分页，从1开始，默认1'),
  pageSize?: int32(name='PageSize', description='页大小，默认20'),
  roles?: string(name='Roles', description='Role 过滤列表，逗号分隔'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName', description='成员显示名'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
      memberId?: string(name='MemberId', description='成员 id'),
      roles?: [ string ](name='Roles', description='角色列表'),
      userId?: string(name='UserId', description='用户 id'),
      userName?: string(name='UserName', description='云账号用户名'),
    }
  ](name='Members', description='成员列表'),
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的数量'),
}

model ListMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListMembersResponseBody(name='body'),
}

async function listMembers(WorkspaceId: string, request: ListMembersRequest): ListMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMembersWithOptions(WorkspaceId, request, headers, runtime);
}

async function listMembersWithOptions(WorkspaceId: string, request: ListMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMembersResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.memberName)) {
    query['MemberName'] = request.memberName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.roles)) {
    query['Roles'] = request.roles;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOperationLogsRequest {
  entityStatus?: string(name='EntityStatus'),
  entityTypes?: string(name='EntityTypes', description='以逗号分隔的日志类型，包含 Resource'),
  operationStatus?: string(name='OperationStatus', description='以逗号分隔的操作状态'),
  operations?: string(name='Operations', description='以逗号分隔的操作'),
  order?: string(name='Order', description='排序顺序， 顺序：ASC，倒序：DESC'),
  pageNumber?: long(name='PageNumber', description='当前页，页码从1开始'),
  pageSize?: int32(name='PageSize', description='每页返回的输出数目'),
  sortBy?: string(name='SortBy', description='排序字段'),
}

model ListOperationLogsResponseBody = {
  logs?: [ 
    {
      entityId?: string(name='EntityId', description='实体 id'),
      entityType?: string(name='EntityType', description='实体类型，目前支持Resource'),
      gmtCreateTime?: string(name='GmtCreateTime', description='2021-01-30T12:51:33.028Z'),
      message?: string(name='Message', description='日志'),
      operation?: string(name='Operation', description='操作，目前支持Create, Update, SetDefault'),
      operationStatus?: string(name='OperationStatus', description='操作状态，支持 Processing、Succeeded、Failed'),
      operator?: string(name='Operator', description='操作人'),
    }
  ](name='Logs', description='输出日志列表'),
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的日志数量'),
}

model ListOperationLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOperationLogsResponseBody(name='body'),
}

async function listOperationLogs(WorkspaceId: string, request: ListOperationLogsRequest): ListOperationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listOperationLogsWithOptions(WorkspaceId, request, headers, runtime);
}

async function listOperationLogsWithOptions(WorkspaceId: string, request: ListOperationLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOperationLogsResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.entityStatus)) {
    query['EntityStatus'] = request.entityStatus;
  }
  if (!Util.isUnset(request.entityTypes)) {
    query['EntityTypes'] = request.entityTypes;
  }
  if (!Util.isUnset(request.operationStatus)) {
    query['OperationStatus'] = request.operationStatus;
  }
  if (!Util.isUnset(request.operations)) {
    query['Operations'] = request.operations;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOperationLogs',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode', description='权限 code'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility', description='待鉴权实例的可见性 PUBLIC表示当前工作空间所有人都可以访问 PRIVATE表示只有Owner可以访问'),
          entityAccessType?: string(name='EntityAccessType', description='存取类型 CREATOR 代表能看自已创建的 OTHERS 代表可以看别人创建的 ALL代表所有'),
        }
      ](name='PermissionRules'),
    }
  ](name='Permissions', description='权限列表'),
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的数量'),
}

model ListPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPermissionsResponseBody(name='body'),
}

async function listPermissions(WorkspaceId: string): ListPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(WorkspaceId, headers, runtime);
}

async function listPermissionsWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPermissionsResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListPermissions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/permissions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProductAuthorizationsRequest {
  ramRoleNames?: string(name='RamRoleNames', description='逗号分隔的角色名 AliyunODPSPAIDefaultRole,AliyunPAIAccessingOSSRole,AliyunPAIDLCAccessingOSSRole,AliyunPAIDLCDefaultRole,AliyunPAIDSWDefaultRole'),
}

model ListProductAuthorizationsResponseBody = {
  authorizationDetails?: [ 
    {
      authorizationUrl?: string(name='AuthorizationUrl', description='快捷授权的url， 假如IsAuthorized为false时有效'),
      isAuthorized?: boolean(name='IsAuthorized', description='角色是否被授权'),
      ramRoleARN?: string(name='RamRoleARN', description='RoleArn'),
      ramRoleName?: string(name='RamRoleName', description='Role的名字'),
      ramRoleType?: string(name='RamRoleType', description='Role的类型'),
    }
  ](name='AuthorizationDetails', description='角色列表'),
  authorizationUrl?: string(name='AuthorizationUrl', description='授权链接'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProductAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductAuthorizationsResponseBody(name='body'),
}

async function listProductAuthorizations(request: ListProductAuthorizationsRequest): ListProductAuthorizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductAuthorizationsWithOptions(request, headers, runtime);
}

async function listProductAuthorizationsWithOptions(request: ListProductAuthorizationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductAuthorizationsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.ramRoleNames)) {
    query['RamRoleNames'] = request.ramRoleNames;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductAuthorizations',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/productauthorizations`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProductsRequest {
  productCodes?: string(name='ProductCodes', description='逗号分割的商品 code'),
  serviceCodes?: string(name='ServiceCodes', description='逗号分割的服务 code'),
  verbose?: boolean(name='Verbose'),
}

model ListProductsResponseBody = {
  products?: [ 
    {
      hasPermissionToPurchase?: boolean(name='HasPermissionToPurchase', description='Whether user has permission to purchase'),
      isPurchased?: boolean(name='IsPurchased', description='是否已购买'),
      productCode?: string(name='ProductCode', description='商品 code'),
      purchaseUrl?: string(name='PurchaseUrl', description='购买链接'),
    }
  ](name='Products', description='产品列表'),
  requestId?: string(name='RequestId', description='请求 id'),
  services?: [ 
    {
      isOpen?: boolean(name='IsOpen', description='是否开通'),
      openUrl?: string(name='OpenUrl', description='开通链接'),
      serviceCode?: string(name='ServiceCode', description='服务Code'),
    }
  ](name='Services', description='服务列表'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductsWithOptions(request, headers, runtime);
}

async function listProductsWithOptions(request: ListProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.productCodes)) {
    query['ProductCodes'] = request.productCodes;
  }
  if (!Util.isUnset(request.serviceCodes)) {
    query['ServiceCodes'] = request.serviceCodes;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProducts',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/products`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQuotasRequest {
  name?: string(name='Name', description='名字，支持模糊搜索'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      id?: string(name='Id', description='quota的id'),
      mode?: string(name='Mode', description='模式  isolate 预付费  share 后付费  develop 开发模式'),
      name?: string(name='Name', description='quota名字'),
      productCode?: string(name='ProductCode', description='产品代码'),
      quotaType?: string(name='QuotaType', description='产品类型， 支持PAI，MaxCompute'),
      specs?: [ 
        {
          name?: string(name='Name', description='规格名'),
          type?: string(name='Type', description='类型，可为空'),
          value?: string(name='Value', description='规格描述'),
        }
      ](name='Specs', description='规格描述列表'),
    }
  ](name='Quotas', description='配额列表'),
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的数量'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourcesRequest {
  option?: string(name='Option', description='选项，目前支持 ListResourceByWorkspace    列举某个工作空间的资源 GetResource                       获取所有工作空间下的资源 GetResourceGroup               获取所有工作空间下的资源组 ListResourceSummaryByWorkspaces  列举一组工作空间的资源汇总'),
  pageNumber?: long(name='PageNumber', description='分页，从1开始，默认1'),
  pageSize?: int32(name='PageSize', description='页大小，默认20'),
  productTypes?: string(name='ProductTypes', description='逗号分隔的产品类型，可选值 MaxCompute，DLC'),
  resourceGroupName?: string(name='ResourceGroupName', description='资源的group名字'),
  resourceName?: string(name='ResourceName', description='资源的名字'),
  workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
  workspaceIds?: string(name='WorkspaceIds', description='工作空间id列表，以逗号分隔'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  resources?: [ 
    {
      envType?: string(name='EnvType', description='环境， 支持dev（开发）、prod（生产）'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
      groupName?: string(name='GroupName', description='分组名，主账户内唯一 一个 GroupName 下可能有一个 dev 资源和一个 prod 资源'),
      isDefault?: boolean(name='IsDefault', description='是否默认资源 每个类型都有一个默认的资源'),
      name?: string(name='Name', description='资源名 长度需要在3到27个字符 region内唯一'),
      productType?: string(name='ProductType', description='产品类型， 支持PAI，MaxCompute'),
      quotas?: [ 
        {
          cardType?: string(name='CardType', description='卡类型，支持cpu、gpu'),
          id?: string(name='Id', description='配额id'),
          mode?: string(name='Mode', description='模式 isolate 预付费 share 后付费 develop 开发模式'),
          name?: string(name='Name', description='配额名称'),
          productCode?: string(name='ProductCode', description='商品 code'),
          quotaType?: string(name='QuotaType', description='产品类型， 支持PAI，MaxCompute'),
          specs?: [ 
            {
              name?: string(name='Name', description='规格名字'),
              value?: string(name='Value', description='规格描述'),
            }
          ](name='Specs', description='规格描述列表'),
        }
      ](name='Quotas'),
      resourceSummary?: [ 
        {
          count?: long(name='Count', description='资源个数'),
          productType?: string(name='ProductType', description='资源类型'),
        }
      ](name='ResourceSummary'),
      spec?: map[string]any(name='Spec', description='对于MaxCompute是个json，有如下key： Endpoint Project'),
      workspaceId?: string(name='WorkspaceId', description='所属的工作空间 id'),
      id?: string(name='id', description='资源 id'),
    }
  ](name='Resources', description='资源列表'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(request, headers, runtime);
}

async function listResourcesWithOptions(request: ListResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productTypes)) {
    query['ProductTypes'] = request.productTypes;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    query['ResourceGroupName'] = request.resourceGroupName;
  }
  if (!Util.isUnset(request.resourceName)) {
    query['ResourceName'] = request.resourceName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUsersRequest {
  accountTypes?: string(name='AccountTypes', description='账户类型列表，以逗号分隔'),
  pageNumber?: long(name='PageNumber', description='分页，从1开始，默认1'),
  pageSize?: long(name='PageSize', description='页大小，默认20'),
  userIds?: string(name='UserIds', description='用户 Id 列表，以逗号分隔'),
  userName?: string(name='UserName', description='用户名'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的用户数量'),
  users?: [ 
    {
      displayName?: string(name='DisplayName', description='用户显示名'),
      userId?: string(name='UserId', description='用户 id'),
      userName?: string(name='UserName', description='用户名'),
    }
  ](name='Users', description='用户列表'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersWithOptions(request, headers, runtime);
}

async function listUsersWithOptions(request: ListUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.accountTypes)) {
    query['AccountTypes'] = request.accountTypes;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的用户数量'),
  users?: [ 
    {
      userId?: string(name='UserId', description='用户 id'),
      userName?: string(name='UserName', description='用户名'),
    }
  ](name='Users', description='用户列表'),
}

model ListWorkspaceUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspaceUsersResponseBody(name='body'),
}

async function listWorkspaceUsers(WorkspaceId: string): ListWorkspaceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspaceUsersWithOptions(WorkspaceId, headers, runtime);
}

async function listWorkspaceUsersWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspaceUsersResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaceUsers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields', description='GetWorkspaceFields的Field字段'),
  moduleList?: string(name='ModuleList', description='逗号分割的模块列表，目前填入PAI'),
  option?: string(name='Option', description='逗号分隔的选项'),
  order?: string(name='Order', description='排序方向： ASC - 升序 DESC - 降序'),
  pageNumber?: long(name='PageNumber', description='分页，从1开始，默认1'),
  pageSize?: int32(name='PageSize', description='页大小，默认20'),
  sortBy?: string(name='SortBy', description='排序字段：CreateTime'),
  status?: string(name='Status', description='状态'),
  verbose?: boolean(name='Verbose', description='是否显示详细信息，默认true'),
  workspaceIds?: string(name='WorkspaceIds', description='工作空间id列表'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名字'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
  resourceLimits?: map[string]any(name='ResourceLimits', description='资源限制'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的作业数量'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames', description='管理员名字'),
      creator?: string(name='Creator', description='创建人'),
      description?: string(name='Description', description='描述'),
      envTypes?: [ string ](name='EnvTypes', description='环境，用作判断简单模式还是标准模式'),
      extraInfos?: map[string]any(name='ExtraInfos', description='附加信息'),
      gmtCreateTime?: string(name='GmtCreateTime', description='创建 UTC 时间，日期格式 iso8601'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='修改 UTC 时间，日期格式 iso8601'),
      isDefault?: boolean(name='IsDefault', description='是否为默认工作空间'),
      resourceCount?: int32(name='ResourceCount', description='资源数目'),
      status?: string(name='Status', description='工作空间状态'),
      workspaceId?: string(name='WorkspaceId', description='工作空间 id'),
      workspaceName?: string(name='WorkspaceName', description='工作空间名字'),
    }
  ](name='Workspaces', description='工作空间列表'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }
  if (!Util.isUnset(request.workspaceName)) {
    query['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PublishCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='被删除的代码源配置ID'),
  requestId?: string(name='RequestId'),
}

model PublishCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: PublishCodeSourceResponseBody(name='body'),
}

async function publishCodeSource(CodeSourceId: string): PublishCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function publishCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishCodeSource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${CodeSourceId}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PublishDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PublishDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: PublishDatasetResponseBody(name='body'),
}

async function publishDataset(DatasetId: string): PublishDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishDatasetWithOptions(DatasetId, headers, runtime);
}

async function publishDatasetWithOptions(DatasetId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishDatasetResponse {
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId', description='镜像 id'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model PublishImageResponse = {
  headers: map[string]string(name='headers'),
  body: PublishImageResponseBody(name='body'),
}

async function publishImage(ImageId: string): PublishImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishImageWithOptions(ImageId, headers, runtime);
}

async function publishImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishImageResponse {
  ImageId = OpenApiUtil.getEncodeParam(ImageId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${ImageId}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveImageResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RemoveImageResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveImageResponseBody(name='body'),
}

async function removeImage(ImageId: string): RemoveImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageWithOptions(ImageId, headers, runtime);
}

async function removeImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageResponse {
  ImageId = OpenApiUtil.getEncodeParam(ImageId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${ImageId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RemoveImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveImageLabelsResponseBody(name='body'),
}

async function removeImageLabels(ImageId: string, LabelKey: string): RemoveImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageLabelsWithOptions(ImageId, LabelKey, headers, runtime);
}

async function removeImageLabelsWithOptions(ImageId: string, LabelKey: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageLabelsResponse {
  ImageId = OpenApiUtil.getEncodeParam(ImageId);
  LabelKey = OpenApiUtil.getEncodeParam(LabelKey);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${ImageId}/labels/${LabelKey}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model RemoveMemberRoleResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveMemberRoleResponseBody(name='body'),
}

async function removeMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): RemoveMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

async function removeMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveMemberRoleResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  MemberId = OpenApiUtil.getEncodeParam(MemberId);
  RoleName = OpenApiUtil.getEncodeParam(RoleName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/members/${MemberId}/roles/${RoleName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveWorkspaceQuotaResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model RemoveWorkspaceQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveWorkspaceQuotaResponseBody(name='body'),
}

async function removeWorkspaceQuota(WorkspaceId: string, QuotaId: string): RemoveWorkspaceQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeWorkspaceQuotaWithOptions(WorkspaceId, QuotaId, headers, runtime);
}

async function removeWorkspaceQuotaWithOptions(WorkspaceId: string, QuotaId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveWorkspaceQuotaResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  QuotaId = OpenApiUtil.getEncodeParam(QuotaId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveWorkspaceQuota',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/quotas/${QuotaId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateConfigsRequest {
  configs?: [ 
    {
      configKey?: string(name='ConfigKey', description='配置键'),
      configValue?: string(name='ConfigValue', description='配置值'),
    }
  ](name='Configs', description='配置列表'),
}

model UpdateConfigsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigsResponseBody(name='body'),
}

async function updateConfigs(WorkspaceId: string, request: UpdateConfigsRequest): UpdateConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateConfigsWithOptions(WorkspaceId, request, headers, runtime);
}

async function updateConfigsWithOptions(WorkspaceId: string, request: UpdateConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigsResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.configs)) {
    body['Configs'] = request.configs;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfigs',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/configs`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateDatasetRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  options?: string(name='Options'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDatasetResponseBody(name='body'),
}

async function updateDataset(DatasetId: string, request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDatasetWithOptions(DatasetId, request, headers, runtime);
}

async function updateDatasetWithOptions(DatasetId: string, request: UpdateDatasetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatasetResponse {
  Util.validateModel(request);
  DatasetId = OpenApiUtil.getEncodeParam(DatasetId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataset',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasets/${DatasetId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateWorkspaceRequest {
  description?: string(name='Description', description='描述'),
  displayName?: string(name='DisplayName', description='显示名称'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model UpdateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkspaceResponseBody(name='body'),
}

async function updateWorkspace(WorkspaceId: string, request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

async function updateWorkspaceWithOptions(WorkspaceId: string, request: UpdateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateWorkspaceResourceRequest {
  isDefault?: boolean(name='IsDefault', description='是否默认资源实例，目前只能填 true，不支持填 false'),
  productType?: string(name='ProductType'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId', description='请求 id'),
}

model UpdateWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkspaceResourceResponseBody(name='body'),
}

async function updateWorkspaceResource(WorkspaceId: string, ResourceGroupName: string, request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceResourceWithOptions(WorkspaceId, ResourceGroupName, request, headers, runtime);
}

async function updateWorkspaceResourceWithOptions(WorkspaceId: string, ResourceGroupName: string, request: UpdateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResourceResponse {
  Util.validateModel(request);
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  ResourceGroupName = OpenApiUtil.getEncodeParam(ResourceGroupName);
  var body : map[string]any= {};
  if (!Util.isUnset(request.isDefault)) {
    body['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${WorkspaceId}/resources/${ResourceGroupName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

