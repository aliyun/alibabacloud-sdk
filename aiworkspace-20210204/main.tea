/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiworkspace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CodeSourceItem {
  accessibility?: string(name='Accessibility'),
  codeBranch?: string(name='CodeBranch'),
  codeCommit?: string(name='CodeCommit'),
  codeRepo?: string(name='CodeRepo'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName'),
  codeSourceId?: string(name='CodeSourceId'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  mountPath?: string(name='MountPath'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model Dataset {
  accessibility?: string(name='Accessibility'),
  dataSourceType?: string(name='DataSourceType'),
  dataType?: string(name='DataType'),
  datasetId?: string(name='DatasetId'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    Label
  ](name='Labels'),
  name?: string(name='Name'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId'),
  property?: string(name='Property'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model DatasetLabel {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model Label {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model Model {
  accessibility?: string(name='Accessibility'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  labels?: [
    Label
  ](name='Labels'),
  latestVersion?: ModelVersion(name='LatestVersion'),
  modelDescription?: string(name='ModelDescription'),
  modelId?: string(name='ModelId'),
  modelName?: string(name='ModelName'),
  ownerId?: string(name='OwnerId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model ModelVersion {
  formatType?: string(name='FormatType'),
  frameworkType?: string(name='FrameworkType'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  inferenceSpec?: map[string]any(name='InferenceSpec'),
  labels?: [
    Label
  ](name='Labels'),
  options?: string(name='Options'),
  ownerId?: string(name='OwnerId'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  uri?: string(name='Uri'),
  userId?: string(name='UserId'),
  versionDescription?: string(name='VersionDescription'),
  versionName?: string(name='VersionName'),
}

model AddImageRequest {
  accessibility?: string(name='Accessibility'),
  description?: string(name='Description'),
  imageUri?: string(name='ImageUri'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  name?: string(name='Name'),
  workspaceId?: string(name='WorkspaceId'),
}

model AddImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model AddImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImageResponseBody(name='body'),
}

async function addImage(request: AddImageRequest): AddImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageWithOptions(request, headers, runtime);
}

async function addImageWithOptions(request: AddImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageUri)) {
    body['ImageUri'] = request.imageUri;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddImageLabelsRequest {
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
}

model AddImageLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImageLabelsResponseBody(name='body'),
}

async function addImageLabels(ImageId: string, request: AddImageLabelsRequest): AddImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addImageLabelsWithOptions(ImageId, request, headers, runtime);
}

async function addImageLabelsWithOptions(ImageId: string, request: AddImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddImageLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/labels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddMemberRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddMemberRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMemberRoleResponseBody(name='body'),
}

async function addMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): AddMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

async function addMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): AddMemberRoleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AddMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members/${OpenApiUtil.getEncodeParam(MemberId)}/roles/${OpenApiUtil.getEncodeParam(RoleName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateMemberRequest {
  members?: [ 
    {
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId'),
    }
  ](name='Members'),
}

model CreateMemberResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName'),
      memberId?: string(name='MemberId'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId'),
}

model CreateMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMemberResponseBody(name='body'),
}

async function createMember(WorkspaceId: string, request: CreateMemberRequest): CreateMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemberWithOptions(WorkspaceId, request, headers, runtime);
}

async function createMemberWithOptions(WorkspaceId: string, request: CreateMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.members)) {
    body['Members'] = request.members;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceRequest {
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  envTypes?: [ string ](name='EnvTypes'),
  workspaceName?: string(name='WorkspaceName'),
}

model CreateWorkspaceResponseBody = {
  requestId?: string(name='RequestId'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceWithOptions(request, headers, runtime);
}

async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.envTypes)) {
    body['EnvTypes'] = request.envTypes;
  }
  if (!Util.isUnset(request.workspaceName)) {
    body['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateWorkspaceResourceRequest {
  option?: string(name='Option'),
  resources?: [ 
    {
      envType?: string(name='EnvType'),
      groupName?: string(name='GroupName'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
      productType?: string(name='ProductType'),
      quotas?: [ 
        {
          id?: string(name='Id'),
        }
      ](name='Quotas'),
      spec?: string(name='Spec'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Resources'),
}

model CreateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount'),
}

model CreateWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWorkspaceResourceResponseBody(name='body'),
}

async function createWorkspaceResource(WorkspaceId: string, request: CreateWorkspaceResourceRequest): CreateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

async function createWorkspaceResourceWithOptions(WorkspaceId: string, request: CreateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.option)) {
    body['Option'] = request.option;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteMembersRequest {
  memberIds?: string(name='MemberIds'),
}

model DeleteMembersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMembersResponseBody(name='body'),
}

async function deleteMembers(WorkspaceId: string, request: DeleteMembersRequest): DeleteMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMembersWithOptions(WorkspaceId, request, headers, runtime);
}

async function deleteMembersWithOptions(WorkspaceId: string, request: DeleteMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMembersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.memberIds)) {
    query['MemberIds'] = request.memberIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceResponseBody(name='body'),
}

async function deleteWorkspace(WorkspaceId: string): DeleteWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceWithOptions(WorkspaceId, headers, runtime);
}

async function deleteWorkspaceWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteWorkspaceResourceRequest {
  groupName?: string(name='GroupName'),
  option?: string(name='Option'),
  productType?: string(name='ProductType'),
}

model DeleteWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceResourceResponseBody(name='body'),
}

async function deleteWorkspaceResource(WorkspaceId: string, request: DeleteWorkspaceResourceRequest): DeleteWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

async function deleteWorkspaceResourceWithOptions(WorkspaceId: string, request: DeleteWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspaceResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDefaultWorkspaceRequest {
  verbose?: boolean(name='Verbose'),
}

model GetDefaultWorkspaceResponseBody = {
  conditions?: [ 
    {
      code?: long(name='Code'),
      message?: string(name='Message'),
      type?: string(name='Type'),
    }
  ](name='Conditions'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  envTypes?: [ string ](name='EnvTypes'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  owner?: {
    userId?: string(name='UserId'),
    userKp?: string(name='UserKp'),
    userName?: string(name='UserName'),
  }(name='Owner'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model GetDefaultWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDefaultWorkspaceResponseBody(name='body'),
}

async function getDefaultWorkspace(request: GetDefaultWorkspaceRequest): GetDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDefaultWorkspaceWithOptions(request, headers, runtime);
}

async function getDefaultWorkspaceWithOptions(request: GetDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDefaultWorkspaceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetImageRequest {
  verbose?: boolean(name='Verbose'),
}

model GetImageResponseBody = {
  accessibility?: string(name='Accessibility'),
  description?: string(name='Description'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  imageUri?: string(name='ImageUri'),
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  name?: string(name='Name'),
  parentUserId?: string(name='ParentUserId'),
  requestId?: string(name='RequestId'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageResponseBody(name='body'),
}

async function getImage(ImageId: string, request: GetImageRequest): GetImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getImageWithOptions(ImageId, request, headers, runtime);
}

async function getImageWithOptions(ImageId: string, request: GetImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetImageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMemberRequest {
  userId?: string(name='UserId'),
}

model GetMemberResponseBody = {
  displayName?: string(name='DisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  memberId?: string(name='MemberId'),
  memberName?: string(name='MemberName'),
  requestId?: string(name='RequestId'),
  roles?: [ string ](name='Roles'),
  userId?: string(name='UserId'),
}

model GetMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMemberResponseBody(name='body'),
}

async function getMember(WorkspaceId: string, request: GetMemberRequest): GetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemberWithOptions(WorkspaceId, request, headers, runtime);
}

async function getMemberWithOptions(WorkspaceId: string, request: GetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemberResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMember',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/member`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPermissionRequest {
  accessibility?: string(name='Accessibility'),
  creator?: string(name='Creator'),
}

model GetPermissionResponseBody = {
  permissionCode?: string(name='PermissionCode'),
  permissionRules?: [ 
    {
      accessibility?: string(name='Accessibility'),
      entityAccessType?: string(name='EntityAccessType'),
    }
  ](name='PermissionRules'),
  requestId?: string(name='RequestId'),
}

model GetPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPermissionResponseBody(name='body'),
}

async function getPermission(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest): GetPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPermissionWithOptions(WorkspaceId, PermissionCode, request, headers, runtime);
}

async function getPermissionWithOptions(WorkspaceId: string, PermissionCode: string, request: GetPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPermissionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermission',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/permissions/${OpenApiUtil.getEncodeParam(PermissionCode)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWorkspaceRequest {
  verbose?: boolean(name='Verbose'),
}

model GetWorkspaceResponseBody = {
  adminNames?: [ string ](name='AdminNames'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  envTypes?: [ string ](name='EnvTypes'),
  extraInfos?: map[string]any(name='ExtraInfos'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  isDefault?: boolean(name='IsDefault'),
  owner?: {
    displayName?: string(name='DisplayName'),
    userId?: string(name='UserId'),
    userKp?: string(name='UserKp'),
    userName?: string(name='UserName'),
  }(name='Owner'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(WorkspaceId: string, request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

async function getWorkspaceWithOptions(WorkspaceId: string, request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListImageLabelsRequest {
  imageId?: string(name='ImageId'),
  labelFilter?: string(name='LabelFilter'),
  labelKeys?: string(name='LabelKeys'),
  region?: string(name='Region'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListImageLabelsResponseBody = {
  labels?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Labels'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImageLabelsResponseBody(name='body'),
}

async function listImageLabels(request: ListImageLabelsRequest): ListImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImageLabelsWithOptions(request, headers, runtime);
}

async function listImageLabelsWithOptions(request: ListImageLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImageLabelsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.labelFilter)) {
    query['LabelFilter'] = request.labelFilter;
  }
  if (!Util.isUnset(request.labelKeys)) {
    query['LabelKeys'] = request.labelKeys;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/image/labels`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListImagesRequest {
  labels?: string(name='Labels'),
  name?: string(name='Name'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  parentUserId?: string(name='ParentUserId'),
  sortBy?: string(name='SortBy'),
  userId?: string(name='UserId'),
  verbose?: boolean(name='Verbose'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      accessibility?: string(name='Accessibility'),
      description?: string(name='Description'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      imageId?: string(name='ImageId'),
      imageUri?: string(name='ImageUri'),
      labels?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Labels'),
      name?: string(name='Name'),
      parentUserId?: string(name='ParentUserId'),
      userId?: string(name='UserId'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMembersRequest {
  memberName?: string(name='MemberName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  roles?: string(name='Roles'),
}

model ListMembersResponseBody = {
  members?: [ 
    {
      displayName?: string(name='DisplayName'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      memberId?: string(name='MemberId'),
      memberName?: string(name='MemberName'),
      roles?: [ string ](name='Roles'),
      userId?: string(name='UserId'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMembersResponseBody(name='body'),
}

async function listMembers(WorkspaceId: string, request: ListMembersRequest): ListMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMembersWithOptions(WorkspaceId, request, headers, runtime);
}

async function listMembersWithOptions(WorkspaceId: string, request: ListMembersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMembersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.memberName)) {
    query['MemberName'] = request.memberName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.roles)) {
    query['Roles'] = request.roles;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMembers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPermissionsResponseBody = {
  permissions?: [ 
    {
      permissionCode?: string(name='PermissionCode'),
      permissionRules?: [ 
        {
          accessibility?: string(name='Accessibility'),
          entityAccessType?: string(name='EntityAccessType'),
        }
      ](name='PermissionRules'),
    }
  ](name='Permissions'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermissionsResponseBody(name='body'),
}

async function listPermissions(WorkspaceId: string): ListPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(WorkspaceId, headers, runtime);
}

async function listPermissionsWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPermissionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListPermissions',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/permissions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQuotasRequest {
  name?: string(name='Name'),
}

model ListQuotasResponseBody = {
  quotas?: [ 
    {
      displayName?: string(name='DisplayName'),
      id?: string(name='Id'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      productCode?: string(name='ProductCode'),
      quotaType?: string(name='QuotaType'),
      specs?: [ 
        {
          name?: string(name='Name'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='Specs'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotas',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListResourcesRequest {
  groupName?: string(name='GroupName'),
  option?: string(name='Option'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productTypes?: string(name='ProductTypes'),
  resourceName?: string(name='ResourceName'),
  verbose?: boolean(name='Verbose'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      envType?: string(name='EnvType'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      groupName?: string(name='GroupName'),
      id?: string(name='Id'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
      productType?: string(name='ProductType'),
      quotas?: [ 
        {
          cardType?: string(name='CardType'),
          displayName?: string(name='DisplayName'),
          id?: string(name='Id'),
          mode?: string(name='Mode'),
          name?: string(name='Name'),
          productCode?: string(name='ProductCode'),
          quotaType?: string(name='QuotaType'),
          specs?: [ 
            {
              name?: string(name='Name'),
              value?: string(name='Value'),
            }
          ](name='Specs'),
        }
      ](name='Quotas'),
      spec?: map[string]any(name='Spec'),
      workspaceId?: string(name='WorkspaceId'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(request, headers, runtime);
}

async function listResourcesWithOptions(request: ListResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productTypes)) {
    query['ProductTypes'] = request.productTypes;
  }
  if (!Util.isUnset(request.resourceName)) {
    query['ResourceName'] = request.resourceName;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model ListWorkspaceUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkspaceUsersResponseBody(name='body'),
}

async function listWorkspaceUsers(WorkspaceId: string): ListWorkspaceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspaceUsersWithOptions(WorkspaceId, headers, runtime);
}

async function listWorkspaceUsersWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspaceUsersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaceUsers',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListWorkspacesRequest {
  fields?: string(name='Fields'),
  moduleList?: string(name='ModuleList'),
  option?: string(name='Option'),
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  status?: string(name='Status'),
  verbose?: boolean(name='Verbose'),
  workspaceIds?: string(name='WorkspaceIds'),
  workspaceName?: string(name='WorkspaceName'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId'),
  resourceLimits?: map[string]any(name='ResourceLimits'),
  totalCount?: long(name='TotalCount'),
  workspaces?: [ 
    {
      adminNames?: [ string ](name='AdminNames'),
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      envTypes?: [ string ](name='EnvTypes'),
      extraInfos?: map[string]any(name='ExtraInfos'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      isDefault?: boolean(name='IsDefault'),
      status?: string(name='Status'),
      workspaceId?: string(name='WorkspaceId'),
      workspaceName?: string(name='WorkspaceName'),
    }
  ](name='Workspaces'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.option)) {
    query['Option'] = request.option;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceIds)) {
    query['WorkspaceIds'] = request.workspaceIds;
  }
  if (!Util.isUnset(request.workspaceName)) {
    query['WorkspaceName'] = request.workspaceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaces',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PublishImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model PublishImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishImageResponseBody(name='body'),
}

async function publishImage(ImageId: string): PublishImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishImageWithOptions(ImageId, headers, runtime);
}

async function publishImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PublishImageResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PublishImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/publish`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveImageResponseBody(name='body'),
}

async function removeImage(ImageId: string): RemoveImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageWithOptions(ImageId, headers, runtime);
}

async function removeImageWithOptions(ImageId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImage',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveImageLabelsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveImageLabelsResponseBody(name='body'),
}

async function removeImageLabels(ImageId: string, LabelKeys: string): RemoveImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeImageLabelsWithOptions(ImageId, LabelKeys, headers, runtime);
}

async function removeImageLabelsWithOptions(ImageId: string, LabelKeys: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveImageLabelsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveImageLabels',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/images/${OpenApiUtil.getEncodeParam(ImageId)}/labels/${OpenApiUtil.getEncodeParam(LabelKeys)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveMemberRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveMemberRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveMemberRoleResponseBody(name='body'),
}

async function removeMemberRole(WorkspaceId: string, MemberId: string, RoleName: string): RemoveMemberRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeMemberRoleWithOptions(WorkspaceId, MemberId, RoleName, headers, runtime);
}

async function removeMemberRoleWithOptions(WorkspaceId: string, MemberId: string, RoleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveMemberRoleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveMemberRole',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/members/${OpenApiUtil.getEncodeParam(MemberId)}/roles/${OpenApiUtil.getEncodeParam(RoleName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateDefaultWorkspaceRequest {
  workspaceId?: string(name='WorkspaceId'),
}

model UpdateDefaultWorkspaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDefaultWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDefaultWorkspaceResponseBody(name='body'),
}

async function updateDefaultWorkspace(request: UpdateDefaultWorkspaceRequest): UpdateDefaultWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDefaultWorkspaceWithOptions(request, headers, runtime);
}

async function updateDefaultWorkspaceWithOptions(request: UpdateDefaultWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDefaultWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDefaultWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/defaultWorkspaces`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateWorkspaceRequest {
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
}

model UpdateWorkspaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceResponseBody(name='body'),
}

async function updateWorkspace(WorkspaceId: string, request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceWithOptions(WorkspaceId, request, headers, runtime);
}

async function updateWorkspaceWithOptions(WorkspaceId: string, request: UpdateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspace',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateWorkspaceResourceRequest {
  groupName?: string(name='GroupName'),
  isDefault?: boolean(name='IsDefault'),
  productType?: string(name='ProductType'),
}

model UpdateWorkspaceResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateWorkspaceResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceResourceResponseBody(name='body'),
}

async function updateWorkspaceResource(WorkspaceId: string, request: UpdateWorkspaceResourceRequest): UpdateWorkspaceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateWorkspaceResourceWithOptions(WorkspaceId, request, headers, runtime);
}

async function updateWorkspaceResourceWithOptions(WorkspaceId: string, request: UpdateWorkspaceResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceResourceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.isDefault)) {
    body['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceResource',
    version = '2021-02-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/workspaces/${OpenApiUtil.getEncodeParam(WorkspaceId)}/resources`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

