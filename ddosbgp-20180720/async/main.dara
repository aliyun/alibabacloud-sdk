/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ddosbgp';
  @version = '2018-07-20';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'ddosbgp.aliyuncs.com',
    'cn-beijing' = 'ddosbgp.aliyuncs.com',
    'cn-zhangjiakou' = 'ddosbgp.aliyuncs.com',
    'cn-huhehaote' = 'ddosbgp.aliyuncs.com',
    'cn-hangzhou' = 'ddosbgp.aliyuncs.com',
    'cn-shanghai' = 'ddosbgp.aliyuncs.com',
    'cn-shenzhen' = 'ddosbgp.aliyuncs.com',
    'ap-northeast-1' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'cn-chengdu' = 'ddosbgp.aliyuncs.com',
    'eu-central-1' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'ddosbgp.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'ddosbgp.aliyuncs.com',
    'cn-shanghai-finance-1' = 'ddosbgp.aliyuncs.com',
    'cn-north-2-gov-1' = 'ddosbgp.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddIpRequest {
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin Enterprise instance.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin Enterprise instances.', example='ddosbgp-cn-npk1z7t9****', position='Query'),
  ipList: string(name='IpList', description='The list of IP addresses that you want to add to the Anti-DDoS Origin Enterprise instance. This parameter is a string consisting of JSON arrays. Each element in a JSON array is a JSON struct that includes the following field:

*   **ip**: required. The IP address that you want to add. Data type: string.

    > The IP address must be the IP address of an asset that belongs to the current Alibaba Cloud account.', example='[{"ip":"1.XX.XX.1"},{"ip":"2.XX.XX.2"}]', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Anti-DDoS Origin Enterprise instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin Enterprise instance belongs in Resource Management. This parameter is empty by default, which indicates that the instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model AddIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C33EB3D5-AF96-43CA-9C7E-37A81BC06A1E'),
}

model AddIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIpResponseBody(name='body'),
}

async function addIp(request: AddIpRequest): AddIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIp', 'POST', '/', 'json', false, 'json', request);
}

model AddRdMemberListRequest {
  memberList: [ 
    {
      uid?: string(name='Uid', example='19510843762****'),
    }
  ](name='MemberList', shrink='json', position='Query'),
}

model AddRdMemberListResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model AddRdMemberListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRdMemberListResponseBody(name='body'),
}

async function addRdMemberList(request: AddRdMemberListRequest): AddRdMemberListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRdMemberList', 'POST', '/', 'json', false, 'json', request);
}

model AttachAssetGroupToInstanceRequest {
  assetGroupList: [ 
    {
      memberUid?: string(name='MemberUid', description='The UID of the member to which the asset belongs.', example='1743970208320***'),
      name: string(name='Name', description='The ID of the asset that you want to add. If the asset is a Web Application Firewall (WAF) instance, specify the ID of the WAF instance.', example='waf-test-001'),
      region: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou'),
      type: string(name='Type', description='The type of the asset.', example='waf'),
    }
  ](name='AssetGroupList', description='The information about the asset to be associated.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances of paid editions.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model AttachAssetGroupToInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='52B49F64-5A36-5CE0-BD00-765792C26AA9'),
}

model AttachAssetGroupToInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachAssetGroupToInstanceResponseBody(name='body'),
}

async function attachAssetGroupToInstance(request: AttachAssetGroupToInstanceRequest): AttachAssetGroupToInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachAssetGroupToInstance', 'POST', '/', 'json', false, 'json', request);
}

model AttachToPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  ipPortProtocolList: [ 
    {
      ip: string(name='Ip', example='112.124.241.***'),
      port?: int32(name='Port', example='8*', minimum=1, maximum=65535),
      protocol?: string(name='Protocol', example='tcp'),
    }
  ](name='IpPortProtocolList', shrink='json', position='Query'),
  policyId: string(name='PolicyId', example='cd8b4d70-e4e0-413a-b390-e71d********', position='Query'),
}

model AttachToPolicyResponseBody = {
  requestId?: string(name='RequestId', example='DC245DEE-9800-5579-BF99-189D6A5****'),
}

model AttachToPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachToPolicyResponseBody(name='body'),
}

async function attachToPolicy(request: AttachToPolicyRequest): AttachToPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachToPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccessLogAuthRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

For more information about the valid values of this parameter, see [Regions and zones](~~188196~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management. This parameter is empty by default, which indicates that the Anti-DDoS Origin instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model CheckAccessLogAuthResponseBody = {
  accessLogAuth?: boolean(name='AccessLogAuth', description='Indicates whether Anti-DDoS Origin was authorized to access Log Service. Valid values:

*   **true**: Anti-DDoS Origin was authorized.
*   **false**: Anti-DDoS Origin was not authorized.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='864FE2F4-CB2E-4024-B9EF-D59FD08ABD41'),
}

model CheckAccessLogAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAccessLogAuthResponseBody(name='body'),
}

async function checkAccessLogAuth(request: CheckAccessLogAuthRequest): CheckAccessLogAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccessLogAuth', 'POST', '/', 'json', false, 'json', request);
}

model CheckGrantRequest {
  isSlr?: boolean(name='IsSlr', description='Specifies whether to allow Anti-DDoS Origin to check the service-linked role. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
}

model CheckGrantResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB002CE5-5E6C-5F11-AE15-B525299A40F6'),
  status?: int32(name='Status', description='Indicates whether Anti-DDoS Origin is authorized to obtain information about the assets within the current Alibaba Cloud account. Valid values:

*   **1**: Anti-DDoS Origin is authorized to obtain information about the assets within the current Alibaba Cloud account.
*   **0**: Anti-DDoS Origin is not authorized to obtain information about the assets within the current Alibaba Cloud account.', example='1'),
}

model CheckGrantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckGrantResponseBody(name='body'),
}

/**
  * You can call the CheckGrant operation to query whether Anti-DDoS Origin is authorized to obtain information about the assets within the current Alibaba Cloud account.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function checkGrant(request: CheckGrantRequest): CheckGrantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckGrant', 'GET', '/', 'json', false, 'json', request);
}

model ConfigSchedruleOnDemandRequest {
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
  ruleAction: string(name='RuleAction', description='The scheduling action. Set the value to **declare**, which indicates that the route is advertised.', example='declare', position='Query'),
  ruleConditionCnt: string(name='RuleConditionCnt', description='If the inbound bandwidth or packets consecutively exceed the threshold for the specified number of times, the scheduling rule is triggered and traffic is rerouted to the on-demand instance. The specified number of times is the value of this parameter.

>  The threshold of inbound bandwidth is the value of **RuleConditionMbps**. The threshold of inbound packets is the value of **RuleConditionKpps**.', example='3', position='Query'),
  ruleConditionKpps: string(name='RuleConditionKpps', description='The threshold of inbound packets. Unit: Kpps. Minimum value: **10**.', example='10', position='Query'),
  ruleConditionMbps: string(name='RuleConditionMbps', description='The threshold of inbound bandwidth. Unit: Mbit/s. Minimum value: **100**.', example='100', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduling rule.

The name can contain lowercase letters, digits, hyphens (-), and underscores (\\_). The name can be up to 32 characters in length. We recommend that you use the ID of the on-demand instance as the name. Example: `ddosbgp-cn-z2q1qzxb****`.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  ruleSwitch: string(name='RuleSwitch', description='Specifies whether the scheduling rule is enabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on', position='Query'),
  ruleUndoBeginTime: string(name='RuleUndoBeginTime', description='The start time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.

If the system detects that DDoS attacks stop, the system no longer reroutes traffic to the on-demand instance from the time you specified. We recommend that you set this parameter to a value that is defined as off-peak hours.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='03:00', position='Query'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime', description='The end time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.', example='03:05', position='Query'),
  ruleUndoMode: string(name='RuleUndoMode', description='The stop method of the scheduling rule. Valid values:

*   **auto**: The scheduling rule automatically stops.
*   **manual**: The scheduling rule is manually stopped.', example='manual', position='Query'),
  timeZone: string(name='TimeZone', description='The time zone of the time when the scheduling rule automatically stops. The time zone must be in the `GMT-hh:mm` format.

For example, the value `GMT-08:00` indicates that the time zone is UTC+8.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='GMT-08:00', position='Query'),
}

model ConfigSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD06F539-2FBE-450D-9391-7EFF787128F5'),
}

model ConfigSchedruleOnDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigSchedruleOnDemandResponseBody(name='body'),
}

async function configSchedruleOnDemand(request: ConfigSchedruleOnDemandRequest): ConfigSchedruleOnDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigSchedruleOnDemand', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  name: string(name='Name', example='test', minLength=1, maxLength=32, position='Query'),
  type: string(name='Type', example='l3', position='Query'),
}

model CreatePolicyResponseBody = {
  id?: string(name='Id', example='83967609-7ea5-4f6d-a6ea-380b09e****'),
  requestId?: string(name='RequestId', example='864FE2F4-CB2E-4024-B9EF-D59FD08A****'),
}

model CreatePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyResponseBody(name='body'),
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchedruleOnDemandRequest {
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
  ruleAction: string(name='RuleAction', description='The scheduling action. Set the value to **declare**, which indicates that the route is advertised.', example='declare', position='Query'),
  ruleConditionCnt: string(name='RuleConditionCnt', description='If the inbound bandwidth or packets consecutively exceed the threshold for the specified number of times, the scheduling rule is triggered and traffic is rerouted to the on-demand instance. The specified number of times is the value of this parameter.

>  The threshold of inbound bandwidth is the value of **RuleConditionMbps**. The threshold of inbound packets is the value of **RuleConditionKpps**.', example='3', position='Query'),
  ruleConditionKpps: string(name='RuleConditionKpps', description='The threshold of inbound packets. Unit: Kpps. Minimum value: **10**.', example='10', position='Query'),
  ruleConditionMbps: string(name='RuleConditionMbps', description='The threshold of inbound bandwidth. Unit: Mbit/s. Minimum value: **100**.', example='100', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduling rule.

The name can contain lowercase letters, digits, hyphens (-), and underscores (\\_). The name can be up to 32 characters in length. We recommend that you use the ID of the on-demand instance as the name. Example: `ddosbgp-cn-z2q1qzxb****`.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  ruleSwitch: string(name='RuleSwitch', description='Specifies whether the scheduling rule is enabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on', position='Query'),
  ruleUndoBeginTime: string(name='RuleUndoBeginTime', description='The start time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.

If the system detects that DDoS attacks stop, the system no longer reroutes traffic to the on-demand instance from the time you specified. We recommend that you set this parameter to a value that is defined as off-peak hours.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='03:00', position='Query'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime', description='The end time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.', example='03:05', position='Query'),
  ruleUndoMode: string(name='RuleUndoMode', description='The stop method of the scheduling rule. Valid values:

*   **auto**: The scheduling rule automatically stops.
*   **manual**: The scheduling rule is manually stopped.', example='auto', position='Query'),
  timeZone: string(name='TimeZone', description='The time zone of the time when the scheduling rule automatically stops. The time zone must be in the `GMT-hh:mm` format.

For example, the value `GMT-08:00` indicates that the time zone is UTC+8.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='GMT-08:00', position='Query'),
}

model CreateSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD06F539-2FBE-450D-9391-7EFF787128F5'),
}

model CreateSchedruleOnDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSchedruleOnDemandResponseBody(name='body'),
}

async function createSchedruleOnDemand(request: CreateSchedruleOnDemandRequest): CreateSchedruleOnDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchedruleOnDemand', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBlackholeRequest {
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  ip: string(name='Ip', description='The IP address for which you want to deactivate blackhole filtering.

>  You can call the [DescribePackIpList](~~118701~~) operation to query all the IP addresses that are protected by the Anti-DDoS Origin instance and the protection status of the IP addresses. For example, you can query whether blackhole filtering is triggered for an IP address.', example='47.89.XX.XX', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
}

model DeleteBlackholeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C33EB3D5-AF96-43CA-9C7E-37A81BC06A1E'),
}

model DeleteBlackholeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBlackholeResponseBody(name='body'),
}

/**
  * You can call the DeleteBlackhole operation to deactivate blackhole filtering for a protected IP address.
  * Before you call this operation, you can call the [DescribePackIpList](~~118701~~) operation to query the protection status of the IP addresses that are protected by your Anti-DDoS Origin instance. For example, you can query whether blackhole filtering is triggered for an IP address.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteBlackhole(request: DeleteBlackholeRequest): DeleteBlackholeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBlackhole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpRequest {
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin Enterprise instance.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin Enterprise instances.', example='ddosbgp-cn-npk1z7t9****', position='Query'),
  ipList: string(name='IpList', description='The list of IP addresses that you want to remove from the Anti-DDoS Origin Enterprise instance. This parameter is a string consisting of JSON arrays. Each element in a JSON array is a JSON struct that includes the following field:

*   **ip**: required. The IP address that you want to remove. Data type: string.

    > The IP addresses that you want to remove must be protected by the Anti-DDoS Origin Enterprise instance.', example='[{"ip":"1.XX.XX.1"},{"ip":"2.XX.XX.2"}]', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Anti-DDoS Origin Enterprise instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin Enterprise instance belongs in Resource Management. This parameter is empty by default, which indicates that the instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model DeleteIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C33EB3D5-AF96-43CA-9C7E-37A81BC06A1E'),
}

model DeleteIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpResponseBody(name='body'),
}

/**
  * The Anti-DDoS Origin Enterprise instance no longer protects the IP addresses that are removed.
  *
 */
async function deleteIp(request: DeleteIpRequest): DeleteIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIp', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='90300b1a-ced8-4437-b4bf-f9a5*******', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId', example='BD06F539-2FBE-450D-9391-7EFF7871****'),
}

model DeletePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyResponseBody(name='body'),
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRdMemberListRequest {
  memberList: [ 
    {
      uid?: string(name='Uid', example='136548010379****'),
    }
  ](name='MemberList', shrink='json', position='Query'),
}

model DeleteRdMemberListResponseBody = {
  requestId?: string(name='RequestId', example='A2D6D5FB-FA07-41A8-B093-A2B7B26E72F2'),
}

model DeleteRdMemberListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRdMemberListResponseBody(name='body'),
}

async function deleteRdMemberList(request: DeleteRdMemberListRequest): DeleteRdMemberListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRdMemberList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSchedruleOnDemandRequest {
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
  ruleName: string(name='RuleName', description='The name of the scheduling rule that you want to delete.', example='testrule', position='Query'),
}

model DeleteSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD06F539-2FBE-450D-9391-7EFF787128F5'),
}

model DeleteSchedruleOnDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSchedruleOnDemandResponseBody(name='body'),
}

async function deleteSchedruleOnDemand(request: DeleteSchedruleOnDemandRequest): DeleteSchedruleOnDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchedruleOnDemand', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetGroupRequest {
  name?: string(name='Name', description='The ID of the asset. If the asset is a Web Application Firewall (WAF) instance, specify the ID of the WAF instance.', example='waf_v2_public_cn-lbj382l****', position='Query'),
  region: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the asset. Valid values:

*   **waf**: WAF instance
*   **ga**: Global Accelerator (GA) instance', example='waf', position='Query'),
}

model DescribeAssetGroupResponseBody = {
  assetGroupList?: [ 
    {
      name?: string(name='Name', description='The ID of the asset.', example='waf_v2_public_cn-lbj382l****'),
      region?: string(name='Region', description='The region to which the asset belongs.', example='cn-hangzhou'),
      type?: string(name='Type', description='The type of the asset.', example='waf'),
    }
  ](name='AssetGroupList', description='The information about the asset.'),
  requestId?: string(name='RequestId', description='The request ID.', example='487EC0F7-8D14-504E-914E-3A1BC314B581'),
  total?: long(name='Total', description='The total number of entries returned.', example='2'),
}

model DescribeAssetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAssetGroupResponseBody(name='body'),
}

async function describeAssetGroup(request: DescribeAssetGroupRequest): DescribeAssetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetGroupToInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances of paid editions.', example='ddosbgp-cn-7212zaa5v***', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member to which the asset belongs.', example='170858869679****', position='Query'),
  name?: string(name='Name', description='The ID of the asset. If the asset is a Web Application Firewall (WAF) instance, specify the ID of the WAF instance.', example='waf_v2_public_cn-lbj382l****', position='Query'),
  region?: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the asset. Valid values:

*   **waf**: WAF instance
*   **ga**: Global Accelerator (GA) instance', example='waf', position='Query'),
}

model DescribeAssetGroupToInstanceResponseBody = {
  dataList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance of a paid edition.', example='ddosbgp-cn-7212zaa5v***'),
      memberUid?: string(name='MemberUid', description='The UID of the member to which the asset belongs.', example='170858869679****'),
      name?: string(name='Name', description='The ID of the asset.', example='waf_v2_public_cn-lbj382l****'),
      region?: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou'),
      type?: string(name='Type', description='The type of the asset.', example='waf'),
    }
  ](name='DataList', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C73C59B9-9F5C-57FF-A394-13EC8FC3B2FF'),
  total?: long(name='Total', description='The total number of entries returned.', example='1'),
}

model DescribeAssetGroupToInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAssetGroupToInstanceResponseBody(name='body'),
}

async function describeAssetGroupToInstance(request: DescribeAssetGroupToInstanceRequest): DescribeAssetGroupToInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetGroupToInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosEventRequest {
  endTime: int32(name='EndTime', description='The end time of the DDoS attack event to query. This value is a UNIX timestamp. Unit: seconds.', example='1638288000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  ip?: string(name='Ip', description='The attacked IP address to query.', example='47.89.XX.XX', position='Query'),
  pageNo: int32(name='PageNo', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  startTime: int32(name='StartTime', description='The start time of the DDoS attack event to query. This value is a UNIX timestamp. Unit: seconds.', example='1633017600', position='Query'),
}

model DescribeDdosEventResponseBody = {
  events?: [ 
    {
      endTime?: int32(name='EndTime', description='The time when the DDoS attack stopped. This value is a UNIX timestamp. Unit: seconds.', example='1637554335'),
      ip?: string(name='Ip', description='The attacked IP address.', example='47.89.XX.XX'),
      mbps?: int32(name='Mbps', description='The volume of the request traffic at the start of the DDoS attack. Unit: Mbit/s.', example='0'),
      pps?: int32(name='Pps', description='The number of packets at the start of the DDoS attack. Unit: packets per second (PPS).', example='456'),
      startTime?: int32(name='StartTime', description='The time when the DDoS attack started. This value is a UNIX timestamp. Unit: seconds.', example='1637554034'),
      status?: string(name='Status', description='The status of the DDoS attack event. Valid values:

*   **hole_begin**: indicates that blackhole filtering is triggered for the attacked IP address.
*   **hole_end**: indicates that blackhole filtering is deactivated for the attacked IP address.
*   **defense_begin**: indicates that attack traffic is being scrubbed.
*   **defense_end**: indicates that attack traffic is scrubbed.', example='defense_end'),
    }
  ](name='Events', description='The details about the DDoS attack event.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F3B6C3F9-6B21-519D-B976-A1E14166F909'),
  total?: long(name='Total', description='The total number of DDoS attack events.', example='1'),
}

model DescribeDdosEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDdosEventResponseBody(name='body'),
}

/**
  * You can call the DescribeDdosEvent operation to query the details about the DDoS attack events that occurred on a specific Anti-DDoS Origin instance by page. The details include the start time, end time, attacked IP address, and status of each event.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDdosEvent(request: DescribeDdosEventRequest): DescribeDdosEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosOriginInstanceBillRequest {
  endTime?: long(name='EndTime', example='1711382399410', position='Query'),
  isShowList?: boolean(name='IsShowList', example='false', position='Query'),
  startTime?: long(name='StartTime', example='1711209600410', position='Query'),
  type?: string(name='Type', example='function', position='Query'),
}

model DescribeDdosOriginInstanceBillResponseBody = {
  debtStatus?: long(name='DebtStatus', example='0'),
  flowList?: [ 
    {
      memberFlow?: string(name='MemberFlow', example='[{\\"bytes\\":79282719,\\"memberUid\\":\\"\\",\\"regionFlows\\":{\\"cn-hangzhou\\":[{\\"bytes\\":79282719,\\"instanceId\\":\\"ddosorigin_cn-u7c3lcr9r02\\",\\"ip\\":\\"47.118.168.57\\",\\"region\\":\\"cn-hangzhou\\"}]}}]'),
      regionFlow?: string(name='RegionFlow', example='{\\"cn-hangzhou\\":[{\\"bytes\\":0,\\"instanceId\\":\\"ddosorigin_cn-u7c3lcr9r02\\",\\"ip\\":\\"47.118.168.124\\",\\"region\\":\\"cn-hangzhou\\"}]}'),
      time?: long(name='Time', example='1620951900'),
      totalFlow?: long(name='TotalFlow', example='6302081067'),
    }
  ](name='FlowList'),
  flowRegion?: map[string]any(name='FlowRegion', example='{\\"cn-hongkong\\": 166491566}'),
  instanceId?: string(name='InstanceId', example='ddosorigin_cn-u7c3lcr9r02'),
  ipCount?: long(name='IpCount', example='15'),
  ipCountOrFunctionList?: [ 
    {
      coverage?: string(name='Coverage', example='global'),
      ipCntCn?: long(name='IpCntCn', example='5'),
      ipCntOv?: long(name='IpCntOv', example='5'),
      memberIpCnt?: string(name='MemberIpCnt', example='[{\\"eipCnIpCount\\":3,\\"eipOvIpCount\\":18,\\"memberUid\\":\\"\\",\\"standardAssetsCnIpCount\\":2,\\"standardAssetsOvIpCount\\":0},{\\"eipCnIpCount\\":3,\\"eipOvIpCount\\":0,\\"memberUid\\":\\"1776997906319249\\",\\"standardAssetsCnIpCount\\":0,\\"standardAssetsOvIpCount\\":0}]'),
      time?: long(name='Time', example='1680278400000'),
    }
  ](name='IpCountOrFunctionList'),
  ipInfo?: string(name='IpInfo', example='{\\"eipCnIpCount\\":6,\\"eipOvIpCount\\":17,\\"standardAssetsCnIpCount\\":2,\\"standardAssetsOvIpCount\\":0}'),
  requestId?: string(name='RequestId', example='72155560-F343-55C8-82FE-ED4D7E4AA97E'),
  standardAssetsFlowList?: [ 
    {
      memberFlow?: string(name='MemberFlow', example='[{\\"bytes\\":79282719,\\"memberUid\\":\\"\\",\\"regionFlows\\":{\\"cn-hangzhou\\":[{\\"bytes\\":79282719,\\"instanceId\\":\\"ddosorigin_cn-u7c3lcr9r02\\",\\"ip\\":\\"47.118.168.57\\",\\"region\\":\\"cn-hangzhou\\"}]}}]'),
      regionFlow?: string(name='RegionFlow', example='{\\"cn-hangzhou\\":[{\\"bytes\\":0,\\"instanceId\\":\\"ddosorigin_cn-u7c3lcr9r02\\",\\"ip\\":\\"47.118.168.124\\",\\"region\\":\\"cn-hangzhou\\"}]}'),
      time?: long(name='Time', example='1679846400000'),
      totalFlow?: long(name='TotalFlow', example='6302081067'),
    }
  ](name='StandardAssetsFlowList'),
  standardAssetsFlowRegion?: map[string]any(name='StandardAssetsFlowRegion', example='{\\"cn-hongkong\\": 166491566}'),
  standardAssetsTotalFlowCn?: long(name='StandardAssetsTotalFlowCn', example='0'),
  standardAssetsTotalFlowOv?: long(name='StandardAssetsTotalFlowOv', example='0'),
  status?: long(name='Status', example='1'),
  totalFlowCn?: long(name='TotalFlowCn', example='6302081067'),
  totalFlowOv?: long(name='TotalFlowOv', example='6204918019'),
}

model DescribeDdosOriginInstanceBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDdosOriginInstanceBillResponseBody(name='body'),
}

async function describeDdosOriginInstanceBill(request: DescribeDdosOriginInstanceBillRequest): DescribeDdosOriginInstanceBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosOriginInstanceBill', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExcpetionCountRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
}

model DescribeExcpetionCountResponseBody = {
  exceptionIpCount?: int32(name='ExceptionIpCount', description='The number of assets that are in an abnormal state.', example='0'),
  expireTimeCount?: int32(name='ExpireTimeCount', description='The number of Anti-DDoS Origin instances that are about to expire.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B45279A-B1BE-5EEE-87CA-58AF4183EA58'),
}

model DescribeExcpetionCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExcpetionCountResponseBody(name='body'),
}

/**
  * ## Usage notes
  * You can call the DescribeExcpetionCount operation to query the number of assets that are in an abnormal state and the number of Anti-DDoS Origin instances that are about to expire in a specific region. For example, if blackhole filtering is triggered for an IP address, the IP address is in an abnormal state. An instance whose remaining validity period is less than seven days is considered as an instance that is about to expire.
  *
 */
async function describeExcpetionCount(request: DescribeExcpetionCountRequest): DescribeExcpetionCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExcpetionCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceListRequest {
  instanceIdList?: string(name='InstanceIdList', description='The IDs of the Anti-DDoS Origin instances to query. Specify the value is in the `["<Instance ID 1>","<Instance ID 2>",……]` format.', example='["ddosbgp-cn-oew1pjrk****"]', position='Query'),
  instanceType?: string(name='InstanceType', description='The mitigation plan of the Anti-DDoS Origin instance to query. Valid values:

*   **0**: the Professional mitigation plan
*   **1**: the Enterprise mitigation plan', example='0', position='Query'),
  instanceTypeList?: [ string ](name='InstanceTypeList', position='Query'),
  ip?: string(name='Ip', description='The IP address of the object that is protected by the Anti-DDoS Origin instance to query.', example='47.89.XX.XX', position='Query'),
  ipVersion?: string(name='IpVersion', description='The protocol type of the IP address asset that is protected by the Anti-DDoS Origin instance to query. Valid values:

*   **Ipv4**: IPv4
*   **Ipv6**: IPv6', example='IPv4', position='Query'),
  orderby?: string(name='Orderby', description='The field that is used to sort the Anti-DDoS Origin instances. Set the value to **expireTime**, which indicates that the instances are sorted based on the expiration time.

You can set the **Orderdire** parameter to specify the sorting method.', example='expireTime', position='Query'),
  orderdire?: string(name='Orderdire', description='The sorting method. Valid values:

*   **desc**: the descending order. This is the default value.
*   **asc**: the ascending order.', example='desc', position='Query'),
  pageNo: int32(name='PageNo', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance to query resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the Anti-DDoS Origin instance to query. Fuzzy match is supported.', example='test', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is added to the Anti-DDoS Origin instance to query.', example='test-key'),
      value?: string(name='Value', description='The value of the tag that is added to the Anti-DDoS Origin instance to query.', example='test-value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstanceListResponseBody = {
  instanceList?: [ 
    {
      autoProtectCondition?: {
        events?: [ string ](name='Events'),
      }(name='AutoProtectCondition'),
      autoRenewal?: boolean(name='AutoRenewal', description='Indicates whether auto-renewal is enabled for the instance. Valid values:

*   **true**: enabled
*   **false**: disabled', example='false'),
      blackholdingCount?: string(name='BlackholdingCount', description='The number of protected public IP addresses for which blackhole filtering is triggered.

>  You can call the [DeleteBlackhole](~~118692~~) operation to deactivate blackhole filtering for a protected IP address.', example='0'),
      commodityType?: string(name='CommodityType'),
      coverageType?: int32(name='CoverageType'),
      expireTime?: long(name='ExpireTime', description='The time when the instance expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1640275200000'),
      gmtCreate?: long(name='GmtCreate', description='The time when the instance was purchased. This value is a UNIX timestamp. Unit: milliseconds.', example='1592886047000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='ddosbgp-cn-oew1pjrk****'),
      instanceType?: string(name='InstanceType', description='The mitigation plan of the instance. Valid values:

*   **0**: the Professional mitigation plan
*   **1**: the Enterprise mitigation plan', example='1'),
      ipType?: string(name='IpType', description='The protocol type of the IP address asset that is protected by the instance. Valid values:

*   **Ipv4**: IPv4
*   **Ipv6**: IPv6', example='IPv4'),
      product?: string(name='Product', description='The type of the cloud service that is associated with the Anti-DDoS Origin instance. By default, this parameter is not returned. If the Anti-DDoS Origin instance is created by using a different cloud service, the code of the cloud service is returned.

Valid values:

*   **gamebox**: The Anti-DDoS Origin instance is created by using Game Security Box.
*   **eip**: The Anti-DDoS Origin instance is created by using an elastic IP address (EIP) for which Anti-DDoS (Enhanced Edition) is enabled.', example='gamebox'),
      remark?: string(name='Remark', description='The remarks of the instance.', example='test'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   **1**: normal
*   **2**: expired
*   **3**: released', example='1'),
    }
  ](name='InstanceList', description='The details about the Anti-DDoS Origin instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='381D5D33-BB8F-395F-8EE4-AE3BB4B523C4'),
  total?: long(name='Total', description='The total number of Anti-DDoS Origin instances.', example='1'),
}

model DescribeInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceListResponseBody(name='body'),
}

/**
  * You can call the DescribeInstanceList operation to query the details of all Anti-DDoS Origin instances within your Alibaba Cloud account by page. The details include the ID, validity period, and status of each instance.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeInstanceList(request: DescribeInstanceListRequest): DescribeInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSpecsRequest {
  instanceIdList: string(name='InstanceIdList', description='The ID of the Anti-DDoS Origin Enterprise instance. This parameter value is a string consisting of JSON arrays. Each element in a JSON array indicates an instance ID. If you want to query more than one instance, separate instance IDs with commas (,).

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin Enterprise instances in a specific region.', example='["ddosbgp-cn-n6w1r7nz****"]', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Anti-DDoS Origin Enterprise instance. Default value: **cn-hangzhou**, which indicates the China (Hangzhou) region.

>  If your instance does not reside in the China (Hangzhou) region, you must specify this parameter to the region ID of your instance. You can call the [DescribeRegions](~~118703~~) operation to query the regions of cloud assets that are supported by an Anti-DDoS Origin instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin Enterprise instance belongs in Resource Management. This parameter is empty by default, which indicates that the Anti-DDoS Origin Enterprise instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model DescribeInstanceSpecsResponseBody = {
  instanceSpecs?: [ 
    {
      availableDefenseTimes?: int32(name='AvailableDefenseTimes', description='The number of times that the unlimited protection feature can be enabled.', example='2'),
      availableDeleteBlackholeCount?: string(name='AvailableDeleteBlackholeCount', description='The number of times that blackhole filtering can be deactivated.', example='100'),
      defenseTimesPercent?: int32(name='DefenseTimesPercent'),
      instanceId?: string(name='InstanceId', description='The ID of the Anti-DDoS Origin Enterprise instance.', example='ddosbgp-cn-n6w1r7nz****'),
      isFullDefenseMode?: int32(name='IsFullDefenseMode', description='Indicates whether the unlimited protection feature is enabled. Valid values:

*   **0**: The unlimited protection feature is disabled.
*   **1**: The unlimited protection feature is enabled.', example='1'),
      packConfig?: {
        bandwidth?: long(name='Bandwidth', description='The bandwidth of the package configuration.', example='2'),
        bindIpCount?: int32(name='BindIpCount', description='The number of IP addresses that are protected by the Anti-DDoS Origin Enterprise instance.', example='0'),
        ipAdvanceThre?: int32(name='IpAdvanceThre', description='The burstable bandwidth of each protected IP address. Unit: Gbit/s.', example='300'),
        ipBasicThre?: int32(name='IpBasicThre', description='The basic bandwidth of each protected IP address. Unit: Gbit/s.', example='20'),
        ipSpec?: int32(name='IpSpec', description='The number of IP addresses that can be protected by the Anti-DDoS Origin Enterprise instance.', example='100'),
        normalBandwidth?: int32(name='NormalBandwidth', description='The normal clean bandwidth. Unit: Mbit/s.', example='200'),
        packAdvThre?: int32(name='PackAdvThre', description='The burstable protection bandwidth of the Anti-DDoS Origin Enterprise instance. Unit: Gbit/s.', example='300'),
        packBasicThre?: int32(name='PackBasicThre', description='The basic protection bandwidth of the Anti-DDoS Origin Enterprise instance. Unit: Gbit/s.', example='20'),
      }(name='PackConfig', description='The configurations of the Anti-DDoS Origin Enterprise instance, including the number of protected IP addresses and protection bandwidth.'),
      region?: string(name='Region', description='The region ID of the Anti-DDoS Origin Enterprise instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query the name of the region.', example='cn-hangzhou'),
      totalDefenseTimes?: int32(name='TotalDefenseTimes', description='The number of times that the unlimited protection feature can be enabled.', example='2'),
    }
  ](name='InstanceSpecs', description='The specifications of the Anti-DDoS Origin Enterprise instance, including whether the unlimited protection feature is enabled, and the numbers of times that the unlimited protection feature can be enabled and has been enabled.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5840AB9F-1419-4620-807D-5EA476090247'),
}

model DescribeInstanceSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnDemandDdosEventRequest {
  endTime: int32(name='EndTime', description='The timestamp that specifies the end of the time range to query. Unit: seconds. The timestamp follows the UNIX time format. It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970.', example='1557909844', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance to query.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  ip?: string(name='Ip', description='The IP address of the protection target.', example='192.XX.XX.1', position='Query'),
  pageNo: int32(name='PageNo', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. The maximum value is **50**. The default value is **10**.', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm2pz25js****', position='Query'),
  startTime: int32(name='StartTime', description='The timestamp that specifies the beginning of the time range to query. Unit: seconds. The timestamp follows the UNIX time format. It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970.', example='1557305044', position='Query'),
}

model DescribeOnDemandDdosEventResponseBody = {
  events?: [ 
    {
      endTime?: int32(name='EndTime', description='The timestamp that indicates the end time of the attack. Unit: seconds. The timestamp follows the UNIX time format. It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970.', example='1557891306'),
      ip?: string(name='Ip', description='The IP address of the protection target that encounters the DDoS attack.', example='192.XX.XX.1'),
      mbps?: int32(name='Mbps', description='The throughput of the DDoS attack. Unit: Mbit/s.', example='110000'),
      pps?: int32(name='Pps', description='The packet forwarding rate of the DDoS attack. Unit: packets per second (PPS).', example='0'),
      startTime?: int32(name='StartTime', description='The timestamp that indicates the start time of the attack. Unit: seconds. The timestamp follows the UNIX time format. It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970.', example='1557889506'),
      status?: string(name='Status', description='The status of the event. Valid values:

*   **hole_begin **: indicates that the event is in the blackhole state.
*   **hole_end **: indicates that blackhole ends.
*   **defense_begin **: indicates that the event is in the cleaning state.
*   **defense_end **: indicates that cleaning ends.', example='defense_end'),
    }
  ](name='Events', description='The list of DDoS events and the details of each event.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6A507DC8-F657-4C13-84E2-D1D1B9400753'),
  total?: long(name='Total', description='The total number of DDoS events.', example='1'),
}

model DescribeOnDemandDdosEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOnDemandDdosEventResponseBody(name='body'),
}

/**
  * >  Anti-DDoS Origin API operations are available for only Anti-DDoS Origin Enterprise users.
  *
 */
async function describeOnDemandDdosEvent(request: DescribeOnDemandDdosEventRequest): DescribeOnDemandDdosEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnDemandDdosEvent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnDemandInstanceStatusRequest {
  instanceIdList: [ string ](name='InstanceIdList', description='The IDs of on-demand instances.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
}

model DescribeOnDemandInstanceStatusResponseBody = {
  instances?: [ 
    {
      declared?: string(name='Declared', description='The details of route advertisement for data centers outside the Chinese mainland. This parameter is a JSON string. The following fields are included in the value:

*   **region**: The code of the data center outside the Chinese mainland. The value is of the STRING type. For more information, see **Codes of data centers outside the Chinese mainland**.
*   **declared**: indicates whether the data center advertised the route. The value is of the STRING type. Valid values: **0** and **1**. The value of 0 indicates that the data center did not advertise the route. The value of 1 indicates that the data center advertised the route.', example='[{\\"region\\":\\"oe24\\",\\"declared\\":0},{\\"region\\":\\"oe26\\",\\"declared\\":0},{\\"region\\":\\"oe28\\",\\"declared\\":0},{\\"region\\":\\"oi39\\",\\"declared\\":0},{\\"region\\":\\"us50\\",\\"declared\\":0},{\\"region\\":\\"jp141\\",\\"declared\\":0}]'),
      desc?: string(name='Desc', description='The description of the on-demand instance.

>  The value of this parameter is returned only when the information about multiple on-demand instances is returned. The value of this parameter is not returned because the information about only one on-demand instance is returned.', example='test'),
      instanceId?: string(name='InstanceId', description='The ID of the on-demand instance.

>  The value of this parameter is returned only when the information about multiple on-demand instances is returned. The value of this parameter is not returned because the information about only one on-demand instance is returned.', example='ddosbgp-cn-z2q1qzxb****'),
      mode?: string(name='Mode', description='The mode used to start the on-demand instance. Valid values:

*   **manual**: The instance is manually started.
*   **netflow-auto**: The instance is automatically started by using NetFlow that monitors network traffic.', example='netflow-auto'),
      net?: string(name='Net', description='The CIDR block of the on-demand instance.', example='47.***.***.0/24'),
      registedAs?: string(name='RegistedAs', description='The number of the autonomous system (AS). Set the value to **0**, which indicates that AS is disabled.', example='0'),
      userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='171986973287****'),
    }
  ](name='Instances', description='The details of the on-demand instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CC49FF51-612F-429B-AB1E-374B3F115396'),
}

model DescribeOnDemandInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOnDemandInstanceStatusResponseBody(name='body'),
}

async function describeOnDemandInstanceStatus(request: DescribeOnDemandInstanceStatusRequest): DescribeOnDemandInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnDemandInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpEntitiesRequest {
  currentPage: int32(name='CurrentPage', description='The operation that you want to perform. Set the value to **DescribeOpEntities**.', example='1', position='Query'),
  endTime: long(name='EndTime', description='The details of the operation log.', example='1640880000000', position='Query'),
  instanceId?: string(name='InstanceId', description='The page number of the returned page.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  orderBy?: string(name='OrderBy', description='The sort order of operation logs. Valid values:

*   **ASC**: the ascending order.
*   **DESC**: the descending order.', example='opdate', position='Query'),
  orderDir?: string(name='OrderDir', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='ASC', position='Query'),
  pageSize: int32(name='PageSize', description='The type of the operation object. The value is fixed as **1**, which indicates Anti-DDoS Origin instances.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the Alibaba Cloud account that performs the operation.

>  If the value is **system**, the operation is performed by Anti-DDoS Origin.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The details about the operation. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:

*   **entity**: the operation object. Data type: object. The fields that are included in the value of the **entity** parameter vary based on the value of the **OpAction** parameter. Take note of the following items:

    *   If the value of the **OpAction** parameter is **3**, the value of the **entity** parameter consists of the following field:

        *   **ips**: the public IP addresses that are protected by the Anti-DDoS Origin instance. Data type: array

    *   If the value of the **OpAction** parameter is **4**, the value of the **entity** parameter consists of the following field:

        *   **ips**: the public IP addresses that are no longer protected by the Anti-DDoS Origin instance. Data type: array.

    *   If the value of the **OpAction** parameter is **5**, the value of the **entity** parameter consists of the following fields:

        *   **baseBandwidth**: the basic protection bandwidth. Unit: Gbit/s. Data type: integer.
        *   **elasticBandwidth**: the burstable protection bandwidth. Unit: Gbit/s. Data type: integer.
        *   **opSource**: the source of the operation. The value is fixed as **1**, indicating that the operation is performed by Anti-DDoS Origin. Data type: integer.

    *   If the value of the **OpAction** parameter is **6**, the value of the **entity** parameter consists of the following field:

        *   **ips**: the public IP addresses for which to deactivate blackhole filtering. Data type: array.

    *   If the value of the **OpAction** parameter is **7**, the **entity** parameter is not returned.

    *   If the value of the **OpAction** parameter is **8**, the value of the **entity** parameter consists of the following fields:

        *   **baseBandwidth**: the basic protection bandwidth. Unit: Gbit/s. Data type: integer.
        *   **elasticBandwidth**: the burstable protection bandwidth. Unit: Gbit/s. Data type: integer.', example='rg-acfm2pz25js****', position='Query'),
  startTime: long(name='StartTime', description='The sorting method of operation logs. Set the value to **opdate**, which indicates sorting based on the operation time.', example='1609430400000', position='Query'),
}

model DescribeOpEntitiesResponseBody = {
  opEntities?: [ 
    {
      entityObject?: string(name='EntityObject', description='Queries the operation logs of an Anti-DDoS Origin instance.', example='ddosbgp-cn-n6w1r7nz****'),
      entityType?: int32(name='EntityType', description='All Alibaba Cloud API operations must include common request parameters. For more information about common request parameters, see [Common parameters](~~118841~~).

For more information about sample requests, see the **"Examples"** section of this topic.', example='1'),
      gmtCreate?: long(name='GmtCreate', description='WB01342967', example='1635818114000'),
      opAccount?: string(name='OpAccount', example='171986973287****'),
      opAction?: int32(name='OpAction', description='DescribeOpEntities', example='8'),
      opDesc?: string(name='OpDesc', example='{"entity":{"baseBandwidth":20,"elasticBandwidth":20}}'),
    }
  ](name='OpEntities', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='The end time. Operation logs that were generated before this time are queried.**** This value is a UNIX timestamp. Unit: milliseconds.', example='52C8ECB0-0B1A-4E66-A31C-B6A855120E82'),
  totalCount?: int32(name='TotalCount', description='The time when the log was generated. This value is a UNIX timestamp. Unit: milliseconds.', example='1'),
}

model DescribeOpEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOpEntitiesResponseBody(name='body'),
}

/**
  * The start time. Operation logs that were generated after this time are queried.**** This value is a UNIX timestamp. Unit: milliseconds.
  *
 */
async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpEntities', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackIpListRequest {
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  ip?: string(name='Ip', description='The protected IP address to query.', example='47.98.XX.XX', position='Query'),
  memberUid?: string(name='MemberUid', description='The ID of the member.', example='170858869679****', position='Query'),
  pageNo: int32(name='PageNo', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  productName?: string(name='ProductName', description='The type of the cloud asset to which the protected IP address to query belongs. Valid values:

*   **ECS**: an Elastic Compute Service (ECS) instance.
*   **SLB**: a Classic Load Balancer (CLB) instance, originally called a Server Load Balancer (SLB) instance.
*   **EIP**: an elastic IP address (EIP). An Internet-facing Application Load Balancer (ALB) instance uses an EIP. If the IP address belongs to the Internet-facing ALB instance, set this parameter to EIP.
*   **WAF**: a Web Application Firewall (WAF) instance.', example='ECS', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
}

model DescribePackIpListResponseBody = {
  code?: string(name='Code', description='The HTTP status code of the request.

For more information about status codes, see [Common parameters](~~118841~~).', example='200'),
  ipList?: [ 
    {
      ip?: string(name='Ip', description='The IP address.', example='47.98.XX.XX'),
      memberUid?: string(name='MemberUid', description='The ID of the member.', example='170858869679****'),
      nsmExpireAt?: long(name='NsmExpireAt'),
      nsmStartAt?: long(name='NsmStartAt'),
      nsmStatus?: int32(name='NsmStatus'),
      product?: string(name='Product', description='The type of the cloud asset to which the IP address belongs. Valid values:

*   **ECS**: an ECS instance.
*   **SLB**: a CLB instance, originally called an SLB instance.
*   **EIP**: an EIP. If the IP address belongs to an ALB instance, the value EIP is returned.
*   **WAF**: a WAF instance.', example='ECS'),
      region?: string(name='Region', description='The region to which the protected IP address belongs.

>  If the protected IP address is in the same region as the instance, this parameter is not returned.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The description of the cloud asset to which the IP address belongs. The asset can be an ECS instance or an SLB instance.

>  If no descriptions are provided for the asset, this parameter is not returned.', example='test'),
      status?: string(name='Status', description='The status of the IP address. Valid values:

*   **normal**: The IP address is in the normal state, which indicates that the IP address is not under attack.
*   **hole_begin**: Blackhole filtering is triggered for the IP address.', example='normal'),
    }
  ](name='IpList', description='The IP addresses that are protected by the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FD1578A-BD77-50B7-A969-45A374A7ED22'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The call is successful.
*   **false**: The call fails.', example='true'),
  total?: int32(name='Total', description='The number of protected IP addresses.', example='1'),
}

model DescribePackIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePackIpListResponseBody(name='body'),
}

/**
  * You can call the DescribePackIpList operation to query the details about each IP address that is protected by a specific Anti-DDoS Origin instance by page. The details include the IP address and the type of the cloud asset to which the IP address belongs. The details also include the status of the IP address, such as whether blackhole filtering is triggered for the IP address.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describePackIpList(request: DescribePackIpListRequest): DescribePackIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackIpList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdMemberListRequest {
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-x9bLhd', position='Query'),
}

model DescribeRdMemberListResponseBody = {
  memberList?: [ 
    {
      gmtCreate?: long(name='GmtCreate', example='1624954942000'),
      name?: string(name='Name', example='test1'),
      uid?: string(name='Uid', example='1960279802016267'),
    }
  ](name='MemberList'),
  requestId?: string(name='RequestId', example='DC245DEE-9800-5579-BF99-189D6A5BA9FE'),
  total?: long(name='Total', example='10'),
}

model DescribeRdMemberListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRdMemberListResponseBody(name='body'),
}

async function describeRdMemberList(request: DescribeRdMemberListRequest): DescribeRdMemberListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdMemberList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdStatusRequest {
}

model DescribeRdStatusResponseBody = {
  currentUid?: string(name='CurrentUid', example='125085778340****'),
  currentUidType?: string(name='CurrentUidType', example='MemberAccount'),
  enabled?: boolean(name='Enabled', example='false'),
  localEnable?: boolean(name='LocalEnable', example='false'),
  masterUid?: string(name='MasterUid', example='125085778340****'),
  remoteEnable?: boolean(name='RemoteEnable', example='false'),
  requestId?: string(name='RequestId', example='1B0F7EC6-51D7-4D70-B0EC-CD8A9E998D86'),
  rootUid?: string(name='RootUid', example='125085778340****'),
  servicePrincipalEnabled?: boolean(name='ServicePrincipalEnabled', example='false'),
}

model DescribeRdStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRdStatusResponseBody(name='body'),
}

async function describeRdStatus(request: DescribeRdStatusRequest): DescribeRdStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', description='The region ID to query. The default value is **cn-hangzhou**, which indicates that the regions of cloud assets that are supported by an Anti-DDoS Origin instance in the China (Hangzhou) region are queried.

For more information about the IDs of other regions, see [Regions and zones](~~40654~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management. This parameter is empty by default, which indicates that the instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  regions?: [ 
    {
      regionEnName?: string(name='RegionEnName', description='The English name of the region where the cloud assets reside.', example='China (Hangzhou)'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      regionName?: string(name='RegionName', description='The name of the region where the cloud assets reside.'),
    }
  ](name='Regions', description='The information about regions of the cloud assets that are supported by the Anti-DDoS Origin instance. The information includes region IDs and names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7CA8B4E-FB15-4336-A351-8DC29D66EA82'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request failed.', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficRequest {
  endTime?: int32(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

If you do not specify this parameter, the current system time is used as the end time.', example='1563445054', position='Query'),
  flowType?: string(name='FlowType', description='The type of the traffic statistics to query. Valid values:

*   **max**: the peak traffic within the specified interval
*   **avg**: the average traffic within the specified interval', example='max', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.

If you specify an on-demand instance, you must configure the **Interval** parameter.', example='ddosbgp-cn-n6w203qg****', position='Query'),
  interval?: int32(name='Interval', description='The interval at which the traffic statistics are calculated. Unit: seconds. Default value: **5**.', example='5', position='Query'),
  ip?: string(name='Ip', description='The public IP address of the asset to query. If you do not specify this parameter, the traffic statistics of all public IP addresses that are protected by the Anti-DDoS Origin instance are queried.

>  The public IP address must be a protected object of the Anti-DDoS Origin instance. You can call the [DescribePackIpList](~~118701~~) operation to query all protected objects of the Anti-DDoS Origin instance.', example='39.XX.XX.96', position='Query'),
  ipnet?: string(name='Ipnet', description='The Classless Inter-Domain Routing (CIDR) block of the on-demand instance that you want to query.', example='111.XX.XX.0/24', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  startTime: int32(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1619798400', position='Query'),
}

model DescribeTrafficResponseBody = {
  flowList?: [ 
    {
      attackBps?: long(name='AttackBps', description='The bandwidth of attack traffic. Unit: bit/s.

>  This parameter is returned only if attack traffic exists.', example='0'),
      attackPps?: long(name='AttackPps', description='The packet forwarding rate of attack traffic. Unit: packets per second.

>  This parameter is returned only if attack traffic exists.', example='0'),
      flowType?: string(name='FlowType', description='The type of the traffic statistics. Valid values:

*   **max**: the peak traffic within the specified interval
*   **avg**: the average traffic within the specified interval', example='max'),
      kbps?: int32(name='Kbps', description='The bandwidth of the total traffic. Unit: Kbit/s.', example='417'),
      name?: string(name='Name', description='The ID of the traffic statistics.', example='8e33f19e-5644-11eb-b5c1-d89d67182200'),
      pps?: int32(name='Pps', description='The packet forwarding rate of the total traffic. Unit: packets per second.', example='274'),
      time?: int32(name='Time', description='The time when the traffic statistics are calculated. This value is a UNIX timestamp. Unit: seconds.', example='1620951900'),
    }
  ](name='FlowList', description='The queried traffic statistics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6A507DC8-F657-4C13-84E2-D1D1B9400753'),
}

model DescribeTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrafficResponseBody(name='body'),
}

/**
  * You can call the DescribeTraffic operation to query traffic statistics of an Anti-DDoS Origin instance within a specific time period.  
  * >  When you call this operation, you must configure the **InstanceId** parameter to specify the Anti-DDoS Origin instance whose traffic statistics you want to query.  
  * ## Limits
  * You can call this operation once per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeTraffic(request: DescribeTrafficRequest): DescribeTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DetachFromPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  ipPortProtocolList: [ 
    {
      ip: string(name='Ip', example='47.118.172.***'),
      port?: int32(name='Port', example='8*', minimum=1, maximum=65535),
      protocol?: string(name='Protocol', example='tcp'),
    }
  ](name='IpPortProtocolList', shrink='json', position='Query'),
  policyType: string(name='PolicyType', example='l3', position='Query'),
}

model DetachFromPolicyResponseBody = {
  requestId?: string(name='RequestId', example='1B0F7EC6-51D7-4D70-B0EC-CD8A9E99****'),
}

model DetachFromPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachFromPolicyResponseBody(name='body'),
}

async function detachFromPolicy(request: DetachFromPolicyRequest): DetachFromPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachFromPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DettachAssetGroupToInstanceRequest {
  assetGroupList: [ 
    {
      name: string(name='Name', description='The ID of the asset. If the asset is a Web Application Firewall (WAF) instance, specify the ID of the WAF instance.', example='waf_v2_public_cn-lbj382l****'),
      region: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou'),
      type: string(name='Type', description='The type of the asset. Valid values:

*   **waf**: WAF instance
*   **ga**: Global Accelerator (GA) instance', example='waf'),
    }
  ](name='AssetGroupList', description='The information about the asset that you want to dissociate.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances of paid editions.', example='ddosbgp-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DettachAssetGroupToInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E54BA258-9DE8-59BE-B7A8-DAD28E6E8DAF'),
}

model DettachAssetGroupToInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DettachAssetGroupToInstanceResponseBody(name='body'),
}

async function dettachAssetGroupToInstance(request: DettachAssetGroupToInstanceRequest): DettachAssetGroupToInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DettachAssetGroupToInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetSlsOpenStatusRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

For more information about the valid values of this parameter, see [Regions and zones](~~188196~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management. This parameter is empty by default, which indicates that the Anti-DDoS Origin instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model GetSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D01666F5-541B-4C78-98A6-D29E02DAAC7C'),
  slsOpenStatus?: boolean(name='SlsOpenStatus', description='Indicates whether Log Service was activated. Valid values:

*   **true**: Log Service was activated.
*   **false**: Log Service was not activated.', example='true'),
}

model GetSlsOpenStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSlsOpenStatusResponseBody(name='body'),
}

async function getSlsOpenStatus(request: GetSlsOpenStatusRequest): GetSlsOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSlsOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListOpenedAccessLogInstancesRequest {
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

For more information about the valid values of this parameter, see [Regions and zones](~~188196~~).', example='cn-hangzhou', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management. This parameter is empty by default, which indicates that the Anti-DDoS Origin instance belongs to the default resource group.

For more information about resource groups, see [Create a resource group](~~94485~~).', example='rg-acfm2pz25js****', position='Query'),
}

model ListOpenedAccessLogInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4DB64811-70A1-41C9-A0CE-CD8B260ED551'),
  slsConfigStatus?: [ 
    {
      enable?: boolean(name='Enable', description='Indicates whether log analysis was enabled for the Anti-DDoS Origin instance. Valid values:

*   **true**: Log analysis was enabled.
*   **false**: Log analysis was disabled.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance.', example='ddosbgp-cn-m7r1zce2****'),
    }
  ](name='SlsConfigStatus', description='The configuration of log analysis for the Anti-DDoS Origin instance.'),
  totalCount?: int32(name='TotalCount', description='The number of the Anti-DDoS Origin instances for which log analysis was enabled.', example='1'),
}

model ListOpenedAccessLogInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOpenedAccessLogInstancesResponseBody(name='body'),
}

async function listOpenedAccessLogInstances(request: ListOpenedAccessLogInstancesRequest): ListOpenedAccessLogInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpenedAccessLogInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', example='test**', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', example='l3', position='Query'),
}

model ListPolicyResponseBody = {
  policyList?: [ 
    {
      attachedCount?: int32(name='AttachedCount', example='0'),
      content?: {
        blackIpListExpireAt?: long(name='BlackIpListExpireAt', example='1716878000'),
        enableDropIcmp?: boolean(name='EnableDropIcmp', example='false'),
        enableIntelligence?: boolean(name='EnableIntelligence', example='true'),
        enableL4Defense?: boolean(name='EnableL4Defense', example='true'),
        fingerPrintRuleList?: [ 
          {
            dstPortEnd?: int32(name='DstPortEnd', example='65535'),
            dstPortStart?: int32(name='DstPortStart', example='0'),
            id?: string(name='Id', example='2c0b09cd-a565-4481-9acb-418b********'),
            matchAction?: string(name='MatchAction', example='drop'),
            maxPktLen?: int32(name='MaxPktLen', example='1500'),
            minPktLen?: int32(name='MinPktLen', example='1'),
            offset?: int32(name='Offset', example='0'),
            payloadBytes?: string(name='PayloadBytes', example='abcd'),
            protocol?: string(name='Protocol', example='udp'),
            rateValue?: int32(name='RateValue', example='1000'),
            seqNo?: int32(name='SeqNo', example='1'),
            srcPortEnd?: int32(name='SrcPortEnd', example='65535'),
            srcPortStart?: int32(name='SrcPortStart', example='0'),
          }
        ](name='FingerPrintRuleList'),
        intelligenceLevel?: string(name='IntelligenceLevel', example='default'),
        l4RuleList?: [ 
          {
            action?: string(name='Action', example='2'),
            conditionList?: [ 
              {
                arg?: string(name='Arg', example='test'),
                depth?: int32(name='Depth', example='32'),
                position?: int32(name='Position', example='0'),
              }
            ](name='ConditionList'),
            limited?: int32(name='Limited', example='0'),
            match?: string(name='Match', example='1'),
            method?: string(name='Method', example='char'),
            name?: string(name='Name', example='test**'),
            priority?: int32(name='Priority', example='1'),
          }
        ](name='L4RuleList'),
        portRuleList?: [ 
          {
            dstPortEnd?: int32(name='DstPortEnd', example='65535'),
            dstPortStart?: int32(name='DstPortStart', example='0'),
            id?: string(name='Id', example='8f3c3062-6c20-425d-8405-2bd1********'),
            matchAction?: string(name='MatchAction', example='drop'),
            protocol?: string(name='Protocol', example='udp'),
            seqNo?: int32(name='SeqNo', example='1'),
            srcPortEnd?: int32(name='SrcPortEnd', example='65535'),
            srcPortStart?: int32(name='SrcPortStart', example='0'),
          }
        ](name='PortRuleList'),
        reflectBlockUdpPortList?: [ int32 ](name='ReflectBlockUdpPortList'),
        regionBlockCountryList?: [ int32 ](name='RegionBlockCountryList'),
        regionBlockProvinceList?: [ int32 ](name='RegionBlockProvinceList'),
        sourceBlockList?: [ 
          {
            blockExpireSeconds?: int32(name='BlockExpireSeconds', example='120'),
            everySeconds?: int32(name='EverySeconds', example='60'),
            exceedLimitTimes?: int32(name='ExceedLimitTimes', example='5'),
            type?: int32(name='Type', example='3'),
          }
        ](name='SourceBlockList'),
        sourceLimit?: {
          bps?: int32(name='Bps', example='2048'),
          pps?: int32(name='Pps', example='64'),
          synBps?: int32(name='SynBps', example='2048'),
          synPps?: int32(name='SynPps', example='64'),
        }(name='SourceLimit'),
        whitenGfbrNets?: boolean(name='WhitenGfbrNets', example='false'),
      }(name='Content'),
      id?: string(name='Id', example='877afbdf-3982-4d36-9886-f043********'),
      name?: string(name='Name', example='test**'),
      type?: string(name='Type', example='l3'),
    }
  ](name='PolicyList'),
  requestId?: string(name='RequestId', example='B4B379C2-9319-4C6B-B579-FE36831B09F4'),
  total?: long(name='Total', example='10'),
}

model ListPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyResponseBody(name='body'),
}

async function listPolicy(request: ListPolicyRequest): ListPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyAttachmentRequest {
  regionId?: string(name='RegionId', position='Host'),
  ipPortProtocolList?: [ 
    {
      ip: string(name='Ip', example='47.118.172.***'),
      port?: int32(name='Port', example='8*', minimum=1, maximum=65535),
      protocol?: string(name='Protocol', example='tcp'),
    }
  ](name='IpPortProtocolList', shrink='json', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  policyId?: string(name='PolicyId', example='f38f6520-92b7-451e-b520-9ab3********', position='Query'),
  policyType?: string(name='PolicyType', example='l3', position='Query'),
}

model ListPolicyAttachmentResponseBody = {
  attachmentList?: [ 
    {
      ip?: string(name='Ip', example='147.139.183.***'),
      memberUid?: string(name='MemberUid', example='177699790631****'),
      policyId?: string(name='PolicyId', example='1b43f44e-65e1-411a-b0c0-d6c1********'),
      policyName?: string(name='PolicyName', example='test**'),
      policyType?: string(name='PolicyType', example='l3'),
      port?: int32(name='Port', example='8*'),
      protocol?: string(name='Protocol', example='udp'),
      region?: string(name='Region', example='cn-hangzhou'),
    }
  ](name='AttachmentList'),
  requestId?: string(name='RequestId', example='B4B379C2-9319-4C6B-B579-FE36831B09F4'),
  total?: long(name='Total', example='28'),
}

model ListPolicyAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyAttachmentResponseBody(name='body'),
}

async function listPolicyAttachment(request: ListPolicyAttachmentRequest): ListPolicyAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyAttachment', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to **50**. Default value: **10**.', example='20', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='test', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid value: **INSTANCE**.', example='INSTANCE', position='Query'),
}

model ListTagKeysResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='97935DF1-0289-4AA2-9DD1-72377838B16B'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount', description='The total number of tag values that correspond to each key.', example='1'),
      tagKey?: string(name='TagKey', description='The key of each tag.', example='a'),
    }
  ](name='TagKeys', description='The list of tags and the details of each tag.'),
  totalCount?: int32(name='TotalCount', description='The total number of tags.', example='6'),
}

model ListTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The query token. Set the value to the **NextToken** value that is returned in the last call to the ListTagResources operation. Leave this parameter empty the first time you call this operation.', example='RGuYpqDdKhzXb8C3.D1BwQgc1tMBsoxdGiEKHHUUCf****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of Anti-DDoS Origin Instances to query.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.', example='ddosbgp-cn-v0h1fmwbc024', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource to query. Set the value to **INSTANCE**, which indicates instances.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to query.

>  The **ResourceIds.N** parameter and the key-value pair (Tag.N.Key and Tag.N.Value) cannot be left empty at the same time.', example='testKey1'),
      value?: string(name='Value', description='The value of the tag to query.

>  The **ResourceIds.N** parameter and the key-value pair (Tag.N.Key and Tag.N.Value) cannot be left empty at the same time.', example='testValue1'),
    }
  ](name='Tag', description='The tags to query.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The query token that is returned in this call.', example='RGuYpqDdKhzXb8C3.D1BwQgc1tMBsoxdGiEKHHUUCf****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C3F7E6AE-43B2-4730-B6A3-FD17552B8F65'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the Anti-DDoS Origin instance.', example='ddosbgp-cn-n6w1r7nz****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. The value is fixed as **INSTANCE**, which indicates instances.', example='INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag that is added to the instance.', example='testKey1'),
      tagValue?: string(name='TagValue', description='The value of the tag that is added to the instance.', example='testValue1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The list of tags that are added to the Anti-DDoS Origin instance.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * You can call the ListTagResources operation to query the tags that are added to Anti-DDoS Origin instances at a time.
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  actionType: int32(name='ActionType', example='11', position='Query'),
  content?: {
    blackIpList?: [ string ](name='BlackIpList'),
    blackIpListExpireAt?: long(name='BlackIpListExpireAt', example='1716878000'),
    enableDropIcmp?: boolean(name='EnableDropIcmp', example='true'),
    enableIntelligence?: boolean(name='EnableIntelligence', example='true'),
    enableL4Defense?: boolean(name='EnableL4Defense'),
    fingerPrintRuleList?: [ 
      {
        dstPortEnd: int32(name='DstPortEnd', example='65535', minimum=0, maximum=65535),
        dstPortStart: int32(name='DstPortStart', example='0', minimum=0, maximum=65535),
        id?: string(name='Id', example='5fbe941f-a0cf-4a49-9c7c-8fac********'),
        matchAction: string(name='MatchAction', example='drop'),
        maxPktLen: int32(name='MaxPktLen', example='1500', minimum=0, maximum=1500),
        minPktLen: int32(name='MinPktLen', example='1', minimum=0, maximum=1500),
        offset?: int32(name='Offset', example='0', minimum=0, maximum=1500),
        payloadBytes?: string(name='PayloadBytes', example='abcd', minLength=2, maxLength=32),
        protocol: string(name='Protocol', example='udp'),
        rateValue?: int32(name='RateValue', example='100', minimum=1, maximum=100000),
        seqNo: int32(name='SeqNo', example='1', minimum=1, maximum=100),
        srcPortEnd: int32(name='SrcPortEnd', example='65535', minimum=0, maximum=65535),
        srcPortStart: int32(name='SrcPortStart', example='0', minimum=0, maximum=65535),
      }
    ](name='FingerPrintRuleList'),
    intelligenceLevel?: string(name='IntelligenceLevel', example='default'),
    l4RuleList?: [ 
      {
        action: string(name='Action', example='2'),
        conditionList: [ 
          {
            arg: string(name='Arg', example='abcd', minLength=1, maxLength=4096),
            depth: int32(name='Depth', example='1200', minimum=1, maximum=2048),
            position: int32(name='Position', example='0', minimum=0, maximum=2047),
          }
        ](name='ConditionList'),
        limited: int32(name='Limited', example='0', minimum=0, maximum=2048),
        match: string(name='Match', example='0'),
        method: string(name='Method', example='char'),
        name: string(name='Name', example='test****', minLength=1, maxLength=32),
        priority: int32(name='Priority', example='1', minimum=1, maximum=100),
      }
    ](name='L4RuleList'),
    portRuleList?: [ 
      {
        dstPortEnd: int32(name='DstPortEnd', example='65535', minimum=0, maximum=65535),
        dstPortStart: int32(name='DstPortStart', example='0', minimum=0, maximum=65535),
        id?: string(name='Id', example='c52c2fa6-fdac-40c4-8753-be7c*********'),
        matchAction: string(name='MatchAction', example='drop'),
        protocol: string(name='Protocol', example='tcp'),
        seqNo: int32(name='SeqNo', example='1', minimum=1, maximum=100),
        srcPortEnd: int32(name='SrcPortEnd', example='65535', minimum=0, maximum=65535),
        srcPortStart: int32(name='SrcPortStart', example='0', minimum=0, maximum=65535),
      }
    ](name='PortRuleList'),
    reflectBlockUdpPortList?: [ int32 ](name='ReflectBlockUdpPortList'),
    regionBlockCountryList?: [ int32 ](name='RegionBlockCountryList'),
    regionBlockProvinceList?: [ int32 ](name='RegionBlockProvinceList'),
    sourceBlockList?: [ 
      {
        blockExpireSeconds: int32(name='BlockExpireSeconds', example='120', minimum=60, maximum=2592000),
        everySeconds: int32(name='EverySeconds', example='60', minimum=60, maximum=1200),
        exceedLimitTimes: int32(name='ExceedLimitTimes', example='5', minimum=1, maximum=1200),
        type: int32(name='Type', example='3'),
      }
    ](name='SourceBlockList'),
    sourceLimit?: {
      bps?: int32(name='Bps', example='2048', minimum=1024, maximum=268435456),
      pps?: int32(name='Pps', example='64', minimum=32, maximum=500000),
      synBps?: int32(name='SynBps', example='2048', minimum=1024, maximum=268435456),
      synPps?: int32(name='SynPps', example='64', minimum=1, maximum=100000),
    }(name='SourceLimit'),
    whiteIpList?: [ string ](name='WhiteIpList'),
    whitenGfbrNets?: boolean(name='WhitenGfbrNets', example='false'),
  }(name='Content', shrink='json', position='Query'),
  id: string(name='Id', example='c52c2fa6-fdac-40c4-8753-be7c********', position='Query'),
  name?: string(name='Name', example='demo**', position='Query'),
}

model ModifyPolicyResponseBody = {
  requestId?: string(name='RequestId', example='B4B379C2-9319-4C6B-B579-FE36831****'),
}

model ModifyPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyResponseBody(name='body'),
}

async function modifyPolicy(request: ModifyPolicyRequest): ModifyPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content?: {
    blackIpListExpireAt?: long(name='BlackIpListExpireAt', example='1716878000'),
    enableDropIcmp?: boolean(name='EnableDropIcmp', example='true'),
    enableIntelligence?: boolean(name='EnableIntelligence', example='true'),
    enableL4Defense?: boolean(name='EnableL4Defense'),
    fingerPrintRuleList?: [ 
      {
        dstPortEnd: int32(name='DstPortEnd', example='65535', minimum=0, maximum=65535),
        dstPortStart: int32(name='DstPortStart', example='0', minimum=0, maximum=65535),
        id?: string(name='Id', example='83967609-7ea5-4f6d-a6ea-380b09e****'),
        matchAction: string(name='MatchAction', example='drop'),
        maxPktLen: int32(name='MaxPktLen', example='1500', minimum=0, maximum=1500),
        minPktLen: int32(name='MinPktLen', example='1', minimum=0, maximum=1500),
        offset?: int32(name='Offset', example='0', minimum=0, maximum=1500),
        payloadBytes?: string(name='PayloadBytes', example='abcd', minLength=2, maxLength=32),
        protocol: string(name='Protocol', example='tcp'),
        rateValue?: int32(name='RateValue', example='100', minimum=1, maximum=100000),
        seqNo: int32(name='SeqNo', example='1', minimum=1, maximum=100),
        srcPortEnd: int32(name='SrcPortEnd', example='65535', minimum=0, maximum=65535),
        srcPortStart: int32(name='SrcPortStart', example='0', minimum=0, maximum=65535),
      }
    ](name='FingerPrintRuleList'),
    intelligenceLevel?: string(name='IntelligenceLevel', example='default'),
    l4RuleList?: [ 
      {
        action: string(name='Action', example='2'),
        conditionList: [ 
          {
            arg: string(name='Arg', example='abcd', minLength=1, maxLength=4096),
            depth: int32(name='Depth', example='1200', minimum=1, maximum=2048),
            position: int32(name='Position', example='0', minimum=0, maximum=2047),
          }
        ](name='ConditionList'),
        limited: int32(name='Limited', example='0', minimum=0, maximum=2048),
        match: string(name='Match', example='0'),
        method: string(name='Method', example='char'),
        name: string(name='Name', example='test**', minLength=1, maxLength=32),
        priority: int32(name='Priority', example='1', minimum=1, maximum=100),
      }
    ](name='L4RuleList'),
    portRuleList?: [ 
      {
        dstPortEnd: int32(name='DstPortEnd', example='65535', minimum=0, maximum=65535),
        dstPortStart: int32(name='DstPortStart', example='0', minimum=0, maximum=65535),
        id?: string(name='Id', example='412a7312-58ff-4e32-a202-0ab0*******'),
        matchAction: string(name='MatchAction', example='drop'),
        protocol: string(name='Protocol', example='tcp'),
        seqNo: int32(name='SeqNo', example='1', minimum=1, maximum=100),
        srcPortEnd: int32(name='SrcPortEnd', example='65535', minimum=0, maximum=65535),
        srcPortStart: int32(name='SrcPortStart', example='0', minimum=0, maximum=65535),
      }
    ](name='PortRuleList'),
    reflectBlockUdpPortList?: [ int32 ](name='ReflectBlockUdpPortList'),
    regionBlockCountryList?: [ int32 ](name='RegionBlockCountryList'),
    regionBlockProvinceList?: [ int32 ](name='RegionBlockProvinceList'),
    sourceBlockList?: [ 
      {
        blockExpireSeconds: int32(name='BlockExpireSeconds', example='120', minimum=60, maximum=2592000),
        everySeconds: int32(name='EverySeconds', example='60', minimum=60, maximum=1200),
        exceedLimitTimes: int32(name='ExceedLimitTimes', example='5', minimum=1, maximum=1200),
        type: int32(name='Type', example='3'),
      }
    ](name='SourceBlockList'),
    sourceLimit?: {
      bps?: int32(name='Bps', example='2048', minimum=1024, maximum=268435456),
      pps?: int32(name='Pps', example='64', minimum=32, maximum=500000),
      synBps?: int32(name='SynBps', example='2048', minimum=1024, maximum=268435456),
      synPps?: int32(name='SynPps', example='64', minimum=1, maximum=100000),
    }(name='SourceLimit'),
    whitenGfbrNets?: boolean(name='WhitenGfbrNets', example='false'),
  }(name='Content', shrink='json', position='Query'),
  id: string(name='Id', example='83967609-7ea5-4f6d-a6ea-380b09e****', position='Query'),
  name?: string(name='Name', example='demo**', position='Query'),
}

model ModifyPolicyContentResponseBody = {
  requestId?: string(name='RequestId', example='3777EF25-940B-51F4-BB1D-99B5********'),
}

model ModifyPolicyContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyContentResponseBody(name='body'),
}

async function modifyPolicyContent(request: ModifyPolicyContentRequest): ModifyPolicyContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicyContent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRemarkRequest {
  instanceId: string(name='InstanceId', description='The ID of the Anti-DDoS Origin instance for which you want to add remarks.

>  You can call the [DescribeInstanceList](~~118698~~) operation to query the IDs of all Anti-DDoS Origin instances.', example='ddosbgp-cn-n6w1r7nz****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='The remarks for the Anti-DDoS Origin instance.', example='test-remark', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
}

model ModifyRemarkResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6AC3597B-7FD5-5E68-97C3-E11F4D010732'),
}

model ModifyRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRemarkResponseBody(name='body'),
}

/**
  * You can call the ModifyRemark operation to add remarks for a single Anti-DDoS Origin instance.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyRemark(request: ModifyRemarkRequest): ModifyRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRemark', 'POST', '/', 'json', false, 'json', request);
}

model QuerySchedruleOnDemandRequest {
  instanceId: string(name='InstanceId', description='The ID of the on-demand instance.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
}

model QuerySchedruleOnDemandResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the on-demand instance.', example='ddosbgp-cn-z2q1qzxb****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4A8F9980-5ACB-497F-9F15-48E9D6B29028'),
  ruleConfig?: [ 
    {
      ruleAction?: string(name='RuleAction', description='The scheduling action. Set the value to **declare**, which indicates that the route is advertised.', example='declare'),
      ruleConditionCnt?: string(name='RuleConditionCnt', description='If the inbound bandwidth or packets consecutively exceed the threshold for the specified number of times, the scheduling rule is triggered and traffic is rerouted to the on-demand instance. The specified number of times is the value of this parameter.

>  The threshold of inbound bandwidth is the value of **RuleConditionMbps**. The threshold of inbound packets is the value of **RuleConditionKpps**.', example='3'),
      ruleConditionKpps?: string(name='RuleConditionKpps', description='The threshold of inbound packets. Unit: Kpps. Minimum value: **10**.', example='10'),
      ruleConditionMbps?: string(name='RuleConditionMbps', description='The threshold of inbound bandwidth. Unit: Mbit/s. Minimum value: **100**.', example='100'),
      ruleName?: string(name='RuleName', description='The name of the scheduling rule.', example='ddosbgp-cn-z2q1qzxb****'),
      ruleSwitch?: string(name='RuleSwitch', description='Indicates whether the scheduling rule is enabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
      ruleUndoBeginTime?: string(name='RuleUndoBeginTime', description='The start time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.

If the system detects that DDoS attacks stop, the system no longer reroutes traffic to the on-demand instance from the time you specified. We recommend that you set this parameter to a value that is defined as off-peak hours.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='03:00'),
      ruleUndoEndTime?: string(name='RuleUndoEndTime', description='The end time of the period during which the scheduling rule is automatically stopped. The time must be in the 24-hour clock and in the `hh:mm` format.', example='03:05'),
      ruleUndoMode?: string(name='RuleUndoMode', description='The stop method of the scheduling rule. Valid values:

*   **auto**: The scheduling rule automatically stops.
*   **manual**: The scheduling rule is manually stopped.', example='auto'),
      timeZone?: string(name='TimeZone', description='The time zone of the time when the scheduling rule automatically stops. The time zone must be in the `GMT-hh:mm` format.

For example, the value `GMT-08:00` indicates that the time zone is UTC+8.

>  This parameter takes effect only when the **RuleUndoMode** parameter is set to **auto**.', example='GMT-08:00'),
    }
  ](name='RuleConfig', description='The configurations of the scheduling rule.'),
  ruleStatus?: [ 
    {
      net?: string(name='Net', description='The CIDR block of the on-demand instance.', example='47.***.***.0/24'),
      ruleSchedStatus?: string(name='RuleSchedStatus', description='The scheduling status. Valid values:

*   **scheduled**
*   **unscheduled**', example='unscheduled'),
    }
  ](name='RuleStatus', description='The status of the scheduling rule.'),
  userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='171986973287****'),
}

model QuerySchedruleOnDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySchedruleOnDemandResponseBody(name='body'),
}

async function querySchedruleOnDemand(request: QuerySchedruleOnDemandRequest): QuerySchedruleOnDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySchedruleOnDemand', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseDdosOriginInstanceRequest {
  instanceId: string(name='InstanceId', example='ddosorigin_cn-pe335v7gs01', position='Query'),
}

model ReleaseDdosOriginInstanceResponseBody = {
  requestId?: string(name='RequestId', example='B4B379C2-9319-4C6B-B579-FE36831B09F4'),
}

model ReleaseDdosOriginInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseDdosOriginInstanceResponseBody(name='body'),
}

async function releaseDdosOriginInstance(request: ReleaseDdosOriginInstanceRequest): ReleaseDdosOriginInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseDdosOriginInstance', 'POST', '/', 'json', false, 'json', request);
}

model SetInstanceModeOnDemandRequest {
  instanceIdList: [ string ](name='InstanceIdList', description='The IDs of on-demand instances.

>  You can call the [DescribeOnDemandInstance](~~152120~~) operation to query the IDs of all on-demand instances.', example='ddosbgp-cn-z2q1qzxb****', position='Query'),
  mode: string(name='Mode', description='The scheduling mode of the on-demand instance. Valid values:

*   **manual**: manual scheduling
*   **netflow-auto**: automatic scheduling', example='netflow-auto', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the on-demand instance.

>  You can call the [DescribeRegions](~~118703~~) operation to query all regions supported by Anti-DDoS Origin.', example='cn-zhangjiakou', position='Query'),
}

model SetInstanceModeOnDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD06F539-2FBE-450D-9391-7EFF787128F5'),
}

model SetInstanceModeOnDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetInstanceModeOnDemandResponseBody(name='body'),
}

async function setInstanceModeOnDemand(request: SetInstanceModeOnDemandRequest): SetInstanceModeOnDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstanceModeOnDemand', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin instance resides.

>  You can call the [DescribeRegions](~~118703~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Anti-DDoS Origin instance belongs in Resource Management.

If you do not specify this parameter, the instance belongs to the default resource group.', example='rg-acfm2pz25js****', position='Query'),
  resourceId: [ string ](name='ResourceId', example='ddosbgp-cn-v0h1fmwb****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource to which you want to add tags. Set the value to **INSTANCE**, which indicates instances.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to add.

>  If the specified key does not exist, a key is created.', example='test-key'),
      value?: string(name='Value', description='The value of the tag to add.

>  If the specified value does not exist, a value is created.', example='test-value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7078CD1E-F609-47A4-9C39-B288CC27C686'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * You can call the TagResources operation to add tags to Anti-DDoS Origin instances. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified Anti-DDoS Origin Enterprise instances.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Anti-DDoS Origin Enterprise instances reside.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='test', position='Query'),
  resourceId: [ string ](name='ResourceId', example='ddosbgp-cn-v0h1fmwbc024', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the specified resource. Set the value to **INSTANCE**.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', example='testKey1', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2D86AED-BA27-4584-BADC-B43BDA7EEBCA'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

