/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'ddosbgp.aliyuncs.com',
    cn-beijing = 'ddosbgp.aliyuncs.com',
    cn-zhangjiakou = 'ddosbgp.aliyuncs.com',
    cn-huhehaote = 'ddosbgp.aliyuncs.com',
    cn-hangzhou = 'ddosbgp.aliyuncs.com',
    cn-shanghai = 'ddosbgp.aliyuncs.com',
    cn-shenzhen = 'ddosbgp.aliyuncs.com',
    ap-northeast-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'ddosbgp.aliyuncs.com',
    eu-central-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'ddosbgp.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-shanghai-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-north-2-gov-1 = 'ddosbgp.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ddosbgp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddIpRequest {
  ipList?: string(name='IpList'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model AddIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddIpResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpResponseBody(name='body'),
}

async function addIpWithOptions(request: AddIpRequest, runtime: Util.RuntimeOptions): AddIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddIp', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addIp(request: AddIpRequest): AddIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpWithOptions(request, runtime);
}

model CheckAccessLogAuthRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CheckAccessLogAuthResponseBody = {
  requestId?: string(name='RequestId'),
  accessLogAuth?: boolean(name='AccessLogAuth'),
}

model CheckAccessLogAuthResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccessLogAuthResponseBody(name='body'),
}

async function checkAccessLogAuthWithOptions(request: CheckAccessLogAuthRequest, runtime: Util.RuntimeOptions): CheckAccessLogAuthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckAccessLogAuth', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkAccessLogAuth(request: CheckAccessLogAuthRequest): CheckAccessLogAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccessLogAuthWithOptions(request, runtime);
}

model CheckGrantRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model CheckGrantResponseBody = {
  status?: int32(name='Status'),
  requestId?: string(name='RequestId'),
}

model CheckGrantResponse = {
  headers: map[string]string(name='headers'),
  body: CheckGrantResponseBody(name='body'),
}

async function checkGrantWithOptions(request: CheckGrantRequest, runtime: Util.RuntimeOptions): CheckGrantResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CheckGrant', '2018-07-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function checkGrant(request: CheckGrantRequest): CheckGrantResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkGrantWithOptions(request, runtime);
}

model ConfigSchedruleOnDemandRequest {
  instanceId?: string(name='InstanceId'),
  ruleName?: string(name='RuleName'),
  ruleConditionMbps?: string(name='RuleConditionMbps'),
  ruleConditionKpps?: string(name='RuleConditionKpps'),
  ruleConditionCnt?: string(name='RuleConditionCnt'),
  ruleAction?: string(name='RuleAction'),
  ruleSwitch?: string(name='RuleSwitch'),
  ruleUndoMode?: string(name='RuleUndoMode'),
  ruleUndoBeginTime?: string(name='RuleUndoBeginTime'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime'),
  timeZone?: string(name='TimeZone'),
  regionId?: string(name='RegionId'),
}

model ConfigSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigSchedruleOnDemandResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigSchedruleOnDemandResponseBody(name='body'),
}

async function configSchedruleOnDemandWithOptions(request: ConfigSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): ConfigSchedruleOnDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigSchedruleOnDemand', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configSchedruleOnDemand(request: ConfigSchedruleOnDemandRequest): ConfigSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return configSchedruleOnDemandWithOptions(request, runtime);
}

model CreateSchedruleOnDemandRequest {
  instanceId?: string(name='InstanceId'),
  ruleName?: string(name='RuleName'),
  ruleConditionMbps?: string(name='RuleConditionMbps'),
  ruleConditionKpps?: string(name='RuleConditionKpps'),
  ruleConditionCnt?: string(name='RuleConditionCnt'),
  ruleAction?: string(name='RuleAction'),
  ruleSwitch?: string(name='RuleSwitch'),
  ruleUndoMode?: string(name='RuleUndoMode'),
  ruleUndoBeginTime?: string(name='RuleUndoBeginTime'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime'),
  timeZone?: string(name='TimeZone'),
  regionId?: string(name='RegionId'),
}

model CreateSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSchedruleOnDemandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchedruleOnDemandResponseBody(name='body'),
}

async function createSchedruleOnDemandWithOptions(request: CreateSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): CreateSchedruleOnDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSchedruleOnDemand', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSchedruleOnDemand(request: CreateSchedruleOnDemandRequest): CreateSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchedruleOnDemandWithOptions(request, runtime);
}

model DeleteBlackholeRequest {
  ip?: string(name='Ip'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteBlackholeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBlackholeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBlackholeResponseBody(name='body'),
}

async function deleteBlackholeWithOptions(request: DeleteBlackholeRequest, runtime: Util.RuntimeOptions): DeleteBlackholeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBlackhole', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBlackhole(request: DeleteBlackholeRequest): DeleteBlackholeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBlackholeWithOptions(request, runtime);
}

model DeleteIpRequest {
  ipList?: string(name='IpList'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpResponseBody(name='body'),
}

async function deleteIpWithOptions(request: DeleteIpRequest, runtime: Util.RuntimeOptions): DeleteIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIp', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIp(request: DeleteIpRequest): DeleteIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpWithOptions(request, runtime);
}

model DeleteSchedruleOnDemandRequest {
  instanceId?: string(name='InstanceId'),
  ruleName?: string(name='RuleName'),
  regionId?: string(name='RegionId'),
}

model DeleteSchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSchedruleOnDemandResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchedruleOnDemandResponseBody(name='body'),
}

async function deleteSchedruleOnDemandWithOptions(request: DeleteSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): DeleteSchedruleOnDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSchedruleOnDemand', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSchedruleOnDemand(request: DeleteSchedruleOnDemandRequest): DeleteSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchedruleOnDemandWithOptions(request, runtime);
}

model DescribeDdosEventRequest {
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeDdosEventResponseBody = {
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      endTime?: int32(name='EndTime'),
      status?: string(name='Status'),
      startTime?: int32(name='StartTime'),
      mbps?: int32(name='Mbps'),
      ip?: string(name='Ip'),
      pps?: int32(name='Pps'),
    }
  ](name='Events'),
  total?: long(name='Total'),
}

model DescribeDdosEventResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosEventResponseBody(name='body'),
}

async function describeDdosEventWithOptions(request: DescribeDdosEventRequest, runtime: Util.RuntimeOptions): DescribeDdosEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDdosEvent', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDdosEvent(request: DescribeDdosEventRequest): DescribeDdosEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventWithOptions(request, runtime);
}

model DescribeExcpetionCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeExcpetionCountResponseBody = {
  requestId?: string(name='RequestId'),
  exceptionIpCount?: int32(name='ExceptionIpCount'),
  expireTimeCount?: int32(name='ExpireTimeCount'),
}

model DescribeExcpetionCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExcpetionCountResponseBody(name='body'),
}

async function describeExcpetionCountWithOptions(request: DescribeExcpetionCountRequest, runtime: Util.RuntimeOptions): DescribeExcpetionCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExcpetionCount', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExcpetionCount(request: DescribeExcpetionCountRequest): DescribeExcpetionCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExcpetionCountWithOptions(request, runtime);
}

model DescribeInstanceListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIdList?: string(name='InstanceIdList'),
  remark?: string(name='Remark'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  ipVersion?: string(name='IpVersion'),
  instanceType?: string(name='InstanceType'),
  ip?: string(name='Ip'),
  orderby?: string(name='Orderby'),
  orderdire?: string(name='Orderdire'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstanceListResponseBody = {
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  instanceList?: [ 
    {
      status?: string(name='Status'),
      ipType?: string(name='IpType'),
      autoRenewal?: boolean(name='AutoRenewal'),
      remark?: string(name='Remark'),
      expireTime?: long(name='ExpireTime'),
      product?: string(name='Product'),
      gmtCreate?: long(name='GmtCreate'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      blackholdingCount?: string(name='BlackholdingCount'),
    }
  ](name='InstanceList'),
}

model DescribeInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceListResponseBody(name='body'),
}

async function describeInstanceListWithOptions(request: DescribeInstanceListRequest, runtime: Util.RuntimeOptions): DescribeInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceList', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceList(request: DescribeInstanceListRequest): DescribeInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceListWithOptions(request, runtime);
}

model DescribeInstanceSpecsRequest {
  instanceIdList?: string(name='InstanceIdList'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceSpecsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceSpecs?: [ 
    {
      packConfig?: {
        packBasicThre?: int32(name='PackBasicThre'),
        bindIpCount?: int32(name='BindIpCount'),
        packAdvThre?: int32(name='PackAdvThre'),
        normalBandwidth?: int32(name='NormalBandwidth'),
        ipBasicThre?: int32(name='IpBasicThre'),
        ipAdvanceThre?: int32(name='IpAdvanceThre'),
        ipSpec?: int32(name='IpSpec'),
      }(name='PackConfig'),
      isFullDefenseMode?: int32(name='IsFullDefenseMode'),
      region?: string(name='Region'),
      availableDefenseTimes?: int32(name='AvailableDefenseTimes'),
      totalDefenseTimes?: int32(name='TotalDefenseTimes'),
      availableDeleteBlackholeCount?: string(name='AvailableDeleteBlackholeCount'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceSpecs'),
}

model DescribeInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecsWithOptions(request: DescribeInstanceSpecsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSpecs', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecsWithOptions(request, runtime);
}

model DescribeOnDemandDdosEventRequest {
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeOnDemandDdosEventResponseBody = {
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      endTime?: int32(name='EndTime'),
      status?: string(name='Status'),
      startTime?: int32(name='StartTime'),
      mbps?: int32(name='Mbps'),
      ip?: string(name='Ip'),
      pps?: int32(name='Pps'),
    }
  ](name='Events'),
  total?: long(name='Total'),
}

model DescribeOnDemandDdosEventResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOnDemandDdosEventResponseBody(name='body'),
}

async function describeOnDemandDdosEventWithOptions(request: DescribeOnDemandDdosEventRequest, runtime: Util.RuntimeOptions): DescribeOnDemandDdosEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOnDemandDdosEvent', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOnDemandDdosEvent(request: DescribeOnDemandDdosEventRequest): DescribeOnDemandDdosEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnDemandDdosEventWithOptions(request, runtime);
}

model DescribeOnDemandInstanceStatusRequest {
  regionId?: string(name='RegionId'),
  instanceIdList?: [ string ](name='InstanceIdList'),
}

model DescribeOnDemandInstanceStatusResponseBody = {
  instances?: [ 
    {
      userId?: string(name='UserId'),
      mode?: string(name='Mode'),
      instanceId?: string(name='InstanceId'),
      declared?: string(name='Declared'),
      registedAs?: string(name='RegistedAs'),
      net?: string(name='Net'),
      desc?: string(name='Desc'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
}

model DescribeOnDemandInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOnDemandInstanceStatusResponseBody(name='body'),
}

async function describeOnDemandInstanceStatusWithOptions(request: DescribeOnDemandInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeOnDemandInstanceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOnDemandInstanceStatus', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOnDemandInstanceStatus(request: DescribeOnDemandInstanceStatusRequest): DescribeOnDemandInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnDemandInstanceStatusWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  orderDir?: string(name='OrderDir'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeOpEntitiesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  opEntities?: [ 
    {
      entityType?: int32(name='EntityType'),
      entityObject?: string(name='EntityObject'),
      opAction?: int32(name='OpAction'),
      gmtCreate?: long(name='GmtCreate'),
      opAccount?: string(name='OpAccount'),
      opDesc?: string(name='OpDesc'),
    }
  ](name='OpEntities'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOpEntities', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribePackIpListRequest {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  productName?: string(name='ProductName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribePackIpListResponseBody = {
  requestId?: string(name='RequestId'),
  ipList?: [ 
    {
      status?: string(name='Status'),
      remark?: string(name='Remark'),
      product?: string(name='Product'),
      ip?: string(name='Ip'),
    }
  ](name='IpList'),
  total?: int32(name='Total'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribePackIpListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackIpListResponseBody(name='body'),
}

async function describePackIpListWithOptions(request: DescribePackIpListRequest, runtime: Util.RuntimeOptions): DescribePackIpListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePackIpList', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePackIpList(request: DescribePackIpListRequest): DescribePackIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackIpListWithOptions(request, runtime);
}

model DescribePackPaidTrafficRequest {
  sourceIp?: string(name='SourceIp'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribePackPaidTrafficResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  packPaidTraffics?: [ 
    {
      startTime?: long(name='StartTime'),
      baseBandwidth?: int32(name='BaseBandwidth'),
      elasticBandwidth?: int32(name='ElasticBandwidth'),
      totalCapacity?: float(name='TotalCapacity'),
      maxAttack?: float(name='MaxAttack'),
      instanceId?: string(name='InstanceId'),
      paidCapacity?: float(name='PaidCapacity'),
    }
  ](name='PackPaidTraffics'),
}

model DescribePackPaidTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackPaidTrafficResponseBody(name='body'),
}

async function describePackPaidTrafficWithOptions(request: DescribePackPaidTrafficRequest, runtime: Util.RuntimeOptions): DescribePackPaidTrafficResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePackPaidTraffic', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePackPaidTraffic(request: DescribePackPaidTrafficRequest): DescribePackPaidTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackPaidTrafficWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEnName?: string(name='RegionEnName'),
      regionName?: string(name='RegionName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeResourcePackInstancesRequest {
  sourceIp?: string(name='SourceIp'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  resourcePacks?: [ 
    {
      endTime?: long(name='EndTime'),
      status?: string(name='Status'),
      startTime?: long(name='StartTime'),
      resourcePackId?: string(name='ResourcePackId'),
      currCapacity?: long(name='CurrCapacity'),
      initCapacity?: long(name='InitCapacity'),
    }
  ](name='ResourcePacks'),
}

model DescribeResourcePackInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackInstancesResponseBody(name='body'),
}

async function describeResourcePackInstancesWithOptions(request: DescribeResourcePackInstancesRequest, runtime: Util.RuntimeOptions): DescribeResourcePackInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcePackInstances', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcePackInstances(request: DescribeResourcePackInstancesRequest): DescribeResourcePackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackInstancesWithOptions(request, runtime);
}

model DescribeResourcePackStatisticsRequest {
  sourceIp?: string(name='SourceIp'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  totalInitCapacity?: long(name='TotalInitCapacity'),
  totalCurrCapacity?: long(name='TotalCurrCapacity'),
  availablePackNum?: int32(name='AvailablePackNum'),
  totalUsedCapacity?: long(name='TotalUsedCapacity'),
}

model DescribeResourcePackStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackStatisticsResponseBody(name='body'),
}

async function describeResourcePackStatisticsWithOptions(request: DescribeResourcePackStatisticsRequest, runtime: Util.RuntimeOptions): DescribeResourcePackStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcePackStatistics', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcePackStatistics(request: DescribeResourcePackStatisticsRequest): DescribeResourcePackStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackStatisticsWithOptions(request, runtime);
}

model DescribeResourcePackUsageRequest {
  sourceIp?: string(name='SourceIp'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackUsageResponseBody = {
  endTime?: long(name='EndTime'),
  requestId?: string(name='RequestId'),
  packUsages?: [ 
    {
      time?: long(name='Time'),
      traffic?: float(name='Traffic'),
    }
  ](name='PackUsages'),
  startTime?: long(name='StartTime'),
  interval?: long(name='Interval'),
}

model DescribeResourcePackUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackUsageResponseBody(name='body'),
}

async function describeResourcePackUsageWithOptions(request: DescribeResourcePackUsageRequest, runtime: Util.RuntimeOptions): DescribeResourcePackUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcePackUsage', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcePackUsage(request: DescribeResourcePackUsageRequest): DescribeResourcePackUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackUsageWithOptions(request, runtime);
}

model DescribeTrafficRequest {
  instanceId?: string(name='InstanceId'),
  ipnet?: string(name='Ipnet'),
  ip?: string(name='Ip'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  interval?: int32(name='Interval'),
  flowType?: string(name='FlowType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeTrafficResponseBody = {
  flowList?: [ 
    {
      time?: int32(name='Time'),
      flowType?: string(name='FlowType'),
      attackPps?: long(name='AttackPps'),
      name?: string(name='Name'),
      pps?: int32(name='Pps'),
      kbps?: int32(name='Kbps'),
      attackBps?: long(name='AttackBps'),
    }
  ](name='FlowList'),
  requestId?: string(name='RequestId'),
}

model DescribeTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficResponseBody(name='body'),
}

async function describeTrafficWithOptions(request: DescribeTrafficRequest, runtime: Util.RuntimeOptions): DescribeTrafficResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTraffic', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTraffic(request: DescribeTrafficRequest): DescribeTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficWithOptions(request, runtime);
}

model GetSlsOpenStatusRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsOpenStatus?: boolean(name='SlsOpenStatus'),
}

model GetSlsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSlsOpenStatusResponseBody(name='body'),
}

async function getSlsOpenStatusWithOptions(request: GetSlsOpenStatusRequest, runtime: Util.RuntimeOptions): GetSlsOpenStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSlsOpenStatus', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSlsOpenStatus(request: GetSlsOpenStatusRequest): GetSlsOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSlsOpenStatusWithOptions(request, runtime);
}

model ListOpenedAccessLogInstancesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListOpenedAccessLogInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  slsConfigStatus?: [ 
    {
      instanceId?: string(name='InstanceId'),
      enable?: boolean(name='Enable'),
    }
  ](name='SlsConfigStatus'),
}

model ListOpenedAccessLogInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenedAccessLogInstancesResponseBody(name='body'),
}

async function listOpenedAccessLogInstancesWithOptions(request: ListOpenedAccessLogInstancesRequest, runtime: Util.RuntimeOptions): ListOpenedAccessLogInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOpenedAccessLogInstances', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOpenedAccessLogInstances(request: ListOpenedAccessLogInstancesRequest): ListOpenedAccessLogInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOpenedAccessLogInstancesWithOptions(request, runtime);
}

model ListTagKeysRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListTagKeysResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyRemarkRequest {
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model ModifyRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRemarkResponseBody(name='body'),
}

async function modifyRemarkWithOptions(request: ModifyRemarkRequest, runtime: Util.RuntimeOptions): ModifyRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRemark', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRemark(request: ModifyRemarkRequest): ModifyRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRemarkWithOptions(request, runtime);
}

model QuerySchedruleOnDemandRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model QuerySchedruleOnDemandResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  ruleStatus?: [ 
    {
      ruleSchedStatus?: string(name='RuleSchedStatus'),
      net?: string(name='Net'),
    }
  ](name='RuleStatus'),
  ruleConfig?: [ 
    {
      ruleSwitch?: string(name='RuleSwitch'),
      ruleConditionMbps?: string(name='RuleConditionMbps'),
      timeZone?: string(name='TimeZone'),
      ruleAction?: string(name='RuleAction'),
      ruleConditionKpps?: string(name='RuleConditionKpps'),
      ruleUndoMode?: string(name='RuleUndoMode'),
      ruleUndoBeginTime?: string(name='RuleUndoBeginTime'),
      ruleConditionCnt?: string(name='RuleConditionCnt'),
      ruleUndoEndTime?: string(name='RuleUndoEndTime'),
      ruleName?: string(name='RuleName'),
    }
  ](name='RuleConfig'),
}

model QuerySchedruleOnDemandResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySchedruleOnDemandResponseBody(name='body'),
}

async function querySchedruleOnDemandWithOptions(request: QuerySchedruleOnDemandRequest, runtime: Util.RuntimeOptions): QuerySchedruleOnDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySchedruleOnDemand', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySchedruleOnDemand(request: QuerySchedruleOnDemandRequest): QuerySchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySchedruleOnDemandWithOptions(request, runtime);
}

model SetInstanceModeOnDemandRequest {
  mode?: string(name='Mode'),
  regionId?: string(name='RegionId'),
  instanceIdList?: [ string ](name='InstanceIdList'),
}

model SetInstanceModeOnDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceModeOnDemandResponse = {
  headers: map[string]string(name='headers'),
  body: SetInstanceModeOnDemandResponseBody(name='body'),
}

async function setInstanceModeOnDemandWithOptions(request: SetInstanceModeOnDemandRequest, runtime: Util.RuntimeOptions): SetInstanceModeOnDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetInstanceModeOnDemand', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setInstanceModeOnDemand(request: SetInstanceModeOnDemandRequest): SetInstanceModeOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceModeOnDemandWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2018-07-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

