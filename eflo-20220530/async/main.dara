/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eflo';
  @version = '2022-05-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateSubnetRequest {
  cidr?: string(name='Cidr', description='网段', example='10.0.0.0/16', position='Body'),
  name?: string(name='Name', description='Subnet名称', example='subnet-test', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  type?: string(name='Type', description='Subnet类型，非必选', example='OOB', position='Body'),
  vpdId?: string(name='VpdId', description='所属VPD', example='vpd-xcuhjyrj', position='Body'),
  zoneId?: string(name='ZoneId', description='可用区', example='cn-wulanchabu-b', position='Body'),
}

model CreateSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', example='subnet-yuvn29bn'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model CreateSubnetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubnetResponseBody(name='body'),
}

async function createSubnet(request: CreateSubnetRequest): CreateSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubnet', 'POST', '/', 'json', true, 'form', request);
}

model CreateVccRequest {
  accessCouldService?: boolean(name='AccessCouldService', description='启动访问云服务', example='true', position='Body'),
  bgpCidr?: string(name='BgpCidr', description='互联网段，云上输入，云下默认', example='10.0.0.0/24', position='Body'),
  cenId?: string(name='CenId', description='CEN', example='cen-bkiw0x1347roekr7f2', position='Body'),
  description?: string(name='Description', description='描述', position='Body'),
  regionId?: string(name='RegionId', description='地域ID', example='cn-wulanchabu', position='Body'),
  vSwitchId?: string(name='VSwitchId', description='vSwitchId', example='vsw-t4nahb0pxckgktx1kot8q', position='Body'),
  vccId?: string(name='VccId', description='入云专线ID', example='vcc-cn-zvp2w222001', position='Body'),
  vpcId?: string(name='VpcId', description='创建代理相关vpcId、vSwitchId', example='vpc-uf6aa4ddo97frj22tgp52', position='Body'),
  vpdId?: string(name='VpdId', description='VPD', example='vpd-t2jseldp', position='Body'),
}

model CreateVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model CreateVccResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVccResponseBody(name='body'),
}

async function createVcc(request: CreateVccRequest): CreateVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVcc', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpdRequest {
  cidr?: string(name='Cidr', description='网段', example='10.0.0.0/8', position='Body'),
  name?: string(name='Name', description='灵骏网段名称', example='test-vpd-template', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  subnets?: [ 
    {
      cidr?: string(name='Cidr', description='网段', example='10.1.0.0/16'),
      name?: string(name='Name', description='名称', example='test-subnet-template'),
      regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu'),
      type?: string(name='Type', description='类型；非必选；通用类型不填；OOB类型填OOB;LB类型填LB', example='None'),
      zoneId?: string(name='ZoneId', description='可用区', example='cn-wulanchabu-b'),
    }
  ](name='Subnets', description='子网信息', position='Body'),
}

model CreateVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetIds?: [ string ](name='SubnetIds'),
    vpdId?: string(name='VpdId', example='vpd-eoiy88ju'),
  }(name='Content'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateVpdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpdResponseBody(name='body'),
}

async function createVpd(request: CreateVpdRequest): CreateVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpd', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSubnetRequest {
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  subnetId?: string(name='SubnetId', description='Subnet ID', example='subnet-f3zfzmnc', position='Body'),
  vpdId?: string(name='VpdId', description='所属Vpd ID', example='vpd-iv2zm1qf', position='Body'),
  zoneId?: string(name='ZoneId', description='可用区', example='cn-wulanchabu-b', position='Body'),
}

model DeleteSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model DeleteSubnetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubnetResponseBody(name='body'),
}

async function deleteSubnet(request: DeleteSubnetRequest): DeleteSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubnet', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVpdRequest {
  regionId?: string(name='RegionId', description='地域', example='cn-hangzhou', position='Body'),
  vpdId?: string(name='VpdId', description='VPD', example='vpd-zr0farea', position='Body'),
}

model DeleteVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{
      "subnet": [
            {
                  "tenantId": "1620939556166277",
                  "regionId": "cn-wulanchabu",
                  "zoneId": "cn",
                  "type": null,
                  "subnetId": "subnet-zqebaxa0",
                  "name": "lql_testVPD"
            }
      ],
      "nc": [
            {}
      ]
}'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteVpdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpdResponseBody(name='body'),
}

async function deleteVpd(request: DeleteVpdRequest): DeleteVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpd', 'POST', '/', 'json', true, 'form', request);
}

model GetSubnetRequest {
  subnetId?: string(name='SubnetId', description='Subnet ID', example='subnet-2avf0itf', position='Body'),
}

model GetSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    cidr?: string(name='Cidr', example='10.10.10.0/24'),
    description?: string(name='Description'),
    gmtCreate?: string(name='GmtCreate', example='2022-12-21 00:00:00'),
    gmtModified?: string(name='GmtModified', example='2022-04-11 15:19:58'),
    id?: long(name='Id', description='ID', example='277'),
    lbCount?: long(name='LbCount', example='0'),
    message?: string(name='Message'),
    name?: string(name='Name', example='aa'),
    ncCount?: long(name='NcCount', example='16'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    status?: string(name='Status', example='Available'),
    subnetId?: string(name='SubnetId', example='subnet-aj93mko8'),
    tenantId?: string(name='TenantId', example='1655449505171'),
    type?: string(name='Type', example='OOB'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', example='10.0.0.0/8'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-11 15:19:58'),
      name?: string(name='Name', example='vpd-test'),
      vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
    }(name='VpdBaseInfo'),
    vpdId?: string(name='VpdId', example='vpd-ze3na0wf'),
    zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model GetSubnetResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubnetResponseBody(name='body'),
}

async function getSubnet(request: GetSubnetRequest): GetSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubnet', 'POST', '/', 'json', true, 'form', request);
}

model GetVccRequest {
  regionId?: string(name='RegionId', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001', position='Body'),
}

model GetVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-jy-A-oxs'),
    aliyunRouterInfo?: [ 
      {
        localGatewayIp?: string(name='LocalGatewayIp', example='169.254.248.30'),
        mask?: string(name='Mask', example='255.255.255.248'),
        pcId?: string(name='PcId', example='pc-0jlof4bphlsnxbdztkvad'),
        peerGatewayIp?: string(name='PeerGatewayIp', example='169.254.248.28'),
        vbrId?: string(name='VbrId', example='vbr-2ze4i85p6vb9nwcan5xt0'),
        vlanId?: string(name='VlanId', example='1042'),
      }
    ](name='AliyunRouterInfo'),
    bandwidthStr?: string(name='BandwidthStr', example='1G'),
    bgpCidr?: string(name='BgpCidr', example='10.4.0.0/24'),
    cenId?: string(name='CenId', example='cen-m2iskbojlvda5w65fp'),
    cisRouterInfo?: [ 
      {
        ccInfos?: [ 
          {
            ccId?: string(name='CcId', example='cc-73aeex5o'),
            localGatewayIp?: string(name='LocalGatewayIp', example='169.254.248.26'),
            remoteGatewayIp?: string(name='RemoteGatewayIp', example='169.254.248.30'),
            status?: string(name='Status', example='Established'),
            subnetMask?: string(name='SubnetMask', example='255.255.255.248'),
            vlanId?: string(name='VlanId', description='vlanid', example='Ethernet1042'),
          }
        ](name='CcInfos'),
        ccrId?: string(name='CcrId', example='ccr-1ms84am0'),
      }
    ](name='CisRouterInfo'),
    commodityCode?: string(name='CommodityCode', example='bccluster_cloudconnectionpre_public_cn'),
    createTime?: string(name='CreateTime', example='1648085472000'),
    currentNode?: string(name='CurrentNode'),
    duration?: string(name='Duration', example='1'),
    gmtModified?: string(name='GmtModified', example='1648085472000'),
    internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
    lineOperator?: string(name='LineOperator', example='Other'),
    message?: string(name='Message'),
    payType?: string(name='PayType', example='PrePay'),
    portType?: string(name='PortType', example='100G'),
    pricingCycle?: string(name='PricingCycle', example='Month'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    spec?: string(name='Spec', example='Large'),
    status?: string(name='Status', example='Available'),
    tenantId?: string(name='TenantId', example='NFZLWCNY'),
    vSwitchId?: string(name='VSwitchId', example='vsw-uf6u8473r84e6n1n19he5'),
    vccId?: string(name='VccId', example='vcc-cn-cqf2xh40101'),
    vccName?: string(name='VccName', example='vcc-heyuan-backup'),
    vpcId?: string(name='VpcId', example='vpc-j6ctp4n75306phv5tmpsm'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', example='172.18.0.0/24'),
      gmtCreate?: string(name='GmtCreate', example='1648010767000'),
      name?: string(name='Name'),
      vpdId?: string(name='VpdId', example='vpd-ppdunxzc'),
    }(name='VpdBaseInfo'),
    vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CAD09E47-B651-5206-B2DC-3AB78C8EB446'),
}

model GetVccResponse = {
  headers: map[string]string(name='headers'),
  body: GetVccResponseBody(name='body'),
}

async function getVcc(request: GetVccRequest): GetVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVcc', 'POST', '/', 'json', true, 'form', request);
}

model GetVpdRequest {
  vpdId?: string(name='VpdId', description='灵骏网段ID', example='vpd-ze3na0wf', position='Body'),
}

model GetVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    cidr?: string(name='Cidr', example='10.0.0.0/8'),
    description?: string(name='Description'),
    gmtCreate?: string(name='GmtCreate', example='2022-12-26 20:16:36'),
    gmtModified?: string(name='GmtModified', example='2022-12-26 20:16:36'),
    lbCount?: long(name='LbCount', example='0'),
    message?: string(name='Message'),
    name?: string(name='Name', example='VPD-TEST'),
    ncCount?: long(name='NcCount', example='16'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    route?: int32(name='Route', example='1'),
    serviceCidr?: string(name='ServiceCidr', example='169.254.252.0/23'),
    status?: string(name='Status', example='Available'),
    subnetCount?: long(name='SubnetCount', example='1'),
    vccCount?: long(name='VccCount', example='0'),
    vpdId?: string(name='VpdId', example='vpd-fuliephf'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetVpdResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpdResponseBody(name='body'),
}

async function getVpd(request: GetVpdRequest): GetVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpd', 'POST', '/', 'json', true, 'form', request);
}

model InitializeVccRequest {
}

model InitializeVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
    roleName?: string(name='RoleName', example='CloudConnectionOperationRole'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
}

model InitializeVccResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeVccResponseBody(name='body'),
}

async function initializeVcc(request: InitializeVccRequest): InitializeVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeVcc', 'POST', '/', 'json', false, 'json', request);
}

model ListSubnetsRequest {
  enablePage?: boolean(name='EnablePage', example='false', position='Body'),
  name?: string(name='Name', description='Subnet名称', example='test-subnet-template', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  status?: string(name='Status', description='状态', example='Available', position='Body'),
  subnetId?: string(name='SubnetId', description='Subnet ID', example='subnet-anhtskts', position='Body'),
  type?: string(name='Type', description='类型', example='None', position='Body'),
  vpdId?: string(name='VpdId', description='所属Vpd ID', example='vpd-fuliephf', position='Body'),
  zoneId?: string(name='ZoneId', description='可用区', example='cn-wulanchabu-a', position='Body'),
}

model ListSubnetsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', example='172.18.0.0/24'),
        gmtCreate?: string(name='GmtCreate', example='2022-10-31 10:56:51'),
        gmtModified?: string(name='GmtModified', example='2022-04-11 15:19:58'),
        id?: long(name='Id', example='606067'),
        message?: string(name='Message'),
        name?: string(name='Name'),
        ncCount?: long(name='NcCount', example='16'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        status?: string(name='Status', example='Available'),
        subnetId?: string(name='SubnetId', example='subnet-c6wci55i'),
        tenantId?: string(name='TenantId', example='1655449505171'),
        type?: string(name='Type', example='OOB'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/8'),
          gmtCreate?: string(name='GmtCreate', example='2022-11-04 00:00:00'),
          name?: string(name='Name'),
          vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
        }(name='VpdBaseInfo'),
        vpdId?: string(name='VpdId', example='vpd-ze3na0wf'),
        zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='7F9082CC-3D94-560F-A575-8E8EF6CE2CB8'),
}

model ListSubnetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubnetsResponseBody(name='body'),
}

async function listSubnets(request: ListSubnetsRequest): ListSubnetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubnets', 'POST', '/', 'json', true, 'form', request);
}

model ListVccsRequest {
  bandwidth?: int32(name='Bandwidth', example='5000', position='Body'),
  cenId?: string(name='CenId', example='cen-95iwtpyvj3kk1v0ao0', position='Body'),
  enablePage?: boolean(name='EnablePage', example='false', position='Body'),
  exStatus?: string(name='ExStatus', description='除外的状态，Status存在则不生效', example='Prepaid', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-wulanchabu', position='Body'),
  status?: string(name='Status', example='Available', position='Body'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-bp1nrtkmamy329u6a1z0i', position='Body'),
  vpdId?: string(name='VpdId', example='vpd-omqutbff', position='Body'),
}

model ListVccsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-hd-A'),
        bandwidthStr?: string(name='BandwidthStr', example='1000'),
        bgpCidr?: string(name='BgpCidr', example='172.16.128.0/24'),
        cenId?: string(name='CenId', example='cen-w15qot0pfvs83pkckj'),
        createTime?: string(name='CreateTime', example='2022-07-29 19:16:09'),
        gmtModified?: string(name='GmtModified', example='2022-05-12 14:06:06'),
        lineOperator?: string(name='LineOperator', example='Other'),
        message?: string(name='Message'),
        portType?: string(name='PortType', example='10GBase-LR'),
        rate?: double(name='Rate', example='1'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        spec?: string(name='Spec', example='Large'),
        status?: string(name='Status', example='Init'),
        tenantId?: string(name='TenantId', example='t39qj7nlruwu8'),
        vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
        vccName?: string(name='VccName', example='vcc-heyuan-backup'),
        vpcId?: string(name='VpcId', example='vpc-f8ziirfl9k25h2qn7y4f8'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/13'),
          gmtCreate?: string(name='GmtCreate', example='2022-10-31 10:16:46'),
          name?: string(name='Name'),
          vpdId?: string(name='VpdId', example='vpd-9n7ioqrp'),
        }(name='VpdBaseInfo'),
        vpdId?: string(name='VpdId', example='vpd-eoiy88ju'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='28451248-7038-5184-B5D3-80F104654BE8'),
}

model ListVccsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVccsResponseBody(name='body'),
}

async function listVccs(request: ListVccsRequest): ListVccsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVccs', 'POST', '/', 'json', true, 'form', request);
}

model ListVpdsRequest {
  enablePage?: boolean(name='EnablePage', example='false', position='Body'),
  filterErId?: string(name='FilterErId', description='查询没有绑定过的vpd信息', example='er-kkopgtne', position='Body'),
  forSelect?: boolean(name='ForSelect', description='下拉框使用', example='true', position='Body'),
  name?: string(name='Name', description='vpd名称', example='vpd-wulan-test', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  regionId?: string(name='RegionId', description='地域id', example='cn-wulanchabu', position='Body'),
  status?: string(name='Status', example='Available', position='Body'),
  vpdId?: string(name='VpdId', description='vpd id', example='vpd-fuliephf', position='Body'),
  withDependence?: boolean(name='WithDependence', description='是否带依赖资源信息，建议分页查询的时候不查询依赖信息，删出的时候可以单独查询', example='false', position='Body'),
  withoutVcc?: boolean(name='WithoutVcc', description='查询没有vcc的vpd信息', example='true', position='Body'),
}

model ListVpdsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', description='cidr地址', example='10.0.0.0/8'),
        dependence?: map[string]any(name='Dependence', description='依赖项'),
        gmtCreate?: string(name='GmtCreate', description='创建时间', example='2022-12-26 20:16:36'),
        gmtModified?: string(name='GmtModified', description='修改时间', example='2022-12-26 20:16:36'),
        message?: string(name='Message', description='提示信息', example='success'),
        name?: string(name='Name', description='vpd名称'),
        ncCount?: int32(name='NcCount', description='nc数量', example='16'),
        regionId?: string(name='RegionId', description='地域Id', example='cn-beijing'),
        route?: int32(name='Route', description='路由表数量', example='6'),
        serviceCidr?: string(name='ServiceCidr', description='服务网段', example='169.254.252.0/23'),
        status?: string(name='Status', description='状态', example='Available'),
        subnetCount?: int32(name='SubnetCount', description='subnet数量', example='1'),
        vpdId?: string(name='VpdId', description='vpd id', example='vpd-lg4dppgi'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model ListVpdsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpdsResponseBody(name='body'),
}

async function listVpds(request: ListVpdsRequest): ListVpdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpds', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSubnetRequest {
  description?: string(name='Description', description='描述', position='Body'),
  name?: string(name='Name', description='Subnet名称', example='test-subnet-template', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  subnetId?: string(name='SubnetId', description='Subnet ID', example='subnet-f3zfzmnc', position='Body'),
  vpdId?: string(name='VpdId', description='所属Vpd ID', example='vpd-aof7dat1', position='Body'),
  zoneId?: string(name='ZoneId', description='可用区', example='cn-wulanchabu-a', position='Body'),
}

model UpdateSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', example='subnet-yuvn29bn'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3D9D6E7B-365B-5200-BFA6-9B79E269058C'),
}

model UpdateSubnetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubnetResponseBody(name='body'),
}

async function updateSubnet(request: UpdateSubnetRequest): UpdateSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubnet', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVccRequest {
  bandwidth?: int32(name='Bandwidth', example='1000', position='Body'),
  orderId?: string(name='OrderId', example='20006627643', position='Body'),
  regionId?: string(name='RegionId', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001', position='Body'),
  vccName?: string(name='VccName', example='vcc-heyuan-backup', position='Body'),
}

model UpdateVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vccId?: string(name='VccId', example='vcc-cn-2r42v22cn03'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F906C4D3-7444-58E2-9819-E3D8563571A3'),
}

model UpdateVccResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVccResponseBody(name='body'),
}

async function updateVcc(request: UpdateVccRequest): UpdateVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVcc', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVpdRequest {
  description?: string(name='Description', description='描述', position='Body'),
  name?: string(name='Name', description='灵骏网段名称', example='test', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-wulanchabu', position='Body'),
  vpdId?: string(name='VpdId', description='灵骏网段ID', example='vpd-omqutbff', position='Body'),
}

model UpdateVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vpdId?: string(name='VpdId', example='vpd-lg4dppgi'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model UpdateVpdResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpdResponseBody(name='body'),
}

async function updateVpd(request: UpdateVpdRequest): UpdateVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpd', 'POST', '/', 'json', true, 'form', request);
}

