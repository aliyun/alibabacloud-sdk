/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eflo';
  @version = '2022-05-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AssignLeniPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken', description='The idempotent identifier.', example='3fd79d62-ab1d-11ec-9a53-0242ac110004', position='Body'),
  description?: string(name='Description', description='The description of the response code.', example='wuhuaiyu', position='Body'),
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.

This parameter is required.', example='leni-1234****', position='Body'),
  privateIpAddress?: string(name='PrivateIpAddress', description='Lingjun Elastic Network Interface secondary private network IP (automatically assigned by default).', example='10.0.****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model AssignLeniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.

>  This parameter is returned only if Resource Access Management (RAM) permission verification failed.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****'),
    ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-lzwx****'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model AssignLeniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignLeniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @description Apply for a secondary private IP address for the specified Lingjun Elastic Network Interface.
  * *   If the PrivateIp field is empty, a secondary private IP address is automatically assigned and the unique identifier of the IP address is returned.
  * *   You can use the GetLeniPrivateIpAddress or ListLeniPrivateIpAddresses interface to check whether the secondary private IP address is assigned.
  * @param request  the request parameters of AssignLeniPrivateIpAddress  AssignLeniPrivateIpAddressRequest
  * @return AssignLeniPrivateIpAddressResponse
 */
async function assignLeniPrivateIpAddress(request: AssignLeniPrivateIpAddressRequest): AssignLeniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignLeniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model AssignPrivateIpAddressRequest {
  assignMac?: boolean(name='AssignMac', description='Specifies whether to assign a mac address.', example='true', position='Body'),
  clientToken?: string(name='ClientToken', description='By default, popApi is not ignored and idempotent', example='3fd79d62-ab1d-11ec-9a53-0242ac110004', position='Body'),
  description?: string(name='Description', description='The description of the variable.', example='test', position='Body'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the network interface controller.

This parameter is required.', example='lni-bp18exxqa2rvfn45e5pz', position='Body'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address.', example='10.0.6.194', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  skipConfig?: boolean(name='SkipConfig', description='The default value is false. If you set the value to true, the secondary private IP address application process can be accelerated.

>  For more information, submit a ticket.', example='false', position='Body'),
  subnetId: string(name='SubnetId', description='It belongs to the Lingjun subnet.

This parameter is required.', example='subnet-f3zfzmnc', position='Body'),
}

model AssignPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    ipName?: string(name='IpName', description='The unique IP identifier.', example='sip-8exxqa2r'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID.', example='lni-bp18exxqa2rvfn45e5pz'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model AssignPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignPrivateIpAddressResponseBody(name='body'),
}

/**
  * @description >  Apply for secondary private IP addresses
  * *   By default, each network interface controller can apply for three secondary private IP addresses. If the quota is exceeded, contact the administrator.
  * *   The secondary private IP address is allocated from the Lingjun subnet to which the current network interface controller belongs. The first address and the last two addresses belong to reserved addresses and do not participate in the allocation.
  * @param request  the request parameters of AssignPrivateIpAddress  AssignPrivateIpAddressRequest
  * @return AssignPrivateIpAddressResponse
 */
async function assignPrivateIpAddress(request: AssignPrivateIpAddressRequest): AssignPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model AssociateVpdCidrBlockRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  secondaryCidrBlock: string(name='SecondaryCidrBlock', description='The additional CIDR block.

This parameter is required.', example='172.16.0.0/12', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the Lingjun CIDR block.

This parameter is required.', example='vpd-omqutbff', position='Body'),
}

model AssociateVpdCidrBlockResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-eoiy88ju'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model AssociateVpdCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateVpdCidrBlockResponseBody(name='body'),
}

/**
  * @description >  **Add a CIDR block**
  * *   The CIDR block cannot start with 0. The subnet mask must be 8 to 28 bits in length.
  * *   The secondary IPv4 CIDR block must not overlap with the primary IPv4 CIDR block of the Lingjun CIDR block and the added secondary IPv4 CIDR block.
  * *   You cannot use 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 as the CIDR block of Lingjun. Example: In the Lingjun CIDR block whose primary IPv4 CIDR block is 192.168.0.0/16, you cannot add the following CIDR blocks as additional IPv4 CIDR blocks. The CIDR block that is in the same range as 192.168.0.0/16. A CIDR block that is larger than 192.168.0.0/16. Example: 192.168.0.0/8. A CIDR block that is smaller than 192.168.0.0/16. Example: 192.168.0.0/24.
  * *   By default, each tenant can create three additional CIDR blocks in each region.
  * @param request  the request parameters of AssociateVpdCidrBlock  AssociateVpdCidrBlockRequest
  * @return AssociateVpdCidrBlockResponse
 */
async function associateVpdCidrBlock(request: AssociateVpdCidrBlockRequest): AssociateVpdCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVpdCidrBlock', 'POST', '/', 'json', true, 'form', request);
}

model AttachElasticNetworkInterfaceRequest {
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='leni-1234****', position='Body'),
  nodeId: string(name='NodeId', description='The ID of the node.

This parameter is required.', example='e01-cn-lbj3aej****', position='Body'),
  regionId: string(name='RegionId', description='The region ID of the disk.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model AttachElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='[]'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model AttachElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @description This interface is an asynchronous interface. You need to use the query interface to wait for the Lingjun Elastic Network Interface to reach the available state.
  * @param request  the request parameters of AttachElasticNetworkInterface  AttachElasticNetworkInterfaceRequest
  * @return AttachElasticNetworkInterfaceResponse
 */
async function attachElasticNetworkInterface(request: AttachElasticNetworkInterfaceRequest): AttachElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model CreateElasticNetworkInterfaceRequest {
  clientToken?: string(name='ClientToken', description='The POP API is not ignored by default and is used for idempotence.', example='3fd79d62-ab1d-11ec-9a53-0242ac110004', position='Body'),
  description?: string(name='Description', description='The description of the response code.', example='Description', position='Body'),
  enableJumboFrame?: boolean(name='EnableJumboFrame', description='Whether to enable the jumbo frame capability', example='True', position='Body'),
  nodeId?: string(name='NodeId', description='The ID of the Lingjun node.', example='e01-cn-lbj3aej****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-wz9fj2s3o21nw2****', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Body'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-t4nahb0pxck****', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

>  If the NodeId parameter is empty, the VpcId parameter is required. If the NodeId parameter is not empty, the VpcId parameter is optional.', example='vpc-uf6aa4ddo97fr****', position='Body'),
  zoneId: string(name='ZoneId', description='The zone ID.

This parameter is required.', example='cn-wulanchabu-a', position='Body'),
}

model CreateElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial. This parameter is returned only if Resource Access Management (RAM) permission verification failed.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1fejojjo****'),
    nodeId?: string(name='NodeId', description='The ID of the Lingjun node.', example='e01-cn-lbj3aej****'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model CreateElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateElasticNetworkInterface  CreateElasticNetworkInterfaceRequest
  * @return CreateElasticNetworkInterfaceResponse
 */
async function createElasticNetworkInterface(request: CreateElasticNetworkInterfaceRequest): CreateElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model CreateErRequest {
  description?: string(name='Description', description='The description of the document.', example='test', position='Body'),
  erName: string(name='ErName', description='Lingjun HUB Name

This parameter is required.', example='er-wulanchabu-main', position='Body'),
  masterZoneId: string(name='MasterZoneId', description='Primary Zone

This parameter is required.', example='cn-wulanchabu-b', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmyuzlx2iihcy', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Body'),
}

model CreateErResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    erId?: string(name='ErId', description='Lingjun HUB ID', example='er-aueyxxsy'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model CreateErResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateErResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a Lingjun HUB, note that:
  * *   Make sure that you have sufficient Lingjun HUB quota.
  * *   This interface is an asynchronous interface. After this interface is called, the system will return the ID of a Lingjun HUB. At this time, the Lingjun HUB instance may not be created yet, and the system background creation task is still in progress. You can call the ListErs or GetEr operation to query the status of the Lingjun HUB.
  *     *   If the status of the Lingjun HUB is Executing, it indicates that it is being created.
  *     *   If the status of the Lingjun HUB is Available, the creation is successful.
  * @param request  the request parameters of CreateEr  CreateErRequest
  * @return CreateErResponse
 */
async function createEr(request: CreateErRequest): CreateErResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEr', 'POST', '/', 'json', true, 'form', request);
}

model CreateErAttachmentRequest {
  autoReceiveAllRoute: boolean(name='AutoReceiveAllRoute', description='Indicates whether to automatically receive all routes from all instances under the Lingjun HUB. Valid values:

*   **true**: received automatically.
*   **false**: Not received.

This parameter is required.', example='true', position='Body'),
  erAttachmentName: string(name='ErAttachmentName', description='The name of the network instance connection.

This parameter is required.', example='er-attachemnt-vpd-xksd2obl', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID.

This parameter is required.', example='er-kkopgtne', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the network instance. Valid values: **VPD** and **VCC**.

For more information, see [What is Lingjun?](https://help.aliyun.com/document_detail/444430.html)

You can query **Lingjun CIDR Block** and **Lingjun Connection** by [ListVpds](https://help.aliyun.com/document_detail/2331077.html) and [ListVccs](https://help.aliyun.com/document_detail/2399526.html?) respectively.

This parameter is required.', example='vpd-xksd2obl', position='Body'),
  instanceType: string(name='InstanceType', description='The category of the instance. Valid values:

*   **VPD**: indicates the Lingjun CIDR block.
*   **VCC**: indicates a Lingjun connection.

This parameter is required.', example='VPD', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs. This parameter is required for cross-account resources.', example='1620939556166277', position='Body'),
}

model CreateErAttachmentResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    erAttachmentId?: string(name='ErAttachmentId', description='The ID of the network connection instance.', example='er-attachment-ggjbfhqv'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is displayed.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateErAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateErAttachmentResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a network instance connection, note that:
  * *   Make sure that you have created a Lingjun HUB instance.
  * *   Make sure that you have sufficient quota for network instance connections.
  * *   This operation is an asynchronous operation. After you call this operation, the system returns the ID of the network instance connection. In this case, the network instance connection may not be created yet, and the system is still creating the network instance in the background. You can query the connection status of a network instance by ListErAttachments or GetErAttachment:
  *     *   If the connection status of the network instance is Executing, the network instance is being created.
  *     *   If the connection status of the network instance is Available, the network instance is created.
  * @param request  the request parameters of CreateErAttachment  CreateErAttachmentRequest
  * @return CreateErAttachmentResponse
 */
async function createErAttachment(request: CreateErAttachmentRequest): CreateErAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateErAttachment', 'POST', '/', 'json', true, 'form', request);
}

model CreateErRouteMapRequest {
  description?: string(name='Description', description='Policy description', example='terraform-example', position='Body'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='0.0.0.0/0', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-aueyxxsy', position='Body'),
  receptionInstanceId: string(name='ReceptionInstanceId', description='The ID of the destination instance.

This parameter is required.', example='vpd-xlhsvdvt', position='Body'),
  receptionInstanceOwner?: string(name='ReceptionInstanceOwner', description='The tenant to which the route receiving instance belongs.', example='1620939556166277', position='Body'),
  receptionInstanceType: string(name='ReceptionInstanceType', description='The type of the destination instance. Valid values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.

This parameter is required.', example='VPD', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  routeMapAction: string(name='RouteMapAction', description='Policy behavior; optional values:

*   **permit**: Allow
*   **deny**: Rejected

This parameter is required.', example='permit', position='Body'),
  routeMapNum: int32(name='RouteMapNum', description='The ID of the policy.

A smaller sequence number indicates a lower priority. When a route is matched, a policy with a higher priority is preferentially matched.

**Valid values: 1001 to 2000**

This parameter is required.', example='1001', position='Body'),
  transmissionInstanceId: string(name='TransmissionInstanceId', description='The ID of the source instance.

This parameter is required.', example='vpd-xlsjsdvt', position='Body'),
  transmissionInstanceOwner?: string(name='TransmissionInstanceOwner', description='The tenant to which the route publish instance belongs', example='1620939556166277', position='Body'),
  transmissionInstanceType: string(name='TransmissionInstanceType', description='The type of the source instance. Valid values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.

This parameter is required.', example='VPD', position='Body'),
}

model CreateErRouteMapResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial. This parameter is returned only if Resource Access Management (RAM) authentication failed.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    erRouteMapId?: string(name='ErRouteMapId', description='routing policy ID', example='er-rmap-uwglhzom'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model CreateErRouteMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateErRouteMapResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a routing policy, note that:
  * *   Make sure that you have created a Lingjun HUB instance.
  * *   Make sure that you have created a network instance connection.
  * *   This operation is an asynchronous operation. After you call this operation, the system returns the ID of the routing policy. In this case, the routing policy instance may not be created yet, and the system background creation task is still in progress. You can use ListErRouteMaps or GetErRouteMap to query the status of a routing policy.
  *     *   If the status of the routing policy is Execute, the system is creating the instance.
  *     *   If the status of the routing policy is Available, the creation is successful.
  * @param request  the request parameters of CreateErRouteMap  CreateErRouteMapRequest
  * @return CreateErRouteMapResponse
 */
async function createErRouteMap(request: CreateErRouteMapRequest): CreateErRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateErRouteMap', 'POST', '/', 'json', true, 'form', request);
}

model CreateSubnetRequest {
  cidr: string(name='Cidr', description='The CIDR block of the Subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.

This parameter is required.', example='10.0.0.0/16', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  subnetName: string(name='SubnetName', description='Lingjun subnet instance name

This parameter is required.', example='subnet-1', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-subnet'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='subnet-tag-1'),
    }
  ](name='Tag', description='The tag information.

You can specify up to 20 tags.', position='Body'),
  type?: string(name='Type', description='Lingjun Subnet Usage Type; optional; optional. Valid values:

*   **If you do not set this field for a common type**
*   **OOB** :OOB type
*   **LB**: LB type', example='OOB', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the Lingjun CIDR block.

This parameter is required.', example='vpd-xcuhjyrj', position='Body'),
  zoneId: string(name='ZoneId', description='The zone ID.

This parameter is required.', example='cn-wulanchabu-b', position='Body'),
}

model CreateSubnetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', description='Lingjun subnet instance ID', example='subnet-yuvn29bn'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID, which is used to locate and troubleshoot issues.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model CreateSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubnetResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a Lingjun subnet, note that:
  * *   You have created a Lingjun CIDR block.
  * *   Only one network segment can be specified for a Lingjun subnet.
  * *   The network segment cannot be modified after the Lingjun subnet is created.
  * *   Make sure that you have sufficient Lingjun subnet quota.
  * *   This interface is an asynchronous interface. After calling this interface, the system will return the ID of a Lingjun subnet. At this time, the Lingjun network segment may not be created yet, and the system background creation task is still in progress. You can call the ListSubnets or GetSubnet operation to query the status of the CIDR block of Lingjun.
  *     *   If the status of the Lingjun subnet is Executed, it indicates that it is being created.
  *     *   If the status of the Lingjun subnet is Available, the creation is successful.
  * @param request  the request parameters of CreateSubnet  CreateSubnetRequest
  * @return CreateSubnetResponse
 */
async function createSubnet(request: CreateSubnetRequest): CreateSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubnet', 'POST', '/', 'json', true, 'form', request);
}

model CreateVccRequest {
  accessCouldService?: boolean(name='AccessCouldService', description='Enabled access to cloud services. Optional values:

*   **true**: Enable access to cloud services
*   **false**: Do not enable access to cloud services', example='true', position='Body'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth. Unit: Mbit /s. The minimum value is 1000, representing 1Gbps bandwidth; the maximum value is 400000, representing 400Gbps bandwidth.

>  1Gbps = 1000Mbps', example='1000', position='Body'),
  bgpAsn?: long(name='BgpAsn', description='bgp as number', example='bgpAsn', position='Body'),
  bgpCidr?: string(name='BgpCidr', description='Internet segment, on-premises input, off-premises default', example='10.0.0.0/24', position='Body'),
  cenId?: string(name='CenId', description='CEN Instance ID', example='cen-bkiw0x1347roekr7f2', position='Body'),
  cenOwnerId?: string(name='CenOwnerId', description='Account to which cen belongs', example='1511928242963727', position='Body'),
  connectionType?: string(name='ConnectionType', description='The connection mode. Valid values:

*   **VPC**
*   **CEN (CENTR)**', example='CENTR', position='Body'),
  description?: string(name='Description', description='The description of the document.', example='Description', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aeky5f3qx6ceapq', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vcc'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='vcc-group-1'),
    }
  ](name='Tag', description='The tag information.

You can specify up to 20 tags.', position='Body'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. [Virtual Private Cloud VSwitch](https://help.aliyun.com/document_detail/100380.html).

You can call the [DescribeVSwitches](https://help.aliyun.com/document_detail/35748.html) operation to query created vSwitches.', example='vsw-t4nahb0pxckgktx1kot8q', position='Body'),
  vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001', position='Body'),
  vccName?: string(name='VccName', description='Lingjun Connection Name', example='test', position='Body'),
  vpcId?: string(name='VpcId', description='Virtual Private Cloud IDs; [What is Virtual Private Cloud](https://help.aliyun.com/document_detail/34217.html)

You can call the [DescribeVpcs](https://help.aliyun.com/document_detail/35739.html#demo-0) operation to query the specified VPC.', example='vpc-uf6aa4ddo97frj22tgp52', position='Body'),
  vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-t2jseldp', position='Body'),
  zoneId?: string(name='ZoneId', description='The zone ID of the disk.', example='cn-wulanchabu-a', position='Body'),
}

model CreateVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='response message, if the success request is', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model CreateVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVccResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a Lingjun connection, note that:
  * *   When you specify the vccId parameter, the system will configure the purchased Lingjun connection for you. When the default vccId parameter is set, the system will automatically place an order and configure the Lingjun connection for you.
  * *   Make sure that you have called the InitializeVcc operation to grant permissions.
  * *   This interface is an asynchronous interface. After this interface is called, the system will return the Lingjun connection ID, but the Lingjun connection instance may not be created yet, and the system background creation task is still in progress. You can call the ListVccs or GetVcc operation to query the status of the Lingjun connection.
  *     *   If the status of the Lingjun connection is Executed, the Lingjun connection is being created.
  *     *   If the status of the Lingjun connection is Available, the Lingjun connection is created.
  * @param request  the request parameters of CreateVcc  CreateVccRequest
  * @return CreateVccResponse
 */
async function createVcc(request: CreateVccRequest): CreateVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVcc', 'POST', '/', 'json', true, 'form', request);
}

model CreateVccGrantRuleRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  grantTenantId: string(name='GrantTenantId', description='Authorized Tenant ID

This parameter is required.', example='1620939556166277', position='Body'),
  instanceId: string(name='InstanceId', description='Network Instance ID

This parameter is required.', example='vcc-8rgvqazb', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model CreateVccGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial. This parameter is returned only if Resource Access Management (RAM) permission verification failed.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    grantRuleId?: string(name='GrantRuleId', description='Authorized resource primary key ID', example='grant-rule-8rgvqazb'),
  }(name='Content', description='The response parameters.', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model CreateVccGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVccGrantRuleResponseBody(name='body'),
}

/**
  * @description When you call this operation to create cross-account authorization for Lingjun HUB, note that:
  * *   Make sure that the Alibaba Cloud ID and Lingjun HUB instance that you want to authorize are correct.
  * *   If you authorize the account of the other party, the account of the other party can load your local network instance to its Lingjun HUB, and the other party\\"s network will be connected to your network. Please proceed with caution.
  * @param request  the request parameters of CreateVccGrantRule  CreateVccGrantRuleRequest
  * @return CreateVccGrantRuleResponse
 */
async function createVccGrantRule(request: CreateVccGrantRuleRequest): CreateVccGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVccGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateVccRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='192.168.98.112/28', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001', position='Body'),
}

model CreateVccRouteEntryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vccRouteEntryId?: string(name='VccRouteEntryId', description='The ID of the route entry.', example='vcc-rte-5cey1sap'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model CreateVccRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVccRouteEntryResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a VBR route entry, take note of the following items:
  * *   After you call this operation, static route entries and BGP network announcements are created on the VBR to which the Lingjun connection belongs.
  * *   This operation is an asynchronous operation. After you call this operation, the VBR static route entry may not be created yet, and the system still creates the static route entry in the background. You can query the status of VBR static route entries by ListVccRouteEntries or GetVccRouteEntry:
  *     *   If the VBR static route entry is in the Executing state, it indicates that it is being created.
  *     *   If the status of the VBR static route entry is Available, the VBR is created.
  * @param request  the request parameters of CreateVccRouteEntry  CreateVccRouteEntryRequest
  * @return CreateVccRouteEntryResponse
 */
async function createVccRouteEntry(request: CreateVccRouteEntryRequest): CreateVccRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVccRouteEntry', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpdRequest {
  cidr: string(name='Cidr', description='The CIDR block of the VPD.

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD.

This parameter is required.', example='10.0.0.0/8', position='Body'),
  regionId: string(name='RegionId', description='The region ID of the disk.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aek2l4sq6l7unhi', position='Body'),
  subnets?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block of the Subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.', example='10.1.0.0/16'),
      regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-wulanchabu'),
      subnetName?: string(name='SubnetName', description='Lingjun subnet instance name', example='subnet-1'),
      type?: string(name='Type', description='Lingjun Subnet Usage Type; optional; optional. Valid values:

*   **Generic type is not specified**.
*   **OOB** :OOB type
*   **LB**: LB type', example='OOB'),
      zoneId?: string(name='ZoneId', description='The zone ID of the disk.', example='cn-wulanchabu-b'),
    }
  ](name='Subnets', description='Lingjun subnet information list', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='vpd-wulanchabu'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each tag key corresponds to a tag value. You can enter a maximum of 20 tag values at a time.', example='wulanchabu-a'),
    }
  ](name='Tag', description='A tag.', position='Body'),
  vpdName: string(name='VpdName', description='Lingjun CIDR block instance name

This parameter is required.', example='vpd-1', position='Body'),
}

model CreateVpdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    subnetIds?: [ string ](name='SubnetIds', description='Lingjun subnet ID list'),
    vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-eoiy88ju'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The request ID.', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateVpdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpdResponseBody(name='body'),
}

/**
  * @description When you call this operation to create a CIDR block for Lingjun, take note of the following:
  * *   A Lingjun network segment can specify an additional network segment in addition to a main network segment.
  * *   After the Lingjun network segment is created, the network segment cannot be modified.
  * *   Make sure that you have a sufficient quota of Lingjun CIDR blocks.
  * *   This interface is an asynchronous interface. After calling this interface, the system will return the ID of a Lingjun network segment. At this time, the Lingjun network segment may not be created yet, and the system background creation task is still in progress. You can call the ListVpds or GetVpd operation to query the status of the CIDR block of Lingjun.
  *     *   If the status of the Lingjun CIDR block is Executed, the CIDR block is being created.
  *     *   If the status of the Lingjun CIDR block is Available, the creation is successful.
  * @param request  the request parameters of CreateVpd  CreateVpdRequest
  * @return CreateVpdResponse
 */
async function createVpd(request: CreateVpdRequest): CreateVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpd', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpdGrantRuleRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  grantTenantId: string(name='GrantTenantId', description='Authorized Tenant ID

This parameter is required.', example='1013666993027780', position='Body'),
  instanceId: string(name='InstanceId', description='Network Instance ID

This parameter is required.', example='vpd-8rgvqazb', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model CreateVpdGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    grantRuleId?: string(name='GrantRuleId', description='Authorized resource primary key ID', example='grant-rule-hnevjkmw'),
  }(name='Content', description='The response parameters.', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateVpdGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpdGrantRuleResponseBody(name='body'),
}

/**
  * @description When you call this operation to create cross-account authorization for Lingjun HUB, note that:
  * *   Make sure that the Alibaba Cloud ID and Lingjun HUB instance that you want to authorize are correct.
  * *   If you authorize the account of the other party, the account of the other party can load your local network instance to its Lingjun HUB, and the other party\\"s network will be connected to your network. Please proceed with caution.
  * @param request  the request parameters of CreateVpdGrantRule  CreateVpdGrantRuleRequest
  * @return CreateVpdGrantRuleResponse
 */
async function createVpdGrantRule(request: CreateVpdGrantRuleRequest): CreateVpdGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpdGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteElasticNetworkInterfaceRequest {
  clientToken?: string(name='ClientToken', description='By default, popApi is not ignored and idempotent', example='141cccd6-dfbd-11ec-b8e8-0242ac110003', position='Body'),
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID

This parameter is required.', example='leni-1234****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
    nodeId?: string(name='NodeId', description='Lingjun Node ID', example='e01-cn-lbj3aej****'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The return message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteElasticNetworkInterface  DeleteElasticNetworkInterfaceRequest
  * @return DeleteElasticNetworkInterfaceResponse
 */
async function deleteElasticNetworkInterface(request: DeleteElasticNetworkInterfaceRequest): DeleteElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model DeleteErRequest {
  erId: string(name='ErId', description='Lingjun HUB Instance ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteErResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model DeleteErResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteErResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete the Lingjun HUB, note that:
  * *   Before you delete the instance, make sure that no network instance is connected to the Lingjun HUB instance.
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   This interface is an asynchronous interface. After this interface is called, the Lingjun HUB instance may not be deleted, and the system background deletion task is still in progress. You can call the ListErs or GetEr operation to query the deletion status of the Lingjun HUB.
  *     *   If the status of the Lingjun HUB is Deleting, the Lingjun HUB instance is being deleted.
  *     *   If no Lingjun HUB instance is recorded, the Lingjun HUB instance has been deleted.
  * @param request  the request parameters of DeleteEr  DeleteErRequest
  * @return DeleteErResponse
 */
async function deleteEr(request: DeleteErRequest): DeleteErResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEr', 'POST', '/', 'json', true, 'form', request);
}

model DeleteErAttachmentRequest {
  erAttachmentId: string(name='ErAttachmentId', description='The ID of the network connection instance.

This parameter is required.', example='er-attachment-5n3nsmvl', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB Id

This parameter is required.', example='er-opy1wrfv', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteErAttachmentResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='访问被拒绝的详细原因。', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='The response content. If a resource has dependent resources, the existing dependent resources are returned.', example='{
    "ER_RMAP": [
        {
            "erId": "er-opy1wrfv",
            "destinationCidrBlock": "0.0.0.0/0",
            "regionId": "cn-wulanchabu",
            "routeMapNum": 3000,
            "erRouteMapId": "er-rmap-v5lfhmvm",
            "action": "permit",
            "status": "Available"
        },
        {
            "erId": "er-opy1wrfv",
            "destinationCidrBlock": "0.0.0.0/0",
            "regionId": "cn-wulanchabu",
            "routeMapNum": 3000,
            "erRouteMapId": "er-rmap-of3r0ndh",
            "action": "permit",
            "status": "Available"
        }
    ]
}'),
  message?: string(name='Message', description='response message, if the success request is', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model DeleteErAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteErAttachmentResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete a network instance connection, take note of the following:
  * *   Before you delete the instance, make sure that no routing policy exists under the network instance connection instance.
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   This operation is an asynchronous operation. After you call this operation, the network instance that is connected to the instance may not be deleted. The system still deletes the instance in the background. You can call the ListErAttachments or GetErAttachment to query the deletion status of network instance connections:
  *     *   If the status of the network instance connection is Deleting, the network instance connection is being deleted.
  *     *   If there is no connection record for the network instance, the connection to the network instance has been deleted.
  * @param request  the request parameters of DeleteErAttachment  DeleteErAttachmentRequest
  * @return DeleteErAttachmentResponse
 */
async function deleteErAttachment(request: DeleteErAttachmentRequest): DeleteErAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteErAttachment', 'POST', '/', 'json', true, 'form', request);
}

model DeleteErRouteMapRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erRouteMapIds: [ string ](name='ErRouteMapIds', description='routing policy Instance ID List

This parameter is required.', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteErRouteMapResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model DeleteErRouteMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteErRouteMapResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete a routing policy, note that:
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   This interface is an asynchronous interface. After this interface is called, the routing policy instance may not be deleted yet, and the system background deletion task is still in progress. You can call the ListErRouteMaps or GetErRouteMap operation to query the deletion status of a routing policy.
  *     *   If the routing policy is in the Deleting state, the routing policy instance is being deleted.
  *     *   If no routing policy instance is recorded, the routing policy instance has been deleted.
  * @param request  the request parameters of DeleteErRouteMap  DeleteErRouteMapRequest
  * @return DeleteErRouteMapResponse
 */
async function deleteErRouteMap(request: DeleteErRouteMapRequest): DeleteErRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteErRouteMap', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSubnetRequest {
  regionId: string(name='RegionId', description='The region ID of the disk.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  subnetId: string(name='SubnetId', description='Lingjun subnet ID

This parameter is required.', example='subnet-f3zfzmnc', position='Body'),
  vpdId: string(name='VpdId', description='Lingjun CIDR block ID

This parameter is required.', example='vpd-iv2zm1qf', position='Body'),
  zoneId: string(name='ZoneId', description='Zone

This parameter is required.', example='cn-wulanchabu-b', position='Body'),
}

model DeleteSubnetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response content (if the resource has dependent resources, the existing dependent resources will be returned)', example='{
      "nc": [
            {}
      ]
}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID, which is used to locate and troubleshoot issues.', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model DeleteSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubnetResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete a Lingjun subnet, note that:
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   This interface is an asynchronous interface. After this interface is called, the Lingjun subnet instance may not be deleted, and the system background deletion task is still in progress. You can call the ListSubnets or GetSubnet operation to query the deletion status of the subnet.
  *     *   If the status of the Lingjun subnet is Deleting, the Lingjun subnet instance is being deleted.
  *     *   If there is no record of the Lingjun subnet instance, the Lingjun subnet instance has been deleted.
  * @param request  the request parameters of DeleteSubnet  DeleteSubnetRequest
  * @return DeleteSubnetResponse
 */
async function deleteSubnet(request: DeleteSubnetRequest): DeleteSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubnet', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVccGrantRuleRequest {
  erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne', position='Body'),
  grantRuleId: string(name='GrantRuleId', description='Authorization Entry ID

This parameter is required.', example='grant-rule-jaj34d75h01', position='Body'),
  instanceId?: string(name='InstanceId', description='Network Instance ID', example='vcc-cn-jaj34d75h01', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteVccGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.

>  This parameter is returned only if Resource Access Management (RAM) permission verification failed.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteVccGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVccGrantRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVccGrantRule  DeleteVccGrantRuleRequest
  * @return DeleteVccGrantRuleResponse
 */
async function deleteVccGrantRule(request: DeleteVccGrantRuleRequest): DeleteVccGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVccGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVccRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='172.16.199.128/25', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001', position='Body'),
  vccRouteEntryId?: string(name='VccRouteEntryId', description='The ID of the route entry.', example='vcc-rte-5cey1sap', position='Body'),
}

model DeleteVccRouteEntryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='{}'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model DeleteVccRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVccRouteEntryResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete a VBR static route entry, note that:
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   This operation is an asynchronous operation. After you call this operation, the VBR static route entries may not be deleted. The system still deletes the VBR static route entries in the background. You can call the ListVccRouteEntries or GetVccRouteEntry to query the deletion status of VBR static route entries:
  *     *   If the VBR static route entry is in the Deleting state, the VBR static route entry is being deleted.
  *     *   If no VBR static route entry instance is recorded, the VBR static route entry instance has been deleted.
  * @param request  the request parameters of DeleteVccRouteEntry  DeleteVccRouteEntryRequest
  * @return DeleteVccRouteEntryResponse
 */
async function deleteVccRouteEntry(request: DeleteVccRouteEntryRequest): DeleteVccRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVccRouteEntry', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVpdRequest {
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides.

This parameter is required.', example='cn-hangzhou', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the Lingjun CIDR block.

This parameter is required.', example='vpd-zr0farea', position='Body'),
}

model DeleteVpdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='The response parameters. (If a dependent resource exists, the existing dependent resource is returned.)', example='{
      "subnet": [
            {
                  "tenantId": "1620939556166277",
                  "regionId": "cn-wulanchabu",
                  "zoneId": "cn",
                  "type": null,
                  "subnetId": "subnet-zqebaxa0",
                  "name": "lql_testVPD"
            }
      ],
      "nc": [
            {}
      ]
}'),
  message?: string(name='Message', description='The response message.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The request ID.', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteVpdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpdResponseBody(name='body'),
}

/**
  * @description When you call this operation to delete a Lingjun CIDR block, take note of the following items:
  * *   After deletion, all related data is lost and cannot be recovered. Exercise caution when performing this operation.
  * *   Before deleting, make sure that all Lingjun subnet instances under the Lingjun CIDR block have been deleted.
  * *   This interface is an asynchronous interface. After this interface is called, the Lingjun network segment instance may not be deleted, and the system background deletion task is still in progress. You can call the ListVpds or GetVpd operation to query the deletion status of the CIDR block.
  *     *   If the status of the Lingjun CIDR block is Deleting, the Lingjun CIDR block is being deleted.
  *     *   If there is no record of the Lingjun CIDR block instance, the Lingjun CIDR block instance has been deleted.
  * @param request  the request parameters of DeleteVpd  DeleteVpdRequest
  * @return DeleteVpdResponse
 */
async function deleteVpd(request: DeleteVpdRequest): DeleteVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpd', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVpdGrantRuleRequest {
  erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne', position='Body'),
  grantRuleId: string(name='GrantRuleId', description='Authorization Entry ID

This parameter is required.', example='grant-rule-9rgxqazb', position='Body'),
  grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1013666993027780', position='Body'),
  instanceId?: string(name='InstanceId', description='Network Instance ID', example='vpd-8rgvqazb', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DeleteVpdGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='Response body', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model DeleteVpdGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpdGrantRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVpdGrantRule  DeleteVpdGrantRuleRequest
  * @return DeleteVpdGrantRuleResponse
 */
async function deleteVpdGrantRule(request: DeleteVpdGrantRuleRequest): DeleteVpdGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpdGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSlrRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the RAM instance belongs.', example='rg-aeky5f3qx6ceapq', position='Body'),
}

model DescribeSlrResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The information about the request denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    hasRole?: boolean(name='HasRole', description='Whether the role exists', example='true'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model DescribeSlrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlrResponseBody(name='body'),
}

/**
  * @description You can call this operation to query whether a user account has a **AliyunServiceRoleForEfloVcc** role.
  * >  If you do not have a **AliyunServiceRoleForEfloVcc** role, you need to use the initializeVcc interface to complete authorization, otherwise users will not be able to use Lingjun to connect to the product.
  * @param request  the request parameters of DescribeSlr  DescribeSlrRequest
  * @return DescribeSlrResponse
 */
async function describeSlr(request: DescribeSlrRequest): DescribeSlrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlr', 'POST', '/', 'json', true, 'form', request);
}

model DetachElasticNetworkInterfaceRequest {
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='leni-1234****', position='Body'),
  nodeId: string(name='NodeId', description='The ID of the node.

This parameter is required.', example='e01-cn-zxu2zp3****', position='Body'),
  regionId: string(name='RegionId', description='The region ID of the disk.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model DetachElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed reason why the access was denied.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  message?: string(name='Message', description='Response', example='You don\\"t have the permission to do this operation.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF8****'),
}

model DetachElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @description This interface is an asynchronous interface, and you need to use the query interface to wait for the Lingjun Elastic Network Interface to reach the unbound state.
  * @param request  the request parameters of DetachElasticNetworkInterface  DetachElasticNetworkInterfaceRequest
  * @return DetachElasticNetworkInterfaceResponse
 */
async function detachElasticNetworkInterface(request: DetachElasticNetworkInterfaceRequest): DetachElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model GetDestinationCidrBlockRequest {
  instanceId: string(name='InstanceId', description='Instance ID

This parameter is required.', example='vpd-xxxxxxxxx', position='Body'),
  regionId: string(name='RegionId', description='Region ID

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetDestinationCidrBlockResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code', example='0'),
  content?: {
    destinationCidrBlock?: [ string ](name='DestinationCidrBlock', description='List of destination CIDR block information for the current network instance'),
  }(name='Content', description='Response content'),
  message?: string(name='Message', description='Error message. (Indicates the reason for the anomaly when the instance status is abnormal.)', example='success'),
  requestId?: string(name='RequestId', description='ID of this request', example='D349EE86-AF3F-5F6C-87E2-2A08D3618350'),
}

model GetDestinationCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDestinationCidrBlockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDestinationCidrBlock  GetDestinationCidrBlockRequest
  * @return GetDestinationCidrBlockResponse
 */
async function getDestinationCidrBlock(request: GetDestinationCidrBlockRequest): GetDestinationCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDestinationCidrBlock', 'POST', '/', 'json', true, 'form', request);
}

model GetElasticNetworkInterfaceRequest {
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID

This parameter is required.', example='leni-1234****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='2022-01-13 12:51:41'),
    description?: string(name='Description', description='The instance description.', example='terraform-example'),
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
    enableJumboFrame?: boolean(name='EnableJumboFrame', description='Whether to enable the jumboFrame capability', example='True'),
    gateway?: string(name='Gateway', description='vswitch gateway address', example='172.16.****'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='2022-01-13 12:51:41'),
    ip?: string(name='Ip', description='Elastic Network Interface IP', example='203.107.****'),
    ipv6Addresses?: [ 
      {
        description?: string(name='Description', description='The instance description.', example='Description'),
        elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='1585816811000'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1549012834000'),
        ipName?: string(name='IpName', description='IPV6 unique identifier', example='sip-sg3xabeq'),
        ipv6Address?: string(name='Ipv6Address', description='IPV6 address', example='2408:4005:3aa:1000:470d:66fb:56a5:****'),
        message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
      }
    ](name='Ipv6Addresses', description='IPV6 address'),
    mac?: string(name='Mac', description='mac address', example='00:22:6D:97:**:**'),
    mask?: string(name='Mask', description='vswitch mask bits', example='24'),
    message?: string(name='Message', description='The error message.', example='success'),
    nodeId?: string(name='NodeId', description='Lingjun Node ID', example='e01-cn-lbj3aej****'),
    privateIpAddresses?: [ 
      {
        description?: string(name='Description', description='The instance description.', example='Description'),
        elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='1672971789000'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1672971789000'),
        ipName?: string(name='IpName', description='Lingjun Elastic Network Interface Secondary Private IP Unique Identifier', example='sip-ywz****'),
        message?: string(name='Message', description='The returned message.', example='Successful'),
        privateIpAddress?: string(name='PrivateIpAddress', description='Lingjun Elastic Network Interface secondary private IP address', example='172.16.****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
      }
    ](name='PrivateIpAddresses', description='Secondary private IP address'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-0jl5s4p4laalruk7****'),
    status?: string(name='Status', description='The state of the private gateway.

Valid value:

*   Create Failed: the creation failure.
*   Delete Failed: the that failed to be deleted.
*   Executing
*   Available
*   Deleting', example='Available'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    type?: string(name='Type', description='NIC Type

Valid value:

*   CUSTOM: custom type.
*   DEFAULT: system type.', example='DEFAULT'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6u8473r84e9****'),
    vpcId?: string(name='VpcId', description='VPC ID', example='vpc-j6ctp4n75306****'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The return message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model GetElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetElasticNetworkInterface  GetElasticNetworkInterfaceRequest
  * @return GetElasticNetworkInterfaceResponse
 */
async function getElasticNetworkInterface(request: GetElasticNetworkInterfaceRequest): GetElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model GetErRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetErResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1644283112720'),
    description?: string(name='Description', description='Description', example='test'),
    erAttachments?: [ 
      {
        across?: boolean(name='Across', description='Cross-account', example='false'),
        autoReceiveAllRoute?: boolean(name='AutoReceiveAllRoute', description='Receive all routes automatically', example='true'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1644283112720'),
        erAttachmentId?: string(name='ErAttachmentId', description='The connection ID of the Lingjun HUB network instance.', example='er-attachment-f32hxfsu'),
        erAttachmentName?: string(name='ErAttachmentName', description='Network Instance Name', example='fudan-egpu'),
        erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-kkopgtne'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1649303733000'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='vpd-kkopgtne'),
        instanceName?: string(name='InstanceName', description='The name of the ECU.', example='zhijiao'),
        instanceType?: string(name='InstanceType', description='Instance type: VPD and VCC

Valid value:

*   VCC: Lingjun Connection.
*   VPD: Lingjun network segment.', example='VPD'),
        message?: string(name='Message', description='The returned message.', example='success'),
        regionId?: string(name='RegionId', description='The synchronized region where the ECS instances are deployed.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmzzka6bnjvbi'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='xxxxxxxx'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166277'),
      }
    ](name='ErAttachments', description='Network instance information list'),
    erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-aueyxxsy'),
    erName?: string(name='ErName', description='Lingjun HUB Instance Name', example='er-heyuan-main'),
    erRouteEntrys?: [ 
      {
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='10.0.0.0/9'),
        erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-kkopgtne'),
        erRouteEntryId?: string(name='ErRouteEntryId', description='The ID of the route entry.', example='er-rte-xnmsd2kl'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1623317089000'),
        nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-xxkmggkw'),
        nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmyoj5mg3w54y'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1620939556166277'),
        routeType?: string(name='RouteType', description='Route type', example='System'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166277'),
      }
    ](name='ErRouteEntrys', description='The list of route entry information.'),
    erRouteMaps?: [ 
      {
        action?: string(name='Action', description='Policy behavior

Valid value:

*   deny: rejects the.
*   permit: The allows.', example='permit'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1645766599809'),
        description?: string(name='Description', description='Policy description', example='test'),
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='10.0.0.0/8'),
        erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne'),
        erRouteMapId?: string(name='ErRouteMapId', description='routing policy ID', example='er-rmap-xkslnmsr'),
        erRouteMapName?: string(name='ErRouteMapName', description='The name of the routing policy.', example='route-map-name'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1623899444000'),
        message?: string(name='Message', description='The message that is returned.', example='success'),
        receptionInstanceId?: string(name='ReceptionInstanceId', description='The ID of the destination instance.', example='vpd-sdkd2gkx'),
        receptionInstanceName?: string(name='ReceptionInstanceName', description='The name of the destination instance.', example='Reception-name'),
        receptionInstanceOwner?: string(name='ReceptionInstanceOwner', description='The tenant to which the destination instance belongs.', example='1620939556166277'),
        receptionInstanceType?: string(name='ReceptionInstanceType', description='The type of the destination instance.', example='VPD'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmzaq3ypaqkdy'),
        routeMapNum?: int32(name='RouteMapNum', description='Policy sequence number (1001-2000)', example='1001'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='XXQGPROD-zh_CN'),
        transmissionInstanceId?: string(name='TransmissionInstanceId', description='The ID of the source instance.', example='vpd-xmglsymg'),
        transmissionInstanceName?: string(name='TransmissionInstanceName', description='Source instance name', example='test-transmission'),
        transmissionInstanceOwner?: string(name='TransmissionInstanceOwner', description='The tenant to which the source instance belongs.', example='1620939556166277'),
        transmissionInstanceType?: string(name='TransmissionInstanceType', description='The type of the source instance.', example='VPD'),
      }
    ](name='ErRouteMaps', description='routing policy information list'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1627545952000'),
    masterZoneId?: string(name='MasterZoneId', description='Primary Zone', example='cn-wulanchabu-b'),
    message?: string(name='Message', description='The message that is returned.', example='success'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzlki4ehfse4y'),
    status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166277'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='Information returned when the call fails', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='308DE9D2-03A6-5B44-A369-67B75D1EE091'),
}

model GetErResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEr  GetErRequest
  * @return GetErResponse
 */
async function getEr(request: GetErRequest): GetErResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEr', 'POST', '/', 'json', true, 'form', request);
}

model GetErAttachmentRequest {
  erAttachmentId: string(name='ErAttachmentId', description='The ID of the Lingjun HUB network connection instance.

This parameter is required.', example='er-attachment-i1ioibyf', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID.

This parameter is required.', example='er-kkopgtne', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetErAttachmentResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    across?: boolean(name='Across', description='Whether cross-account. Valid values:

*   **true**: The network instance is a cross-account resource.
*   **false**: The current network instance is a resource of the current account.', example='fasle'),
    autoReceiveAllRoute?: boolean(name='AutoReceiveAllRoute', description='Indicates whether to automatically receive all routes from all instances under the Lingjun HUB. Valid values:

*   **true**: received automatically.
*   **false**: Not received.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1648085472000'),
    erAttachmentId?: string(name='ErAttachmentId', description='The ID of the Lingjun HUB network instance.', example='er-attachment-i1ioibyf'),
    erAttachmentName?: string(name='ErAttachmentName', description='The name of the Lingjun HUB network instance.', example='vpd-lxnsj2cx'),
    erId?: string(name='ErId', description='The ID of the Lingjun HUB instance.', example='er-aueyxxsy'),
    gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1648085472000'),
    instanceId?: string(name='InstanceId', description='The ID of the network instance. Valid values: **VPD** and **VCC**.

For more information, see [What is Lingjun?](https://help.aliyun.com/document_detail/444430.html)

You can query **Lingjun CIDR blocks** and **Lingjun connections** by [ListVpds](https://help.aliyun.com/document_detail/2331077.html) and [ListVccs](https://help.aliyun.com/document_detail/2399526.html?) respectively.', example='vpd-lxnsj2cx'),
    instanceName?: string(name='InstanceName', description='The instance name.', example='vpd-wulanchabu-main'),
    instanceType?: string(name='InstanceType', description='The database type. Valid values:

*   **VPD**: indicates the Lingjun CIDR block.
*   **VCC**: indicates a Lingjun connection.', example='VPD'),
    message?: string(name='Message', description='The returned message.', example='test'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzb3n5lgk2ieq'),
    resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1620939556166277'),
    status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **Available**: Normal.
*   **Not Available**: Not available.
*   **Executing**: The task is being executed.
*   **Deleting**: The account is being deleted', example='Available'),
    tenantId?: string(name='TenantId', description='The tenant ID.', example='1655449505171'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is displayed.)', example='You don\\"t have the permission to do this operation.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7F0D9440-1F97-5613-87CD-D3047172A93C'),
}

model GetErAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErAttachmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetErAttachment  GetErAttachmentRequest
  * @return GetErAttachmentResponse
 */
async function getErAttachment(request: GetErAttachmentRequest): GetErAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetErAttachment', 'POST', '/', 'json', true, 'form', request);
}

model GetErRouteEntryRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erRouteEntryId: string(name='ErRouteEntryId', description='The ID of the route entry.

This parameter is required.', example='er-rte-4q0jbylz', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetErRouteEntryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='{}'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='11.0.0.0/16'),
    erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-aueyxxsy'),
    erRouteEntryId?: string(name='ErRouteEntryId', description='The ID of the route entry.', example='er-rte-4q0jbylz'),
    gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1666677783000'),
    nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-209300qha01'),
    nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzb3n5lgk2ieq'),
    routeType?: string(name='RouteType', description='Route type', example='System'),
    status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='code: 400, Request was denied due to request throttling. request id: 7D177459-C1CF-5690-BB23-321D208B37D5'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='1F38A2E6-CB47-5369-95D2-96D0C287B4A5'),
}

model GetErRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErRouteEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetErRouteEntry  GetErRouteEntryRequest
  * @return GetErRouteEntryResponse
 */
async function getErRouteEntry(request: GetErRouteEntryRequest): GetErRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetErRouteEntry', 'POST', '/', 'json', true, 'form', request);
}

model GetErRouteMapRequest {
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erRouteMapId: string(name='ErRouteMapId', description='routing policy ID

This parameter is required.', example='er-rmap-uwglhzom', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
}

model GetErRouteMapResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    action?: string(name='Action', description='Policy behavior; optional values:

*   **permit**: Allow
*   **deny**: Rejected', example='permit'),
    description?: string(name='Description', description='Policy description', example='ssss'),
    destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='0.0.0.0/0'),
    erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne'),
    erRouteMapId?: string(name='ErRouteMapId', description='Lingjun HUB routing policy ID', example='er-rmap-uwglhzom'),
    erRouteMapName?: string(name='ErRouteMapName', description='Lingjun HUB routing policy Name', example='er-rmap-wulanchabu'),
    gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='1648085472000'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1648085472000'),
    message?: string(name='Message', description='The message that is returned.', example='success'),
    receptionInstanceId?: string(name='ReceptionInstanceId', description='Receive Instance ID', example='vpd-x25vxrb2'),
    receptionInstanceName?: string(name='ReceptionInstanceName', description='Receive Instance Name', example='vpd-receprion'),
    receptionInstanceOwner?: string(name='ReceptionInstanceOwner', description='The tenant to which the receiving instance belongs', example='1620939556166277'),
    receptionInstanceType?: string(name='ReceptionInstanceType', description='The type of the received instance. Optional values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzlki4ehfse4y'),
    routeMapNum?: int32(name='RouteMapNum', description='The ID of the policy.

A smaller sequence number indicates a lower priority. When a route is matched, a policy with a higher priority is preferentially matched.

**Valid values: 1001 to 2000**', example='1001'),
    status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **Available**
*   **Not Available**: Unavailable
*   **Executing**: Executing
*   **Deleting**: The node is being deleted.', example='Available'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
    transmissionInstanceId?: string(name='TransmissionInstanceId', description='Release Instance ID', example='vpd-xgkb2kl'),
    transmissionInstanceName?: string(name='TransmissionInstanceName', description='Release Instance Name', example='vpd-transimit'),
    transmissionInstanceOwner?: string(name='TransmissionInstanceOwner', description='The tenant to which the published instance belongs', example='1620939556166277'),
    transmissionInstanceType?: string(name='TransmissionInstanceType', description='Publish instance type; optional values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetErRouteMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErRouteMapResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetErRouteMap  GetErRouteMapRequest
  * @return GetErRouteMapResponse
 */
async function getErRouteMap(request: GetErRouteMapRequest): GetErRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetErRouteMap', 'POST', '/', 'json', true, 'form', request);
}

model GetFabricTopologyRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='i-169263721924****', position='Body'),
  lniIds?: [ string ](name='LniIds', description='Lingjun network interface controller ID List', position='Body'),
  nodeIds?: [ string ](name='NodeIds', description='Node ID list', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-k8i0g9fk68t7u0u2w****', position='Body'),
  vpdId?: string(name='VpdId', description='Lingjun CIDR block ID', example='vpd-aof7****', position='Body'),
}

model GetFabricTopologyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    topoInfo?: [ 
      {
        layerName?: string(name='LayerName', description='The resource name.', example='core-1'),
        layerType?: string(name='LayerType', description='Hierarchical resource types

Valid value:

*   core: core layer.
*   node: Lingjun node.
*   lni: lingjun network interface controller.
*   spine: backbone layer.
*   leaf: access layer', example='core'),
        nextLayer?: [ any ](name='NextLayer', description='Next Level'),
      }
    ](name='TopoInfo', description='network interface controller Topology Information'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-j6ctp4n75306****'),
    vpdId?: string(name='VpdId', description='Lingjun CIDR block ID', example='vpd-fuli****'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model GetFabricTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFabricTopologyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFabricTopology  GetFabricTopologyRequest
  * @return GetFabricTopologyResponse
 */
async function getFabricTopology(request: GetFabricTopologyRequest): GetFabricTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFabricTopology', 'POST', '/', 'json', true, 'form', request);
}

model GetLeniPrivateIpAddressRequest {
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.

This parameter is required.', example='leni-1234****', position='Body'),
  ipName: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.

This parameter is required.', example='sip-8ylg****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetLeniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    description?: string(name='Description', description='The description.', example='zhenyuan wdl workflow'),
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the activation code was created.', example='1663722356000'),
    gmtModified?: string(name='GmtModified', description='The time when the certificate was updated.', example='1635231890000'),
    ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-8ylg****'),
    message?: string(name='Message', description='The returned message.', example='message'),
    privateIpAddress?: string(name='PrivateIpAddress', description='Lingjun Elastic Network Interface secondary private IP address.', example='10.42.****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status', description='The task status.', example='Available'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model GetLeniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLeniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLeniPrivateIpAddress  GetLeniPrivateIpAddressRequest
  * @return GetLeniPrivateIpAddressResponse
 */
async function getLeniPrivateIpAddress(request: GetLeniPrivateIpAddressRequest): GetLeniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLeniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model GetLniPrivateIpAddressRequest {
  ipName: string(name='IpName', description='IP unique identifier

This parameter is required.', example='sip-xxxxx', position='Body'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID

This parameter is required.', example='lni-bp18exxqa2rvfn45e5pz', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetLniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    description?: string(name='Description', description='The instance description.', example='test'),
    gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='2022-12-26 20:16:36'),
    ipAddressMac?: string(name='IpAddressMac', description='MAC address of the secondary private network', example='00-ff-84-15-ba-67'),
    ipName?: string(name='IpName', description='IP unique identifier', example='sip-xxxxx'),
    message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission of this operation, action=eflo:ListVpdRouteEntries, arn=acs:eflo:cn-wulanchabu:1263399219805497:vpd_rte/*, resourceGroup=null'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID', example='lni-2ze4uww7n6hsfzrwq77y'),
    privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address of the Lingjun network interface controller.', example='10.42.5.92'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status', description='The state of the rule.', example='Available'),
    subnetId?: string(name='SubnetId', description='The subnet instance ID.', example='subnet-aj93mko8'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission of this operation, action=eflo:GetLniPrivateIpAddress, arn=acs:eflo:cn-wulanchabu:1382782317087063:networkinterface/00'),
  requestId?: string(name='RequestId', description='The request ID, which is used to locate and troubleshoot issues.', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model GetLniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLniPrivateIpAddress  GetLniPrivateIpAddressRequest
  * @return GetLniPrivateIpAddressResponse
 */
async function getLniPrivateIpAddress(request: GetLniPrivateIpAddressRequest): GetLniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model GetNetworkInterfaceRequest {
  networkInterfaceId: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID

This parameter is required.', example='lni-bp18exxqa2rvfn45e5pz', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  subnetId?: string(name='SubnetId', description='Subnet of Lingjun', example='subnet-f3zfzmnc', position='Body'),
}

model GetNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
    ethernet?: [ string ](name='Ethernet', description='Port'),
    gateway?: string(name='Gateway', description='Gateway', example='172.24.20.254'),
    ip?: string(name='Ip', description='The IP address of the BE cluster.', example='203.107.60.69'),
    ncType?: string(name='NcType', description='NC Type

Valid value:

*   CUSTOM_LNI_INTEGRATION: two-network one-in-one architecture Lingjun hosting network interface controller.
*   CPU: CPU machine.
*   ELASTIC_6.2: Machine
*   GPU: GPU machine.
*   DEFAULT: the old CPU machine.
*   CUSTOM_LNI: two network separation architecture Lingjun hosting network interface controller.', example='DEFAULT'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID', example='lni-f8z4scmfh0u4ewv6vdd8'),
    networkInterfaceName?: string(name='NetworkInterfaceName', description='ENI Name', example='bond0'),
    nodeId?: string(name='NodeId', description='The ID of the host.', example='masterintranett2fdth5fkoocg'),
    privateIpAddressMacGroup?: [ 
      {
        description?: string(name='Description', description='The instance description.', example='test'),
        ipAddressMac?: string(name='IpAddressMac', description='Secondary private MAC address', example='01-00-5e-00-00-16'),
        ipName?: string(name='IpName', description='IP unique identifier', example='sip-xxxx'),
        message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
        privateIpAddress?: string(name='PrivateIpAddress', description='Secondary private IP address', example='172.23.161.57'),
        status?: string(name='Status', description='The state of the rule.', example='Available'),
      }
    ](name='PrivateIpAddressMacGroup', description='Secondary Private IP\\&MAC Address Collection'),
    quota?: int32(name='Quota', description='network interface controller private secondary IP limit', example='0'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    serviceMac?: string(name='ServiceMac', description='Service network interface controller address', example='01-00-5e-00-00-16'),
    status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
    subnetBaseInfo?: {
      cidr?: string(name='Cidr', description='Network address segment', example='116.233.21.57/32'),
      createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
      subnetId?: string(name='SubnetId', description='The ID of the Subnet instance.', example='subnet-urb01blo'),
      subnetName?: string(name='SubnetName', description='The name of the Subnet instance.', example='subnet-1'),
    }(name='SubnetBaseInfo', description='Lingjun subnet (Subnet) basic information'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', description='The network segment of the Lingjun subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.

For more information about CIDR blocks, see the [What is CIDR?](https://www.alibabacloud.com/help/doc-detail/40637.htm#title-gu4-uzk-12r) section in the "Network FAQ" topic.

This parameter is left empty by default.', example='172.18.0.0/24'),
      createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
      vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-ppdunxzc'),
      vpdName?: string(name='VpdName', description='The name of the VPD instance.', example='vpd-1'),
    }(name='VpdBaseInfo', description='Basic information of Lingjun network segment (VPD)'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
  }(name='Content', description='The response data. (If a resource has dependent resources, the existing dependent resources are returned.)'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNetworkInterface  GetNetworkInterfaceRequest
  * @return GetNetworkInterfaceResponse
 */
async function getNetworkInterface(request: GetNetworkInterfaceRequest): GetNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model GetNodeInfoForPodRequest {
  nodeId: string(name='NodeId', description='The ID of the node for this operation.

This parameter is required.', example='node-be70****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetNodeInfoForPodResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the failed permission verification.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-****'),
    hdeniQuota?: int32(name='HdeniQuota', description='Lingjun Gaomi network interface controller quota', example='10'),
    leniQuota?: int32(name='LeniQuota', description='Lingjun Elastic Network Interface quota, including system type', example='10'),
    leniSipQuota?: int32(name='LeniSipQuota', description='Lingjun Elastic Network Interface Secondary Private IP Quota', example='10'),
    lniSipQuota?: int32(name='LniSipQuota', description='Lingjun network interface controller Secondary Private IP Quota', example='10'),
    nodeId?: string(name='NodeId', description='The ID of the node for this operation.', example='node-be70****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    vSwitches?: [ string ](name='VSwitches', description='List of VSwitches that can apply for IP addresses on this node'),
    vpcId?: string(name='VpcId', description='The ID of the Virtual Private Cloud to which the current node belongs.', example='vpc-j6ctp4n75306****'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
    hdeniIpv6SipQuota?: int32(name='hdeniIpv6SipQuota'),
    hdeniSipQuota?: int32(name='hdeniSipQuota'),
    leniIpv6SipQuota?: int32(name='leniIpv6SipQuota'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission of this operation, action=eflo:GetNodeInfoForPod, arn=acs:eflo:cn-wulanchabu:1111156667137893:networkinterface/*, resourceGroup=null'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model GetNodeInfoForPodResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeInfoForPodResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeInfoForPod  GetNodeInfoForPodRequest
  * @return GetNodeInfoForPodResponse
 */
async function getNodeInfoForPod(request: GetNodeInfoForPodRequest): GetNodeInfoForPodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeInfoForPod', 'POST', '/', 'json', true, 'form', request);
}

model GetSubnetRequest {
  regionId?: string(name='RegionId', description='The region ID of the data center.', example='cn-wulanchabu', position='Body'),
  subnetId: string(name='SubnetId', description='The ID of the Lingjun subnet instance.

This parameter is required.', example='subnet-2avf0itf', position='Body'),
  vpdId?: string(name='VpdId', description='The ID of the CIDR block to which Lingjun belongs.', example='vpd-cxcmdk1m', position='Body'),
}

model GetSubnetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    availableIps?: int32(name='AvailableIps', description='The number of available IP addresses.', example='1024'),
    cidr?: string(name='Cidr', description='The CIDR block of the Subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.', example='10.10.10.0/24'),
    createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1648085472000'),
    gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1678273219000'),
    lbCount?: long(name='LbCount', description='The number of SLB.', example='0'),
    message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='test example'),
    ncCount?: int32(name='NcCount', description='The number of NCs.', example='16'),
    networkInterfaceCount?: int32(name='NetworkInterfaceCount', description='Number of Lingjun network interface controller', example='4'),
    privateIpCount?: long(name='PrivateIpCount', description='The total number of secondary private IP addresses.', example='20'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.', example='rg-aek2l4sq6l7unhi'),
    status?: string(name='Status', description='The status of the cache reserve instance.', example='Available'),
    subnetId?: string(name='SubnetId', description='The ID of the Lingjun subnet instance.', example='subnet-aj93mko8'),
    subnetName?: string(name='SubnetName', description='The name of the Lingjun subnet instance.', example='subnet-1'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-subnet'),
        tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='subnet-group-1'),
      }
    ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
    tenantId?: string(name='TenantId', description='The tenant ID.', example='1655449505171'),
    type?: string(name='Type', description='Lingjun Subnet Usage Type; optional; optional. Valid values:

*   **Empty for common data types**
*   **OOB** :OOB type
*   **LB**: LB type', example='OOB'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', description='The CIDR block of the VPD.

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD.', example='10.0.0.0/8'),
      createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1678273219000'),
      vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-iv2zm1qf'),
      vpdName?: string(name='VpdName', description='The name of the Lingjun CIDR block.', example='vpd-1'),
    }(name='VpdBaseInfo', description='The information about the network segment of Lingjun.'),
    vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-ze3na0wf'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model GetSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubnetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubnet  GetSubnetRequest
  * @return GetSubnetResponse
 */
async function getSubnet(request: GetSubnetRequest): GetSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubnet', 'POST', '/', 'json', true, 'form', request);
}

model GetVccRequest {
  clientToken?: string(name='ClientToken', description='By default, popApi is not ignored and idempotent', example='c5e3130a-d02f-11ec-a7d3-0242ac110005', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Paging Parameters: The current parameters are obsolete.', example='false', position='Body'),
  pageNumber?: int32(name='PageNumber', description='Paging Parameters: The current parameters are obsolete.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='Paging Parameters: The current parameters are obsolete.', example='20', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  vccId: string(name='VccId', description='The ID of the Lingjun connection instance.

This parameter is required.', example='vcc-cn-zvp2w222001', position='Body'),
}

model GetVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    accessPointId?: string(name='AccessPointId', description='Express Connect circuit access point ID:

*   **ap-cn-wulanchabu-jn-ts-A**: Ulanqab-Jining-A
*   **ap-cn-heyuan-yc-ts-SA127**: Heyuan-Yuancheng-A', example='ap-cn-wulanchabu-jn-ts-A'),
    aliyunRouterInfo?: [ 
      {
        localGatewayIp?: string(name='LocalGatewayIp', description='IPv4 address of Alibaba Cloud-side interconnection', example='169.254.248.30'),
        mask?: string(name='Mask', description='Masking', example='255.255.255.248'),
        pcId?: string(name='PcId', description='Express Connect circuit ID', example='pc-0jlof4bphlsnxbdztkvad'),
        peerGatewayIp?: string(name='PeerGatewayIp', description='Lingjun Side Interconnection IPv4 Address', example='169.254.248.28'),
        vbrId?: string(name='VbrId', description='The ID of the VBR.', example='vbr-2ze4i85p6vb9nwcan5xt0'),
        vlanId?: string(name='VlanId', description='VLAN ID of the VBR', example='1042'),
      }
    ](name='AliyunRouterInfo', description='Alibaba Cloud route information list'),
    attachErStatus?: boolean(name='AttachErStatus', description='Whether Lingjun HUB has been bound to a network instance

*   **true**: Bound
*   **false**: unbound', example='true'),
    bandwidth?: int32(name='Bandwidth', description='bandwidth', example='20'),
    bandwidthStr?: string(name='BandwidthStr', description='The bandwidth of the port.', example='1G'),
    bgpAsn?: string(name='BgpAsn', description='BGP AS number', example='45644'),
    bgpCidr?: string(name='BgpCidr', description='BGP CIDR block', example='10.4.0.0/24'),
    cenId?: string(name='CenId', description='The ID of the CEN instance; [What is the CEN?](https://help.aliyun.com/document_detail/181681.html)

You can call the [DescribeCens](https://help.aliyun.com/document_detail/468215.htm) to query the information of CEN instances under the current Alibaba Cloud account.', example='cen-m2iskbojlvda5w65fp'),
    cenOwnerId?: string(name='CenOwnerId', description='Account to which the CEN belongs', example='1620939556166279'),
    cisRouterInfo?: [ 
      {
        ccInfos?: [ 
          {
            ccId?: string(name='CcId', description='Leased Line ID', example='cc-73aeex5o'),
            localGatewayIp?: string(name='LocalGatewayIp', description='Lingjun Side Interconnection IPv4 Address', example='169.254.248.26'),
            remoteGatewayIp?: string(name='RemoteGatewayIp', description='Lingjun Side Interconnection IPv4 Address', example='169.254.248.30'),
            status?: string(name='Status', description='The state of the rule.', example='Established'),
            subnetMask?: string(name='SubnetMask', description='Subnet mask', example='255.255.255.248'),
            vlanId?: string(name='VlanId', description='Vlan ID of the leased line', example='Ethernet1042'),
          }
        ](name='CcInfos', description='Leased Line Information List'),
        ccrId?: string(name='CcrId', description='The ID of the on-cloud router instance.', example='ccr-1ms84am0'),
      }
    ](name='CisRouterInfo', description='Lingjun Network Routing Information List'),
    commodityCode?: string(name='CommodityCode', description='Commodity code', example='bccluster_cloudconnectionpre_public_cn'),
    connectionType?: string(name='ConnectionType', description='The connection mode. Valid values:

*   **VPC**
*   **CENTR**', example='CENTR'),
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1648085472000'),
    currentNode?: string(name='CurrentNode', description='Current Node', example='task-xxx-node-x'),
    duration?: string(name='Duration', description='Cycle', example='1'),
    erInfos?: [ 
      {
        connections?: long(name='Connections', description='Connections', example='2'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678379917000'),
        description?: string(name='Description', description='Description', example='this is test.'),
        erId?: string(name='ErId', description='Lingjun HUB ID', example='er-p68b0jwn'),
        erName?: string(name='ErName', description='Lingjun HUB Instance Name', example='er-1'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1678379917000'),
        masterZoneId?: string(name='MasterZoneId', description='Primary Zone', example='cn-wulanchabu-b'),
        message?: string(name='Message', description='The message that is returned.', example='test message'),
        regionId?: string(name='RegionId', description='Lingjun HUB Region Information', example='cn-wulanchabu'),
        routeMaps?: long(name='RouteMaps', description='Number of routing policy', example='2'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166277'),
      }
    ](name='ErInfos', description='List of bound Lingjun HUB information'),
    expirationDate?: string(name='ExpirationDate', description='The time when the application expired.', example='1678379917000'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1648085472000'),
    internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage.

*   **PayByTraffic**: pay-by-traffic
*   **PayByBandwidth**: pay-by-bandwidth', example='PayByBandwidth'),
    lineOperator?: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CO**: other connectivity providers in the Chinese mainland', example='CO'),
    message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission of this operation, action=eflo:GetVcc, arn=acs:eflo:cn-heyuan:1263399219805497:vcc/vcc-cn-fhh3yxjwe01, resourceGroup=null'),
    payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **PREPAY**: subscription
*   **POSTPAY**: pay-as-you-go', example='PrePay'),
    portType?: string(name='PortType', description='The port type of the Express Connect circuit. Valid values:

*   **100GBase-LR**: 100,000 megabytes of single-mode optical port (10 km)', example='100GBase-LR'),
    pricingCycle?: string(name='PricingCycle', description='The billing cycle. Valid values:

*   **Month**: Billed on a monthly basis
*   **Year**: Billed on an annual basis', example='Month'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm).', example='rg-aek2l4sq6l7unhi'),
    spec?: string(name='Spec', description='Specification; value:

*   **Large**: Large', example='Large'),
    status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **Available**: Normal.
*   **Not Available**: Not available.
*   **Executing**: The task is being executed.
*   **Deleting**: The account is being deleted', example='Available'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vcc'),
        tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='vcc-group-1'),
      }
    ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166279'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. [Virtual Private Cloud VSwitch](https://help.aliyun.com/document_detail/100380.html).

You can call the [DescribeVSwitches](https://help.aliyun.com/document_detail/35748.html) operation to query created vSwitches.', example='vsw-uf6u8473r84e6n1n19he5'),
    vbrInfos?: [ 
      {
        cenId?: string(name='CenId', description='CEN ID', example='cen-cx0qua8q6cm4z9****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='1683250981000'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1673578603000'),
        status?: string(name='Status', description='The status of the VBR. Valid values:

*   unconfirmed
*   active: The VPN gateway is in a normal state.
*   terminating: The connection is being terminated.
*   terminated: The connection is terminated.
*   recovering: The task is being recovered.
*   deleting: The GDN is being deleted.
*   Available: The service is available.', example='Available'),
        vbrBgpPeers?: [ 
          {
            bgpGroupId?: string(name='BgpGroupId', description='BGP Group ID', example='bgpg-2ze2sit2vakrkapvy****'),
            bgpPeerId?: string(name='BgpPeerId', description='BGP peer ID', example='bgp-uf6heugif9enu48rj****'),
            peerAsn?: string(name='PeerAsn', description='Peer AS No.', example='98765****'),
            peerIpAddress?: string(name='PeerIpAddress', description='BGP peer IP address', example='169.254.****'),
            status?: string(name='Status', description='The status of the BGP peer. Valid values:

*   Pending: pending
*   Available: The route is available.
*   Modifying: being modified
*   Deleting: The IPv4 gateway is being deleted.
*   Deleted
*   Not Available', example='Available'),
          }
        ](name='VbrBgpPeers', description='BGP neighbor information list'),
        vbrId?: string(name='VbrId', description='The ID of the border router.', example='vbr-wz96agu9h3d50z****'),
      }
    ](name='VbrInfos', description='Information list of border routers'),
    vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-cqf2xh40101'),
    vccName?: string(name='VccName', description='The name of the Lingjun connection instance.', example='vcc-heyuan-backup'),
    vpcId?: string(name='VpcId', description='Virtual Private Cloud IDs; [What is Virtual Private Cloud](https://help.aliyun.com/document_detail/34217.html)

You can call the [DescribeVpcs](https://help.aliyun.com/document_detail/35739.html#demo-0) operation to query the specified VPC.', example='vpc-j6ctp4n75306phv5tmpsm'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', description='Network address segment', example='172.18.0.0/24'),
      createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678379917000'),
      vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-ppdunxzc'),
      vpdName?: string(name='VpdName', description='Lingjun CIDR block instance name', example='yzp-rg-test3'),
    }(name='VpdBaseInfo', description='Lingjun network segment information (applicable to the scene where the old version of Lingjun connection is directly bound to Lingjun network segment)'),
    vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-d3isyds4'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='CAD09E47-B651-5206-B2DC-3AB78C8EB446'),
}

model GetVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVccResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVcc  GetVccRequest
  * @return GetVccResponse
 */
async function getVcc(request: GetVccRequest): GetVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVcc', 'POST', '/', 'json', true, 'form', request);
}

model GetVccGrantRuleRequest {
  erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-aueyxxsy', position='Body'),
  grantRuleId: string(name='GrantRuleId', description='Authorized Resource Instance ID

This parameter is required.', example='grant-rule-jaj34d75h01', position='Body'),
  grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166277', position='Body'),
  instanceId?: string(name='InstanceId', description='Authorized Instance ID', example='vcc-cn-jaj34d75h01', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region. This parameter is required.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetVccGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1648085472000'),
    erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-aueyxxsy'),
    grantRuleId?: string(name='GrantRuleId', description='Authorized Resource ID', example='grant-rule-jaj34d75h01'),
    grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166277'),
    instanceId?: string(name='InstanceId', description='Network Instance ID', example='vcc-cn-jaj34d75h01'),
    instanceName?: string(name='InstanceName', description='Network Instance Name', example='vcc-1'),
    product?: string(name='Product', description='Network Product Code:

*   **VPD**: Lingjun CIDR block
*   **VCC**: Lingjun Connection', example='VCC'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166279'),
    used?: boolean(name='Used', description='Whether the current authorization information has been used; optional values:

*   **true**: Used
*   **false**: Not used', example='false'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model GetVccGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVccGrantRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVccGrantRule  GetVccGrantRuleRequest
  * @return GetVccGrantRuleResponse
 */
async function getVccGrantRule(request: GetVccGrantRuleRequest): GetVccGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVccGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model GetVccRouteEntryRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  vccId: string(name='VccId', description='Lingjun Connection ID

This parameter is required.', example='vcc-cn-zvp2w222001', position='Body'),
  vccRouteEntryId: string(name='VccRouteEntryId', description='The ID of the route entry.

This parameter is required.', example='vcc-rte-31ocvdhq', position='Body'),
}

model GetVccRouteEntryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='0.0.0.0/0'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1648085472000'),
    message?: string(name='Message', description='The message that is returned.', example='Successful'),
    nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='local'),
    nextHopType?: string(name='NextHopType', description='Next Hop Type', example='VCC'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7u***'),
    routeType?: string(name='RouteType', description='Route type', example='System'),
    status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
    vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001'),
    vccRouteEntryId?: string(name='VccRouteEntryId', description='The ID of the route entry.', example='vcc-rte-31ocvdhq'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model GetVccRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVccRouteEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVccRouteEntry  GetVccRouteEntryRequest
  * @return GetVccRouteEntryResponse
 */
async function getVccRouteEntry(request: GetVccRouteEntryRequest): GetVccRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVccRouteEntry', 'POST', '/', 'json', true, 'form', request);
}

model GetVpdRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the VPD instance.

This parameter is required.', example='vpd-ze3na0wf', position='Body'),
}

model GetVpdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    attachErStatus?: boolean(name='AttachErStatus', description='Whether the Lingjun HUB(ER) has been bound.

*   **true**: ER is bound.
*   **false**: No ER is bound.', example='true'),
    cidr?: string(name='Cidr', description='The CIDR block.', example='10.0.0.0/8'),
    createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1678273219000'),
    erInfos?: [ 
      {
        connections?: long(name='Connections', description='The number of connections.', example='2'),
        createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1678273219000'),
        description?: string(name='Description', description='The description of the synchronization task.', example='Restore verifying'),
        erId?: string(name='ErId', description='The ID of the Elastic Router (ER) instance.', example='er-a7rqv1rq'),
        erName?: string(name='ErName', description='Elastic Router (ER) Instance Name', example='er-1'),
        gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1678273219000'),
        masterZoneId?: string(name='MasterZoneId', description='The primary zone.', example='cn-wulanchabu-b'),
        message?: string(name='Message', description='The returned message.', example='success'),
        regionId?: string(name='RegionId', description='The ID of the region to which the Elastic Router (ER) belongs.', example='cn-wulanchabu'),
        routeMaps?: long(name='RouteMaps', description='The number of routing policy.', example='2'),
        status?: string(name='Status', description='The task status.', example='Available'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='t464p4fql1bog'),
      }
    ](name='ErInfos', description='The information of the bound Lingjun HUB(ER).'),
    gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='2023-10-25 15:57:16'),
    message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
    ncCount?: int32(name='NcCount', description='The number of NCs.', example='16'),
    networkInterfaceCount?: int32(name='NetworkInterfaceCount', description='Number of Lingjun network interface controller.', example='1'),
    privateIpCount?: long(name='PrivateIpCount', description='The total number of secondary private IP addresses.', example='10'),
    quota?: int32(name='Quota', description='The total quota information.', example='10'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aek2l4sq6l7unhi'),
    secondaryCidrBlocks?: [ string ](name='SecondaryCidrBlocks', description='The list of additional CIDR blocks.'),
    serviceCidr?: string(name='ServiceCidr', description='Internal Service CIDR block.', example='169.254.252.0/23'),
    status?: string(name='Status', description='The current state of the instance.

Valid value:

*   Not Available: Not Available.
*   Available: Normal: Available: Normal.
*   Deleting: Deleting: Deleting: Deleting.
*   Executing: executing: Executing: executing.', example='Available'),
    subnetCount?: long(name='SubnetCount', description='The number of subnets.', example='1'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-subent-region'),
        tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='cn-wulanchabu'),
      }
    ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
    tenantId?: string(name='TenantId', description='The tenant ID.', example='1620939556166279'),
    vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-fuliephf'),
    vpdName?: string(name='VpdName', description='The name of the Lingjun CIDR block.', example='vpd-1'),
  }(name='Content', description='The data returned.'),
  message?: string(name='Message', description='The additional information that is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetVpdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpd  GetVpdRequest
  * @return GetVpdResponse
 */
async function getVpd(request: GetVpdRequest): GetVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpd', 'POST', '/', 'json', true, 'form', request);
}

model GetVpdGrantRuleRequest {
  erId?: string(name='ErId', description='Lingjun HUB Instance Id', example='er-kkopgtne', position='Body'),
  grantRuleId: string(name='GrantRuleId', description='Authorized Resource Instance ID

This parameter is required.', example='grant-rule-xrgvqazb', position='Body'),
  grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166277', position='Body'),
  instanceId?: string(name='InstanceId', description='Authorized Instance ID', example='vpd-xxxxxxxx', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region. This parameter is required.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model GetVpdGrantRuleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1648085472000'),
    erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-kkopgtne'),
    grantRuleId?: string(name='GrantRuleId', description='Authorized Resource ID', example='grant-rule-xxxxxx'),
    grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166277'),
    instanceId?: string(name='InstanceId', description='Network Instance ID', example='vpd-xxxxxxxxxx'),
    instanceName?: string(name='InstanceName', description='Network Instance Name', example='vpd-lingjun'),
    product?: string(name='Product', description='Network Product Code:

*   **VPD**: Lingjun CIDR block
*   **VCC**: Lingjun Connection', example='VPD'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7u***'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
    used?: boolean(name='Used', description='Whether the current authorization information has been used; default is false', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model GetVpdGrantRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpdGrantRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpdGrantRule  GetVpdGrantRuleRequest
  * @return GetVpdGrantRuleResponse
 */
async function getVpdGrantRule(request: GetVpdGrantRuleRequest): GetVpdGrantRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpdGrantRule', 'POST', '/', 'json', true, 'form', request);
}

model GetVpdRouteEntryRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  vpdId: string(name='VpdId', description='Lingjun CIDR block instance ID

This parameter is required.', example='vpd-iv2zm1qf', position='Body'),
  vpdRouteEntryId: string(name='VpdRouteEntryId', description='The ID of the route entry instance.

This parameter is required.', example='vpd-rte-toekyqel', position='Body'),
}

model GetVpdRouteEntryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='0.0.0.0/0'),
    gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1678273219000'),
    nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='er-bmlqiym1'),
    nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='ER'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmv7mcq63uyhq'),
    routeType?: string(name='RouteType', description='Route type', example='BGP'),
    status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
    tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
    vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-ze3na0wf'),
    vpdRouteEntryId?: string(name='VpdRouteEntryId', description='Lingjun CIDR block route entry ID', example='vpd-rte-toekyqel'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model GetVpdRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpdRouteEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpdRouteEntry  GetVpdRouteEntryRequest
  * @return GetVpdRouteEntryResponse
 */
async function getVpdRouteEntry(request: GetVpdRouteEntryRequest): GetVpdRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpdRouteEntry', 'POST', '/', 'json', true, 'form', request);
}

model InitializeVccRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-acfmxhucx5ewuwy', position='Body'),
}

model InitializeVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    requestId?: string(name='RequestId', description='The request ID.', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
    roleName?: string(name='RoleName', description='Linked Role of Lingjun Connection Instance (AliyunServiceRoleForEfloVcc)', example='CloudConnectionOperationRole'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
}

model InitializeVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitializeVccResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitializeVcc  InitializeVccRequest
  * @return InitializeVccResponse
 */
async function initializeVcc(request: InitializeVccRequest): InitializeVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeVcc', 'POST', '/', 'json', true, 'form', request);
}

model ListElasticNetworkInterfacesRequest {
  elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****', position='Body'),
  ip?: string(name='Ip', description='The IP address of the BE cluster.', example='10.0.0.1', position='Body'),
  networkType?: string(name='NetworkType', description='The network type.

Valid value:

*   Tenant: Tenant.
*   VPC', example='tenant', position='Body'),
  nodeId?: string(name='NodeId', description='The ID of the node.', example='e01-cn-lbj3aej****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='10', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  status?: string(name='Status', description='The status of the enterprise-level snapshot policy.

Valid value:

*   Create Failed: the creation failure.
*   Delete Failed: the that failed to be deleted.
*   Executing
*   Available: The template is available.
*   Deleting', example='Available', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Body'),
  type?: string(name='Type', description='The type of the variable.

Valid value:

*   CUSTOM: custom type.
*   DEFAULT: system type.', example='DEFAULT', position='Body'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-uf6u8473r84e9****', position='Body'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-uf6aa4ddo97fr****', position='Body'),
  zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b', position='Body'),
}

model ListElasticNetworkInterfacesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1601176751000'),
        description?: string(name='Description', description='The instance description.', example='No description'),
        elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
        gateway?: string(name='Gateway', description='vswitch gateway address', example='172.16.****'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1640187007000'),
        ip?: string(name='Ip', description='The IP address of the BE cluster.', example='10.0.0.13'),
        mac?: string(name='Mac', description='mac address', example='E0:01:A6:4A:6A:D0'),
        mask?: string(name='Mask', description='vswitch mask bits', example='24'),
        message?: string(name='Message', description='The error message.', example='success'),
        nodeId?: string(name='NodeId', description='The ID of the node.', example='e01-cn-uax37m1****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId'),
        securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-f8z4wr1b41x3qsc9****'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        type?: string(name='Type', description='network interface controller type, the default type DEFAULT cannot be manually released

Valid value:

*   CUSTOM: custom type.
*   DEFAULT: system type.', example='DEFAULT'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6u8473r84e9****'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-f8ziirfl9k25h2qn7****'),
        zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
      }
    ](name='Data', description='lingjun Elastic Network Interface information list'),
    total?: long(name='Total', description='The total number of entries returned.', example='100'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The return message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model ListElasticNetworkInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListElasticNetworkInterfacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListElasticNetworkInterfaces  ListElasticNetworkInterfacesRequest
  * @return ListElasticNetworkInterfacesResponse
 */
async function listElasticNetworkInterfaces(request: ListElasticNetworkInterfacesRequest): ListElasticNetworkInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListElasticNetworkInterfaces', 'POST', '/', 'json', true, 'form', request);
}

model ListErAttachmentsRequest {
  autoReceiveAllRoute?: boolean(name='AutoReceiveAllRoute', description='Whether to automatically receive all routes from all instances under this Lingjun HUB. Valid values:

*   **true**: received automatically.
*   **false**: Not received.', example='true', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query. Valid values:

*   **true**: enables paged query.
*   **false**: Paged query is not enabled.', example='false', position='Body'),
  erAttachmentId?: string(name='ErAttachmentId', description='The ID of the network instance connection', example='er-attachment-i1ioibyf', position='Body'),
  erAttachmentName?: string(name='ErAttachmentName', description='The name of the network instance connection.', example='vcc-cn-209300qha01', position='Body'),
  erId: string(name='ErId', description='The ID of the Lingjun HUB instance.

This parameter is required.', example='er-kkopgtne', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the network instance. Valid values: **VPD** and **VCC**.

For more information, see [What is Lingjun?](https://help.aliyun.com/document_detail/444430.html)

You can query **Lingjun CIDR blocks** and **Lingjun connections** by [ListVpds](https://help.aliyun.com/document_detail/2331077.html) and [ListVccs](https://help.aliyun.com/document_detail/2399526.html?) respectively.', example='vcc-cn-209300qha01', position='Body'),
  instanceType?: string(name='InstanceType', description='The mitigation plan of the instance. Valid values:

*   **VPD**: indicates the Lingjun CIDR block.
*   **VCC**: indicates a Lingjun connection.', example='VCC', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzb3n5lgk2ieq', position='Body'),
  resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the instance belongs.', example='1111156667137893', position='Body'),
  status?: string(name='Status', description='The status of the CLB instance. Valid values:

*   **Available**: Normal.
*   **Not Available**: Not available.
*   **Executing**: The task is being executed.
*   **Deleting**: The account is being deleted', example='Available', position='Body'),
}

model ListErAttachmentsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        across?: boolean(name='Across', description='Whether to cross accounts. Valid values:

*   **true**: The network instance is a cross-account resource.
*   **false**: The current network instance is a resource of the current account.', example='false'),
        autoReceiveAllRoute?: boolean(name='AutoReceiveAllRoute', description='Whether to automatically receive all routes from all instances under this Lingjun HUB. Valid values:

*   **true**: received automatically.
*   **false**: Not received.', example='true'),
        createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1669734207000'),
        erAttachmentId?: string(name='ErAttachmentId', description='The ID of the Lingjun HUB network instance.', example='er-attachment-i1ioibyf'),
        erAttachmentName?: string(name='ErAttachmentName', description='The name of the Lingjun HUB network instance.', example='vcc-cn-209300qha01'),
        erId?: string(name='ErId', description='The ID of the Lingjun HUB instance.', example='er-kkopgtne'),
        gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1640187007000'),
        instanceId?: string(name='InstanceId', description='The ID of the network instance. Valid values: **VPD** and **VCC**.

For more information, see [What is Lingjun?](https://help.aliyun.com/document_detail/444430.html)

You can query **Lingjun CIDR blocks** and **Lingjun connections** by [ListVpds](https://help.aliyun.com/document_detail/2331077.html) and [ListVccs](https://help.aliyun.com/document_detail/2399526.html) respectively.', example='vcc-cn-209300qha02'),
        instanceName?: string(name='InstanceName', description='The instance name.', example='vcc-wulanchabu-main'),
        instanceType?: string(name='InstanceType', description='The database type. Valid values:

*   **VPD**: indicates the Lingjun CIDR block.
*   **VCC**: indicates a Lingjun connection.', example='VCC'),
        message?: string(name='Message', description='The returned message.', example='test'),
        regionId?: string(name='RegionId', description='Lingjun HUB region information.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzlki4ehfse4y'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1111156667137893'),
        status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **Available**: Normal.
*   **Not Available**: Not available.
*   **Executing**: The task is being executed.
*   **Deleting**: The account is being deleted', example='Available'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='1655449505171'),
      }
    ](name='Data', description='The list of Lingjun HUB network instances.'),
    total?: long(name='Total', description='The total number of entries that are returned.', example='0'),
  }(name='Content', description='The data returned.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is displayed.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='3D9D6E7B-365B-5200-BFA6-9B79E269058C'),
}

model ListErAttachmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListErAttachmentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListErAttachments  ListErAttachmentsRequest
  * @return ListErAttachmentsResponse
 */
async function listErAttachments(request: ListErAttachmentsRequest): ListErAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListErAttachments', 'POST', '/', 'json', true, 'form', request);
}

model ListErRouteEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='0.0.0.0/0', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable pagination query.', example='false', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  ignoreDetailedRouteEntry?: boolean(name='IgnoreDetailedRouteEntry', description='Filter 32 detailed CIDR blocks. Default value: true', example='true', position='Body'),
  instanceId?: string(name='InstanceId', description='Network Instance ID', example='vcc-cn-209300qha01', position='Body'),
  nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-209300qha01', position='Body'),
  nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmyuzlx2iihcy', position='Body'),
  routeType?: string(name='RouteType', description='Route type', example='VCC', position='Body'),
  status?: string(name='Status', description='The status of the enterprise-level snapshot policy.', example='Available', position='Body'),
}

model ListErRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='100.64.1.100/32'),
        erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-kkopgtne'),
        erRouteEntryId?: string(name='ErRouteEntryId', description='The ID of the route entry.', example='er-rte-maysfadg'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1640930901000'),
        nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-209300qha01'),
        nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzb3n5lgk2ieq'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1111156667137893'),
        routeType?: string(name='RouteType', description='Route type', example='VCC'),
        status?: string(name='Status', description='The task status. Valid values:

*   Synchronizing
*   Available', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1111156667137893'),
      }
    ](name='Data', description='Lingjun HUB Route Entry Information List'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model ListErRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListErRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListErRouteEntries  ListErRouteEntriesRequest
  * @return ListErRouteEntriesResponse
 */
async function listErRouteEntries(request: ListErRouteEntriesRequest): ListErRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListErRouteEntries', 'POST', '/', 'json', true, 'form', request);
}

model ListErRouteMapsRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='0.0.0.0/0', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query.', example='false', position='Body'),
  erId: string(name='ErId', description='Elastic Router ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erRouteMapId?: string(name='ErRouteMapId', description='routing policy ID', example='er-rmap-uwglhzom', position='Body'),
  erRouteMapNum?: int32(name='ErRouteMapNum', description='Policy number (default for automatic creation is 3000; The value range of the policy number manually created by the user is 1001-2000)', example='1001', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Body'),
  receptionInstanceId?: string(name='ReceptionInstanceId', description='Receive Instance ID', example='vpd-x2lohgpv', position='Body'),
  receptionInstanceName?: string(name='ReceptionInstanceName', description='Receive Instance Name', example='vpd2', position='Body'),
  receptionInstanceType?: string(name='ReceptionInstanceType', description='The type of the received instance. Optional values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmzaq3ypaqkdy', position='Body'),
  routeMapAction?: string(name='RouteMapAction', description='Policy behavior; optional values:

*   **permit**: Allow
*   **deny**: Rejected', example='deny', position='Body'),
  transmissionInstanceId?: string(name='TransmissionInstanceId', description='Release Instance ID', example='vpd-xsdlg2xb', position='Body'),
  transmissionInstanceName?: string(name='TransmissionInstanceName', description='Release Instance Name', example='vpd1', position='Body'),
  transmissionInstanceType?: string(name='TransmissionInstanceType', description='The type of the published instance. Optional values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD', position='Body'),
}

model ListErRouteMapsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        action?: string(name='Action', description='Policy behavior; optional values:

*   **permit**: Allow
*   **deny**: Prohibited', example='permit'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1601176751000'),
        description?: string(name='Description', description='Policy description', example='No description'),
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR Block', example='0.0.0.0/0'),
        erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne'),
        erRouteMapId?: string(name='ErRouteMapId', description='routing policy ID', example='er-rmap-uwglhzom'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1601176751000'),
        message?: string(name='Message', description='The message that is returned.', example='success'),
        receptionInstanceId?: string(name='ReceptionInstanceId', description='Receive Instance ID', example='vpd-9rgxqazc'),
        receptionInstanceName?: string(name='ReceptionInstanceName', description='Receive Instance Name', example='vpd-reception'),
        receptionInstanceOwner?: string(name='ReceptionInstanceOwner', description='The tenant to which the receiving instance belongs', example='1620939556166277'),
        receptionInstanceType?: string(name='ReceptionInstanceType', description='The type of the received instance. Possible values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi'),
        routeMapNum?: int32(name='RouteMapNum', description='The ID of the policy.

A smaller sequence number indicates a lower priority. When a route is matched, a policy with a higher priority is preferentially matched.

**Valid values: 1001 to 2000**', example='1001'),
        status?: string(name='Status', description='Status The status of the instance. Valid values:

*   **Available**
*   **Not Available**: Unavailable
*   **Executing**: Executing
*   **Deleting**: The node is being deleted.', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        transmissionInstanceId?: string(name='TransmissionInstanceId', description='Release Instance ID', example='vpd-8rgvqazb'),
        transmissionInstanceName?: string(name='TransmissionInstanceName', description='Release Instance Name', example='vpd-transmit'),
        transmissionInstanceOwner?: string(name='TransmissionInstanceOwner', description='The tenant to which the published instance belongs', example='1620939556166277'),
        transmissionInstanceType?: string(name='TransmissionInstanceType', description='The type of the published instance. Possible values:

*   **VPD**: Lingjun network segment.
*   **VCC**: Lingjun Connection.', example='VPD'),
      }
    ](name='Data', description='routing policy information list'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model ListErRouteMapsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListErRouteMapsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListErRouteMaps  ListErRouteMapsRequest
  * @return ListErRouteMapsResponse
 */
async function listErRouteMaps(request: ListErRouteMapsRequest): ListErRouteMapsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListErRouteMaps', 'POST', '/', 'json', true, 'form', request);
}

model ListErsRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query. Valid values:

*   true: enables paged query.
*   false: Paged query is disabled.', example='false', position='Body'),
  erId?: string(name='ErId', description='The ID of the Lingjun HUB instance.', example='er-kkopgtne', position='Body'),
  erName?: string(name='ErName', description='Lingjun HUB name.', example='er-heyuan-main', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the network instance.', example='vcc-cn-209300qha01', position='Body'),
  instanceType?: string(name='InstanceType', description='The type of the attached network instance. Valid values:

*   **VPD**
*   **VCC**', example='VCC', position='Body'),
  masterZoneId?: string(name='MasterZoneId', description='The primary zone.', example='cn-wulanchabu-b', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmwfm33rlt6zi', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Body'),
}

model ListErsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        connections?: long(name='Connections', description='The number of connections to the Lingjun HUB network instance.', example='2'),
        createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1640930671000'),
        description?: string(name='Description', description='The description of the synchronization task.', example='No description'),
        erId?: string(name='ErId', description='The ID of the Lingjun HUB instance.', example='er-kkopgtne'),
        erName?: string(name='ErName', description='The name of the Lingjun HUB instance.', example='er-wulanchabu-main'),
        gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1640930671000'),
        masterZoneId?: string(name='MasterZoneId', description='The primary zone.', example='cn-wulanchabu-b'),
        message?: string(name='Message', description='The returned message.', example='test'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmv2m2w43japa'),
        routeMaps?: long(name='RouteMaps', description='Number of Lingjun HUB routing policy.', example='2'),
        status?: string(name='Status', description='The task status.', example='Available'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='1655449505171'),
      }
    ](name='Data', description='lingjun hub information list.'),
    total?: long(name='Total', description='The total number of entries.', example='1'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is displayed.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model ListErsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListErsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListErs  ListErsRequest
  * @return ListErsResponse
 */
async function listErs(request: ListErsRequest): ListErsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListErs', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesByNcdRequest {
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='lni-1234****', position='Body'),
  instanceType: string(name='InstanceType', description='The parameter that specifies the instance type.

Valid value:

*   node: Lingjun node.
*   lni: lingjun network interface controller.

This parameter is required.', example='lni', position='Body'),
  maxNcd: int32(name='MaxNcd', description='Maximum network communication distance

This parameter is required.', example='2', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model ListInstancesByNcdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    instanceInfos?: [ 
      {
        instanceId?: string(name='InstanceId', description='The instance ID.', example='lni-1235****'),
        ncd?: int32(name='Ncd', description='network communication distance', example='2'),
      }
    ](name='InstanceInfos', description='A collection of instances whose network communication distance from the source instance ID does not exceed maxNcd'),
    instanceType?: string(name='InstanceType', description='Instance Type

Valid value:

*   node: Lingjun node.
*   lni: lingjun network interface controller.', example='lni'),
    maxNcd?: int32(name='MaxNcd', description='Maximum communication distance between nodes', example='3'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance.', example='lni-1234****'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='You don\\"t have the permission of this operation, action=eflo:ListInstancesByNcd, arn=acs:eflo:cn-heyuan:1263399219805497:networkinterface/*, resourceGroup=null'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model ListInstancesByNcdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesByNcdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancesByNcd  ListInstancesByNcdRequest
  * @return ListInstancesByNcdResponse
 */
async function listInstancesByNcd(request: ListInstancesByNcdRequest): ListInstancesByNcdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancesByNcd', 'POST', '/', 'json', true, 'form', request);
}

model ListLeniPrivateIpAddressesRequest {
  elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****', position='Body'),
  ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-8ylg****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', position='Body'),
  privateIpAddress?: string(name='PrivateIpAddress', description='Lingjun Elastic Network Interface secondary private IP.', example='10.0.****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  status?: string(name='Status', description='The status of the image build command risk.', example='Available', position='Body'),
}

model ListLeniPrivateIpAddressesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        description?: string(name='Description', description='The description.', example='test_vpn1_pbr_route_54'),
        elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the activation code was created.', example='1675929918000'),
        gmtModified?: string(name='GmtModified', description='The time when the certificate was updated.', example='1675929918000'),
        ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-8ylg****'),
        message?: string(name='Message', description='The response message.', example='success'),
        privateIpAddress?: string(name='PrivateIpAddress', description='Lingjun Elastic Network Interface secondary private IP address.', example='10.0.****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        status?: string(name='Status', description='The task status.', example='Available'),
      }
    ](name='Data', description='The response parameters.'),
    resourceGroupId?: string(name='ResourceGroupId'),
    total?: long(name='Total', description='The total number of entries.', example='1'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model ListLeniPrivateIpAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLeniPrivateIpAddressesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLeniPrivateIpAddresses  ListLeniPrivateIpAddressesRequest
  * @return ListLeniPrivateIpAddressesResponse
 */
async function listLeniPrivateIpAddresses(request: ListLeniPrivateIpAddressesRequest): ListLeniPrivateIpAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLeniPrivateIpAddresses', 'POST', '/', 'json', true, 'form', request);
}

model ListLniPrivateIpAddressRequest {
  description?: string(name='Description', description='The description of the variable.', example='test', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Whether pagination is required', example='false', position='Body'),
  ip?: string(name='Ip', description='network interface controller IP address', example='10.0.98.10', position='Body'),
  ipName?: string(name='IpName', description='IP unique identifier', example='sip-tynhdh2s', position='Body'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID', example='lni-2ze4uww7n6hsfzrwq77y', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='Obtain the index number of the current mouse click for an animation', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
}

model ListLniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        description?: string(name='Description', description='The instance description.', example='test'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data address was created.', example='1651734291000'),
        ipAddressMac?: string(name='IpAddressMac', description='MAC address of the secondary private network', example='00-ff-84-15-ba-67'),
        ipName?: string(name='IpName', description='IP unique identifier', example='sip-1hq1ql7vz'),
        message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
        networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID', example='lni-bp11hq1ql7vza3k4xz7q'),
        privateIpAddress?: string(name='PrivateIpAddress', description='Secondary private IP address of Lingjun network interface controller', example='10.42.5.92'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
      }
    ](name='Data', description='The returned result.'),
    resourceGroupId?: string(name='ResourceGroupId'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission to do this operation.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model ListLniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLniPrivateIpAddress  ListLniPrivateIpAddressRequest
  * @return ListLniPrivateIpAddressResponse
 */
async function listLniPrivateIpAddress(request: ListLniPrivateIpAddressRequest): ListLniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model ListNetworkInterfacesRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether pagination is required.', example='false', position='Body'),
  ip?: string(name='Ip', description='network interface controller the IP address.', example='203.107.46.227', position='Body'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID.', example='lni-bp18exxqa2rvfn45e5pz', position='Body'),
  nodeId?: string(name='NodeId', description='The ID of the machine to which the instance belongs.', example='r-2ze121o4uhr4np3r5t-db-5', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The current number of pages.', example='10', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  subnetId?: string(name='SubnetId', description='The ID of the instance to which the Lingjun subnet belongs.', example='subnet-anhtskts', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Body'),
  vpdId?: string(name='VpdId', description='The ID of the VPD.', example='vpd-iv2zm1qf', position='Body'),
}

model ListNetworkInterfacesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1669734207000'),
        ethernet?: [ string ](name='Ethernet', description='The port number of the AD server.'),
        gateway?: string(name='Gateway', description='The gateway.', example='10.0.0.253'),
        ip?: string(name='Ip', description='The IP address of the instance.', example='10.0.0.13'),
        ncType?: string(name='NcType', description='The NC type.

Valid value:

*   CUSTOM_LNI_INTEGRATION: two-network one-in-one architecture Lingjun hosting network interface controller.
*   CPU: CPU machine.
*   ELASTIC_6.2: Machine
*   GPU: GPU machine.
*   DEFAULT: the old CPU machine.
*   CUSTOM_LNI: two network separation architecture Lingjun hosting network interface controller.', example='GPU'),
        networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID.', example='lni-2ze50voovmtswn328ogm'),
        networkInterfaceName?: string(name='NetworkInterfaceName', description='The port name.', example='bond0'),
        nodeId?: string(name='NodeId', description='The ID of the machine to which the instance belongs.', example='2d53f5c204e7476dae69177e7fa6f19c'),
        privateIpAddressMacGroup?: [ 
          {
            description?: string(name='Description', description='The instance description.', example='test'),
            ipAddressMac?: string(name='IpAddressMac', description='Secondary private MAC address.', example='00:25:9d:00:20:20'),
            ipName?: string(name='IpName', description='The unique IP identifier.', example='sip-1asjd3xg'),
            message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
            privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address.', example='10.0.0.14'),
            status?: string(name='Status', description='The status of the cache reserve instance.', example='Available'),
          }
        ](name='PrivateIpAddressMacGroup', description='Secondary Private IP\\&MAC Address Collection'),
        quota?: int32(name='Quota', description='network interface controller private secondary IP quota.', example='6'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId'),
        serviceMac?: string(name='ServiceMac', description='The address of the service network interface controller.', example='00-ff-84-15-ba-67'),
        status?: string(name='Status', description='The task status.', example='Available'),
        subnetBaseInfo?: {
          cidr?: string(name='Cidr', description='The network segment of the Subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.

For more information about CIDR blocks, see the [What is CIDR?](https://www.alibabacloud.com/help/doc-detail/40637.htm#title-gu4-uzk-12r) section in the "Network FAQ" topic.

This parameter is left empty by default.', example='10.0.0.0/24'),
          createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1623656472000'),
          subnetId?: string(name='SubnetId', description='The ID of the Subnet instance.', example='subnet-yjnqn5ef'),
          subnetName?: string(name='SubnetName', description='The name of the Subnet instance.', example='subnet-1'),
        }(name='SubnetBaseInfo', description='Lingjun subnet (Subnet) basic information.'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='1620939556166279'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', description='The network segment of Lingjun network segment (VPD).

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD. This parameter is left empty by default.', example='10.0.0.0/16'),
          createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1668158213000'),
          vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-d3isyds4'),
          vpdName?: string(name='VpdName', description='The name of the VPD instance.', example='vpd-1'),
        }(name='VpdBaseInfo', description='Lingjun network segment (VPD) basic information.'),
        zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
      }
    ](name='Data', description='The response parameters.'),
    total?: long(name='Total', description='The total number of entries that are returned.', example='0'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model ListNetworkInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkInterfacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkInterfaces  ListNetworkInterfacesRequest
  * @return ListNetworkInterfacesResponse
 */
async function listNetworkInterfaces(request: ListNetworkInterfacesRequest): ListNetworkInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkInterfaces', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeInfosForPodRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-***', position='Body'),
  nodeId?: string(name='NodeId', description='The ID of the node for this operation.', example='node-be70****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b', position='Body'),
}

model ListNodeInfosForPodResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The information about the request denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='cluster-****'),
      hdeniQuota?: int32(name='HdeniQuota', description='Lingjun Gaomi network interface controller quota', example='10'),
      leniQuota?: int32(name='LeniQuota', description='Lingjun Elastic Network Interface quota, excluding system type', example='10'),
      leniSipQuota?: int32(name='LeniSipQuota', description='Lingjun Elastic Network Interface Secondary Private IP Quota', example='10'),
      lniSipQuota?: int32(name='LniSipQuota', description='Lingjun network interface controller Secondary Private IP Quota', example='10'),
      nodeId?: string(name='NodeId', description='The ID of the node for this operation.', example='node-be70****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
      vSwitches?: [ string ](name='VSwitches', description='List of VSwitches to which IP addresses can be applied for this node'),
      vpcId?: string(name='VpcId', description='The ID of the Virtual Private Cloud to which the current node belongs.', example='vpc-j6ctp4n75306****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
    }
  ](name='Content', description='Response body'),
  message?: string(name='Message', description='The returned message.', example='You don\\"t have the permission of this operation.'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model ListNodeInfosForPodResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeInfosForPodResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeInfosForPod  ListNodeInfosForPodRequest
  * @return ListNodeInfosForPodResponse
 */
async function listNodeInfosForPod(request: ListNodeInfosForPodRequest): ListNodeInfosForPodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeInfosForPod', 'POST', '/', 'json', true, 'form', request);
}

model ListSubnetsRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether to query by page. Optional values:

*   **true**: Enable pagination query
*   **false**: Pagination query is disabled', example='false', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be greater than 0. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID of the disk.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aeky5f3qx6ceapq', position='Body'),
  status?: string(name='Status', description='The status of the CLB instance. Valid values:

*   **Available**: Normal
*   **Not Available**: Unavailable
*   **Executing**: Executing
*   **Deleting**: The node is being deleted.', example='Available', position='Body'),
  subnetId?: string(name='SubnetId', description='Lingjun subnet instance ID', example='subnet-anhtskts', position='Body'),
  subnetName?: string(name='SubnetName', description='Lingjun subnet instance name', example='subnet-1', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='rg-subnet'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='subnet-group-1'),
    }
  ](name='Tag', description='The tag information.

You can specify up to 20 tags.', position='Body'),
  type?: string(name='Type', description='Lingjun Subnet Usage Type; optional; optional. Valid values:

*   **If you do not set this field for a common type**
*   **OOB** :OOB type
*   **LB**: LB type', example='Null', position='Body'),
  vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-fuliephf', position='Body'),
  zoneId?: string(name='ZoneId', description='The zone ID of the disk.', example='cn-wulanchabu-a', position='Body'),
}

model ListSubnetsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', description='The CIDR block of the Subnet.

*   The network segment of the subnet must be a proper subset of the network segment of Lingjun to which it belongs, and the mask must be between 16 bits and 29 bits, which can provide 8 to 65536 addresses. For example, the CIDR block of the Lingjun CIDR block is 192.168.0.0/16, and the CIDR blocks of the subnets under the Lingjun CIDR block are 192.168.0.0/17 to 192.168.0.0/29.
*   The first and last three IP addresses of each subnet segment are reserved by the system. For example, the CIDR blocks of the subnet are 192.168.1.0/24,192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.', example='172.18.0.0/24'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
        gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1678273219000'),
        message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='SUCCESS'),
        ncCount?: int32(name='NcCount', description='Number of NCs', example='16'),
        networkInterfaceCount?: int32(name='NetworkInterfaceCount', description='Number of Lingjun network interface controller', example='1'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aek2l4sq6l7unhi'),
        status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **Available**: Normal
*   **Not Available**: Unavailable
*   **Executing**: Executing
*   **Deleting**: The node is being deleted.', example='Available'),
        subnetId?: string(name='SubnetId', description='Lingjun subnet instance ID', example='subnet-c6wci55i'),
        subnetName?: string(name='SubnetName', description='Lingjun subnet instance name', example='yzp-rg-test3'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-subnet'),
            tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='subnet-group-1'),
          }
        ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        type?: string(name='Type', description='Lingjun Subnet Usage Type; optional; optional. Valid values:

*   **If you do not set this field for a common type**
*   **OOB** :OOB type
*   **LB**: LB type', example='OOB'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', description='The CIDR block of the VPD.

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD.', example='10.0.0.0/8'),
          createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
          vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-d3isyds4'),
          vpdName?: string(name='VpdName', description='Lingjun CIDR block instance name', example='yzp-rg-test3'),
        }(name='VpdBaseInfo', description='vpd basic information'),
        vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-ze3na0wf'),
        zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
      }
    ](name='Data', description='Lingjun subnet information list'),
    total?: long(name='Total', description='The total number of entries returned.', example='10'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='7F9082CC-3D94-560F-A575-8E8EF6CE2CB8'),
}

model ListSubnetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubnetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubnets  ListSubnetsRequest
  * @return ListSubnetsResponse
 */
async function listSubnets(request: ListSubnetsRequest): ListSubnetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubnets', 'POST', '/', 'json', true, 'form', request);
}

model ListVccFlowInfosRequest {
  direction?: string(name='Direction', description='Direction

Valid value:

*   IN: inbound.
*   OUT: the outbound.', example='OUT', position='Body'),
  from?: long(name='From', description='The start time. The default value is 5 minutes ago.', example='1667727514000', position='Body'),
  metricName?: string(name='MetricName', description='Metric

Valid value:

*   totalPacketsRate: Total Packet Rate.
*   dropBytesRate: the of the stream drop rate.
*   dropPacketsRate: Dropped Packet Rate.
*   totalBytesRate: the total streaming rate.
*   passBytesRate: by stream rate.
*   passPacketsRate: by packet rate.', example='passBytesRate', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  to?: long(name='To', description='The end time. The default time is the current time.', example='1689749749000', position='Body'),
  vccId?: string(name='VccId', description='Lingjun Connection ID', example='vcc-cn-zvp2******', position='Body'),
}

model ListVccFlowInfosResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='访问被拒绝的详细原因。', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        direction?: string(name='Direction', description='The direction.', example='OUT'),
        metricName?: string(name='MetricName', description='The metric. Valid values:', example='passBytesRate'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        timestamp?: long(name='Timestamp', description='Time', example='1689749749000'),
        value?: double(name='Value', description='Value', example='123'),
        vccId?: string(name='VccId', description='Lingjun Connection ID', example='vcc-cn-zvp2w******'),
      }
    ](name='Data', description='Lingjun Connection Traffic Information'),
    total?: long(name='Total', description='The total number of entries returned.', example='1'),
  }(name='Content', description='The returned data.'),
  message?: string(name='Message', description='Response', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='BDBCC783-84CA-5733-8EEA-************'),
}

model ListVccFlowInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVccFlowInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVccFlowInfos  ListVccFlowInfosRequest
  * @return ListVccFlowInfosResponse
 */
async function listVccFlowInfos(request: ListVccFlowInfosRequest): ListVccFlowInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVccFlowInfos', 'POST', '/', 'json', true, 'form', request);
}

model ListVccGrantRulesRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query. Optional values:

*   **true**: Enable pagination query
*   **false**: Pagination query is disabled', example='false', position='Body'),
  erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne', position='Body'),
  forSelect?: boolean(name='ForSelect', description='Use the drop-down box', example='true', position='Body'),
  grantRuleId?: string(name='GrantRuleId', description='Authorization Entry ID', example='grant-rule-jaj33d1b804', position='Body'),
  grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166277', position='Body'),
  instanceId?: string(name='InstanceId', description='Network Instance ID', example='vcc-cn-jaj33d1b804', position='Body'),
  instanceName?: string(name='InstanceName', description='Instance name', example='vcc-1', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aekzb3n5lgk2ieq', position='Body'),
}

model ListVccGrantRulesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
        erId?: string(name='ErId', description='Lingjun HUB ID', example='er-kkopgtne'),
        grantRuleId?: string(name='GrantRuleId', description='Cross-account authorization information Instance ID', example='grant-rule-jpumgwvp'),
        grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1013666993027780'),
        instanceId?: string(name='InstanceId', description='Network Instance ID', example='vcc-cn-jaj33d1kb05'),
        instanceName?: string(name='InstanceName', description='The name of the ECU.', example='vcc-1'),
        product?: string(name='Product', description='The type of the authorized product. Valid values:

*   **VPD**: indicates a VPD instance of the Lingjun network segment.
*   **VCC**: indicates that Lingjun connects to the VCC instance.', example='VCC'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        used?: boolean(name='Used', description='Whether the current cross-account resource has been bound to the cross-account Lingjun HUB. Valid values:

*   **true**: Used
*   **false**: Not used', example='true'),
      }
    ](name='Data', description='List of cross-account authorization information of Lingjun connection'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model ListVccGrantRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVccGrantRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVccGrantRules  ListVccGrantRulesRequest
  * @return ListVccGrantRulesResponse
 */
async function listVccGrantRules(request: ListVccGrantRulesRequest): ListVccGrantRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVccGrantRules', 'POST', '/', 'json', true, 'form', request);
}

model ListVccRouteEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='0.0.0.0/0', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable pagination query.', example='false', position='Body'),
  ignoreDetailedRouteEntry?: boolean(name='IgnoreDetailedRouteEntry', description='Filter 32 detailed CIDR blocks. Default value: true', example='true', position='Body'),
  nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-jaj34d75h01', position='Body'),
  nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi', position='Body'),
  routeType?: string(name='RouteType', description='Route type', example='BGP', position='Body'),
  status?: string(name='Status', description='The status of the enterprise-level snapshot policy.', example='Available', position='Body'),
  vccId: string(name='VccId', description='The ID of the Lingjun connection instance.

This parameter is required.', example='vcc-cn-zvp2w222001', position='Body'),
  vpdRouteEntryId?: string(name='VpdRouteEntryId', description='Lingjun CIDR block route entry instance ID', example='vpd-rte-toekyqel', position='Body'),
}

model ListVccRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='10.192.32.0/24'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1642745758000'),
        message?: string(name='Message', description='The returned message.', example='success'),
        nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-zvp2w222001'),
        nextHopType?: string(name='NextHopType', description='Next Hop Type', example='VCC'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1655449505171'),
        routeType?: string(name='RouteType', description='Route type', example='BGP'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001'),
        vccRouteEntryId?: string(name='VccRouteEntryId', description='The ID of the route entry.', example='vcc-rte-maysfadg'),
      }
    ](name='Data', description='List of Lingjun Connection Route Entries'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='response message, if the success request is', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model ListVccRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVccRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVccRouteEntries  ListVccRouteEntriesRequest
  * @return ListVccRouteEntriesResponse
 */
async function listVccRouteEntries(request: ListVccRouteEntriesRequest): ListVccRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVccRouteEntries', 'POST', '/', 'json', true, 'form', request);
}

model ListVccsRequest {
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the Lingjun connection instance. Unit: Mbit/s. Valid values: 1000 to 400000', example='5000', position='Body'),
  cenId?: string(name='CenId', description='The ID of the CEN instance; [What is the CEN?](https://help.aliyun.com/document_detail/181681.html)

You can call the [DescribeCens](https://help.aliyun.com/document_detail/468215.htm) to query the information of CEN instances under the current Alibaba Cloud account.', example='cen-95iwtpyvj3kk1v0ao0', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query. Optional values:

*   **true**: Enable pagination query
*   **false**: Pagination query is disabled', example='false', position='Body'),
  exStatus?: string(name='ExStatus', description='Excludes all data in the specified status. If the status parameter exists, ExStatus does not take effect.', example='Prepaid', position='Body'),
  filterErId?: string(name='FilterErId', description='Filter queries by Lingjun HUB instance ID', example='er-a7rqv1rq', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aeky5f3qx6ceapq', position='Body'),
  status?: string(name='Status', description='The instance status.', example='Available', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vcc'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='vcc-group-1'),
    }
  ](name='Tag', description='The tag information.

You can specify up to 20 tags.', position='Body'),
  vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001', position='Body'),
  vpcId?: string(name='VpcId', description='Virtual Private Cloud IDs; [What is Virtual Private Cloud](https://help.aliyun.com/document_detail/34217.html)

You can call the [DescribeVpcs](https://help.aliyun.com/document_detail/35739.html#demo-0) operation to query the specified VPC.', example='vpc-bp1nrtkmamy329u6a1z0i', position='Body'),
  vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-omqutbff', position='Body'),
}

model ListVccsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        accessPointId?: string(name='AccessPointId', description='Express Connect circuit access point ID:

*   **ap-cn-wulanchabu-jn-ts-A**: Ulanqab-Jining-A
*   **ap-cn-heyuan-yc-ts-SA127**: Heyuan-Yuancheng-A', example='ap-cn-wulanchabu-jn-ts-A'),
        bandwidthStr?: string(name='BandwidthStr', description='The bandwidth of the port.', example='1000'),
        bgpAsn?: string(name='BgpAsn', description='bgp as number', example='bgpAsn'),
        bgpCidr?: string(name='BgpCidr', description='bgp network segment', example='172.16.128.0/24'),
        cenId?: string(name='CenId', description='The ID of the CEN instance; [What is the CEN?](https://help.aliyun.com/document_detail/181681.html)

You can call the [DescribeCens](https://help.aliyun.com/document_detail/468215.htm) to query the information of CEN instances under the current Alibaba Cloud account.', example='cen-w15qot0pfvs83pkckj'),
        cenOwnerId?: string(name='CenOwnerId', description='Account to which cen belongs', example='1238685214107736'),
        commodityCode?: string(name='CommodityCode', description='Commodity code', example='bccluster_cloudconnectionpre_public_cn'),
        connectionType?: string(name='ConnectionType', description='The connection mode. Valid values:

*   **VPC**
*   **CENTR**', example='CENTR'),
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
        currentNode?: string(name='CurrentNode', description='Current process node', example='test-xxxx-node-x'),
        erInfos?: [ 
          {
            connections?: long(name='Connections', description='Connections', example='2'),
            createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1678273219000'),
            description?: string(name='Description', description='Description', example='test_api_coverage'),
            erId?: string(name='ErId', description='Elastic Router ID', example='er-a7rqv1rq'),
            erName?: string(name='ErName', description='ER instance name', example='er-1'),
            gmtModified?: string(name='GmtModified', description='The time when the agent was last modified.', example='1678273219000'),
            masterZoneId?: string(name='MasterZoneId', description='Primary Zone', example='cn-wulanchabu-b'),
            message?: string(name='Message', description='The message that is returned.', example='success'),
            regionId?: string(name='RegionId', description='ER region information', example='cn-wulanchabu'),
            routeMaps?: long(name='RouteMaps', description='Number of routing policy', example='2'),
            status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
            tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166277'),
          }
        ](name='ErInfos', description='List of bound Lingjun HUB information'),
        expirationDate?: string(name='ExpirationDate', description='The time when the application expired.', example='1678273219000'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1678273219000'),
        lineOperator?: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CO**: other connectivity providers in the Chinese mainland', example='CO'),
        message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='some message'),
        portType?: string(name='PortType', description='The port type of the Express Connect circuit. Valid values:

*   **100GBase-LR**: 100,000 megabytes of single-mode optical port (10 km)', example='100GBase-LR'),
        rate?: double(name='Rate', description='Process progress; value returns 0 to 1; not started is null', example='1'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aek2l4sq6l7unhi'),
        spec?: string(name='Spec', description='The compute specification.', example='Large'),
        status?: string(name='Status', description='The state of the rule.', example='Init'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vcc'),
            tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='vcc-group-1'),
          }
        ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
        taskId?: string(name='TaskId', description='The job ID.', example='task-cd544092-ed0a-49e9-83eb-e8c94770dccf'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1620939556166279'),
        vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-zvp2w222001'),
        vccName?: string(name='VccName', description='The name of the Lingjun connection instance.', example='vcc-heyuan-backup'),
        vpcId?: string(name='VpcId', description='Virtual Private Cloud IDs; [What is Virtual Private Cloud](https://help.aliyun.com/document_detail/34217.html)

You can call the [DescribeVpcs](https://help.aliyun.com/document_detail/35739.html#demo-0) operation to query the specified VPC.', example='vpc-f8ziirfl9k25h2qn7y4f8'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', description='The CIDR block of the VPD.

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD.', example='10.0.0.0/13'),
          createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1668158213000'),
          vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-9n7ioqrp'),
          vpdName?: string(name='VpdName', description='Lingjun CIDR block instance name', example='yzp-rg-test3'),
        }(name='VpdBaseInfo', description='Lingjun network segment information (applicable to the scene where the old version of Lingjun connection is directly bound to Lingjun network segment)'),
        vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-eoiy88ju'),
        zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-wulanchabu-b'),
      }
    ](name='Data', description='Lingjun Connection Information List'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='28451248-7038-5184-B5D3-80F104654BE8'),
}

model ListVccsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVccsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVccs  ListVccsRequest
  * @return ListVccsResponse
 */
async function listVccs(request: ListVccsRequest): ListVccsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVccs', 'POST', '/', 'json', true, 'form', request);
}

model ListVpdGrantRulesRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable pagination query.', example='false', position='Body'),
  erId?: string(name='ErId', description='Lingjun HUB Instance ID', example='er-kkopgtne', position='Body'),
  forSelect?: boolean(name='ForSelect', description='Use the drop-down box', example='true', position='Body'),
  grantRuleId?: string(name='GrantRuleId', description='Authorization Entry ID', example='grant-rule-8rgvqazb', position='Body'),
  grantTenantId?: string(name='GrantTenantId', description='Authorized Tenant ID', example='1620939556166279', position='Body'),
  instanceId?: string(name='InstanceId', description='The ID of the network instance that you want to query.', example='vpd-8rgvqazb', position='Body'),
  instanceName?: string(name='InstanceName', description='Instance name', example='vpd-1', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi', position='Body'),
}

model ListVpdGrantRulesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The HTTP status code.', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the data address was created.', example='1643013506000'),
        erId?: string(name='ErId', description='The current network sample is authorized to the specified Lingjun HUB sample ID.', example='er-kkopgtne'),
        grantRuleId?: string(name='GrantRuleId', description='Authorization Entry ID', example='grant-rule-8rgvqazb'),
        grantTenantId?: string(name='GrantTenantId', description='The ID of the tenant to which the current instance is authorized.', example='1672372231790'),
        instanceId?: string(name='InstanceId', description='Lingjun CIDR block instance ID', example='vpd-8rgvqazb'),
        instanceName?: string(name='InstanceName', description='The name of the ECU.', example='vpd-1'),
        product?: string(name='Product', description='The type of the authorized product. Valid values:

*   **VPD**: indicates a VPD instance of the Lingjun network segment.
*   **VCC**: indicates that Lingjun connects to the VCC instance.

The caller does not need to specify.', example='VPD'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-aek2l4sq6l7unhi'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        used?: boolean(name='Used', description='Whether the current authorized instance has been bound', example='true'),
      }
    ](name='Data', description='Lingjun CIDR block authorization information list'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model ListVpdGrantRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpdGrantRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpdGrantRules  ListVpdGrantRulesRequest
  * @return ListVpdGrantRulesResponse
 */
async function listVpdGrantRules(request: ListVpdGrantRulesRequest): ListVpdGrantRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpdGrantRules', 'POST', '/', 'json', true, 'form', request);
}

model ListVpdRouteEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='0.0.0.0/0', position='Body'),
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query. Optional values:

*   **true**: Enable pagination query
*   **false**: Pagination query is disabled', example='false', position='Body'),
  ignoreDetailedRouteEntry?: boolean(name='IgnoreDetailedRouteEntry', description='Filter 32 detailed CIDR blocks. Default value: true', example='true', position='Body'),
  nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='vcc-cn-209300qha01', position='Body'),
  nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='VCC', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1. Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfm4mlwqjalz7a', position='Body'),
  routeType?: string(name='RouteType', description='Route type', example='BGP', position='Body'),
  status?: string(name='Status', description='The status of the enterprise-level snapshot policy.', example='Available', position='Body'),
  vpdId: string(name='VpdId', description='Lingjun CIDR block instance ID

This parameter is required.', example='vpd-fuliephf', position='Body'),
  vpdRouteEntryId?: string(name='VpdRouteEntryId', description='Lingjun CIDR block route entry instance ID', example='vpd-rte-4r1zbhoh', position='Body'),
}

model ListVpdRouteEntriesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        destinationCidrBlock?: string(name='DestinationCidrBlock', description='Destination CIDR block', example='0.0.0.0/0'),
        gmtModified?: string(name='GmtModified', description='The time when the cluster was updated.', example='1678273219000'),
        nextHopId?: string(name='NextHopId', description='Next Hop Instance', example='er-bmlqiym1'),
        nextHopType?: string(name='NextHopType', description='Next Hop Instance Type', example='ER'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='Resource group instance ID', example='rg-acfmxhucx5ewuwy'),
        resourceTenantId?: string(name='ResourceTenantId', description='The ID of the tenant to which the resource belongs.', example='1655449505171'),
        routeType?: string(name='RouteType', description='Route type', example='BGP'),
        status?: string(name='Status', description='The status of the intervention entry. Valid value:', example='Available'),
        tenantId?: string(name='TenantId', description='The ID of the tenant.', example='1655449505171'),
        vpdId?: string(name='VpdId', description='Lingjun CIDR block instance ID', example='vpd-eoiy88ju'),
        vpdRouteEntryId?: string(name='VpdRouteEntryId', description='The ID of the route entry.', example='vpd-rte-toekyqel'),
      }
    ](name='Data', description='Lingjun CIDR block route entry list'),
    total?: long(name='Total', description='The total number of entries returned.', example='0'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model ListVpdRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpdRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpdRouteEntries  ListVpdRouteEntriesRequest
  * @return ListVpdRouteEntriesResponse
 */
async function listVpdRouteEntries(request: ListVpdRouteEntriesRequest): ListVpdRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpdRouteEntries', 'POST', '/', 'json', true, 'form', request);
}

model ListVpdsRequest {
  enablePage?: boolean(name='EnablePage', description='Specifies whether to enable paged query.', example='false', position='Body'),
  filterErId?: string(name='FilterErId', description='Queries the network segments of Lingjun that are not bound to a specified Lingjun HUB.', example='er-kkopgtne', position='Body'),
  forSelect?: boolean(name='ForSelect', description='If you select a drop-down list, only the basic information (including the instance ID and instance name) is returned. Possible values:

*   **true**: Select Query Use from the drop-down list.
*   **false**: Normal queries are used.', example='true', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Start value: 1 Default value: 1.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aeky5f3qx6ceapq', position='Body'),
  status?: string(name='Status', description='The status of the CLB instance. Valid values:

*   **Available**: Normal.
*   **Not Available**: Not available.
*   **Executing**: The task is being executed.
*   **Deleting**: The account is being deleted', example='Available', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the VPN attachment.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vpd-region'),
      value?: string(name='Value', description='The tag value of the VPN connection.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='wulanchabu'),
    }
  ](name='Tag', description='The tag information.

You can specify up to 20 tags.', position='Body'),
  vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-fuliephf', position='Body'),
  vpdName?: string(name='VpdName', description='The name of the VPD instance.', example='vpd-1', position='Body'),
  withDependence?: boolean(name='WithDependence', description='Specifies whether to include the dependent resource information. We recommend that you do not query the dependent resource information when you query by page. You can query the dependent resource information separately when you delete it. Possible values:

*   **true**: with dependency information.
*   **false**: does not include dependency information.', example='false', position='Body'),
  withoutVcc?: boolean(name='WithoutVcc', description='Queries the information about a Lingjun CIDR block that is not bound to a Lingjun connection. Possible values:

*   **true**: filters out VPDs that have been bound to VCC
*   **false**: does not filter VPD that has been bound to VCC', example='true', position='Body'),
}

model ListVpdsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', description='The CIDR block of the VPD.

*   We recommend that you use an RFC private endpoint as the Lingjun CIDR block, such as 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16. In scenarios where the Doringjun CIDR block is connected to each other or where the Lingjun CIDR block is connected to a VPC, make sure that the addresses do not conflict with each other.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, or 169.254.0.0/16 and their subnets as the primary IPv4 CIDR block of the VPD.', example='10.0.0.0/8'),
        createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='1678273219000'),
        dependence?: map[string]any(name='Dependence', description='Dependencies.'),
        erInfos?: [ 
          {
            connections?: long(name='Connections', description='The number of connections.', example='2'),
            createTime?: string(name='CreateTime', description='The time when the activation code was created.', example='2023-12-26 20:16:36'),
            description?: string(name='Description', description='The description of the synchronization task.', example='No description'),
            erId?: string(name='ErId', description='The ID of the Elastic Router (ER) instance.', example='er-63vzm0fw'),
            erName?: string(name='ErName', description='The name of the Lingjun HUB(ER) instance.', example='er-1'),
            gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='2023-12-26 20:16:36'),
            masterZoneId?: string(name='MasterZoneId', description='The primary zone.', example='cn-wulanchabu-b'),
            message?: string(name='Message', description='The returned message.', example='success'),
            regionId?: string(name='RegionId', description='The supported region.', example='cn-wulanchabu'),
            routeMaps?: long(name='RouteMaps', description='The number of routing policy.', example='2'),
            status?: string(name='Status', description='The task status.', example='Available'),
            tenantId?: string(name='TenantId', description='The tenant ID.', example='1620939556166277'),
          }
        ](name='ErInfos', description='The information list of the bound Lingjun HUB(ER).'),
        gmtModified?: string(name='GmtModified', description='The time when the O\\&M task was modified.', example='1678273219000'),
        message?: string(name='Message', description='The returned message.', example='success'),
        ncCount?: int32(name='NcCount', description='nc quantity.', example='16'),
        networkInterfaceCount?: int32(name='NetworkInterfaceCount', description='Number of Lingjun network interface controller', example='1'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.htm?spm=a2c4g.11186623.0.0.29e15d7akXhpuu).', example='rg-aek2l4sq6l7unhi'),
        secondaryCidrBlocks?: [ string ](name='SecondaryCidrBlocks', description='The list of additional CIDR blocks.'),
        serviceCidr?: string(name='ServiceCidr', description='The Service CIDR block.', example='169.254.252.0/23'),
        status?: string(name='Status', description='The task status.', example='Available'),
        subnetCount?: int32(name='SubnetCount', description='The number of subnets.', example='1'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.

You cannot specify an empty string as a tag key. It can be up to 64 characters in length and cannot start with aliyun or acs:. It cannot contain http:// or https://.

You can specify at most 20 tag keys in each call.', example='tag-vpd-region'),
            tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.

The tag value can be empty or a string of up to 128 characters. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each key-value pair must be unique. You can specify values for at most 20 tag keys in each call.', example='cn-wulanchabu'),
          }
        ](name='Tags', description='The tag information.

You can specify up to 20 tags.'),
        tenantId?: string(name='TenantId', description='The tenant ID.', example='1655449505171'),
        vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-lg4dppgi'),
        vpdName?: string(name='VpdName', description='The name of the VPD.', example='vpd-1'),
      }
    ](name='Data', description='The returned data.'),
    total?: long(name='Total', description='The total number of entries that are returned.', example='0'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The additional information that is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model ListVpdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpdsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpds  ListVpdsRequest
  * @return ListVpdsResponse
 */
async function listVpds(request: ListVpdsRequest): ListVpdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpds', 'POST', '/', 'json', true, 'form', request);
}

model QueryInstanceNcdRequest {
  instanceId1: string(name='InstanceId1', description='Instance 1ID

This parameter is required.', example='lni-1235****', position='Body'),
  instanceId2: string(name='InstanceId2', description='Instance 2ID

This parameter is required.', example='lni-1234****', position='Body'),
  instanceType: string(name='InstanceType', description='The parameter that specifies the instance type.

Valid value:

*   node: Lingjun node.
*   lni: lingjun network interface controller.

This parameter is required.', example='lni', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model QueryInstanceNcdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    instanceId1?: string(name='InstanceId1', description='Instance 1ID', example='lni-1235****'),
    instanceId2?: string(name='InstanceId2', description='Instance 2ID', example='lni-1234****'),
    instanceType?: string(name='InstanceType', description='Instance Type

Valid value:

*   node: Lingjun node.
*   lni: lingjun network interface controller.', example='lni'),
    ncd?: int32(name='Ncd', description='network communication distance between instances', example='1'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The returned message.', example='You don\\"t have the permission of this operation, action=eflo:QueryInstanceNcd, arn=acs:eflo:cn-shenzhen:1263399219805497:networkinterface/*, resourceGroup=null'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model QueryInstanceNcdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInstanceNcdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryInstanceNcd  QueryInstanceNcdRequest
  * @return QueryInstanceNcdResponse
 */
async function queryInstanceNcd(request: QueryInstanceNcdRequest): QueryInstanceNcdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceNcd', 'POST', '/', 'json', true, 'form', request);
}

model RefundVccRequest {
  regionId?: string(name='RegionId', description='Region', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', description='Lingjun Connection ID', example='vcc-cn-zvp2w222001', position='Body'),
}

model RefundVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.

>  This parameter is returned only if Resource Access Management (RAM) permission verification failed.', example='None'),
  code?: int32(name='Code', description='The response status code', example='0'),
  content?: any(name='Content', description='Response content', example='{}'),
  message?: string(name='Message', description='Response message, which is \\"success\\" if the request succeeds', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model RefundVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundVccResponseBody(name='body'),
}

/**
  * @description Only unsubscribable for Lingjun connections in the prepayment status.
  * @param request  the request parameters of RefundVcc  RefundVccRequest
  * @return RefundVccResponse
 */
async function refundVcc(request: RefundVccRequest): RefundVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundVcc', 'POST', '/', 'json', true, 'form', request);
}

model RetryVccRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  vccId?: string(name='VccId', description='Lingjun Connection ID', example='vcc-cn-zvp2w222001', position='Body'),
}

model RetryVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: any(name='Content', description='The returned data.', example='{}'),
  message?: string(name='Message', description='The error message.', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='7F9082CC-3D94-560F-A575-8E8EF6CE2CB8'),
}

model RetryVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryVccResponseBody(name='body'),
}

/**
  * @description This operation allows the user to retry the operation if the Lingjun connection creation and deletion processes fail. Only the Lingjun connection in the creation failure and deletion failure state can be retried
  * @param request  the request parameters of RetryVcc  RetryVccRequest
  * @return RetryVccResponse
 */
async function retryVcc(request: RetryVccRequest): RetryVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryVcc', 'POST', '/', 'json', true, 'form', request);
}

model UnAssignPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken', description='By default, popApi is not ignored and idempotent', example='141cccd6-dfbd-11ec-b8e8-0242ac110003', position='Body'),
  ipName: string(name='IpName', description='IP unique identifier

This parameter is required.', example='sip-xxxx', position='Body'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID

This parameter is required.', example='lni-bp18exxqa2rvfn45e5pz', position='Body'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance.', example='10.209.75.242', position='Body'),
  regionId: string(name='RegionId', description='Region

This parameter is required.', example='cn-wulanchabu', position='Body'),
  subnetId: string(name='SubnetId', description='Subnet

This parameter is required.', example='subnet-f3zfzmnc', position='Body'),
}

model UnAssignPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    ipName?: string(name='IpName', description='IP unique identifier', example='sip-xxxxx'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='Lingjun network interface controller ID', example='lni-bp164jwjpdq4lnsy83s5'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='You don\\"t have the permission to do this operation.'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model UnAssignPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnAssignPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnAssignPrivateIpAddress  UnAssignPrivateIpAddressRequest
  * @return UnAssignPrivateIpAddressResponse
 */
async function unAssignPrivateIpAddress(request: UnAssignPrivateIpAddressRequest): UnAssignPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnAssignPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model UnAssociateVpdCidrBlockRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  secondaryCidrBlock: string(name='SecondaryCidrBlock', description='The additional CIDR block.

This parameter is required.', example='192.168.0.0/16', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the Lingjun CIDR block.

This parameter is required.', example='vpd-aof7dat1', position='Body'),
}

model UnAssociateVpdCidrBlockResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='访问被拒绝详细信息。', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vpdId?: string(name='VpdId', description='The ID of the Lingjun CIDR block.', example='vpd-ze3na0wf'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model UnAssociateVpdCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnAssociateVpdCidrBlockResponseBody(name='body'),
}

/**
  * @description **
  * **Warning** If the attached CIDR block has Lingjun subnet resources, you must delete the dependent resources before you can delete the attached CIDR block.
  * @param request  the request parameters of UnAssociateVpdCidrBlock  UnAssociateVpdCidrBlockRequest
  * @return UnAssociateVpdCidrBlockResponse
 */
async function unAssociateVpdCidrBlock(request: UnAssociateVpdCidrBlockRequest): UnAssociateVpdCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnAssociateVpdCidrBlock', 'POST', '/', 'json', true, 'form', request);
}

model UnassignLeniPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken', description='The idempotent identifier.', example='967e77a2-b61d-11ec-a147-0242c0a80504', position='Body'),
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.

This parameter is required.', example='leni-1234****', position='Body'),
  ipName: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.

This parameter is required.', example='sip-8ylg****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model UnassignLeniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****'),
    ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-dqvs****'),
  }(name='Content', description='The response data.', example='{}'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model UnassignLeniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassignLeniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnassignLeniPrivateIpAddress  UnassignLeniPrivateIpAddressRequest
  * @return UnassignLeniPrivateIpAddressResponse
 */
async function unassignLeniPrivateIpAddress(request: UnassignLeniPrivateIpAddressRequest): UnassignLeniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignLeniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model UpdateElasticNetworkInterfaceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='3fd79d62-ab1d-11ec-9a53-0242ac110004', position='Body'),
  description?: string(name='Description', description='The description of the variable.', example='LHICDOSEExternaluserinquiryP', position='Body'),
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID

This parameter is required.', example='leni-1234****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-wz9fj2s3o21nw2****', position='Body'),
}

model UpdateElasticNetworkInterfaceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID', example='leni-1234****'),
    nodeId?: string(name='NodeId', description='Lingjun Node ID', example='e01-cn-lbj3aej****'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The return message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model UpdateElasticNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateElasticNetworkInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateElasticNetworkInterface  UpdateElasticNetworkInterfaceRequest
  * @return UpdateElasticNetworkInterfaceResponse
 */
async function updateElasticNetworkInterface(request: UpdateElasticNetworkInterfaceRequest): UpdateElasticNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateElasticNetworkInterface', 'POST', '/', 'json', true, 'form', request);
}

model UpdateErRequest {
  description?: string(name='Description', description='The description of the document.', example='description', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB Instance ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erName?: string(name='ErName', description='Parameter', example='er-wulanchabu-main', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model UpdateErResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: map[string]any(name='Content', description='The returned data.', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='3D9D6E7B-365B-5200-BFA6-9B79E269058C'),
}

model UpdateErResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateErResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEr  UpdateErRequest
  * @return UpdateErResponse
 */
async function updateEr(request: UpdateErRequest): UpdateErResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEr', 'POST', '/', 'json', true, 'form', request);
}

model UpdateErAttachmentRequest {
  erAttachmentId: string(name='ErAttachmentId', description='The connection ID of the Lingjun HUB network instance.

This parameter is required.', example='er-attachment-i1ioibyf', position='Body'),
  erAttachmentName?: string(name='ErAttachmentName', description='Lingjun HUB Network Instance Connection Name', example='er-attachment-wulanchabu-main', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model UpdateErAttachmentResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: map[string]any(name='Content', description='The response parameters.', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='Request ID of the current request', example='7F9082CC-3D94-560F-A575-8E8EF6CE2CB8'),
}

model UpdateErAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateErAttachmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateErAttachment  UpdateErAttachmentRequest
  * @return UpdateErAttachmentResponse
 */
async function updateErAttachment(request: UpdateErAttachmentRequest): UpdateErAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateErAttachment', 'POST', '/', 'json', true, 'form', request);
}

model UpdateErRouteMapRequest {
  description?: string(name='Description', description='The description of the document.', example='test-example', position='Body'),
  erId: string(name='ErId', description='Lingjun HUB ID

This parameter is required.', example='er-kkopgtne', position='Body'),
  erRouteMapId: string(name='ErRouteMapId', description='routing policy ID

This parameter is required.', example='er-rmap-uwglhzom', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model UpdateErRouteMapResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: map[string]any(name='Content', description='The response parameters.', example='{}'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model UpdateErRouteMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateErRouteMapResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateErRouteMap  UpdateErRouteMapRequest
  * @return UpdateErRouteMapResponse
 */
async function updateErRouteMap(request: UpdateErRouteMapRequest): UpdateErRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateErRouteMap', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLeniPrivateIpAddressRequest {
  description: string(name='Description', description='The description of the ECS instances.

This parameter is required.', example='description', position='Body'),
  elasticNetworkInterfaceId: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.

This parameter is required.', example='leni-1234****', position='Body'),
  ipName: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.

This parameter is required.', example='sip-8ylg****', position='Body'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
}

model UpdateLeniPrivateIpAddressResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    elasticNetworkInterfaceId?: string(name='ElasticNetworkInterfaceId', description='Lingjun Elastic Network Interface ID.', example='leni-1234****'),
    ipName?: string(name='IpName', description='Lingjun Elastic Network Interface secondary private IP unique identifier.', example='sip-8ylg****'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model UpdateLeniPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLeniPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLeniPrivateIpAddress  UpdateLeniPrivateIpAddressRequest
  * @return UpdateLeniPrivateIpAddressResponse
 */
async function updateLeniPrivateIpAddress(request: UpdateLeniPrivateIpAddressRequest): UpdateLeniPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLeniPrivateIpAddress', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSubnetRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  subnetId: string(name='SubnetId', description='The subnet instance ID.

This parameter is required.', example='subnet-f3zfzmnc', position='Body'),
  subnetName?: string(name='SubnetName', description='The new name for the subnet instance.', example='subnet-1', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the VPD to which the subnet belongs.

This parameter is required.', example='vpd-aof7dat1', position='Body'),
  zoneId: string(name='ZoneId', description='The zone ID.

This parameter is required.', example='cn-wulanchabu-a', position='Body'),
}

model UpdateSubnetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', description='The subnet instance ID.', example='subnet-yuvn29bn'),
  }(name='Content', description='The response content.'),
  message?: string(name='Message', description='The message that is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='3D9D6E7B-365B-5200-BFA6-9B79E269058C'),
}

model UpdateSubnetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubnetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSubnet  UpdateSubnetRequest
  * @return UpdateSubnetResponse
 */
async function updateSubnet(request: UpdateSubnetRequest): UpdateSubnetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubnet', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVccRequest {
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the Lingjun connection instance. Unit: Mbit/s. Valid values: 1000 to 400000', example='1000', position='Body'),
  orderId?: string(name='OrderId', description='The ID of the order placed on the instance.', example='20006627643', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-wulanchabu', position='Body'),
  vccId: string(name='VccId', description='The ID of the Lingjun connection instance.

This parameter is required.', example='vcc-cn-zvp2w222001', position='Body'),
  vccName?: string(name='VccName', description='The name of the Lingjun connection instance.', example='vcc-heyuan-backup', position='Body'),
}

model UpdateVccResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vccId?: string(name='VccId', description='The ID of the Lingjun connection instance.', example='vcc-cn-2r42v22cn03'),
  }(name='Content', description='The response parameters.'),
  message?: string(name='Message', description='The error message. (If the instance is in the Exception state, the exception cause is prompted.)', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F906C4D3-7444-58E2-9819-E3D8563571A3'),
}

model UpdateVccResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVccResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVcc  UpdateVccRequest
  * @return UpdateVccResponse
 */
async function updateVcc(request: UpdateVccRequest): UpdateVccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVcc', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVpdRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-wulanchabu', position='Body'),
  vpdId: string(name='VpdId', description='The ID of the VPD instance.

This parameter is required.', example='vpd-omqutbff', position='Body'),
  vpdName?: string(name='VpdName', description='The name of the VPD instance.', example='vpd-lingjun', position='Body'),
}

model UpdateVpdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: int32(name='Code', description='The response status code.', example='0'),
  content?: {
    vpdId?: string(name='VpdId', description='The ID of the VPD instance.', example='vpd-lg4dppgi'),
  }(name='Content', description='The response data.'),
  message?: string(name='Message', description='The additional information that is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model UpdateVpdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVpdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVpd  UpdateVpdRequest
  * @return UpdateVpdResponse
 */
async function updateVpd(request: UpdateVpdRequest): UpdateVpdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpd', 'POST', '/', 'json', true, 'form', request);
}

