/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eflo', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssignPrivateIpAddressRequest {
  assignMac?: boolean(name='AssignMac', example='true'),
  clientToken?: string(name='ClientToken', example='3fd79d62-ab1d-11ec-9a53-0242ac110004'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.0.6.194'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
}

model AssignPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    ipName?: string(name='IpName', example='sip-xxxx'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model AssignPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignPrivateIpAddressResponseBody(name='body'),
}

async function assignPrivateIpAddressWithOptions(request: AssignPrivateIpAddressRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assignMac)) {
    body['AssignMac'] = request.assignMac;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    body['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssignPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignPrivateIpAddress(request: AssignPrivateIpAddressRequest): AssignPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressWithOptions(request, runtime);
}

model DeleteSubnetRequest {
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
  vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
  zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
}

model DeleteSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model DeleteSubnetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubnetResponseBody(name='body'),
}

async function deleteSubnetWithOptions(request: DeleteSubnetRequest, runtime: Util.RuntimeOptions): DeleteSubnetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubnet',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSubnet(request: DeleteSubnetRequest): DeleteSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubnetWithOptions(request, runtime);
}

model DeleteVpdRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpdId?: string(name='VpdId', example='vpd-zr0farea'),
}

model DeleteVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{
      "subnet": [
            {
                  "tenantId": "1620939556166277",
                  "regionId": "cn-wulanchabu",
                  "zoneId": "cn",
                  "type": null,
                  "subnetId": "subnet-zqebaxa0",
                  "name": "lql_testVPD"
            }
      ],
      "nc": [
            {}
      ]
}'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteVpdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpdResponseBody(name='body'),
}

async function deleteVpdWithOptions(request: DeleteVpdRequest, runtime: Util.RuntimeOptions): DeleteVpdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpd',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpd(request: DeleteVpdRequest): DeleteVpdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpdWithOptions(request, runtime);
}

model DescribeSlrRequest {
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aeky5f3qx6ceapq'),
}

model DescribeSlrResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    hasRole?: boolean(name='HasRole', example='true'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model DescribeSlrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlrResponseBody(name='body'),
}

async function describeSlrWithOptions(request: DescribeSlrRequest, runtime: Util.RuntimeOptions): DescribeSlrResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlr',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlr(request: DescribeSlrRequest): DescribeSlrResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlrWithOptions(request, runtime);
}

model GetLniPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken'),
  ipName?: string(name='IpName', example='sip-xxxxx'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model GetLniPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    gmtCreate?: string(name='GmtCreate', example='2022-12-26 20:16:36'),
    ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
    ipName?: string(name='IpName', example='sip-xxxxx'),
    message?: string(name='Message'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze4uww7n6hsfzrwq77y'),
    privateIpAddress?: string(name='PrivateIpAddress', example='10.42.5.92'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    status?: string(name='Status', example='Available'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model GetLniPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLniPrivateIpAddressResponseBody(name='body'),
}

async function getLniPrivateIpAddressWithOptions(request: GetLniPrivateIpAddressRequest, runtime: Util.RuntimeOptions): GetLniPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipName)) {
    body['IpName'] = request.ipName;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLniPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLniPrivateIpAddress(request: GetLniPrivateIpAddressRequest): GetLniPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLniPrivateIpAddressWithOptions(request, runtime);
}

model GetNetworkInterfaceRequest {
  clientToken?: string(name='ClientToken', example='c5e3130a-d02f-11ec-a7d3-0242ac110005'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
}

model GetNetworkInterfaceResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    ethernet?: [ string ](name='Ethernet'),
    gateway?: string(name='Gateway', example='172.24.20.254'),
    gmtCreate?: string(name='GmtCreate', example='2022-12-26 20:16:36'),
    ip?: string(name='Ip', example='203.107.60.69'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-f8z4scmfh0u4ewv6vdd8'),
    nodeId?: string(name='NodeId', example='masterintranett2fdth5fkoocg'),
    privateIpAddressMacGroup?: [ 
      {
        ipAddressMac?: string(name='IpAddressMac', example='01-00-5e-00-00-16'),
        ipName?: string(name='IpName', example='sip-xxxx'),
        message?: string(name='Message', example='success'),
        privateIpAddress?: string(name='PrivateIpAddress', example='172.23.161.57'),
        status?: string(name='Status', example='Available'),
      }
    ](name='PrivateIpAddressMacGroup'),
    quota?: int32(name='Quota', example='0'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    serviceMac?: string(name='ServiceMac', example='01-00-5e-00-00-16'),
    status?: string(name='Status', example='Available'),
    subnetBaseInfo?: {
      cidr?: string(name='Cidr', example='116.233.21.57/32'),
      gmtCreate?: string(name='GmtCreate', example='2022-10-26 18:08:04'),
      name?: string(name='Name', example='weepingTest'),
      subnetId?: string(name='SubnetId', example='subnet-urb01blo'),
    }(name='SubnetBaseInfo'),
    tenantId?: string(name='TenantId', example='1655449505171'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', example='172.18.0.0/24'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-11 15:19:58'),
      name?: string(name='Name'),
      vpdId?: string(name='VpdId', example='vpd-ppdunxzc'),
    }(name='VpdBaseInfo'),
    zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNetworkInterfaceResponseBody(name='body'),
}

async function getNetworkInterfaceWithOptions(request: GetNetworkInterfaceRequest, runtime: Util.RuntimeOptions): GetNetworkInterfaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNetworkInterface',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNetworkInterface(request: GetNetworkInterfaceRequest): GetNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetworkInterfaceWithOptions(request, runtime);
}

model InitializeVccRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model InitializeVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
    roleName?: string(name='RoleName', example='CloudConnectionOperationRole'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
}

model InitializeVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeVccResponseBody(name='body'),
}

async function initializeVccWithOptions(request: InitializeVccRequest, runtime: Util.RuntimeOptions): InitializeVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitializeVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initializeVcc(request: InitializeVccRequest): InitializeVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeVccWithOptions(request, runtime);
}

model ListLniPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken'),
  enablePage?: boolean(name='EnablePage', example='false'),
  ip?: string(name='Ip', example='10.0.98.10'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze4uww7n6hsfzrwq77y'),
  nodeId?: string(name='NodeId', example='node_be1c2f70'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-anhtskts'),
  vpdId?: string(name='VpdId', example='vpd-fuliephf'),
}

model ListLniPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2022-10-31 10:56:51'),
        ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
        ipName?: string(name='IpName', example='sip-xxxx'),
        message?: string(name='Message'),
        networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp11hq1ql7vza3k4xz7q'),
        privateIpAddress?: string(name='PrivateIpAddress', example='10.42.5.92'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        status?: string(name='Status', example='Available'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model ListLniPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLniPrivateIpAddressResponseBody(name='body'),
}

async function listLniPrivateIpAddressWithOptions(request: ListLniPrivateIpAddressRequest, runtime: Util.RuntimeOptions): ListLniPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListLniPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLniPrivateIpAddress(request: ListLniPrivateIpAddressRequest): ListLniPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLniPrivateIpAddressWithOptions(request, runtime);
}

model ListNetworkInterfacesRequest {
  clientToken?: string(name='ClientToken', example='967e77a2-b61d-11ec-a147-0242c0a80504'),
  enablePage?: boolean(name='EnablePage', example='false'),
  ip?: string(name='Ip', example='203.107.46.227'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  nodeId?: string(name='NodeId', example='r-2ze121o4uhr4np3r5t-db-5'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-anhtskts'),
  vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
}

model ListNetworkInterfacesResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        ethernet?: [ string ](name='Ethernet'),
        gateway?: string(name='Gateway', example='192.168.10.100'),
        gmtCreate?: string(name='GmtCreate', example='2022-10-31 10:56:51'),
        ip?: string(name='Ip', example='33.7.91.174'),
        networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze50voovmtswn328ogm'),
        nodeId?: string(name='NodeId', example='2d53f5c204e7476dae69177e7fa6f19c'),
        privateIpAddressMacGroup?: [ 
          {
            ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
            ipName?: string(name='IpName', example='sip-xxxx'),
            message?: string(name='Message', example='success'),
            privateIpAddress?: string(name='PrivateIpAddress', example='172.21.160.152'),
            status?: string(name='Status', example='Available'),
          }
        ](name='PrivateIpAddressMacGroup'),
        quota?: int32(name='Quota', example='6'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        serviceMac?: string(name='ServiceMac', example='00-ff-84-15-ba-67'),
        status?: string(name='Status', example='Available'),
        subnetBaseInfo?: {
          cidr?: string(name='Cidr', example='172.16.0.0/14'),
          gmtCreate?: string(name='GmtCreate', example='2022-05-12 14:06:06'),
          name?: string(name='Name', example='test'),
          subnetId?: string(name='SubnetId', example='subnet-yjnqn5ef'),
        }(name='SubnetBaseInfo'),
        tenantId?: string(name='TenantId', example='1620939556166279'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/13'),
          gmtCreate?: string(name='GmtCreate', example='2022-11-04 00:00:00'),
          name?: string(name='Name'),
          vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
        }(name='VpdBaseInfo'),
        zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model ListNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkInterfacesResponseBody(name='body'),
}

async function listNetworkInterfacesWithOptions(request: ListNetworkInterfacesRequest, runtime: Util.RuntimeOptions): ListNetworkInterfacesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNetworkInterfaces',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNetworkInterfaces(request: ListNetworkInterfacesRequest): ListNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNetworkInterfacesWithOptions(request, runtime);
}

model UnAssignPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken', example='141cccd6-dfbd-11ec-b8e8-0242ac110003'),
  ipName?: string(name='IpName', example='sip-xxxx'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.209.75.242'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
}

model UnAssignPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    ipName?: string(name='IpName', example='sip-xxxxx'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp164jwjpdq4lnsy83s5'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model UnAssignPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnAssignPrivateIpAddressResponseBody(name='body'),
}

async function unAssignPrivateIpAddressWithOptions(request: UnAssignPrivateIpAddressRequest, runtime: Util.RuntimeOptions): UnAssignPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipName)) {
    body['IpName'] = request.ipName;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    body['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnAssignPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unAssignPrivateIpAddress(request: UnAssignPrivateIpAddressRequest): UnAssignPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unAssignPrivateIpAddressWithOptions(request, runtime);
}

model UpdateVccRequest {
  bandwidth?: int32(name='Bandwidth', example='1000'),
  orderId?: string(name='OrderId', example='20006627643'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  vccName?: string(name='VccName', example='vcc-heyuan-backup'),
}

model UpdateVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vccId?: string(name='VccId', example='vcc-cn-2r42v22cn03'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F906C4D3-7444-58E2-9819-E3D8563571A3'),
}

model UpdateVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVccResponseBody(name='body'),
}

async function updateVccWithOptions(request: UpdateVccRequest, runtime: Util.RuntimeOptions): UpdateVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bandwidth)) {
    body['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.orderId)) {
    body['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vccId)) {
    body['VccId'] = request.vccId;
  }
  if (!Util.isUnset(request.vccName)) {
    body['VccName'] = request.vccName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVcc(request: UpdateVccRequest): UpdateVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVccWithOptions(request, runtime);
}

