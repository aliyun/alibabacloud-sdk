/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eflo', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssignPrivateIpAddressRequest {
  assignMac?: boolean(name='AssignMac', example='true'),
  clientToken?: string(name='ClientToken', example='3fd79d62-ab1d-11ec-9a53-0242ac110004'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.0.6.194'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
}

model AssignPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    ipName?: string(name='IpName', example='sip-xxxx'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model AssignPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignPrivateIpAddressResponseBody(name='body'),
}

async function assignPrivateIpAddressWithOptions(request: AssignPrivateIpAddressRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assignMac)) {
    body['AssignMac'] = request.assignMac;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    body['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssignPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignPrivateIpAddress(request: AssignPrivateIpAddressRequest): AssignPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressWithOptions(request, runtime);
}

model CreateSubnetRequest {
  cidr?: string(name='Cidr', example='10.0.0.0/16'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetName?: string(name='SubnetName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  type?: string(name='Type', example='OOB'),
  vpdId?: string(name='VpdId', example='vpd-xcuhjyrj'),
  zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
}

model CreateSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', example='subnet-yuvn29bn'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model CreateSubnetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubnetResponseBody(name='body'),
}

async function createSubnetWithOptions(request: CreateSubnetRequest, runtime: Util.RuntimeOptions): CreateSubnetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cidr)) {
    body['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetName)) {
    body['SubnetName'] = request.subnetName;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubnet',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubnet(request: CreateSubnetRequest): CreateSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubnetWithOptions(request, runtime);
}

model CreateVccRequest {
  accessCouldService?: boolean(name='AccessCouldService', example='true'),
  bgpCidr?: string(name='BgpCidr', example='10.0.0.0/24'),
  cenId?: string(name='CenId', example='cen-bkiw0x1347roekr7f2'),
  connectionType?: string(name='ConnectionType'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-t4nahb0pxckgktx1kot8q'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  vccName?: string(name='VccName'),
  vpcId?: string(name='VpcId', example='vpc-uf6aa4ddo97frj22tgp52'),
  vpdId?: string(name='VpdId', example='vpd-t2jseldp'),
  zoneId?: string(name='ZoneId'),
}

model CreateVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model CreateVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVccResponseBody(name='body'),
}

async function createVccWithOptions(request: CreateVccRequest, runtime: Util.RuntimeOptions): CreateVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessCouldService)) {
    body['AccessCouldService'] = request.accessCouldService;
  }
  if (!Util.isUnset(request.bgpCidr)) {
    body['BgpCidr'] = request.bgpCidr;
  }
  if (!Util.isUnset(request.cenId)) {
    body['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.connectionType)) {
    body['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    body['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vccId)) {
    body['VccId'] = request.vccId;
  }
  if (!Util.isUnset(request.vccName)) {
    body['VccName'] = request.vccName;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVcc(request: CreateVccRequest): CreateVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVccWithOptions(request, runtime);
}

model CreateVpdRequest {
  cidr?: string(name='Cidr', example='10.0.0.0/8'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  subnets?: [ 
    {
      cidr?: string(name='Cidr', example='10.1.0.0/16'),
      clientToken?: string(name='ClientToken'),
      regionId?: string(name='RegionId', example='cn-wulanchabu'),
      subnetName?: string(name='SubnetName'),
      type?: string(name='Type', example='None'),
      zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
    }
  ](name='Subnets'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vpdName?: string(name='VpdName'),
}

model CreateVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetIds?: [ string ](name='SubnetIds'),
    vpdId?: string(name='VpdId', example='vpd-eoiy88ju'),
  }(name='Content'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateVpdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpdResponseBody(name='body'),
}

async function createVpdWithOptions(request: CreateVpdRequest, runtime: Util.RuntimeOptions): CreateVpdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cidr)) {
    body['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.subnets)) {
    body['Subnets'] = request.subnets;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpdName)) {
    body['VpdName'] = request.vpdName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpd',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpd(request: CreateVpdRequest): CreateVpdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpdWithOptions(request, runtime);
}

model CreateVpdGrantRuleRequest {
  erId?: string(name='ErId', example='er-kkopgtne'),
  grantTenantId?: string(name='GrantTenantId', example='xxxxxxxxxxxxxxxx'),
  instanceId?: string(name='InstanceId', example='vpd-xxxxxxxxxxx'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model CreateVpdGrantRuleResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    grantRuleId?: string(name='GrantRuleId', example='grant-rule-xxxxxxxx'),
  }(name='Content', example='{}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model CreateVpdGrantRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpdGrantRuleResponseBody(name='body'),
}

async function createVpdGrantRuleWithOptions(request: CreateVpdGrantRuleRequest, runtime: Util.RuntimeOptions): CreateVpdGrantRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.erId)) {
    body['ErId'] = request.erId;
  }
  if (!Util.isUnset(request.grantTenantId)) {
    body['GrantTenantId'] = request.grantTenantId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpdGrantRule',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVpdGrantRule(request: CreateVpdGrantRuleRequest): CreateVpdGrantRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpdGrantRuleWithOptions(request, runtime);
}

model DeleteSubnetRequest {
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
  vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
  zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
}

model DeleteSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model DeleteSubnetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubnetResponseBody(name='body'),
}

async function deleteSubnetWithOptions(request: DeleteSubnetRequest, runtime: Util.RuntimeOptions): DeleteSubnetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubnet',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSubnet(request: DeleteSubnetRequest): DeleteSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubnetWithOptions(request, runtime);
}

model DeleteVpdRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vpdId?: string(name='VpdId', example='vpd-zr0farea'),
}

model DeleteVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{
      "subnet": [
            {
                  "tenantId": "1620939556166277",
                  "regionId": "cn-wulanchabu",
                  "zoneId": "cn",
                  "type": null,
                  "subnetId": "subnet-zqebaxa0",
                  "name": "lql_testVPD"
            }
      ],
      "nc": [
            {}
      ]
}'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='BDBCC783-84CA-5733-8EEA-645C88B9009C'),
}

model DeleteVpdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpdResponseBody(name='body'),
}

async function deleteVpdWithOptions(request: DeleteVpdRequest, runtime: Util.RuntimeOptions): DeleteVpdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpd',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpd(request: DeleteVpdRequest): DeleteVpdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpdWithOptions(request, runtime);
}

model DeleteVpdGrantRuleRequest {
  erId?: string(name='ErId', example='er-kkopgtne'),
  grantRuleId?: string(name='GrantRuleId', example='grant-rule-xxxxxxxx'),
  grantTenantId?: string(name='GrantTenantId', example='xxxxxxxxxxxxxxxx'),
  instanceId?: string(name='InstanceId', example='vpd-xxxxxxxxx'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model DeleteVpdGrantRuleResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: any(name='Content', example='{}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model DeleteVpdGrantRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpdGrantRuleResponseBody(name='body'),
}

async function deleteVpdGrantRuleWithOptions(request: DeleteVpdGrantRuleRequest, runtime: Util.RuntimeOptions): DeleteVpdGrantRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.erId)) {
    body['ErId'] = request.erId;
  }
  if (!Util.isUnset(request.grantRuleId)) {
    body['GrantRuleId'] = request.grantRuleId;
  }
  if (!Util.isUnset(request.grantTenantId)) {
    body['GrantTenantId'] = request.grantTenantId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpdGrantRule',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpdGrantRule(request: DeleteVpdGrantRuleRequest): DeleteVpdGrantRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpdGrantRuleWithOptions(request, runtime);
}

model DescribeSlrRequest {
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aeky5f3qx6ceapq'),
}

model DescribeSlrResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    hasRole?: boolean(name='HasRole', example='true'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model DescribeSlrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlrResponseBody(name='body'),
}

async function describeSlrWithOptions(request: DescribeSlrRequest, runtime: Util.RuntimeOptions): DescribeSlrResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlr',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlr(request: DescribeSlrRequest): DescribeSlrResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlrWithOptions(request, runtime);
}

model GetLniPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken'),
  ipName?: string(name='IpName', example='sip-xxxxx'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model GetLniPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    gmtCreate?: string(name='GmtCreate', example='2022-12-26 20:16:36'),
    ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
    ipName?: string(name='IpName', example='sip-xxxxx'),
    message?: string(name='Message'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze4uww7n6hsfzrwq77y'),
    privateIpAddress?: string(name='PrivateIpAddress', example='10.42.5.92'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    status?: string(name='Status', example='Available'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DBAD15D6-3F47-5B36-8A92-57C2919D13D0'),
}

model GetLniPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLniPrivateIpAddressResponseBody(name='body'),
}

async function getLniPrivateIpAddressWithOptions(request: GetLniPrivateIpAddressRequest, runtime: Util.RuntimeOptions): GetLniPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipName)) {
    body['IpName'] = request.ipName;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLniPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLniPrivateIpAddress(request: GetLniPrivateIpAddressRequest): GetLniPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLniPrivateIpAddressWithOptions(request, runtime);
}

model GetSubnetRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  subnetId?: string(name='SubnetId', example='subnet-2avf0itf'),
  vpdId?: string(name='VpdId'),
}

model GetSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    availableIps?: int32(name='AvailableIps'),
    cidr?: string(name='Cidr', example='10.10.10.0/24'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    gmtModified?: string(name='GmtModified', example='2022-04-11 15:19:58'),
    lbCount?: long(name='LbCount', example='0'),
    message?: string(name='Message'),
    ncCount?: long(name='NcCount', example='16'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status', example='Available'),
    subnetId?: string(name='SubnetId', example='subnet-aj93mko8'),
    subnetName?: string(name='SubnetName'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    tenantId?: string(name='TenantId', example='1655449505171'),
    type?: string(name='Type', example='OOB'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', example='10.0.0.0/8'),
      createTime?: string(name='CreateTime'),
      vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
      vpdName?: string(name='VpdName'),
    }(name='VpdBaseInfo'),
    vpdId?: string(name='VpdId', example='vpd-ze3na0wf'),
    zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0901F411-28FA-5B9C-BAEE-7776463FF0DC'),
}

model GetSubnetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubnetResponseBody(name='body'),
}

async function getSubnetWithOptions(request: GetSubnetRequest, runtime: Util.RuntimeOptions): GetSubnetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSubnet',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubnet(request: GetSubnetRequest): GetSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubnetWithOptions(request, runtime);
}

model GetVccRequest {
  enablePage?: boolean(name='EnablePage'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
}

model GetVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-jy-A-oxs'),
    aliyunRouterInfo?: [ 
      {
        localGatewayIp?: string(name='LocalGatewayIp', example='169.254.248.30'),
        mask?: string(name='Mask', example='255.255.255.248'),
        pcId?: string(name='PcId', example='pc-0jlof4bphlsnxbdztkvad'),
        peerGatewayIp?: string(name='PeerGatewayIp', example='169.254.248.28'),
        vbrId?: string(name='VbrId', example='vbr-2ze4i85p6vb9nwcan5xt0'),
        vlanId?: string(name='VlanId', example='1042'),
      }
    ](name='AliyunRouterInfo'),
    attachErStatus?: boolean(name='AttachErStatus'),
    bandwidthStr?: string(name='BandwidthStr', example='1G'),
    bgpCidr?: string(name='BgpCidr', example='10.4.0.0/24'),
    cenId?: string(name='CenId', example='cen-m2iskbojlvda5w65fp'),
    cisRouterInfo?: [ 
      {
        ccInfos?: [ 
          {
            ccId?: string(name='CcId', example='cc-73aeex5o'),
            localGatewayIp?: string(name='LocalGatewayIp', example='169.254.248.26'),
            remoteGatewayIp?: string(name='RemoteGatewayIp', example='169.254.248.30'),
            status?: string(name='Status', example='Established'),
            subnetMask?: string(name='SubnetMask', example='255.255.255.248'),
            vlanId?: string(name='VlanId', description='vlanid', example='Ethernet1042'),
          }
        ](name='CcInfos'),
        ccrId?: string(name='CcrId', example='ccr-1ms84am0'),
      }
    ](name='CisRouterInfo'),
    commodityCode?: string(name='CommodityCode', example='bccluster_cloudconnectionpre_public_cn'),
    connectionType?: string(name='ConnectionType'),
    createTime?: string(name='CreateTime', example='1648085472000'),
    currentNode?: string(name='CurrentNode'),
    duration?: string(name='Duration', example='1'),
    erInfos?: [ 
      {
        connections?: long(name='Connections'),
        createTime?: string(name='CreateTime'),
        description?: string(name='Description'),
        erId?: string(name='ErId'),
        erName?: string(name='ErName'),
        gmtModified?: string(name='GmtModified'),
        masterZoneId?: string(name='MasterZoneId'),
        message?: string(name='Message'),
        regionId?: string(name='RegionId'),
        routeMaps?: long(name='RouteMaps'),
        status?: string(name='Status'),
        tenantId?: string(name='TenantId'),
      }
    ](name='ErInfos'),
    expirationDate?: string(name='ExpirationDate'),
    gmtModified?: string(name='GmtModified', example='1648085472000'),
    internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
    lineOperator?: string(name='LineOperator', example='Other'),
    message?: string(name='Message'),
    payType?: string(name='PayType', example='PrePay'),
    portType?: string(name='PortType', example='100G'),
    pricingCycle?: string(name='PricingCycle', example='Month'),
    regionId?: string(name='RegionId', example='cn-wulanchabu'),
    resourceGroupId?: string(name='ResourceGroupId'),
    spec?: string(name='Spec', example='Large'),
    status?: string(name='Status', example='Available'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    tenantId?: string(name='TenantId', example='NFZLWCNY'),
    vSwitchId?: string(name='VSwitchId', example='vsw-uf6u8473r84e6n1n19he5'),
    vccId?: string(name='VccId', example='vcc-cn-cqf2xh40101'),
    vccName?: string(name='VccName', example='vcc-heyuan-backup'),
    vpcId?: string(name='VpcId', example='vpc-j6ctp4n75306phv5tmpsm'),
    vpdBaseInfo?: {
      cidr?: string(name='Cidr', example='172.18.0.0/24'),
      createTime?: string(name='CreateTime'),
      vpdId?: string(name='VpdId', example='vpd-ppdunxzc'),
      vpdName?: string(name='VpdName'),
    }(name='VpdBaseInfo'),
    vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
    zoneId?: string(name='ZoneId'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CAD09E47-B651-5206-B2DC-3AB78C8EB446'),
}

model GetVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVccResponseBody(name='body'),
}

async function getVccWithOptions(request: GetVccRequest, runtime: Util.RuntimeOptions): GetVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vccId)) {
    body['VccId'] = request.vccId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVcc(request: GetVccRequest): GetVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVccWithOptions(request, runtime);
}

model GetVpdRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  vpdId?: string(name='VpdId', example='vpd-ze3na0wf'),
}

model GetVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    attachErStatus?: boolean(name='AttachErStatus'),
    cidr?: string(name='Cidr', example='10.0.0.0/8'),
    createTime?: string(name='CreateTime'),
    erInfos?: [ 
      {
        connections?: long(name='Connections'),
        createTime?: string(name='CreateTime'),
        description?: string(name='Description'),
        erId?: string(name='ErId'),
        erName?: string(name='ErName'),
        gmtModified?: string(name='GmtModified'),
        masterZoneId?: string(name='MasterZoneId'),
        message?: string(name='Message'),
        regionId?: string(name='RegionId'),
        routeMaps?: long(name='RouteMaps'),
        status?: string(name='Status'),
        tenantId?: string(name='TenantId'),
      }
    ](name='ErInfos'),
    gmtModified?: string(name='GmtModified', example='2022-12-26 20:16:36'),
    message?: string(name='Message'),
    ncCount?: long(name='NcCount', example='16'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId'),
    serviceCidr?: string(name='ServiceCidr', example='169.254.252.0/23'),
    status?: string(name='Status', example='Available'),
    subnetCount?: long(name='SubnetCount', example='1'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    tenantId?: string(name='TenantId'),
    vpdId?: string(name='VpdId', example='vpd-fuliephf'),
    vpdName?: string(name='VpdName'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model GetVpdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVpdResponseBody(name='body'),
}

async function getVpdWithOptions(request: GetVpdRequest, runtime: Util.RuntimeOptions): GetVpdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVpd',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVpd(request: GetVpdRequest): GetVpdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpdWithOptions(request, runtime);
}

model InitializeVccRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model InitializeVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
    roleName?: string(name='RoleName', example='CloudConnectionOperationRole'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E30DA7CB-03D0-51EB-8F18-856B99987E18'),
}

model InitializeVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeVccResponseBody(name='body'),
}

async function initializeVccWithOptions(request: InitializeVccRequest, runtime: Util.RuntimeOptions): InitializeVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InitializeVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initializeVcc(request: InitializeVccRequest): InitializeVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeVccWithOptions(request, runtime);
}

model ListLniPrivateIpAddressRequest {
  enablePage?: boolean(name='EnablePage', example='false'),
  ip?: string(name='Ip', example='10.0.98.10'),
  ipName?: string(name='IpName'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze4uww7n6hsfzrwq77y'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model ListLniPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2022-10-31 10:56:51'),
        ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
        ipName?: string(name='IpName', example='sip-xxxx'),
        message?: string(name='Message'),
        networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp11hq1ql7vza3k4xz7q'),
        privateIpAddress?: string(name='PrivateIpAddress', example='10.42.5.92'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        status?: string(name='Status', example='Available'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model ListLniPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLniPrivateIpAddressResponseBody(name='body'),
}

async function listLniPrivateIpAddressWithOptions(request: ListLniPrivateIpAddressRequest, runtime: Util.RuntimeOptions): ListLniPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.ipName)) {
    body['IpName'] = request.ipName;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListLniPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLniPrivateIpAddress(request: ListLniPrivateIpAddressRequest): ListLniPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLniPrivateIpAddressWithOptions(request, runtime);
}

model ListNetworkInterfacesRequest {
  enablePage?: boolean(name='EnablePage', example='false'),
  ip?: string(name='Ip', example='203.107.46.227'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  nodeId?: string(name='NodeId', example='r-2ze121o4uhr4np3r5t-db-5'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-anhtskts'),
  vpdId?: string(name='VpdId', example='vpd-iv2zm1qf'),
}

model ListNetworkInterfacesResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime'),
        ethernet?: [ string ](name='Ethernet'),
        gateway?: string(name='Gateway', example='192.168.10.100'),
        ip?: string(name='Ip', example='33.7.91.174'),
        ncType?: string(name='NcType'),
        networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-2ze50voovmtswn328ogm'),
        nodeId?: string(name='NodeId', example='2d53f5c204e7476dae69177e7fa6f19c'),
        privateIpAddressMacGroup?: [ 
          {
            ipAddressMac?: string(name='IpAddressMac', example='00-ff-84-15-ba-67'),
            ipName?: string(name='IpName', example='sip-xxxx'),
            message?: string(name='Message', example='success'),
            privateIpAddress?: string(name='PrivateIpAddress', example='172.21.160.152'),
            status?: string(name='Status', example='Available'),
          }
        ](name='PrivateIpAddressMacGroup'),
        quota?: int32(name='Quota', example='6'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        serviceMac?: string(name='ServiceMac', example='00-ff-84-15-ba-67'),
        status?: string(name='Status', example='Available'),
        subnetBaseInfo?: {
          cidr?: string(name='Cidr', example='172.16.0.0/14'),
          gmtCreate?: string(name='GmtCreate', example='2022-05-12 14:06:06'),
          name?: string(name='Name', example='test'),
          subnetId?: string(name='SubnetId', example='subnet-yjnqn5ef'),
        }(name='SubnetBaseInfo'),
        tenantId?: string(name='TenantId', example='1620939556166279'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/13'),
          createTime?: string(name='CreateTime'),
          vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
          vpdName?: string(name='VpdName'),
        }(name='VpdBaseInfo'),
        zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='039C3C3A-3C37-5672-80D5-D8CD48C676D1'),
}

model ListNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkInterfacesResponseBody(name='body'),
}

async function listNetworkInterfacesWithOptions(request: ListNetworkInterfacesRequest, runtime: Util.RuntimeOptions): ListNetworkInterfacesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.ip)) {
    body['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNetworkInterfaces',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNetworkInterfaces(request: ListNetworkInterfacesRequest): ListNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNetworkInterfacesWithOptions(request, runtime);
}

model ListSubnetsRequest {
  enablePage?: boolean(name='EnablePage', example='false'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Available'),
  subnetId?: string(name='SubnetId', example='subnet-anhtskts'),
  subnetName?: string(name='SubnetName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  type?: string(name='Type', example='None'),
  vpdId?: string(name='VpdId', example='vpd-fuliephf'),
  zoneId?: string(name='ZoneId', example='cn-wulanchabu-a'),
}

model ListSubnetsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', example='172.18.0.0/24'),
        createTime?: string(name='CreateTime'),
        gmtModified?: string(name='GmtModified', example='2022-04-11 15:19:58'),
        message?: string(name='Message'),
        ncCount?: long(name='NcCount', example='16'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId'),
        status?: string(name='Status', example='Available'),
        subnetId?: string(name='SubnetId', example='subnet-c6wci55i'),
        subnetName?: string(name='SubnetName'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        tenantId?: string(name='TenantId', example='1655449505171'),
        type?: string(name='Type', example='OOB'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/8'),
          createTime?: string(name='CreateTime'),
          vpdId?: string(name='VpdId', example='vpd-d3isyds4'),
          vpdName?: string(name='VpdName'),
        }(name='VpdBaseInfo'),
        vpdId?: string(name='VpdId', example='vpd-ze3na0wf'),
        zoneId?: string(name='ZoneId', example='cn-wulanchabu-b'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='7F9082CC-3D94-560F-A575-8E8EF6CE2CB8'),
}

model ListSubnetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubnetsResponseBody(name='body'),
}

async function listSubnetsWithOptions(request: ListSubnetsRequest, runtime: Util.RuntimeOptions): ListSubnetsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.subnetName)) {
    body['SubnetName'] = request.subnetName;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSubnets',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubnets(request: ListSubnetsRequest): ListSubnetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubnetsWithOptions(request, runtime);
}

model ListVccGrantRulesRequest {
  enablePage?: boolean(name='EnablePage', example='false'),
  erId?: string(name='ErId', example='er-kkopgtne'),
  forSelect?: boolean(name='ForSelect', example='true'),
  grantRuleId?: string(name='GrantRuleId', example='grant-rule-xxxxxxxx'),
  grantTenantId?: string(name='GrantTenantId', example='xxxxxxxxxxxxxxxx'),
  instanceId?: string(name='InstanceId', example='vpd-xxxxxxxxxxx'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model ListVccGrantRulesResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', example='2021-12-06T06:02:36Z'),
        erId?: string(name='ErId', example='er-kkopgtne'),
        grantRuleId?: string(name='GrantRuleId', example='xxxxxxxxxxxxx'),
        grantTenantId?: string(name='GrantTenantId', example='xxxxxxxxxxxxx'),
        instanceId?: string(name='InstanceId', example='vcc-xxxxxxxxxx'),
        instanceName?: string(name='InstanceName'),
        product?: string(name='Product', example='VCC'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        tenantId?: string(name='TenantId', example='1655449505171'),
        used?: boolean(name='Used', example='true'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model ListVccGrantRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVccGrantRulesResponseBody(name='body'),
}

async function listVccGrantRulesWithOptions(request: ListVccGrantRulesRequest, runtime: Util.RuntimeOptions): ListVccGrantRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.erId)) {
    body['ErId'] = request.erId;
  }
  if (!Util.isUnset(request.forSelect)) {
    body['ForSelect'] = request.forSelect;
  }
  if (!Util.isUnset(request.grantRuleId)) {
    body['GrantRuleId'] = request.grantRuleId;
  }
  if (!Util.isUnset(request.grantTenantId)) {
    body['GrantTenantId'] = request.grantTenantId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVccGrantRules',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVccGrantRules(request: ListVccGrantRulesRequest): ListVccGrantRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVccGrantRulesWithOptions(request, runtime);
}

model ListVccsRequest {
  bandwidth?: int32(name='Bandwidth', example='5000'),
  cenId?: string(name='CenId', example='cen-95iwtpyvj3kk1v0ao0'),
  enablePage?: boolean(name='EnablePage', example='false'),
  exStatus?: string(name='ExStatus', example='Prepaid'),
  filterErId?: string(name='FilterErId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  vpcId?: string(name='VpcId', example='vpc-bp1nrtkmamy329u6a1z0i'),
  vpdId?: string(name='VpdId', example='vpd-omqutbff'),
}

model ListVccsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        accessPointId?: string(name='AccessPointId', example='ap-cn-beijing-hd-A'),
        bandwidthStr?: string(name='BandwidthStr', example='1000'),
        bgpCidr?: string(name='BgpCidr', example='172.16.128.0/24'),
        cenId?: string(name='CenId', example='cen-w15qot0pfvs83pkckj'),
        commodityCode?: string(name='CommodityCode'),
        connectionType?: string(name='ConnectionType'),
        createTime?: string(name='CreateTime', example='2022-07-29 19:16:09'),
        currentNode?: string(name='CurrentNode'),
        erInfos?: [ 
          {
            connections?: long(name='Connections'),
            createTime?: string(name='CreateTime'),
            description?: string(name='Description'),
            erId?: string(name='ErId'),
            erName?: string(name='ErName'),
            gmtModified?: string(name='GmtModified'),
            masterZoneId?: string(name='MasterZoneId'),
            message?: string(name='Message'),
            regionId?: string(name='RegionId'),
            routeMaps?: long(name='RouteMaps'),
            status?: string(name='Status'),
            tenantId?: string(name='TenantId'),
          }
        ](name='ErInfos'),
        expirationDate?: string(name='ExpirationDate'),
        gmtModified?: string(name='GmtModified', example='2022-05-12 14:06:06'),
        lineOperator?: string(name='LineOperator', example='Other'),
        message?: string(name='Message'),
        portType?: string(name='PortType', example='10GBase-LR'),
        rate?: double(name='Rate', example='1'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        resourceGroupId?: string(name='ResourceGroupId'),
        spec?: string(name='Spec', example='Large'),
        status?: string(name='Status', example='Init'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        taskId?: string(name='TaskId'),
        tenantId?: string(name='TenantId', example='t39qj7nlruwu8'),
        vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
        vccName?: string(name='VccName', example='vcc-heyuan-backup'),
        vpcId?: string(name='VpcId', example='vpc-f8ziirfl9k25h2qn7y4f8'),
        vpdBaseInfo?: {
          cidr?: string(name='Cidr', example='10.0.0.0/13'),
          createTime?: string(name='CreateTime'),
          vpdId?: string(name='VpdId', example='vpd-9n7ioqrp'),
          vpdName?: string(name='VpdName'),
        }(name='VpdBaseInfo'),
        vpdId?: string(name='VpdId', example='vpd-eoiy88ju'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='28451248-7038-5184-B5D3-80F104654BE8'),
}

model ListVccsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVccsResponseBody(name='body'),
}

async function listVccsWithOptions(request: ListVccsRequest, runtime: Util.RuntimeOptions): ListVccsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bandwidth)) {
    body['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.cenId)) {
    body['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.exStatus)) {
    body['ExStatus'] = request.exStatus;
  }
  if (!Util.isUnset(request.filterErId)) {
    body['FilterErId'] = request.filterErId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vccId)) {
    body['VccId'] = request.vccId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVccs',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVccs(request: ListVccsRequest): ListVccsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVccsWithOptions(request, runtime);
}

model ListVpdGrantRulesRequest {
  enablePage?: boolean(name='EnablePage', example='false'),
  erId?: string(name='ErId', example='er-kkopgtne'),
  forSelect?: boolean(name='ForSelect', example='true'),
  grantRuleId?: string(name='GrantRuleId', example='grant-rule-xxxxx'),
  grantTenantId?: string(name='GrantTenantId', example='1620939556166279'),
  instanceId?: string(name='InstanceId', example='vpd-xxxxxxxxxx'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
}

model ListVpdGrantRulesResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', example='1643013506000'),
        erId?: string(name='ErId', example='er-kkopgtne'),
        grantRuleId?: string(name='GrantRuleId', example='grant-rule-xxxxxxxx'),
        grantTenantId?: string(name='GrantTenantId', example='1672372231790'),
        instanceId?: string(name='InstanceId', example='vpd-xxxxxxxx'),
        instanceName?: string(name='InstanceName'),
        product?: string(name='Product', example='VPD'),
        regionId?: string(name='RegionId', example='cn-wulanchabu'),
        tenantId?: string(name='TenantId', example='1655449505171'),
        used?: boolean(name='Used', example='true'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A56F7D3C-8850-5AF4-A342-2D71C9A9D1CC'),
}

model ListVpdGrantRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpdGrantRulesResponseBody(name='body'),
}

async function listVpdGrantRulesWithOptions(request: ListVpdGrantRulesRequest, runtime: Util.RuntimeOptions): ListVpdGrantRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.erId)) {
    body['ErId'] = request.erId;
  }
  if (!Util.isUnset(request.forSelect)) {
    body['ForSelect'] = request.forSelect;
  }
  if (!Util.isUnset(request.grantRuleId)) {
    body['GrantRuleId'] = request.grantRuleId;
  }
  if (!Util.isUnset(request.grantTenantId)) {
    body['GrantTenantId'] = request.grantTenantId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVpdGrantRules',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpdGrantRules(request: ListVpdGrantRulesRequest): ListVpdGrantRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpdGrantRulesWithOptions(request, runtime);
}

model ListVpdsRequest {
  clientToken?: string(name='ClientToken'),
  enablePage?: boolean(name='EnablePage', example='false'),
  filterErId?: string(name='FilterErId', example='er-kkopgtne'),
  forSelect?: boolean(name='ForSelect', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vpdId?: string(name='VpdId', example='vpd-fuliephf'),
  vpdName?: string(name='VpdName'),
  withDependence?: boolean(name='WithDependence', example='false'),
  withoutVcc?: boolean(name='WithoutVcc', example='true'),
}

model ListVpdsResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    data?: [ 
      {
        cidr?: string(name='Cidr', example='10.0.0.0/8'),
        createTime?: string(name='CreateTime'),
        dependence?: map[string]any(name='Dependence'),
        erInfos?: [ 
          {
            connections?: long(name='Connections'),
            createTime?: string(name='CreateTime'),
            description?: string(name='Description'),
            erId?: string(name='ErId'),
            erName?: string(name='ErName'),
            gmtModified?: string(name='GmtModified'),
            masterZoneId?: string(name='MasterZoneId'),
            message?: string(name='Message'),
            regionId?: string(name='RegionId'),
            routeMaps?: long(name='RouteMaps'),
            status?: string(name='Status'),
            tenantId?: string(name='TenantId'),
          }
        ](name='ErInfos'),
        gmtModified?: string(name='GmtModified', example='2022-12-26 20:16:36'),
        message?: string(name='Message', example='success'),
        ncCount?: int32(name='NcCount', example='16'),
        regionId?: string(name='RegionId', example='cn-beijing'),
        resourceGroupId?: string(name='ResourceGroupId'),
        serviceCidr?: string(name='ServiceCidr', example='169.254.252.0/23'),
        status?: string(name='Status', example='Available'),
        subnetCount?: int32(name='SubnetCount', example='1'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        tenantId?: string(name='TenantId'),
        vpdId?: string(name='VpdId', description='vpd id', example='vpd-lg4dppgi'),
        vpdName?: string(name='VpdName'),
      }
    ](name='Data'),
    total?: long(name='Total', example='0'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9C50C9CD-E799-54DA-BA7A-1FAF3DF80857'),
}

model ListVpdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpdsResponseBody(name='body'),
}

async function listVpdsWithOptions(request: ListVpdsRequest, runtime: Util.RuntimeOptions): ListVpdsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enablePage)) {
    body['EnablePage'] = request.enablePage;
  }
  if (!Util.isUnset(request.filterErId)) {
    body['FilterErId'] = request.filterErId;
  }
  if (!Util.isUnset(request.forSelect)) {
    body['ForSelect'] = request.forSelect;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.vpdName)) {
    body['VpdName'] = request.vpdName;
  }
  if (!Util.isUnset(request.withDependence)) {
    body['WithDependence'] = request.withDependence;
  }
  if (!Util.isUnset(request.withoutVcc)) {
    body['WithoutVcc'] = request.withoutVcc;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListVpds',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVpds(request: ListVpdsRequest): ListVpdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpdsWithOptions(request, runtime);
}

model UnAssignPrivateIpAddressRequest {
  clientToken?: string(name='ClientToken', example='141cccd6-dfbd-11ec-b8e8-0242ac110003'),
  ipName?: string(name='IpName', example='sip-xxxx'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp18exxqa2rvfn45e5pz'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.209.75.242'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
}

model UnAssignPrivateIpAddressResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    ipName?: string(name='IpName', example='sip-xxxxx'),
    networkInterfaceId?: string(name='NetworkInterfaceId', example='lni-bp164jwjpdq4lnsy83s5'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A88DFED5-24B7-5A3E-87DE-380BF06F3C90'),
}

model UnAssignPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnAssignPrivateIpAddressResponseBody(name='body'),
}

async function unAssignPrivateIpAddressWithOptions(request: UnAssignPrivateIpAddressRequest, runtime: Util.RuntimeOptions): UnAssignPrivateIpAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipName)) {
    body['IpName'] = request.ipName;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    body['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    body['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnAssignPrivateIpAddress',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unAssignPrivateIpAddress(request: UnAssignPrivateIpAddressRequest): UnAssignPrivateIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unAssignPrivateIpAddressWithOptions(request, runtime);
}

model UpdateSubnetRequest {
  description?: string(name='Description'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  subnetId?: string(name='SubnetId', example='subnet-f3zfzmnc'),
  subnetName?: string(name='SubnetName'),
  vpdId?: string(name='VpdId', example='vpd-aof7dat1'),
  zoneId?: string(name='ZoneId', example='cn-wulanchabu-a'),
}

model UpdateSubnetResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    subnetId?: string(name='SubnetId', example='subnet-yuvn29bn'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3D9D6E7B-365B-5200-BFA6-9B79E269058C'),
}

model UpdateSubnetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSubnetResponseBody(name='body'),
}

async function updateSubnetWithOptions(request: UpdateSubnetRequest, runtime: Util.RuntimeOptions): UpdateSubnetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subnetId)) {
    body['SubnetId'] = request.subnetId;
  }
  if (!Util.isUnset(request.subnetName)) {
    body['SubnetName'] = request.subnetName;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubnet',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSubnet(request: UpdateSubnetRequest): UpdateSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubnetWithOptions(request, runtime);
}

model UpdateVccRequest {
  bandwidth?: int32(name='Bandwidth', example='1000'),
  orderId?: string(name='OrderId', example='20006627643'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  vccId?: string(name='VccId', example='vcc-cn-zvp2w222001'),
  vccName?: string(name='VccName', example='vcc-heyuan-backup'),
}

model UpdateVccResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vccId?: string(name='VccId', example='vcc-cn-2r42v22cn03'),
  }(name='Content'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F906C4D3-7444-58E2-9819-E3D8563571A3'),
}

model UpdateVccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVccResponseBody(name='body'),
}

async function updateVccWithOptions(request: UpdateVccRequest, runtime: Util.RuntimeOptions): UpdateVccResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bandwidth)) {
    body['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.orderId)) {
    body['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vccId)) {
    body['VccId'] = request.vccId;
  }
  if (!Util.isUnset(request.vccName)) {
    body['VccName'] = request.vccName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVcc',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVcc(request: UpdateVccRequest): UpdateVccResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVccWithOptions(request, runtime);
}

model UpdateVpdRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId', example='cn-wulanchabu'),
  vpdId?: string(name='VpdId', example='vpd-omqutbff'),
  vpdName?: string(name='VpdName'),
}

model UpdateVpdResponseBody = {
  code?: int32(name='Code', example='0'),
  content?: {
    vpdId?: string(name='VpdId', example='vpd-lg4dppgi'),
  }(name='Content'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='AC8C713A-A9F4-5984-A5E1-76496DF35153'),
}

model UpdateVpdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVpdResponseBody(name='body'),
}

async function updateVpdWithOptions(request: UpdateVpdRequest, runtime: Util.RuntimeOptions): UpdateVpdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vpdId)) {
    body['VpdId'] = request.vpdId;
  }
  if (!Util.isUnset(request.vpdName)) {
    body['VpdName'] = request.vpdName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVpd',
    version = '2022-05-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVpd(request: UpdateVpdRequest): UpdateVpdResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpdWithOptions(request, runtime);
}

