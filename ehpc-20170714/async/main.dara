/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EHPC';
  @version = '2017-07-14';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  computeSpotPriceLimit?: string(name='ComputeSpotPriceLimit', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', position='Query'),
  count: int32(name='Count', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
}

model AddNodesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model AddNodesResponse = {
  headers: map[string]string(name='headers'),
  body: AddNodesResponseBody(name='body'),
}

async function addNodes(request: AddNodesRequest): AddNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddNodes', 'GET', '/', 'json', false, 'json', request);
}

model AddUsersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  releaseInstance?: boolean(name='ReleaseInstance', position='Query'),
  user: [ 
    {
      group?: string(name='Group'),
      name?: string(name='Name'),
      password?: string(name='Password'),
    }
  ](name='User', position='Query'),
}

model AddUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AddUsersResponseBody(name='body'),
}

async function addUsers(request: AddUsersRequest): AddUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsers', 'GET', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  ecsOrder?: {
    compute: {
        count: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Compute'),
    login: {
        count: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Login'),
    manager: {
        count?: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Manager'),
  }(name='EcsOrder', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  application?: [ 
    {
      tag?: string(name='Tag'),
    }
  ](name='Application', position='Query'),
  computeSpotPriceLimit?: string(name='ComputeSpotPriceLimit', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', position='Query'),
  description?: string(name='Description', position='Query'),
  ecsChargeType?: string(name='EcsChargeType', position='Query'),
  ehpcVersion: string(name='EhpcVersion', position='Query'),
  haEnable?: boolean(name='HaEnable', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  name: string(name='Name', position='Query'),
  osTag: string(name='OsTag', position='Query'),
  password?: string(name='Password', position='Query'),
  remoteDirectory?: string(name='RemoteDirectory', position='Query'),
  sccClusterId?: string(name='SccClusterId', position='Query'),
  schedulerType?: string(name='SchedulerType', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  volumeId?: string(name='VolumeId', position='Query'),
  volumeMountpoint?: string(name='VolumeMountpoint', position='Query'),
  volumeProtocol?: string(name='VolumeProtocol', position='Query'),
  volumeType?: string(name='VolumeType', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'GET', '/', 'json', false, 'json', request);
}

model CreateJobTemplateRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  name: string(name='Name', position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  runasUser?: string(name='RunasUser', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  variables?: string(name='Variables', position='Query'),
}

model CreateJobTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model CreateJobTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobTemplateResponseBody(name='body'),
}

async function createJobTemplate(request: CreateJobTemplateRequest): CreateJobTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobTemplate', 'GET', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  releaseInstance?: string(name='ReleaseInstance', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'GET', '/', 'json', false, 'json', request);
}

model DeleteJobTemplatesRequest {
  regionId?: string(name='RegionId', position='Query'),
  templates: string(name='Templates', position='Query'),
}

model DeleteJobTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobTemplatesResponseBody(name='body'),
}

async function deleteJobTemplates(request: DeleteJobTemplatesRequest): DeleteJobTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobTemplates', 'GET', '/', 'json', false, 'json', request);
}

model DeleteJobsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model DeleteJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobsResponseBody(name='body'),
}

async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobs', 'GET', '/', 'json', false, 'json', request);
}

model DeleteNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  releaseInstance?: boolean(name='ReleaseInstance', position='Query'),
}

model DeleteNodesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodesResponseBody(name='body'),
}

async function deleteNodes(request: DeleteNodesRequest): DeleteNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNodes', 'GET', '/', 'json', false, 'json', request);
}

model DeleteUsersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      name?: string(name='Name'),
    }
  ](name='User', position='Query'),
}

model DeleteUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUsersResponseBody(name='body'),
}

async function deleteUsers(request: DeleteUsersRequest): DeleteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUsers', 'GET', '/', 'json', false, 'json', request);
}

model DescribeClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeClusterResponseBody = {
  clusterInfo?: {
    accountType?: string(name='AccountType'),
    applications?: {
      applicationInfo?: [ 
      {
        name?: string(name='Name'),
        tag?: string(name='Tag'),
        version?: string(name='Version'),
      }
    ](name='ApplicationInfo')
    }(name='Applications'),
    clientVersion?: string(name='ClientVersion'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    ecsChargeType?: string(name='EcsChargeType'),
    ecsInfo?: {
      compute?: {
        count?: int32(name='Count'),
        instanceType?: string(name='InstanceType'),
      }(name='Compute'),
      login?: {
        count?: int32(name='Count'),
        instanceType?: string(name='InstanceType'),
      }(name='Login'),
      manager?: {
        count?: int32(name='Count'),
        instanceType?: string(name='InstanceType'),
      }(name='Manager'),
    }(name='EcsInfo'),
    haEnable?: boolean(name='HaEnable'),
    id?: string(name='Id'),
    imageId?: string(name='ImageId'),
    imageOwnerAlias?: string(name='ImageOwnerAlias'),
    keyPairName?: string(name='KeyPairName'),
    name?: string(name='Name'),
    osTag?: string(name='OsTag'),
    regionId?: string(name='RegionId'),
    remoteDirectory?: string(name='RemoteDirectory'),
    sccClusterId?: string(name='SccClusterId'),
    schedulerType?: string(name='SchedulerType'),
    securityGroupId?: string(name='SecurityGroupId'),
    status?: string(name='Status'),
    vSwitchId?: string(name='VSwitchId'),
    volumeId?: string(name='VolumeId'),
    volumeMountpoint?: string(name='VolumeMountpoint'),
    volumeProtocol?: string(name='VolumeProtocol'),
    volumeType?: string(name='VolumeType'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'GET', '/', 'json', false, 'json', request);
}

model EditJobTemplateRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  name: string(name='Name', position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  runasUser?: string(name='RunasUser', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  variables?: string(name='Variables', position='Query'),
}

model EditJobTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model EditJobTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: EditJobTemplateResponseBody(name='body'),
}

async function editJobTemplate(request: EditJobTemplateRequest): EditJobTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditJobTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetAutoScaleConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model GetAutoScaleConfigResponseBody = {
  clusterId?: string(name='ClusterId'),
  clusterType?: string(name='ClusterType'),
  enableAutoGrow?: boolean(name='EnableAutoGrow'),
  enableAutoShrink?: boolean(name='EnableAutoShrink'),
  excludeNodes?: string(name='ExcludeNodes'),
  extraNodesGrowRatio?: int32(name='ExtraNodesGrowRatio'),
  growIntervalInMinutes?: int32(name='GrowIntervalInMinutes'),
  growRatio?: int32(name='GrowRatio'),
  growTimeoutInMinutes?: int32(name='GrowTimeoutInMinutes'),
  maxNodesInCluster?: int32(name='MaxNodesInCluster'),
  requestId?: string(name='RequestId'),
  shrinkIdleTimes?: int32(name='ShrinkIdleTimes'),
  shrinkIntervalInMinutes?: int32(name='ShrinkIntervalInMinutes'),
  uid?: string(name='Uid'),
}

model GetAutoScaleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutoScaleConfigResponseBody(name='body'),
}

async function getAutoScaleConfig(request: GetAutoScaleConfigRequest): GetAutoScaleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScaleConfig', 'GET', '/', 'json', false, 'json', request);
}

model ListClusterLogsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=100, position='Query'),
}

model ListClusterLogsResponseBody = {
  clusterId?: string(name='ClusterId'),
  logs?: {
    logInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      level?: string(name='Level'),
      message?: string(name='Message'),
      operation?: string(name='Operation'),
    }
  ](name='LogInfo')
  }(name='Logs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterLogsResponseBody(name='body'),
}

async function listClusterLogs(request: ListClusterLogsRequest): ListClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListClustersResponseBody = {
  clusters?: {
    clusterInfoSimple?: [ 
    {
      accountType?: string(name='AccountType'),
      computes?: {
        exceptionCount?: int32(name='ExceptionCount'),
        normalCount?: int32(name='NormalCount'),
        total?: int32(name='Total'),
      }(name='Computes'),
      count?: int32(name='Count'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      instanceType?: string(name='InstanceType'),
      loginNodes?: string(name='LoginNodes'),
      managers?: {
        exceptionCount?: int32(name='ExceptionCount'),
        normalCount?: int32(name='NormalCount'),
        total?: int32(name='Total'),
      }(name='Managers'),
      name?: string(name='Name'),
      osTag?: string(name='OsTag'),
      regionId?: string(name='RegionId'),
      schedulerType?: string(name='SchedulerType'),
      status?: string(name='Status'),
      totalResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='UsedResources'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ClusterInfoSimple')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'GET', '/', 'json', false, 'json', request);
}

model ListCurrentClientVersionRequest {
}

model ListCurrentClientVersionResponseBody = {
  clientVersion?: string(name='ClientVersion'),
  requestId?: string(name='RequestId'),
}

model ListCurrentClientVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ListCurrentClientVersionResponseBody(name='body'),
}

async function listCurrentClientVersion(request: ListCurrentClientVersionRequest): ListCurrentClientVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCurrentClientVersion', 'GET', '/', 'json', false, 'json', request);
}

model ListCustomImagesRequest {
  baseOsTag?: string(name='BaseOsTag', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListCustomImagesResponseBody = {
  images?: {
    imageInfo?: [ 
    {
      baseOsTag?: {
        architecture?: string(name='Architecture'),
        osTag?: string(name='OsTag'),
        platform?: string(name='Platform'),
        version?: string(name='Version'),
      }(name='BaseOsTag'),
      description?: string(name='Description'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
    }
  ](name='ImageInfo')
  }(name='Images'),
  requestId?: string(name='RequestId'),
}

model ListCustomImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCustomImagesResponseBody(name='body'),
}

async function listCustomImages(request: ListCustomImagesRequest): ListCustomImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomImages', 'GET', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
}

model ListImagesResponseBody = {
  osTags?: {
    osInfo?: [ 
    {
      architecture?: string(name='Architecture'),
      osTag?: string(name='OsTag'),
      platform?: string(name='Platform'),
      version?: string(name='Version'),
    }
  ](name='OsInfo')
  }(name='OsTags'),
  requestId?: string(name='RequestId'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'GET', '/', 'json', false, 'json', request);
}

model ListJobTemplatesRequest {
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListJobTemplatesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  templates?: {
    jobTemplates?: [ 
    {
      arrayRequest?: string(name='ArrayRequest'),
      commandLine?: string(name='CommandLine'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      packagePath?: string(name='PackagePath'),
      priority?: int32(name='Priority'),
      reRunable?: boolean(name='ReRunable'),
      runasUser?: string(name='RunasUser'),
      stderrRedirectPath?: string(name='StderrRedirectPath'),
      stdoutRedirectPath?: string(name='StdoutRedirectPath'),
      variables?: string(name='Variables'),
    }
  ](name='JobTemplates')
  }(name='Templates'),
  totalCount?: int32(name='TotalCount'),
}

model ListJobTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobTemplatesResponseBody(name='body'),
}

async function listJobTemplates(request: ListJobTemplatesRequest): ListJobTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListJobsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  owner?: string(name='Owner', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  rerunable?: string(name='Rerunable', position='Query'),
  state?: string(name='State', position='Query'),
}

model ListJobsResponseBody = {
  jobs?: {
    jobInfo?: [ 
    {
      arrayRequest?: string(name='ArrayRequest'),
      comment?: string(name='Comment'),
      id?: string(name='Id'),
      lastModifyTime?: string(name='LastModifyTime'),
      name?: string(name='Name'),
      owner?: string(name='Owner'),
      priority?: int32(name='Priority'),
      resources?: {
        cores?: int32(name='Cores'),
        nodes?: int32(name='Nodes'),
      }(name='Resources'),
      shellPath?: string(name='ShellPath'),
      startTime?: string(name='StartTime'),
      state?: string(name='State'),
      stderr?: string(name='Stderr'),
      stdout?: string(name='Stdout'),
      submitTime?: string(name='SubmitTime'),
    }
  ](name='JobInfo')
  }(name='Jobs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  role?: string(name='Role', position='Query'),
}

model ListNodesResponseBody = {
  nodes?: {
    nodeInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      createdByEhpc?: boolean(name='CreatedByEhpc'),
      expired?: boolean(name='Expired'),
      expiredTime?: string(name='ExpiredTime'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      lockReason?: string(name='LockReason'),
      regionId?: string(name='RegionId'),
      role?: string(name='Role'),
      spotStrategy?: string(name='SpotStrategy'),
      status?: string(name='Status'),
      totalResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='UsedResources'),
    }
  ](name='NodeInfo')
  }(name='Nodes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesNoPagingRequest {
  clusterId: string(name='ClusterId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  onlyDetached?: boolean(name='OnlyDetached', position='Query'),
  role?: string(name='Role', position='Query'),
}

model ListNodesNoPagingResponseBody = {
  nodes?: {
    nodeInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      createdByEhpc?: boolean(name='CreatedByEhpc'),
      expired?: boolean(name='Expired'),
      expiredTime?: string(name='ExpiredTime'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      lockReason?: string(name='LockReason'),
      regionId?: string(name='RegionId'),
      role?: string(name='Role'),
      spotStrategy?: string(name='SpotStrategy'),
      status?: string(name='Status'),
      totalResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='UsedResources'),
    }
  ](name='NodeInfo')
  }(name='Nodes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodesNoPagingResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesNoPagingResponseBody(name='body'),
}

async function listNodesNoPaging(request: ListNodesNoPagingRequest): ListNodesNoPagingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodesNoPaging', 'GET', '/', 'json', false, 'json', request);
}

model ListPreferredEcsTypesRequest {
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model ListPreferredEcsTypesResponseBody = {
  requestId?: string(name='RequestId'),
  series?: {
    seriesInfo?: [ 
    {
      roles?: {
        compute?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Compute'),
        login?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Login'),
        manager?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Manager'),
      }(name='Roles'),
      seriesId?: string(name='SeriesId'),
      seriesName?: string(name='SeriesName'),
    }
  ](name='SeriesInfo')
  }(name='Series'),
  supportSpotInstance?: boolean(name='SupportSpotInstance'),
}

model ListPreferredEcsTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPreferredEcsTypesResponseBody(name='body'),
}

async function listPreferredEcsTypes(request: ListPreferredEcsTypesRequest): ListPreferredEcsTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPreferredEcsTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: {
    regionInfo?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='RegionInfo')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListSoftwaresRequest {
  ehpcVersion?: string(name='EhpcVersion', position='Query'),
}

model ListSoftwaresResponseBody = {
  requestId?: string(name='RequestId'),
  softwares?: {
    softwareInfo?: [ 
    {
      accountType?: string(name='AccountType'),
      accountVersion?: string(name='AccountVersion'),
      applications?: {
        applicationInfo?: [ 
        {
          name?: string(name='Name'),
          required?: boolean(name='Required'),
          tag?: string(name='Tag'),
          version?: string(name='Version'),
        }
      ](name='ApplicationInfo')
      }(name='Applications'),
      ehpcVersion?: string(name='EhpcVersion'),
      osTag?: string(name='OsTag'),
      schedulerType?: string(name='SchedulerType'),
      schedulerVersion?: string(name='SchedulerVersion'),
    }
  ](name='SoftwareInfo')
  }(name='Softwares'),
}

model ListSoftwaresResponse = {
  headers: map[string]string(name='headers'),
  body: ListSoftwaresResponseBody(name='body'),
}

async function listSoftwares(request: ListSoftwaresRequest): ListSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListUsersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  users?: {
    userInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      group?: string(name='Group'),
      name?: string(name='Name'),
    }
  ](name='UserInfo')
  }(name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'GET', '/', 'json', false, 'json', request);
}

model ListVolumesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListVolumesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  volumes?: {
    volumeInfo?: [ 
    {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      regionId?: string(name='RegionId'),
      remoteDirectory?: string(name='RemoteDirectory'),
      volumeId?: string(name='VolumeId'),
      volumeMountpoint?: string(name='VolumeMountpoint'),
      volumeProtocol?: string(name='VolumeProtocol'),
      volumeType?: string(name='VolumeType'),
    }
  ](name='VolumeInfo')
  }(name='Volumes'),
}

model ListVolumesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVolumesResponseBody(name='body'),
}

async function listVolumes(request: ListVolumesRequest): ListVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVolumes', 'GET', '/', 'json', false, 'json', request);
}

model ModifyClusterAttributesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
}

model ModifyClusterAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterAttributesResponseBody(name='body'),
}

async function modifyClusterAttributes(request: ModifyClusterAttributesRequest): ModifyClusterAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterAttributes', 'GET', '/', 'json', false, 'json', request);
}

model ModifyUserGroupsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      group?: string(name='Group'),
      name?: string(name='Name'),
    }
  ](name='User', position='Query'),
}

model ModifyUserGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserGroupsResponseBody(name='body'),
}

async function modifyUserGroups(request: ModifyUserGroupsRequest): ModifyUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserGroups', 'GET', '/', 'json', false, 'json', request);
}

model ModifyUserPasswordsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      name?: string(name='Name'),
      password?: string(name='Password'),
    }
  ](name='User', position='Query'),
}

model ModifyUserPasswordsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserPasswordsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserPasswordsResponseBody(name='body'),
}

async function modifyUserPasswords(request: ModifyUserPasswordsRequest): ModifyUserPasswordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserPasswords', 'GET', '/', 'json', false, 'json', request);
}

model RerunJobsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model RerunJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RerunJobsResponse = {
  headers: map[string]string(name='headers'),
  body: RerunJobsResponseBody(name='body'),
}

async function rerunJobs(request: RerunJobsRequest): RerunJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunJobs', 'GET', '/', 'json', false, 'json', request);
}

model ResetNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
}

model ResetNodesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ResetNodesResponseBody(name='body'),
}

async function resetNodes(request: ResetNodesRequest): ResetNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetNodes', 'GET', '/', 'json', false, 'json', request);
}

model SetAutoScaleConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
  enableAutoGrow?: boolean(name='EnableAutoGrow', position='Query'),
  enableAutoShrink?: boolean(name='EnableAutoShrink', position='Query'),
  excludeNodes?: string(name='ExcludeNodes', position='Query'),
  extraNodesGrowRatio?: int32(name='ExtraNodesGrowRatio', position='Query'),
  growIntervalInMinutes?: int32(name='GrowIntervalInMinutes', position='Query'),
  growRatio?: int32(name='GrowRatio', maximum=100, position='Query'),
  growTimeoutInMinutes?: int32(name='GrowTimeoutInMinutes', position='Query'),
  maxNodesInCluster: int32(name='MaxNodesInCluster', position='Query'),
  shrinkIdleTimes?: int32(name='ShrinkIdleTimes', position='Query'),
  shrinkIntervalInMinutes?: int32(name='ShrinkIntervalInMinutes', position='Query'),
}

model SetAutoScaleConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAutoScaleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetAutoScaleConfigResponseBody(name='body'),
}

async function setAutoScaleConfig(request: SetAutoScaleConfigRequest): SetAutoScaleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAutoScaleConfig', 'GET', '/', 'json', false, 'json', request);
}

model SetJobUserRequest {
  clusterId: string(name='ClusterId', position='Query'),
  runasUser: string(name='RunasUser', position='Query'),
  runasUserPassword: string(name='RunasUserPassword', position='Query'),
}

model SetJobUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetJobUserResponse = {
  headers: map[string]string(name='headers'),
  body: SetJobUserResponseBody(name='body'),
}

async function setJobUser(request: SetJobUserRequest): SetJobUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetJobUser', 'GET', '/', 'json', false, 'json', request);
}

model StopJobsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model StopJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StopJobsResponseBody(name='body'),
}

async function stopJobs(request: StopJobsRequest): StopJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopJobs', 'GET', '/', 'json', false, 'json', request);
}

model SubmitJobRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  name?: string(name='Name', position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  runasUser?: string(name='RunasUser', position='Query'),
  runasUserPassword?: string(name='RunasUserPassword', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  variables?: string(name='Variables', position='Query'),
}

model SubmitJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitJobResponseBody(name='body'),
}

async function submitJob(request: SubmitJobRequest): SubmitJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitJob', 'GET', '/', 'json', false, 'json', request);
}

model UpgradeClientRequest {
  clientVersion?: string(name='ClientVersion', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
}

model UpgradeClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeClientResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClientResponseBody(name='body'),
}

async function upgradeClient(request: UpgradeClientRequest): UpgradeClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeClient', 'GET', '/', 'json', false, 'json', request);
}

