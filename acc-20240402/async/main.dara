/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'acc';
  @version = '2024-04-02';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CapacityResource {
  CPU?: string(name='CPU'),
  GPU?: string(name='GPU'),
  memory?: string(name='Memory'),
}

model CreateImageCacheRequest {
  acrRegistryInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f*****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AcrRegistryInfos', position='Query'),
  clientToken?: string(name='ClientToken', example='*****', position='Query'),
  imageCacheName: string(name='ImageCacheName', description='This parameter is required.', example='my-imc', position='Query'),
  imageRegistryCredentials?: [ 
    {
      password?: string(name='Password', example='mypassword'),
      server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      skipCertVerification?: boolean(name='SkipCertVerification', example='false'),
      usePlainHttp?: boolean(name='UsePlainHttp', example='false'),
      userName?: string(name='UserName', example='myusername'),
    }
  ](name='ImageRegistryCredentials', position='Query'),
  images: [ string ](name='Images', description='This parameter is required.', position='Query'),
  networkConfig: {
    eipInstance?: {
      autoCreate?: boolean(name='AutoCreate', example='true'),
      bandwidth?: int32(name='Bandwidth', example='100'),
      instanceId?: string(name='InstanceId', example='eip-0jl0bx3fnpnjc9i4*****'),
    }(name='EipInstance'),
    securityGroupId: string(name='SecurityGroupId', description='This parameter is required.', example='sg-0jlgektkddwa42n*****'),
    vSwitchIds: [ string ](name='VSwitchIds', description='This parameter is required.'),
  }(name='NetworkConfig', description='This parameter is required.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', position='Query'),
}

model CreateImageCacheResponseBody = {
  imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
}

model CreateImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageCacheResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateImageCache  CreateImageCacheRequest
  * @return CreateImageCacheResponse
 */
async function createImageCache(request: CreateImageCacheRequest): CreateImageCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageCache', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageCacheRequest {
  force?: boolean(name='Force', example='false', position='Query'),
  imageCacheId: string(name='ImageCacheId', description='This parameter is required.', example='imc-bp1dj*****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteImageCacheResponseBody = {
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
}

model DeleteImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageCacheResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteImageCache  DeleteImageCacheRequest
  * @return DeleteImageCacheResponse
 */
async function deleteImageCache(request: DeleteImageCacheRequest): DeleteImageCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageCache', 'POST', '/', 'json', false, 'json', request);
}

model GetImageCacheRequest {
  imageCacheId: string(name='ImageCacheId', description='This parameter is required.', example='imc-bp1dj*****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetImageCacheResponseBody = {
  createTime?: string(name='CreateTime', example='2025-**-**T07:55:25Z'),
  events?: [ 
    {
      count?: int32(name='Count', example='1'),
      firstTimestamp?: string(name='FirstTimestamp', example='2025-**-**T02:24:48Z'),
      lastTimestamp?: string(name='LastTimestamp', example='2025-**-**T02:24:48Z'),
      message?: string(name='Message', example='Image cache [my-imc] has been created successfully'),
      name?: string(name='Name', example='imagetest.1661f31f851*****'),
      reason?: string(name='Reason', example='ImageCacheCreated'),
      type?: string(name='Type', example='Normal'),
    }
  ](name='Events'),
  imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
  imageCacheName?: string(name='ImageCacheName', example='my-imc'),
  images?: [ string ](name='Images'),
  networkConfig?: {
    eipInstance?: {
      autoCreate?: boolean(name='AutoCreate', example='true'),
      bandwidth?: int32(name='Bandwidth', example='100'),
      instanceId?: string(name='InstanceId', example='eip-0jl0bx3fnpnjc9i4*****'),
    }(name='EipInstance'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-0jlgektkddwa42n*****'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='NetworkConfig'),
  paymentType?: string(name='PaymentType', example='PayAsYouGo'),
  readyTime?: string(name='ReadyTime', example='2025-**-**T07:58:25Z'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  size?: int32(name='Size', example='8'),
  status?: string(name='Status', example='Ready'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
}

model GetImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageCacheResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImageCache  GetImageCacheRequest
  * @return GetImageCacheResponse
 */
async function getImageCache(request: GetImageCacheRequest): GetImageCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageCache', 'POST', '/', 'json', false, 'json', request);
}

model ListImageCachesRequest {
  imageCacheName?: string(name='ImageCacheName', example='my-imc', position='Query'),
  maxResults?: int32(name='MaxResults', example='30', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF*****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****', position='Query'),
  status?: string(name='Status', example='Ready', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', position='Query'),
}

model ListImageCachesResponseBody = {
  imageCaches?: [ 
    {
      createTime?: string(name='CreateTime', example='2025-**-**T07:55:25Z'),
      imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
      imageCacheName?: string(name='ImageCacheName', example='my-imc'),
      images?: [ string ](name='Images'),
      readyTime?: string(name='ReadyTime', example='2025-**-**T07:58:25Z'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
      size?: int32(name='Size', example='8'),
      status?: string(name='Status', example='Ready'),
    }
  ](name='ImageCaches'),
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF*****'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListImageCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageCachesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImageCaches  ListImageCachesRequest
  * @return ListImageCachesResponse
 */
async function listImageCaches(request: ListImageCachesRequest): ListImageCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImageCaches', 'POST', '/', 'json', false, 'json', request);
}

