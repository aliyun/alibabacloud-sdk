/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('acc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CapacityResource {
  CPU?: string(name='CPU'),
  GPU?: string(name='GPU'),
  memory?: string(name='Memory'),
}

model CreateImageCacheRequest {
  acrRegistryInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f*****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AcrRegistryInfos'),
  clientToken?: string(name='ClientToken', example='*****'),
  imageCacheName?: string(name='ImageCacheName', description='This parameter is required.', example='my-imc'),
  imageRegistryCredentials?: [ 
    {
      password?: string(name='Password', example='mypassword'),
      server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      skipCertVerification?: boolean(name='SkipCertVerification', example='false'),
      usePlainHttp?: boolean(name='UsePlainHttp', example='false'),
      userName?: string(name='UserName', example='myusername'),
    }
  ](name='ImageRegistryCredentials'),
  images?: [ string ](name='Images', description='This parameter is required.'),
  networkConfig?: {
    eipInstance?: {
      autoCreate?: boolean(name='AutoCreate', example='true'),
      bandwidth?: int32(name='Bandwidth', example='100'),
      instanceId?: string(name='InstanceId', example='eip-0jl0bx3fnpnjc9i4*****'),
    }(name='EipInstance'),
    securityGroupId?: string(name='SecurityGroupId', description='This parameter is required.', example='sg-0jlgektkddwa42n*****'),
    vSwitchIds?: [ string ](name='VSwitchIds', description='This parameter is required.'),
  }(name='NetworkConfig', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
}

model CreateImageCacheShrinkRequest {
  acrRegistryInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f*****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AcrRegistryInfos'),
  clientToken?: string(name='ClientToken', example='*****'),
  imageCacheName?: string(name='ImageCacheName', description='This parameter is required.', example='my-imc'),
  imageRegistryCredentials?: [ 
    {
      password?: string(name='Password', example='mypassword'),
      server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      skipCertVerification?: boolean(name='SkipCertVerification', example='false'),
      usePlainHttp?: boolean(name='UsePlainHttp', example='false'),
      userName?: string(name='UserName', example='myusername'),
    }
  ](name='ImageRegistryCredentials'),
  images?: [ string ](name='Images', description='This parameter is required.'),
  networkConfigShrink?: string(name='NetworkConfig', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
}

model CreateImageCacheResponseBody = {
  imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
}

model CreateImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageCacheResponseBody(name='body'),
}

/**
 * @summary 创建镜像缓存
 *
 * @param tmpReq CreateImageCacheRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateImageCacheResponse
 */
@context("createImageCacheWithContext")
async function createImageCacheWithOptions(tmpReq: CreateImageCacheRequest, runtime: $RuntimeOptions): CreateImageCacheResponse {
  tmpReq.validate();
  var request = new CreateImageCacheShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.networkConfig)) {
    request.networkConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkConfig, 'NetworkConfig', 'json');
  }
  var query = {};
  if (!$isNull(request.acrRegistryInfos)) {
    query['AcrRegistryInfos'] = request.acrRegistryInfos;
  }
  if (!$isNull(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!$isNull(request.imageCacheName)) {
    query['ImageCacheName'] = request.imageCacheName;
  }
  if (!$isNull(request.imageRegistryCredentials)) {
    query['ImageRegistryCredentials'] = request.imageRegistryCredentials;
  }
  if (!$isNull(request.images)) {
    query['Images'] = request.images;
  }
  if (!$isNull(request.networkConfigShrink)) {
    query['NetworkConfig'] = request.networkConfigShrink;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateImageCache',
    version = '2024-04-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建镜像缓存
 *
 * @param request CreateImageCacheRequest
 * @return CreateImageCacheResponse
 */
async function createImageCache(request: CreateImageCacheRequest): CreateImageCacheResponse {
  var runtime = new $RuntimeOptions{};
  return createImageCacheWithOptions(request, runtime);
}

model DeleteImageCacheRequest {
  force?: boolean(name='Force', example='false'),
  imageCacheId?: string(name='ImageCacheId', description='This parameter is required.', example='imc-bp1dj*****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model DeleteImageCacheResponseBody = {
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
}

model DeleteImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageCacheResponseBody(name='body'),
}

/**
 * @summary 删除镜像缓存
 *
 * @param request DeleteImageCacheRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteImageCacheResponse
 */
@context("deleteImageCacheWithContext")
async function deleteImageCacheWithOptions(request: DeleteImageCacheRequest, runtime: $RuntimeOptions): DeleteImageCacheResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.force)) {
    query['Force'] = request.force;
  }
  if (!$isNull(request.imageCacheId)) {
    query['ImageCacheId'] = request.imageCacheId;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteImageCache',
    version = '2024-04-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除镜像缓存
 *
 * @param request DeleteImageCacheRequest
 * @return DeleteImageCacheResponse
 */
async function deleteImageCache(request: DeleteImageCacheRequest): DeleteImageCacheResponse {
  var runtime = new $RuntimeOptions{};
  return deleteImageCacheWithOptions(request, runtime);
}

model GetImageCacheRequest {
  imageCacheId?: string(name='ImageCacheId', description='This parameter is required.', example='imc-bp1dj*****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model GetImageCacheResponseBody = {
  createTime?: string(name='CreateTime', example='2025-**-**T07:55:25Z'),
  events?: [ 
    {
      count?: int32(name='Count', example='1'),
      firstTimestamp?: string(name='FirstTimestamp', example='2025-**-**T02:24:48Z'),
      lastTimestamp?: string(name='LastTimestamp', example='2025-**-**T02:24:48Z'),
      message?: string(name='Message', example='Image cache [my-imc] has been created successfully'),
      name?: string(name='Name', example='imagetest.1661f31f851*****'),
      reason?: string(name='Reason', example='ImageCacheCreated'),
      type?: string(name='Type', example='Normal'),
    }
  ](name='Events'),
  imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
  imageCacheName?: string(name='ImageCacheName', example='my-imc'),
  images?: [ string ](name='Images'),
  networkConfig?: {
    eipInstance?: {
      autoCreate?: boolean(name='AutoCreate', example='true'),
      bandwidth?: int32(name='Bandwidth', example='100'),
      instanceId?: string(name='InstanceId', example='eip-0jl0bx3fnpnjc9i4*****'),
    }(name='EipInstance'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-0jlgektkddwa42n*****'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='NetworkConfig'),
  paymentType?: string(name='PaymentType', example='PayAsYouGo'),
  readyTime?: string(name='ReadyTime', example='2025-**-**T07:58:25Z'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  size?: int32(name='Size', example='8'),
  status?: string(name='Status', example='Ready'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
}

model GetImageCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageCacheResponseBody(name='body'),
}

/**
 * @summary 查询镜像缓存
 *
 * @param request GetImageCacheRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageCacheResponse
 */
@context("getImageCacheWithContext")
async function getImageCacheWithOptions(request: GetImageCacheRequest, runtime: $RuntimeOptions): GetImageCacheResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageCacheId)) {
    query['ImageCacheId'] = request.imageCacheId;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetImageCache',
    version = '2024-04-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询镜像缓存
 *
 * @param request GetImageCacheRequest
 * @return GetImageCacheResponse
 */
async function getImageCache(request: GetImageCacheRequest): GetImageCacheResponse {
  var runtime = new $RuntimeOptions{};
  return getImageCacheWithOptions(request, runtime);
}

model ListImageCachesRequest {
  imageCacheName?: string(name='ImageCacheName', example='my-imc'),
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF*****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  status?: string(name='Status', example='Ready'),
  tags?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags'),
}

model ListImageCachesResponseBody = {
  imageCaches?: [ 
    {
      createTime?: string(name='CreateTime', example='2025-**-**T07:55:25Z'),
      imageCacheId?: string(name='ImageCacheId', example='imc-bp1dj*****'),
      imageCacheName?: string(name='ImageCacheName', example='my-imc'),
      images?: [ string ](name='Images'),
      readyTime?: string(name='ReadyTime', example='2025-**-**T07:58:25Z'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
      size?: int32(name='Size', example='8'),
      status?: string(name='Status', example='Ready'),
    }
  ](name='ImageCaches'),
  maxResults?: int32(name='MaxResults', example='30'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF*****'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC*****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListImageCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageCachesResponseBody(name='body'),
}

/**
 * @summary 查询镜像缓存
 *
 * @param request ListImageCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImageCachesResponse
 */
@context("listImageCachesWithContext")
async function listImageCachesWithOptions(request: ListImageCachesRequest, runtime: $RuntimeOptions): ListImageCachesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.imageCacheName)) {
    query['ImageCacheName'] = request.imageCacheName;
  }
  if (!$isNull(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListImageCaches',
    version = '2024-04-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询镜像缓存
 *
 * @param request ListImageCachesRequest
 * @return ListImageCachesResponse
 */
async function listImageCaches(request: ListImageCachesRequest): ListImageCachesResponse {
  var runtime = new $RuntimeOptions{};
  return listImageCachesWithOptions(request, runtime);
}

