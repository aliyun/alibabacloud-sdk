/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dbs';
  @version = '2021-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'dbs-api.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'dbs-api.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'dbs-api.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dbs-api.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dbs-api.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dbs-api.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'dbs-api.ap-northeast-1.aliyuncs.com',
    us-west-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    us-east-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    eu-central-1 = 'dbs-api.eu-central-1.aliyuncs.com',
    cn-hangzhou-finance = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-south-1 = 'dbs-api.ap-south-1.aliyuncs.com',
    eu-west-1 = 'dbs-api.eu-west-1.aliyuncs.com',
    me-east-1 = 'dbs-api.me-east-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateDownloadRequest {
  bakSetId?: string(name='BakSetId', description='The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to obtain the ID of the backup set.

>  This parameter is required if the BakSetType parameter is set to full.', example='146005****', position='Query'),
  bakSetSize?: string(name='BakSetSize', description='The size of the full backup set. You can call the [DescribeBackups](~~26273~~) operation to query the size of the full backup set. Unit: bytes.', example='216****', position='Query'),
  bakSetType?: string(name='BakSetType', description='The type of the download task. Valid values:

*   **full**: downloads a full backup set.
*   **pitr**: downloads a backup set at a specific point in time.', example='full', position='Query'),
  downloadPointInTime?: string(name='DownloadPointInTime', description='The point in time at which the backup set is downloaded. The UNIX timestamp of the LONG type. Unit: milliseconds.

>  This parameter is required if the BakSetType parameter is set to pitr.', example='1661331864000', position='Query'),
  formatType?: string(name='FormatType', description='The destination format to which the downloaded backup set is converted. Valid values:

*   **csv**
*   **SQL**
*   **Parquet**', example='csv', position='Query'),
  instanceName: string(name='InstanceName', description='The ID of the instance.', example='rm-wz994c1t1****', position='Query'),
  regionCode: string(name='RegionCode', description='The ID of the region in which the instance resides. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the region ID of the instance.', example='cn-beijing', position='Query'),
  targetBucket?: string(name='TargetBucket', description='The name of the OSS bucket that is used to store the backup set.

*   This parameter is required if the TargetType parameter is set to OSS.
*   Make sure that your account has the **AliyunDBSDefaultRole** permission. For more information, see [Use RAM for resource authorization](~~26307~~). You can also grant permissions based on the operation instructions in the RAM console.', example='test123', position='Query'),
  targetOssRegion?: string(name='TargetOssRegion', description='The region in which the OSS bucket resides.

>  This parameter is required if the TargetType parameter is set to OSS.', example='cn-beijing', position='Query'),
  targetPath?: string(name='TargetPath', description='The destination path of the downloaded data.

>  This parameter is required if the TargetType parameter is set to OSS.', example='test_db/path', position='Query'),
  targetType?: string(name='TargetType', description='The type of the method in which the backup set is downloaded. Valid values:

*   **OSS**
*   **URL**', example='OSS', position='Query'),
}

model CreateDownloadResponseBody = {
  code?: string(name='Code', description='The error code.', example='DBS.ParamIsInValid'),
  data?: {
    backupSetTime?: long(name='BackupSetTime', description='The point in time of the backup set if the task is used to download a backup set at a specific point in time. The value is a timestamp.', example='1661373070000'),
    bakSetId?: string(name='BakSetId', description='The ID of the full backup set.', example='146005****'),
    dbList?: string(name='DbList', description='The database and table information that is returned if the download task is a database and table filtering task.', example='testdb'),
    downloadStatus?: string(name='DownloadStatus', description='The status of the download task. Valid values:

*   Initializing: The download task is being initialized.
*   queuing: The download task is queuing.
*   running: The download task is running.
*   failed: The download task fails.
*   finished: The download task is complete.
*   expired: The download task expires.

>  The download task expires in three days after the task is complete if the TargetType parameter is set to URL.', example='initializing'),
    exportDataSize?: long(name='ExportDataSize', description='The amount of output data. Unit: bytes.', example='0'),
    format?: string(name='Format', description='The format to which the downloaded data is converted.', example='csv'),
    gmtCreate?: long(name='GmtCreate', description='The time when the download task was created. The value is a timestamp.', example='1661940917570'),
    importDataSize?: long(name='ImportDataSize', description='The amount of data that is processed. Unit: bytes.', example='0'),
    progress?: string(name='Progress', description='The number of tables that have been downloaded and the total number of tables to be downloaded.

>  If the task is in the preparation stage, 0/0 is returned.', example='0/0'),
    regionCode?: string(name='RegionCode', description='The ID of the region in which the instance resides.', example='cn-beijing'),
    targetPath?: string(name='TargetPath', description='The destination path of the downloaded data.

>  This parameter is returned if the TargetType parameter is set to OSS.', example='test_db/path'),
    targetType?: string(name='TargetType', description='The type of the method in which the backup set is downloaded.', example='URL'),
    taskId?: string(name='TaskId', description='The ID of the download task.', example='dt-qxnsfq5s****'),
  }(name='Data', description='The response parameters.'),
  errCode?: string(name='ErrCode', description='The error code.', example='DBS.ParamIsInValid'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='formatType can not be empty'),
  message?: string(name='Message', description='The error message.', example='formatType can not be empty'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A08F908D-2C35-583F-93C1-ED80753F****'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CreateDownloadResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDownloadResponseBody(name='body'),
}

/**
  * You can create an advanced download task by point in time or backup file. You can set the Download Destination parameter to URL or directly upload the downloaded data to your Object Storage Service (OSS) bucket to facilitate data analysis and offline archiving. For more information, see [Advanced download](~~98819~~).
  *
 */
async function createDownload(request: CreateDownloadRequest): CreateDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDownload', 'POST', '/', 'json', false, 'json', request);
}

model CreateSandboxInstanceRequest {
  backupPlanId: string(name='BackupPlanId', description='The ID of the backup schedule. You can call the [DescribeBackupPlanList](~~437215~~) operation to obtain the ID of the backup schedule.

>  If your instance is an ApsaraDB RDS for MySQL instance, you can configure [automatic access to the instance](~~193091~~) to automatically add the instance to DBS and obtain the ID of the backup schedule.', example='1hxxxx8xxxxxa', position='Query'),
  backupSetId?: string(name='BackupSetId', description='The ID of the backup set to be restored, which is the point in time when a snapshot was created. You can call the [DescribeSandboxBackupSets](~~437256~~) operation to obtain the ID.

>  You need to specify only one of the **BackupSetId** and **RestoreTime** parameters.', example='1hxxxx8xxxxxa_20210829064228', position='Query'),
  restoreTime?: string(name='RestoreTime', description='The point in time of the sandbox instance to be restored. You can call the [DescribeSandboxRecoveryTime](~~437258~~) operation to view the recoverable time range. Specify the time in the format of *yyyy-MM-ddTHH:mm:ssZ*. The time must be in UTC.', example='2021-08-01T12:01:01Z', position='Query'),
  sandboxInstanceName?: string(name='SandboxInstanceName', description='The name of the sandbox instance.', example='test_sandbox', position='Query'),
  sandboxPassword?: string(name='SandboxPassword', description='The password of the privileged account created in the sandbox instance.', example='password123', position='Query'),
  sandboxSpecification?: string(name='SandboxSpecification', description='The specifications of the sandbox instance. Valid values:

*   **MYSQL\\_1C\\_1M_SD**: 1 CPU core and 1 GB of memory.
*   **MYSQL\\_1C\\_2M_SD**: 1 CPU core and 2 GB of memory.
*   **MYSQL\\_2C\\_4M_SD**: 2 CPU cores and 4 GB of memory.
*   **MYSQL\\_2C\\_8M_SD**: 2 CPU cores and 8 GB of memory.
*   **MYSQL\\_4C\\_8M_SD**: 4 CPU cores and 8 GB of memory.
*   **MYSQL\\_4C\\_16M_SD**: 4 CPU cores and 16 GB of memory.
*   **MYSQL\\_8C\\_16M_SD**: 8 CPU cores and 16 GB of memory.
*   **MYSQL\\_8C\\_32M_SD**: 8 CPU cores and 32 GB of memory.

>  Different specifications have little impact on the recovery speed. High-specification instances provide better performance after restoration. For more information, see [Sandbox instance fees](~~201466~~).', example='MYSQL_1C_1M_SD', position='Query'),
  sandboxType?: string(name='SandboxType', description='The type of the sandbox instance. You can call this operation only to create an instance of the **Sandbox** type. After the sandbox instance is created, the MySQL endpoint of the instance is provided.', example='Sandbox', position='Query'),
  sandboxUser?: string(name='SandboxUser', description='The privileged account created in the sandbox instance.

*   After you specify this parameter, the system creates a privileged account in the sandbox instance. The account has the permissions on all databases in the instance.

The account of the source database is retained in the sandbox instance.

*   If you do not specify this parameter, the database account is the same as that of the source database.', example='root_test', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) that is used to connect to the sandbox instance. If you want to connect to the sandbox instance by using Elastic Compute Service (ECS) instances, you must set this parameter to the VPC in which the ECS instances reside.

>  You can set this parameter if you want to use it in a recovery drill scenario.', example='vpc-bp1dxxxxxjy0xxxxx1xxp', position='Query'),
  vpcSwitchId?: string(name='VpcSwitchId', description='The ID of the VSwitch that is used to connect to the sandbox instance.', example='vsw-bp1bxxxxxumxxxxxwxxx9', position='Query'),
}

model CreateSandboxInstanceResponseBody = {
  code?: string(name='Code', description='The error code.', example='Param.NotFound'),
  data?: {
    backupPlanId?: string(name='BackupPlanId', description='The ID of the backup schedule.', example='1hxxxx8xxxxxa'),
    instanceId?: string(name='InstanceId', description='The ID of the sandbox instance.', example='1jxxxxx9xxxxh'),
  }(name='Data', description='The response parameters.'),
  errCode?: string(name='ErrCode', description='The error code.', example='Param.NotFound'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='The specified parameter %s value is not valid.'),
  message?: string(name='Message', description='The error message.', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F1888AC-1138-4995-B9FE-D2734F61****'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSandboxInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, you must enable the sandbox feature for the database instance. For more information, see [Create a sandbox instance for emergency disaster recovery of an ApsaraDB RDS for MySQL database](~~203154~~) or [Create a sandbox instance for emergency disaster recovery of a self-managed MySQL database](~~185577~~). The API operation is available only in Database Backup (DBS) API of the 2021-01-01 version.
  *
 */
async function createSandboxInstance(request: CreateSandboxInstanceRequest): CreateSandboxInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSandboxInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSandboxInstanceRequest {
  backupPlanId: string(name='BackupPlanId', description='The ID of the backup schedule. You can call the [DescribeBackupPlanList](~~437215~~) operation to obtain the ID of the backup schedule.

>  If your instance is an ApsaraDB RDS for MySQL instance, you can configure [automatic access to the instance](~~193091~~) to automatically add the instance to DBS and obtain the ID of the backup schedule.', example='1hxxxx8xxxxxa', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the sandbox instance. You can call the [DescribeSandboxInstances](~~437257~~) operation to obtain the ID of the sandbox instance.', example='1jxxxxnxxx1xc', position='Query'),
}

model DeleteSandboxInstanceResponseBody = {
  code?: string(name='Code', description='The error code.', example='Param.NotFound'),
  data?: string(name='Data', description='The response parameters.', example='operation forbidden due to sandbox is creating.'),
  errCode?: string(name='ErrCode', description='The error code.', example='Param.NotFound'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='The specified parameter %s value is not valid.'),
  message?: string(name='Message', description='The error message.', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F1888AC-1138-4995-B9FE-D2734F61C058'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSandboxInstanceResponseBody(name='body'),
}

/**
  * The API operation is available only in Database Backup (DBS) API of the 2021-01-01 version.
  *
 */
async function deleteSandboxInstance(request: DeleteSandboxInstanceRequest): DeleteSandboxInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSandboxInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBTablesRecoveryBackupSetRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionCode?: string(name='RegionCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDBTablesRecoveryBackupSetResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeDBTablesRecoveryBackupSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBTablesRecoveryBackupSetResponseBody(name='body'),
}

async function describeDBTablesRecoveryBackupSet(request: DescribeDBTablesRecoveryBackupSetRequest): DescribeDBTablesRecoveryBackupSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBTablesRecoveryBackupSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBTablesRecoveryStateRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionCode?: string(name='RegionCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDBTablesRecoveryStateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeDBTablesRecoveryStateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBTablesRecoveryStateResponseBody(name='body'),
}

async function describeDBTablesRecoveryState(request: DescribeDBTablesRecoveryStateRequest): DescribeDBTablesRecoveryStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBTablesRecoveryState', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBTablesRecoveryTimeRangeRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionCode?: string(name='RegionCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDBTablesRecoveryTimeRangeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeDBTablesRecoveryTimeRangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBTablesRecoveryTimeRangeResponseBody(name='body'),
}

async function describeDBTablesRecoveryTimeRange(request: DescribeDBTablesRecoveryTimeRangeRequest): DescribeDBTablesRecoveryTimeRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBTablesRecoveryTimeRange', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadBackupSetStorageInfoRequest {
  backupSetId?: string(name='BackupSetId', description='The ID of the backup set.', example='30****', position='Query'),
  duration: string(name='Duration', description='Set this parameter if the Download Destination parameter is set to URL.

*   By default, a URL is valid for 2 hours, which is equal to 7,200 seconds.
*   The valid duration is 5 minutes (300 seconds) to 1 day (86,400 seconds).
*   Before you set this parameter, convert the time to seconds. For example, if you want to set the validity period of the link to 5 minutes, enter 300.', example='300', position='Query'),
  instanceName?: string(name='InstanceName', description='The ID of the instance.

>  The **BackupSetId** parameter is required if you specify the **InstanceName** parameter.', example='rm-uf6qqf569n435****', position='Query'),
  regionCode: string(name='RegionCode', description='The region ID of the instance. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the region ID of the instance.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the download task.

*   The **BackupSetId** and **InstanceName** parameters are required if you do not specify the **TaskId** parameter.
*   You can find the instance and click **Backup and Restoration**. On the **Backup Download** tab, view the **task ID**.', example='dt-s0ugzak9****', position='Query'),
}

model DescribeDownloadBackupSetStorageInfoResponseBody = {
  code?: string(name='Code', description='The error code.', example='DBS.ParamIsInValid'),
  data?: {
    expirationTime?: long(name='ExpirationTime', description='The expiration time of the URL.

>  The return value is in the timestamp format.', example='1661329050'),
    privateUrl?: string(name='PrivateUrl', description='The private download URL of the backup set.', example='http://dbs-137383785969****-cn-hangzhou-1iv12nblw****.oss-cn-hangzhou-internal.aliyuncs.com/dt-u7u4bufa****/dbs_target_file_path/test_123'),
    publicUrl?: string(name='PublicUrl', description='The public download URL of the backup set.', example='http://dbs-137383785969****-cn-hangzhou-1iv12nblw****.oss-cn-hangzhou.aliyuncs.com/dt-u7u4bufa****/dbs_target_file_path/test_456'),
  }(name='Data', description='The response parameters.'),
  errCode?: string(name='ErrCode', description='The error code.', example='DBS.ParamIsInValid'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Argument: regionCode Must not be empty'),
  message?: string(name='Message', description='The error message.', example='Argument: regionCode Must not be empty'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='44B8C2F5-919D-5D29-BCD5-DEB03467****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: the request is successful.
*   **false**: the request fails.', example='true'),
}

model DescribeDownloadBackupSetStorageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadBackupSetStorageInfoResponseBody(name='body'),
}

/**
  * You can create an advanced download task by point in time or backup file. You can set the Download Destination parameter to URL or directly upload the downloaded data to your Object Storage Service (OSS) bucket to facilitate data analysis and offline archiving. For more information, see [Advanced download](~~98819~~).
  *
 */
async function describeDownloadBackupSetStorageInfo(request: DescribeDownloadBackupSetStorageInfoRequest): DescribeDownloadBackupSetStorageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadBackupSetStorageInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadSupportRequest {
  instanceName: string(name='InstanceName', description='The ID of the instance.', example='rm-bp1a48p922r4b****', position='Query'),
  regionCode: string(name='RegionCode', description='The ID of the region in which the instance resides. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model DescribeDownloadSupportResponseBody = {
  code?: string(name='Code', description='The error code.', example='DBS.ParamIsInValid'),
  data?: string(name='Data', description='Indicates whether the advanced download feature is supported. Valid values:

*   **true**: The advanced download feature is supported.
*   **false**: The advanced download feature is not supported.', example='true'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='DBS.ParamIsInValid'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='Argument: regionCode Must not be empty'),
  message?: string(name='Message', description='The error message.', example='Argument: regionCode Must not be empty'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1A186F7-7B34-5C11-A903-EE23876B****'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DescribeDownloadSupportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadSupportResponseBody(name='body'),
}

/**
  * You can create an advanced download task by point in time or backup file. You can set the Download Destination parameter to URL or directly upload the downloaded data to your Object Storage Service (OSS) bucket to facilitate data analysis and offline archiving. For more information, see [Advanced download](~~98819~~).
  *
 */
async function describeDownloadSupport(request: DescribeDownloadSupportRequest): DescribeDownloadSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadSupport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadTaskRequest {
  backupSetId?: string(name='BackupSetId', description='The ID of the backup set generated when you create the download task. You can call the [DescribeBackups](~~26273~~) operation to query the backup set ID. Unit: bytes.', example='216****', position='Query'),
  currentPage?: string(name='CurrentPage', description='The page number of the page to return.', example='1', position='Query'),
  datasourceId?: string(name='DatasourceId', description='The ID of the Database Backup (DBS) data source. Specify the parameter in the format of *ds-${Instance ID}\\_${regionId}*.', example='ds-rm-2ze8g2am97624****_cn-hangzhou', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify this parameter as a timestamp of the LONG type. Unit: milliseconds.', example='1661941556000', position='Query'),
  instanceName?: string(name='InstanceName', description='The ID of the instance.', example='rm-bp1imnmcjxdz7****', position='Query'),
  orderColumn?: string(name='OrderColumn', description='The column based on which the entries are sorted. By default, the entries are sorted by the creation time. Set the value to **gmt_create**.', example='gmt_create', position='Query'),
  orderDirect?: string(name='OrderDirect', description='The order in which you want to sort the entries. Valid values:

*   **asc**: sorts the retrieved entries by time in ascending order.
*   **desc**: sorts the retrieved entries by time in descending order. This is the default value.', example='desc', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='50', position='Query'),
  regionCode: string(name='RegionCode', description='The ID of the region in which the instance resides. You can call the [DescribeDBInstanceAttribute](~~26231~~) operation to query the region ID of the instance.', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify this parameter as a timestamp of the LONG type. Unit: milliseconds.', example='1661941554000', position='Query'),
  state?: string(name='State', description='The status of the download task. Valid values:

*   **Initializing**: The download task is being initialized.
*   **queuing**: The download task is queuing.
*   **running**: The download task is running.
*   **failed**: The download task fails.
*   **finished**: The download task is complete.', example='queueing', position='Query'),
  taskType?: string(name='TaskType', description='The type of the download task. Valid values:

*   **full**: downloads a full backup set.
*   **pitr**: downloads a backup set at a specific point in time.', example='full', position='Query'),
}

model DescribeDownloadTaskResponseBody = {
  code?: string(name='Code', description='The error code.', example='DBS.InternalError'),
  data?: {
    content?: {
      list?: [ 
      {
        backupSetTime?: string(name='BackupSetTime', description='The point in time of the backup set if the task is used to download a backup set at a specific point in time. The value is a timestamp of the LONG type. Unit: milliseconds.', example='1663162216000'),
        bakSetId?: string(name='BakSetId', description='The ID of the full backup set.', example='148261****'),
        dbList?: string(name='DbList', description='The details of the databases.', example='[dbtest]'),
        downloadStatus?: string(name='DownloadStatus', description='The status of the download task. Valid values:

*   **Initializing**: The download task is being initialized.
*   **queuing**: The download task is queuing.
*   **running**: The download task is running.
*   **failed**: The download task fails.
*   **finished**: The download task is complete.
*   **expired**: The download task expires.', example='queueing'),
        exportDataSize?: string(name='ExportDataSize', description='The amount of output data. Unit: bytes.', example='0'),
        format?: string(name='Format', description='The format to which the downloaded backup set is converted. Valid values:

*   **csv**
*   **SQL**
*   **Parquet**', example='csv'),
        gmtCreate?: string(name='GmtCreate', description='The time when the download task was created. The value is a timestamp.', example='1663321957000'),
        importDataSize?: string(name='ImportDataSize', description='The amount of data that is processed. Unit: bytes.', example='0'),
        progress?: string(name='Progress', description='The number of tables that have been downloaded and the total number of tables to be downloaded.', example='0/0'),
        regionCode?: string(name='RegionCode', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        targetPath?: string(name='TargetPath', description='The destination path to which the data is downloaded if the TargeType parameter is set to OSS.', example='test_db/path'),
        targetType?: string(name='TargetType', description='The type of the method in which the backup set is downloaded. Valid values:

*   **OSS**
*   **URL**', example='URL'),
        taskId?: string(name='TaskId', description='The ID of the download task.', example='dt-qxntlvgu****'),
      }
    ](name='List')
    }(name='Content', description='The details of the download tasks.'),
    extra?: string(name='Extra', description='The extra description of the download task.', example='dbtest'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalElements?: long(name='TotalElements'),
    totalPages?: long(name='TotalPages', description='The total number of returned pages.', example='2'),
  }(name='Data', description='The details of the download tasks.'),
  errCode?: string(name='ErrCode', description='The error code.', example='DBS.InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='instanceName can not be empty'),
  message?: string(name='Message', description='The error message.', example='instanceName can not be empty'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D285EB9-A443-592D-9F3D-A888FAC3****'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DescribeDownloadTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadTaskResponseBody(name='body'),
}

/**
  * You can create an advanced download task by point in time or backup file. You can set the Download Destination parameter to URL or directly upload the downloaded data to your Object Storage Service (OSS) bucket to facilitate data analysis and offline archiving. For more information, see [Advanced download](~~98819~~).
  *
 */
async function describeDownloadTask(request: DescribeDownloadTaskRequest): DescribeDownloadTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxBackupSetsRequest {
  backupPlanId: string(name='BackupPlanId', description='The ID of the backup schedule. You can call the [DescribeBackupPlanList](~~437215~~) operation to obtain the ID of the backup schedule.

>  If your instance is an ApsaraDB RDS for MySQL instance, you can configure [automatic access to the instance](~~193091~~) to automatically add the instance to DBS and obtain the ID of the backup schedule.', example='1hxxxx8xxxxxa', position='Query'),
  backupSetId?: string(name='BackupSetId', description='The ID of the backup set. If this parameter is specified, only the snapshot of the backup set is returned. If this parameter is not specified, all the snapshots of the backup schedule are returned.', example='1xxxx2xxxxx1e', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30 (default value)
*   50
*   100', example='30', position='Query'),
}

model DescribeSandboxBackupSetsResponseBody = {
  code?: string(name='Code', description='The error code.', example='Param.NotFound'),
  data?: string(name='Data', description='The response parameters.

*   **backupSetTime**: the point in time when the snapshot was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
*   **backupSetId**: the ID of the backup set.
*   **backupSetType**: the type of the snapshot. A value of **Full** indicates that the snapshot is a full backup snapshot. A value of **Inc** indicates that the snapshot is an incremental backup snapshot.
*   **backupPlanId**: the ID of the backup schedule.', example='"Data": {     "number": 2,     "size": 2,     "content": [       {         "backupSetTime": "2021-08-28T23:12:31Z",         "backupSetId": "Inc_1hxxxx8xxxxxa_20210801064200_mysql-bin.000134",         "backupSetType": "Inc",         "backupPlanId": "1hxxxx8xxxxxa"       },       {         "backupSetTime": "2021-08-28T22:42:28Z",         "backupSetId": "1hxxxx8xxxxxa_20210829064228",         "backupSetType": "FULL",         "backupPlanId": "1hxxxx8xxxxxa"       }     ],     "totalElements": 2   },'),
  errCode?: string(name='ErrCode', description='The error code.', example='Param.NotFound'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='The specified parameter %s value is not valid.'),
  message?: string(name='Message', description='The error message.', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F1888AC-1138-4995-B9FE-D2734F61C058'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSandboxBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxBackupSetsResponseBody(name='body'),
}

/**
  * Before you call this operation, you must enable the sandbox feature for the database instance. For more information, see [Create a sandbox instance for emergency disaster recovery of an ApsaraDB RDS for MySQL database](~~203154~~) or [Create a sandbox instance for emergency disaster recovery of a self-managed MySQL database](~~185577~~). The API operation is available only in Database Backup (DBS) API of the 2021-01-01 version.
  *
 */
async function describeSandboxBackupSets(request: DescribeSandboxBackupSetsRequest): DescribeSandboxBackupSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxBackupSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxInstancesRequest {
  backupPlanId: string(name='BackupPlanId', description='The ID of the backup schedule. You can call the [DescribeBackupPlanList](~~437215~~) operation to obtain the ID of the backup schedule.

>  If your instance is an ApsaraDB RDS for MySQL instance, you can configure [automatic access to the instance](~~193091~~) to automatically add the instance to DBS and obtain the ID of the backup schedule.', example='1hxxxx8xxxxxa', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the sandbox instance. You can call the [CreateSandboxInstance](~~437252~~) parameter to obtain the ID of the sandbox instance.', example='1jxxxxnxxx1xc', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30 (default value)
*   50
*   100', example='30', position='Query'),
}

model DescribeSandboxInstancesResponseBody = {
  code?: string(name='Code', description='The error code.', example='Param.NotFound'),
  data?: string(name='Data', description='The response parameters.

*   **connectionString**: the connection string of the sandbox instance, in the format of IP address:Port number. This parameter indicates the endpoint of the sandbox instance if the value of the SandboxType parameter is **Sandbox**. This parameter indicates the Network File System (NFS) mount address if the value of the SandboxType parameter is **NFS**.
*   **restoreSeconds**: the time required to create the sandbox instance. Unit: seconds.
*   **restoreTime**: the point in time to which the sandbox instance is restored. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
*   **instanceId**: the ID of the sandbox instance.
*   **backupSetId**: the ID of the backup set.
*   **createTime**: the point in time when the sandbox instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
*   **backupPlanId**: the ID of the backup schedule.
*   **vpcId**: the ID of the virtual private cloud (VPC).
*   **vpcSwitchId**: the ID of the VSwitch.
*   **sandboxSpecification**: the specifications of the sandbox instance.
*   **status**: the status of the sandbox instance. Valid values: **running**, **check_pass**, and **stop**.', example='{     "number": 1,     "size": 1,     "content": [       {         "connectionString": "172.26.178.229:3306",         "restoreSeconds": 15,         "restoreTime": "2021-08-11T07:26:24Z",         "instanceId": "1jxxxxx9xxxms",         "backupSetId": "1hxxxx8xxxxxa_20210811152624",         "createTime": "2021-08-12T07:40:29Z",         "backupPlanId": "1hxxxx8xxxxxa",         "vpcId": "vpc-bp1dxxxxxjy0xxxxx1xxp",         "sandboxSpecification": "MYSQL_1C_1M_SD",         "status": "running",         "vpcSwitchId": "vsw-bp1bxxxxxumxxxxxwxx2w"       }     ],     "totalElements": 1   }'),
  errCode?: string(name='ErrCode', description='The error code.', example='Param.NotFound'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='The specified parameter %s value is not valid.'),
  message?: string(name='Message', description='The error message.', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F1888AC-1138-4995-B9FE-D2734F61C058'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSandboxInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxInstancesResponseBody(name='body'),
}

/**
  * The API operation is available only in Database Backup (DBS) API of the 2021-01-01 version.
  *
 */
async function describeSandboxInstances(request: DescribeSandboxInstancesRequest): DescribeSandboxInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxRecoveryTimeRequest {
  backupPlanId: string(name='BackupPlanId', description='The ID of the backup schedule. You can call the [DescribeBackupPlanList](~~437215~~) operation to obtain the ID of the backup schedule. If you set this parameter to the backup schedule ID obtained by calling the DescribeBackupPlanList operation, the dbs prefix must be removed. Otherwise, the call fails.

>  If your instance is an ApsaraDB RDS for MySQL instance, you can configure [automatic access to the instance](~~193091~~) to automatically add the instance to DBS and obtain the ID of the backup schedule.', example='1jyjal15l****', position='Query'),
}

model DescribeSandboxRecoveryTimeResponseBody = {
  code?: string(name='Code', description='The error code.', example='Param.NotFound'),
  data?: {
    backupPlanId?: string(name='BackupPlanId', description='The backup schedule of the sandbox instance.', example='1hxxxx8xxxxxa'),
    recoveryBeginTime?: string(name='RecoveryBeginTime', description='The beginning of the time range during which the sandbox instance can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2021-08-01T12:01:01Z'),
    recoveryEndTime?: string(name='RecoveryEndTime', description='The end of the time range during which the sandbox instance can be restored. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2021-08-02T12:01:01Z'),
  }(name='Data', description='The response parameters.'),
  errCode?: string(name='ErrCode', description='The error code.', example='Param.NotFound'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='The specified parameter %s value is not valid.'),
  message?: string(name='Message', description='The error message.', example='The specified parameter %s value is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4F1888AC-1138-4995-B9FE-D2734F61C058'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSandboxRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxRecoveryTimeResponseBody(name='body'),
}

/**
  * Before you call this operation, you must enable the sandbox feature for the database instance. For more information, see [Create a sandbox instance for emergency disaster recovery of an ApsaraDB RDS for MySQL database](~~203154~~) or [Create a sandbox instance for emergency disaster recovery of a self-managed MySQL database](~~185577~~). The API operation is available only in Database Backup (DBS) API of the 2021-01-01 version.
  *
 */
async function describeSandboxRecoveryTime(request: DescribeSandboxRecoveryTimeRequest): DescribeSandboxRecoveryTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxRecoveryTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBTablesRecoveryStateRequest {
  category?: string(name='Category', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  regionCode?: string(name='RegionCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  retention?: string(name='Retention', position='Query'),
}

model ModifyDBTablesRecoveryStateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyDBTablesRecoveryStateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBTablesRecoveryStateResponseBody(name='body'),
}

async function modifyDBTablesRecoveryState(request: ModifyDBTablesRecoveryStateRequest): ModifyDBTablesRecoveryStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBTablesRecoveryState', 'POST', '/', 'json', false, 'json', request);
}

model SupportDBTableRecoveryRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionCode?: string(name='RegionCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SupportDBTableRecoveryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model SupportDBTableRecoveryResponse = {
  headers: map[string]string(name='headers'),
  body: SupportDBTableRecoveryResponseBody(name='body'),
}

async function supportDBTableRecovery(request: SupportDBTableRecoveryRequest): SupportDBTableRecoveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SupportDBTableRecovery', 'POST', '/', 'json', false, 'json', request);
}

