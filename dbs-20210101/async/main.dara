/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dbs';
  @version = '2021-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'dbs-api.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'dbs-api.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'dbs-api.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dbs-api.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dbs-api.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dbs-api.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'dbs-api.ap-northeast-1.aliyuncs.com',
    us-west-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    us-east-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    eu-central-1 = 'dbs-api.eu-central-1.aliyuncs.com',
    cn-hangzhou-finance = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-south-1 = 'dbs-api.ap-south-1.aliyuncs.com',
    eu-west-1 = 'dbs-api.eu-west-1.aliyuncs.com',
    me-east-1 = 'dbs-api.me-east-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateSandboxInstanceRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupSetId?: string(name='BackupSetId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  sandboxInstanceName?: string(name='SandboxInstanceName', position='Query'),
  sandboxPassword?: string(name='SandboxPassword', position='Query'),
  sandboxSpecification?: string(name='SandboxSpecification', position='Query'),
  sandboxType?: string(name='SandboxType', position='Query'),
  sandboxUser?: string(name='SandboxUser', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  vpcSwitchId?: string(name='VpcSwitchId', position='Query'),
}

model CreateSandboxInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    backupPlanId?: string(name='BackupPlanId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSandboxInstanceResponseBody(name='body'),
}

async function createSandboxInstance(request: CreateSandboxInstanceRequest): CreateSandboxInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSandboxInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSandboxInstanceRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteSandboxInstanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSandboxInstanceResponseBody(name='body'),
}

async function deleteSandboxInstance(request: DeleteSandboxInstanceRequest): DeleteSandboxInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSandboxInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxBackupSetsRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupSetId?: string(name='BackupSetId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
}

model DescribeSandboxBackupSetsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxBackupSetsResponseBody(name='body'),
}

async function describeSandboxBackupSets(request: DescribeSandboxBackupSetsRequest): DescribeSandboxBackupSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxBackupSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxInstancesRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
}

model DescribeSandboxInstancesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxInstancesResponseBody(name='body'),
}

async function describeSandboxInstances(request: DescribeSandboxInstancesRequest): DescribeSandboxInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSandboxRecoveryTimeRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
}

model DescribeSandboxRecoveryTimeResponseBody = {
  code?: string(name='Code'),
  data?: {
    backupPlanId?: string(name='BackupPlanId'),
    recoveryBeginTime?: string(name='RecoveryBeginTime'),
    recoveryEndTime?: string(name='RecoveryEndTime'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSandboxRecoveryTimeResponseBody(name='body'),
}

async function describeSandboxRecoveryTime(request: DescribeSandboxRecoveryTimeRequest): DescribeSandboxRecoveryTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSandboxRecoveryTime', 'POST', '/', 'json', false, 'json', request);
}

