/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'dbs-api.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'dbs-api.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'dbs-api.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dbs-api.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dbs-api.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dbs-api.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'dbs-api.ap-northeast-1.aliyuncs.com',
    us-west-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    us-east-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    eu-central-1 = 'dbs-api.eu-central-1.aliyuncs.com',
    cn-hangzhou-finance = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-south-1 = 'dbs-api.ap-south-1.aliyuncs.com',
    eu-west-1 = 'dbs-api.eu-west-1.aliyuncs.com',
    me-east-1 = 'dbs-api.me-east-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dbs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateSandboxInstanceRequest {
  backupPlanId?: string(name='BackupPlanId'),
  backupSetId?: string(name='BackupSetId'),
  restoreTime?: string(name='RestoreTime'),
  sandboxInstanceName?: string(name='SandboxInstanceName'),
  sandboxPassword?: string(name='SandboxPassword'),
  sandboxSpecification?: string(name='SandboxSpecification'),
  sandboxType?: string(name='SandboxType'),
  sandboxUser?: string(name='SandboxUser'),
  vpcId?: string(name='VpcId'),
  vpcSwitchId?: string(name='VpcSwitchId'),
}

model CreateSandboxInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    backupPlanId?: string(name='BackupPlanId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSandboxInstanceResponseBody(name='body'),
}

async function createSandboxInstanceWithOptions(request: CreateSandboxInstanceRequest, runtime: Util.RuntimeOptions): CreateSandboxInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPlanId)) {
    query['BackupPlanId'] = request.backupPlanId;
  }
  if (!Util.isUnset(request.backupSetId)) {
    query['BackupSetId'] = request.backupSetId;
  }
  if (!Util.isUnset(request.restoreTime)) {
    query['RestoreTime'] = request.restoreTime;
  }
  if (!Util.isUnset(request.sandboxInstanceName)) {
    query['SandboxInstanceName'] = request.sandboxInstanceName;
  }
  if (!Util.isUnset(request.sandboxPassword)) {
    query['SandboxPassword'] = request.sandboxPassword;
  }
  if (!Util.isUnset(request.sandboxSpecification)) {
    query['SandboxSpecification'] = request.sandboxSpecification;
  }
  if (!Util.isUnset(request.sandboxType)) {
    query['SandboxType'] = request.sandboxType;
  }
  if (!Util.isUnset(request.sandboxUser)) {
    query['SandboxUser'] = request.sandboxUser;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcSwitchId)) {
    query['VpcSwitchId'] = request.vpcSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSandboxInstance',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSandboxInstance(request: CreateSandboxInstanceRequest): CreateSandboxInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSandboxInstanceWithOptions(request, runtime);
}

model DeleteSandboxInstanceRequest {
  backupPlanId?: string(name='BackupPlanId'),
  instanceId?: string(name='InstanceId'),
}

model DeleteSandboxInstanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSandboxInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSandboxInstanceResponseBody(name='body'),
}

async function deleteSandboxInstanceWithOptions(request: DeleteSandboxInstanceRequest, runtime: Util.RuntimeOptions): DeleteSandboxInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPlanId)) {
    query['BackupPlanId'] = request.backupPlanId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSandboxInstance',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSandboxInstance(request: DeleteSandboxInstanceRequest): DeleteSandboxInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSandboxInstanceWithOptions(request, runtime);
}

model DescribeSandboxBackupSetsRequest {
  backupPlanId?: string(name='BackupPlanId'),
  backupSetId?: string(name='BackupSetId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeSandboxBackupSetsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxBackupSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSandboxBackupSetsResponseBody(name='body'),
}

async function describeSandboxBackupSetsWithOptions(request: DescribeSandboxBackupSetsRequest, runtime: Util.RuntimeOptions): DescribeSandboxBackupSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPlanId)) {
    query['BackupPlanId'] = request.backupPlanId;
  }
  if (!Util.isUnset(request.backupSetId)) {
    query['BackupSetId'] = request.backupSetId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSandboxBackupSets',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSandboxBackupSets(request: DescribeSandboxBackupSetsRequest): DescribeSandboxBackupSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSandboxBackupSetsWithOptions(request, runtime);
}

model DescribeSandboxInstancesRequest {
  backupPlanId?: string(name='BackupPlanId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeSandboxInstancesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSandboxInstancesResponseBody(name='body'),
}

async function describeSandboxInstancesWithOptions(request: DescribeSandboxInstancesRequest, runtime: Util.RuntimeOptions): DescribeSandboxInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPlanId)) {
    query['BackupPlanId'] = request.backupPlanId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSandboxInstances',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSandboxInstances(request: DescribeSandboxInstancesRequest): DescribeSandboxInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSandboxInstancesWithOptions(request, runtime);
}

model DescribeSandboxRecoveryTimeRequest {
  backupPlanId?: string(name='BackupPlanId'),
}

model DescribeSandboxRecoveryTimeResponseBody = {
  code?: string(name='Code'),
  data?: {
    backupPlanId?: string(name='BackupPlanId'),
    recoveryBeginTime?: string(name='RecoveryBeginTime'),
    recoveryEndTime?: string(name='RecoveryEndTime'),
  }(name='Data'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeSandboxRecoveryTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSandboxRecoveryTimeResponseBody(name='body'),
}

async function describeSandboxRecoveryTimeWithOptions(request: DescribeSandboxRecoveryTimeRequest, runtime: Util.RuntimeOptions): DescribeSandboxRecoveryTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPlanId)) {
    query['BackupPlanId'] = request.backupPlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSandboxRecoveryTime',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSandboxRecoveryTime(request: DescribeSandboxRecoveryTimeRequest): DescribeSandboxRecoveryTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSandboxRecoveryTimeWithOptions(request, runtime);
}

