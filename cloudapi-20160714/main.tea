/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('cloudapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeAuthorizedAppsRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  appOwnerId?: long(name='AppOwnerId'),
}

model DescribeAuthorizedAppsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  authorizedApps?: {
    authorizedApp?: [ 
    {
      appName?: string(name='AppName'),
      authorizationSource?: string(name='AuthorizationSource'),
      authVaildTime?: string(name='AuthVaildTime'),
      description?: string(name='Description'),
      authorizedTime?: string(name='AuthorizedTime'),
      appId?: long(name='AppId'),
      stageName?: string(name='StageName'),
      operator?: string(name='Operator'),
    }
  ](name='AuthorizedApp')
  }(name='AuthorizedApps'),
}

model DescribeAuthorizedAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuthorizedAppsResponseBody(name='body'),
}

async function describeAuthorizedAppsWithOptions(request: DescribeAuthorizedAppsRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuthorizedApps', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedAppsWithOptions(request, runtime);
}

model DescribePurchasedApiGroupsRequest {
  securityToken?: string(name='SecurityToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      status?: string(name='Status'),
      purchasedTime?: string(name='PurchasedTime'),
      expireTime?: string(name='ExpireTime'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      invokeTimesMax?: long(name='InvokeTimesMax'),
      invokeTimesNow?: long(name='InvokeTimesNow'),
      billingType?: string(name='BillingType'),
      regionId?: string(name='RegionId'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
}

model DescribePurchasedApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroupsWithOptions(request: DescribePurchasedApiGroupsRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePurchasedApiGroups', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupsWithOptions(request, runtime);
}

model DescribePluginsRequest {
  securityToken?: string(name='SecurityToken'),
  pluginId?: string(name='PluginId'),
  pluginType?: string(name='PluginType'),
  pluginName?: string(name='PluginName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribePluginsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  plugins?: {
    pluginAttribute?: [ 
    {
      pluginId?: string(name='PluginId'),
      modifiedTime?: string(name='ModifiedTime'),
      pluginData?: string(name='PluginData'),
      description?: int32(name='Description'),
      pluginName?: string(name='PluginName'),
      createdTime?: string(name='CreatedTime'),
      pluginType?: string(name='PluginType'),
      regionId?: int32(name='RegionId'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='PluginAttribute')
  }(name='Plugins'),
}

model DescribePluginsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginsResponseBody(name='body'),
}

async function describePluginsWithOptions(request: DescribePluginsRequest, runtime: Util.RuntimeOptions): DescribePluginsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePlugins', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePlugins(request: DescribePluginsRequest): DescribePluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginsWithOptions(request, runtime);
}

model UntagResourcesRequest {
  securityToken?: string(name='SecurityToken'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model DescribeLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  logType?: string(name='LogType'),
}

model DescribeLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  logInfos?: {
    logInfo?: [ 
    {
      slsLogStore?: string(name='SlsLogStore'),
      logType?: string(name='LogType'),
      slsProject?: string(name='SlsProject'),
      regionId?: string(name='RegionId'),
    }
  ](name='LogInfo')
  }(name='LogInfos'),
}

model DescribeLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogConfigResponseBody(name='body'),
}

async function describeLogConfigWithOptions(request: DescribeLogConfigRequest, runtime: Util.RuntimeOptions): DescribeLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogConfig', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogConfigWithOptions(request, runtime);
}

model SetApisAuthoritiesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  appId?: long(name='AppId'),
  stageName?: string(name='StageName'),
  apiIds?: string(name='ApiIds'),
  description?: string(name='Description'),
  authValidTime?: string(name='AuthValidTime'),
}

model SetApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: SetApisAuthoritiesResponseBody(name='body'),
}

async function setApisAuthoritiesWithOptions(request: SetApisAuthoritiesRequest, runtime: Util.RuntimeOptions): SetApisAuthoritiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetApisAuthorities', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApisAuthoritiesWithOptions(request, runtime);
}

model DescribeGroupConfigSynFlowRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
}

model DescribeGroupConfigSynFlowResponseBody = {
  apiCopyVersion?: string(name='ApiCopyVersion'),
  sourceGroupId?: string(name='SourceGroupId'),
  targetGroupId?: string(name='TargetGroupId'),
  executionTime?: string(name='ExecutionTime'),
  flowId?: string(name='FlowId'),
  requestId?: string(name='RequestId'),
  modifiedTime?: string(name='ModifiedTime'),
  region?: string(name='Region'),
  flowStatus?: string(name='FlowStatus'),
  targetGroupName?: string(name='TargetGroupName'),
  createdTime?: string(name='CreatedTime'),
  sourceGroupName?: string(name='SourceGroupName'),
}

model DescribeGroupConfigSynFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupConfigSynFlowResponseBody(name='body'),
}

async function describeGroupConfigSynFlowWithOptions(request: DescribeGroupConfigSynFlowRequest, runtime: Util.RuntimeOptions): DescribeGroupConfigSynFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupConfigSynFlow', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupConfigSynFlow(request: DescribeGroupConfigSynFlowRequest): DescribeGroupConfigSynFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupConfigSynFlowWithOptions(request, runtime);
}

model DeleteSignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
}

model DeleteSignatureResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSignatureResponseBody(name='body'),
}

async function deleteSignatureWithOptions(request: DeleteSignatureRequest, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSignature', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSignatureWithOptions(request, runtime);
}

model DeleteTrafficControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficControlResponseBody(name='body'),
}

async function deleteTrafficControlWithOptions(request: DeleteTrafficControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrafficControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficControlWithOptions(request, runtime);
}

model CreateFcServiceLinkedRoleRequest {
  securityToken?: string(name='SecurityToken'),
}

model CreateFcServiceLinkedRoleResponseBody = {
  roleArn?: string(name='RoleArn'),
  requestId?: string(name='RequestId'),
}

model CreateFcServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFcServiceLinkedRoleResponseBody(name='body'),
}

async function createFcServiceLinkedRoleWithOptions(request: CreateFcServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateFcServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFcServiceLinkedRole', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFcServiceLinkedRole(request: CreateFcServiceLinkedRoleRequest): CreateFcServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFcServiceLinkedRoleWithOptions(request, runtime);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId'),
  systemParams?: {
    systemParamItem?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParamItem')
  }(name='SystemParams'),
}

model DescribeSystemParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemParametersResponseBody(name='body'),
}

async function describeSystemParametersWithOptions(request: DescribeSystemParametersRequest, runtime: Util.RuntimeOptions): DescribeSystemParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSystemParameters', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParametersWithOptions(request, runtime);
}

model DescribeInstanceNewConnectionsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  sbcName?: string(name='SbcName'),
}

model DescribeInstanceNewConnectionsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceNewConnections?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='InstanceNewConnections'),
}

model DescribeInstanceNewConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceNewConnectionsResponseBody(name='body'),
}

async function describeInstanceNewConnectionsWithOptions(request: DescribeInstanceNewConnectionsRequest, runtime: Util.RuntimeOptions): DescribeInstanceNewConnectionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceNewConnections', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceNewConnections(request: DescribeInstanceNewConnectionsRequest): DescribeInstanceNewConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceNewConnectionsWithOptions(request, runtime);
}

model DescribeUpdateVpcInfoTaskRequest {
  securityToken?: string(name='SecurityToken'),
  operationUid?: string(name='OperationUid'),
}

model DescribeUpdateVpcInfoTaskResponseBody = {
  requestId?: string(name='RequestId'),
  apiUpdateVpcInfoResults?: {
    apiUpdateVpcInfoResult?: [ 
    {
      stageId?: string(name='StageId'),
      updateStatus?: string(name='UpdateStatus'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      apiUid?: string(name='ApiUid'),
      errorMsg?: string(name='ErrorMsg'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
    }
  ](name='ApiUpdateVpcInfoResult')
  }(name='ApiUpdateVpcInfoResults'),
}

model DescribeUpdateVpcInfoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpdateVpcInfoTaskResponseBody(name='body'),
}

async function describeUpdateVpcInfoTaskWithOptions(request: DescribeUpdateVpcInfoTaskRequest, runtime: Util.RuntimeOptions): DescribeUpdateVpcInfoTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUpdateVpcInfoTask', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUpdateVpcInfoTask(request: DescribeUpdateVpcInfoTaskRequest): DescribeUpdateVpcInfoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpdateVpcInfoTaskWithOptions(request, runtime);
}

model DeletePluginRequest {
  securityToken?: string(name='SecurityToken'),
  pluginId?: string(name='PluginId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeletePluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePluginResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePluginResponseBody(name='body'),
}

async function deletePluginWithOptions(request: DeletePluginRequest, runtime: Util.RuntimeOptions): DeletePluginResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePlugin', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePlugin(request: DeletePluginRequest): DeletePluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePluginWithOptions(request, runtime);
}

model CreateGroupConfigSynFlowRequest {
  securityToken?: string(name='SecurityToken'),
  flowVersion?: int32(name='FlowVersion'),
  sourceGroupId?: string(name='SourceGroupId'),
  targetGroupId?: string(name='TargetGroupId'),
  apiSynVersion?: string(name='ApiSynVersion'),
  sourceGroupRegion?: string(name='SourceGroupRegion'),
}

model CreateGroupConfigSynFlowResponseBody = {
  flowId?: string(name='FlowId'),
  requestId?: string(name='RequestId'),
}

model CreateGroupConfigSynFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupConfigSynFlowResponseBody(name='body'),
}

async function createGroupConfigSynFlowWithOptions(request: CreateGroupConfigSynFlowRequest, runtime: Util.RuntimeOptions): CreateGroupConfigSynFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateGroupConfigSynFlow', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createGroupConfigSynFlow(request: CreateGroupConfigSynFlowRequest): CreateGroupConfigSynFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupConfigSynFlowWithOptions(request, runtime);
}

model BatchDeployApisRequest {
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
  description?: string(name='Description'),
  api?: [ 
    {
      groupId?: string(name='GroupId'),
      apiUid?: string(name='ApiUid'),
    }
  ](name='Api'),
}

model BatchDeployApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model BatchDeployApisResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeployApisResponseBody(name='body'),
}

async function batchDeployApisWithOptions(request: BatchDeployApisRequest, runtime: Util.RuntimeOptions): BatchDeployApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeployApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeployApis(request: BatchDeployApisRequest): BatchDeployApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeployApisWithOptions(request, runtime);
}

model DescribePluginTemplatesRequest {
  securityToken?: string(name='SecurityToken'),
  pluginName?: string(name='PluginName'),
  language?: string(name='Language'),
}

model DescribePluginTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  templates?: {
    template?: [ 
    {
      title?: string(name='Title'),
      documentAnchor?: string(name='DocumentAnchor'),
      description?: string(name='Description'),
      documentId?: string(name='DocumentId'),
      sample?: string(name='Sample'),
    }
  ](name='Template')
  }(name='Templates'),
}

model DescribePluginTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginTemplatesResponseBody(name='body'),
}

async function describePluginTemplatesWithOptions(request: DescribePluginTemplatesRequest, runtime: Util.RuntimeOptions): DescribePluginTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePluginTemplates', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePluginTemplates(request: DescribePluginTemplatesRequest): DescribePluginTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginTemplatesWithOptions(request, runtime);
}

model RemoveIpControlApisRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model RemoveIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIpControlApisResponseBody(name='body'),
}

async function removeIpControlApisWithOptions(request: RemoveIpControlApisRequest, runtime: Util.RuntimeOptions): RemoveIpControlApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveIpControlApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlApisWithOptions(request, runtime);
}

model DescribeAbolishApiTaskRequest {
  securityToken?: string(name='SecurityToken'),
  operationUid?: string(name='OperationUid'),
}

model DescribeAbolishApiTaskResponseBody = {
  requestId?: string(name='RequestId'),
  apiAbolishResults?: {
    apiAbolishResult?: [ 
    {
      stageId?: string(name='StageId'),
      abolishStatus?: string(name='AbolishStatus'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      apiUid?: string(name='ApiUid'),
      errorMsg?: string(name='ErrorMsg'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
    }
  ](name='ApiAbolishResult')
  }(name='ApiAbolishResults'),
}

model DescribeAbolishApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAbolishApiTaskResponseBody(name='body'),
}

async function describeAbolishApiTaskWithOptions(request: DescribeAbolishApiTaskRequest, runtime: Util.RuntimeOptions): DescribeAbolishApiTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAbolishApiTask', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAbolishApiTask(request: DescribeAbolishApiTaskRequest): DescribeAbolishApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAbolishApiTaskWithOptions(request, runtime);
}

model DescribeSubscribeRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
  subscribeId?: long(name='SubscribeId'),
}

model DescribeSubscribeResponseBody = {
  userId?: long(name='UserId'),
  subscribeId?: long(name='SubscribeId'),
  subscribeStatus?: int32(name='SubscribeStatus'),
  requestId?: string(name='RequestId'),
  modifiedTime?: string(name='ModifiedTime'),
  appKey?: string(name='AppKey'),
  secret?: string(name='Secret'),
  version?: string(name='Version'),
  productId?: long(name='ProductId'),
  userName?: string(name='UserName'),
  specsCode?: string(name='SpecsCode'),
  createdTime?: string(name='CreatedTime'),
}

model DescribeSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscribeResponseBody(name='body'),
}

async function describeSubscribeWithOptions(request: DescribeSubscribeRequest, runtime: Util.RuntimeOptions): DescribeSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubscribe', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubscribe(request: DescribeSubscribeRequest): DescribeSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscribeWithOptions(request, runtime);
}

model CreateApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiName?: string(name='ApiName'),
  visibility?: string(name='Visibility'),
  description?: string(name='Description'),
  authType?: string(name='AuthType'),
  requestConfig?: string(name='RequestConfig'),
  serviceConfig?: string(name='ServiceConfig'),
  requestParameters?: string(name='RequestParameters'),
  systemParameters?: string(name='SystemParameters'),
  constantParameters?: string(name='ConstantParameters'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  resultType?: string(name='ResultType'),
  resultSample?: string(name='ResultSample'),
  failResultSample?: string(name='FailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples'),
  resultDescriptions?: string(name='ResultDescriptions'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
}

model CreateApiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiResponseBody(name='body'),
}

async function createApiWithOptions(request: CreateApiRequest, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiWithOptions(request, runtime);
}

model DescribeConflictApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeConflictApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  conflictApis?: {
    conflictApi?: [ 
    {
      source?: {
        apiVersion?: string(name='ApiVersion'),
        apiId?: string(name='ApiId'),
        groupName?: string(name='GroupName'),
        groupId?: string(name='GroupId'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        stageName?: string(name='StageName'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Source'),
      target?: {
        apiId?: string(name='ApiId'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Target'),
    }
  ](name='ConflictApi')
  }(name='ConflictApis'),
}

model DescribeConflictApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConflictApisResponseBody(name='body'),
}

async function describeConflictApisWithOptions(request: DescribeConflictApisRequest, runtime: Util.RuntimeOptions): DescribeConflictApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConflictApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConflictApis(request: DescribeConflictApisRequest): DescribeConflictApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConflictApisWithOptions(request, runtime);
}

model DeleteAppRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DescribeRegionLatencyRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeRegionLatencyResponseBody = {
  requestId?: string(name='RequestId'),
  latencyPacket?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='LatencyPacket'),
}

model DescribeRegionLatencyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionLatencyResponseBody(name='body'),
}

async function describeRegionLatencyWithOptions(request: DescribeRegionLatencyRequest, runtime: Util.RuntimeOptions): DescribeRegionLatencyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionLatency', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionLatency(request: DescribeRegionLatencyRequest): DescribeRegionLatencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionLatencyWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  instanceId?: string(name='InstanceId'),
  instanceSpec?: string(name='InstanceSpec'),
  autoPay?: boolean(name='AutoPay'),
  token?: string(name='Token'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceSpec', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model BatchAbolishApisRequest {
  securityToken?: string(name='SecurityToken'),
  api?: [ 
    {
      stageId?: string(name='StageId'),
      groupId?: string(name='GroupId'),
      apiUid?: string(name='ApiUid'),
    }
  ](name='Api'),
}

model BatchAbolishApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model BatchAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAbolishApisResponseBody(name='body'),
}

async function batchAbolishApisWithOptions(request: BatchAbolishApisRequest, runtime: Util.RuntimeOptions): BatchAbolishApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchAbolishApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchAbolishApis(request: BatchAbolishApisRequest): BatchAbolishApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAbolishApisWithOptions(request, runtime);
}

model DescribeApiHistoriesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeApiHistoriesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiHisItems?: {
    apiHisItem?: [ 
    {
      status?: string(name='Status'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      deployedTime?: string(name='DeployedTime'),
      stageName?: string(name='StageName'),
      historyVersion?: string(name='HistoryVersion'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
}

model DescribeApiHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiHistoriesResponseBody(name='body'),
}

async function describeApiHistoriesWithOptions(request: DescribeApiHistoriesRequest, runtime: Util.RuntimeOptions): DescribeApiHistoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiHistories', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoriesWithOptions(request, runtime);
}

model RemoveTrafficControlApisRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model RemoveTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTrafficControlApisResponseBody(name='body'),
}

async function removeTrafficControlApisWithOptions(request: RemoveTrafficControlApisRequest, runtime: Util.RuntimeOptions): RemoveTrafficControlApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTrafficControlApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTrafficControlApisWithOptions(request, runtime);
}

model ModifyApiMarketAttributesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  needCharging?: boolean(name='NeedCharging'),
  marketChargingMode?: string(name='MarketChargingMode'),
}

model ModifyApiMarketAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiMarketAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiMarketAttributesResponseBody(name='body'),
}

async function modifyApiMarketAttributesWithOptions(request: ModifyApiMarketAttributesRequest, runtime: Util.RuntimeOptions): ModifyApiMarketAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApiMarketAttributes', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApiMarketAttributes(request: ModifyApiMarketAttributesRequest): ModifyApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiMarketAttributesWithOptions(request, runtime);
}

model DeleteAllTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

async function deleteAllTrafficSpecialControlWithOptions(request: DeleteAllTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteAllTrafficSpecialControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAllTrafficSpecialControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllTrafficSpecialControlWithOptions(request, runtime);
}

model AbolishApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model AbolishApiResponse = {
  headers: map[string]string(name='headers'),
  body: AbolishApiResponseBody(name='body'),
}

async function abolishApiWithOptions(request: AbolishApiRequest, runtime: Util.RuntimeOptions): AbolishApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AbolishApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiWithOptions(request, runtime);
}

model CreateApiGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupName?: string(name='GroupName'),
  basePath?: string(name='BasePath'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateApiGroupResponseBody = {
  tagStatus?: boolean(name='TagStatus'),
  basePath?: string(name='BasePath'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  subDomain?: string(name='SubDomain'),
  instanceType?: string(name='InstanceType'),
}

model CreateApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroupWithOptions(request: CreateApiGroupRequest, runtime: Util.RuntimeOptions): CreateApiGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApiGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupWithOptions(request, runtime);
}

model DeleteProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
}

model DeleteProductResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DescribeDomainsResolutionRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainNames?: string(name='DomainNames'),
}

model DescribeDomainsResolutionResponseBody = {
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  domainResolutions?: {
    domainResolution?: [ 
    {
      domainResolutionStatus?: string(name='DomainResolutionStatus'),
      domainName?: string(name='DomainName'),
    }
  ](name='DomainResolution')
  }(name='DomainResolutions'),
}

model DescribeDomainsResolutionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResolutionResponseBody(name='body'),
}

async function describeDomainsResolutionWithOptions(request: DescribeDomainsResolutionRequest, runtime: Util.RuntimeOptions): DescribeDomainsResolutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainsResolution', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainsResolution(request: DescribeDomainsResolutionRequest): DescribeDomainsResolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsResolutionWithOptions(request, runtime);
}

model DeleteApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiResponseBody(name='body'),
}

async function deleteApiWithOptions(request: DeleteApiRequest, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiWithOptions(request, runtime);
}

model SynchronizeGroupConfigFlowStartRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  modifyPolicy?: string(name='ModifyPolicy'),
  vpcName?: string(name='VpcName'),
  vpcSchema?: string(name='VpcSchema'),
  include?: [ string ](name='Include'),
  exclude?: [ string ](name='Exclude'),
}

model SynchronizeGroupConfigFlowStartResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
  launch?: boolean(name='Launch'),
}

model SynchronizeGroupConfigFlowStartResponse = {
  headers: map[string]string(name='headers'),
  body: SynchronizeGroupConfigFlowStartResponseBody(name='body'),
}

async function synchronizeGroupConfigFlowStartWithOptions(request: SynchronizeGroupConfigFlowStartRequest, runtime: Util.RuntimeOptions): SynchronizeGroupConfigFlowStartResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SynchronizeGroupConfigFlowStart', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function synchronizeGroupConfigFlowStart(request: SynchronizeGroupConfigFlowStartRequest): SynchronizeGroupConfigFlowStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return synchronizeGroupConfigFlowStartWithOptions(request, runtime);
}

model DescribePurchasedApiGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
}

model DescribePurchasedApiGroupResponseBody = {
  status?: string(name='Status'),
  purchasedTime?: string(name='PurchasedTime'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
  domains?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='DomainItem')
  }(name='Domains'),
}

model DescribePurchasedApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApiGroupResponseBody(name='body'),
}

async function describePurchasedApiGroupWithOptions(request: DescribePurchasedApiGroupRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePurchasedApiGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupWithOptions(request, runtime);
}

model RefreshMarketGroupAuthorizationsRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
}

model RefreshMarketGroupAuthorizationsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefreshMarketGroupAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshMarketGroupAuthorizationsResponseBody(name='body'),
}

async function refreshMarketGroupAuthorizationsWithOptions(request: RefreshMarketGroupAuthorizationsRequest, runtime: Util.RuntimeOptions): RefreshMarketGroupAuthorizationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshMarketGroupAuthorizations', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshMarketGroupAuthorizations(request: RefreshMarketGroupAuthorizationsRequest): RefreshMarketGroupAuthorizationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshMarketGroupAuthorizationsWithOptions(request, runtime);
}

model ModifyIpControlPolicyItemRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  policyItemId?: string(name='PolicyItemId'),
  appId?: string(name='AppId'),
  cidrIp?: string(name='CidrIp'),
}

model ModifyIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpControlPolicyItemResponseBody(name='body'),
}

async function modifyIpControlPolicyItemWithOptions(request: ModifyIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): ModifyIpControlPolicyItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIpControlPolicyItem', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlPolicyItemWithOptions(request, runtime);
}

model CreateTrafficControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlName?: string(name='TrafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit'),
  apiDefault?: int32(name='ApiDefault'),
  userDefault?: int32(name='UserDefault'),
  appDefault?: int32(name='AppDefault'),
  description?: string(name='Description'),
}

model CreateTrafficControlResponseBody = {
  trafficControlId?: string(name='TrafficControlId'),
  requestId?: string(name='RequestId'),
}

model CreateTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficControlResponseBody(name='body'),
}

async function createTrafficControlWithOptions(request: CreateTrafficControlRequest, runtime: Util.RuntimeOptions): CreateTrafficControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTrafficControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficControlWithOptions(request, runtime);
}

model SdkGenerateByAppRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  language?: string(name='Language'),
}

model SdkGenerateByAppResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByAppResponse = {
  headers: map[string]string(name='headers'),
  body: SdkGenerateByAppResponseBody(name='body'),
}

async function sdkGenerateByAppWithOptions(request: SdkGenerateByAppRequest, runtime: Util.RuntimeOptions): SdkGenerateByAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SdkGenerateByApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByAppWithOptions(request, runtime);
}

model SetDomainCertificateRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
  certificateName?: string(name='CertificateName'),
  certificateBody?: string(name='CertificateBody'),
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  caCertificateBody?: string(name='CaCertificateBody'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainCertificateResponseBody(name='body'),
}

async function setDomainCertificateWithOptions(request: SetDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainCertificate', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainCertificateWithOptions(request, runtime);
}

model DescribeModelsRequest {
  groupId?: string(name='GroupId'),
  modelName?: string(name='ModelName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  modelId?: string(name='ModelId'),
}

model DescribeModelsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  modelDetails?: {
    modelDetail?: [ 
    {
      modifiedTime?: string(name='ModifiedTime'),
      groupId?: string(name='GroupId'),
      description?: string(name='Description'),
      schema?: string(name='Schema'),
      modelName?: string(name='ModelName'),
      createdTime?: string(name='CreatedTime'),
      modelId?: string(name='ModelId'),
      modelRef?: string(name='ModelRef'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails'),
}

model DescribeModelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelsResponseBody(name='body'),
}

async function describeModelsWithOptions(request: DescribeModelsRequest, runtime: Util.RuntimeOptions): DescribeModelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeModels', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelsWithOptions(request, runtime);
}

model SdkGenerateByGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  language?: string(name='Language'),
}

model SdkGenerateByGroupResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SdkGenerateByGroupResponseBody(name='body'),
}

async function sdkGenerateByGroupWithOptions(request: SdkGenerateByGroupRequest, runtime: Util.RuntimeOptions): SdkGenerateByGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SdkGenerateByGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByGroupWithOptions(request, runtime);
}

model SetAppsAuthoritiesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  appIds?: string(name='AppIds'),
  description?: string(name='Description'),
  authValidTime?: string(name='AuthValidTime'),
}

model SetAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppsAuthoritiesResponseBody(name='body'),
}

async function setAppsAuthoritiesWithOptions(request: SetAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): SetAppsAuthoritiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppsAuthorities', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppsAuthoritiesWithOptions(request, runtime);
}

model CheckInstanceSupportStageNameRequest {
  securityToken?: string(name='SecurityToken'),
  instanceId?: string(name='InstanceId'),
}

model CheckInstanceSupportStageNameResponseBody = {
  isSupport?: boolean(name='IsSupport'),
  requestId?: string(name='RequestId'),
}

model CheckInstanceSupportStageNameResponse = {
  headers: map[string]string(name='headers'),
  body: CheckInstanceSupportStageNameResponseBody(name='body'),
}

async function checkInstanceSupportStageNameWithOptions(request: CheckInstanceSupportStageNameRequest, runtime: Util.RuntimeOptions): CheckInstanceSupportStageNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckInstanceSupportStageName', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkInstanceSupportStageName(request: CheckInstanceSupportStageNameRequest): CheckInstanceSupportStageNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkInstanceSupportStageNameWithOptions(request, runtime);
}

model TagResourcesRequest {
  securityToken?: string(name='SecurityToken'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model DescribeApiTrafficDataRequest {
  securityToken?: string(name='SecurityToken'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeApiTrafficDataResponseBody = {
  requestId?: string(name='RequestId'),
  callUploads?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='CallUploads'),
  callDownloads?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='CallDownloads'),
}

model DescribeApiTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiTrafficDataResponseBody(name='body'),
}

async function describeApiTrafficDataWithOptions(request: DescribeApiTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiTrafficData', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficDataWithOptions(request, runtime);
}

model CreateAppRequest {
  securityToken?: string(name='SecurityToken'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  source?: string(name='Source'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateAppResponseBody = {
  tagStatus?: boolean(name='TagStatus'),
  requestId?: string(name='RequestId'),
  appId?: long(name='AppId'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model ResetAppCodeRequest {
  securityToken?: string(name='SecurityToken'),
  appCode?: string(name='AppCode'),
}

model ResetAppCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAppCodeResponseBody(name='body'),
}

async function resetAppCodeWithOptions(request: ResetAppCodeRequest, runtime: Util.RuntimeOptions): ResetAppCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAppCode', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeWithOptions(request, runtime);
}

model DeleteApiStageVariableRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageId?: string(name='StageId'),
  variableName?: string(name='VariableName'),
}

model DeleteApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiStageVariableResponseBody(name='body'),
}

async function deleteApiStageVariableWithOptions(request: DeleteApiStageVariableRequest, runtime: Util.RuntimeOptions): DeleteApiStageVariableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApiStageVariable', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiStageVariableWithOptions(request, runtime);
}

model DescribeReadyReservationApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeReadyReservationApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apis?: {
    apiDigest?: [ 
    {
      apiId?: string(name='ApiId'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      path?: string(name='Path'),
      method?: string(name='Method'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiDigest')
  }(name='Apis'),
}

model DescribeReadyReservationApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReadyReservationApisResponseBody(name='body'),
}

async function describeReadyReservationApisWithOptions(request: DescribeReadyReservationApisRequest, runtime: Util.RuntimeOptions): DescribeReadyReservationApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeReadyReservationApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReadyReservationApis(request: DescribeReadyReservationApisRequest): DescribeReadyReservationApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReadyReservationApisWithOptions(request, runtime);
}

model ModifySignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
  signatureKey?: string(name='SignatureKey'),
  signatureSecret?: string(name='SignatureSecret'),
}

model ModifySignatureResponseBody = {
  requestId?: string(name='RequestId'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
}

model ModifySignatureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySignatureResponseBody(name='body'),
}

async function modifySignatureWithOptions(request: ModifySignatureRequest, runtime: Util.RuntimeOptions): ModifySignatureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySignature', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySignatureWithOptions(request, runtime);
}

model DescribeInstanceLatencyRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceLatencyResponseBody = {
  requestId?: string(name='RequestId'),
  instanceLatency?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstanceLatency'),
}

model DescribeInstanceLatencyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceLatencyResponseBody(name='body'),
}

async function describeInstanceLatencyWithOptions(request: DescribeInstanceLatencyRequest, runtime: Util.RuntimeOptions): DescribeInstanceLatencyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceLatency', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceLatency(request: DescribeInstanceLatencyRequest): DescribeInstanceLatencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceLatencyWithOptions(request, runtime);
}

model DescribeApiQpsDataRequest {
  securityToken?: string(name='SecurityToken'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeApiQpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  callSuccesses?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='CallSuccesses'),
  callFails?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='CallFails'),
}

model DescribeApiQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiQpsDataResponseBody(name='body'),
}

async function describeApiQpsDataWithOptions(request: DescribeApiQpsDataRequest, runtime: Util.RuntimeOptions): DescribeApiQpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiQpsData', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiQpsDataWithOptions(request, runtime);
}

model DescribeInstanceHttpCodeRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceHttpCodeResponseBody = {
  requestId?: string(name='RequestId'),
  instanceHttpCode?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='InstanceHttpCode'),
}

model DescribeInstanceHttpCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceHttpCodeResponseBody(name='body'),
}

async function describeInstanceHttpCodeWithOptions(request: DescribeInstanceHttpCodeRequest, runtime: Util.RuntimeOptions): DescribeInstanceHttpCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceHttpCode', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceHttpCode(request: DescribeInstanceHttpCodeRequest): DescribeInstanceHttpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHttpCodeWithOptions(request, runtime);
}

model DescribeAppSecurityRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeAppSecurityResponseBody = {
  appSecret?: string(name='AppSecret'),
  requestId?: string(name='RequestId'),
  appKey?: string(name='AppKey'),
  modifiedTime?: string(name='ModifiedTime'),
  appCode?: string(name='AppCode'),
  createdTime?: string(name='CreatedTime'),
}

model DescribeAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppSecurityResponseBody(name='body'),
}

async function describeAppSecurityWithOptions(request: DescribeAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAppSecurity', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityWithOptions(request, runtime);
}

model DescribeZonesRequest {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      zoneId?: string(name='ZoneId'),
      localName?: string(name='LocalName'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DescribeRegionTrafficRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeRegionTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  trafficPerSecond?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='TrafficPerSecond'),
}

model DescribeRegionTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionTrafficResponseBody(name='body'),
}

async function describeRegionTrafficWithOptions(request: DescribeRegionTrafficRequest, runtime: Util.RuntimeOptions): DescribeRegionTrafficResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionTraffic', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionTraffic(request: DescribeRegionTrafficRequest): DescribeRegionTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionTrafficWithOptions(request, runtime);
}

model DescribeApisByAppRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  apiUid?: string(name='ApiUid'),
}

model DescribeApisByAppResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      authorizationSource?: string(name='AuthorizationSource'),
      authVaildTime?: string(name='AuthVaildTime'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      operator?: string(name='Operator'),
      stageName?: string(name='StageName'),
      createdTime?: string(name='CreatedTime'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
}

model DescribeApisByAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByAppWithOptions(request: DescribeApisByAppRequest, runtime: Util.RuntimeOptions): DescribeApisByAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApisByApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByAppWithOptions(request, runtime);
}

model DescribeRegionQpsGroupByInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeRegionQpsGroupByInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceQps?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstanceQps'),
}

model DescribeRegionQpsGroupByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionQpsGroupByInstanceResponseBody(name='body'),
}

async function describeRegionQpsGroupByInstanceWithOptions(request: DescribeRegionQpsGroupByInstanceRequest, runtime: Util.RuntimeOptions): DescribeRegionQpsGroupByInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionQpsGroupByInstance', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionQpsGroupByInstance(request: DescribeRegionQpsGroupByInstanceRequest): DescribeRegionQpsGroupByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionQpsGroupByInstanceWithOptions(request, runtime);
}

model DryRunSwaggerRequest {
  overwrite?: boolean(name='Overwrite'),
  globalCondition?: map[string]any(name='GlobalCondition'),
  dataFormat?: string(name='DataFormat'),
  data?: string(name='Data'),
  groupId?: string(name='GroupId'),
}

model DryRunSwaggerShrinkRequest {
  overwrite?: boolean(name='Overwrite'),
  globalConditionShrink?: string(name='GlobalCondition'),
  dataFormat?: string(name='DataFormat'),
  data?: string(name='Data'),
  groupId?: string(name='GroupId'),
}

model DryRunSwaggerResponseBody = {
  globalCondition?: string(name='GlobalCondition'),
  requestId?: string(name='RequestId'),
  success?: {
    apiDryRunSwaggerSuccess?: [ 
    {
      path?: string(name='Path'),
      httpMethod?: string(name='HttpMethod'),
      apiSwagger?: string(name='ApiSwagger'),
      apiOperation?: string(name='ApiOperation'),
      apiUid?: string(name='ApiUid'),
    }
  ](name='ApiDryRunSwaggerSuccess')
  }(name='Success'),
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      path?: string(name='Path'),
      httpMethod?: string(name='HttpMethod'),
      errorMsg?: string(name='ErrorMsg'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      modelName?: string(name='ModelName'),
      groupId?: string(name='GroupId'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      modelUid?: string(name='ModelUid'),
      modelName?: string(name='ModelName'),
      groupId?: string(name='GroupId'),
      modelOperation?: string(name='ModelOperation'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
}

model DryRunSwaggerResponse = {
  headers: map[string]string(name='headers'),
  body: DryRunSwaggerResponseBody(name='body'),
}

async function dryRunSwaggerWithOptions(tmpReq: DryRunSwaggerRequest, runtime: Util.RuntimeOptions): DryRunSwaggerResponse {
  Util.validateModel(tmpReq);
  var request = new DryRunSwaggerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.globalCondition)) {
    request.globalConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.globalCondition, 'GlobalCondition', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DryRunSwagger', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dryRunSwagger(request: DryRunSwaggerRequest): DryRunSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dryRunSwaggerWithOptions(request, runtime);
}

model CreatePluginRequest {
  securityToken?: string(name='SecurityToken'),
  pluginName?: string(name='PluginName'),
  pluginType?: string(name='PluginType'),
  pluginData?: string(name='PluginData'),
  description?: string(name='Description'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreatePluginResponseBody = {
  pluginId?: string(name='PluginId'),
  tagStatus?: boolean(name='TagStatus'),
  requestId?: string(name='RequestId'),
}

model CreatePluginResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePluginResponseBody(name='body'),
}

async function createPluginWithOptions(request: CreatePluginRequest, runtime: Util.RuntimeOptions): CreatePluginResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePlugin', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPlugin(request: CreatePluginRequest): CreatePluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPluginWithOptions(request, runtime);
}

model ModifyLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  slsProject?: string(name='SlsProject'),
  slsLogStore?: string(name='SlsLogStore'),
  logType?: string(name='LogType'),
}

model ModifyLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogConfigResponseBody(name='body'),
}

async function modifyLogConfigWithOptions(request: ModifyLogConfigRequest, runtime: Util.RuntimeOptions): ModifyLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLogConfig', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogConfigWithOptions(request, runtime);
}

model DescribeApisByIpControlRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeApisByIpControlResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiInfos?: {
    apiInfo?: [ 
    {
      boundTime?: string(name='BoundTime'),
      visibility?: string(name='Visibility'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
}

model DescribeApisByIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByIpControlResponseBody(name='body'),
}

async function describeApisByIpControlWithOptions(request: DescribeApisByIpControlRequest, runtime: Util.RuntimeOptions): DescribeApisByIpControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApisByIpControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByIpControlWithOptions(request, runtime);
}

model DescribeDeployedApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
}

model DescribeDeployedApiResponseBody = {
  apiId?: string(name='ApiId'),
  resultType?: string(name='ResultType'),
  disableInternet?: boolean(name='DisableInternet'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultSample?: string(name='ResultSample'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  regionId?: string(name='RegionId'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  visibility?: string(name='Visibility'),
  failResultSample?: string(name='FailResultSample'),
  authType?: string(name='AuthType'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupId?: string(name='GroupId'),
  deployedTime?: string(name='DeployedTime'),
  stageName?: string(name='StageName'),
  apiName?: string(name='ApiName'),
  requestConfig?: {
    bodyModel?: string(name='BodyModel'),
    requestPath?: string(name='RequestPath'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    bodyFormat?: string(name='BodyFormat'),
    requestMode?: string(name='RequestMode'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  serviceConfig?: {
    vpcId?: string(name='VpcId'),
    mockStatusCode?: int32(name='MockStatusCode'),
    servicePath?: string(name='ServicePath'),
    mock?: string(name='Mock'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    mockResult?: string(name='MockResult'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerValue?: string(name='HeaderValue'),
        headerName?: string(name='HeaderName'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    vpcConfig?: {
      vpcId?: string(name='VpcId'),
      instanceId?: string(name='InstanceId'),
      port?: int32(name='Port'),
      name?: string(name='Name'),
    }(name='VpcConfig'),
    functionComputeConfig?: {
      fcType?: string(name='FcType'),
      roleArn?: string(name='RoleArn'),
      method?: string(name='Method'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      contentTypeValue?: string(name='ContentTypeValue'),
      regionId?: string(name='RegionId'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      functionName?: string(name='FunctionName'),
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      path?: string(name='Path'),
      serviceName?: string(name='ServiceName'),
      qualifier?: string(name='Qualifier'),
    }(name='FunctionComputeConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig?: {
    openIdApiType?: string(name='OpenIdApiType'),
    idTokenParamName?: string(name='IdTokenParamName'),
    publicKeyId?: string(name='PublicKeyId'),
    publicKey?: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      description?: string(name='Description'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      type?: string(name='Type'),
      key?: string(name='Key'),
      hasChild?: boolean(name='HasChild'),
      description?: string(name='Description'),
      pid?: string(name='Pid'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  constantParameters?: {
    constantParameter?: [ 
    {
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
      constantValue?: string(name='ConstantValue'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  requestParameters?: {
    requestParameter?: [ 
    {
      jsonScheme?: string(name='JsonScheme'),
      maxValue?: long(name='MaxValue'),
      arrayItemsType?: string(name='ArrayItemsType'),
      minValue?: long(name='MinValue'),
      docShow?: string(name='DocShow'),
      maxLength?: long(name='MaxLength'),
      defaultValue?: string(name='DefaultValue'),
      apiParameterName?: string(name='ApiParameterName'),
      enumValue?: string(name='EnumValue'),
      demoValue?: string(name='DemoValue'),
      required?: string(name='Required'),
      description?: string(name='Description'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      minLength?: long(name='MinLength'),
      docOrder?: int32(name='DocOrder'),
      location?: string(name='Location'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
}

model DescribeDeployedApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApiWithOptions(request: DescribeDeployedApiRequest, runtime: Util.RuntimeOptions): DescribeDeployedApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeployedApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApiWithOptions(request, runtime);
}

model DescribeApisBySignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeApisBySignatureResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiInfos?: {
    apiInfo?: [ 
    {
      boundTime?: string(name='BoundTime'),
      visibility?: string(name='Visibility'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
}

model DescribeApisBySignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisBySignatureResponseBody(name='body'),
}

async function describeApisBySignatureWithOptions(request: DescribeApisBySignatureRequest, runtime: Util.RuntimeOptions): DescribeApisBySignatureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApisBySignature', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisBySignatureWithOptions(request, runtime);
}

model DescribeAccordanceApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAccordanceApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  accordanceApis?: {
    accordanceApi?: [ 
    {
      source?: {
        apiId?: string(name='ApiId'),
        groupName?: string(name='GroupName'),
        groupId?: string(name='GroupId'),
        version?: string(name='Version'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        stageName?: string(name='StageName'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Source'),
      target?: {
        apiId?: string(name='ApiId'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Target'),
    }
  ](name='AccordanceApi')
  }(name='AccordanceApis'),
}

model DescribeAccordanceApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccordanceApisResponseBody(name='body'),
}

async function describeAccordanceApisWithOptions(request: DescribeAccordanceApisRequest, runtime: Util.RuntimeOptions): DescribeAccordanceApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccordanceApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccordanceApis(request: DescribeAccordanceApisRequest): DescribeAccordanceApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccordanceApisWithOptions(request, runtime);
}

model RemoveApisAuthoritiesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  appId?: long(name='AppId'),
  stageName?: string(name='StageName'),
  apiIds?: string(name='ApiIds'),
  description?: string(name='Description'),
}

model RemoveApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveApisAuthoritiesResponseBody(name='body'),
}

async function removeApisAuthoritiesWithOptions(request: RemoveApisAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveApisAuthoritiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveApisAuthorities', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeApisAuthoritiesWithOptions(request, runtime);
}

model SetVpcAccessRequest {
  securityToken?: string(name='SecurityToken'),
  name?: string(name='Name'),
  vpcId?: string(name='VpcId'),
  instanceId?: string(name='InstanceId'),
  port?: int32(name='Port'),
  description?: string(name='Description'),
}

model SetVpcAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  body: SetVpcAccessResponseBody(name='body'),
}

async function setVpcAccessWithOptions(request: SetVpcAccessRequest, runtime: Util.RuntimeOptions): SetVpcAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetVpcAccess', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVpcAccessWithOptions(request, runtime);
}

model AttachPluginRequest {
  securityToken?: string(name='SecurityToken'),
  pluginId?: string(name='PluginId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
}

model AttachPluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPluginResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPluginResponseBody(name='body'),
}

async function attachPluginWithOptions(request: AttachPluginRequest, runtime: Util.RuntimeOptions): AttachPluginResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachPlugin', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachPlugin(request: AttachPluginRequest): AttachPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachPluginWithOptions(request, runtime);
}

model DescribeSignaturesByApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
}

model DescribeSignaturesByApiResponseBody = {
  requestId?: string(name='RequestId'),
  signatures?: {
    signatureItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      signatureId?: string(name='SignatureId'),
      signatureName?: string(name='SignatureName'),
    }
  ](name='SignatureItem')
  }(name='Signatures'),
}

model DescribeSignaturesByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSignaturesByApiResponseBody(name='body'),
}

async function describeSignaturesByApiWithOptions(request: DescribeSignaturesByApiRequest, runtime: Util.RuntimeOptions): DescribeSignaturesByApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSignaturesByApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesByApiWithOptions(request, runtime);
}

model ModifyApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  description?: string(name='Description'),
  visibility?: string(name='Visibility'),
  authType?: string(name='AuthType'),
  requestConfig?: string(name='RequestConfig'),
  serviceConfig?: string(name='ServiceConfig'),
  requestParameters?: string(name='RequestParameters'),
  systemParameters?: string(name='SystemParameters'),
  constantParameters?: string(name='ConstantParameters'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  resultType?: string(name='ResultType'),
  resultSample?: string(name='ResultSample'),
  failResultSample?: string(name='FailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples'),
  resultDescriptions?: string(name='ResultDescriptions'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiResponseBody(name='body'),
}

async function modifyApiWithOptions(request: ModifyApiRequest, runtime: Util.RuntimeOptions): ModifyApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiWithOptions(request, runtime);
}

model ResetAppSecretRequest {
  securityToken?: string(name='SecurityToken'),
  appKey?: string(name='AppKey'),
}

model ResetAppSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppSecretResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAppSecretResponseBody(name='body'),
}

async function resetAppSecretWithOptions(request: ResetAppSecretRequest, runtime: Util.RuntimeOptions): ResetAppSecretResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAppSecret', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppSecretWithOptions(request, runtime);
}

model AddTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  specialType?: string(name='SpecialType'),
  specialKey?: string(name='SpecialKey'),
  trafficValue?: int32(name='TrafficValue'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: AddTrafficSpecialControlResponseBody(name='body'),
}

async function addTrafficSpecialControlWithOptions(request: AddTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): AddTrafficSpecialControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTrafficSpecialControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrafficSpecialControlWithOptions(request, runtime);
}

model DeployApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  description?: string(name='Description'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeployApiResponseBody(name='body'),
}

async function deployApiWithOptions(request: DeployApiRequest, runtime: Util.RuntimeOptions): DeployApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeployApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiWithOptions(request, runtime);
}

model ModifyAppRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model SetDomainWebSocketStatusRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
  actionValue?: string(name='ActionValue'),
}

model SetDomainWebSocketStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainWebSocketStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainWebSocketStatusResponseBody(name='body'),
}

async function setDomainWebSocketStatusWithOptions(request: SetDomainWebSocketStatusRequest, runtime: Util.RuntimeOptions): SetDomainWebSocketStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainWebSocketStatus', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWebSocketStatusWithOptions(request, runtime);
}

model DescribeInstanceDropConnectionsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  sbcName?: string(name='SbcName'),
}

model DescribeInstanceDropConnectionsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceDropConnections?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropConnections'),
}

model DescribeInstanceDropConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDropConnectionsResponseBody(name='body'),
}

async function describeInstanceDropConnectionsWithOptions(request: DescribeInstanceDropConnectionsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDropConnectionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceDropConnections', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceDropConnections(request: DescribeInstanceDropConnectionsRequest): DescribeInstanceDropConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDropConnectionsWithOptions(request, runtime);
}

model DescribeApiTrafficControlsRequest {
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeApiTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiTrafficControls?: {
    apiTrafficControlItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      apiId?: string(name='ApiId'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
      apiName?: string(name='ApiName'),
    }
  ](name='ApiTrafficControlItem')
  }(name='ApiTrafficControls'),
}

model DescribeApiTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiTrafficControlsResponseBody(name='body'),
}

async function describeApiTrafficControlsWithOptions(request: DescribeApiTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficControlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiTrafficControls', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficControlsWithOptions(request, runtime);
}

model SetSignatureApisRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model SetSignatureApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetSignatureApisResponseBody(name='body'),
}

async function setSignatureApisWithOptions(request: SetSignatureApisRequest, runtime: Util.RuntimeOptions): SetSignatureApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetSignatureApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSignatureApisWithOptions(request, runtime);
}

model DescribeAppRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
}

model DescribeAppResponseBody = {
  appName?: string(name='AppName'),
  requestId?: string(name='RequestId'),
  modifiedTime?: string(name='ModifiedTime'),
  description?: string(name='Description'),
  appId?: long(name='AppId'),
  createdTime?: string(name='CreatedTime'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeAppWithOptions(request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApp', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(request, runtime);
}

model RemoveIpControlPolicyItemRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  policyItemIds?: string(name='PolicyItemIds'),
}

model RemoveIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIpControlPolicyItemResponseBody(name='body'),
}

async function removeIpControlPolicyItemWithOptions(request: RemoveIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): RemoveIpControlPolicyItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveIpControlPolicyItem', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlPolicyItemWithOptions(request, runtime);
}

model DescribeInstanceTrafficRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  instanceTraffic?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstanceTraffic'),
}

model DescribeInstanceTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTrafficResponseBody(name='body'),
}

async function describeInstanceTrafficWithOptions(request: DescribeInstanceTrafficRequest, runtime: Util.RuntimeOptions): DescribeInstanceTrafficResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceTraffic', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceTraffic(request: DescribeInstanceTrafficRequest): DescribeInstanceTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTrafficWithOptions(request, runtime);
}

model DescribeInstanceQpsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceQpsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceQps?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='InstanceQps'),
}

model DescribeInstanceQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceQpsResponseBody(name='body'),
}

async function describeInstanceQpsWithOptions(request: DescribeInstanceQpsRequest, runtime: Util.RuntimeOptions): DescribeInstanceQpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceQps', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceQps(request: DescribeInstanceQpsRequest): DescribeInstanceQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceQpsWithOptions(request, runtime);
}

model HideProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
}

model HideProductResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model HideProductResponse = {
  headers: map[string]string(name='headers'),
  body: HideProductResponseBody(name='body'),
}

async function hideProductWithOptions(request: HideProductRequest, runtime: Util.RuntimeOptions): HideProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HideProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function hideProduct(request: HideProductRequest): HideProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return hideProductWithOptions(request, runtime);
}

model DescribeGroupQpsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
}

model DescribeGroupQpsResponseBody = {
  requestId?: string(name='RequestId'),
  groupQps?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='GroupQps'),
}

model DescribeGroupQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupQpsResponseBody(name='body'),
}

async function describeGroupQpsWithOptions(request: DescribeGroupQpsRequest, runtime: Util.RuntimeOptions): DescribeGroupQpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupQps', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupQps(request: DescribeGroupQpsRequest): DescribeGroupQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupQpsWithOptions(request, runtime);
}

model CreateApiStageVariableRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageId?: string(name='StageId'),
  variableName?: string(name='VariableName'),
  supportRoute?: boolean(name='SupportRoute'),
  variableValue?: string(name='VariableValue'),
  stageRouteModel?: string(name='StageRouteModel'),
}

model CreateApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiStageVariableResponseBody(name='body'),
}

async function createApiStageVariableWithOptions(request: CreateApiStageVariableRequest, runtime: Util.RuntimeOptions): CreateApiStageVariableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApiStageVariable', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiStageVariableWithOptions(request, runtime);
}

model CreateMonitorGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId'),
  auth?: string(name='Auth'),
}

model CreateMonitorGroupResponseBody = {
  monitorGroupId?: long(name='MonitorGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupResponseBody(name='body'),
}

async function createMonitorGroupWithOptions(request: CreateMonitorGroupRequest, runtime: Util.RuntimeOptions): CreateMonitorGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMonitorGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMonitorGroup(request: CreateMonitorGroupRequest): CreateMonitorGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMonitorGroupWithOptions(request, runtime);
}

model DescribeApiMarketAttributesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
}

model DescribeApiMarketAttributesResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
  marketChargingMode?: string(name='MarketChargingMode'),
  needCharging?: string(name='NeedCharging'),
}

model DescribeApiMarketAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiMarketAttributesResponseBody(name='body'),
}

async function describeApiMarketAttributesWithOptions(request: DescribeApiMarketAttributesRequest, runtime: Util.RuntimeOptions): DescribeApiMarketAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiMarketAttributes', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiMarketAttributesWithOptions(request, runtime);
}

model DescribeApiSignaturesRequest {
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeApiSignaturesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiSignatures?: {
    apiSignatureItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      apiId?: string(name='ApiId'),
      signatureId?: string(name='SignatureId'),
      signatureName?: string(name='SignatureName'),
      apiName?: string(name='ApiName'),
    }
  ](name='ApiSignatureItem')
  }(name='ApiSignatures'),
}

model DescribeApiSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiSignaturesResponseBody(name='body'),
}

async function describeApiSignaturesWithOptions(request: DescribeApiSignaturesRequest, runtime: Util.RuntimeOptions): DescribeApiSignaturesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiSignatures', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiSignaturesWithOptions(request, runtime);
}

model DescribeIpControlPolicyItemsRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  policyItemId?: string(name='PolicyItemId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeIpControlPolicyItemsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  ipControlPolicyItems?: {
    ipControlPolicyItem?: [ 
    {
      modifiedTime?: string(name='ModifiedTime'),
      policyItemId?: string(name='PolicyItemId'),
      cidrIp?: string(name='CidrIp'),
      createTime?: string(name='CreateTime'),
      appId?: string(name='AppId'),
    }
  ](name='IpControlPolicyItem')
  }(name='IpControlPolicyItems'),
}

model DescribeIpControlPolicyItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpControlPolicyItemsResponseBody(name='body'),
}

async function describeIpControlPolicyItemsWithOptions(request: DescribeIpControlPolicyItemsRequest, runtime: Util.RuntimeOptions): DescribeIpControlPolicyItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpControlPolicyItems', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlPolicyItemsWithOptions(request, runtime);
}

model DeleteDomainRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomain', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DescribeGroupConfigSynFlowsRequest {
  securityToken?: string(name='SecurityToken'),
  targetGroupName?: string(name='TargetGroupName'),
  sourceGroupName?: string(name='SourceGroupName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  flowStatus?: string(name='FlowStatus'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeGroupConfigSynFlowsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  flows?: {
    flow?: [ 
    {
      apiCopyVersion?: string(name='ApiCopyVersion'),
      sourceGroupId?: string(name='SourceGroupId'),
      modifiedTime?: string(name='ModifiedTime'),
      flowStatus?: string(name='FlowStatus'),
      region?: string(name='Region'),
      executionTime?: string(name='ExecutionTime'),
      targetGroupName?: string(name='TargetGroupName'),
      targetGroupId?: string(name='TargetGroupId'),
      createdTime?: string(name='CreatedTime'),
      flowId?: string(name='FlowId'),
      sourceGroupName?: string(name='SourceGroupName'),
    }
  ](name='Flow')
  }(name='Flows'),
}

model DescribeGroupConfigSynFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupConfigSynFlowsResponseBody(name='body'),
}

async function describeGroupConfigSynFlowsWithOptions(request: DescribeGroupConfigSynFlowsRequest, runtime: Util.RuntimeOptions): DescribeGroupConfigSynFlowsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupConfigSynFlows', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupConfigSynFlows(request: DescribeGroupConfigSynFlowsRequest): DescribeGroupConfigSynFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupConfigSynFlowsWithOptions(request, runtime);
}

model DescribeSyncApiTaskRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeSyncApiTaskResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apis?: {
    apiDigest?: [ 
    {
      apiId?: string(name='ApiId'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      version?: string(name='Version'),
      path?: string(name='Path'),
      synTime?: string(name='SynTime'),
      method?: string(name='Method'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiDigest')
  }(name='Apis'),
}

model DescribeSyncApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncApiTaskResponseBody(name='body'),
}

async function describeSyncApiTaskWithOptions(request: DescribeSyncApiTaskRequest, runtime: Util.RuntimeOptions): DescribeSyncApiTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSyncApiTask', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSyncApiTask(request: DescribeSyncApiTaskRequest): DescribeSyncApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSyncApiTaskWithOptions(request, runtime);
}

model ModifyApiGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  basePath?: string(name='BasePath'),
  description?: string(name='Description'),
  userLogConfig?: string(name='UserLogConfig'),
  customTraceConfig?: string(name='CustomTraceConfig'),
  compatibleFlags?: string(name='CompatibleFlags'),
  customerConfigs?: string(name='CustomerConfigs'),
  passthroughHeaders?: string(name='PassthroughHeaders'),
  defaultDomain?: string(name='DefaultDomain'),
  rpcPattern?: string(name='RpcPattern'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
  basePath?: string(name='BasePath'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  description?: string(name='Description'),
  subDomain?: string(name='SubDomain'),
}

model ModifyApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiGroupResponseBody(name='body'),
}

async function modifyApiGroupWithOptions(request: ModifyApiGroupRequest, runtime: Util.RuntimeOptions): ModifyApiGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApiGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupWithOptions(request, runtime);
}

model SetWildcardDomainPatternsRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns'),
}

model SetWildcardDomainPatternsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetWildcardDomainPatternsResponse = {
  headers: map[string]string(name='headers'),
  body: SetWildcardDomainPatternsResponseBody(name='body'),
}

async function setWildcardDomainPatternsWithOptions(request: SetWildcardDomainPatternsRequest, runtime: Util.RuntimeOptions): SetWildcardDomainPatternsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetWildcardDomainPatterns', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWildcardDomainPatternsWithOptions(request, runtime);
}

model DescribeApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
}

model DescribeApiResponseBody = {
  apiId?: string(name='ApiId'),
  resultType?: string(name='ResultType'),
  webSocketApiType?: string(name='WebSocketApiType'),
  disableInternet?: boolean(name='DisableInternet'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultSample?: string(name='ResultSample'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  regionId?: string(name='RegionId'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  visibility?: string(name='Visibility'),
  failResultSample?: string(name='FailResultSample'),
  authType?: string(name='AuthType'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupId?: string(name='GroupId'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  createdTime?: string(name='CreatedTime'),
  apiName?: string(name='ApiName'),
  requestConfig?: {
    bodyModel?: string(name='BodyModel'),
    requestPath?: string(name='RequestPath'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    bodyFormat?: string(name='BodyFormat'),
    requestMode?: string(name='RequestMode'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  serviceConfig?: {
    aoneAppName?: string(name='AoneAppName'),
    mockStatusCode?: int32(name='MockStatusCode'),
    contentTypeValue?: string(name='ContentTypeValue'),
    serviceProtocol?: string(name='ServiceProtocol'),
    servicePath?: string(name='ServicePath'),
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    serviceAddress?: string(name='ServiceAddress'),
    mock?: string(name='Mock'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    mockResult?: string(name='MockResult'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerValue?: string(name='HeaderValue'),
        headerName?: string(name='HeaderName'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    vpcConfig?: {
      vpcId?: string(name='VpcId'),
      vpcScheme?: string(name='VpcScheme'),
      instanceId?: string(name='InstanceId'),
      port?: int32(name='Port'),
      name?: string(name='Name'),
    }(name='VpcConfig'),
    functionComputeConfig?: {
      fcType?: string(name='FcType'),
      roleArn?: string(name='RoleArn'),
      method?: string(name='Method'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      contentTypeValue?: string(name='ContentTypeValue'),
      regionId?: string(name='RegionId'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      functionName?: string(name='FunctionName'),
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      path?: string(name='Path'),
      serviceName?: string(name='ServiceName'),
      qualifier?: string(name='Qualifier'),
    }(name='FunctionComputeConfig'),
    ossConfig?: {
      key?: string(name='Key'),
      action?: string(name='Action'),
      ossRegionId?: string(name='OssRegionId'),
      bucketName?: string(name='BucketName'),
    }(name='OssConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig?: {
    openIdApiType?: string(name='OpenIdApiType'),
    idTokenParamName?: string(name='IdTokenParamName'),
    publicKeyId?: string(name='PublicKeyId'),
    publicKey?: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      model?: string(name='Model'),
      message?: string(name='Message'),
      description?: string(name='Description'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      type?: string(name='Type'),
      key?: string(name='Key'),
      hasChild?: boolean(name='HasChild'),
      description?: string(name='Description'),
      pid?: string(name='Pid'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  constantParameters?: {
    constantParameter?: [ 
    {
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
      constantValue?: string(name='ConstantValue'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  requestParameters?: {
    requestParameter?: [ 
    {
      jsonScheme?: string(name='JsonScheme'),
      maxValue?: long(name='MaxValue'),
      arrayItemsType?: string(name='ArrayItemsType'),
      minValue?: long(name='MinValue'),
      docShow?: string(name='DocShow'),
      maxLength?: long(name='MaxLength'),
      defaultValue?: string(name='DefaultValue'),
      apiParameterName?: string(name='ApiParameterName'),
      enumValue?: string(name='EnumValue'),
      demoValue?: string(name='DemoValue'),
      required?: string(name='Required'),
      description?: string(name='Description'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      minLength?: long(name='MinLength'),
      docOrder?: int32(name='DocOrder'),
      location?: string(name='Location'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      stageName?: string(name='StageName'),
      effectiveVersion?: string(name='EffectiveVersion'),
      deployedStatus?: string(name='DeployedStatus'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos'),
}

model DescribeApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiResponseBody(name='body'),
}

async function describeApiWithOptions(request: DescribeApiRequest, runtime: Util.RuntimeOptions): DescribeApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DescribeTrafficControlsRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  trafficControlName?: string(name='TrafficControlName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  trafficControls?: {
    trafficControl?: [ 
    {
      userDefault?: int32(name='UserDefault'),
      apiDefault?: int32(name='ApiDefault'),
      modifiedTime?: string(name='ModifiedTime'),
      description?: string(name='Description'),
      trafficControlUnit?: string(name='TrafficControlUnit'),
      trafficControlName?: string(name='TrafficControlName'),
      appDefault?: int32(name='AppDefault'),
      trafficControlId?: string(name='TrafficControlId'),
      createdTime?: string(name='CreatedTime'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType'),
          specials?: {
            special?: [ 
            {
              trafficValue?: int32(name='TrafficValue'),
              specialKey?: string(name='SpecialKey'),
            }
          ](name='Special')
          }(name='Specials'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls'),
}

model DescribeTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficControlsResponseBody(name='body'),
}

async function describeTrafficControlsWithOptions(request: DescribeTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTrafficControls', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsWithOptions(request, runtime);
}

model SetDomainRequest {
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
  bindStageName?: string(name='BindStageName'),
  customDomainType?: string(name='CustomDomainType'),
  isForce?: boolean(name='IsForce'),
}

model SetDomainResponseBody = {
  requestId?: string(name='RequestId'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  groupId?: string(name='GroupId'),
  subDomain?: string(name='SubDomain'),
  domainName?: string(name='DomainName'),
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
}

model SetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainResponseBody(name='body'),
}

async function setDomainWithOptions(request: SetDomainRequest, runtime: Util.RuntimeOptions): SetDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomain', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWithOptions(request, runtime);
}

model DeleteIpControlRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
}

model DeleteIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpControlResponseBody(name='body'),
}

async function deleteIpControlWithOptions(request: DeleteIpControlRequest, runtime: Util.RuntimeOptions): DeleteIpControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIpControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpControlWithOptions(request, runtime);
}

model DescribeApiLatencyDataRequest {
  securityToken?: string(name='SecurityToken'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeApiLatencyDataResponseBody = {
  requestId?: string(name='RequestId'),
  callLatencys?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='CallLatencys'),
}

model DescribeApiLatencyDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiLatencyDataResponseBody(name='body'),
}

async function describeApiLatencyDataWithOptions(request: DescribeApiLatencyDataRequest, runtime: Util.RuntimeOptions): DescribeApiLatencyDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiLatencyData', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiLatencyDataWithOptions(request, runtime);
}

model DescribeGroupLatencyRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
}

model DescribeGroupLatencyResponseBody = {
  requestId?: string(name='RequestId'),
  latencyPacket?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='LatencyPacket'),
}

model DescribeGroupLatencyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupLatencyResponseBody(name='body'),
}

async function describeGroupLatencyWithOptions(request: DescribeGroupLatencyRequest, runtime: Util.RuntimeOptions): DescribeGroupLatencyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupLatency', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupLatency(request: DescribeGroupLatencyRequest): DescribeGroupLatencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupLatencyWithOptions(request, runtime);
}

model DescribeBackendDifferentApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackendDifferentApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  conflictApis?: {
    conflictApi?: [ 
    {
      source?: {
        apiVersion?: string(name='ApiVersion'),
        apiId?: string(name='ApiId'),
        vpcName?: string(name='VpcName'),
        groupName?: string(name='GroupName'),
        groupId?: string(name='GroupId'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Source'),
      target?: {
        apiId?: string(name='ApiId'),
        vpcName?: string(name='VpcName'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        path?: string(name='Path'),
        method?: string(name='Method'),
        apiName?: string(name='ApiName'),
        regionId?: string(name='RegionId'),
      }(name='Target'),
    }
  ](name='ConflictApi')
  }(name='ConflictApis'),
}

model DescribeBackendDifferentApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackendDifferentApisResponseBody(name='body'),
}

async function describeBackendDifferentApisWithOptions(request: DescribeBackendDifferentApisRequest, runtime: Util.RuntimeOptions): DescribeBackendDifferentApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackendDifferentApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackendDifferentApis(request: DescribeBackendDifferentApisRequest): DescribeBackendDifferentApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackendDifferentApisWithOptions(request, runtime);
}

model DescribeApiHistoryRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  historyVersion?: string(name='HistoryVersion'),
}

model DescribeApiHistoryResponseBody = {
  status?: string(name='Status'),
  apiId?: string(name='ApiId'),
  resultType?: string(name='ResultType'),
  webSocketApiType?: string(name='WebSocketApiType'),
  disableInternet?: boolean(name='DisableInternet'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultSample?: string(name='ResultSample'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  regionId?: string(name='RegionId'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  visibility?: string(name='Visibility'),
  failResultSample?: string(name='FailResultSample'),
  authType?: string(name='AuthType'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupId?: string(name='GroupId'),
  deployedTime?: string(name='DeployedTime'),
  stageName?: string(name='StageName'),
  historyVersion?: string(name='HistoryVersion'),
  apiName?: string(name='ApiName'),
  requestConfig?: {
    bodyModel?: string(name='BodyModel'),
    requestPath?: string(name='RequestPath'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    bodyFormat?: string(name='BodyFormat'),
    requestMode?: string(name='RequestMode'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  serviceConfig?: {
    vpcId?: string(name='VpcId'),
    mockStatusCode?: int32(name='MockStatusCode'),
    contentTypeValue?: string(name='ContentTypeValue'),
    serviceProtocol?: string(name='ServiceProtocol'),
    servicePath?: string(name='ServicePath'),
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    serviceAddress?: string(name='ServiceAddress'),
    mock?: string(name='Mock'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    mockResult?: string(name='MockResult'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerValue?: string(name='HeaderValue'),
        headerName?: string(name='HeaderName'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    vpcConfig?: {
      vpcId?: string(name='VpcId'),
      vpcScheme?: string(name='VpcScheme'),
      instanceId?: string(name='InstanceId'),
      port?: int32(name='Port'),
      name?: string(name='Name'),
    }(name='VpcConfig'),
    functionComputeConfig?: {
      fcType?: string(name='FcType'),
      roleArn?: string(name='RoleArn'),
      method?: string(name='Method'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      contentTypeValue?: string(name='ContentTypeValue'),
      regionId?: string(name='RegionId'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      functionName?: string(name='FunctionName'),
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      path?: string(name='Path'),
      serviceName?: string(name='ServiceName'),
      qualifier?: string(name='Qualifier'),
    }(name='FunctionComputeConfig'),
    ossConfig?: {
      key?: string(name='Key'),
      action?: string(name='Action'),
      ossRegionId?: string(name='OssRegionId'),
      bucketName?: string(name='BucketName'),
    }(name='OssConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig?: {
    openIdApiType?: string(name='OpenIdApiType'),
    idTokenParamName?: string(name='IdTokenParamName'),
    publicKeyId?: string(name='PublicKeyId'),
    publicKey?: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      description?: string(name='Description'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      type?: string(name='Type'),
      key?: string(name='Key'),
      hasChild?: boolean(name='HasChild'),
      description?: string(name='Description'),
      pid?: string(name='Pid'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      parameterName?: string(name='ParameterName'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  constantParameters?: {
    constantParameter?: [ 
    {
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
      constantValue?: string(name='ConstantValue'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  requestParameters?: {
    requestParameter?: [ 
    {
      jsonScheme?: string(name='JsonScheme'),
      maxValue?: long(name='MaxValue'),
      arrayItemsType?: string(name='ArrayItemsType'),
      minValue?: long(name='MinValue'),
      docShow?: string(name='DocShow'),
      maxLength?: long(name='MaxLength'),
      defaultValue?: string(name='DefaultValue'),
      apiParameterName?: string(name='ApiParameterName'),
      enumValue?: string(name='EnumValue'),
      demoValue?: string(name='DemoValue'),
      required?: string(name='Required'),
      description?: string(name='Description'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      minLength?: long(name='MinLength'),
      docOrder?: int32(name='DocOrder'),
      location?: string(name='Location'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
}

model DescribeApiHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiHistoryResponseBody(name='body'),
}

async function describeApiHistoryWithOptions(request: DescribeApiHistoryRequest, runtime: Util.RuntimeOptions): DescribeApiHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiHistory', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoryWithOptions(request, runtime);
}

model UpdatePartProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
  name?: string(name='Name'),
  detail?: string(name='Detail'),
  segment?: int32(name='Segment'),
  subscribeMode?: int32(name='SubscribeMode'),
  domain?: string(name='Domain'),
  cateSecondId?: [ long ](name='CateSecondId'),
  userGroup?: [ long ](name='UserGroup'),
}

model UpdatePartProductResponseBody = {
  isSuccess?: boolean(name='isSuccess'),
  requestId?: string(name='RequestId'),
}

model UpdatePartProductResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePartProductResponseBody(name='body'),
}

async function updatePartProductWithOptions(request: UpdatePartProductRequest, runtime: Util.RuntimeOptions): UpdatePartProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePartProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePartProduct(request: UpdatePartProductRequest): UpdatePartProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePartProductWithOptions(request, runtime);
}

model ChangeProductSpecsOrderRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
  order?: [ 
    {
      productSpecsId?: long(name='ProductSpecsId'),
      productSpecsOrder?: int32(name='ProductSpecsOrder'),
    }
  ](name='Order'),
}

model ChangeProductSpecsOrderResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model ChangeProductSpecsOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeProductSpecsOrderResponseBody(name='body'),
}

async function changeProductSpecsOrderWithOptions(request: ChangeProductSpecsOrderRequest, runtime: Util.RuntimeOptions): ChangeProductSpecsOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeProductSpecsOrder', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeProductSpecsOrder(request: ChangeProductSpecsOrderRequest): ChangeProductSpecsOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeProductSpecsOrderWithOptions(request, runtime);
}

model CreateIntranetDomainRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
}

model CreateIntranetDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model CreateIntranetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntranetDomainResponseBody(name='body'),
}

async function createIntranetDomainWithOptions(request: CreateIntranetDomainRequest, runtime: Util.RuntimeOptions): CreateIntranetDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIntranetDomain', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntranetDomainWithOptions(request, runtime);
}

model ModifyModelRequest {
  modelName?: string(name='ModelName'),
  description?: string(name='Description'),
  schema?: string(name='Schema'),
  groupId?: string(name='GroupId'),
  newModelName?: string(name='NewModelName'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModelWithOptions(request: ModifyModelRequest, runtime: Util.RuntimeOptions): ModifyModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyModel', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyModelWithOptions(request, runtime);
}

model DescribeApiErrorDataRequest {
  securityToken?: string(name='SecurityToken'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeApiErrorDataResponseBody = {
  requestId?: string(name='RequestId'),
  clientErrors?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='ClientErrors'),
  serverErrors?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='ServerErrors'),
}

model DescribeApiErrorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiErrorDataResponseBody(name='body'),
}

async function describeApiErrorDataWithOptions(request: DescribeApiErrorDataRequest, runtime: Util.RuntimeOptions): DescribeApiErrorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiErrorData', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiErrorData(request: DescribeApiErrorDataRequest): DescribeApiErrorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiErrorDataWithOptions(request, runtime);
}

model DeleteTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  specialType?: string(name='SpecialType'),
  specialKey?: string(name='SpecialKey'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficSpecialControlResponseBody(name='body'),
}

async function deleteTrafficSpecialControlWithOptions(request: DeleteTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficSpecialControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrafficSpecialControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficSpecialControlWithOptions(request, runtime);
}

model ModifyPluginRequest {
  securityToken?: string(name='SecurityToken'),
  pluginId?: string(name='PluginId'),
  pluginName?: string(name='PluginName'),
  pluginData?: string(name='PluginData'),
  description?: string(name='Description'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyPluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPluginResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPluginResponseBody(name='body'),
}

async function modifyPluginWithOptions(request: ModifyPluginRequest, runtime: Util.RuntimeOptions): ModifyPluginResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPlugin', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPlugin(request: ModifyPluginRequest): ModifyPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPluginWithOptions(request, runtime);
}

model DescribeSummaryDataRequest {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeSummaryDataResponseBody = {
  requestId?: string(name='RequestId'),
  usageGroupNum?: int32(name='UsageGroupNum'),
  usageInstanceNum?: int32(name='UsageInstanceNum'),
  usageApiNum?: int32(name='UsageApiNum'),
  region?: string(name='Region'),
  comeingSoonInstanceNum?: int32(name='ComeingSoonInstanceNum'),
  expireInstanceNum?: int32(name='ExpireInstanceNum'),
}

model DescribeSummaryDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSummaryDataResponseBody(name='body'),
}

async function describeSummaryDataWithOptions(request: DescribeSummaryDataRequest, runtime: Util.RuntimeOptions): DescribeSummaryDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSummaryData', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSummaryData(request: DescribeSummaryDataRequest): DescribeSummaryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryDataWithOptions(request, runtime);
}

model DescribeApiGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeApiGroupResponseBody = {
  status?: string(name='Status'),
  compatibleFlags?: string(name='CompatibleFlags'),
  basePath?: string(name='BasePath'),
  ipv6Status?: string(name='Ipv6Status'),
  userLogConfig?: string(name='UserLogConfig'),
  customerConfigs?: string(name='CustomerConfigs'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  httpsPolicy?: string(name='HttpsPolicy'),
  subDomain?: string(name='SubDomain'),
  createdTime?: string(name='CreatedTime'),
  rpcPattern?: string(name='RpcPattern'),
  defaultDomain?: string(name='DefaultDomain'),
  cmsMonitorGroup?: string(name='CmsMonitorGroup'),
  billingStatus?: string(name='BillingStatus'),
  trafficLimit?: int32(name='TrafficLimit'),
  passthroughHeaders?: string(name='PassthroughHeaders'),
  instanceId?: string(name='InstanceId'),
  vpcDomain?: string(name='VpcDomain'),
  instanceType?: string(name='InstanceType'),
  customTraceConfig?: string(name='CustomTraceConfig'),
  regionId?: string(name='RegionId'),
  modifiedTime?: string(name='ModifiedTime'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  classicVpcSubDomain?: string(name='ClassicVpcSubDomain'),
  illegalStatus?: string(name='IllegalStatus'),
  instanceVipList?: string(name='InstanceVipList'),
  vpcSlbIntranetDomain?: string(name='VpcSlbIntranetDomain'),
  customDomains?: {
    domainItem?: [ 
    {
      bindStageName?: string(name='BindStageName'),
      domainLegalStatus?: string(name='DomainLegalStatus'),
      certificateName?: string(name='CertificateName'),
      customDomainType?: string(name='CustomDomainType'),
      domainCNAMEStatus?: string(name='DomainCNAMEStatus'),
      wildcardDomainPatterns?: string(name='WildcardDomainPatterns'),
      domainBindingStatus?: string(name='DomainBindingStatus'),
      domainName?: string(name='DomainName'),
      domainRemark?: string(name='DomainRemark'),
      domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
      certificateId?: string(name='CertificateId'),
    }
  ](name='DomainItem')
  }(name='CustomDomains'),
  stageItems?: {
    stageInfo?: [ 
    {
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
      description?: string(name='Description'),
    }
  ](name='StageInfo')
  }(name='StageItems'),
}

model DescribeApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupResponseBody(name='body'),
}

async function describeApiGroupWithOptions(request: DescribeApiGroupRequest, runtime: Util.RuntimeOptions): DescribeApiGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupWithOptions(request, runtime);
}

model ModifyApiGroupVpcWhitelistRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  vpcIds?: string(name='VpcIds'),
}

model ModifyApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiGroupVpcWhitelistResponseBody(name='body'),
}

async function modifyApiGroupVpcWhitelistWithOptions(request: ModifyApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): ModifyApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyApiGroupVpcWhitelist', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupVpcWhitelistWithOptions(request, runtime);
}

model CheckFcServiceLinkedRoleRequest {
  securityToken?: string(name='SecurityToken'),
}

model CheckFcServiceLinkedRoleResponseBody = {
  roleArn?: string(name='RoleArn'),
  requestId?: string(name='RequestId'),
}

model CheckFcServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckFcServiceLinkedRoleResponseBody(name='body'),
}

async function checkFcServiceLinkedRoleWithOptions(request: CheckFcServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckFcServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckFcServiceLinkedRole', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkFcServiceLinkedRole(request: CheckFcServiceLinkedRoleRequest): CheckFcServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFcServiceLinkedRoleWithOptions(request, runtime);
}

model SynchronizeGroupConfigRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  conflictSyncPolicy?: string(name='ConflictSyncPolicy'),
  newSyncPolicy?: string(name='NewSyncPolicy'),
  backendSyncPolicy?: string(name='BackendSyncPolicy'),
  conflictInclude?: [ string ](name='ConflictInclude'),
  conflictExclude?: [ string ](name='ConflictExclude'),
  newInclude?: [ string ](name='NewInclude'),
  newExclude?: [ string ](name='NewExclude'),
  backendInclude?: [ string ](name='BackendInclude'),
  backendExclude?: [ string ](name='BackendExclude'),
}

model SynchronizeGroupConfigResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
  launch?: boolean(name='Launch'),
}

model SynchronizeGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SynchronizeGroupConfigResponseBody(name='body'),
}

async function synchronizeGroupConfigWithOptions(request: SynchronizeGroupConfigRequest, runtime: Util.RuntimeOptions): SynchronizeGroupConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SynchronizeGroupConfig', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function synchronizeGroupConfig(request: SynchronizeGroupConfigRequest): SynchronizeGroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return synchronizeGroupConfigWithOptions(request, runtime);
}

model DeleteApiGroupRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroupWithOptions(request: DeleteApiGroupRequest, runtime: Util.RuntimeOptions): DeleteApiGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApiGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiGroupWithOptions(request, runtime);
}

model DescribeApiGroupsRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  instanceId?: string(name='InstanceId'),
  sort?: string(name='Sort'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      basePath?: string(name='BasePath'),
      billingStatus?: string(name='BillingStatus'),
      trafficLimit?: int32(name='TrafficLimit'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      modifiedTime?: string(name='ModifiedTime'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      description?: string(name='Description'),
      illegalStatus?: string(name='IllegalStatus'),
      httpsPolicy?: string(name='HttpsPolicy'),
      subDomain?: string(name='SubDomain'),
      createdTime?: string(name='CreatedTime'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
}

model DescribeApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: Util.RuntimeOptions): DescribeApiGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiGroups', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApisRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  catalogId?: string(name='CatalogId'),
  visibility?: string(name='Visibility'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiSummarys?: {
    apiSummary?: [ 
    {
      visibility?: string(name='Visibility'),
      apiId?: string(name='ApiId'),
      modifiedTime?: string(name='ModifiedTime'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      createdTime?: string(name='CreatedTime'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiSummary')
  }(name='ApiSummarys'),
}

model DescribeApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisResponseBody(name='body'),
}

async function describeApisWithOptions(request: DescribeApisRequest, runtime: Util.RuntimeOptions): DescribeApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeVarDiffBetweenGroupRequest {
  securityToken?: string(name='SecurityToken'),
  targetGroupId?: string(name='TargetGroupId'),
  sourceGroupId?: string(name='SourceGroupId'),
  sourceRegionId?: string(name='SourceRegionId'),
}

model DescribeVarDiffBetweenGroupResponseBody = {
  requestId?: string(name='RequestId'),
  variableDiffs?: {
    variableDiff?: [ 
    {
      varName?: string(name='VarName'),
      test?: {
        diffStatus?: string(name='DiffStatus'),
        oldValue?: string(name='OldValue'),
        newValue?: string(name='NewValue'),
      }(name='Test'),
      pre?: {
        diffStatus?: string(name='DiffStatus'),
        oldValue?: string(name='OldValue'),
        newValue?: string(name='NewValue'),
      }(name='Pre'),
      release?: {
        diffStatus?: string(name='DiffStatus'),
        oldValue?: string(name='OldValue'),
        newValue?: string(name='NewValue'),
      }(name='Release'),
    }
  ](name='VariableDiff')
  }(name='VariableDiffs'),
}

model DescribeVarDiffBetweenGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVarDiffBetweenGroupResponseBody(name='body'),
}

async function describeVarDiffBetweenGroupWithOptions(request: DescribeVarDiffBetweenGroupRequest, runtime: Util.RuntimeOptions): DescribeVarDiffBetweenGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVarDiffBetweenGroup', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVarDiffBetweenGroup(request: DescribeVarDiffBetweenGroupRequest): DescribeVarDiffBetweenGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVarDiffBetweenGroupWithOptions(request, runtime);
}

model DescribeInstanceDropPacketRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  sbcName?: string(name='SbcName'),
}

model DescribeInstanceDropPacketResponseBody = {
  requestId?: string(name='RequestId'),
  instanceDropPacket?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropPacket'),
}

model DescribeInstanceDropPacketResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDropPacketResponseBody(name='body'),
}

async function describeInstanceDropPacketWithOptions(request: DescribeInstanceDropPacketRequest, runtime: Util.RuntimeOptions): DescribeInstanceDropPacketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceDropPacket', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceDropPacket(request: DescribeInstanceDropPacketRequest): DescribeInstanceDropPacketResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDropPacketWithOptions(request, runtime);
}

model SetIpControlApisRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model SetIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpControlApisResponseBody(name='body'),
}

async function setIpControlApisWithOptions(request: SetIpControlApisRequest, runtime: Util.RuntimeOptions): SetIpControlApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetIpControlApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpControlApisWithOptions(request, runtime);
}

model DescribeAppAttributesRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  sort?: string(name='Sort'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeAppAttributesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apps?: {
    appAttribute?: [ 
    {
      appName?: string(name='AppName'),
      modifiedTime?: string(name='ModifiedTime'),
      description?: string(name='Description'),
      createdTime?: string(name='CreatedTime'),
      appId?: long(name='AppId'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='AppAttribute')
  }(name='Apps'),
}

model DescribeAppAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppAttributesResponseBody(name='body'),
}

async function describeAppAttributesWithOptions(request: DescribeAppAttributesRequest, runtime: Util.RuntimeOptions): DescribeAppAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAppAttributes', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppAttributesWithOptions(request, runtime);
}

model DescribeGroupTrafficRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
}

model DescribeGroupTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  trafficPerSecond?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='TrafficPerSecond'),
}

model DescribeGroupTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupTrafficResponseBody(name='body'),
}

async function describeGroupTrafficWithOptions(request: DescribeGroupTrafficRequest, runtime: Util.RuntimeOptions): DescribeGroupTrafficResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupTraffic', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupTraffic(request: DescribeGroupTrafficRequest): DescribeGroupTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupTrafficWithOptions(request, runtime);
}

model DescribeDeployApiTaskRequest {
  securityToken?: string(name='SecurityToken'),
  operationUid?: string(name='OperationUid'),
}

model DescribeDeployApiTaskResponseBody = {
  requestId?: string(name='RequestId'),
  deployedResults?: {
    deployedResult?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      stageName?: string(name='StageName'),
      groupId?: string(name='GroupId'),
      apiUid?: string(name='ApiUid'),
      deployedStatus?: string(name='DeployedStatus'),
    }
  ](name='DeployedResult')
  }(name='DeployedResults'),
}

model DescribeDeployApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployApiTaskResponseBody(name='body'),
}

async function describeDeployApiTaskWithOptions(request: DescribeDeployApiTaskRequest, runtime: Util.RuntimeOptions): DescribeDeployApiTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeployApiTask', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeployApiTask(request: DescribeDeployApiTaskRequest): DescribeDeployApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployApiTaskWithOptions(request, runtime);
}

model DescribeWillBeSyncApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeWillBeSyncApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apis?: {
    apiDigest?: [ 
    {
      vpcName?: string(name='VpcName'),
      apiId?: string(name='ApiId'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      vpcSchema?: string(name='VpcSchema'),
      version?: string(name='Version'),
      path?: string(name='Path'),
      method?: string(name='Method'),
      vpcEnabled?: boolean(name='VpcEnabled'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiDigest')
  }(name='Apis'),
}

model DescribeWillBeSyncApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWillBeSyncApisResponseBody(name='body'),
}

async function describeWillBeSyncApisWithOptions(request: DescribeWillBeSyncApisRequest, runtime: Util.RuntimeOptions): DescribeWillBeSyncApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWillBeSyncApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWillBeSyncApis(request: DescribeWillBeSyncApisRequest): DescribeWillBeSyncApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWillBeSyncApisWithOptions(request, runtime);
}

model DescribeGroupHttpCodeRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
}

model DescribeGroupHttpCodeResponseBody = {
  requestId?: string(name='RequestId'),
  httpCodePacket?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='HttpCodePacket'),
}

model DescribeGroupHttpCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupHttpCodeResponseBody(name='body'),
}

async function describeGroupHttpCodeWithOptions(request: DescribeGroupHttpCodeRequest, runtime: Util.RuntimeOptions): DescribeGroupHttpCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupHttpCode', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupHttpCode(request: DescribeGroupHttpCodeRequest): DescribeGroupHttpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupHttpCodeWithOptions(request, runtime);
}

model DescribeApiDocRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId'),
  resultType?: string(name='ResultType'),
  disableInternet?: boolean(name='DisableInternet'),
  resultSample?: string(name='ResultSample'),
  regionId?: string(name='RegionId'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  visibility?: string(name='Visibility'),
  failResultSample?: string(name='FailResultSample'),
  authType?: string(name='AuthType'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  description?: string(name='Description'),
  deployedTime?: string(name='DeployedTime'),
  stageName?: string(name='StageName'),
  apiName?: string(name='ApiName'),
  requestConfig?: {
    requestPath?: string(name='RequestPath'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    bodyFormat?: string(name='BodyFormat'),
    requestMode?: string(name='RequestMode'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      description?: string(name='Description'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      type?: string(name='Type'),
      key?: string(name='Key'),
      hasChild?: boolean(name='HasChild'),
      description?: string(name='Description'),
      pid?: string(name='Pid'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  requestParameters?: {
    requestParameter?: [ 
    {
      jsonScheme?: string(name='JsonScheme'),
      maxValue?: long(name='MaxValue'),
      arrayItemsType?: string(name='ArrayItemsType'),
      minValue?: long(name='MinValue'),
      docShow?: string(name='DocShow'),
      maxLength?: long(name='MaxLength'),
      defaultValue?: string(name='DefaultValue'),
      apiParameterName?: string(name='ApiParameterName'),
      enumValue?: string(name='EnumValue'),
      demoValue?: string(name='DemoValue'),
      required?: string(name='Required'),
      description?: string(name='Description'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      minLength?: long(name='MinLength'),
      docOrder?: int32(name='DocOrder'),
      location?: string(name='Location'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
}

model DescribeApiDocResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDocWithOptions(request: DescribeApiDocRequest, runtime: Util.RuntimeOptions): DescribeApiDocResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiDoc', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocWithOptions(request, runtime);
}

model DescribeRegionQpsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeRegionQpsResponseBody = {
  requestId?: string(name='RequestId'),
  regionQps?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='RegionQps'),
}

model DescribeRegionQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionQpsResponseBody(name='body'),
}

async function describeRegionQpsWithOptions(request: DescribeRegionQpsRequest, runtime: Util.RuntimeOptions): DescribeRegionQpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionQps', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionQps(request: DescribeRegionQpsRequest): DescribeRegionQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionQpsWithOptions(request, runtime);
}

model DeleteDomainCertificateRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
  certificateId?: string(name='CertificateId'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificateWithOptions(request: DeleteDomainCertificateRequest, runtime: Util.RuntimeOptions): DeleteDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomainCertificate', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainCertificateWithOptions(request, runtime);
}

model DescribeSignaturesRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeSignaturesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  signatureInfos?: {
    signatureInfo?: [ 
    {
      modifiedTime?: string(name='ModifiedTime'),
      signatureId?: string(name='SignatureId'),
      signatureSecret?: string(name='SignatureSecret'),
      signatureName?: string(name='SignatureName'),
      signatureKey?: string(name='SignatureKey'),
      createdTime?: string(name='CreatedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='SignatureInfo')
  }(name='SignatureInfos'),
}

model DescribeSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSignaturesResponseBody(name='body'),
}

async function describeSignaturesWithOptions(request: DescribeSignaturesRequest, runtime: Util.RuntimeOptions): DescribeSignaturesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSignatures', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesWithOptions(request, runtime);
}

model DescribeApiStageRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageId?: string(name='StageId'),
}

model DescribeApiStageResponseBody = {
  stageId?: string(name='StageId'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
  description?: string(name='Description'),
  stageName?: string(name='StageName'),
  createdTime?: string(name='CreatedTime'),
  variables?: {
    variableItem?: [ 
    {
      variableValue?: string(name='VariableValue'),
      variableName?: string(name='VariableName'),
      supportRoute?: boolean(name='SupportRoute'),
      stageRouteModel?: {
        routeMatchSymbol?: string(name='RouteMatchSymbol'),
        parameterType?: string(name='ParameterType'),
        location?: string(name='Location'),
        parameterCatalog?: string(name='ParameterCatalog'),
        serviceParameterName?: string(name='ServiceParameterName'),
        routeRules?: {
          routeRuleItem?: [ 
          {
            resultValue?: string(name='ResultValue'),
            minValue?: long(name='MinValue'),
            conditionValue?: string(name='ConditionValue'),
            maxValue?: long(name='MaxValue'),
          }
        ](name='RouteRuleItem')
        }(name='RouteRules'),
      }(name='StageRouteModel'),
    }
  ](name='VariableItem')
  }(name='Variables'),
}

model DescribeApiStageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiStageResponseBody(name='body'),
}

async function describeApiStageWithOptions(request: DescribeApiStageRequest, runtime: Util.RuntimeOptions): DescribeApiStageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiStage', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiStage(request: DescribeApiStageRequest): DescribeApiStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiStageWithOptions(request, runtime);
}

model DescribeInstancePacketsRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  sbcName?: string(name='SbcName'),
}

model DescribeInstancePacketsResponseBody = {
  requestId?: string(name='RequestId'),
  instancePackets?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstancePackets'),
}

model DescribeInstancePacketsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancePacketsResponseBody(name='body'),
}

async function describeInstancePacketsWithOptions(request: DescribeInstancePacketsRequest, runtime: Util.RuntimeOptions): DescribeInstancePacketsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstancePackets', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstancePackets(request: DescribeInstancePacketsRequest): DescribeInstancePacketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePacketsWithOptions(request, runtime);
}

model DescribeApisByTrafficControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeApisByTrafficControlResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiInfos?: {
    apiInfo?: [ 
    {
      boundTime?: string(name='BoundTime'),
      visibility?: string(name='Visibility'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
}

model DescribeApisByTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByTrafficControlResponseBody(name='body'),
}

async function describeApisByTrafficControlWithOptions(request: DescribeApisByTrafficControlRequest, runtime: Util.RuntimeOptions): DescribeApisByTrafficControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApisByTrafficControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByTrafficControlWithOptions(request, runtime);
}

model RemoveVpcAccessRequest {
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId'),
  instanceId?: string(name='InstanceId'),
  port?: int32(name='Port'),
  needBatchWork?: boolean(name='NeedBatchWork'),
}

model RemoveVpcAccessResponseBody = {
  requestId?: string(name='RequestId'),
  apis?: {
    api?: [ 
    {
      apiId?: string(name='ApiId'),
      stageId?: string(name='StageId'),
      groupId?: string(name='GroupId'),
    }
  ](name='Api')
  }(name='Apis'),
}

model RemoveVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVpcAccessResponseBody(name='body'),
}

async function removeVpcAccessWithOptions(request: RemoveVpcAccessRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveVpcAccess', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessWithOptions(request, runtime);
}

model DeleteProductSpecsRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
  specCode?: [ string ](name='SpecCode'),
}

model DeleteProductSpecsResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model DeleteProductSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductSpecsResponseBody(name='body'),
}

async function deleteProductSpecsWithOptions(request: DeleteProductSpecsRequest, runtime: Util.RuntimeOptions): DeleteProductSpecsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProductSpecs', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProductSpecs(request: DeleteProductSpecsRequest): DeleteProductSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductSpecsWithOptions(request, runtime);
}

model DescribePluginsByApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
}

model DescribePluginsByApiResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  plugins?: {
    pluginAttribute?: [ 
    {
      pluginId?: string(name='PluginId'),
      modifiedTime?: string(name='ModifiedTime'),
      pluginData?: string(name='PluginData'),
      description?: string(name='Description'),
      pluginName?: string(name='PluginName'),
      createdTime?: string(name='CreatedTime'),
      pluginType?: string(name='PluginType'),
      regionId?: string(name='RegionId'),
    }
  ](name='PluginAttribute')
  }(name='Plugins'),
}

model DescribePluginsByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginsByApiResponseBody(name='body'),
}

async function describePluginsByApiWithOptions(request: DescribePluginsByApiRequest, runtime: Util.RuntimeOptions): DescribePluginsByApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePluginsByApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePluginsByApi(request: DescribePluginsByApiRequest): DescribePluginsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginsByApiWithOptions(request, runtime);
}

model ModifyIpControlRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  ipControlName?: string(name='IpControlName'),
  description?: string(name='Description'),
}

model ModifyIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpControlResponseBody(name='body'),
}

async function modifyIpControlWithOptions(request: ModifyIpControlRequest, runtime: Util.RuntimeOptions): ModifyIpControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIpControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DescribeAppsRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  appOwner?: long(name='AppOwner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAppsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apps?: {
    appItem?: [ 
    {
      appName?: string(name='AppName'),
      description?: string(name='Description'),
      appId?: long(name='AppId'),
    }
  ](name='AppItem')
  }(name='Apps'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApps', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model DescribeReadyNewApisRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeReadyNewApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apis?: {
    apiDigest?: [ 
    {
      apiVersion?: string(name='ApiVersion'),
      apiId?: string(name='ApiId'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      path?: string(name='Path'),
      method?: string(name='Method'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiDigest')
  }(name='Apis'),
}

model DescribeReadyNewApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReadyNewApisResponseBody(name='body'),
}

async function describeReadyNewApisWithOptions(request: DescribeReadyNewApisRequest, runtime: Util.RuntimeOptions): DescribeReadyNewApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeReadyNewApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReadyNewApis(request: DescribeReadyNewApisRequest): DescribeReadyNewApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReadyNewApisWithOptions(request, runtime);
}

model RemoveSignatureApisRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model RemoveSignatureApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSignatureApisResponseBody(name='body'),
}

async function removeSignatureApisWithOptions(request: RemoveSignatureApisRequest, runtime: Util.RuntimeOptions): RemoveSignatureApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveSignatureApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSignatureApisWithOptions(request, runtime);
}

model AddIpControlPolicyItemRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  appId?: string(name='AppId'),
  cidrIp?: string(name='CidrIp'),
}

model AddIpControlPolicyItemResponseBody = {
  policyItemId?: string(name='PolicyItemId'),
  requestId?: string(name='RequestId'),
}

model AddIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpControlPolicyItemResponseBody(name='body'),
}

async function addIpControlPolicyItemWithOptions(request: AddIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): AddIpControlPolicyItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddIpControlPolicyItem', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpControlPolicyItemWithOptions(request, runtime);
}

model CreateInstanceRequest {
  chargeType?: string(name='ChargeType'),
  instanceName?: string(name='InstanceName'),
  instanceSpec?: string(name='InstanceSpec'),
  zoneId?: string(name='ZoneId'),
  httpsPolicy?: string(name='HttpsPolicy'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
  autoPay?: boolean(name='AutoPay'),
  token?: string(name='Token'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model DescribeDomainRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainResponseBody = {
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  domainName?: string(name='DomainName'),
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainRemark?: string(name='DomainRemark'),
  certificateId?: string(name='CertificateId'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
  requestId?: string(name='RequestId'),
  certificateName?: string(name='CertificateName'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  groupId?: string(name='GroupId'),
  certificateBody?: string(name='CertificateBody'),
  subDomain?: string(name='SubDomain'),
  domainCNAMEStatus?: string(name='DomainCNAMEStatus'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomain', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DeleteModelRequest {
  modelName?: string(name='ModelName'),
  groupId?: string(name='GroupId'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteModel', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model CreateModelRequest {
  modelName?: string(name='ModelName'),
  groupId?: string(name='GroupId'),
  schema?: string(name='Schema'),
  description?: string(name='Description'),
}

model CreateModelResponseBody = {
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  schema?: string(name='Schema'),
  modelName?: string(name='ModelName'),
  createdTime?: string(name='CreatedTime'),
  modelId?: string(name='ModelId'),
  regionId?: string(name='RegionId'),
  modelRef?: string(name='ModelRef'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModelWithOptions(request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateModel', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model DescribeProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
}

model DescribeProductResponseBody = {
  status?: int32(name='Status'),
  subscribeMode?: string(name='SubscribeMode'),
  domain?: int32(name='Domain'),
  subscribeNumber?: int32(name='SubscribeNumber'),
  requestId?: string(name='RequestId'),
  modifiedTime?: string(name='ModifiedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  productId?: long(name='ProductId'),
  name?: string(name='Name'),
  createdTime?: string(name='CreatedTime'),
  productCode?: string(name='ProductCode'),
}

model DescribeProductResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductResponseBody(name='body'),
}

async function describeProductWithOptions(request: DescribeProductRequest, runtime: Util.RuntimeOptions): DescribeProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProduct(request: DescribeProductRequest): DescribeProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductWithOptions(request, runtime);
}

model DescribeIpControlsRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  ipControlName?: string(name='IpControlName'),
  ipControlType?: string(name='IpControlType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeIpControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  ipControlInfos?: {
    ipControlInfo?: [ 
    {
      ipControlId?: string(name='IpControlId'),
      ipControlType?: string(name='IpControlType'),
      modifiedTime?: string(name='ModifiedTime'),
      ipControlName?: string(name='IpControlName'),
      description?: string(name='Description'),
      createTime?: string(name='CreateTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='IpControlInfo')
  }(name='IpControlInfos'),
}

model DescribeIpControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpControlsResponseBody(name='body'),
}

async function describeIpControlsWithOptions(request: DescribeIpControlsRequest, runtime: Util.RuntimeOptions): DescribeIpControlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpControls', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlsWithOptions(request, runtime);
}

model ImportSwaggerRequest {
  overwrite?: boolean(name='Overwrite'),
  globalCondition?: map[string]any(name='GlobalCondition'),
  dataFormat?: string(name='DataFormat'),
  data?: string(name='Data'),
  groupId?: string(name='GroupId'),
  dryRun?: boolean(name='DryRun'),
}

model ImportSwaggerShrinkRequest {
  overwrite?: boolean(name='Overwrite'),
  globalConditionShrink?: string(name='GlobalCondition'),
  dataFormat?: string(name='DataFormat'),
  data?: string(name='Data'),
  groupId?: string(name='GroupId'),
  dryRun?: boolean(name='DryRun'),
}

model ImportSwaggerResponseBody = {
  requestId?: string(name='RequestId'),
  success?: {
    apiImportSwaggerSuccess?: [ 
    {
      path?: string(name='Path'),
      httpMethod?: string(name='HttpMethod'),
      apiOperation?: string(name='ApiOperation'),
      apiUid?: string(name='ApiUid'),
    }
  ](name='ApiImportSwaggerSuccess')
  }(name='Success'),
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      path?: string(name='Path'),
      httpMethod?: string(name='HttpMethod'),
      errorMsg?: string(name='ErrorMsg'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      modelName?: string(name='ModelName'),
      groupId?: string(name='GroupId'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      modelUid?: string(name='ModelUid'),
      modelName?: string(name='ModelName'),
      groupId?: string(name='GroupId'),
      modelOperation?: string(name='ModelOperation'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
}

model ImportSwaggerResponse = {
  headers: map[string]string(name='headers'),
  body: ImportSwaggerResponseBody(name='body'),
}

async function importSwaggerWithOptions(tmpReq: ImportSwaggerRequest, runtime: Util.RuntimeOptions): ImportSwaggerResponse {
  Util.validateModel(tmpReq);
  var request = new ImportSwaggerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.globalCondition)) {
    request.globalConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.globalCondition, 'GlobalCondition', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportSwagger', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSwaggerWithOptions(request, runtime);
}

model SetGroupConfigSynchronizePolicyRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  conflictSyncPolicy?: string(name='ConflictSyncPolicy'),
  newSyncPolicy?: string(name='NewSyncPolicy'),
  backendSyncPolicy?: string(name='BackendSyncPolicy'),
  conflictInclude?: [ string ](name='ConflictInclude'),
  conflictExclude?: [ string ](name='ConflictExclude'),
  newInclude?: [ string ](name='NewInclude'),
  newExclude?: [ string ](name='NewExclude'),
  backendInclude?: [ string ](name='BackendInclude'),
  backendExclude?: [ string ](name='BackendExclude'),
}

model SetGroupConfigSynchronizePolicyResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model SetGroupConfigSynchronizePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetGroupConfigSynchronizePolicyResponseBody(name='body'),
}

async function setGroupConfigSynchronizePolicyWithOptions(request: SetGroupConfigSynchronizePolicyRequest, runtime: Util.RuntimeOptions): SetGroupConfigSynchronizePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetGroupConfigSynchronizePolicy', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setGroupConfigSynchronizePolicy(request: SetGroupConfigSynchronizePolicyRequest): SetGroupConfigSynchronizePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGroupConfigSynchronizePolicyWithOptions(request, runtime);
}

model DescribeHistoryApisRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeHistoryApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiHisItems?: {
    apiHisItem?: [ 
    {
      status?: string(name='Status'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      deployedTime?: string(name='DeployedTime'),
      stageName?: string(name='StageName'),
      historyVersion?: string(name='HistoryVersion'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
}

model DescribeHistoryApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApisWithOptions(request: DescribeHistoryApisRequest, runtime: Util.RuntimeOptions): DescribeHistoryApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHistoryApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApisWithOptions(request, runtime);
}

model DescribeApiIpControlsRequest {
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeApiIpControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apiIpControls?: {
    apiIpControlItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      apiId?: string(name='ApiId'),
      ipControlId?: string(name='IpControlId'),
      ipControlName?: string(name='IpControlName'),
      apiName?: string(name='ApiName'),
    }
  ](name='ApiIpControlItem')
  }(name='ApiIpControls'),
}

model DescribeApiIpControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiIpControlsResponseBody(name='body'),
}

async function describeApiIpControlsWithOptions(request: DescribeApiIpControlsRequest, runtime: Util.RuntimeOptions): DescribeApiIpControlsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiIpControls', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiIpControlsWithOptions(request, runtime);
}

model DescribeMarketRemainsQuotaRequest {
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeMarketRemainsQuotaResponseBody = {
  remainsQuota?: long(name='RemainsQuota'),
  requestId?: string(name='RequestId'),
}

model DescribeMarketRemainsQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMarketRemainsQuotaResponseBody(name='body'),
}

async function describeMarketRemainsQuotaWithOptions(request: DescribeMarketRemainsQuotaRequest, runtime: Util.RuntimeOptions): DescribeMarketRemainsQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMarketRemainsQuota', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMarketRemainsQuota(request: DescribeMarketRemainsQuotaRequest): DescribeMarketRemainsQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMarketRemainsQuotaWithOptions(request, runtime);
}

model CreateIpControlRequest {
  securityToken?: string(name='SecurityToken'),
  ipControlName?: string(name='IpControlName'),
  ipControlType?: string(name='IpControlType'),
  description?: string(name='Description'),
  ipControlPolicys?: [ 
    {
      appId?: string(name='AppId'),
      cidrIp?: string(name='CidrIp'),
    }
  ](name='IpControlPolicys'),
}

model CreateIpControlResponseBody = {
  ipControlId?: string(name='IpControlId'),
  requestId?: string(name='RequestId'),
}

model CreateIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpControlResponseBody(name='body'),
}

async function createIpControlWithOptions(request: CreateIpControlRequest, runtime: Util.RuntimeOptions): CreateIpControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIpControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpControlWithOptions(request, runtime);
}

model DescribePluginSchemasRequest {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribePluginSchemasResponseBody = {
  requestId?: string(name='RequestId'),
  pluginSchemas?: {
    pluginSchema?: [ 
    {
      title?: string(name='Title'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      documentId?: string(name='DocumentId'),
      supportClassic?: boolean(name='SupportClassic'),
    }
  ](name='PluginSchema')
  }(name='PluginSchemas'),
}

model DescribePluginSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginSchemasResponseBody(name='body'),
}

async function describePluginSchemasWithOptions(request: DescribePluginSchemasRequest, runtime: Util.RuntimeOptions): DescribePluginSchemasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePluginSchemas', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePluginSchemas(request: DescribePluginSchemasRequest): DescribePluginSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginSchemasWithOptions(request, runtime);
}

model CreateSignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureName?: string(name='SignatureName'),
  signatureKey?: string(name='SignatureKey'),
  signatureSecret?: string(name='SignatureSecret'),
}

model CreateSignatureResponseBody = {
  requestId?: string(name='RequestId'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignatureResponseBody(name='body'),
}

async function createSignatureWithOptions(request: CreateSignatureRequest, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSignature', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignatureWithOptions(request, runtime);
}

model RemoveVpcAccessAndAbolishApisRequest {
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId'),
  instanceId?: string(name='InstanceId'),
  port?: int32(name='Port'),
  needBatchWork?: boolean(name='NeedBatchWork'),
}

model RemoveVpcAccessAndAbolishApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model RemoveVpcAccessAndAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVpcAccessAndAbolishApisResponseBody(name='body'),
}

async function removeVpcAccessAndAbolishApisWithOptions(request: RemoveVpcAccessAndAbolishApisRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessAndAbolishApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveVpcAccessAndAbolishApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeVpcAccessAndAbolishApis(request: RemoveVpcAccessAndAbolishApisRequest): RemoveVpcAccessAndAbolishApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessAndAbolishApisWithOptions(request, runtime);
}

model PublishProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
}

model PublishProductResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model PublishProductResponse = {
  headers: map[string]string(name='headers'),
  body: PublishProductResponseBody(name='body'),
}

async function publishProductWithOptions(request: PublishProductRequest, runtime: Util.RuntimeOptions): PublishProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishProduct(request: PublishProductRequest): PublishProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishProductWithOptions(request, runtime);
}

model CreatePartProductRequest {
  securityToken?: string(name='SecurityToken'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  cateSecondId?: [ long ](name='CateSecondId'),
}

model CreatePartProductResponseBody = {
  productId?: long(name='ProductId'),
  requestId?: string(name='RequestId'),
}

model CreatePartProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePartProductResponseBody(name='body'),
}

async function createPartProductWithOptions(request: CreatePartProductRequest, runtime: Util.RuntimeOptions): CreatePartProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePartProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPartProduct(request: CreatePartProductRequest): CreatePartProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPartProductWithOptions(request, runtime);
}

model DescribeApiGroupVpcWhitelistRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
}

model DescribeApiGroupVpcWhitelistResponseBody = {
  vpcIds?: string(name='VpcIds'),
  requestId?: string(name='RequestId'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupVpcWhitelistResponseBody(name='body'),
}

async function describeApiGroupVpcWhitelistWithOptions(request: DescribeApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): DescribeApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiGroupVpcWhitelist', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupVpcWhitelistWithOptions(request, runtime);
}

model BatchUpdateApisVpcAccessRequest {
  securityToken?: string(name='SecurityToken'),
  oldVpcId?: string(name='OldVpcId'),
  oldInstanceId?: string(name='OldInstanceId'),
  oldPort?: int32(name='OldPort'),
  vpcId?: string(name='VpcId'),
  instanceId?: string(name='InstanceId'),
  displayInstanceId?: string(name='DisplayInstanceId'),
  port?: int32(name='Port'),
  serviceAddress?: string(name='ServiceAddress'),
  api?: [ 
    {
      stageId?: string(name='StageId'),
      groupId?: string(name='GroupId'),
      apiUid?: string(name='ApiUid'),
    }
  ](name='Api'),
}

model BatchUpdateApisVpcAccessResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model BatchUpdateApisVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateApisVpcAccessResponseBody(name='body'),
}

async function batchUpdateApisVpcAccessWithOptions(request: BatchUpdateApisVpcAccessRequest, runtime: Util.RuntimeOptions): BatchUpdateApisVpcAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchUpdateApisVpcAccess', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchUpdateApisVpcAccess(request: BatchUpdateApisVpcAccessRequest): BatchUpdateApisVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateApisVpcAccessWithOptions(request, runtime);
}

model DescribeRegionHttpCodeRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  stageName?: string(name='StageName'),
}

model DescribeRegionHttpCodeResponseBody = {
  requestId?: string(name='RequestId'),
  httpCodePacket?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
    }
  ](name='MonitorItem')
  }(name='HttpCodePacket'),
}

model DescribeRegionHttpCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionHttpCodeResponseBody(name='body'),
}

async function describeRegionHttpCodeWithOptions(request: DescribeRegionHttpCodeRequest, runtime: Util.RuntimeOptions): DescribeRegionHttpCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionHttpCode', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionHttpCode(request: DescribeRegionHttpCodeRequest): DescribeRegionHttpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionHttpCodeWithOptions(request, runtime);
}

model DescribeSyncFailApiTaskRequest {
  securityToken?: string(name='SecurityToken'),
  flowId?: string(name='FlowId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeSyncFailApiTaskResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  apis?: {
    apiDigest?: [ 
    {
      apiId?: string(name='ApiId'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      version?: string(name='Version'),
      path?: string(name='Path'),
      synTime?: string(name='SynTime'),
      method?: string(name='Method'),
      failReason?: string(name='FailReason'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='ApiDigest')
  }(name='Apis'),
}

model DescribeSyncFailApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncFailApiTaskResponseBody(name='body'),
}

async function describeSyncFailApiTaskWithOptions(request: DescribeSyncFailApiTaskRequest, runtime: Util.RuntimeOptions): DescribeSyncFailApiTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSyncFailApiTask', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSyncFailApiTask(request: DescribeSyncFailApiTaskRequest): DescribeSyncFailApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSyncFailApiTaskWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribePurchasedApisRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  visibility?: string(name='Visibility'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribePurchasedApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  purchasedApis?: {
    purchasedApi?: [ 
    {
      visibility?: string(name='Visibility'),
      purchasedTime?: string(name='PurchasedTime'),
      apiId?: string(name='ApiId'),
      modifiedTime?: string(name='ModifiedTime'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      deployedTime?: string(name='DeployedTime'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='PurchasedApi')
  }(name='PurchasedApis'),
}

model DescribePurchasedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApisWithOptions(request: DescribePurchasedApisRequest, runtime: Util.RuntimeOptions): DescribePurchasedApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePurchasedApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApisWithOptions(request, runtime);
}

model DescribeTrafficControlsByApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
}

model DescribeTrafficControlsByApiResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlItems?: {
    trafficControlItem?: [ 
    {
      trafficControlItemId?: string(name='TrafficControlItemId'),
      boundTime?: string(name='BoundTime'),
      trafficControlItemName?: string(name='TrafficControlItemName'),
    }
  ](name='TrafficControlItem')
  }(name='TrafficControlItems'),
}

model DescribeTrafficControlsByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficControlsByApiResponseBody(name='body'),
}

async function describeTrafficControlsByApiWithOptions(request: DescribeTrafficControlsByApiRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsByApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTrafficControlsByApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsByApiWithOptions(request, runtime);
}

model DescribeDeployedApisRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDeployedApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  deployedApis?: {
    deployedApiItem?: [ 
    {
      visibility?: string(name='Visibility'),
      apiId?: string(name='ApiId'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      deployedTime?: string(name='DeployedTime'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='DeployedApiItem')
  }(name='DeployedApis'),
}

model DescribeDeployedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApisWithOptions(request: DescribeDeployedApisRequest, runtime: Util.RuntimeOptions): DescribeDeployedApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeployedApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApisWithOptions(request, runtime);
}

model RemoveAppsAuthoritiesRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  appIds?: string(name='AppIds'),
}

model RemoveAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppsAuthoritiesResponseBody(name='body'),
}

async function removeAppsAuthoritiesWithOptions(request: RemoveAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveAppsAuthoritiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveAppsAuthorities', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppsAuthoritiesWithOptions(request, runtime);
}

model DeleteLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  logType?: string(name='LogType'),
}

model DeleteLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLogConfigResponseBody(name='body'),
}

async function deleteLogConfigWithOptions(request: DeleteLogConfigRequest, runtime: Util.RuntimeOptions): DeleteLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLogConfig', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogConfigWithOptions(request, runtime);
}

model ReactivateDomainRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  domainName?: string(name='DomainName'),
}

model ReactivateDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReactivateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ReactivateDomainResponseBody(name='body'),
}

async function reactivateDomainWithOptions(request: ReactivateDomainRequest, runtime: Util.RuntimeOptions): ReactivateDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReactivateDomain', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return reactivateDomainWithOptions(request, runtime);
}

model DescribeAuthorizedApisRequest {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAuthorizedApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  authorizedApis?: {
    authorizedApi?: [ 
    {
      apiId?: string(name='ApiId'),
      authorizationSource?: string(name='AuthorizationSource'),
      authVaildTime?: string(name='AuthVaildTime'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: string(name='GroupId'),
      authorizedTime?: string(name='AuthorizedTime'),
      operator?: string(name='Operator'),
      stageName?: string(name='StageName'),
      apiName?: string(name='ApiName'),
      regionId?: string(name='RegionId'),
    }
  ](name='AuthorizedApi')
  }(name='AuthorizedApis'),
}

model DescribeAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuthorizedApisResponseBody(name='body'),
}

async function describeAuthorizedApisWithOptions(request: DescribeAuthorizedApisRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuthorizedApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedApisWithOptions(request, runtime);
}

model CreateProductSpecsRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
  name?: string(name='Name'),
  type?: int32(name='Type'),
  isHide?: boolean(name='IsHide'),
  unit?: int32(name='Unit'),
  rpsValue?: long(name='RpsValue'),
  quotaValue?: long(name='QuotaValue'),
  lifeCycle?: int32(name='LifeCycle'),
}

model CreateProductSpecsResponseBody = {
  requestId?: string(name='RequestId'),
  productSpecsId?: long(name='ProductSpecsId'),
  productSpecsCode?: string(name='ProductSpecsCode'),
}

model CreateProductSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductSpecsResponseBody(name='body'),
}

async function createProductSpecsWithOptions(request: CreateProductSpecsRequest, runtime: Util.RuntimeOptions): CreateProductSpecsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProductSpecs', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProductSpecs(request: CreateProductSpecsRequest): CreateProductSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductSpecsWithOptions(request, runtime);
}

model ModifyTrafficControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  trafficControlName?: string(name='TrafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit'),
  apiDefault?: int32(name='ApiDefault'),
  userDefault?: int32(name='UserDefault'),
  appDefault?: int32(name='AppDefault'),
  description?: string(name='Description'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTrafficControlResponseBody(name='body'),
}

async function modifyTrafficControlWithOptions(request: ModifyTrafficControlRequest, runtime: Util.RuntimeOptions): ModifyTrafficControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTrafficControl', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrafficControlWithOptions(request, runtime);
}

model CreateLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  slsProject?: string(name='SlsProject'),
  slsLogStore?: string(name='SlsLogStore'),
  logType?: string(name='LogType'),
}

model CreateLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLogConfigResponseBody(name='body'),
}

async function createLogConfigWithOptions(request: CreateLogConfigRequest, runtime: Util.RuntimeOptions): CreateLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLogConfig', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogConfigWithOptions(request, runtime);
}

model SetTrafficControlApisRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  groupId?: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName?: string(name='StageName'),
}

model SetTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetTrafficControlApisResponseBody(name='body'),
}

async function setTrafficControlApisWithOptions(request: SetTrafficControlApisRequest, runtime: Util.RuntimeOptions): SetTrafficControlApisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetTrafficControlApis', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTrafficControlApisWithOptions(request, runtime);
}

model AbolishProductRequest {
  securityToken?: string(name='SecurityToken'),
  productId?: long(name='ProductId'),
}

model AbolishProductResponseBody = {
  success?: boolean(name='Success'),
  requestId?: string(name='RequestId'),
}

model AbolishProductResponse = {
  headers: map[string]string(name='headers'),
  body: AbolishProductResponseBody(name='body'),
}

async function abolishProductWithOptions(request: AbolishProductRequest, runtime: Util.RuntimeOptions): AbolishProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AbolishProduct', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function abolishProduct(request: AbolishProductRequest): AbolishProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishProductWithOptions(request, runtime);
}

model OpenApiGatewayServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenApiGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenApiGatewayServiceResponseBody(name='body'),
}

async function openApiGatewayServiceWithOptions(runtime: Util.RuntimeOptions): OpenApiGatewayServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('OpenApiGatewayService', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openApiGatewayService(): OpenApiGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openApiGatewayServiceWithOptions(runtime);
}

model SwitchApiRequest {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  description?: string(name='Description'),
  historyVersion?: string(name='HistoryVersion'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchApiResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchApiResponseBody(name='body'),
}

async function switchApiWithOptions(request: SwitchApiRequest, runtime: Util.RuntimeOptions): SwitchApiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchApi', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiWithOptions(request, runtime);
}

model DescribeVpcAccessesRequest {
  securityToken?: string(name='SecurityToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  accurateQuery?: boolean(name='AccurateQuery'),
}

model DescribeVpcAccessesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  vpcAccessAttributes?: {
    vpcAccessAttribute?: [ 
    {
      vpcId?: string(name='VpcId'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      port?: int32(name='Port'),
      name?: string(name='Name'),
      createdTime?: string(name='CreatedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='VpcAccessAttribute')
  }(name='VpcAccessAttributes'),
}

model DescribeVpcAccessesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcAccessesResponseBody(name='body'),
}

async function describeVpcAccessesWithOptions(request: DescribeVpcAccessesRequest, runtime: Util.RuntimeOptions): DescribeVpcAccessesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcAccesses', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcAccessesWithOptions(request, runtime);
}

model DescribeInstanceSlbConnectRequest {
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  sbcName?: string(name='SbcName'),
}

model DescribeInstanceSlbConnectResponseBody = {
  requestId?: string(name='RequestId'),
  instanceSlbConnect?: {
    monitorItem?: [ 
    {
      itemValue?: string(name='ItemValue'),
      itemTime?: string(name='ItemTime'),
      item?: string(name='Item'),
    }
  ](name='MonitorItem')
  }(name='InstanceSlbConnect'),
}

model DescribeInstanceSlbConnectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSlbConnectResponseBody(name='body'),
}

async function describeInstanceSlbConnectWithOptions(request: DescribeInstanceSlbConnectRequest, runtime: Util.RuntimeOptions): DescribeInstanceSlbConnectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSlbConnect', '2016-07-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSlbConnect(request: DescribeInstanceSlbConnectRequest): DescribeInstanceSlbConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSlbConnectWithOptions(request, runtime);
}

