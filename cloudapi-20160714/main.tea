/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AbolishApiRequest {
  apiId?: string(name='ApiId', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  groupId?: string(name='GroupId', example='123'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model AbolishApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AbolishApiResponseBody(name='body'),
}

async function abolishApiWithOptions(request: AbolishApiRequest, runtime: Util.RuntimeOptions): AbolishApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AbolishApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiWithOptions(request, runtime);
}

model AddAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', example='[{\\"entry\\": \\"192.168.1.0/24\\", \\"comment\\": \\"test\\"}]'),
  aclId?: string(name='AclId', example='acl-bp1ohqkonqybecf4llbrc'),
  securityToken?: string(name='SecurityToken'),
}

model AddAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
}

model AddAccessControlListEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAccessControlListEntryResponseBody(name='body'),
}

async function addAccessControlListEntryWithOptions(request: AddAccessControlListEntryRequest, runtime: Util.RuntimeOptions): AddAccessControlListEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntrys)) {
    query['AclEntrys'] = request.aclEntrys;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAccessControlListEntry',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAccessControlListEntry(request: AddAccessControlListEntryRequest): AddAccessControlListEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccessControlListEntryWithOptions(request, runtime);
}

model AddIpControlPolicyItemRequest {
  appId?: string(name='AppId', description='The ID of the policy. The ID is unique.', example='1111111'),
  cidrIp?: string(name='CidrIp', description='The ID of the request.', example='113.125.1.101;101.11.1.1'),
  ipControlId?: string(name='IpControlId', description='The IP addresses or CIDR blocks involved in the policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can specify a maximum of 10 IP addresses or CIDR blocks.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  securityToken?: string(name='SecurityToken'),
}

model AddIpControlPolicyItemResponseBody = {
  policyItemId?: string(name='PolicyItemId', description='When you call this operation, note that:

*   This operation is intended for API providers.
*   An added policy immediately takes effect on all APIs that are bound to the access control list (ACL).
*   A maximum of 100 policies can be added to an ACL.', example='P151617000829241'),
  requestId?: string(name='RequestId', description='Adds a policy to an existing ACL.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model AddIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddIpControlPolicyItemResponseBody(name='body'),
}

/**
  * The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.
  * *   You can add only one app ID restriction policy at a time.
  * *   If this parameter is empty, no restriction is imposed on the app IDs.
  * *   If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
  * *   Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
  * *   If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.
  *
  * @param request AddIpControlPolicyItemRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddIpControlPolicyItemResponse
 */
async function addIpControlPolicyItemWithOptions(request: AddIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): AddIpControlPolicyItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.cidrIp)) {
    query['CidrIp'] = request.cidrIp;
  }
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddIpControlPolicyItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.
  * *   You can add only one app ID restriction policy at a time.
  * *   If this parameter is empty, no restriction is imposed on the app IDs.
  * *   If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
  * *   Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
  * *   If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.
  *
  * @param request AddIpControlPolicyItemRequest
  * @return AddIpControlPolicyItemResponse
 */
async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpControlPolicyItemWithOptions(request, runtime);
}

model AddTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  specialKey?: string(name='SpecialKey', description='The ID of the request.', example='3382463'),
  specialType?: string(name='SpecialType', description='The special throttling value.', example='APP'),
  trafficControlId?: string(name='TrafficControlId', description='The ID of the app or Alibaba Cloud account. Specify this parameter based on the value of the **SpecialType** parameter. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3f053654YpMPwo#/secure) page.', example='tf123456'),
  trafficValue?: int32(name='TrafficValue', description='*   This API is intended for API providers.
*   If the input SpecialKey already exists, the previous configuration is overwritten. Use caution when calling this operation.
*   Special throttling policies must be added to an existing throttling policy, and can take effect on all the APIs to which the throttling policy is bound.', example='10000'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='Adds a custom special policy to a specified throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model AddTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTrafficSpecialControlResponseBody(name='body'),
}

/**
  * The type of the special throttling policy. Valid values:
  * *   **APP**
  * *   **USER**
  *
  * @param request AddTrafficSpecialControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddTrafficSpecialControlResponse
 */
async function addTrafficSpecialControlWithOptions(request: AddTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): AddTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.specialKey)) {
    query['SpecialKey'] = request.specialKey;
  }
  if (!Util.isUnset(request.specialType)) {
    query['SpecialType'] = request.specialType;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficValue)) {
    query['TrafficValue'] = request.trafficValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTrafficSpecialControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The type of the special throttling policy. Valid values:
  * *   **APP**
  * *   **USER**
  *
  * @param request AddTrafficSpecialControlRequest
  * @return AddTrafficSpecialControlResponse
 */
async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrafficSpecialControlWithOptions(request, runtime);
}

model AttachPluginRequest {
  apiId?: string(name='ApiId', example='8afff6c8c4c6447abb035812e4d66b65'),
  apiIds?: string(name='ApiIds', example='xxx'),
  groupId?: string(name='GroupId', example='285bb759342649a1b70c2093a772e087'),
  pluginId?: string(name='PluginId', example='9a3f1a5279434f2ba74ccd91c295af9f'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='TEST'),
}

model AttachPluginResponseBody = {
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model AttachPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachPluginResponseBody(name='body'),
}

async function attachPluginWithOptions(request: AttachPluginRequest, runtime: Util.RuntimeOptions): AttachPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachPlugin',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachPlugin(request: AttachPluginRequest): AttachPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachPluginWithOptions(request, runtime);
}

model BatchAbolishApisRequest {
  api?: [ 
    {
      apiUid?: string(name='ApiUid', example='994f72dcdaf04af0b38022c65fdbd1ac'),
      groupId?: string(name='GroupId', example='ced5ab777f7b440398ea70e4470124de'),
      stageId?: string(name='StageId', example='979fd16250644d5b82173534f465ac77'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='Api'),
  securityToken?: string(name='SecurityToken'),
}

model BatchAbolishApisResponseBody = {
  operationId?: string(name='OperationId', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model BatchAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAbolishApisResponseBody(name='body'),
}

async function batchAbolishApisWithOptions(request: BatchAbolishApisRequest, runtime: Util.RuntimeOptions): BatchAbolishApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.api)) {
    query['Api'] = request.api;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAbolishApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAbolishApis(request: BatchAbolishApisRequest): BatchAbolishApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAbolishApisWithOptions(request, runtime);
}

model BatchDeployApisRequest {
  api?: [ 
    {
      apiUid?: string(name='ApiUid', description='Publishes multiple APIs at a time.', example='58928'),
      groupId?: string(name='GroupId', description='The APIs that you want to operate.', example='The ID of the request.'),
    }
  ](name='Api', description='b4f5c342b8bc4ef88ccda0332402e0fa'),
  description?: string(name='Description', description='2b35dd68345b472f8051647306a16415', example='test'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The description.', example='RELEASE'),
}

model BatchDeployApisResponseBody = {
  operationId?: string(name='OperationId', example='2a322599-8e38-428a-a306-9b21ea2129bf'),
  requestId?: string(name='RequestId', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model BatchDeployApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeployApisResponseBody(name='body'),
}

async function batchDeployApisWithOptions(request: BatchDeployApisRequest, runtime: Util.RuntimeOptions): BatchDeployApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.api)) {
    query['Api'] = request.api;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeployApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeployApis(request: BatchDeployApisRequest): BatchDeployApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeployApisWithOptions(request, runtime);
}

model CreateAccessControlListRequest {
  aclName?: string(name='AclName', description='The name of the ACL. The name must be 1 to 30 characters in length, and can contain letters, digits, periods (.), hyphens (-), forward slashes (/), and underscores (\\_). The name must be unique within the region.', example='testAcl'),
  addressIPVersion?: string(name='AddressIPVersion', example='ipv4'),
  securityToken?: string(name='SecurityToken'),
}

model CreateAccessControlListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model CreateAccessControlListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessControlListResponseBody(name='body'),
}

async function createAccessControlListWithOptions(request: CreateAccessControlListRequest, runtime: Util.RuntimeOptions): CreateAccessControlListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.addressIPVersion)) {
    query['AddressIPVersion'] = request.addressIPVersion;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessControlList',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccessControlList(request: CreateAccessControlListRequest): CreateAccessControlListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessControlListWithOptions(request, runtime);
}

model CreateApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='If the **AuthType** is **APP** authentication, you need to pass this value to specify the signature algorithm. If you do not specify this parameter, the default value HmacSHA256 is used. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiName?: string(name='ApiName', description='The name of the API that you want to create. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (\\_).', example='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='If the **AuthType** parameter is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.', example='HEADER'),
  authType?: string(name='AuthType', description='API安全认证类型，目前可以取值：

- **APP**：只允许已授权的APP调用
- **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
  任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制。', example='APP'),
  backendEnable?: boolean(name='BackendEnable', description='Specifies whether to enable backend services.', example='true'),
  backendId?: string(name='BackendId', description='The IDof the backend service', example='a0305308908c4740aba9cbfd63ba99b7'),
  constantParameters?: string(name='ConstantParameters'),
  description?: string(name='Description', description='The description of the API. The description can be up to 180 characters in length.', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to set **DisableInternet** to **true** to limit API calls to within the VPC.
*   If you set **DisableInternet** to **false**, the limit is lifted. The default value is false when you create an API.', example='true'),
  errorCodeSamples?: string(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='08ae4aa0f95e4321849ee57f4e0b3077'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', description='The switch status of ACL. Valid values:- **on** and **off**.', example='{\\"openIdApiType\\":null,\\"idTokenParamName\\":null,\\"publicKeyId\\":null,\\"publicKey\\":null}'),
  requestConfig?: string(name='RequestConfig', description='The configuration items of API requests sent by the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).', example='{"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}'),
  requestParameters?: string(name='RequestParameters'),
  resultBodyModel?: string(name='ResultBodyModel', description='The return description of the API.', example='{}'),
  resultDescriptions?: string(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.', example='HTML'),
  securityToken?: string(name='SecurityToken'),
  serviceConfig?: string(name='ServiceConfig', description='The configuration items of API requests sent by API Gateway to the backend service.

For more information, see [ServiceConfig](~~43987~~).', example='{"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  systemParameters?: string(name='SystemParameters'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', description='The type of the two-way communication API.

*   **COMMON**: common API
*   **REGISTER**: registered API
*   **UNREGISTER**: unregistered API
*   **NOTIFY**: downstream notification API', example='COMMON'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId', description='The ID of the API.', example='8afff6c8c4c6447abb035812e4d66b65'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model CreateApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   The name of each API within the same group must be unique.
  * *   Each request path within the same group must be unique.
  * *   The QPS limit on this operation is 50 per user.
  *
  * @param request CreateApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateApiResponse
 */
async function createApiWithOptions(request: CreateApiRequest, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowSignatureMethod)) {
    query['AllowSignatureMethod'] = request.allowSignatureMethod;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.appCodeAuthType)) {
    query['AppCodeAuthType'] = request.appCodeAuthType;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.backendEnable)) {
    query['BackendEnable'] = request.backendEnable;
  }
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableInternet)) {
    query['DisableInternet'] = request.disableInternet;
  }
  if (!Util.isUnset(request.forceNonceCheck)) {
    query['ForceNonceCheck'] = request.forceNonceCheck;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.openIdConnectConfig)) {
    query['OpenIdConnectConfig'] = request.openIdConnectConfig;
  }
  if (!Util.isUnset(request.requestConfig)) {
    query['RequestConfig'] = request.requestConfig;
  }
  if (!Util.isUnset(request.resultBodyModel)) {
    query['ResultBodyModel'] = request.resultBodyModel;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serviceConfig)) {
    query['ServiceConfig'] = request.serviceConfig;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.webSocketApiType)) {
    query['WebSocketApiType'] = request.webSocketApiType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.constantParameters)) {
    body['ConstantParameters'] = request.constantParameters;
  }
  if (!Util.isUnset(request.errorCodeSamples)) {
    body['ErrorCodeSamples'] = request.errorCodeSamples;
  }
  if (!Util.isUnset(request.failResultSample)) {
    body['FailResultSample'] = request.failResultSample;
  }
  if (!Util.isUnset(request.requestParameters)) {
    body['RequestParameters'] = request.requestParameters;
  }
  if (!Util.isUnset(request.resultDescriptions)) {
    body['ResultDescriptions'] = request.resultDescriptions;
  }
  if (!Util.isUnset(request.resultSample)) {
    body['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    body['ServiceParameters'] = request.serviceParameters;
  }
  if (!Util.isUnset(request.serviceParametersMap)) {
    body['ServiceParametersMap'] = request.serviceParametersMap;
  }
  if (!Util.isUnset(request.systemParameters)) {
    body['SystemParameters'] = request.systemParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API providers.
  * *   The name of each API within the same group must be unique.
  * *   Each request path within the same group must be unique.
  * *   The QPS limit on this operation is 50 per user.
  *
  * @param request CreateApiRequest
  * @return CreateApiResponse
 */
async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiWithOptions(request, runtime);
}

model CreateApiGroupRequest {
  basePath?: string(name='BasePath', example='/qqq'),
  description?: string(name='Description', example='The weather informations.'),
  groupName?: string(name='GroupName', example='Weather'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', example='Key， Value'),
}

model CreateApiGroupResponseBody = {
  basePath?: string(name='BasePath', example='/qqq'),
  description?: string(name='Description', example='The weather informations'),
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7xx'),
  groupName?: string(name='GroupName', example='Weather'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  instanceType?: string(name='InstanceType', example='VPC_SHARED'),
  requestId?: string(name='RequestId', example='FF3B7D81-66AE-47E0-BF69-157DCF187514'),
  subDomain?: string(name='SubDomain', example='523e8dc7bbe04613b5b1d726xxxxxxxx-cn-hangzhou.alicloudapi.com'),
  tagStatus?: boolean(name='TagStatus', example='True'),
}

model CreateApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroupWithOptions(request: CreateApiGroupRequest, runtime: Util.RuntimeOptions): CreateApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.basePath)) {
    query['BasePath'] = request.basePath;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupWithOptions(request, runtime);
}

model CreateApiStageVariableRequest {
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageId?: string(name='StageId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  stageRouteModel?: string(name='StageRouteModel'),
  supportRoute?: boolean(name='SupportRoute', example='true'),
  variableName?: string(name='VariableName', example='serverName'),
  variableValue?: string(name='VariableValue', example='api.domain.com'),
}

model CreateApiStageVariableResponseBody = {
  requestId?: string(name='RequestId', example='03442A3D-3B7D-434C-8A95-A5FEB999B529'),
}

model CreateApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiStageVariableResponseBody(name='body'),
}

async function createApiStageVariableWithOptions(request: CreateApiStageVariableRequest, runtime: Util.RuntimeOptions): CreateApiStageVariableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageId)) {
    query['StageId'] = request.stageId;
  }
  if (!Util.isUnset(request.stageRouteModel)) {
    query['StageRouteModel'] = request.stageRouteModel;
  }
  if (!Util.isUnset(request.supportRoute)) {
    query['SupportRoute'] = request.supportRoute;
  }
  if (!Util.isUnset(request.variableName)) {
    query['VariableName'] = request.variableName;
  }
  if (!Util.isUnset(request.variableValue)) {
    query['VariableValue'] = request.variableValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiStageVariable',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiStageVariableWithOptions(request, runtime);
}

model CreateAppRequest {
  appCode?: string(name='AppCode', example='3aaf905a0a1f4f0eabc6d891dfa08afc'),
  appKey?: string(name='AppKey', example='60030986'),
  appName?: string(name='AppName', example='CreateAppTest'),
  appSecret?: string(name='AppSecret', example='nzyNqFkRWB2uLw86'),
  description?: string(name='Description', example='test'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag', example='Key， Value'),
}

model CreateAppResponseBody = {
  appId?: long(name='AppId', example='20112314518278'),
  requestId?: string(name='RequestId', example='BA20890E-75C7-41BC-9C8B-73276B58F550'),
  tagStatus?: boolean(name='TagStatus', example='false'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appSecret)) {
    query['AppSecret'] = request.appSecret;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateBackendRequest {
  backendName?: string(name='BackendName', example='testBackendService'),
  backendType?: string(name='BackendType', example='HTTP'),
  createEventBridgeServiceLinkedRole?: boolean(name='CreateEventBridgeServiceLinkedRole', example='true'),
  description?: string(name='Description'),
  securityToken?: string(name='SecurityToken'),
}

model CreateBackendResponseBody = {
  backendId?: string(name='BackendId', example='0d105f80a8f340408bd34954d4e4ff22'),
  requestId?: string(name='RequestId', example='66D84355-164D-53ED-81FF-03DCF181DE24'),
}

model CreateBackendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackendResponseBody(name='body'),
}

async function createBackendWithOptions(request: CreateBackendRequest, runtime: Util.RuntimeOptions): CreateBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendName)) {
    query['BackendName'] = request.backendName;
  }
  if (!Util.isUnset(request.backendType)) {
    query['BackendType'] = request.backendType;
  }
  if (!Util.isUnset(request.createEventBridgeServiceLinkedRole)) {
    query['CreateEventBridgeServiceLinkedRole'] = request.createEventBridgeServiceLinkedRole;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackend',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackend(request: CreateBackendRequest): CreateBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackendWithOptions(request, runtime);
}

model CreateBackendModelRequest {
  backendId?: string(name='BackendId', example='34e94fcd3e2e47a49824a89b8f92cb5e'),
  backendModelData?: string(name='BackendModelData', example='{\\"ServiceAddress\\":\\"http://apigateway-echo-redux.alicloudapi.com:8080\\"}'),
  backendType?: string(name='BackendType', example='HTTP'),
  description?: string(name='Description', example='model description'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='TEST'),
}

model CreateBackendModelResponseBody = {
  backendModelId?: string(name='BackendModelId', example='4be6b110b7aa40b0bf0c83cc00b3bd86'),
  requestId?: string(name='RequestId', example='64411ECF-FAF7-5E3C-BA7B-E4A1F15A28CA'),
}

model CreateBackendModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackendModelResponseBody(name='body'),
}

async function createBackendModelWithOptions(request: CreateBackendModelRequest, runtime: Util.RuntimeOptions): CreateBackendModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.backendModelData)) {
    query['BackendModelData'] = request.backendModelData;
  }
  if (!Util.isUnset(request.backendType)) {
    query['BackendType'] = request.backendType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackendModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackendModel(request: CreateBackendModelRequest): CreateBackendModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackendModelWithOptions(request, runtime);
}

model CreateDatasetRequest {
  datasetName?: string(name='DatasetName', example='DatasetName'),
  datasetType?: string(name='DatasetType', example='JWT_BLOCKING'),
  securityToken?: string(name='SecurityToken'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  requestId?: string(name='RequestId', example='4173F95B-360C-460C-9F6C-4A96********'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDatasetWithOptions(request: CreateDatasetRequest, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.datasetType)) {
    query['DatasetType'] = request.datasetType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetWithOptions(request, runtime);
}

model CreateDatasetItemRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  description?: string(name='Description'),
  expiredTime?: string(name='ExpiredTime', example='2022-09-22T12:00:00Z'),
  securityToken?: string(name='SecurityToken'),
  value?: string(name='Value', example='106.43.XXX.XXX'),
}

model CreateDatasetItemResponseBody = {
  datasetItemId?: string(name='DatasetItemId', example='5045****'),
  requestId?: string(name='RequestId', example='8A5E2053-4D9F-5280-B7A9-D357********'),
}

model CreateDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatasetItemResponseBody(name='body'),
}

async function createDatasetItemWithOptions(request: CreateDatasetItemRequest, runtime: Util.RuntimeOptions): CreateDatasetItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasetItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDatasetItem(request: CreateDatasetItemRequest): CreateDatasetItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetItemWithOptions(request, runtime);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='AutoPay', example='false'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration', example='1'),
  httpsPolicy?: string(name='HttpsPolicy', example='HTTPS2_TLS1_2'),
  instanceCidr?: string(name='InstanceCidr'),
  instanceName?: string(name='InstanceName', example='ApigatewayInstance'),
  instanceSpec?: string(name='InstanceSpec', example='api.s1.small'),
  instanceType?: string(name='InstanceType'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  token?: string(name='Token', example='c20d86c4-1eb3-4d0b-afe9-c586df1e2136'),
  userVpcId?: string(name='UserVpcId'),
  zoneId?: string(name='ZoneId', example='cn-beijing-MAZ3(c,e)'),
  zoneVSwitchSecurityGroup?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      securityGroupId?: string(name='SecurityGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneVSwitchSecurityGroup'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='apigateway-hz-b3c5dadd5***'),
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  tagStatus?: boolean(name='TagStatus'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.httpsPolicy)) {
    query['HttpsPolicy'] = request.httpsPolicy;
  }
  if (!Util.isUnset(request.instanceCidr)) {
    query['InstanceCidr'] = request.instanceCidr;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.userVpcId)) {
    query['UserVpcId'] = request.userVpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.zoneVSwitchSecurityGroup)) {
    query['ZoneVSwitchSecurityGroup'] = request.zoneVSwitchSecurityGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateIntranetDomainRequest {
  groupId?: string(name='GroupId', description='The custom domain name.', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
}

model CreateIntranetDomainResponseBody = {
  domainName?: string(name='DomainName', description='The ID of the request.', example='api.demo.com'),
  requestId?: string(name='RequestId', description='auditing', example='20D942A5-EDC6-5DA3-93F9-257888399E22'),
}

model CreateIntranetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIntranetDomainResponseBody(name='body'),
}

async function createIntranetDomainWithOptions(request: CreateIntranetDomainRequest, runtime: Util.RuntimeOptions): CreateIntranetDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIntranetDomain',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntranetDomainWithOptions(request, runtime);
}

model CreateIpControlRequest {
  description?: string(name='Description', example='test'),
  ipControlName?: string(name='IpControlName', example='controlNameTest'),
  ipControlPolicys?: [ 
    {
      appId?: string(name='AppId', example='11111'),
      cidrIp?: string(name='CidrIp', example='114.1.1.0/24'),
    }
  ](name='IpControlPolicys'),
  ipControlType?: string(name='IpControlType', example='ALLOW'),
  securityToken?: string(name='SecurityToken'),
}

model CreateIpControlResponseBody = {
  ipControlId?: string(name='IpControlId', example='7ea91319a34d48a09b5c9c871d9768b1'),
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model CreateIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpControlResponseBody(name='body'),
}

async function createIpControlWithOptions(request: CreateIpControlRequest, runtime: Util.RuntimeOptions): CreateIpControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipControlName)) {
    query['IpControlName'] = request.ipControlName;
  }
  if (!Util.isUnset(request.ipControlPolicys)) {
    query['IpControlPolicys'] = request.ipControlPolicys;
  }
  if (!Util.isUnset(request.ipControlType)) {
    query['IpControlType'] = request.ipControlType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIpControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpControlWithOptions(request, runtime);
}

model CreateLogConfigRequest {
  logType?: string(name='LogType', example='PROVIDER'),
  securityToken?: string(name='SecurityToken'),
  slsLogStore?: string(name='SlsLogStore', description='slslogstore', example='api-gateway'),
  slsProject?: string(name='SlsProject', example='rec-lq-sls'),
}

model CreateLogConfigResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLogConfigResponseBody(name='body'),
}

async function createLogConfigWithOptions(request: CreateLogConfigRequest, runtime: Util.RuntimeOptions): CreateLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.slsLogStore)) {
    query['SlsLogStore'] = request.slsLogStore;
  }
  if (!Util.isUnset(request.slsProject)) {
    query['SlsProject'] = request.slsProject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLogConfig',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogConfigWithOptions(request, runtime);
}

model CreateModelRequest {
  description?: string(name='Description', description='The description of the model definition.', example='Model Description'),
  groupId?: string(name='GroupId', description='The ID of the API group to which the model belongs.', example='30e792398d6c4569b04c0e53a3494381'),
  modelName?: string(name='ModelName', description='The name of the model. The name must be unique within the group.', example='Test'),
  schema?: string(name='Schema', description='The definition of the model in JSON Schema.', example='{"type":"object","properties":{"id":{"format":"int64","maximum":100,"exclusiveMaximum":true,"type":"integer"},"name":{"maxLength":10,"type":"string"}}}'),
}

model CreateModelResponseBody = {
  createdTime?: string(name='CreatedTime', description='The time when the model was created.', example='2019-01-29T09:33:01Z'),
  description?: string(name='Description', description='The description of the created model.', example='Model Description'),
  groupId?: string(name='GroupId', description='The ID of the API group to which the created model belongs.', example='30e792398d6c4569b04c0e53a3494381'),
  modelId?: string(name='ModelId', description='The ID of the created model.', example='766c0b9538a04bdf974953b5576783ba'),
  modelName?: string(name='ModelName', description='The name of the created model.', example='Test'),
  modelRef?: string(name='ModelRef', description='The URI of the created model.', example='https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba'),
  modifiedTime?: string(name='ModifiedTime', description='The time when the model is last modified.', example='2019-01-29T09:33:01Z'),
  regionId?: string(name='RegionId', description='The region to which the created model belongs.', example='cn-qingdao'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
  schema?: string(name='Schema', description='The definition of the created model.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateModelResponseBody(name='body'),
}

/**
  * *   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
  * *   JSON Schema supports only element attributes of the Object type.
  *
  * @param request CreateModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateModelResponse
 */
async function createModelWithOptions(request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
  * *   JSON Schema supports only element attributes of the Object type.
  *
  * @param request CreateModelRequest
  * @return CreateModelResponse
 */
async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model CreateMonitorGroupRequest {
  auth?: string(name='Auth', example='false'),
  groupId?: string(name='GroupId', example='6735211ab9094c818f32f27bc545b6c8'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', example='166636221'),
  securityToken?: string(name='SecurityToken'),
}

model CreateMonitorGroupResponseBody = {
  monitorGroupId?: long(name='MonitorGroupId', example='187421794'),
  requestId?: string(name='RequestId', example='5D7136F7-9D67-5D4D-8418-6A512CCEE3A2'),
}

model CreateMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMonitorGroupResponseBody(name='body'),
}

async function createMonitorGroupWithOptions(request: CreateMonitorGroupRequest, runtime: Util.RuntimeOptions): CreateMonitorGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auth)) {
    query['Auth'] = request.auth;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.rawMonitorGroupId)) {
    query['RawMonitorGroupId'] = request.rawMonitorGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMonitorGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMonitorGroup(request: CreateMonitorGroupRequest): CreateMonitorGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMonitorGroupWithOptions(request, runtime);
}

model CreatePluginRequest {
  description?: string(name='Description', example='createPlugin'),
  pluginData?: string(name='PluginData'),
  pluginName?: string(name='PluginName', example='NewCors'),
  pluginType?: string(name='PluginType', example='cors'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag', example='Key， Value'),
}

model CreatePluginResponseBody = {
  pluginId?: string(name='PluginId', example='1f3bde29b43d4d53989248327ff737f2'),
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  tagStatus?: boolean(name='TagStatus', example='true'),
}

model CreatePluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePluginResponseBody(name='body'),
}

async function createPluginWithOptions(request: CreatePluginRequest, runtime: Util.RuntimeOptions): CreatePluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pluginData)) {
    query['PluginData'] = request.pluginData;
  }
  if (!Util.isUnset(request.pluginName)) {
    query['PluginName'] = request.pluginName;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePlugin',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPlugin(request: CreatePluginRequest): CreatePluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPluginWithOptions(request, runtime);
}

model CreateSignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureKey?: string(name='SignatureKey', description='The ID of the request.', example='qwertyuiop'),
  signatureName?: string(name='SignatureName', description='The Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.', example='backendsignature'),
  signatureSecret?: string(name='SignatureSecret', description='The ID of the back-end signature key.', example='asdfghjkl'),
}

model CreateSignatureResponseBody = {
  requestId?: string(name='RequestId', description='The name of the back-end signature key.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureId?: string(name='SignatureId', description='*   This API is intended for API providers.
*   The API operation only creates a key policy. You must call the binding operation to bind the key to an API.
*   After the key is bound to the API, requests sent from API Gateway to the backend service contain signature strings. You can specify whether your backend service verifies these signature strings.
*   The QPS limit on this operation is 50 per user.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureName?: string(name='SignatureName', description='Creates a backend signature key.', example='backendsignature'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSignatureResponseBody(name='body'),
}

/**
  * The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
  *
  * @param request CreateSignatureRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSignatureResponse
 */
async function createSignatureWithOptions(request: CreateSignatureRequest, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureKey)) {
    query['SignatureKey'] = request.signatureKey;
  }
  if (!Util.isUnset(request.signatureName)) {
    query['SignatureName'] = request.signatureName;
  }
  if (!Util.isUnset(request.signatureSecret)) {
    query['SignatureSecret'] = request.signatureSecret;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSignature',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
  *
  * @param request CreateSignatureRequest
  * @return CreateSignatureResponse
 */
async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignatureWithOptions(request, runtime);
}

model CreateTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault', description='The default throttling value for each app.', example='10000'),
  appDefault?: int32(name='AppDefault', description='ThrottlingTestDescription', example='10000'),
  description?: string(name='Description', description='The ID of the throttling policy.', example='The ID of the request.'),
  securityToken?: string(name='SecurityToken'),
  trafficControlName?: string(name='TrafficControlName', description='The unit to be used in the throttling policy. Valid values:

*   **SECOND**
*   **MINUTE**
*   **HOUR**
*   **DAY**', example='The default throttling value for each API.'),
  trafficControlUnit?: string(name='TrafficControlUnit', description='The default throttling value for each user.', example='MINUTE'),
  userDefault?: int32(name='UserDefault', description='The description of the throttling policy.', example='10000'),
}

model CreateTrafficControlResponseBody = {
  requestId?: string(name='RequestId', description='Creates a custom throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  trafficControlId?: string(name='TrafficControlId', description='*   This API is intended for API providers.
*   Throttling policies must be bound to APIs to take effect. After a policy is bound to an API, it goes into effect on that API immediately.
*   The QPS limit on this operation is 50 per user.', example='tf123456'),
}

model CreateTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrafficControlResponseBody(name='body'),
}

/**
  * ThrottlingTest
  *
  * @param request CreateTrafficControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateTrafficControlResponse
 */
async function createTrafficControlWithOptions(request: CreateTrafficControlRequest, runtime: Util.RuntimeOptions): CreateTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDefault)) {
    query['ApiDefault'] = request.apiDefault;
  }
  if (!Util.isUnset(request.appDefault)) {
    query['AppDefault'] = request.appDefault;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  if (!Util.isUnset(request.trafficControlUnit)) {
    query['TrafficControlUnit'] = request.trafficControlUnit;
  }
  if (!Util.isUnset(request.userDefault)) {
    query['UserDefault'] = request.userDefault;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ThrottlingTest
  *
  * @param request CreateTrafficControlRequest
  * @return CreateTrafficControlResponse
 */
async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficControlWithOptions(request, runtime);
}

model DeleteAccessControlListRequest {
  aclId?: string(name='AclId', example='acl-uf6fpfdg3b5muska7uqem'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteAccessControlListResponseBody = {
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model DeleteAccessControlListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessControlListResponseBody(name='body'),
}

async function deleteAccessControlListWithOptions(request: DeleteAccessControlListRequest, runtime: Util.RuntimeOptions): DeleteAccessControlListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessControlList',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccessControlList(request: DeleteAccessControlListRequest): DeleteAccessControlListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessControlListWithOptions(request, runtime);
}

model DeleteAllTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId', description='*   This API is intended for API providers.', example='tf123456'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='Deletes all custom special policies of a specified throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteAllTrafficSpecialControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAllTrafficSpecialControlResponse
 */
async function deleteAllTrafficSpecialControlWithOptions(request: DeleteAllTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteAllTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAllTrafficSpecialControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteAllTrafficSpecialControlRequest
  * @return DeleteAllTrafficSpecialControlResponse
 */
async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllTrafficSpecialControlWithOptions(request, runtime);
}

model DeleteApiRequest {
  apiId?: string(name='ApiId', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  groupId?: string(name='GroupId', example='08ae4aa0f95e4321849ee57f4e0b3077'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ017'),
}

model DeleteApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiResponseBody(name='body'),
}

async function deleteApiWithOptions(request: DeleteApiRequest, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiWithOptions(request, runtime);
}

model DeleteApiGroupRequest {
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', example='Key， Value'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId', example='E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99'),
}

model DeleteApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroupWithOptions(request: DeleteApiGroupRequest, runtime: Util.RuntimeOptions): DeleteApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiGroupWithOptions(request, runtime);
}

model DeleteApiStageVariableRequest {
  groupId?: string(name='GroupId', description='The name of the variable to be deleted. This parameter is case-sensitive.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageId?: string(name='StageId', description='The ID of the request.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  variableName?: string(name='VariableName', description='*   This operation is intended for API providers.', example='serverName'),
}

model DeleteApiStageVariableResponseBody = {
  requestId?: string(name='RequestId', description='Deletes a specified variable in a specified environment.', example='03442A3D-3B7D-434C-8A95-A5FEB969B529'),
}

model DeleteApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiStageVariableResponseBody(name='body'),
}

async function deleteApiStageVariableWithOptions(request: DeleteApiStageVariableRequest, runtime: Util.RuntimeOptions): DeleteApiStageVariableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageId)) {
    query['StageId'] = request.stageId;
  }
  if (!Util.isUnset(request.variableName)) {
    query['VariableName'] = request.variableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiStageVariable',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiStageVariableWithOptions(request, runtime);
}

model DeleteAppRequest {
  appId?: long(name='AppId', example='110840611'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='appname'),
      value?: string(name='Value', example='testapp'),
    }
  ](name='Tag', example='test2'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteBackendRequest {
  backendId?: string(name='BackendId', example='27be0dd9ebbc467b9e86c0d250d0b92e'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteBackendResponseBody = {
  requestId?: string(name='RequestId', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DeleteBackendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackendResponseBody(name='body'),
}

async function deleteBackendWithOptions(request: DeleteBackendRequest, runtime: Util.RuntimeOptions): DeleteBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackend',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackend(request: DeleteBackendRequest): DeleteBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackendWithOptions(request, runtime);
}

model DeleteBackendModelRequest {
  backendId?: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7'),
  backendModelId?: string(name='BackendModelId', example='4be6b110b7aa40b0bf0c83cc00b3bd86'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='TEST'),
}

model DeleteBackendModelResponseBody = {
  operationId?: string(name='OperationId', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model DeleteBackendModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackendModelResponseBody(name='body'),
}

async function deleteBackendModelWithOptions(request: DeleteBackendModelRequest, runtime: Util.RuntimeOptions): DeleteBackendModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.backendModelId)) {
    query['BackendModelId'] = request.backendModelId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackendModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackendModel(request: DeleteBackendModelRequest): DeleteBackendModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackendModelWithOptions(request, runtime);
}

model DeleteDatasetRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='048C8EFB-528F-5E97-8A3D-D17B********'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDatasetWithOptions(request: DeleteDatasetRequest, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataset',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatasetWithOptions(request, runtime);
}

model DeleteDatasetItemRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  datasetItemId?: string(name='DatasetItemId', example='5045****'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDatasetItemResponseBody = {
  requestId?: string(name='RequestId', example='FF433E09-663A-5F5D-9DBA-A611********'),
}

model DeleteDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatasetItemResponseBody(name='body'),
}

async function deleteDatasetItemWithOptions(request: DeleteDatasetItemRequest, runtime: Util.RuntimeOptions): DeleteDatasetItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.datasetItemId)) {
    query['DatasetItemId'] = request.datasetItemId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatasetItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDatasetItem(request: DeleteDatasetItemRequest): DeleteDatasetItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatasetItemWithOptions(request, runtime);
}

model DeleteDomainRequest {
  domainName?: string(name='DomainName', description='*   This operation is intended for API providers.
*   If the specified domain name does not exist, a successful response will still appear.
*   Unbinding a domain name from an API group will affect access to the APIs in the group. Exercise caution when using this operation.', example='api.demo.com'),
  groupId?: string(name='GroupId', description='The ID of the request.', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', description='Unbinds a custom domain name from a specified API group.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

/**
  * The custom domain name.
  *
  * @param request DeleteDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDomainResponse
 */
async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The custom domain name.
  *
  * @param request DeleteDomainRequest
  * @return DeleteDomainResponse
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteDomainCertificateRequest {
  certificateId?: string(name='CertificateId', example='c621720d1eb34843822b7fb5148e6926'),
  domainName?: string(name='DomainName', example='api.demo.com'),
  groupId?: string(name='GroupId', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model DeleteDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificateWithOptions(request: DeleteDomainCertificateRequest, runtime: Util.RuntimeOptions): DeleteDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomainCertificate',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainCertificateWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId', example='apigateway-sh-ae502ee79ef8'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', example='Key， Value'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='CA4B3261-F14A-5E33-8608-F75A1DF27AD4'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteIpControlRequest {
  ipControlId?: string(name='IpControlId', description='*   This operation is intended for API providers.
*   If the ACL is bound to an API, you must unbind the ACL from the API before you can delete the ACL. Otherwise, an error is returned.
*   If you call this operation on an ACL that does not exist, a success message is returned.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteIpControlResponseBody = {
  requestId?: string(name='RequestId', description='Deletes an access control list (ACL).', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpControlResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteIpControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteIpControlResponse
 */
async function deleteIpControlWithOptions(request: DeleteIpControlRequest, runtime: Util.RuntimeOptions): DeleteIpControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteIpControlRequest
  * @return DeleteIpControlResponse
 */
async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpControlWithOptions(request, runtime);
}

model DeleteLogConfigRequest {
  logType?: string(name='LogType', example='PROVIDER'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteLogConfigResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DeleteLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLogConfigResponseBody(name='body'),
}

async function deleteLogConfigWithOptions(request: DeleteLogConfigRequest, runtime: Util.RuntimeOptions): DeleteLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLogConfig',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogConfigWithOptions(request, runtime);
}

model DeleteModelRequest {
  groupId?: string(name='GroupId', description='The ID of the request.', example='30e792398d6c4569b04c0e53a3494381'),
  modelName?: string(name='ModelName', description='The ID of the API group to which the model belongs.', example='Test'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId', description='Deletes a model from Model Management for an API group.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model DeleteMonitorGroupRequest {
  groupId?: string(name='GroupId', example='42925e7f5209438186d5560239af5286'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', example='166636221'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteMonitorGroupResponseBody = {
  requestId?: string(name='RequestId', example='C7E2CBAA-47FF-569F-AF12-B14B80E25422'),
}

model DeleteMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMonitorGroupResponseBody(name='body'),
}

async function deleteMonitorGroupWithOptions(request: DeleteMonitorGroupRequest, runtime: Util.RuntimeOptions): DeleteMonitorGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.rawMonitorGroupId)) {
    query['RawMonitorGroupId'] = request.rawMonitorGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMonitorGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMonitorGroup(request: DeleteMonitorGroupRequest): DeleteMonitorGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMonitorGroupWithOptions(request, runtime);
}

model DeletePluginRequest {
  pluginId?: string(name='PluginId', example='9a3f1a5279434f2ba74ccd91c295af9f'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag'),
}

model DeletePluginResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeletePluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePluginResponseBody(name='body'),
}

async function deletePluginWithOptions(request: DeletePluginRequest, runtime: Util.RuntimeOptions): DeletePluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePlugin',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePlugin(request: DeletePluginRequest): DeletePluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePluginWithOptions(request, runtime);
}

model DeleteSignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='*   This API is intended for API providers.
*   This API operation deletes an existing backend signature key.
*   You cannot delete a key that is bound to an API. To delete the key, you must unbind it first.
*   The QPS limit on this operation is 50 per user.', example='dd05f1c54d6749eda95f9fa6d491449a'),
}

model DeleteSignatureResponseBody = {
  requestId?: string(name='RequestId', description='Deletes a backend signature key.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSignatureResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteSignatureRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSignatureResponse
 */
async function deleteSignatureWithOptions(request: DeleteSignatureRequest, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSignature',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteSignatureRequest
  * @return DeleteSignatureResponse
 */
async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSignatureWithOptions(request, runtime);
}

model DeleteTrafficControlRequest {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId', example='tf123456'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficControlResponseBody(name='body'),
}

async function deleteTrafficControlWithOptions(request: DeleteTrafficControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficControlWithOptions(request, runtime);
}

model DeleteTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken'),
  specialKey?: string(name='SpecialKey', description='*   This API is intended for API providers.
*   You can obtain the input parameters required in this operation by calling other APIs.', example='3382463'),
  specialType?: string(name='SpecialType', description='The ID of the request.', example='APP'),
  trafficControlId?: string(name='TrafficControlId', description='The ID of the app or Alibaba Cloud account. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.343130a8sDi8cO#/secure) page.', example='tf123456'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId', description='Deletes a custom special throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DeleteTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficSpecialControlResponseBody(name='body'),
}

/**
  * The type of the special throttling policy. Valid values:
  * *   **APP**
  * *   **USER**
  *
  * @param request DeleteTrafficSpecialControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTrafficSpecialControlResponse
 */
async function deleteTrafficSpecialControlWithOptions(request: DeleteTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.specialKey)) {
    query['SpecialKey'] = request.specialKey;
  }
  if (!Util.isUnset(request.specialType)) {
    query['SpecialType'] = request.specialType;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficSpecialControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The type of the special throttling policy. Valid values:
  * *   **APP**
  * *   **USER**
  *
  * @param request DeleteTrafficSpecialControlRequest
  * @return DeleteTrafficSpecialControlResponse
 */
async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficSpecialControlWithOptions(request, runtime);
}

model DeployApiRequest {
  apiId?: string(name='ApiId', description='The publishing remarks.', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  description?: string(name='Description', description='*   This operation is intended for API providers. Only the API that you have defined and published to a runtime environment can be called.
*   An API is published to a cluster in less than 5 seconds.
*   The QPS limit on this operation is 50 per user.', example='for_test1'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE: the pre-release environment**
*   **TEST: the test environment**', example='63be9002440b4778a61122f14c2b2bbb'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The ID of the request.', example='RELEASE'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId', description='Publishes an API to a specified environment.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DeployApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployApiResponseBody(name='body'),
}

/**
  * The ID of the API.
  *
  * @param request DeployApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeployApiResponse
 */
async function deployApiWithOptions(request: DeployApiRequest, runtime: Util.RuntimeOptions): DeployApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API.
  *
  * @param request DeployApiRequest
  * @return DeployApiResponse
 */
async function deployApi(request: DeployApiRequest): DeployApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiWithOptions(request, runtime);
}

model DescribeAbolishApiTaskRequest {
  operationUid?: string(name='OperationUid', example='fc54****dd4c4***ad7edd7****39401'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAbolishApiTaskResponseBody = {
  apiAbolishResults?: {
    apiAbolishResult?: [ 
    {
      abolishStatus?: string(name='AbolishStatus', example='OVER'),
      apiName?: string(name='ApiName', example='v2_page_consent'),
      apiUid?: string(name='ApiUid', example='4e26cdbbb113416dba1f0285bed29979'),
      errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
      groupId?: string(name='GroupId', example='160cb6505e1c43a6b84346856d74eb47'),
      groupName?: string(name='GroupName', example='wb2022021401619286'),
      stageId?: string(name='StageId', example='0919f2854a88484c91dc9253347c78f9'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='ApiAbolishResult')
  }(name='ApiAbolishResults'),
  requestId?: string(name='RequestId', example='E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99'),
}

model DescribeAbolishApiTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAbolishApiTaskResponseBody(name='body'),
}

async function describeAbolishApiTaskWithOptions(request: DescribeAbolishApiTaskRequest, runtime: Util.RuntimeOptions): DescribeAbolishApiTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationUid)) {
    query['OperationUid'] = request.operationUid;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAbolishApiTask',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAbolishApiTask(request: DescribeAbolishApiTaskRequest): DescribeAbolishApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAbolishApiTaskWithOptions(request, runtime);
}

model DescribeAccessControlListAttributeRequest {
  aclId?: string(name='AclId', example='acl-3nsohdozz0ru8fi5onwz1'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAccessControlListAttributeResponseBody = {
  aclEntrys?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment', example='default'),
      aclEntryIp?: string(name='AclEntryIp', example='192.168.1.0/24'),
    }
  ](name='AclEntry')
  }(name='AclEntrys'),
  aclId?: string(name='AclId', example='acl-uf6fpfdg3b5muska7uqem'),
  aclName?: string(name='AclName', example='testAcl'),
  isUsed?: string(name='IsUsed', example='true'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeAccessControlListAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessControlListAttributeResponseBody(name='body'),
}

async function describeAccessControlListAttributeWithOptions(request: DescribeAccessControlListAttributeRequest, runtime: Util.RuntimeOptions): DescribeAccessControlListAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessControlListAttribute',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessControlListAttribute(request: DescribeAccessControlListAttributeRequest): DescribeAccessControlListAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessControlListAttributeWithOptions(request, runtime);
}

model DescribeAccessControlListsRequest {
  aclName?: string(name='AclName', example='testAcl'),
  addressIPVersion?: string(name='AddressIPVersion'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAccessControlListsResponseBody = {
  acls?: {
    acl?: [ 
    {
      aclId?: string(name='AclId', example='acl-3nsohdozz0ru8fi5onwz1'),
      aclName?: string(name='AclName', example='testAcl'),
      addressIPVersion?: string(name='AddressIPVersion'),
    }
  ](name='Acl')
  }(name='Acls'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', example='3'),
}

model DescribeAccessControlListsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessControlListsResponseBody(name='body'),
}

async function describeAccessControlListsWithOptions(request: DescribeAccessControlListsRequest, runtime: Util.RuntimeOptions): DescribeAccessControlListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.addressIPVersion)) {
    query['AddressIPVersion'] = request.addressIPVersion;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessControlLists',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessControlLists(request: DescribeAccessControlListsRequest): DescribeAccessControlListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessControlListsWithOptions(request, runtime);
}

model DescribeApiRequest {
  apiId?: string(name='ApiId', description='Description', example='8afff6c8c4c6447abb035812e4d66b65'),
  groupId?: string(name='GroupId', description='System parameters sent by API Gateway to the backend service', example='123'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='Description', example='8afff6c8c4c6447abb035812e4d66b65'),
  apiName?: string(name='ApiName', description='The minimum parameter value when **ParameterType** is set to Int, Long, Float, or Double.', example='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='The request mode. Valid values: MAPPING and PASSTHROUGH.', example='HEADER'),
  authType?: string(name='AuthType', description='The sample error codes returned by the backend service.', example='APP'),
  backendConfig?: {
    backendId?: string(name='BackendId', description='The function name defined in Function Compute.', example='0038e00c3dca44fcba3a94015d8f5bbf'),
    backendName?: string(name='BackendName', description='The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='testoss'),
    backendType?: string(name='BackendType', description='The deployment status. Valid values: DEPLOYED and NONDEPLOYED.', example='HTTP'),
  }(name='BackendConfig', description='The timeout period of the backend service. Unit: milliseconds.'),
  backendEnable?: boolean(name='BackendEnable', description='The corresponding frontend parameter name. It must be included in RequestParametersObject and matches ApiParameterName in RequestParameter data.', example='true'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The data type of the back-end service parameter.', example='constance'),
      description?: string(name='Description', description='The API request path.', example='constance'),
      location?: string(name='Location', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the parameter that corresponds to the token.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='The name of the backend service parameter.'),
  createdTime?: string(name='CreatedTime', description='The type of the Function Compute instance.', example='2016-07-28T09:50:43Z'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The ID of the region where the EventBridge instance is located.', example='192.168.1.1'),
      description?: string(name='Description', description='The effective version.', example='If **AuthType** is set to **APP**, this value must be passed to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256'),
      location?: string(name='Location', description='The ID of the request.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The default value.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='Client IP Address', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='The name of the HTTP header.'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      deployedStatus?: string(name='DeployedStatus', example='DEPLOYED'),
      effectiveVersion?: string(name='EffectiveVersion', example='xxx'),
      stageName?: string(name='StageName', description='382271', example='RELEASE'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos', description='DescribeApi'),
  description?: string(name='Description', description='Specifies whether to enable the VPC channel. Valid values:

*   **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
*   **FALSE**: The VPC channel is not enabled.', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', description='The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.', example='false'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The protocol used by the backend service. Valid values: HTTP and HTTPS.', example='400'),
      description?: string(name='Description', description='The description of the request body.', example='The ID of the API.'),
      message?: string(name='Message', description='Configuration items related to VPC channels', example='Missing the parameter UserId'),
      model?: string(name='Model', description='The status code returned for service mocking.', example='[\\"*\\"]'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The name of the VPC access authorization.'),
  failResultSample?: string(name='FailResultSample', description='The maximum parameter value when **ParameterType** is set to Int, Long, Float, or Double.', example='400'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='The ID of the result.', example='true'),
  groupId?: string(name='GroupId', description='The path used to call the back-end service. If the complete back-end service path is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, **ServicePath** is `/object/add`.', example='08ae4aa0f95e4321849ee57f4e0b3077'),
  groupName?: string(name='GroupName', description='The ID of the parent node.', example='ApiTest'),
  mock?: string(name='Mock', description='The ID of the API.', example='CLOSED'),
  mockResult?: string(name='MockResult', description='The ID of the API group.', example='test result'),
  modifiedTime?: string(name='ModifiedTime', description='Backend configuration items when the backend service is Function Compute', example='2016-07-28T13:13:12Z'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The type of the two-way communication API. Valid values:

*   **COMMON**: general APIs
*   **REGISTER**: registered APIs
*   **UNREGISTER**: unregistered APIs
*   **NOTIFY**: downstream notification

For more information, see [Two-way communication](~~66031~~).', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='Backend configurations', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The port number that corresponds to the instance.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='The description of the API.'),
  regionId?: string(name='RegionId', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='cn-qingdao'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='The JSON Schema used for JSON validation when **ParameterType** is set to String.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The minimum parameter length when **ParameterType** is set to String.'),
    postBodyDescription?: string(name='PostBodyDescription', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='POST'),
    requestMode?: string(name='RequestMode', description='The name of the API group.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='Examples', example='HTTP'),
  }(name='RequestConfig', description='Age'),
  requestId?: string(name='RequestId', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='D0FF585F-7966-40CF-BC60-75DB070B23D5<'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='Indicates whether a subnode exists.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The security authentication method of the API. Valid values:

*   **APP**: Only authorized applications can call the API.

*   **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
    *   We recommend that you do not make the API whose security authentication method is ANONYMOUS available in Alibaba Cloud Marketplace because API Gateway cannot meter calls on the caller or limit the number of calls on the API. If you want to make the API group to which the API belongs available in Alibaba Cloud Marketplace, we recommend that you move the API to another group, set its type to PRIVATE, or set its security authentication method to APP.

*   **APPOPENID**: The OpenID Connect account authentication method is used. Only applications authorized by OpenID Connect can call the API. If this method is selected, the OpenIdConnectConfig parameter is required.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The configuration items of API requests sent by API Gateway to the backend service.', example='20'),
      demoValue?: string(name='DemoValue', description='The OpenID Connect mode. Valid values:

*   **IDTOKEN**: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.
*   **BUSINESS**: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.', example='20'),
      description?: string(name='Description', description='The returned description of the API.', example='The simulated headers.'),
      docOrder?: int32(name='DocOrder', description='The event bus.', example='0'),
      docShow?: string(name='DocShow', description='The sample response from the backend service.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The name of the parameter.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='The regular expression used for parameter validation when **ParameterType** is set to String.', example='JSON'),
      location?: string(name='Location', description='The ID of the VPC.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='Backend service type', example='123456'),
      maxValue?: long(name='MaxValue', description='Specifies whether to enable backend services.', example='123456'),
      minLength?: long(name='MinLength', description='The name of the backend service parameter.', example='123456'),
      minValue?: long(name='MinValue', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='123456'),
      parameterType?: string(name='ParameterType', description='The region where the Function Compute instance is located.', example='String'),
      regularExpression?: string(name='RegularExpression', description='Configuration items of EventBridge', example='xxx'),
      required?: string(name='Required', description='The UserId parameter is missing from the request.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.'),
  resultBodyModel?: string(name='ResultBodyModel', description='The ID of the API group.', example='{}'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT**: the default header type in API Gateway
*   **CUSTOM**: a custom header type
*   **CLIENT**: the ContentType header type of the client', example='test'),
      hasChild?: boolean(name='HasChild', description='Client IP Address', example='true'),
      id?: string(name='Id', description='The result returned when the Mock mode is enabled.', example='id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory', description='The creation time of the API.', example='true'),
      name?: string(name='Name'),
      pid?: string(name='Pid', description='The OSS bucket.', example='pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions', description='The last modification time of the API.'),
  resultSample?: string(name='ResultSample', description='The ID of the ECS or SLB instance in the VPC.', example='200'),
  resultType?: string(name='ResultType', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='JSON'),
  serviceConfig?: {
    aoneAppName?: string(name='AoneAppName', description='auditing', example='ib-blank'),
    contentTypeCatagory?: string(name='ContentTypeCatagory', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='CUSTOM'),
    contentTypeValue?: string(name='ContentTypeValue', description='The API publishing status.', example='application/x-www-form-urlencoded; charset=UTF-8'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId', description='The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of **ServiceAddress** is `http://api.a.com:8080`.', example='cn-beijing'),
      eventBus?: string(name='EventBus', description='The region ID of the API.', example='testBus'),
      eventSource?: string(name='EventSource', description='The name of the corresponding backend parameter.', example='baas_driver'),
      roleArn?: string(name='RoleArn', description='The public key.', example='acs:ram::1933122015759***:role/adminoidcaliyun'),
    }(name='EventBridgeConfig', description='Indicates whether the request parameter is required.'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The name of the backend service.', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the parameter.', example='application/x-www-form-urlencoded; charset=UTF-8'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The result returned for service mocking.', example='https://1227****64334133.ap-southeast-1-int***al.fc.aliyuncs.com/201****-15/proxy/test****ice.LATEST/testHttp/'),
      fcType?: string(name='FcType', description='The parameters of API requests sent by API Gateway to the backend service.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='Specifies whether to carry the header : X-Ca-Nonce when calling an API. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent reply attacks. Valid values:

*   **true**: This field is forcibly checked when an API is requested to prevent replay attacks.
*   **false**: This field is not checked.', example='edge_function'),
      method?: string(name='Method', description='Specifies whether to enable the Mock mode. Valid values:

*   **TRUE**: The Mock mode is enabled.
*   **FALSE**: The Mock mode is not enabled.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='The type of the array element.', example='false'),
      path?: string(name='Path', description='The application name in AONE.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The maximum parameter length when **ParameterType** is set to String.', example='2'),
      regionId?: string(name='RegionId', description='The parameters of API requests sent by the consumer to API Gateway.', example='cn-qingdao'),
      roleArn?: string(name='RoleArn', description='The description.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The event source.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='Examples'),
    mock?: string(name='Mock', description='The returned description of the API.', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The ContentType header type used when you call the backend service over HTTP.

*   **DEFAULT**: the default header type in API Gateway
*   **CUSTOM**: a custom header type
*   **CLIENT**: the ContentType header type of the client', example='Content-Length'),
        headerValue?: string(name='HeaderValue', description='The order in the document.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The value of the ContentType header when the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.'),
    mockResult?: string(name='MockResult', description='The service name defined in Function Compute.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.', example='200'),
    ossConfig?: {
      action?: string(name='Action'),
      bucketName?: string(name='BucketName', description='Examples', example='cbg-db'),
      key?: string(name='Key'),
      ossRegionId?: string(name='OssRegionId', description='The ID of the backend service.', example='cn-hangzhou'),
    }(name='OssConfig', description='sex'),
    serviceAddress?: string(name='ServiceAddress', description='Specifies whether to enable the Mock mode. Valid values:

*   OPEN: The Mock mode is enabled.
*   CLOSED: The Mock mode is not enabled.', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='Error message', example='POST'),
    servicePath?: string(name='ServicePath', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The sample error response from the backend service.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='Information when the backend service is OSS', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='The configuration items of API requests sent by the consumer to API Gateway.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='This parameter takes effect only when the RequestMode parameter is set to MAPPING.********

The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='Model', example='glmall-app-test'),
      port?: int32(name='Port', description='Configuration items of the third-party OpenID Connect authentication method', example='8080'),
      vpcId?: string(name='VpcId', description='The value of the HTTP header.', example='vpc-2zeafsc3fygk1***'),
      vpcScheme?: string(name='VpcScheme', description='System parameters sent by API Gateway to the backend service', example='HTTP'),
    }(name='VpcConfig', description='The backend only receives the service path.'),
  }(name='ServiceConfig', description='The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The name of the runtime environment. Valid values: RELEASE and TEST.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The hash values that can be entered when **ParameterType** is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='Description', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The Arn that is authorized by a RAM user to EventBridge.'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The name of the backend service parameter.', example='The VPC protocol.'),
      serviceParameterName?: string(name='ServiceParameterName', description='The body model.', example='The alias of the function.'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='Error codes'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The root path of Function Compute.', example='192.168.1.1'),
      description?: string(name='Description', description='The name of the API, which is unique in the group.', example='Specifies whether to make the API public. Valid values:

*   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.'),
      location?: string(name='Location', description='sex', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The request method.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='If **AuthType** is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.'),
  visibility?: string(name='Visibility', description='Specifies whether to limit API calls to within the VPC. Valid values:

*   **true**: Only API calls from the VPC are supported.
*   **false**: API calls from the VPC and Internet are both supported.', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', description='The ID of the region where the OSS instance is located.', example='COMMON'),
}

model DescribeApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiResponseBody(name='body'),
}

/**
  * The ID of the public key.
  *
  * @param request DescribeApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiResponse
 */
async function describeApiWithOptions(request: DescribeApiRequest, runtime: Util.RuntimeOptions): DescribeApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the public key.
  *
  * @param request DescribeApiRequest
  * @return DescribeApiResponse
 */
async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DescribeApiDocRequest {
  apiId?: string(name='ApiId', example='3b81fd160f5645e097cc8855d75a1cf6'),
  groupId?: string(name='GroupId', example='123'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId', example='b24be7e59a104e52bffbf432cc9272af'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType', example='APP'),
  deployedTime?: string(name='DeployedTime', example='2022-07-13T16:00:33Z'),
  description?: string(name='Description'),
  disableInternet?: boolean(name='DisableInternet', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', example='Error'),
      description?: string(name='Description'),
      message?: string(name='Message', example='error message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', example='true'),
  groupId?: string(name='GroupId', example='f51d08c5b7c84342905544ebaec26d35'),
  groupName?: string(name='GroupName'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', example='STREAM'),
    postBodyDescription?: string(name='PostBodyDescription', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', example='POST'),
    requestMode?: string(name='RequestMode', example='MAPPING'),
    requestPath?: string(name='RequestPath', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', example='HTTP'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId', example='F253FB5F-9AE1-5DDA-99B5-46BE00A3719E'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', example='Length'),
      arrayItemsType?: string(name='ArrayItemsType', example='String'),
      defaultValue?: string(name='DefaultValue', example='20'),
      demoValue?: string(name='DemoValue', example='20'),
      description?: string(name='Description'),
      docOrder?: int32(name='DocOrder', example='0'),
      docShow?: string(name='DocShow', example='PUBLIC'),
      enumValue?: string(name='EnumValue', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='JSON scheme', example='{}'),
      location?: string(name='Location', example='HEAD'),
      maxLength?: long(name='MaxLength', example='123456'),
      maxValue?: long(name='MaxValue', example='200'),
      minLength?: long(name='MinLength', example='2'),
      minValue?: long(name='MinValue', example='123456'),
      parameterType?: string(name='ParameterType', example='String'),
      regularExpression?: string(name='RegularExpression', example='xxx'),
      required?: string(name='Required', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', example='Api description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory', example='true'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}'),
  resultType?: string(name='ResultType', example='JSON'),
  stageName?: string(name='StageName', example='RELEASE'),
  visibility?: string(name='Visibility', example='PUBLIC'),
}

model DescribeApiDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDocWithOptions(request: DescribeApiDocRequest, runtime: Util.RuntimeOptions): DescribeApiDocResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiDoc',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocWithOptions(request, runtime);
}

model DescribeApiGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='appname'),
      value?: string(name='Value', description='The value of the tag.', example='test_app'),
    }
  ](name='Tag', description='The object tags that match the lifecycle rule. You can specify multiple tags.', example='Key， Value'),
}

model DescribeApiGroupResponseBody = {
  basePath?: string(name='BasePath', description='The root path of the API.', example='/qqq'),
  billingStatus?: string(name='BillingStatus', description='The billing status of the API group.

*   **NORMAL**: The API group is normal.
*   **LOCKED**: The API group is locked due to overdue payments.', example='NORMAL'),
  classicVpcSubDomain?: string(name='ClassicVpcSubDomain', description='The VPC second-level domain name.'),
  cloudMarketCommodity?: boolean(name='CloudMarketCommodity', description='The products on Alibaba Cloud Marketplace.', example='false'),
  cmsMonitorGroup?: string(name='CmsMonitorGroup', description='The CloudMonitor application group.', example='217008423'),
  compatibleFlags?: string(name='CompatibleFlags', description='The list of associated tags. Separate multiple tags with commas (,).', example='depart:dep1'),
  createdTime?: string(name='CreatedTime', description='The creation time (UTC) of the API group.', example='2016-08-01T06:53:02Z'),
  customDomains?: {
    domainItem?: [ 
    {
      bindStageName?: string(name='BindStageName', description='The name of the bound runtime environment.', example='TEST'),
      certificateId?: string(name='CertificateId', description='The unique ID of the SSL certificate, which is automatically generated by the system.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
      certificateName?: string(name='CertificateName', description='The name of the SSL certificate.', example='myCertificate'),
      certificateValidEnd?: long(name='CertificateValidEnd'),
      certificateValidStart?: long(name='CertificateValidStart'),
      customDomainType?: string(name='CustomDomainType', description='The type of the custom domain name.', example='intranet'),
      domainBindingStatus?: string(name='DomainBindingStatus', description='The binding status of the custom domain name. Valid values:

*   **BINDING**: The domain name is bound.
*   **BOUND**: The domain name is not bound.', example='BINDING'),
      domainCNAMEStatus?: string(name='DomainCNAMEStatus', description='The domain name resolution status. Valid values:

*   **RESOLVED**: The domain name has been resolved.
*   **UNRESOLVED**: The domain name has not been resolved.', example='RESOLVED'),
      domainLegalStatus?: string(name='DomainLegalStatus', description='The validity status of the domain name. Valid values:

*   **NORMAL**: The domain name is valid.
*   **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.', example='ABNORMAL'),
      domainName?: string(name='DomainName', description='The domain name.', example='api.demo.com'),
      domainRemark?: string(name='DomainRemark', description='The domain name-related remarks, such as the cause for a domain name exception.', example='Indicates that the domain name does not have an ICP filing.'),
      domainWebSocketStatus?: string(name='DomainWebSocketStatus', description='The status of the domain name that uses the WebSocket feature.', example='CLOSE'),
      isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps', description='Indicates whether to redirect HTTP requests to HTTPS.', example='false'),
      wildcardDomainPatterns?: string(name='WildcardDomainPatterns', description='The wildcard domain name mode.', example='[\\"{test}.test.com\\"]'),
      wssEnable?: string(name='WssEnable'),
    }
  ](name='DomainItem')
  }(name='CustomDomains', description='The custom domain name information.'),
  customTraceConfig?: string(name='CustomTraceConfig', description='The custom trace configuration.', example='{\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}'),
  customerConfigs?: string(name='CustomerConfigs', description='The list of custom configuration items.', example='removeResponseServerHeader'),
  dedicatedInstanceType?: string(name='DedicatedInstanceType'),
  defaultDomain?: string(name='DefaultDomain', description='The default domain name.', example='mkt.api.gaore.com'),
  description?: string(name='Description', description='The description of the API group.', example='New weather informations.'),
  groupId?: string(name='GroupId', description='The ID of the API group. This ID is generated by the system and globally unique.', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  groupName?: string(name='GroupName', description='The name of the group to which the API belongs.', example='NewWeather'),
  httpsPolicy?: string(name='HttpsPolicy', description='The HTTPS policy.', example='HTTPS2_TLS1_0'),
  illegalStatus?: string(name='IllegalStatus', description='The validity status of the API group. Valid values:

*   **NORMAL**: The API group is normal.
*   **LOCKED**: The API group is locked because it is not valid.', example='NORMAL'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v6419k43xxxxx'),
  instanceType?: string(name='InstanceType', description='The type of the instance.

*   CLASSIC_SHARED: shared instance that uses the classic network configuration
*   VPC_SHARED: shared instance that uses VPC
*   VPC_DEDICATED: dedicated instance that uses VPC', example='VPC_SHARED'),
  instanceVipList?: string(name='InstanceVipList', description='The VIP list of the instance.'),
  ipv6Status?: string(name='Ipv6Status', description='The IPv6 status.', example='UNBIND'),
  migrationError?: string(name='MigrationError'),
  migrationStatus?: string(name='MigrationStatus'),
  modifiedTime?: string(name='ModifiedTime', description='The last modification time (UTC) of the API group.', example='2016-08-01T06:54:32Z'),
  passthroughHeaders?: string(name='PassthroughHeaders', description='Specifies whether to pass headers.', example='eagleeye-rpcid,x-b3-traceid'),
  regionId?: string(name='RegionId', description='The region to which the API group belongs.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03442A3D-3B7D-434C-8A95-A5FEB989B519'),
  rpcPattern?: string(name='RpcPattern', description='The RPC mode.'),
  stageItems?: {
    stageInfo?: [ 
    {
      description?: string(name='Description', description='The description of the runtime environment.', example='MYTEST'),
      stageId?: string(name='StageId', description='The ID of the runtime environment.', example='123e8dc7bbe01613b5b1d726c2a7888e'),
      stageName?: string(name='StageName', description='The name of the runtime environment.', example='TEST'),
    }
  ](name='StageInfo')
  }(name='StageItems', description='The runtime environment information.'),
  status?: string(name='Status', description='The status of the API group.

*   **NORMAL**: The API group is normal.
*   **DELETE**: The API group is deleted.', example='NORMAL'),
  subDomain?: string(name='SubDomain', description='The second-level domain name automatically assigned to the API group.', example='27d50c0f2e54b359919923d908bb015-cn-hangzhou.alicloudapi.com'),
  trafficLimit?: int32(name='TrafficLimit', description='The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.', example='500'),
  userLogConfig?: string(name='UserLogConfig', description='The user log settings.', example='{\\"requestBody\\":true,\\"responseBody\\":true,\\"queryString\\":\\"test\\",\\"requestHeaders\\":\\"test\\",\\"responseHeaders\\":\\"test\\",\\"jwtClaims\\":\\"test\\"}'),
  vpcDomain?: string(name='VpcDomain', description='The VPC domain name.', example='e4****7151954***acbd9f7****1058a-ap-southeast-1-vpc.alicloudapi.com'),
  vpcSlbIntranetDomain?: string(name='VpcSlbIntranetDomain', description='The VPC SLB domain name.'),
}

model DescribeApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  *
  * @param request DescribeApiGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiGroupResponse
 */
async function describeApiGroupWithOptions(request: DescribeApiGroupRequest, runtime: Util.RuntimeOptions): DescribeApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API providers.
  *
  * @param request DescribeApiGroupRequest
  * @return DescribeApiGroupResponse
 */
async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupWithOptions(request, runtime);
}

model DescribeApiGroupVpcWhitelistRequest {
  groupId?: string(name='GroupId', example='f6c64214dc27400196eef954575d60d3'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
  vpcIds?: string(name='VpcIds', example='vpc-bp11w979o2s9rcr962w25'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupVpcWhitelistResponseBody(name='body'),
}

async function describeApiGroupVpcWhitelistWithOptions(request: DescribeApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): DescribeApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiGroupVpcWhitelist',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupVpcWhitelistWithOptions(request, runtime);
}

model DescribeApiGroupsRequest {
  enableTagAuth?: boolean(name='EnableTagAuth', example='true'),
  groupId?: string(name='GroupId', example='be6d2abcc0dd4f749fc2d2edd6567164'),
  groupName?: string(name='GroupName', example='Traffic'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43245xx'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  sort?: string(name='Sort', example='desc'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      basePath?: string(name='BasePath', example='/v2/'),
      billingStatus?: string(name='BillingStatus', example='NORMAL'),
      createdTime?: string(name='CreatedTime', example='2016-08-01T08:45:15Z'),
      description?: string(name='Description', example='TrafficInformations.'),
      groupId?: string(name='GroupId', example='be6d2abcc0dd4f749fc2d2edd6567164'),
      groupName?: string(name='GroupName', example='Traffic'),
      httpsPolicy?: string(name='HttpsPolicy', example='HTTPS2_TLS1_0'),
      illegalStatus?: string(name='IllegalStatus', example='NORMAL'),
      instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43245xx'),
      instanceType?: string(name='InstanceType', example='VPC_SHARED'),
      modifiedTime?: string(name='ModifiedTime', example='2016-08-01T08:45:15Z'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      subDomain?: string(name='SubDomain', example='be6d2abcc0dd4f749fc2d2edd6567164-cn-hangzhou.alicloudapi.com'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', example='key'),
          value?: string(name='Value', example='value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
      trafficLimit?: int32(name='TrafficLimit', example='500'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: Util.RuntimeOptions): DescribeApiGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableTagAuth)) {
    query['EnableTagAuth'] = request.enableTagAuth;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiGroups',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApiHistoriesRequest {
  apiId?: string(name='ApiId', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='c076144d7878437b8f82fb85890ce6a0'),
  apiName?: string(name='ApiName', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='weather'),
  groupId?: string(name='GroupId', description='The ID of the API.', example='1084f9034c744137901057206b39d2b6'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The name of the API. The name is used for fuzzy match.', example='RELEASE'),
}

model DescribeApiHistoriesResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId', description='Creates an object', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiName?: string(name='ApiName', description='The region where the API is located.', example='*   This operation is intended for API providers. Only APIs which have been published have a historical version record.
*   This operation allows you to obtain the API historical versions which can be used to call other APIs.'),
      deployedTime?: string(name='DeployedTime', description='The historical version of the API.', example='2016-07-20T08:28:48Z'),
      description?: string(name='Description', description='The name of the group to which an API belongs.', example='The ID of the API group.'),
      groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST.', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', description='The publishing time (UTC) of the API.', example='myGroup2'),
      historyVersion?: string(name='HistoryVersion', description='CreateObject', example='20160705104552393'),
      regionId?: string(name='RegionId', description='Queries the historical versions of a specified API.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The name of the API.', example='RELEASE'),
      status?: string(name='Status', description='The description of the API.', example='ONLINE'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems', description='The ID of the API.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='3'),
  pageSize?: int32(name='PageSize', description='The returned API information. It is an array consisting of ApiHisItem data.', example='15'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ003'),
  totalCount?: int32(name='TotalCount', description='Indicates whether an API version is effective. Valid values: ONLINE and OFFLINE.', example='32'),
}

model DescribeApiHistoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiHistoriesResponseBody(name='body'),
}

/**
  * The name of the runtime environment. Valid values:
  * *   **RELEASE**
  * *   **TEST: the test environment**
  *
  * @param request DescribeApiHistoriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiHistoriesResponse
 */
async function describeApiHistoriesWithOptions(request: DescribeApiHistoriesRequest, runtime: Util.RuntimeOptions): DescribeApiHistoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiHistories',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the runtime environment. Valid values:
  * *   **RELEASE**
  * *   **TEST: the test environment**
  *
  * @param request DescribeApiHistoriesRequest
  * @return DescribeApiHistoriesResponse
 */
async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoriesWithOptions(request, runtime);
}

model DescribeApiHistoryRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='dc6e17ee3120404c839bbcd7622ab6ed'),
  groupId?: string(name='GroupId', description='The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.', example='3013a55c0c44483f984d26df27120513'),
  historyVersion?: string(name='HistoryVersion', description='The historical version number of the API.', example='20211122155403834'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**: production environment
*   **TEST**: test environment
*   **PRE**: staging environment', example='RELEASE'),
}

model DescribeApiHistoryResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The signature algorithm that is used if the **AuthType** parameter is set to **APP**. If no value is specified for the AllowSignatureMethod parameter, the default value HmacSHA256 is used. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='bebf996e4b3d445d83078094b72b0d91'),
  apiName?: string(name='ApiName', description='The name of the API.', example='Test API'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='The type of AppCode authentication. Default value: DEFAULT. Valid values:

*   DEFAULT: AppCode authentication is supported after the API is published in Alibaba Cloud Marketplace.
*   DISABLE: AppCode authentication is not supported.
*   HEADER: AppCode authentication is supported only in Header parameters.
*   HEADER_QUERY: AppCode authentication is supported in Header or Query parameters.', example='HEADER'),
  authType?: string(name='AuthType', description='The type of the security authentication that is used for the API. Valid values:

*   **APP**: The API can be called only by authorized applications.

*   **ANONYMOUS**: The API can be anonymously called. Take note of the following information:

    *   All users who have obtained the API service information can call this API. API Gateway neither authenticates callers nor sets user-specific throttling policies. If this API is a public one, you must set throttling policies for it.', example='APP'),
  backendConfig?: {
    backendId?: string(name='BackendId', description='The ID of the backend service.', example='a0305308908c4740aba9cbfd63ba99b7'),
    backendName?: string(name='BackendName', description='The name of the backend service.', example='zmapi'),
    backendType?: string(name='BackendType', description='The type of the backend service.', example='HTTP'),
  }(name='BackendConfig', description='The configuration items of the backend service.'),
  backendEnable?: boolean(name='BackendEnable', description='Indicates whether the backend service is enabled.', example='true'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The value of the constant parameter.', example='constance'),
      description?: string(name='Description', description='The description of the parameter.', example='for_test1'),
      location?: string(name='Location', description='The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend parameter that corresponds to the constant parameter.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='The constant parameters.'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The sample value of the parameter.', example='192.168.1.1'),
      description?: string(name='Description', description='The description of the parameter.', example='balabala'),
      location?: string(name='Location', description='The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend parameter that corresponds to the custom system parameter.', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='The custom system parameters.'),
  deployedTime?: string(name='DeployedTime', description='The time when the API was published. The time is displayed in UTC.', example='2021-06-1113:57:38'),
  description?: string(name='Description', description='The description of the API.', example='Query the weather based on the region name'),
  disableInternet?: boolean(name='DisableInternet', description='*   If the **DisableInternet** parameter is set to **true**, you call the API only over internal networks.
*   If the **DisableInternet** parameter is set to **false**, no limit is imposed on networks. When you create an API, the default value of this parameter is false.', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The error code.', example='400'),
      description?: string(name='Description', description='The description.', example='Missing the parameter UserId'),
      message?: string(name='Message', description='The error message.', example='MissingParameter'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes that are returned from the backend service.

For more information, see [ErrorCodeSample](~~44392~~).'),
  failResultSample?: string(name='FailResultSample', description='The sample error response that is returned from the backend service.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Indicates whether to forcefully check X-Ca-Nonce. X-Ca-Nonce is the unique identifier of a request and is generally identified by UUID. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcefully checked. After API Gateway receives this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps defend against replay attacks.
*   If the **ForceNonceCheck** parameter is set to **false**, X-Ca-Nonce is not checked. When you create an API, the default value of this parameter is false.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='cfb6ef799bf54fffabb0f02019ad2581'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='dev_api'),
  historyVersion?: string(name='HistoryVersion', description='The historical version number of the API.', example='20211022134156663'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The name of the parameter that corresponds to the token.', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='*   ****
*   ****', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The public key of the API.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='The configuration items of third-party OpenID Connect authentication.'),
  regionId?: string(name='RegionId', description='The ID of the region where the API is deployed.', example='cn-hangzhou'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='The format in which data was transmitted to the server for a POST or PUT request. Valid values: FORM and STREAM. FORM indicates that data was transmitted as forms that consist of key-value pairs. STREAM indicates that data was transmitted as byte streams. This parameter takes effect when the RequestMode parameter is set to MAPPING.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The body model.'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP request method. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode of the parameters. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The request path of the API.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The type of the protocol that is supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,). Example: "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='The configuration items of API requests that are sent from the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The name of the parameter in the API request.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='20'),
      demoValue?: string(name='DemoValue', description='The sample value of the parameter.', example='20'),
      description?: string(name='Description', description='The description of the parameter.', example='modidyTest'),
      docOrder?: int32(name='DocOrder', description='The order in which the parameter is sorted in the document.', example='0'),
      docShow?: string(name='DocShow', description='Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values can be specified if the **ParameterType** parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='The JSON scheme.', example='{}'),
      location?: string(name='Location', description='The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum length of the parameter value if the **ParameterType** parameter is set to String.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.', example='123456'),
      minLength?: long(name='MinLength', description='The minimum length of the parameter value if the **ParameterType** parameter is set to String.', example='123456'),
      minValue?: long(name='MinValue', description='The minimum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.', example='123456'),
      parameterType?: string(name='ParameterType', description='The data type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression that is used to validate the parameter if the **ParameterType** parameter is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameters of API requests that are sent from the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).'),
  resultBodyModel?: string(name='ResultBodyModel', description='The response of the API.', example='{}'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', description='The description.', example='for_test1'),
      hasChild?: boolean(name='HasChild', description='Indicates whether a subnode exists.', example='true'),
      id?: string(name='Id', description='The ID of the result.', example='id'),
      key?: string(name='Key', description='The primary key of the result.', example='groupName'),
      mandatory?: boolean(name='Mandatory', description='Indicates whether the parameter is required.', example='true'),
      name?: string(name='Name', description='The name of the result.', example='fwqf'),
      pid?: string(name='Pid', description='The ID of the parent node.', example='pid'),
      type?: string(name='Type', description='The type of the result.', example='String'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions', description='The descriptions that are returned for the API.'),
  resultSample?: string(name='ResultSample', description='The sample response.', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}'),
  resultType?: string(name='ResultType', description='The type of data that is returned.', example='JSON'),
  serviceConfig?: {
    contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header that is used if the ServiceProtocol parameter is set to HTTP. Valid values:

*   DEFAULT: the default header in API Gateway
*   CUSTOM: a custom header
*   CLIENT: the ContentType header of the client', example='CUSTOM'),
    contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header if the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/json'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId', description='The ID of the region where EventBridge is deployed.', example='cn-beijing'),
      eventBus?: string(name='EventBus', description='The event bus.', example='testBus'),
      eventSource?: string(name='EventSource', description='The event source.', example='baas_driver'),
      roleArn?: string(name='RoleArn', description='The ARN of the RAM role that is assigned to EventBridge.', example='acs:ram::1933122015759***:role/adminoidcaliyun'),
    }(name='EventBridgeConfig', description='The configuration items of EventBridge.'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header that is used if the ServiceProtocol parameter is set to HTTP. Valid values:

*   **DEFAULT**: the default header in API Gateway
*   **CUSTOM**: a custom header
*   **CLIENT**: the ContentType header of the client', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header if the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/json'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The root path of the service in Function Compute.', example='https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/'),
      fcType?: string(name='FcType', description='The type of the service in Function Compute.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='The function name that is defined in Function Compute.', example='domain_business_control'),
      method?: string(name='Method', description='The request method.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='Indicates whether the backend receives only the service path.', example='false'),
      path?: string(name='Path', description='The path of the API request.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The alias of the function.', example='2'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role that is assumed by API Gateway to access Function Compute.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The service name that is defined in Function Compute.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='The configuration items of the backend service whose type is Function Compute.'),
    mock?: string(name='Mock', description='Indicates whether the mock mode is enabled. Valid values:

*   TRUE
*   FALSE', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The name of the HTTP header', example='Content-Type'),
        headerValue?: string(name='HeaderValue', description='The value of the HTTP header.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The mock headers.'),
    mockResult?: string(name='MockResult', description='The result that is returned if the Mock parameter is set to TRUE.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='The status code that is returned for service mocking.', example='200'),
    ossConfig?: {
      action?: string(name='Action'),
      bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='phototest02'),
      key?: string(name='Key'),
      ossRegionId?: string(name='OssRegionId', description='The ID of the region where OSS is deployed.', example='cn-hangzhou'),
    }(name='OssConfig', description='The configuration items of the backend service whose type is Object Storage Service (OSS).'),
    serviceAddress?: string(name='ServiceAddress', description='The URL that is used to call the backend service.', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='The HTTP request method that is used if the ServiceProtocol parameter is set to HTTP. Valid values: PUT, GET, POST, DELETE, PATCH, HEAD, OPTIONS, and ANY.', example='POST'),
    servicePath?: string(name='ServicePath', description='The path that is used when the backend service is called.', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the backend service. Only HTTP, HTTPS, and Function Compute are supported.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service. Unit: milliseconds.', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='Indicates whether the VPC channel is enabled. Valid values:

*   TRUE
*   FALSE

Before you can enable the VPC channel, make sure that a VPC authorization is added.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='The name of the VPC.', example='glmall-app-test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='8080'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeafsc3fygk1***'),
      vpcScheme?: string(name='VpcScheme', description='The protocol of the VPC.', example='HTTP'),
    }(name='VpcConfig', description='The configuration items of the VPC channel.'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-uf6kg9x8sx2tbxxxx'),
  }(name='ServiceConfig', description='The information about backend service calls.'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The data type of the parameter. Valid values: STRING, NUMBER, and BOOLEAN.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend parameter.', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The parameters of API requests that are sent from API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The name of the frontend parameter. The name must be included in RequestParametersObject and match ApiParameterName in RequestParameters.', example='sex'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend parameter.', example='sex'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='The mappings between the parameters of requests sent from the consumer to API Gateway and the parameters of requests sent from API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).'),
  stageName?: string(name='StageName', description='The environment to which the API is published. Valid values:

*   **RELEASE**: production environment
*   **PRE**: staging environment
*   **TEST**: test environment', example='RELEASE'),
  status?: string(name='Status', example='200'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The sample value of the parameter.', example='192.168.1.1'),
      description?: string(name='Description', description='The description of the parameter.', example='system parameters description'),
      location?: string(name='Location', description='The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend parameter that corresponds to the system parameter.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='The system parameters of the API in the JSON format.'),
  visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
*   **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', description='The type of the API that is used in bidirectional communication. Valid values:

*   **COMMON**: common API
*   **REGISTER**: registered API
*   **UNREGISTER**: unregistered API
*   **NOTIFY**: downstream notification API', example='COMMON'),
}

model DescribeApiHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiHistoryResponseBody(name='body'),
}

/**
  * You can call this operation to query the definition of a specified published version of an API.
  * *   This operation is intended for API providers.
  * *   Each time an API is published, API Gateway records the publishing details, such as the time and the API definition. You can use the version number obtained from other API operations to query the details of an API definition that is published on a specific occasion.
  *
  * @param request DescribeApiHistoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiHistoryResponse
 */
async function describeApiHistoryWithOptions(request: DescribeApiHistoryRequest, runtime: Util.RuntimeOptions): DescribeApiHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiHistory',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the definition of a specified published version of an API.
  * *   This operation is intended for API providers.
  * *   Each time an API is published, API Gateway records the publishing details, such as the time and the API definition. You can use the version number obtained from other API operations to query the details of an API definition that is published on a specific occasion.
  *
  * @param request DescribeApiHistoryRequest
  * @return DescribeApiHistoryResponse
 */
async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoryWithOptions(request, runtime);
}

model DescribeApiIpControlsRequest {
  apiIds?: string(name='ApiIds', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='123,234'),
  groupId?: string(name='GroupId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='0009db9c828549768a200320714b8930'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The IDs of APIs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='test'),
}

model DescribeApiIpControlsResponseBody = {
  apiIpControls?: {
    apiIpControlItem?: [ 
    {
      apiId?: string(name='ApiId', description='The name of the ACL.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='Queries the access control lists (ACLs) that are bound to all the APIs in an API group in a specified environment.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the ACL.', example='2016-07-23T08:28:48Z'),
      ipControlId?: string(name='IpControlId', description='The name of the API.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      ipControlName?: string(name='IpControlName', description='*   This operation is intended for API callers.
*   If an optional parameter is not specified, all results are returned on separate pages.

·', example='testControlName'),
    }
  ](name='ApiIpControlItem')
  }(name='ApiIpControls', description='The ID of the API.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The information about the ACLs. The information is an array of ApiIpControlItem data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The time of binding.', example='1'),
}

model DescribeApiIpControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiIpControlsResponseBody(name='body'),
}

/**
  * The ID of the API group.
  *
  * @param request DescribeApiIpControlsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiIpControlsResponse
 */
async function describeApiIpControlsWithOptions(request: DescribeApiIpControlsRequest, runtime: Util.RuntimeOptions): DescribeApiIpControlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiIpControls',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group.
  *
  * @param request DescribeApiIpControlsRequest
  * @return DescribeApiIpControlsResponse
 */
async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiIpControlsWithOptions(request, runtime);
}

model DescribeApiLatencyDataRequest {
  apiId?: string(name='ApiId', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  endTime?: string(name='EndTime', example='2016-07-23T09:28:48Z'),
  groupId?: string(name='GroupId', example='63be9002440b4778a61122f14c2b2bbb'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
  startTime?: string(name='StartTime', example='2016-07-23T08:28:48Z'),
}

model DescribeApiLatencyDataResponseBody = {
  callLatencys?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', example='15'),
    }
  ](name='MonitorItem')
  }(name='CallLatencys'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiLatencyDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiLatencyDataResponseBody(name='body'),
}

async function describeApiLatencyDataWithOptions(request: DescribeApiLatencyDataRequest, runtime: Util.RuntimeOptions): DescribeApiLatencyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiLatencyData',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiLatencyDataWithOptions(request, runtime);
}

model DescribeApiMarketAttributesRequest {
  apiId?: string(name='ApiId', example='1f9b5e9ba80943099cac52e040b7e160'),
  groupId?: string(name='GroupId', example='b693252f3f19445e9a01dac177c4454c'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApiMarketAttributesResponseBody = {
  apiId?: string(name='ApiId', example='6318cd8f6a304cac9318dea8d9a78f7a'),
  marketChargingMode?: string(name='MarketChargingMode', example='PREPAID_BY_USAGE'),
  needCharging?: string(name='NeedCharging', example='true'),
  requestId?: string(name='RequestId', example='545D4E52-4F77-5EC4-BB7E-7344CEC7B5E6'),
}

model DescribeApiMarketAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiMarketAttributesResponseBody(name='body'),
}

async function describeApiMarketAttributesWithOptions(request: DescribeApiMarketAttributesRequest, runtime: Util.RuntimeOptions): DescribeApiMarketAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiMarketAttributes',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiMarketAttributesWithOptions(request, runtime);
}

model DescribeApiQpsDataRequest {
  apiId?: string(name='ApiId', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  endTime?: string(name='EndTime', example='2016-07-23T09:28:48Z'),
  groupId?: string(name='GroupId', example='63be9002440b4778a61122f14c2b2bbb'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
  startTime?: string(name='StartTime', example='2016-07-23T08:28:48Z'),
}

model DescribeApiQpsDataResponseBody = {
  callFails?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', example='0'),
    }
  ](name='MonitorItem')
  }(name='CallFails'),
  callSuccesses?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', example='2016-07-28T08:24:00Z'),
      itemValue?: string(name='ItemValue', example='650'),
    }
  ](name='MonitorItem')
  }(name='CallSuccesses'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiQpsDataResponseBody(name='body'),
}

async function describeApiQpsDataWithOptions(request: DescribeApiQpsDataRequest, runtime: Util.RuntimeOptions): DescribeApiQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiQpsData',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiQpsDataWithOptions(request, runtime);
}

model DescribeApiSignaturesRequest {
  apiIds?: string(name='ApiIds', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='123'),
  groupId?: string(name='GroupId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='0009db9c828549768a200320714b8930'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The IDs of the APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='TEST'),
}

model DescribeApiSignaturesResponseBody = {
  apiSignatures?: {
    apiSignatureItem?: [ 
    {
      apiId?: string(name='ApiId', description='The name of the backend signature key.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='Queries the backend signature keys that are bound to the APIs of a specified API group in a specified environment.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the backend signature key.', example='2016-07-23T08:28:48Z'),
      signatureId?: string(name='SignatureId', description='The name of the API.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureName?: string(name='SignatureName', description='*   This API is intended for API providers.
*   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.', example='backendsignature'),
    }
  ](name='ApiSignatureItem')
  }(name='ApiSignatures', description='The ID of the API.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned signature key information. It is an array consisting of ApiSignatureItem data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The time when the backend signature key was bound.', example='20'),
}

model DescribeApiSignaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiSignaturesResponseBody(name='body'),
}

/**
  * The runtime environment. Valid values:
  * *   **RELEASE**
  * *   **TEST**
  *
  * @param request DescribeApiSignaturesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiSignaturesResponse
 */
async function describeApiSignaturesWithOptions(request: DescribeApiSignaturesRequest, runtime: Util.RuntimeOptions): DescribeApiSignaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiSignatures',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The runtime environment. Valid values:
  * *   **RELEASE**
  * *   **TEST**
  *
  * @param request DescribeApiSignaturesRequest
  * @return DescribeApiSignaturesResponse
 */
async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiSignaturesWithOptions(request, runtime);
}

model DescribeApiTrafficControlsRequest {
  apiIds?: string(name='ApiIds', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='123,234'),
  groupId?: string(name='GroupId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='0009db9c828549768a200320714b8930'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='20'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='RELEASE'),
}

model DescribeApiTrafficControlsResponseBody = {
  apiTrafficControls?: {
    apiTrafficControlItem?: [ 
    {
      apiId?: string(name='ApiId', description='The name of the throttling policy.', example='46fbb52840d146f186e38e8e70fc8c90'),
      apiName?: string(name='ApiName', description='Queries the throttling policies bound to all members of an API group in a specified environment.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the throttling policy.', example='2016-07-23T08:28:48Z'),
      trafficControlId?: string(name='TrafficControlId', description='API operation', example='dd05f1c54d6749eda95f9fa6d491449a'),
      trafficControlName?: string(name='TrafficControlName', description='*   This API is intended for API providers.
*   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.', example='backendsignature'),
    }
  ](name='ApiTrafficControlItem')
  }(name='ApiTrafficControls', description='The ID of the API.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned throttling policy information. It is an array consisting of ApiTrafficControlItem data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The binding time of the throttling policy.', example='20'),
}

model DescribeApiTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiTrafficControlsResponseBody(name='body'),
}

/**
  * The runtime environment of the API. Valid values:
  * *   **RELEASE**
  * *   **TEST**: the test environment
  *
  * @param request DescribeApiTrafficControlsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApiTrafficControlsResponse
 */
async function describeApiTrafficControlsWithOptions(request: DescribeApiTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficControlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiTrafficControls',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The runtime environment of the API. Valid values:
  * *   **RELEASE**
  * *   **TEST**: the test environment
  *
  * @param request DescribeApiTrafficControlsRequest
  * @return DescribeApiTrafficControlsResponse
 */
async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficControlsWithOptions(request, runtime);
}

model DescribeApiTrafficDataRequest {
  apiId?: string(name='ApiId', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  endTime?: string(name='EndTime', example='2016-07-23T09:28:48Z'),
  groupId?: string(name='GroupId', example='63be9002440b4778a61122f14c2b2bbb'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
  startTime?: string(name='StartTime', example='2016-07-23T08:28:48Z'),
}

model DescribeApiTrafficDataResponseBody = {
  callDownloads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', example='0'),
    }
  ](name='MonitorItem')
  }(name='CallDownloads'),
  callUploads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', example='2016-07-28T08:20:00Z'),
      itemValue?: string(name='ItemValue', example='670'),
    }
  ](name='MonitorItem')
  }(name='CallUploads'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeApiTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiTrafficDataResponseBody(name='body'),
}

async function describeApiTrafficDataWithOptions(request: DescribeApiTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiTrafficData',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficDataWithOptions(request, runtime);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId', description='The API ID.', example='f68c19ee3bd1478fb58aa05ce8ae9b5a'),
  apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='GET'),
  apiName?: string(name='ApiName', description='The API name. The name is used for fuzzy match.', example='weather'),
  apiPath?: string(name='ApiPath', description='The request path of the API.', example='/illegal/query'),
  catalogId?: string(name='CatalogId', description='The category ID.', example='1553414085247362'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='Specifies whether to enable tag verification.', example='true'),
  groupId?: string(name='GroupId', description='The API group ID.', example='c4a4d2de657548a2bd485d5d4df42b4a'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tag', description='The tags of objects that match the rule.', example='Key， Value'),
  unDeployed?: boolean(name='UnDeployed', description='Specifies whether to filter unpublished APIs.', example='true'),
  visibility?: string(name='Visibility', description='Specifies whether the API is public. Valid values:

*   **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
*   **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.', example='PUBLIC'),
}

model DescribeApisResponseBody = {
  apiSummarys?: {
    apiSummary?: [ 
    {
      apiId?: string(name='ApiId', description='The API ID.', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiMethod?: string(name='ApiMethod', description='The HTTP method of the API request.', example='GET'),
      apiName?: string(name='ApiName', description='The API name.', example='CreateObject'),
      apiPath?: string(name='ApiPath', description='The request path of the API.', example='/sqb/'),
      createdTime?: string(name='CreatedTime', description='The time when the API was created. The time is displayed in UTC.', example='2016-05-20T18:18:25Z'),
      deployedInfos?: {
        deployedInfo?: [ 
        {
          deployedStatus?: string(name='DeployedStatus', description='The deployment status. Valid values: DEPLOYED and NONDEPLOYED.', example='DEPLOYED'),
          effectiveVersion?: string(name='EffectiveVersion', description='The deployed version.', example='20220103170737313'),
          stageName?: string(name='StageName', description='Stage Name:

*   **RELEASE**: production environment
*   **PRE**: staging environment
*   **TEST**: test environment', example='RELEASE'),
        }
      ](name='DeployedInfo')
      }(name='DeployedInfos', description='The API publishing statuses.'),
      description?: string(name='Description', description='The API description.', example='Creates an object'),
      groupId?: string(name='GroupId', description='The API group ID.', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='myGroup2'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the API was modified. The time is displayed in UTC.', example='2016-07-23T08:28:48Z'),
      regionId?: string(name='RegionId', description='The ID of the region to which the API belongs.', example='cn-qingdao'),
      tagList?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='tagKey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='tagValue'),
        }
      ](name='Tag')
      }(name='TagList', description='The tags that are added to the APIs.'),
      visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**: The API is public.
*   **PRIVATE**: The API is private.', example='PUBLIC'),
    }
  ](name='ApiSummary')
  }(name='ApiSummarys', description='The queried API definitions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='3'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ002'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='32'),
}

model DescribeApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
  * *   This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
  *
  * @param request DescribeApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApisResponse
 */
async function describeApisWithOptions(request: DescribeApisRequest, runtime: Util.RuntimeOptions): DescribeApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiMethod)) {
    query['ApiMethod'] = request.apiMethod;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    query['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.catalogId)) {
    query['CatalogId'] = request.catalogId;
  }
  if (!Util.isUnset(request.enableTagAuth)) {
    query['EnableTagAuth'] = request.enableTagAuth;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.unDeployed)) {
    query['UnDeployed'] = request.unDeployed;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API callers.
  * *   This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
  * *   This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
  *
  * @param request DescribeApisRequest
  * @return DescribeApisResponse
 */
async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeApisByAppRequest {
  apiName?: string(name='ApiName', example='getPersonInfo'),
  apiUid?: string(name='ApiUid', example='b19240592b1b4e74961fb8438ed7550c'),
  appId?: long(name='AppId', example='333486644'),
  description?: string(name='Description', example='test'),
  method?: string(name='Method', example='POST'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  path?: string(name='Path', example='/tt'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApisByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId', example='c625795a1e664782a918eaa629e96ab5'),
      apiName?: string(name='ApiName', example='sd2_h5_player_history_competition'),
      authVaildTime?: string(name='AuthVaildTime', example='Sun, 02 Jan 2022 16:00:00 GMT'),
      authorizationSource?: string(name='AuthorizationSource', example='SELF'),
      createdTime?: string(name='CreatedTime', example='Sun, 02 Jan 2022 16:00:00 GMT'),
      description?: string(name='Description', example='b1008kz'),
      groupId?: string(name='GroupId', example='38bed48d664149e4b9b5ea576319673f'),
      groupName?: string(name='GroupName', example='wb2022012101605749'),
      method?: string(name='Method', example='GET'),
      operator?: string(name='Operator', example='PROVIDER'),
      path?: string(name='Path', example='/api/offline/cacheData'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeApisByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByAppWithOptions(request: DescribeApisByAppRequest, runtime: Util.RuntimeOptions): DescribeApisByAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiUid)) {
    query['ApiUid'] = request.apiUid;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByAppWithOptions(request, runtime);
}

model DescribeApisByBackendRequest {
  backendId?: string(name='BackendId', example='4ac69b7a17524781b275ed4c5eb25c54'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='PRE'),
}

model DescribeApisByBackendResponseBody = {
  apiInfoList?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', example='20bcdc9453524b78a8beb1f6de21edb7'),
      apiName?: string(name='ApiName', example='testApi'),
      description?: string(name='Description', example='test'),
      groupId?: string(name='GroupId', example='15bcdc9453524b7gs8beb1f6de21edb7'),
      groupName?: string(name='GroupName', example='testApiGroup'),
      method?: string(name='Method', example='GET'),
      path?: string(name='Path', example='/test'),
    }
  ](name='ApiInfo')
  }(name='ApiInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeApisByBackendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByBackendResponseBody(name='body'),
}

async function describeApisByBackendWithOptions(request: DescribeApisByBackendRequest, runtime: Util.RuntimeOptions): DescribeApisByBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByBackend',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApisByBackend(request: DescribeApisByBackendRequest): DescribeApisByBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByBackendWithOptions(request, runtime);
}

model DescribeApisByIpControlRequest {
  ipControlId?: string(name='IpControlId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApisByIpControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='Description', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='*   This API is intended for API providers.
*   You can specify PageNumber to obtain the result on the specified page.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the API.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The name of the API group.', example='The ID of the API group.'),
      groupId?: string(name='GroupId', description='The API operation.', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='mygroup'),
      regionId?: string(name='RegionId', description='Queries the APIs that are bound to an access control list (ACL).', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The region where the API is located.', example='TEST'),
      visibility?: string(name='Visibility', description='The description of the API.', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned API information. It is an array consisting of ApiInfo data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The binding time of the API.', example='20'),
}

model DescribeApisByIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByIpControlResponseBody(name='body'),
}

/**
  * The number of entries to return on each page. Maximum value: 100. Default value: 10.
  *
  * @param request DescribeApisByIpControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApisByIpControlResponse
 */
async function describeApisByIpControlWithOptions(request: DescribeApisByIpControlRequest, runtime: Util.RuntimeOptions): DescribeApisByIpControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByIpControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of entries to return on each page. Maximum value: 100. Default value: 10.
  *
  * @param request DescribeApisByIpControlRequest
  * @return DescribeApisByIpControlResponse
 */
async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByIpControlWithOptions(request, runtime);
}

model DescribeApisBySignatureRequest {
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='dd05f1c54d6749eda95f9fa6d491449a'),
}

model DescribeApisBySignatureResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='Description', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='*   This API is intended for API providers.
*   The results are returned on separate pages. You can specify PageNumber to obtain the result on the specified page.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the API.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The name of the group to which the API belongs.', example='The ID of the API group.'),
      groupId?: string(name='GroupId', description='The name of the API.', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='mygroup'),
      regionId?: string(name='RegionId', description='Queries the APIs to which a specified backend signature key is bound.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The region where the API is located.', example='TEST'),
      visibility?: string(name='Visibility', description='The description of the API.', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned API information. It is an array consisting of ApiInfo data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The binding time of the API.', example='20'),
}

model DescribeApisBySignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisBySignatureResponseBody(name='body'),
}

/**
  * The ID of the signature key.
  *
  * @param request DescribeApisBySignatureRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApisBySignatureResponse
 */
async function describeApisBySignatureWithOptions(request: DescribeApisBySignatureRequest, runtime: Util.RuntimeOptions): DescribeApisBySignatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisBySignature',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the signature key.
  *
  * @param request DescribeApisBySignatureRequest
  * @return DescribeApisBySignatureResponse
 */
async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisBySignatureWithOptions(request, runtime);
}

model DescribeApisByTrafficControlRequest {
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='dd05f1c54d6749eda95f9fa6d491449a'),
}

model DescribeApisByTrafficControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId', description='Description', example='3b81fd160f5645e097cc8855d75a1cf6'),
      apiName?: string(name='ApiName', description='*   This API is intended for API providers.
*   You can specify PageNumber to obtain the result on the specified page.', example='testapi'),
      boundTime?: string(name='BoundTime', description='The ID of the API.', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description', description='The name of the group to which an API belongs.', example='The ID of the API group.'),
      groupId?: string(name='GroupId', description='The name of the API', example='0009db9c828549768a200320714b8930'),
      groupName?: string(name='GroupName', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='mygroup'),
      regionId?: string(name='RegionId', description='Queries the APIs to which a specified throttling policy is bound.', example='cn-qingdao'),
      stageName?: string(name='StageName', description='The region where the API is located.', example='TEST'),
      visibility?: string(name='Visibility', description='The description of the API.', example='PUBLIC'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos', description='Indicates whether the API is public. Valid values:

*   **PUBLIC**
*   **PRIVATE**'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned API information. It is an array consisting of ApiInfo data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The binding time of the API.', example='20'),
}

model DescribeApisByTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByTrafficControlResponseBody(name='body'),
}

/**
  * The number of entries to return on each page. Maximum value: 100. Default value: 10.
  *
  * @param request DescribeApisByTrafficControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeApisByTrafficControlResponse
 */
async function describeApisByTrafficControlWithOptions(request: DescribeApisByTrafficControlRequest, runtime: Util.RuntimeOptions): DescribeApisByTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByTrafficControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of entries to return on each page. Maximum value: 100. Default value: 10.
  *
  * @param request DescribeApisByTrafficControlRequest
  * @return DescribeApisByTrafficControlResponse
 */
async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByTrafficControlWithOptions(request, runtime);
}

model DescribeAppRequest {
  appId?: long(name='AppId', example='110843374'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAppResponseBody = {
  appId?: long(name='AppId', example='110843374'),
  appName?: string(name='AppName', example='CreateApptest'),
  createdTime?: string(name='CreatedTime', example='2019-01-29T09:33:01Z'),
  description?: string(name='Description'),
  modifiedTime?: string(name='ModifiedTime', example='2019-01-29T09:33:01Z'),
  requestId?: string(name='RequestId', example='DBDB3B0F-EC61-5F33-88AD-EC2446FA1DDB'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeAppWithOptions(request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(request, runtime);
}

model DescribeAppAttributesRequest {
  appCode?: string(name='AppCode', example='23552160'),
  appId?: long(name='AppId', example='20112314518278'),
  appKey?: string(name='AppKey', example='203708622'),
  appName?: string(name='AppName', example='testApp'),
  enableTagAuth?: boolean(name='EnableTagAuth', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  sort?: string(name='Sort', example='desc'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag', example='Key， Value'),
}

model DescribeAppAttributesResponseBody = {
  apps?: {
    appAttribute?: [ 
    {
      appId?: long(name='AppId', example='20112314518278'),
      appName?: string(name='AppName', example='CreateApptest'),
      createdTime?: string(name='CreatedTime', example='2016-07-31T04:10:19Z'),
      description?: string(name='Description', example='App test'),
      modifiedTime?: string(name='ModifiedTime', example='2016-07-31T04:10:19Z'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', example='appid'),
          value?: string(name='Value', example='123'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='AppAttribute')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8883AC74-259D-4C0B-99FC-0B7F9A588B2F'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeAppAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppAttributesResponseBody(name='body'),
}

async function describeAppAttributesWithOptions(request: DescribeAppAttributesRequest, runtime: Util.RuntimeOptions): DescribeAppAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.enableTagAuth)) {
    query['EnableTagAuth'] = request.enableTagAuth;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppAttributes',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppAttributesWithOptions(request, runtime);
}

model DescribeAppSecurityRequest {
  appId?: long(name='AppId', example='20112314518278'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='app'),
      value?: string(name='Value', example='123'),
    }
  ](name='Tag', example='Key， Value'),
}

model DescribeAppSecurityResponseBody = {
  appCode?: string(name='AppCode', example='3aaf905a0a1f4f0eabc6d891dfa08afc'),
  appKey?: string(name='AppKey', example='60030986'),
  appSecret?: string(name='AppSecret', example='c1ae97aaa7e45f21d10824bc44678fee'),
  createdTime?: string(name='CreatedTime', example='2016-07-31T04:10:19Z'),
  modifiedTime?: string(name='ModifiedTime', example='2016-07-31T04:10:19Z'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppSecurityResponseBody(name='body'),
}

async function describeAppSecurityWithOptions(request: DescribeAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppSecurity',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityWithOptions(request, runtime);
}

model DescribeAppsRequest {
  appId?: long(name='AppId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='20112314518278'),
  appOwner?: long(name='AppOwner', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='1546564'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAppsResponseBody = {
  apps?: {
    appItem?: [ 
    {
      appId?: long(name='AppId', description='Queries the apps. App information is returned only to the app owner.', example='20112314518278'),
      appName?: string(name='AppName', description='The ID of the app.', example='CreateApptest'),
      description?: string(name='Description', description='*   This API is intended for API providers.
*   API providers can use the app IDs or their Apsara Stack tenant accounts to query app information.
*   Each provider can call this operation for a maximum of 200 times every day in a region.', example='App test'),
    }
  ](name='AppItem')
  }(name='Apps', description='The description of the app.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned app information. It is an array consisting of AppItem data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
  totalCount?: int32(name='TotalCount', description='The name of the app.', example='1'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

/**
  * The ID of the app.
  *
  * @param request DescribeAppsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAppsResponse
 */
async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appOwner)) {
    query['AppOwner'] = request.appOwner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the app.
  *
  * @param request DescribeAppsRequest
  * @return DescribeAppsResponse
 */
async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAuthorizedApisRequest {
  appId?: long(name='AppId', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='2386789'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAuthorizedApisResponseBody = {
  authorizedApis?: {
    authorizedApi?: [ 
    {
      apiId?: string(name='ApiId', description='The expiration time of the authorization in UTC.', example='baacc592e63a4cb6a41920d9d3f91f38'),
      apiName?: string(name='ApiName', description='*   This operation is intended for API callers.
*   The specified application can call all APIs included in the responses.', example='AreaWeather'),
      authVaildTime?: string(name='AuthVaildTime', description='Queries weather based on the region name', example='2018-10-05T16:00:00Z'),
      authorizationSource?: string(name='AuthorizationSource', description='The description of the authorization.', example='CONSOLE'),
      authorizedTime?: string(name='AuthorizedTime', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='2016-07-21T06:17:20'),
      description?: string(name='Description', description='The name of the API group.', example='The ID of the API group. This ID is generated by the system and globally unique.'),
      groupId?: string(name='GroupId', description='The authorizer. Valid values:

*   **PROVIDER:** the API owner
*   **CONSUMER:** the API caller', example='523e8dc7bbe04613b5b1d726c2a7889d'),
      groupName?: string(name='GroupName', description='The authorization time in UTC.', example='Weather'),
      operator?: string(name='Operator', description='The name of the API operation.', example='PROVIDER'),
      regionId?: string(name='RegionId', description='Queries the authorized APIs of a specified application.', example='cn-hangzhou'),
      stageName?: string(name='StageName', description='The region to which the API belongs.', example='RELEASE'),
    }
  ](name='AuthorizedApi')
  }(name='AuthorizedApis', description='The authorization source. Valid values:

*   **CONSOLE**
*   **API**'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The authorized API set.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', description='The unique identifier of the API, which is generated by the system.', example='2'),
}

model DescribeAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuthorizedApisResponseBody(name='body'),
}

/**
  * The number of the page to return. Pages start from page 1. Default value: 1.
  *
  * @param request DescribeAuthorizedApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAuthorizedApisResponse
 */
async function describeAuthorizedApisWithOptions(request: DescribeAuthorizedApisRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuthorizedApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of the page to return. Pages start from page 1. Default value: 1.
  *
  * @param request DescribeAuthorizedApisRequest
  * @return DescribeAuthorizedApisResponse
 */
async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedApisWithOptions(request, runtime);
}

model DescribeAuthorizedAppsRequest {
  apiId?: string(name='ApiId', example='baacc592e63a4cb6a41920d9d3f91f38'),
  appId?: long(name='AppId', example='20112314518278'),
  appName?: string(name='AppName', example='CreateApptest'),
  appOwnerId?: long(name='AppOwnerId', example='1546564'),
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
}

model DescribeAuthorizedAppsResponseBody = {
  authorizedApps?: {
    authorizedApp?: [ 
    {
      appId?: long(name='AppId', example='2386789'),
      appName?: string(name='AppName'),
      authVaildTime?: string(name='AuthVaildTime', example='2018-10-05T16:00:00Z'),
      authorizationSource?: string(name='AuthorizationSource', example='CONSOLE'),
      authorizedTime?: string(name='AuthorizedTime', example='2016-07-21T06:17:20Z'),
      description?: string(name='Description'),
      operator?: string(name='Operator', example='PROVIDER'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='AuthorizedApp')
  }(name='AuthorizedApps'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeAuthorizedAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuthorizedAppsResponseBody(name='body'),
}

async function describeAuthorizedAppsWithOptions(request: DescribeAuthorizedAppsRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appOwnerId)) {
    query['AppOwnerId'] = request.appOwnerId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuthorizedApps',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedAppsWithOptions(request, runtime);
}

model DescribeBackendInfoRequest {
  backendId?: string(name='BackendId', example='739b68751c0b4e899e04d0c92b6d0be7'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBackendInfoResponseBody = {
  backendInfo?: {
    backendId?: string(name='BackendId', example='6fc978bb63574146b766863dd7bdf661'),
    backendModels?: [ 
      {
        backendConfig?: {
          discoveryConfig?: {
            nacosConfig?: {
              accessKey?: string(name='AccessKey'),
              authType?: string(name='AuthType'),
              clusters?: string(name='Clusters'),
              groupName?: string(name='GroupName'),
              namespace?: string(name='Namespace'),
              password?: string(name='Password'),
              secretKey?: string(name='SecretKey'),
              serverAddress?: string(name='ServerAddress'),
              serviceName?: string(name='ServiceName'),
              userName?: string(name='UserName'),
            }(name='NacosConfig'),
            rcType?: string(name='RcType'),
          }(name='DiscoveryConfig'),
          eventBridgeConfig?: {
            eventBridgeRegionId?: string(name='EventBridgeRegionId', example='cn-hangzhou'),
            eventBus?: string(name='EventBus', example='testBus'),
            eventSource?: string(name='EventSource', example='dds_driver'),
            roleArn?: string(name='RoleArn', example='acs:ram::1975133748561***:role/aliyunserviceroleforiotlogexport'),
          }(name='EventBridgeConfig'),
          functionComputeConfig?: {
            fcBaseUrl?: string(name='FcBaseUrl', example='https://t*******.ap-*****.fcapp.run/'),
            fcRegionId?: string(name='FcRegionId', example='cn-hangzhou'),
            fcType?: string(name='FcType', example='HttpTrigger'),
            functionName?: string(name='FunctionName', example='edge_function'),
            onlyBusinessPath?: boolean(name='OnlyBusinessPath', example='false'),
            qualifier?: string(name='Qualifier', example='testQualifier'),
            roleArn?: string(name='RoleArn', example='acs:ram::31985*:role/aliyunserviceroleforbastionhostpam'),
            serviceName?: string(name='ServiceName', example='myservice'),
          }(name='FunctionComputeConfig'),
          httpTargetHostName?: string(name='HttpTargetHostName'),
          mockConfig?: {
            mockHeaders?: [ 
              {
                headerName?: string(name='HeaderName'),
                headerValue?: string(name='HeaderValue'),
              }
            ](name='MockHeaders'),
            mockResult?: string(name='MockResult'),
            mockStatusCode?: string(name='MockStatusCode'),
          }(name='MockConfig'),
          ossConfig?: {
            bucketName?: string(name='BucketName', example='my_bucket'),
            ossRegionId?: string(name='OssRegionId', example='cn-hangzhou'),
          }(name='OssConfig'),
          serviceAddress?: string(name='ServiceAddress', example='10.0.0.1'),
          type?: string(name='Type', example='VPC'),
          vpcConfig?: {
            instanceId?: string(name='InstanceId', example='i-uf6iaale3gfef9t9cb41'),
            name?: string(name='Name', example='dypls-cn-beijing-slb-pre'),
            port?: long(name='Port', example='8080'),
            vpcAccessId?: string(name='VpcAccessId', example='2zej3ehuzg9m77kvwnfpn'),
            vpcId?: string(name='VpcId', example='vpc-wz9v96hqi6d14744sxqmx'),
            vpcScheme?: string(name='VpcScheme', example='http'),
            vpcTargetHostName?: string(name='VpcTargetHostName'),
          }(name='VpcConfig'),
        }(name='BackendConfig'),
        backendModelId?: string(name='BackendModelId', example='5c4995d08e8b4954b0f326e8e4f2b97d'),
        description?: string(name='Description', example='testDvs 1'),
        gmtCreate?: string(name='GmtCreate', example='2021-12-20T03:22:03.000+0000'),
        gmtModified?: string(name='GmtModified', example='2021-12-20T03:22:03.000+0000'),
        stageModeId?: string(name='StageModeId', example='6fc978bb63574146b766863dd7bdf661'),
        stageName?: string(name='StageName', example='RELEASE'),
      }
    ](name='BackendModels'),
    backendName?: string(name='BackendName', example='testoss2'),
    backendType?: string(name='BackendType', example='HTTP'),
    createdTime?: string(name='CreatedTime', example='2021-11-22T11:10:46+08:00'),
    description?: string(name='Description', example='add'),
    modifiedTime?: string(name='ModifiedTime', example='2017-12-11T15:18:09+08:00'),
  }(name='BackendInfo'),
  requestId?: string(name='RequestId', example='0AA90E87-3506-5AA6-AFFB-A4D53B4F6231'),
}

model DescribeBackendInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackendInfoResponseBody(name='body'),
}

async function describeBackendInfoWithOptions(request: DescribeBackendInfoRequest, runtime: Util.RuntimeOptions): DescribeBackendInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackendInfo',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackendInfo(request: DescribeBackendInfoRequest): DescribeBackendInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackendInfoWithOptions(request, runtime);
}

model DescribeBackendListRequest {
  backendName?: string(name='BackendName', example='test'),
  backendType?: string(name='BackendType', example='HTTP'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBackendListResponseBody = {
  backendInfoList?: [ 
    {
      backendId?: string(name='BackendId', example='35bd31d32c9c425ebbe9330db9f8c375'),
      backendName?: string(name='BackendName', example='test'),
      backendType?: string(name='BackendType', example='HTTP'),
      createdTime?: string(name='CreatedTime', example='2022-01-25T11:22:29Z'),
      description?: string(name='Description', example='test'),
      modifiedTime?: string(name='ModifiedTime', example='2022-01-25T11:22:29Z'),
    }
  ](name='BackendInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='090A0DF9-9144-5236-8CBA-E18DE317722D'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeBackendListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackendListResponseBody(name='body'),
}

async function describeBackendListWithOptions(request: DescribeBackendListRequest, runtime: Util.RuntimeOptions): DescribeBackendListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendName)) {
    query['BackendName'] = request.backendName;
  }
  if (!Util.isUnset(request.backendType)) {
    query['BackendType'] = request.backendType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackendList',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackendList(request: DescribeBackendListRequest): DescribeBackendListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackendListWithOptions(request, runtime);
}

model DescribeDatasetInfoRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDatasetInfoResponseBody = {
  datasetInfo?: {
    createdTime?: string(name='CreatedTime', example='2022-09-21T12:58:43Z'),
    datasetId?: string(name='DatasetId', example='62b91a790a693238********'),
    datasetName?: string(name='DatasetName', example='DatasetName'),
    datasetType?: string(name='DatasetType', example='JWT_BLOCKING'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-21T12:58:43Z'),
  }(name='DatasetInfo'),
  requestId?: string(name='RequestId', example='A2C8F75E-EE84-5C64-960F-45C8********'),
}

model DescribeDatasetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatasetInfoResponseBody(name='body'),
}

async function describeDatasetInfoWithOptions(request: DescribeDatasetInfoRequest, runtime: Util.RuntimeOptions): DescribeDatasetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatasetInfo',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatasetInfo(request: DescribeDatasetInfoRequest): DescribeDatasetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatasetInfoWithOptions(request, runtime);
}

model DescribeDatasetItemInfoRequest {
  datasetId?: string(name='DatasetId', example='62b91a790a693238********'),
  datasetItemId?: string(name='DatasetItemId', example='5045****'),
  securityToken?: string(name='SecurityToken'),
  value?: string(name='Value', example='106.43.XXX.XXX'),
}

model DescribeDatasetItemInfoResponseBody = {
  datasetItemInfo?: {
    createdTime?: string(name='CreatedTime', example='2022-09-21T12:58:43Z'),
    datasetId?: string(name='DatasetId', example='626238665db4a5140eea3e40********'),
    datasetItemId?: string(name='DatasetItemId', example='5045****'),
    description?: string(name='Description'),
    expiredTime?: string(name='ExpiredTime', example='2022-09-22T12:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', example='2022-09-21T12:58:43Z'),
    value?: string(name='Value', example='106.43.XXX.XXX'),
  }(name='DatasetItemInfo'),
  requestId?: string(name='RequestId', example='5BAFA85F-38E3-5D9E-9E32-4B09********'),
}

model DescribeDatasetItemInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatasetItemInfoResponseBody(name='body'),
}

async function describeDatasetItemInfoWithOptions(request: DescribeDatasetItemInfoRequest, runtime: Util.RuntimeOptions): DescribeDatasetItemInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.datasetItemId)) {
    query['DatasetItemId'] = request.datasetItemId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatasetItemInfo',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatasetItemInfo(request: DescribeDatasetItemInfoRequest): DescribeDatasetItemInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatasetItemInfoWithOptions(request, runtime);
}

model DescribeDatasetItemListRequest {
  datasetId?: string(name='DatasetId', example='602e1f6b3543200eaab0a89e********'),
  datasetItemIds?: string(name='DatasetItemIds', example='5045****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDatasetItemListResponseBody = {
  datasetItemInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2022-09-21T12:58:43Z'),
      datasetId?: string(name='DatasetId', example='4add6a61804e47858266883e********'),
      datasetItemId?: string(name='DatasetItemId', example='5045****'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime', example='2022-09-22T12:00:00Z'),
      modifiedTime?: string(name='ModifiedTime', example='2022-09-21T12:58:43Z'),
      value?: string(name='Value', example='106.43.XXX.XXX'),
    }
  ](name='DatasetItemInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C6E9C6E4-608B-5C0F-9783-E288********'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatasetItemListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatasetItemListResponseBody(name='body'),
}

async function describeDatasetItemListWithOptions(request: DescribeDatasetItemListRequest, runtime: Util.RuntimeOptions): DescribeDatasetItemListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.datasetItemIds)) {
    query['DatasetItemIds'] = request.datasetItemIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatasetItemList',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatasetItemList(request: DescribeDatasetItemListRequest): DescribeDatasetItemListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatasetItemListWithOptions(request, runtime);
}

model DescribeDatasetListRequest {
  datasetIds?: string(name='DatasetIds', example='4add6a61804e47858266883e********'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDatasetListResponseBody = {
  datasetInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2022-09-21T12:58:43Z'),
      datasetId?: string(name='DatasetId', example='6304ce6b4ae6453f********'),
      datasetName?: string(name='DatasetName', example='DatasetName'),
      datasetType?: string(name='DatasetType', example='IP_WHITELIST_CIDR'),
      modifiedTime?: string(name='ModifiedTime', example='2022-09-21T12:58:43Z'),
    }
  ](name='DatasetInfoList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D403C6E6-21B3-5B78-82DA-E3B6********'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatasetListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatasetListResponseBody(name='body'),
}

async function describeDatasetListWithOptions(request: DescribeDatasetListRequest, runtime: Util.RuntimeOptions): DescribeDatasetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetIds)) {
    query['DatasetIds'] = request.datasetIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatasetList',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatasetList(request: DescribeDatasetListRequest): DescribeDatasetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatasetListWithOptions(request, runtime);
}

model DescribeDeployApiTaskRequest {
  operationUid?: string(name='OperationUid', example='51524fb8f12846d694d0a1de9a0cf274'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDeployApiTaskResponseBody = {
  deployedResults?: {
    deployedResult?: [ 
    {
      apiUid?: string(name='ApiUid', example='0433c1cd84724923b7a4f9ca1cfc249c'),
      deployedStatus?: string(name='DeployedStatus', example='OVER'),
      errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
      groupId?: string(name='GroupId', example='e8da6f6346184da9a30d0dc1888b1f3b'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='DeployedResult')
  }(name='DeployedResults'),
  requestId?: string(name='RequestId', example='CA4B3261-F14A-5E33-8608-F75A1DF27AD4'),
}

model DescribeDeployApiTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployApiTaskResponseBody(name='body'),
}

async function describeDeployApiTaskWithOptions(request: DescribeDeployApiTaskRequest, runtime: Util.RuntimeOptions): DescribeDeployApiTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationUid)) {
    query['OperationUid'] = request.operationUid;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeployApiTask',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeployApiTask(request: DescribeDeployApiTaskRequest): DescribeDeployApiTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployApiTaskWithOptions(request, runtime);
}

model DescribeDeployedApiRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='ab7c95a01a7e42f28718f34497bbf47c'),
  groupId?: string(name='GroupId', description='The ID of the API group. An API group ID is generated by the system and is globally unique.', example='81750604ccff48c48f34d6c0165e09db'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API runs. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
}

model DescribeDeployedApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='The signature method used by the client. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='4eed13a57d4e42fbb51316be8a5329ff'),
  apiName?: string(name='ApiName', description='The name of the API.', example='weather'),
  authType?: string(name='AuthType', description='The authentication method of the API. Valid values:

*   **APP:** Only authorized apps are allowed to call the API.

*   **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:

    *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If the API is made public, set API-specific throttling policies.', example='APP'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue', description='The constant value.', example='constance'),
      description?: string(name='Description', description='The description of the parameter.', example='123'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='constance'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters', description='The constant parameters.'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The sample value.', example='192.168.1.1'),
      description?: string(name='Description', description='The description of the parameter.', example='123'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the custom system parameter.', example='appid'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters', description='The custom system parameters.'),
  deployedTime?: string(name='DeployedTime', description='The deployment time. Format: yyyy-mm-ddhh:mm:ss.', example='2022-07-25T17:47:51Z'),
  description?: string(name='Description', description='The description of the parameter.', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', description='*   Indicates whether to call the API only in an internal network. If this parameter is set to **true**, the API can be called only in an internal network.
*   If this parameter is set to **false**, the API can be called over the Internet and in an internal network.

> If you do not configure this parameter when you modify the API, the original value is used.', example='true'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code', description='The error code returned if the request failed.', example='Error'),
      description?: string(name='Description', description='The description of the error.', example='Error description'),
      message?: string(name='Message', description='The error message returned if the request failed.', example='error message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.

For more information, see [ErrorCodeSample](~~44392~~).'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Indicates whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of a request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If the **ForceNonceCheck** parameter is set to **false**, the X-Ca-Nonce is not checked. Default value: false.', example='true'),
  groupId?: string(name='GroupId', description='The ID of the API group.', example='bc77f5b49c974437a9912ea3755cd834'),
  groupName?: string(name='GroupName', description='The name of the API group.', example='Weather'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName', description='The name of the parameter that corresponds to the token.', example='xxx'),
    openIdApiType?: string(name='OpenIdApiType', description='The OpenID Connect mode. Valid values:

*   **IDTOKEN:** OpenID Connect calls the authentication API to issue tokens. If the value is specified, the PublicKeyId parameter and the PublicKey parameter are required.
*   **BUSINESS:** OpenID Connect calls the business API to verify identities by using existing tokens. If this value is specified, the IdTokenParamName parameter is required.', example='IDTOKEN'),
    publicKey?: string(name='PublicKey', description='The public key of the API.', example='EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92'),
    publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='88483727556929326703309904351185815489'),
  }(name='OpenIdConnectConfig', description='The configuration items of the third-party OpenID Connect authentication method.'),
  regionId?: string(name='RegionId', description='The region in which the API group resides.', example='cn-beijing'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the **RequestMode** parameter is set to **MAPPING**.

The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM** and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.', example='STREAM'),
    bodyModel?: string(name='BodyModel', description='The body model.'),
    postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='fwefwef'),
    requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method that is used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
    requestPath?: string(name='RequestPath', description='The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, The path of the API request is ` /object/add  `.', example='/api/billing/test/[type]'),
    requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,). Example: "HTTP,HTTPS".', example='HTTP'),
  }(name='RequestConfig', description='The configuration items of API requests sent by the consumer to API Gateway.

For more information, see [RequestConfig](~~43985~~).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName', description='The name of the API parameter.', example='age'),
      arrayItemsType?: string(name='ArrayItemsType', description='The type of the array element.', example='String'),
      defaultValue?: string(name='DefaultValue', description='The default value.', example='20'),
      demoValue?: string(name='DemoValue', description='The sample value.', example='20'),
      description?: string(name='Description', description='The parameter description.', example='parameter description'),
      docOrder?: int32(name='DocOrder', description='The order in the document.', example='0'),
      docShow?: string(name='DocShow', description='Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.', example='PUBLIC'),
      enumValue?: string(name='EnumValue', description='The hash values that can be entered when **ParameterType** is set to Int, Long, Float, Double, or String. Separate different values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.', example='boy,girl'),
      jsonScheme?: string(name='JsonScheme', description='JSON scheme', example='{}'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      maxLength?: long(name='MaxLength', description='The maximum length of the **ParameterType** parameter when the parameter is set to String.', example='123456'),
      maxValue?: long(name='MaxValue', description='The maximum value of the **ParameterType** parameter when the parameter is set to Int, Long, Float, or Double.', example='123456'),
      minLength?: long(name='MinLength', description='The minimum length of the **ParameterType** parameter when the parameter is set to String.', example='123456'),
      minValue?: long(name='MinValue', description='The minimum value of the **ParameterType** parameter when the parameter is set to Int, Long, Float, or Double.', example='123456'),
      parameterType?: string(name='ParameterType', description='The type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.', example='String'),
      regularExpression?: string(name='RegularExpression', description='The regular expression used for parameter validation when **ParameterType** is set to String.', example='xxx'),
      required?: string(name='Required', description='Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.', example='OPTIONAL'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).'),
  resultBodyModel?: string(name='ResultBodyModel', description='The return description of the API.'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description', description='The description of the parameter.', example='result description'),
      hasChild?: boolean(name='HasChild', example='false'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory', description='Indicates whether the parameter is required.', example='true'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions', description='The returned description of the API.'),
  resultSample?: string(name='ResultSample', description='The sample response from the backend service.', example='{code: 200, message:\\"success\\", data: \\"\\"}'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.', example='HTML'),
  serviceConfig?: {
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory', description='The ContentType header used when a backend HTTP service is called. Valid values:

*   **DEFAULT:** the default header in API Gateway
*   **CUSTOM:** a custom header
*   **CLIENT:** the ContentType header specified by the client', example='DEFAULT'),
      contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8'),
      fcBaseUrl?: string(name='FcBaseUrl', description='The root path of Function Compute.', example='https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/'),
      fcType?: string(name='FcType', description='The type of the Function Compute instance.', example='HttpTrigger'),
      functionName?: string(name='FunctionName', description='The function name defined in Function Compute.', example='domain_business_control'),
      method?: string(name='Method', description='The request method.', example='GET'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath', description='Indicates whether the backend receives only the service path.', example='false'),
      path?: string(name='Path', description='The API request path.', example='/api/offline/cacheData'),
      qualifier?: string(name='Qualifier', description='The alias of the function.', example='2'),
      regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-beijing'),
      roleArn?: string(name='RoleArn', description='The ARN of the RAM role assumed by API Gateway to access Function Compute.', example='acs:ram::111***:role/aliyunserviceroleforsas'),
      serviceName?: string(name='ServiceName', description='The service name defined in Function Compute.', example='fcservicename'),
    }(name='FunctionComputeConfig', description='The backend configuration items when the backend service is Function Compute.'),
    mock?: string(name='Mock', description='Indicates whether the Mock mode is enabled. Valid values:

*   **TRUE:** The Mock mode is enabled.
*   **FALSE:** The Mock mode is not enabled.', example='TRUE'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName', description='The name of the HTTP header parameter.', example='Content-Type'),
        headerValue?: string(name='HeaderValue', description='The value of the HTTP header parameter.', example='86400'),
      }
    ](name='MockHeader')
    }(name='MockHeaders', description='The mock headers.'),
    mockResult?: string(name='MockResult', description='The result returned when the Mock mode is enabled.', example='test result'),
    mockStatusCode?: int32(name='MockStatusCode', description='The status code returned for service mock.', example='200'),
    serviceAddress?: string(name='ServiceAddress', description='The URL that is used to call the backend service. If the complete URL of a backend service is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``', example='http://api.a.com:8080'),
    serviceHttpMethod?: string(name='ServiceHttpMethod', description='The HTTP method that is used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='POST'),
    servicePath?: string(name='ServicePath', description='The path that is used to call the backend service. If the complete URL of a backend service is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of the **ServicePath** parameter is `/object/add`.', example='/object/add'),
    serviceProtocol?: string(name='ServiceProtocol', description='The backend service protocol. Only HTTP, HTTPS, and Function Compute are supported.', example='HTTP'),
    serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service. Unit: milliseconds.', example='1000'),
    serviceVpcEnable?: string(name='ServiceVpcEnable', description='Indicates whether to enable the VPC channel. Valid values:

*   **TRUE**: The VPC channel is enabled. You can enable a VPC channel only after you create the corresponding access authorization for the VPC.
*   **FALSE**: The VPC channel is not enabled.', example='TRUE'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.', example='i-bp1h497hkijewv2***'),
      name?: string(name='Name', description='The name of the VPC access authorization.', example='glmall-app-test'),
      port?: int32(name='Port', description='The port number that corresponds to the instance.', example='8080'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeafsc3fygk1***'),
    }(name='VpcConfig', description='The configuration items of the VPC channel.'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-uf6kg9x8sx2tbxxxx'),
  }(name='ServiceConfig', description='The configuration items of API requests sent by API Gateway to the backend service.

For more information, see [ServiceConfig](~~43987~~).'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterType?: string(name='ParameterType', description='The data type of the backend service parameter. Valid values: STRING, NUMBER, and BOOLEAN.', example='String'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='clientIp'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName', description='The name of the frontend input parameter.', example='sex'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the backend service parameter.', example='sex'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).'),
  stageName?: string(name='StageName', description='The environment in which the API runs. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue', description='The example.', example='192.168.1.1'),
      description?: string(name='Description', description='The description of the parameter.', example='QueryParamDTO'),
      location?: string(name='Location', description='The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.', example='HEAD'),
      parameterName?: string(name='ParameterName', description='The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, CaProxy.', example='CaClientIp'),
      serviceParameterName?: string(name='ServiceParameterName', description='The name of the corresponding backend parameter.', example='clientIp'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters', description='The system parameters.'),
  visibility?: string(name='Visibility', description='Indicates whether the API is public. Valid values:

*   **PUBLIC:** The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE:** The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
}

model DescribeDeployedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApiWithOptions(request: DescribeDeployedApiRequest, runtime: Util.RuntimeOptions): DescribeDeployedApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeployedApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApiWithOptions(request, runtime);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId', example='c076144d7878437b8f82fb85890ce6a0'),
  apiMethod?: string(name='ApiMethod'),
  apiName?: string(name='ApiName', example='weather'),
  apiPath?: string(name='ApiPath'),
  enableTagAuth?: boolean(name='EnableTagAuth', example='true'),
  groupId?: string(name='GroupId', example='63be9002440b4778a61122f14c2b2bbb'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
  tag?: [ 
    {
      key?: string(name='Key', example='appname'),
      value?: string(name='Value', example='testapp'),
    }
  ](name='Tag'),
}

model DescribeDeployedApisResponseBody = {
  deployedApis?: {
    deployedApiItem?: [ 
    {
      apiId?: string(name='ApiId', example='c076144d7878437b8f82fb85890ce6a0'),
      apiMethod?: string(name='ApiMethod'),
      apiName?: string(name='ApiName'),
      apiPath?: string(name='ApiPath'),
      deployedTime?: string(name='DeployedTime', example='2016-07-23T08:28:48Z'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='63be9002440b4778a61122f14c2b2bbb'),
      groupName?: string(name='GroupName', example='myGroup3'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
      stageName?: string(name='StageName', example='RELEASE'),
      visibility?: string(name='Visibility', example='PUBLIC'),
    }
  ](name='DeployedApiItem')
  }(name='DeployedApis'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ002'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeDeployedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApisWithOptions(request: DescribeDeployedApisRequest, runtime: Util.RuntimeOptions): DescribeDeployedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiMethod)) {
    query['ApiMethod'] = request.apiMethod;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    query['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.enableTagAuth)) {
    query['EnableTagAuth'] = request.enableTagAuth;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeployedApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApisWithOptions(request, runtime);
}

model DescribeDomainRequest {
  domainName?: string(name='DomainName', description='The custom domain name.', example='api.demo.com'),
  groupId?: string(name='GroupId', description='The private key of the SSL certificate.', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDomainResponseBody = {
  certificateBody?: string(name='CertificateBody', description='The domain name resolution status. Valid values:

*   RESOLVED: The domain name has been resolved.
*   UNRESOLVED: The domain name has not been resolved.', example='xxx'),
  certificateId?: string(name='CertificateId', description='The ID of the request.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  certificateName?: string(name='CertificateName', description='The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.', example='myCertificate'),
  certificatePrivateKey?: string(name='CertificatePrivateKey', description='The binding status of the custom domain name. Valid values:

*   BINDING: The domain name has been bound.
*   BOUND: The domain name has not been bound.', example='xxx'),
  certificateValidEnd?: long(name='CertificateValidEnd'),
  certificateValidStart?: long(name='CertificateValidStart'),
  domainBindingStatus?: string(name='DomainBindingStatus', description='The domain name does not have an ICP filing.', example='BINDING'),
  domainCNAMEStatus?: string(name='DomainCNAMEStatus', description='Queries details about a bound custom domain name, including the automatically assigned second-level domain name, custom domain name, and SSL certificate.', example='RESOLVED'),
  domainLegalStatus?: string(name='DomainLegalStatus', description='The content of the certificate.', example='NORMAL'),
  domainName?: string(name='DomainName', description='Remarks about the domain name, such as the cause of an exception.', example='api.demo.com'),
  domainRemark?: string(name='DomainRemark', description='The unique ID of the SSL certificate, which is automatically generated by the system.', example='The status of the domain name that uses WebSocket.'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus', description='The name of the SSL certificate.', example='NORMAL'),
  groupId?: string(name='GroupId', description='The second-level domain name that is automatically assigned to the API group.', example='927d50c0f2e54b359919923d908bb015'),
  requestId?: string(name='RequestId', description='The validity status of the domain name. Valid values:

*   NORMAL
*   ABNORMAL: This status affects API calls and must be resolved as soon as possible.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
  subDomain?: string(name='SubDomain', description='*   This operation is intended for API providers.', example='xxx-cn-hangzhou.alicloudapi.com'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainResponseBody(name='body'),
}

/**
  * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
  *
  * @param request DescribeDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainResponse
 */
async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomain',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
  *
  * @param request DescribeDomainRequest
  * @return DescribeDomainResponse
 */
async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeHistoryApisRequest {
  apiId?: string(name='ApiId', example='a12068f555964ca8a0c9c33288f1e5a7'),
  apiName?: string(name='ApiName', example='getPersonInfo'),
  groupId?: string(name='GroupId', example='0ccb66aadb5345b78a40f57d192d8aa4'),
  pageNumber?: string(name='PageNumber', example='2'),
  pageSize?: string(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
}

model DescribeHistoryApisResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId', example='5af418828f0344a3b588c0cc1331a3bc'),
      apiName?: string(name='ApiName', example='v2_role_assign'),
      deployedTime?: string(name='DeployedTime', example='2016-07-20T08:28:48Z'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='1084f9034c744137901057206b39d2b6'),
      groupName?: string(name='GroupName', example='myGroup2'),
      historyVersion?: string(name='HistoryVersion', example='20210915101416294'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
      stageName?: string(name='StageName', example='RELEASE'),
      status?: string(name='Status', example='ONLINE'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeHistoryApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApisWithOptions(request: DescribeHistoryApisRequest, runtime: Util.RuntimeOptions): DescribeHistoryApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHistoryApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApisWithOptions(request, runtime);
}

model DescribeImportOASTaskRequest {
  operationId?: string(name='OperationId', example='4c53ccf1d40c489686d1adf5c2644a7f'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeImportOASTaskResponseBody = {
  apiResults?: {
    apiResult?: [ 
    {
      apiId?: string(name='ApiId', example='c5a0c2900ff746b789c007545be22fb8'),
      apiName?: string(name='ApiName', example='GetByCreatorIdUsingGET'),
      description?: string(name='Description'),
      errorMessage?: string(name='ErrorMessage', example='Internal Error'),
      groupId?: string(name='GroupId', example='736508d885074167ba8fbce3bc95ea0b'),
      method?: string(name='Method', example='GET'),
      path?: string(name='Path', example='/creator/getByCreatorId'),
      updateStatus?: string(name='UpdateStatus', example='WAIT'),
    }
  ](name='ApiResult')
  }(name='ApiResults'),
  modelResults?: {
    modelResult?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='Internal Error'),
      groupId?: string(name='GroupId', example='736508d885074167ba8fbce3bc95ea0b'),
      modelId?: string(name='ModelId', example='6b48d724c921415486e190c494dd6bf8'),
      modelName?: string(name='ModelName', example='Pet'),
      updateStatus?: string(name='UpdateStatus', example='FAIL'),
    }
  ](name='ModelResult')
  }(name='ModelResults'),
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
  taskStatus?: string(name='TaskStatus', example='Finished'),
}

model DescribeImportOASTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImportOASTaskResponseBody(name='body'),
}

async function describeImportOASTaskWithOptions(request: DescribeImportOASTaskRequest, runtime: Util.RuntimeOptions): DescribeImportOASTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationId)) {
    query['OperationId'] = request.operationId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImportOASTask',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImportOASTask(request: DescribeImportOASTaskRequest): DescribeImportOASTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImportOASTaskWithOptions(request, runtime);
}

model DescribeInstanceDropConnectionsRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T07:00:09Z'),
  instanceId?: string(name='InstanceId', description='The ID of the dedicated instance.', example='apigateway-cn-n6w1v1234501'),
  sbcName?: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T06:00:09Z'),
}

model DescribeInstanceDropConnectionsResponseBody = {
  instanceDropConnections?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2023-01-31T01:11:00Z'),
      itemValue?: string(name='ItemValue', description='The number of dropped packets in the instance.', example='0.0'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropConnections', description='The list of dropped connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DescribeInstanceDropConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceDropConnectionsResponseBody(name='body'),
}

async function describeInstanceDropConnectionsWithOptions(request: DescribeInstanceDropConnectionsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDropConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sbcName)) {
    query['SbcName'] = request.sbcName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDropConnections',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDropConnections(request: DescribeInstanceDropConnectionsRequest): DescribeInstanceDropConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDropConnectionsWithOptions(request, runtime);
}

model DescribeInstanceDropPacketRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-12-16T02:04:36Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v641b9dxc00p'),
  sbcName?: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T04:00:36Z'),
}

model DescribeInstanceDropPacketResponseBody = {
  instanceDropPacket?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstanceDropPacketRX: the number of inbound packets dropped in the instance per second.
*   InstanceDropPacketTX: the number of outbound packets dropped in the instance per second.', example='InstanceDropPacketRX'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T04:00:36Z'),
      itemValue?: string(name='ItemValue', description='The number of dropped packets in the instance.', example='0.0'),
    }
  ](name='MonitorItem')
  }(name='InstanceDropPacket', description='The list of dropped packets in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model DescribeInstanceDropPacketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceDropPacketResponseBody(name='body'),
}

async function describeInstanceDropPacketWithOptions(request: DescribeInstanceDropPacketRequest, runtime: Util.RuntimeOptions): DescribeInstanceDropPacketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sbcName)) {
    query['SbcName'] = request.sbcName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDropPacket',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDropPacket(request: DescribeInstanceDropPacketRequest): DescribeInstanceDropPacketResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDropPacketWithOptions(request, runtime);
}

model DescribeInstanceHttpCodeRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-07-21T06:05:52Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-m7r227yy2004'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-14T02:12:10Z'),
}

model DescribeInstanceHttpCodeResponseBody = {
  instanceHttpCode?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The HTTP status code.', example='404'),
      itemValue?: string(name='ItemValue', description='The number of HTTP status codes returned.', example='1'),
    }
  ](name='MonitorItem')
  }(name='InstanceHttpCode', description='The list of HTTP status codes returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DescribeInstanceHttpCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceHttpCodeResponseBody(name='body'),
}

async function describeInstanceHttpCodeWithOptions(request: DescribeInstanceHttpCodeRequest, runtime: Util.RuntimeOptions): DescribeInstanceHttpCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceHttpCode',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceHttpCode(request: DescribeInstanceHttpCodeRequest): DescribeInstanceHttpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHttpCodeWithOptions(request, runtime);
}

model DescribeInstanceLatencyRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T02:05:13Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-v641jf5tt01v'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T11:07:05Z'),
}

model DescribeInstanceLatencyResponseBody = {
  instanceLatency?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   gatewayLatency API: the processing latency of API Gateway
*   latency: the processing latency of the backend service.', example='latency'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-06T02:05:13Z'),
      itemValue?: string(name='ItemValue', description='The value of the average latency.', example='10'),
    }
  ](name='MonitorItem')
  }(name='InstanceLatency', description='The list of average latencies in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceLatencyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceLatencyResponseBody(name='body'),
}

async function describeInstanceLatencyWithOptions(request: DescribeInstanceLatencyRequest, runtime: Util.RuntimeOptions): DescribeInstanceLatencyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceLatency',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceLatency(request: DescribeInstanceLatencyRequest): DescribeInstanceLatencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceLatencyWithOptions(request, runtime);
}

model DescribeInstanceNewConnectionsRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-08T02:08:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001'),
  sbcName?: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-01T02:08:00Z'),
}

model DescribeInstanceNewConnectionsResponseBody = {
  instanceNewConnections?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-10-08T02:08:00Z'),
      itemValue?: string(name='ItemValue', description='The number of new connections in the instance.', example='16'),
    }
  ](name='MonitorItem')
  }(name='InstanceNewConnections', description='The list of new connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceNewConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceNewConnectionsResponseBody(name='body'),
}

async function describeInstanceNewConnectionsWithOptions(request: DescribeInstanceNewConnectionsRequest, runtime: Util.RuntimeOptions): DescribeInstanceNewConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sbcName)) {
    query['SbcName'] = request.sbcName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceNewConnections',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceNewConnections(request: DescribeInstanceNewConnectionsRequest): DescribeInstanceNewConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceNewConnectionsWithOptions(request, runtime);
}

model DescribeInstancePacketsRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-24T10:14:53Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001'),
  sbcName?: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-18T01:14:26Z'),
}

model DescribeInstancePacketsResponseBody = {
  instancePackets?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstancePacketRX: inbound data packets
*   InstancePacketTX: outbound data packets', example='InstancePacketRX'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-05-24T10:14:53Z'),
      itemValue?: string(name='ItemValue', description='The number of inbound and outbound data packets in the instance.', example='0'),
    }
  ](name='MonitorItem')
  }(name='InstancePackets', description='The list of inbound and outbound data packets in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstancePacketsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancePacketsResponseBody(name='body'),
}

async function describeInstancePacketsWithOptions(request: DescribeInstancePacketsRequest, runtime: Util.RuntimeOptions): DescribeInstancePacketsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sbcName)) {
    query['SbcName'] = request.sbcName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstancePackets',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstancePackets(request: DescribeInstancePacketsRequest): DescribeInstancePacketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePacketsWithOptions(request, runtime);
}

model DescribeInstanceQpsRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-29T06:25:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-bj-6c219f1fd5d4'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API is requested. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST**: the test environment', example='RELEASE'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-02-10T06:03:47Z'),
}

model DescribeInstanceQpsResponseBody = {
  instanceQps?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-29T06:25:00Z'),
      itemValue?: string(name='ItemValue', description='The number of requests sent to the APIs in the instance.', example='500'),
    }
  ](name='MonitorItem')
  }(name='InstanceQps', description='The list of requests sent to the APIs in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceQpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceQpsResponseBody(name='body'),
}

async function describeInstanceQpsWithOptions(request: DescribeInstanceQpsRequest, runtime: Util.RuntimeOptions): DescribeInstanceQpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceQps',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceQps(request: DescribeInstanceQpsRequest): DescribeInstanceQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceQpsWithOptions(request, runtime);
}

model DescribeInstanceSlbConnectRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T15:07:06Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-sz-1574cc7c5a31'),
  sbcName?: string(name='SbcName', description='The statistical metric. Valid values:

*   Maximum
*   Minimum
*   Average', example='Maximum'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-01T02:09:33Z'),
}

model DescribeInstanceSlbConnectResponseBody = {
  instanceSlbConnect?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   InstanceMaxConnection: the maximum number of connections
*   InstanceInactiveConnection: the number of inactive connections
*   InstanceActiveConnection: the number of active connections', example='InstanceActiveConnection'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-09-15T15:07:06Z'),
      itemValue?: string(name='ItemValue', description='The number of concurrent connections in the instance.', example='12'),
    }
  ](name='MonitorItem')
  }(name='InstanceSlbConnect', description='The list of concurrent connections in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model DescribeInstanceSlbConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceSlbConnectResponseBody(name='body'),
}

async function describeInstanceSlbConnectWithOptions(request: DescribeInstanceSlbConnectRequest, runtime: Util.RuntimeOptions): DescribeInstanceSlbConnectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sbcName)) {
    query['SbcName'] = request.sbcName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSlbConnect',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSlbConnect(request: DescribeInstanceSlbConnectRequest): DescribeInstanceSlbConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSlbConnectWithOptions(request, runtime);
}

model DescribeInstanceTrafficRequest {
  endTime?: string(name='EndTime', description='The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-01T06:34:03Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='apigateway-cn-2r426lavr001'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API runs. Valid values:

*   **RELEASE**: the production environment
*   **PRE**: the pre-release environment
*   **TEST: the test environment**', example='RELEASE'),
  startTime?: string(name='StartTime', description='The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-03-31T03:42:00Z'),
}

model DescribeInstanceTrafficResponseBody = {
  instanceTraffic?: {
    monitorItem?: [ 
    {
      item?: string(name='Item', description='The metric. Valid values:

*   inbound: traffic consumed by requests
*   outbound: traffic consumed by responses', example='inbound'),
      itemTime?: string(name='ItemTime', description='The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ', example='2022-04-01T06:34:03Z'),
      itemValue?: string(name='ItemValue', description='The amount of traffic consumed by the requests and responses in the instance.', example='10'),
    }
  ](name='MonitorItem')
  }(name='InstanceTraffic', description='The traffic consumed by the requests and responses in the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model DescribeInstanceTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTrafficResponseBody(name='body'),
}

async function describeInstanceTrafficWithOptions(request: DescribeInstanceTrafficRequest, runtime: Util.RuntimeOptions): DescribeInstanceTrafficResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTraffic',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTraffic(request: DescribeInstanceTrafficRequest): DescribeInstanceTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTrafficWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  enableTagAuthorization?: boolean(name='EnableTagAuthorization', example='false'),
  instanceId?: string(name='InstanceId', example='api-shared-vpc-001'),
  language?: string(name='Language', example='zh'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instanceAttribute?: [ 
    {
      aclId?: string(name='AclId', example='acl-uf6f9zfxfxtp5j9ng3yv4'),
      aclName?: string(name='AclName', example='test'),
      aclStatus?: string(name='AclStatus', example='on'),
      aclType?: string(name='AclType', example='white'),
      classicEgressAddress?: string(name='ClassicEgressAddress', example='10.0.0.1'),
      connectCidrBlocks?: string(name='ConnectCidrBlocks'),
      connectVpcId?: string(name='ConnectVpcId', description='VPC融合类型专享实例联通的用户VPC ID', example='vpc-m5eo7khlb4h4f8y9egsdg'),
      createdTime?: string(name='CreatedTime', example='2021-10-22 15:36:53.0'),
      dedicatedInstanceType?: string(name='DedicatedInstanceType', description='专享实例类型
- vpc_connect：VPC融合类型专享实例
- normal：传统类型专享实例', example='vpc_connect'),
      egressIpv6Enable?: boolean(name='EgressIpv6Enable', example='true'),
      expiredTime?: string(name='ExpiredTime', example='1659801600000'),
      httpsPolicies?: string(name='HttpsPolicies', example='HTTPS2_TLS1_2'),
      IPV6AclId?: string(name='IPV6AclId', example='acl-124resFfs235'),
      IPV6AclName?: string(name='IPV6AclName', example='testIPV6'),
      IPV6AclStatus?: string(name='IPV6AclStatus', example='on'),
      IPV6AclType?: string(name='IPV6AclType', example='black'),
      instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
      instanceCidrBlock?: string(name='InstanceCidrBlock', description='专享实例所在网段
- 172.16.0.0/12
- 192.168.0.0/16', example='192.168.0.0/16'),
      instanceClusterId?: string(name='InstanceClusterId'),
      instanceId?: string(name='InstanceId', example='api-shared-vpc-020'),
      instanceName?: string(name='InstanceName', example='test'),
      instanceRpsLimit?: int32(name='InstanceRpsLimit', example='500'),
      instanceSpec?: string(name='InstanceSpec', example='api.s1.small'),
      instanceSpecAttributes?: {
        specAttribute?: [ 
        {
          localName?: string(name='LocalName'),
          value?: string(name='Value', example='2500'),
        }
      ](name='SpecAttribute')
      }(name='InstanceSpecAttributes'),
      instanceType?: string(name='InstanceType', example='VPC_SHARED'),
      internetEgressAddress?: string(name='InternetEgressAddress', example='47.241.89.244'),
      intranetSegments?: string(name='IntranetSegments'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      networkInterfaceAttributes?: {
        networkInterfaceAttribute?: [ 
        {
          cidrBlock?: string(name='CidrBlock', description='vSwitch的网段。', example='192.168.17.0/24'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='弹性网卡ID', example='eni-bp1e5ag59flni1y2f44w'),
          securityGroupId?: string(name='SecurityGroupId', description='安全组的ID，同一个安全组内的服务可以互相访问。', example='sg-2zeehz13zcyj1kfk3o85'),
          vswitchId?: string(name='VswitchId', description='虚拟交换机ID', example='vsw-2zeqals6rbj51bhjn8b89'),
          zoneId?: string(name='ZoneId', description='可用区ID', example='cn-shenzhen-d'),
        }
      ](name='NetworkInterfaceAttribute')
      }(name='NetworkInterfaceAttributes', description='VPC融合类型专享实例连通的用户VPC内的网络信息'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      status?: string(name='Status', example='RUNNING'),
      supportIpv6?: boolean(name='SupportIpv6', example='true'),
      userVpcId?: string(name='UserVpcId', example='vpc-t***hx****yu9****t0g4'),
      userVswitchId?: string(name='UserVswitchId', example='vsw-t4***eh****d7q****i2f'),
      vipTypeList?: string(name='VipTypeList'),
      vpcEgressAddress?: string(name='VpcEgressAddress', example='100.104.254.0/26'),
      vpcIntranetEnable?: boolean(name='VpcIntranetEnable', example='true'),
      vpcOwnerId?: long(name='VpcOwnerId'),
      vpcSlbIntranetEnable?: boolean(name='VpcSlbIntranetEnable', example='true'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-MAZ5(g,h)'),
      zoneLocalName?: string(name='ZoneLocalName'),
    }
  ](name='InstanceAttribute')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableTagAuthorization)) {
    query['EnableTagAuthorization'] = request.enableTagAuthorization;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeIpControlPolicyItemsRequest {
  ipControlId?: string(name='IpControlId', example='7ea91319a34d48a09b5c9c871d9768b1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyItemId?: string(name='PolicyItemId', example='P151617000829241'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeIpControlPolicyItemsResponseBody = {
  ipControlPolicyItems?: {
    ipControlPolicyItem?: [ 
    {
      appId?: string(name='AppId', example='11112'),
      cidrIp?: string(name='CidrIp', example='113.125.XX.XX;101.11.XX.XX'),
      createTime?: string(name='CreateTime', example='2018-01-17T06:20:08Z'),
      modifiedTime?: string(name='ModifiedTime', example='2018-01-17T06:25:13Z'),
      policyItemId?: string(name='PolicyItemId', example='P151617000829241'),
    }
  ](name='IpControlPolicyItem')
  }(name='IpControlPolicyItems'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeIpControlPolicyItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpControlPolicyItemsResponseBody(name='body'),
}

async function describeIpControlPolicyItemsWithOptions(request: DescribeIpControlPolicyItemsRequest, runtime: Util.RuntimeOptions): DescribeIpControlPolicyItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyItemId)) {
    query['PolicyItemId'] = request.policyItemId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpControlPolicyItems',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlPolicyItemsWithOptions(request, runtime);
}

model DescribeIpControlsRequest {
  ipControlId?: string(name='IpControlId', description='The ID of the ACL. The ID is unique.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  ipControlName?: string(name='IpControlName', description='The name of the ACL.', example='ACL test'),
  ipControlType?: string(name='IpControlType', description='The type of the ACL. Valid values:

*   **ALLOW**: a whitelist
*   **REFUSE**: a blacklist', example='ALLOW'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeIpControlsResponseBody = {
  ipControlInfos?: {
    ipControlInfo?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the ACL was created. The time is displayed in UTC.', example='2018-01-17T05:48:11Z'),
      description?: string(name='Description', description='The description of the ACL.', example='description'),
      ipControlId?: string(name='IpControlId', description='The ID of the ACL.', example='7ea91319a34d48a09b5c9c871d9768b1'),
      ipControlName?: string(name='IpControlName', description='The name of the ACL.', example='testControl11'),
      ipControlType?: string(name='IpControlType', description='The type of the ACL.', example='ALLOW'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the ACL was modified. The time is displayed in UTC.', example='2018-01-17T06:00:38Z'),
      regionId?: string(name='RegionId', description='The ID of the region in which the ACL is deployed.', example='cn-qingdao'),
    }
  ](name='IpControlInfo')
  }(name='IpControlInfos', description='The information about the ACL. The information is an array that consists of IpControlInfo data. The information does not include specific policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeIpControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpControlsResponseBody(name='body'),
}

/**
  * *   This operation is intended for API providers.
  * *   This operation is used to query the ACLs in a region. Region is a system parameter.
  * *   You can filter the query results by ACL ID, name, or type.
  * *   This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~65532~~) operation.
  *
  * @param request DescribeIpControlsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIpControlsResponse
 */
async function describeIpControlsWithOptions(request: DescribeIpControlsRequest, runtime: Util.RuntimeOptions): DescribeIpControlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.ipControlName)) {
    query['IpControlName'] = request.ipControlName;
  }
  if (!Util.isUnset(request.ipControlType)) {
    query['IpControlType'] = request.ipControlType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpControls',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API providers.
  * *   This operation is used to query the ACLs in a region. Region is a system parameter.
  * *   You can filter the query results by ACL ID, name, or type.
  * *   This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~65532~~) operation.
  *
  * @param request DescribeIpControlsRequest
  * @return DescribeIpControlsResponse
 */
async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlsWithOptions(request, runtime);
}

model DescribeLogConfigRequest {
  logType?: string(name='LogType', example='PROVIDER'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeLogConfigResponseBody = {
  logInfos?: {
    logInfo?: [ 
    {
      logType?: string(name='LogType', example='PROVIDER'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      slsLogStore?: string(name='SlsLogStore', example='slsstore'),
      slsProject?: string(name='SlsProject', example='slsproject'),
    }
  ](name='LogInfo')
  }(name='LogInfos'),
  requestId?: string(name='RequestId', example='E3BC2706-ABDB-5B64-A12F-08DFD9E3F339'),
}

model DescribeLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogConfigResponseBody(name='body'),
}

async function describeLogConfigWithOptions(request: DescribeLogConfigRequest, runtime: Util.RuntimeOptions): DescribeLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogConfig',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogConfigWithOptions(request, runtime);
}

model DescribeMarketRemainsQuotaRequest {
  domainName?: string(name='DomainName', example='*.demo.com'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeMarketRemainsQuotaResponseBody = {
  remainsQuota?: long(name='RemainsQuota', example='1000'),
  requestId?: string(name='RequestId', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
}

model DescribeMarketRemainsQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMarketRemainsQuotaResponseBody(name='body'),
}

async function describeMarketRemainsQuotaWithOptions(request: DescribeMarketRemainsQuotaRequest, runtime: Util.RuntimeOptions): DescribeMarketRemainsQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMarketRemainsQuota',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMarketRemainsQuota(request: DescribeMarketRemainsQuotaRequest): DescribeMarketRemainsQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMarketRemainsQuotaWithOptions(request, runtime);
}

model DescribeModelsRequest {
  groupId?: string(name='GroupId', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='30e792398d6c4569b04c0e53a3494381'),
  modelId?: string(name='ModelId', description='The ID of the request.', example='123'),
  modelName?: string(name='ModelName', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='Test'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the model.', example='10'),
}

model DescribeModelsResponseBody = {
  modelDetails?: {
    modelDetail?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The URI of the model.', example='2019-01-29T11:07:48Z'),
      description?: string(name='Description', description='The name of the model.', example='Model Description'),
      groupId?: string(name='GroupId', description='The definition of the model.', example='30e792398d6c4569b04c0e53a3494381'),
      modelId?: string(name='ModelId', description='*   Fuzzy queries are supported.', example='766c0b9538a04bdf974953b5576783ba'),
      modelName?: string(name='ModelName', description='The ID of the model.', example='Test'),
      modelRef?: string(name='ModelRef', description='Obtains the created models of an API group.', example='https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba'),
      modifiedTime?: string(name='ModifiedTime', description='The definition of the model description.', example='2019-01-29T11:07:48Z'),
      schema?: string(name='Schema', description='The time when the model was created.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails', description='The ID of the API group to which the model belongs.'),
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned information about models. It is an array consisting of ModelDetail data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='40306469-2FB5-417A-B723-AF1F4A4FA204'),
  totalCount?: int32(name='TotalCount', description='The last modification time of the model.', example='1'),
}

model DescribeModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModelsResponseBody(name='body'),
}

/**
  * The name of the model.
  *
  * @param request DescribeModelsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeModelsResponse
 */
async function describeModelsWithOptions(request: DescribeModelsRequest, runtime: Util.RuntimeOptions): DescribeModelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeModels',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the model.
  *
  * @param request DescribeModelsRequest
  * @return DescribeModelsResponse
 */
async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelsWithOptions(request, runtime);
}

model DescribePluginApisRequest {
  apiId?: string(name='ApiId', example='c6b0dd188b0e4e408e12f926********'),
  apiName?: string(name='ApiName'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId', example='231a4bb81ee94da785733c29********'),
  method?: string(name='Method', example='GET'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  path?: string(name='Path', example='/sendVerifyCode'),
  pluginId?: string(name='PluginId', example='bf6583efcef44c51adb00c4e********'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePluginApisResponseBody = {
  apiSummarys?: {
    apiPluginSummary?: [ 
    {
      apiId?: string(name='ApiId', example='accc8c68b7294b1cb4928741********'),
      apiName?: string(name='ApiName', example='fhosQueryDayOfStock_V2'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='5f51f89261854fd9ad5116be********'),
      groupName?: string(name='GroupName', example='myGroup2'),
      method?: string(name='Method', example='GET'),
      path?: string(name='Path', example='/mqTest'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      stageName?: string(name='StageName', example='RELEASE'),
    }
  ](name='ApiPluginSummary')
  }(name='ApiSummarys'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F9C5C4A5-BC6C-57A3-839F-AB08********'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribePluginApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginApisResponseBody(name='body'),
}

async function describePluginApisWithOptions(request: DescribePluginApisRequest, runtime: Util.RuntimeOptions): DescribePluginApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePluginApis(request: DescribePluginApisRequest): DescribePluginApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginApisWithOptions(request, runtime);
}

model DescribePluginSchemasRequest {
  language?: string(name='Language', example='en'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePluginSchemasResponseBody = {
  pluginSchemas?: {
    pluginSchema?: [ 
    {
      description?: string(name='Description', example='plugin scheme description'),
      documentId?: string(name='DocumentId', example='4107**'),
      name?: string(name='Name', example='VPC_C'),
      supportClassic?: boolean(name='SupportClassic', example='true'),
      title?: string(name='Title', example='plugin schema title'),
    }
  ](name='PluginSchema')
  }(name='PluginSchemas'),
  requestId?: string(name='RequestId', example='2D39D1B3-8548-508A-9CE2-7F4A3F2A7989'),
}

model DescribePluginSchemasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginSchemasResponseBody(name='body'),
}

async function describePluginSchemasWithOptions(request: DescribePluginSchemasRequest, runtime: Util.RuntimeOptions): DescribePluginSchemasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginSchemas',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePluginSchemas(request: DescribePluginSchemasRequest): DescribePluginSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginSchemasWithOptions(request, runtime);
}

model DescribePluginTemplatesRequest {
  language?: string(name='Language', example='zh'),
  pluginName?: string(name='PluginName', example='jwtAuth'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePluginTemplatesResponseBody = {
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  templates?: {
    template?: [ 
    {
      description?: string(name='Description', example='balabala'),
      documentAnchor?: string(name='DocumentAnchor', example='anchor'),
      documentId?: string(name='DocumentId', example='41079'),
      sample?: string(name='Sample', example='1'),
      title?: string(name='Title', example='template title'),
    }
  ](name='Template')
  }(name='Templates'),
}

model DescribePluginTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginTemplatesResponseBody(name='body'),
}

async function describePluginTemplatesWithOptions(request: DescribePluginTemplatesRequest, runtime: Util.RuntimeOptions): DescribePluginTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pluginName)) {
    query['PluginName'] = request.pluginName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginTemplates',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePluginTemplates(request: DescribePluginTemplatesRequest): DescribePluginTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginTemplatesWithOptions(request, runtime);
}

model DescribePluginsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  pluginId?: string(name='PluginId', example='a96926e82f994915a8da40a119374537'),
  pluginName?: string(name='PluginName', example='testPlugin'),
  pluginType?: string(name='PluginType', example='cors'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag', example='Key， Value'),
}

model DescribePluginsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2019-01-11T09:29:58Z'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime', example='2019-01-11T09:29:58Z'),
      pluginData?: string(name='PluginData', example='{"unit":"MINUTE","apiDefault":20}'),
      pluginId?: string(name='PluginId', example='9a3f1a5279434f2ba74ccd91c295af9f'),
      pluginName?: string(name='PluginName', example='firstPlugin'),
      pluginType?: string(name='PluginType', example='trafficControl'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key', example='testkey'),
          value?: string(name='Value', example='tetstvalue'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='PluginAttribute')
  }(name='Plugins'),
  requestId?: string(name='RequestId', example='46373DC4-19F1-4DC8-8C31-1107289BB5E0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribePluginsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginsResponseBody(name='body'),
}

async function describePluginsWithOptions(request: DescribePluginsRequest, runtime: Util.RuntimeOptions): DescribePluginsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.pluginName)) {
    query['PluginName'] = request.pluginName;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePlugins',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePlugins(request: DescribePluginsRequest): DescribePluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginsWithOptions(request, runtime);
}

model DescribePluginsByApiRequest {
  apiId?: string(name='ApiId', description='The ID of the API.', example='93f4ead4080c4b2da70b7f81f50ae459'),
  groupId?: string(name='GroupId', description='The ID of the group to which the API belongs.', example='3c7a38392e764718ad7673e7b7f535d4'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The environment in which the API is running. Valid values:

*   **RELEASE**: production
*   **PRE**: staging
*   **TEST**: test', example='RELEASE'),
}

model DescribePluginsByApiResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the plug-in was created. The time is displayed in UTC.', example='2019-01-11T09:29:58Z'),
      description?: string(name='Description', description='The description of the plug-in.', example='Traffic throttling'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the plug-in was last modified. The time is displayed in UTC.', example='2019-01-11T09:29:58Z'),
      pluginData?: string(name='PluginData', description='The definition statement of the plug-in.', example='{\\"unit\\":\\"MINUTE\\",\\"apiDefault\\":20}'),
      pluginId?: string(name='PluginId', description='The ID of the plug-in.', example='9a3f1a5279434f2ba74ccd91c295af9f'),
      pluginName?: string(name='PluginName', description='The name of the plug-in.', example='firstPlugin'),
      pluginType?: string(name='PluginType', description='The type of the plug-in.', example='trafficControl'),
      regionId?: string(name='RegionId', description='The region where the plug-in resides.', example='cn-qingdao'),
    }
  ](name='PluginAttribute')
  }(name='Plugins', description='The plug-in information. The information is an array that consists of PluginAttribute data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46373DC4-19F1-4DC8-8C31-1107289BB5E0'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribePluginsByApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginsByApiResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   This operation supports pagination.
  *
  * @param request DescribePluginsByApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribePluginsByApiResponse
 */
async function describePluginsByApiWithOptions(request: DescribePluginsByApiRequest, runtime: Util.RuntimeOptions): DescribePluginsByApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginsByApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API callers.
  * *   This operation supports pagination.
  *
  * @param request DescribePluginsByApiRequest
  * @return DescribePluginsByApiResponse
 */
async function describePluginsByApi(request: DescribePluginsByApiRequest): DescribePluginsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginsByApiWithOptions(request, runtime);
}

model DescribePurchasedApiGroupRequest {
  groupId?: string(name='GroupId', example='102b631ae1094e33a77c45312226184e'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePurchasedApiGroupResponseBody = {
  description?: string(name='Description', example='api group description'),
  domains?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName', example='test_domain.com'),
    }
  ](name='DomainItem')
  }(name='Domains'),
  groupId?: string(name='GroupId', example='48977d7b96074966a7c9c2a8872d7e06'),
  groupName?: string(name='GroupName', example='Weather'),
  purchasedTime?: string(name='PurchasedTime', example='2021-12-19T00:00:00'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  requestId?: string(name='RequestId', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
  status?: string(name='Status', example='NORMAL'),
}

model DescribePurchasedApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApiGroupResponseBody(name='body'),
}

async function describePurchasedApiGroupWithOptions(request: DescribePurchasedApiGroupRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApiGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupWithOptions(request, runtime);
}

model DescribePurchasedApiGroupsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType', example='POSTPAID'),
      description?: string(name='Description', example='1'),
      expireTime?: string(name='ExpireTime', example='2021-12-19T00:00:00'),
      groupId?: string(name='GroupId', example='8e91f23f88f94348855b82c9a73209f3'),
      groupName?: string(name='GroupName', example='group1'),
      invokeTimesMax?: long(name='InvokeTimesMax', example='10'),
      invokeTimesNow?: long(name='InvokeTimesNow', example='10'),
      purchasedTime?: string(name='PurchasedTime', example='2021-12-19T00:00:00'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      status?: string(name='Status', example='NORMAL'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
  requestId?: string(name='RequestId', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribePurchasedApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroupsWithOptions(request: DescribePurchasedApiGroupsRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApiGroups',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupsWithOptions(request, runtime);
}

model DescribePurchasedApisRequest {
  apiId?: string(name='ApiId', example='3b81fd160f5645e097cc8855d75a1cf6'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId', example='d27ad517be5f4c95ac3631780a8f4d50'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
  visibility?: string(name='Visibility', example='PUBLIC'),
}

model DescribePurchasedApisResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  purchasedApis?: {
    purchasedApi?: [ 
    {
      apiId?: string(name='ApiId', example='eb6e54c1576d41149746e8e69b0a0792'),
      apiName?: string(name='ApiName', example='gw_rado_tissot_'),
      deployedTime?: string(name='DeployedTime', example='2021-06-1113:57:38'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId', example='3013a55c0c44483f984d26df27120513'),
      groupName?: string(name='GroupName', example='DMS_DEFAULT_GROUP_408589'),
      modifiedTime?: string(name='ModifiedTime', example='2021-06-11T13:57:38+08:00'),
      purchasedTime?: string(name='PurchasedTime', example='2021-06-11T13:57:38+08:00'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      stageName?: string(name='StageName', example='TEST'),
      visibility?: string(name='Visibility', example='PUBLIC'),
    }
  ](name='PurchasedApi')
  }(name='PurchasedApis'),
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribePurchasedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApisWithOptions(request: DescribePurchasedApisRequest, runtime: Util.RuntimeOptions): DescribePurchasedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApisWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  language?: string(name='Language', example='zh'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='apigateway.cn-shenzhen.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
    }
  ](name='Region')
  }(name='Regions', example='cn-huhehaote'),
  requestId?: string(name='RequestId', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSignaturesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureName?: string(name='SignatureName', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='backendsignature'),
}

model DescribeSignaturesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned signature information. It is an array consisting of SignatureInfo data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureInfos?: {
    signatureInfo?: [ 
    {
      createdTime?: string(name='CreatedTime', description='*   This API is intended for API providers.
*   This operation is used to query the backend signature keys in a Region. Region is a system parameter.', example='2016-07-23T08:28:48Z'),
      modifiedTime?: string(name='ModifiedTime', description='The Secret value of the backend signature key.', example='2016-07-24T08:28:48Z'),
      regionId?: string(name='RegionId', description='Queries backend signature keys.', example='cn-qingdao'),
      signatureId?: string(name='SignatureId', description='The name of the backend signature key.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureKey?: string(name='SignatureKey', description='The region where the key is located.', example='qwertyuiop'),
      signatureName?: string(name='SignatureName', description='The creation time of the key.', example='backendsignature'),
      signatureSecret?: string(name='SignatureSecret', description='The Key value of the backend signature key.', example='asdfghjkl'),
    }
  ](name='SignatureInfo')
  }(name='SignatureInfos', description='The ID of the backend signature key.'),
  totalCount?: int32(name='TotalCount', description='The last modification time of the key.', example='20'),
}

model DescribeSignaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSignaturesResponseBody(name='body'),
}

/**
  * The IDs of the keys to query.
  *
  * @param request DescribeSignaturesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSignaturesResponse
 */
async function describeSignaturesWithOptions(request: DescribeSignaturesRequest, runtime: Util.RuntimeOptions): DescribeSignaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.signatureName)) {
    query['SignatureName'] = request.signatureName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSignatures',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The IDs of the keys to query.
  *
  * @param request DescribeSignaturesRequest
  * @return DescribeSignaturesResponse
 */
async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesWithOptions(request, runtime);
}

model DescribeSignaturesByApiRequest {
  apiId?: string(name='ApiId', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6'),
  groupId?: string(name='GroupId', description='The runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The returned signature key information. It is an array consisting of SignatureItem data.', example='TEST'),
}

model DescribeSignaturesByApiResponseBody = {
  requestId?: string(name='RequestId', description='The time when the key was bound.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatures?: {
    signatureItem?: [ 
    {
      boundTime?: string(name='BoundTime', description='The name of the backend signature key.', example='2016-07-23T08:28:48Z'),
      signatureId?: string(name='SignatureId', description='*   This API is intended for API providers.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      signatureName?: string(name='SignatureName', description='Queries the backend signature keys that are bound to a specified API.', example='mysecret'),
    }
  ](name='SignatureItem')
  }(name='Signatures', description='The ID of the backend signature key.'),
}

model DescribeSignaturesByApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSignaturesByApiResponseBody(name='body'),
}

/**
  * The ID of the group to which the API belongs.
  *
  * @param request DescribeSignaturesByApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSignaturesByApiResponse
 */
async function describeSignaturesByApiWithOptions(request: DescribeSignaturesByApiRequest, runtime: Util.RuntimeOptions): DescribeSignaturesByApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSignaturesByApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the group to which the API belongs.
  *
  * @param request DescribeSignaturesByApiRequest
  * @return DescribeSignaturesByApiResponse
 */
async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesByApiWithOptions(request, runtime);
}

model DescribeSummaryDataRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSummaryDataResponseBody = {
  expireInstanceNum?: int32(name='ExpireInstanceNum', example='1'),
  region?: string(name='Region', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  usageApiNum?: int32(name='UsageApiNum', example='10'),
  usageGroupNum?: int32(name='UsageGroupNum', example='1'),
  usageInstanceNum?: int32(name='UsageInstanceNum', example='1'),
}

model DescribeSummaryDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSummaryDataResponseBody(name='body'),
}

async function describeSummaryDataWithOptions(request: DescribeSummaryDataRequest, runtime: Util.RuntimeOptions): DescribeSummaryDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSummaryData',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSummaryData(request: DescribeSummaryDataRequest): DescribeSummaryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryDataWithOptions(request, runtime);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId', description='Examples', example='0CCDF65E-6050-412D-AD68-FA3D9196836C'),
  systemParams?: {
    systemParamItem?: [ 
    {
      demoValue?: string(name='DemoValue', description='Client IP Address', example='192.168.1.1'),
      description?: string(name='Description', description='The name of the parameter.', example='The type of the parameter.'),
      paramName?: string(name='ParamName', description='*   This API is intended for API callers.
*   The response of this API contains the system parameters that are optional in API definitions.', example='CaClientIp'),
      paramType?: string(name='ParamType', description='Queries the common parameters supported by the system.', example='string'),
    }
  ](name='SystemParamItem')
  }(name='SystemParams', description='The description of a parameter.'),
}

model DescribeSystemParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSystemParametersResponseBody(name='body'),
}

/**
  * The returned information about system parameters. It is an array that consists of SystemParam data.
  *
  * @param request DescribeSystemParametersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSystemParametersResponse
 */
async function describeSystemParametersWithOptions(request: DescribeSystemParametersRequest, runtime: Util.RuntimeOptions): DescribeSystemParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSystemParameters',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The returned information about system parameters. It is an array that consists of SystemParam data.
  *
  * @param request DescribeSystemParametersRequest
  * @return DescribeSystemParametersResponse
 */
async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParametersWithOptions(request, runtime);
}

model DescribeTrafficControlsRequest {
  apiId?: string(name='ApiId', description='The name of the throttling policy.', example='3b81fd160f5645e097cc8855d75a1cf6'),
  groupId?: string(name='GroupId', description='The environment name. This parameter must be specified together with GroupId and ApiId. Valid values:********

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='ThrottlingTest', example='RELEASE'),
  trafficControlId?: string(name='TrafficControlId', description='The specified API ID. This parameter must be specified together with GroupId and StageName.', example='tf123456'),
  trafficControlName?: string(name='TrafficControlName', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='The number of entries to return on each page. Maximum value: 100. Default value: 10.'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The returned throttling policy information. It is an array consisting of TrafficControl data.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='93D91A99-F093-4596-87BA-3C4FBFD3FD8A'),
  totalCount?: int32(name='TotalCount', description='The default throttling value for each user.', example='1'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault', description='The description of the throttling policy.', example='20000'),
      appDefault?: int32(name='AppDefault', description='The creation time (UTC) of the throttling policy.', example='8000'),
      createdTime?: string(name='CreatedTime', description='The type of the special throttling policy. Valid values:

*   **APP**
*   **USER**', example='2016-01-27T10:19:39Z'),
      description?: string(name='Description', description='The name of the throttling policy.', example='test'),
      modifiedTime?: string(name='ModifiedTime', description='The unit to be used in the throttling policy. Valid values:

*   MINUTE
*   HOUR
*   DAY', example='2016-01-27T10:34:38Z'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType', description='The throttling value.', example='USER'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey', description='Queries custom throttling policies and their details. Conditional queries are supported.', example='test_wg@aliyun.com'),
              trafficValue?: int32(name='TrafficValue', description='*   This API is intended for API providers.
*   This API can be used to query all existing throttling policies (including special throttling policies) and their details.
*   You can specify query conditions. For example, you can query the throttling policies bound to a specified API or in a specified environment.', example='100'),
            }
          ](name='Special')
          }(name='Specials', description='The AppId or user account corresponding to SpecialType.'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies', description='The returned information about a special throttling policy. It is an array consisting of Special data.'),
      trafficControlId?: string(name='TrafficControlId', description='The returned information about a special throttling policy. It is an array consisting of SpecialPolicy data.', example='cfed6c970d45481dbe136d6b5ac68c41'),
      trafficControlName?: string(name='TrafficControlName', description='The ID of the throttling policy.', example='wulingtestq1'),
      trafficControlUnit?: string(name='TrafficControlUnit', description='The default throttling value for each app.', example='Minute'),
      userDefault?: int32(name='UserDefault', description='The last modification time (UTC) of the throttling policy.', example='15000'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls', description='The default throttling value for each API.'),
}

model DescribeTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrafficControlsResponseBody(name='body'),
}

/**
  * The specified group ID. This parameter must be specified together with ApiId and StageName.
  *
  * @param request DescribeTrafficControlsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTrafficControlsResponse
 */
async function describeTrafficControlsWithOptions(request: DescribeTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrafficControls',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The specified group ID. This parameter must be specified together with ApiId and StageName.
  *
  * @param request DescribeTrafficControlsRequest
  * @return DescribeTrafficControlsResponse
 */
async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsWithOptions(request, runtime);
}

model DescribeTrafficControlsByApiRequest {
  apiId?: string(name='ApiId', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6'),
  groupId?: string(name='GroupId', description='The runtime environment of the API. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The returned throttling policy information. It is an array consisting of TrafficControlItem data.', example='RELEASE'),
}

model DescribeTrafficControlsByApiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  trafficControlItems?: {
    trafficControlItem?: [ 
    {
      boundTime?: string(name='BoundTime', description='*   This API is intended for API providers.', example='2016-07-23T08:28:48Z'),
      trafficControlItemId?: string(name='TrafficControlItemId', description='The name of the throttling policy.', example='dd05f1c54d6749eda95f9fa6d491449a'),
      trafficControlItemName?: string(name='TrafficControlItemName', description='Queries the throttling policy that is bound to a specific API.', example='mysecret'),
    }
  ](name='TrafficControlItem')
  }(name='TrafficControlItems', description='The binding time of the policy.'),
}

model DescribeTrafficControlsByApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrafficControlsByApiResponseBody(name='body'),
}

/**
  * The ID of the API.
  *
  * @param request DescribeTrafficControlsByApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTrafficControlsByApiResponse
 */
async function describeTrafficControlsByApiWithOptions(request: DescribeTrafficControlsByApiRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsByApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrafficControlsByApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API.
  *
  * @param request DescribeTrafficControlsByApiRequest
  * @return DescribeTrafficControlsByApiResponse
 */
async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsByApiWithOptions(request, runtime);
}

model DescribeUpdateBackendTaskRequest {
  operationUid?: string(name='OperationUid', example='4e13c3e0c44c4a4ebb5231264eeb9bc1'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUpdateBackendTaskResponseBody = {
  apiUpdateBackendResults?: {
    apiUpdateBackendResult?: [ 
    {
      apiName?: string(name='ApiName', example='checkin_linechart_today'),
      apiUid?: string(name='ApiUid', example='14faa7ba0572445685866ddb6a6f19da'),
      backendId?: string(name='BackendId', example='c09b078bcb8f4ade9677bd8b18cdf43f'),
      errorMsg?: string(name='ErrorMsg', example='Failed'),
      groupId?: string(name='GroupId', example='3013a55c0c44483f984d26df27120513'),
      groupName?: string(name='GroupName', example='imotob1'),
      stageId?: string(name='StageId', example='d8f2f54f3309458b8aaceb36c01c2dd9'),
      stageName?: string(name='StageName', example='RELEASE'),
      updateStatus?: string(name='UpdateStatus', example='OVER'),
    }
  ](name='ApiUpdateBackendResult')
  }(name='ApiUpdateBackendResults'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DescribeUpdateBackendTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUpdateBackendTaskResponseBody(name='body'),
}

async function describeUpdateBackendTaskWithOptions(request: DescribeUpdateBackendTaskRequest, runtime: Util.RuntimeOptions): DescribeUpdateBackendTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationUid)) {
    query['OperationUid'] = request.operationUid;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUpdateBackendTask',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUpdateBackendTask(request: DescribeUpdateBackendTaskRequest): DescribeUpdateBackendTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpdateBackendTaskWithOptions(request, runtime);
}

model DescribeUpdateVpcInfoTaskRequest {
  operationUid?: string(name='OperationUid', example='7d341787517a47afaaef9cc1bdb7acce'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUpdateVpcInfoTaskResponseBody = {
  apiUpdateVpcInfoResults?: {
    apiUpdateVpcInfoResult?: [ 
    {
      apiName?: string(name='ApiName', example='api_test2'),
      apiUid?: string(name='ApiUid', example='86364e7c166c47ba819b3f8f95ac0913'),
      errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
      groupId?: string(name='GroupId', example='e8da6f6346184da9a30d0dc1888b1f3b'),
      groupName?: string(name='GroupName', example='test'),
      stageId?: string(name='StageId', example='fe952b95072747e2a8dfd336bcff8d7f'),
      stageName?: string(name='StageName', example='RELEASE'),
      updateStatus?: string(name='UpdateStatus', example='success'),
    }
  ](name='ApiUpdateVpcInfoResult')
  }(name='ApiUpdateVpcInfoResults'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model DescribeUpdateVpcInfoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUpdateVpcInfoTaskResponseBody(name='body'),
}

async function describeUpdateVpcInfoTaskWithOptions(request: DescribeUpdateVpcInfoTaskRequest, runtime: Util.RuntimeOptions): DescribeUpdateVpcInfoTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationUid)) {
    query['OperationUid'] = request.operationUid;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUpdateVpcInfoTask',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUpdateVpcInfoTask(request: DescribeUpdateVpcInfoTaskRequest): DescribeUpdateVpcInfoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpdateVpcInfoTaskWithOptions(request, runtime);
}

model DescribeVpcAccessesRequest {
  instanceId?: string(name='InstanceId', example='10.199.26.***'),
  name?: string(name='Name', example='wuying-edm-svc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  port?: string(name='Port', example='8080'),
  securityToken?: string(name='SecurityToken'),
  vpcAccessId?: string(name='VpcAccessId', example='vpc-*****ssds24'),
  vpcId?: string(name='VpcId', example='vpc-uf657qec7lx42paw3qxxx'),
}

model DescribeVpcAccessesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8883AC74-259D-4C0B-99FC-0B7F9A588B2F'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpcAccessAttributes?: {
    vpcAccessAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', example='2017-01-30T04:10:19Z'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId', example='i-uf6bzcg1pr4oh5jjmxxx'),
      name?: string(name='Name', example='test'),
      port?: int32(name='Port', example='80'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      vpcAccessId?: string(name='VpcAccessId', example='vpc-*****ssds24'),
      vpcId?: string(name='VpcId', example='vpc-uf657qec7lx42paw3qxxx'),
      vpcTargetHostName?: string(name='VpcTargetHostName', example='hos-a***.fh-**nc.com'),
    }
  ](name='VpcAccessAttribute')
  }(name='VpcAccessAttributes'),
}

model DescribeVpcAccessesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcAccessesResponseBody(name='body'),
}

async function describeVpcAccessesWithOptions(request: DescribeVpcAccessesRequest, runtime: Util.RuntimeOptions): DescribeVpcAccessesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcAccessId)) {
    query['VpcAccessId'] = request.vpcAccessId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcAccesses',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcAccessesWithOptions(request, runtime);
}

model DescribeZonesRequest {
  language?: string(name='Language', example='zh'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='9324B68F-9863-5722-A0FD-0798E2B02A0E'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-MAZ2(j,g)'),
    }
  ](name='Zone')
  }(name='Zones', example='{\\"Zone\\": [{\\"ZoneId\\": \\"cn-hangzhou-i\\"}]}'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachPluginRequest {
  apiId?: string(name='ApiId', example='19a2846d8e8541c788c6be740035eb68'),
  groupId?: string(name='GroupId', example='93b87279e54c4c0baeb7113cdf9c67f5'),
  pluginId?: string(name='PluginId', example='05df2b52a3644a3a8b1935ab8ab59e9d'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='RELEASE'),
}

model DetachPluginResponseBody = {
  requestId?: string(name='RequestId', example='AD00F8C0-311B-54A9-ADE2-2436771012DA'),
}

model DetachPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachPluginResponseBody(name='body'),
}

async function detachPluginWithOptions(request: DetachPluginRequest, runtime: Util.RuntimeOptions): DetachPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachPlugin',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachPlugin(request: DetachPluginRequest): DetachPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachPluginWithOptions(request, runtime);
}

model DisableInstanceAccessControlRequest {
  aclId?: string(name='AclId', example='acl-grgqc0mnuhkqciwtam'),
  addressIPVersion?: string(name='AddressIPVersion', example='ipv4'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  securityToken?: string(name='SecurityToken'),
}

model DisableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model DisableInstanceAccessControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableInstanceAccessControlResponseBody(name='body'),
}

async function disableInstanceAccessControlWithOptions(request: DisableInstanceAccessControlRequest, runtime: Util.RuntimeOptions): DisableInstanceAccessControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.addressIPVersion)) {
    query['AddressIPVersion'] = request.addressIPVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableInstanceAccessControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableInstanceAccessControl(request: DisableInstanceAccessControlRequest): DisableInstanceAccessControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInstanceAccessControlWithOptions(request, runtime);
}

model DryRunSwaggerRequest {
  data?: string(name='Data', example='"A Swagger API definition in YAML"'),
  dataFormat?: string(name='DataFormat', example='yaml'),
  globalCondition?: map[string]any(name='GlobalCondition', example='{}'),
  groupId?: string(name='GroupId', example='d633cf5524f841b9950e245b191bdabf'),
  overwrite?: boolean(name='Overwrite', example='true'),
  securityToken?: string(name='SecurityToken'),
}

model DryRunSwaggerShrinkRequest {
  data?: string(name='Data', example='"A Swagger API definition in YAML"'),
  dataFormat?: string(name='DataFormat', example='yaml'),
  globalConditionShrink?: string(name='GlobalCondition', example='{}'),
  groupId?: string(name='GroupId', example='d633cf5524f841b9950e245b191bdabf'),
  overwrite?: boolean(name='Overwrite', example='true'),
  securityToken?: string(name='SecurityToken'),
}

model DryRunSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', example='api already exists : apiUid ===> 8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', example='post'),
      path?: string(name='Path', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  globalCondition?: string(name='GlobalCondition', example='{}'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', example='Not Found'),
      groupId?: string(name='GroupId', example='36d4bcfaec1946e1870d90b2d7519710'),
      modelName?: string(name='ModelName', example='Region'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId', example='b2d552ed90ca435b86f7bf8d45414793'),
      modelName?: string(name='ModelName', example='NewInstance'),
      modelOperation?: string(name='ModelOperation'),
      modelUid?: string(name='ModelUid', example='ec1946e1870d90b2d7519'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
  success?: {
    apiDryRunSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation', example='CREATE'),
      apiSwagger?: string(name='ApiSwagger'),
      apiUid?: string(name='ApiUid', example='8e274ec61cf6468e83b68371956831cb'),
      httpMethod?: string(name='HttpMethod', example='get'),
      path?: string(name='Path', example='/http/get/mapping'),
    }
  ](name='ApiDryRunSwaggerSuccess')
  }(name='Success'),
}

model DryRunSwaggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DryRunSwaggerResponseBody(name='body'),
}

async function dryRunSwaggerWithOptions(tmpReq: DryRunSwaggerRequest, runtime: Util.RuntimeOptions): DryRunSwaggerResponse {
  Util.validateModel(tmpReq);
  var request = new DryRunSwaggerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.globalCondition)) {
    request.globalConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.globalCondition, 'GlobalCondition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dataFormat)) {
    query['DataFormat'] = request.dataFormat;
  }
  if (!Util.isUnset(request.globalConditionShrink)) {
    query['GlobalCondition'] = request.globalConditionShrink;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DryRunSwagger',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dryRunSwagger(request: DryRunSwaggerRequest): DryRunSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return dryRunSwaggerWithOptions(request, runtime);
}

model EnableInstanceAccessControlRequest {
  aclId?: string(name='AclId', example='acl-bp11escro2et2tioscy52'),
  aclType?: string(name='AclType', example='black'),
  addressIPVersion?: string(name='AddressIPVersion'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  securityToken?: string(name='SecurityToken'),
}

model EnableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model EnableInstanceAccessControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableInstanceAccessControlResponseBody(name='body'),
}

async function enableInstanceAccessControlWithOptions(request: EnableInstanceAccessControlRequest, runtime: Util.RuntimeOptions): EnableInstanceAccessControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.addressIPVersion)) {
    query['AddressIPVersion'] = request.addressIPVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableInstanceAccessControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableInstanceAccessControl(request: EnableInstanceAccessControlRequest): EnableInstanceAccessControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstanceAccessControlWithOptions(request, runtime);
}

model ImportOASRequest {
  authType?: string(name='AuthType', description='API安全认证类型，目前可以取值：

- **APP**：只允许已授权的APP调用
- **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
     - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制。', example='APP'),
  backendName?: string(name='BackendName', example='testBackendService'),
  data?: string(name='Data', example='swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Petstore 2.0"
basePath: "/"
schemes:
- "https"
- "http"
paths:
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      operationId: "findPetsByStatus"
      parameters:
      - name: "status"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"'),
  groupId?: string(name='GroupId', example='08ae4aa0f95e4321849ee57f4e0b3077'),
  ignoreWarning?: boolean(name='IgnoreWarning', example='true'),
  OASVersion?: string(name='OASVersion', example='OAS2'),
  overwrite?: boolean(name='Overwrite', example='true'),
  requestMode?: string(name='RequestMode', example='PASSTHROUGH'),
  securityToken?: string(name='SecurityToken'),
  skipDryRun?: boolean(name='SkipDryRun', example='true'),
}

model ImportOASResponseBody = {
  errorMessages?: {
    errorMessage?: [ string ](name='ErrorMessage')
  }(name='ErrorMessages'),
  failedApis?: {
    failedApi?: [ 
    {
      errorMsg?: string(name='ErrorMsg', example='Invalid Api Definition.'),
      httpMethod?: string(name='HttpMethod', example='POST'),
      path?: string(name='Path', example='/st1'),
    }
  ](name='FailedApi')
  }(name='FailedApis'),
  failedModels?: {
    failedModel?: [ 
    {
      errorMsg?: string(name='ErrorMsg', example='Invalid Model Definition.'),
      groupId?: string(name='GroupId', example='2c1bc62e19614cc68c6b0b484bc9c5db'),
      modelName?: string(name='ModelName', example='test'),
    }
  ](name='FailedModel')
  }(name='FailedModels'),
  operationId?: string(name='OperationId', example='c16a1880f5164d779f6a54f64d997cd9'),
  requestId?: string(name='RequestId', example='E7FE7172-AA75-5880-B6F7-C00893E9BC06'),
  successApis?: {
    successApi?: [ 
    {
      apiId?: string(name='ApiId', example='92af1abffc2443eaa2b815fdbd9c13f1'),
      apiOperation?: string(name='ApiOperation', example='CREATE'),
      httpMethod?: string(name='HttpMethod', example='POST'),
      path?: string(name='Path', example='/st1'),
    }
  ](name='SuccessApi')
  }(name='SuccessApis'),
  successModels?: {
    successModel?: [ 
    {
      groupId?: string(name='GroupId', example='feaccf67040643bcbdedb253e59eb527'),
      modelName?: string(name='ModelName', example='test'),
      modelOperation?: string(name='ModelOperation', example='CREATE'),
      modelUid?: string(name='ModelUid', example='1r4efwee19614cc68c6b0b484bc9c5dbs'),
    }
  ](name='SuccessModel')
  }(name='SuccessModels'),
  warningMessages?: {
    warningMessage?: [ string ](name='WarningMessage')
  }(name='WarningMessages'),
}

model ImportOASResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportOASResponseBody(name='body'),
}

async function importOASWithOptions(request: ImportOASRequest, runtime: Util.RuntimeOptions): ImportOASResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.backendName)) {
    query['BackendName'] = request.backendName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ignoreWarning)) {
    query['IgnoreWarning'] = request.ignoreWarning;
  }
  if (!Util.isUnset(request.OASVersion)) {
    query['OASVersion'] = request.OASVersion;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.requestMode)) {
    query['RequestMode'] = request.requestMode;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.skipDryRun)) {
    query['SkipDryRun'] = request.skipDryRun;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportOAS',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importOAS(request: ImportOASRequest): ImportOASResponse {
  var runtime = new Util.RuntimeOptions{};
  return importOASWithOptions(request, runtime);
}

model ImportSwaggerRequest {
  data?: string(name='Data', example='"A Swagger API definition in YAML"'),
  dataFormat?: string(name='DataFormat', description='382271', example='yaml'),
  dryRun?: boolean(name='DryRun', example='true'),
  globalCondition?: map[string]any(name='GlobalCondition', description='Creates an API by importing Swagger-compliant data.', example='{}'),
  groupId?: string(name='GroupId'),
  overwrite?: boolean(name='Overwrite', description='8e274ec61cf6468e83b68371956831cb', example='true'),
  securityToken?: string(name='SecurityToken'),
}

model ImportSwaggerShrinkRequest {
  data?: string(name='Data', example='"A Swagger API definition in YAML"'),
  dataFormat?: string(name='DataFormat', description='382271', example='yaml'),
  dryRun?: boolean(name='DryRun', example='true'),
  globalConditionShrink?: string(name='GlobalCondition', description='Creates an API by importing Swagger-compliant data.', example='{}'),
  groupId?: string(name='GroupId'),
  overwrite?: boolean(name='Overwrite', description='8e274ec61cf6468e83b68371956831cb', example='true'),
  securityToken?: string(name='SecurityToken'),
}

model ImportSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      httpMethod?: string(name='HttpMethod', example='post'),
      path?: string(name='Path', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg', example='error msg'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName', example='Region'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName', example='NewInstance'),
      modelOperation?: string(name='ModelOperation'),
      modelUid?: string(name='ModelUid', example='d4bcfaec1946e1870d'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
  requestId?: string(name='RequestId', example='647CEF05-404C-4125-B3D7-44792EB77392'),
  success?: {
    apiImportSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation', example='CREATE'),
      apiUid?: string(name='ApiUid'),
      httpMethod?: string(name='HttpMethod', example='get'),
      path?: string(name='Path', example='/http/get/mapping'),
    }
  ](name='ApiImportSwaggerSuccess')
  }(name='Success'),
}

model ImportSwaggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportSwaggerResponseBody(name='body'),
}

/**
  * 0009db9c828549768a200320714b8930
  *
  * @param tmpReq ImportSwaggerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportSwaggerResponse
 */
async function importSwaggerWithOptions(tmpReq: ImportSwaggerRequest, runtime: Util.RuntimeOptions): ImportSwaggerResponse {
  Util.validateModel(tmpReq);
  var request = new ImportSwaggerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.globalCondition)) {
    request.globalConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.globalCondition, 'GlobalCondition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dataFormat)) {
    query['DataFormat'] = request.dataFormat;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.globalConditionShrink)) {
    query['GlobalCondition'] = request.globalConditionShrink;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportSwagger',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 0009db9c828549768a200320714b8930
  *
  * @param request ImportSwaggerRequest
  * @return ImportSwaggerResponse
 */
async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSwaggerWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='1d2db86sca4384811e0b5e8707e68181f'),
  resourceId?: [ string ](name='ResourceId', example='285bb759342649a1b70c2093a772e087'),
  resourceType?: string(name='ResourceType', example='apiGroup'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='product'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='1d2db86sca4384811e0b5e8707e68181f'),
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF5189484043'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='285bb759342649a1b70c2093a772e087'),
      resourceType?: string(name='ResourceType', example='apiGroup'),
      tagKey?: string(name='TagKey', example='owner'),
      tagValue?: string(name='TagValue', example='zhangsan'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', example='HmacSHA256'),
  apiId?: string(name='ApiId', example='8afff6c8c4c6447abb035812e4d66b65'),
  apiName?: string(name='ApiName', example='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType', example='DEFAULT'),
  authType?: string(name='AuthType', example='APP'),
  backendEnable?: boolean(name='BackendEnable', example='true'),
  backendId?: string(name='BackendId', example='0d105f80a8f340408bd34954d4e4ff22'),
  constantParameters?: string(name='ConstantParameters', example='[{\\"ServiceParameterName\\":\\"HOST\\",\\"ConstantValue\\":\\"uat-cgi.smarket.net.cn\\",\\"Location\\":\\"HEAD\\",\\"Description\\":\\"\\\\u540e\\\\u7aefVPC-HOST\\"}]'),
  description?: string(name='Description', example='Api description'),
  disableInternet?: boolean(name='DisableInternet', example='true'),
  errorCodeSamples?: string(name='ErrorCodeSamples', example='[{"Code":"400","Message":"Missing the userId","Description":"param invalid"}]'),
  failResultSample?: string(name='FailResultSample', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', example='true'),
  groupId?: string(name='GroupId', example='927d50c0f2e54b359919923d908bb015'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', example='{\\"OpenIdApiType\\":\\"IDTOKEN\\",\\"PublicKey\\":\\"lzlj1573\\",\\"IdTokenParamName\\":\\"\\",\\"PublicKeyId\\":\\"lzljorders\\"}'),
  requestConfig?: string(name='RequestConfig', example='{"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}'),
  requestParameters?: string(name='RequestParameters'),
  resultBodyModel?: string(name='ResultBodyModel', example='{}'),
  resultDescriptions?: string(name='ResultDescriptions', example='[]'),
  resultSample?: string(name='ResultSample', example='200'),
  resultType?: string(name='ResultType', example='HTML'),
  securityToken?: string(name='SecurityToken'),
  serviceConfig?: string(name='ServiceConfig', example='{"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}'),
  serviceParameters?: string(name='ServiceParameters', example='[{"ServiceParameterName":"age","Location":"Head","Type":"Number","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"sex","Location":"Query","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"userId","Location":"Path","Type":"Number","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"clientIp","Location":"Head","Type":"String","ParameterCatalog":"SYSTEM"},{"ServiceParameterName":"constance","Location":"Head","Type":"String","ParameterCatalog":"CONSTANT"}]'),
  serviceParametersMap?: string(name='ServiceParametersMap', example='[{"ServiceParameterName":"age","RequestParameterName":"age"},{"ServiceParameterName":"sex","RequestParameterName":"sex"},{"ServiceParameterName":"userId","RequestParameterName":"userId"},{"ServiceParameterName":"clientIp","RequestParameterName":"CaClientIp"},{"ServiceParameterName":"constance","RequestParameterName":"constance"}]'),
  systemParameters?: string(name='SystemParameters', example='[{\\"ParameterName\\": \\"CaAppId\\", \\"Location\\": \\"HEAD\\", \\"ServiceParameterName\\": \\"x-ca-appid\\"}]'),
  visibility?: string(name='Visibility', example='PUBLIC'),
  webSocketApiType?: string(name='WebSocketApiType', example='COMMON'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model ModifyApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiResponseBody(name='body'),
}

/**
  * 58928
  *
  * @param request ModifyApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyApiResponse
 */
async function modifyApiWithOptions(request: ModifyApiRequest, runtime: Util.RuntimeOptions): ModifyApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowSignatureMethod)) {
    query['AllowSignatureMethod'] = request.allowSignatureMethod;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.appCodeAuthType)) {
    query['AppCodeAuthType'] = request.appCodeAuthType;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.backendEnable)) {
    query['BackendEnable'] = request.backendEnable;
  }
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.constantParameters)) {
    query['ConstantParameters'] = request.constantParameters;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableInternet)) {
    query['DisableInternet'] = request.disableInternet;
  }
  if (!Util.isUnset(request.errorCodeSamples)) {
    query['ErrorCodeSamples'] = request.errorCodeSamples;
  }
  if (!Util.isUnset(request.failResultSample)) {
    query['FailResultSample'] = request.failResultSample;
  }
  if (!Util.isUnset(request.forceNonceCheck)) {
    query['ForceNonceCheck'] = request.forceNonceCheck;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.openIdConnectConfig)) {
    query['OpenIdConnectConfig'] = request.openIdConnectConfig;
  }
  if (!Util.isUnset(request.requestConfig)) {
    query['RequestConfig'] = request.requestConfig;
  }
  if (!Util.isUnset(request.requestParameters)) {
    query['RequestParameters'] = request.requestParameters;
  }
  if (!Util.isUnset(request.resultBodyModel)) {
    query['ResultBodyModel'] = request.resultBodyModel;
  }
  if (!Util.isUnset(request.resultDescriptions)) {
    query['ResultDescriptions'] = request.resultDescriptions;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serviceConfig)) {
    query['ServiceConfig'] = request.serviceConfig;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    query['ServiceParameters'] = request.serviceParameters;
  }
  if (!Util.isUnset(request.serviceParametersMap)) {
    query['ServiceParametersMap'] = request.serviceParametersMap;
  }
  if (!Util.isUnset(request.systemParameters)) {
    query['SystemParameters'] = request.systemParameters;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.webSocketApiType)) {
    query['WebSocketApiType'] = request.webSocketApiType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 58928
  *
  * @param request ModifyApiRequest
  * @return ModifyApiResponse
 */
async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiWithOptions(request, runtime);
}

model ModifyApiConfigurationRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='If the **AuthType** parameter is set to **APP**, you must include this parameter to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:

*   HmacSHA256
*   HmacSHA1,HmacSHA256', example='HmacSHA256'),
  apiId?: string(name='ApiId', description='The ID of the API.', example='baacc592e63a4cb6a41920d9d3f91f38'),
  apiName?: string(name='ApiName', description='The name of the API.', example='testModifyApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='If the **AuthType** parameter is set to **APP**, the valid values are:

*   **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
*   **DISABLE**: The authentication is disabled.
*   **HEADER**: AppCode can be placed in the Header parameter for authentication.
*   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.', example='DEFAULT'),
  authType?: string(name='AuthType', description='API安全认证类型，目前可以取值：

- **APP**：只允许已授权的APP调用
- **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
     - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制；
     - AppCodeAuthType的值不会生效。', example='APP'),
  backendName?: string(name='BackendName', description='The name of the backend service. This parameter takes effect only when the UseBackendService parameter is set to TRUE.', example='testBackendService'),
  bodyFormat?: string(name='BodyFormat', description='This parameter takes effect only when the **RequestMode** parameter is set to **MAPPING**.

The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM** and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.', example='STREAM'),
  bodyModel?: string(name='BodyModel', description='The body model.', example='https://apigateway.aliyun.com/models/f4e7333c****40dcbaf7c9da553ccd8d/3ab61f775b****d4bc35e993****87aa8'),
  contentTypeCategory?: string(name='ContentTypeCategory', description='The ContentType configuration of the backend request.

*   DEFAULT: the default configuration in API Gateway
*   CUSTOM: a custom configuration', example='DEFAULT'),
  contentTypeValue?: string(name='ContentTypeValue', description='The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.', example='application/x-www-form-urlencoded; charset=UTF-8'),
  description?: string(name='Description', description='The description of the API.', example='TestModifyDescription'),
  disableInternet?: boolean(name='DisableInternet', description='*   Specifies whether to call the API only in an internal network. If the **DisableInternet** parameter is set to **true**, the API can be called only in an internal network.
*   If the **DisableInternet** parameter is set to **false**, the API can be called over the Internet and in an internal network.', example='false'),
  errorCodeSamples?: string(name='ErrorCodeSamples', description='The sample error codes returned by the backend service.

For more information, see [ErrorCodeSample](~~44392~~).', example='[{"Code":"400","Message":"Missing the userId","Description":"param invalid"}]'),
  failResultSample?: string(name='FailResultSample', description='The sample error response from the backend service. This value is used only to generate documents. It does not affect the returned result.', example='{"errorCode":"fail","errorMessage":"param invalid"}'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='*   Specifies whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
*   If the **ForceNonceCheck** parameter is set to **false**, X-Ca-Nonce is not checked. If you do not modify this parameter when you modify an API, the original value is used.', example='true'),
  functionComputeConfig?: string(name='FunctionComputeConfig', description='The Function Compute configuration.', example='{"FcType":"FCEvent","FcRegionId":"cn-hangzhou","RoleArn":"acs:ram::xxxxxxxx:role/aliyunserviceroleforapigateway","selectServiceName":"fcTest","FunctionName":"funcTest","selectFunctionName":"funcTest","Qualifier":"LATEST","Path":"","FcBaseUrl":"","ServiceName":"fcTest"}'),
  httpConfig?: string(name='HttpConfig', description='The HTTP configuration.', example='{"serviceAddress":"http://test.api.com","servicePath":"/test/api","serviceHttpMethod":"GET"}'),
  mockConfig?: string(name='MockConfig', description='The Mock configuration.', example='{"MockResult":"test","MockHeaders":[{"HeaderName":"testHeader","HeaderValue":"testHeader"}],"MockStatusCode":"400"}'),
  modelName?: string(name='ModelName', description='The name of the model.', example='Test'),
  ossConfig?: string(name='OssConfig', description='The OSS configuration.', example='{"OssRegionId":"cn-hangzhou","Key":"/test.html","BucketName":"test-api-oss","Action":"GetObject"}'),
  postBodyDescription?: string(name='PostBodyDescription', description='The description of the request body.', example='The description of the request body'),
  requestHttpMethod?: string(name='RequestHttpMethod', description='The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.', example='GET'),
  requestMode?: string(name='RequestMode', description='The request mode. Valid values:

*   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
*   PASSTHROUGH: Parameters are passed through.
*   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.', example='MAPPING'),
  requestParameters?: string(name='RequestParameters', description='The parameters of API requests sent by the consumer to API Gateway.

For more information, see [RequestParameter](~~43986~~).', example='[{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"header1","DefaultValue":"123124","Location":"Head"},{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"REQUIRED","isHide":false,"ApiParameterName":"header2","DefaultValue":"","Location":"Head"},{"ParameterLocation":{"name":"Query","orderNumber":3},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"query1","DefaultValue":"1245","Location":"Query"},{"ApiParameterName":"CaClientIp","ParameterLocation":{"name":"Query","orderNumber":0},"Location":"Query","ParameterType":"String","Required":"REQUIRED","Description":"ClientIP"},{"ApiParameterName":"testConstant","ParameterLocation":{"name":"Head","orderNumber":0},"Location":"Head","ParameterType":"String","Required":"REQUIRED","DefaultValue":"111"}]'),
  requestPath?: string(name='RequestPath', description='The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the path of the API request is `/object/add`.', example='/test/api'),
  requestProtocol?: string(name='RequestProtocol', description='The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".', example='HTTP'),
  resultSample?: string(name='ResultSample', description='The sample response from the backend service. This value is used only to generate documents. It does not affect the returned result.', example='{\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}'),
  resultType?: string(name='ResultType', description='The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. This value is used only to generate documents. It does not affect the returned result.', example='JSON'),
  securityToken?: string(name='SecurityToken'),
  serviceParameters?: string(name='ServiceParameters', description='The parameters of API requests sent by API Gateway to the backend service.

For more information, see [ServiceParameter](~~43988~~).', example='[{"ServiceParameterName":"header1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"header2","Location":"Query","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"query1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"ipp","Location":"Query","Type":"String","ParameterCatalog":"SYSTEM"},{"ServiceParameterName":"testConstant","Location":"Head","Type":"String","ParameterCatalog":"CONSTANT"}]'),
  serviceParametersMap?: string(name='ServiceParametersMap', description='The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.

For more information, see [ServiceParameterMap](~~43989~~).', example='[{"ServiceParameterName":"header1","RequestParameterName":"header1"},{"ServiceParameterName":"header2","RequestParameterName":"header2"},{"ServiceParameterName":"query1","RequestParameterName":"query1"},{"ServiceParameterName":"ipp","RequestParameterName":"CaClientIp"},{"ServiceParameterName":"testConstant","RequestParameterName":"testConstant"}]'),
  serviceProtocol?: string(name='ServiceProtocol', description='The protocol that is used to access backend services. Valid values:

*   Http: for backend services that use HTTP or HTTPS
*   Vpc: for backend services that use VPC
*   FC: for Function Compute
*   OSS: for Object Storage Service
*   Mock: for backend services that use the Mock mode
*   EventBridge: for EventBridge

You must specify the config value for the corresponding backend service.', example='HTTP'),
  serviceTimeout?: int32(name='ServiceTimeout', description='The timeout period of the backend service. Unit: milliseconds.', example='10000'),
  useBackendService?: boolean(name='UseBackendService', description='Specifies whether to use the information about the created backend service. Valid values:

*   TRUE: uses the information about the created backend service.
*   FALSE: uses the information about the custom backend service.', example='TRUE'),
  visibility?: string(name='Visibility', description='Specifies whether to make the API public. Valid values:

*   **PUBLIC:** The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
*   **PRIVATE:** The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.', example='PUBLIC'),
  vpcConfig?: string(name='VpcConfig', description='The VPC configuration.', example='{"VpcId":"vpc-xxxxxxx","Name":"testVpc","InstanceId":"i-p0ssssss","Port":80,"servicePath":"/test/vpc","serviceHttpMethod":"HEAD"}'),
}

model ModifyApiConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6C87A26A-6A18-4B8E-8099-705278381A2C'),
}

model ModifyApiConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiConfigurationResponseBody(name='body'),
}

async function modifyApiConfigurationWithOptions(request: ModifyApiConfigurationRequest, runtime: Util.RuntimeOptions): ModifyApiConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowSignatureMethod)) {
    query['AllowSignatureMethod'] = request.allowSignatureMethod;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.appCodeAuthType)) {
    query['AppCodeAuthType'] = request.appCodeAuthType;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.backendName)) {
    query['BackendName'] = request.backendName;
  }
  if (!Util.isUnset(request.bodyFormat)) {
    query['BodyFormat'] = request.bodyFormat;
  }
  if (!Util.isUnset(request.bodyModel)) {
    query['BodyModel'] = request.bodyModel;
  }
  if (!Util.isUnset(request.contentTypeCategory)) {
    query['ContentTypeCategory'] = request.contentTypeCategory;
  }
  if (!Util.isUnset(request.contentTypeValue)) {
    query['ContentTypeValue'] = request.contentTypeValue;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableInternet)) {
    query['DisableInternet'] = request.disableInternet;
  }
  if (!Util.isUnset(request.errorCodeSamples)) {
    query['ErrorCodeSamples'] = request.errorCodeSamples;
  }
  if (!Util.isUnset(request.failResultSample)) {
    query['FailResultSample'] = request.failResultSample;
  }
  if (!Util.isUnset(request.forceNonceCheck)) {
    query['ForceNonceCheck'] = request.forceNonceCheck;
  }
  if (!Util.isUnset(request.functionComputeConfig)) {
    query['FunctionComputeConfig'] = request.functionComputeConfig;
  }
  if (!Util.isUnset(request.httpConfig)) {
    query['HttpConfig'] = request.httpConfig;
  }
  if (!Util.isUnset(request.mockConfig)) {
    query['MockConfig'] = request.mockConfig;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.ossConfig)) {
    query['OssConfig'] = request.ossConfig;
  }
  if (!Util.isUnset(request.postBodyDescription)) {
    query['PostBodyDescription'] = request.postBodyDescription;
  }
  if (!Util.isUnset(request.requestHttpMethod)) {
    query['RequestHttpMethod'] = request.requestHttpMethod;
  }
  if (!Util.isUnset(request.requestMode)) {
    query['RequestMode'] = request.requestMode;
  }
  if (!Util.isUnset(request.requestParameters)) {
    query['RequestParameters'] = request.requestParameters;
  }
  if (!Util.isUnset(request.requestPath)) {
    query['RequestPath'] = request.requestPath;
  }
  if (!Util.isUnset(request.requestProtocol)) {
    query['RequestProtocol'] = request.requestProtocol;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    query['ServiceParameters'] = request.serviceParameters;
  }
  if (!Util.isUnset(request.serviceParametersMap)) {
    query['ServiceParametersMap'] = request.serviceParametersMap;
  }
  if (!Util.isUnset(request.serviceProtocol)) {
    query['ServiceProtocol'] = request.serviceProtocol;
  }
  if (!Util.isUnset(request.serviceTimeout)) {
    query['ServiceTimeout'] = request.serviceTimeout;
  }
  if (!Util.isUnset(request.useBackendService)) {
    query['UseBackendService'] = request.useBackendService;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  if (!Util.isUnset(request.vpcConfig)) {
    query['VpcConfig'] = request.vpcConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiConfiguration',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiConfiguration(request: ModifyApiConfigurationRequest): ModifyApiConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiConfigurationWithOptions(request, runtime);
}

model ModifyApiGroupRequest {
  basePath?: string(name='BasePath', example='/eeee'),
  compatibleFlags?: string(name='CompatibleFlags', example='depart:dep1'),
  customTraceConfig?: string(name='CustomTraceConfig', example='{\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}'),
  customerConfigs?: string(name='CustomerConfigs', example='removeResponseServerHeader'),
  defaultDomain?: string(name='DefaultDomain', example='mkt.api.gaore.com'),
  description?: string(name='Description', example='New weather informations.'),
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  groupName?: string(name='GroupName', example='NewWeather'),
  passthroughHeaders?: string(name='PassthroughHeaders', example='eagleeye-rpcid,x-b3-traceid,host'),
  rpcPattern?: string(name='RpcPattern'),
  securityToken?: string(name='SecurityToken'),
  supportSSE?: string(name='SupportSSE'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='uat'),
    }
  ](name='Tag', example='Key， Value'),
  userLogConfig?: string(name='UserLogConfig', example='{\\"requestBody\\":false,\\"responseBody\\":false,\\"queryString\\":\\"\\",\\"requestHeaders\\":\\"\\",\\"responseHeaders\\":\\"\\",\\"jwtClaims\\":\\"\\"}'),
}

model ModifyApiGroupResponseBody = {
  basePath?: string(name='BasePath', example='/test'),
  description?: string(name='Description', example='New weather informations.'),
  groupId?: string(name='GroupId', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  groupName?: string(name='GroupName', example='NewWeather'),
  requestId?: string(name='RequestId', example='4CF287C6-CE5B-477B-BE27-C48F99EADBC8'),
  subDomain?: string(name='SubDomain', example='523e8dc7bbe04613b5b1d726c2a7889d-cn-hangzhou.alicloudapi.com'),
}

model ModifyApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiGroupResponseBody(name='body'),
}

async function modifyApiGroupWithOptions(request: ModifyApiGroupRequest, runtime: Util.RuntimeOptions): ModifyApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.basePath)) {
    query['BasePath'] = request.basePath;
  }
  if (!Util.isUnset(request.compatibleFlags)) {
    query['CompatibleFlags'] = request.compatibleFlags;
  }
  if (!Util.isUnset(request.customTraceConfig)) {
    query['CustomTraceConfig'] = request.customTraceConfig;
  }
  if (!Util.isUnset(request.customerConfigs)) {
    query['CustomerConfigs'] = request.customerConfigs;
  }
  if (!Util.isUnset(request.defaultDomain)) {
    query['DefaultDomain'] = request.defaultDomain;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.passthroughHeaders)) {
    query['PassthroughHeaders'] = request.passthroughHeaders;
  }
  if (!Util.isUnset(request.rpcPattern)) {
    query['RpcPattern'] = request.rpcPattern;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.supportSSE)) {
    query['SupportSSE'] = request.supportSSE;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userLogConfig)) {
    query['UserLogConfig'] = request.userLogConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupWithOptions(request, runtime);
}

model ModifyApiGroupVpcWhitelistRequest {
  groupId?: string(name='GroupId', example='9b80408147724ddab4c4e2703c6ca019'),
  securityToken?: string(name='SecurityToken'),
  vpcIds?: string(name='VpcIds', example='vpc-bp11w979o2s9rcr962w25'),
}

model ModifyApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='F8B9DC8C-D6E2-5065-BD1F-0401866E7F10'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiGroupVpcWhitelistResponseBody(name='body'),
}

async function modifyApiGroupVpcWhitelistWithOptions(request: ModifyApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): ModifyApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcIds)) {
    query['VpcIds'] = request.vpcIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiGroupVpcWhitelist',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupVpcWhitelistWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: long(name='AppId', example='20112314518278'),
  appName?: string(name='AppName', example='jiedian_pord'),
  description?: string(name='Description', example='modidyTest'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', example='Key， Value'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyBackendRequest {
  backendId?: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7'),
  backendName?: string(name='BackendName', example='testHttpModify'),
  backendType?: string(name='BackendType', example='HTTP'),
  description?: string(name='Description', example='test'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyBackendResponseBody = {
  requestId?: string(name='RequestId', example='06DACA61-9359-5EC6-AEDA-C73E620E49A9'),
}

model ModifyBackendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackendResponseBody(name='body'),
}

async function modifyBackendWithOptions(request: ModifyBackendRequest, runtime: Util.RuntimeOptions): ModifyBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.backendName)) {
    query['BackendName'] = request.backendName;
  }
  if (!Util.isUnset(request.backendType)) {
    query['BackendType'] = request.backendType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackend',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackend(request: ModifyBackendRequest): ModifyBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackendWithOptions(request, runtime);
}

model ModifyBackendModelRequest {
  backendId?: string(name='BackendId', example='20bcdc9453524b78a8beb1f6de21edb7'),
  backendModelData?: string(name='BackendModelData', example='{\\"ServiceAddress\\":\\"http://121.40.XX.XX\\"}'),
  backendModelId?: string(name='BackendModelId', example='3bb6375bc71c4e4c95ce05b4e7a55a9d'),
  backendType?: string(name='BackendType', example='OSS'),
  description?: string(name='Description', example='modify plugin first'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', example='TEST'),
}

model ModifyBackendModelResponseBody = {
  operationId?: string(name='OperationId', example='c16a1880f5164d779f6a54f64d997cd9'),
  requestId?: string(name='RequestId', example='19B89B04-418B-55EE-94A8-6B42CA06002A'),
}

model ModifyBackendModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackendModelResponseBody(name='body'),
}

async function modifyBackendModelWithOptions(request: ModifyBackendModelRequest, runtime: Util.RuntimeOptions): ModifyBackendModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendId)) {
    query['BackendId'] = request.backendId;
  }
  if (!Util.isUnset(request.backendModelData)) {
    query['BackendModelData'] = request.backendModelData;
  }
  if (!Util.isUnset(request.backendModelId)) {
    query['BackendModelId'] = request.backendModelId;
  }
  if (!Util.isUnset(request.backendType)) {
    query['BackendType'] = request.backendType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackendModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackendModel(request: ModifyBackendModelRequest): ModifyBackendModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackendModelWithOptions(request, runtime);
}

model ModifyDatasetRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  datasetName?: string(name='DatasetName', example='NewDatasetName'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyDatasetResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876********'),
}

model ModifyDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatasetResponseBody(name='body'),
}

async function modifyDatasetWithOptions(request: ModifyDatasetRequest, runtime: Util.RuntimeOptions): ModifyDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDataset',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDataset(request: ModifyDatasetRequest): ModifyDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatasetWithOptions(request, runtime);
}

model ModifyDatasetItemRequest {
  datasetId?: string(name='DatasetId', example='a25a6589b2584ff490e891cc********'),
  datasetItemId?: string(name='DatasetItemId', example='5045****'),
  description?: string(name='Description', example='description'),
  expiredTime?: string(name='ExpiredTime', example='2022-09-22T12:00:00Z'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyDatasetItemResponseBody = {
  requestId?: string(name='RequestId', example='F7DE77BC-0F7D-5A18-B494-BD2C********'),
}

model ModifyDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatasetItemResponseBody(name='body'),
}

async function modifyDatasetItemWithOptions(request: ModifyDatasetItemRequest, runtime: Util.RuntimeOptions): ModifyDatasetItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetId)) {
    query['DatasetId'] = request.datasetId;
  }
  if (!Util.isUnset(request.datasetItemId)) {
    query['DatasetItemId'] = request.datasetItemId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatasetItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatasetItem(request: ModifyDatasetItemRequest): ModifyDatasetItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatasetItemWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  instanceId?: string(name='InstanceId', example='apigateway-cn-v6419k43xxxxx'),
  instanceSpec?: string(name='InstanceSpec', example='api.s1.small'),
  modifyAction?: string(name='ModifyAction', example='UPGRADE'),
  skipWaitSwitch?: boolean(name='SkipWaitSwitch', example='false'),
  token?: string(name='Token', example='b5845042-2f2f-4e96-bd5c-36c6e5c2a68c'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', example='36BBBAD4-1CFB-489F-841A-8CA52EEA787E'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.modifyAction)) {
    query['ModifyAction'] = request.modifyAction;
  }
  if (!Util.isUnset(request.skipWaitSwitch)) {
    query['SkipWaitSwitch'] = request.skipWaitSwitch;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSpec',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyIpControlRequest {
  description?: string(name='Description', description='*   This operation is intended for API providers.
*   This operation allows you to modify only the name and description of an ACL. You cannot modify the type of the ACL.', example='description'),
  ipControlId?: string(name='IpControlId', description='The description. The description can be up to 200 characters in length.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  ipControlName?: string(name='IpControlName', description='The ID of the request.', example='testControl11'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyIpControlResponseBody = {
  requestId?: string(name='RequestId', description='Modifies an access control list (ACL).', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpControlResponseBody(name='body'),
}

/**
  * The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).
  *
  * @param request ModifyIpControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyIpControlResponse
 */
async function modifyIpControlWithOptions(request: ModifyIpControlRequest, runtime: Util.RuntimeOptions): ModifyIpControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.ipControlName)) {
    query['IpControlName'] = request.ipControlName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).
  *
  * @param request ModifyIpControlRequest
  * @return ModifyIpControlResponse
 */
async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlWithOptions(request, runtime);
}

model ModifyIpControlPolicyItemRequest {
  appId?: string(name='AppId', description='The ID of the request.', example='123'),
  cidrIp?: string(name='CidrIp', description='*   This operation is intended for API providers.
*   The modification immediately takes effect on all the APIs that are bound to the policy.
*   This operation causes a full modification of the content of a policy.', example='113.125.1.101;101.11.1.1'),
  ipControlId?: string(name='IpControlId', description='The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.

*   You can add only one application ID at a time.
*   If this parameter is empty, no applications are restricted.
*   If this parameter is not empty, not only IP addresses but also applications are restricted.
*   If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
*   If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  policyItemId?: string(name='PolicyItemId', description='The IP address or CIDR block that is defined in a policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.', example='P151617000829241'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId', description='Modifies a policy in an access control list (ACL).', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpControlPolicyItemResponseBody(name='body'),
}

/**
  * The ID of the policy.
  *
  * @param request ModifyIpControlPolicyItemRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyIpControlPolicyItemResponse
 */
async function modifyIpControlPolicyItemWithOptions(request: ModifyIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): ModifyIpControlPolicyItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.cidrIp)) {
    query['CidrIp'] = request.cidrIp;
  }
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.policyItemId)) {
    query['PolicyItemId'] = request.policyItemId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpControlPolicyItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the policy.
  *
  * @param request ModifyIpControlPolicyItemRequest
  * @return ModifyIpControlPolicyItemResponse
 */
async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlPolicyItemWithOptions(request, runtime);
}

model ModifyLogConfigRequest {
  logType?: string(name='LogType', example='PROVIDER'),
  securityToken?: string(name='SecurityToken'),
  slsLogStore?: string(name='SlsLogStore', example='logs-gateway'),
  slsProject?: string(name='SlsProject', example='ford-api-gateway-log'),
}

model ModifyLogConfigResponseBody = {
  requestId?: string(name='RequestId', example='75A4ADCB-AA26-51FB-94D4-AB3240040974'),
}

model ModifyLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogConfigResponseBody(name='body'),
}

async function modifyLogConfigWithOptions(request: ModifyLogConfigRequest, runtime: Util.RuntimeOptions): ModifyLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.slsLogStore)) {
    query['SlsLogStore'] = request.slsLogStore;
  }
  if (!Util.isUnset(request.slsProject)) {
    query['SlsProject'] = request.slsProject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogConfig',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogConfigWithOptions(request, runtime);
}

model ModifyModelRequest {
  description?: string(name='Description', description='The new definition of the model.', example='Model Description'),
  groupId?: string(name='GroupId', description='The new name of the model.', example='30e792398d6c4569b04c0e53a3494381'),
  modelName?: string(name='ModelName', description='The description of the new model definition.', example='Test'),
  newModelName?: string(name='NewModelName', description='The ID of the request.', example='NewTest'),
  schema?: string(name='Schema', description='The ID of the API group to which the model belongs.', example='{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='RequestId', description='Updates the model of an API group.', example='4173F95B-360C-460C-9F6C-4A960B904411'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModelWithOptions(request: ModifyModelRequest, runtime: Util.RuntimeOptions): ModifyModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.newModelName)) {
    query['NewModelName'] = request.newModelName;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyModel',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyModelWithOptions(request, runtime);
}

model ModifyPluginRequest {
  description?: string(name='Description', example='modify plugin first'),
  pluginData?: string(name='PluginData', example='Plugin definition'),
  pluginId?: string(name='PluginId', example='a96926e82f994915a8da40a119374537'),
  pluginName?: string(name='PluginName', example='modifyCors'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='\\" \\"'),
    }
  ](name='Tag', example='Key， Value'),
}

model ModifyPluginResponseBody = {
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model ModifyPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPluginResponseBody(name='body'),
}

async function modifyPluginWithOptions(request: ModifyPluginRequest, runtime: Util.RuntimeOptions): ModifyPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pluginData)) {
    query['PluginData'] = request.pluginData;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.pluginName)) {
    query['PluginName'] = request.pluginName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPlugin',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPlugin(request: ModifyPluginRequest): ModifyPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPluginWithOptions(request, runtime);
}

model ModifySignatureRequest {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='The new Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureKey?: string(name='SignatureKey', description='The ID of the request.', example='qwertyuiop'),
  signatureName?: string(name='SignatureName', description='The new Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.', example='backendsignature'),
  signatureSecret?: string(name='SignatureSecret', description='The ID of the key.', example='asdfghjkl'),
}

model ModifySignatureResponseBody = {
  requestId?: string(name='RequestId', description='The name of the key.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
  signatureId?: string(name='SignatureId', description='*   This API is intended for API providers.
*   This API operation modifies the name, Key value, and Secret value of an existing signature key.
*   Note that the modification takes effect immediately. If the key has been bound to an API, you must adjust the backend signature verification based on the new key accordingly.
*   The QPS limit on this operation is 50 per user.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  signatureName?: string(name='SignatureName', description='Modifies a backend signature key.', example='backendsignature'),
}

model ModifySignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySignatureResponseBody(name='body'),
}

/**
  * The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
  *
  * @param request ModifySignatureRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySignatureResponse
 */
async function modifySignatureWithOptions(request: ModifySignatureRequest, runtime: Util.RuntimeOptions): ModifySignatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.signatureKey)) {
    query['SignatureKey'] = request.signatureKey;
  }
  if (!Util.isUnset(request.signatureName)) {
    query['SignatureName'] = request.signatureName;
  }
  if (!Util.isUnset(request.signatureSecret)) {
    query['SignatureSecret'] = request.signatureSecret;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySignature',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
  *
  * @param request ModifySignatureRequest
  * @return ModifySignatureResponse
 */
async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySignatureWithOptions(request, runtime);
}

model ModifyTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault', description='The default throttling value for each app.', example='10000'),
  appDefault?: int32(name='AppDefault', description='ThrottlingTestDescription', example='10000'),
  description?: string(name='Description', description='The ID of the request.', example='*   This API is intended for API providers.
*   The modifications take effect on the bound APIs instantly.
*   The QPS limit on this operation is 50 per user.'),
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId', description='ThrottlingTest', example='tf123456'),
  trafficControlName?: string(name='TrafficControlName', description='The unit to be used in the throttling policy. Valid values:

*   **SECOND**
*   **MINUTE**
*   **HOUR**
*   **DAY**', example='The default throttling value for each API.'),
  trafficControlUnit?: string(name='TrafficControlUnit', description='The default throttling value for each user.', example='HOUR'),
  userDefault?: int32(name='UserDefault', description='The description of the throttling policy.', example='10000'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId', description='Modifies the settings of a custom throttling policy.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model ModifyTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTrafficControlResponseBody(name='body'),
}

/**
  * The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.
  *
  * @param request ModifyTrafficControlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyTrafficControlResponse
 */
async function modifyTrafficControlWithOptions(request: ModifyTrafficControlRequest, runtime: Util.RuntimeOptions): ModifyTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDefault)) {
    query['ApiDefault'] = request.apiDefault;
  }
  if (!Util.isUnset(request.appDefault)) {
    query['AppDefault'] = request.appDefault;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  if (!Util.isUnset(request.trafficControlUnit)) {
    query['TrafficControlUnit'] = request.trafficControlUnit;
  }
  if (!Util.isUnset(request.userDefault)) {
    query['UserDefault'] = request.userDefault;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTrafficControl',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.
  *
  * @param request ModifyTrafficControlRequest
  * @return ModifyTrafficControlResponse
 */
async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrafficControlWithOptions(request, runtime);
}

model ModifyVpcAccessAndUpdateApisRequest {
  instanceId?: string(name='InstanceId', description='The ID of the new instance.', example='i-uf6bzcg1pr4oh5jjmxxx'),
  name?: string(name='Name', description='The name of the VPC authorization.

> 

*   The name of a VPC authorization cannot be changed. You cannot use this parameter to change the name of a VPC authorization.

*   You must set this parameter to the name of the current VPC authorization.', example='VpcName'),
  needBatchWork?: boolean(name='NeedBatchWork', description='Specifies whether to update the associated API.

**

**Warning:** If you want to update the VPC authorization of a published API, you must set this parameter to true. Otherwise, the update will not be synchronized to the backend service of the API.', example='true'),
  port?: int32(name='Port', description='The new port number.', example='80'),
  refresh?: boolean(name='Refresh', description='Specifies whether to update the VPC authorization.

> 

*   If the ID of the instance in your VPC is changed but the IP address of the instance remains unchanged, you can set this parameter to true to update the VPC authorization.', example='false'),
  securityToken?: string(name='SecurityToken'),
  token?: string(name='Token', description='The token of the request.', example='c20d86c4-1eb3-4d0b-afe9-c586df1e2136'),
  vpcId?: string(name='VpcId', description='The ID of the new VPC.', example='vpc-m5e7jqfppv5wbvmdw5pg2'),
  vpcTargetHostName?: string(name='VpcTargetHostName', description='The hostname of the backend service.', example='iot.hu***ng.com'),
}

model ModifyVpcAccessAndUpdateApisResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the asynchronous task.

> 

*   If the associated API is updated, you can use the task ID in the **DescribeUpdateVpcInfoTask** operation to query the update result.', example='7b6d0cb72b2e4215b0129f675c889746'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CEC6EA-EEBA-5FD6-8BD9-2CF01980FE39'),
}

model ModifyVpcAccessAndUpdateApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcAccessAndUpdateApisResponseBody(name='body'),
}

async function modifyVpcAccessAndUpdateApisWithOptions(request: ModifyVpcAccessAndUpdateApisRequest, runtime: Util.RuntimeOptions): ModifyVpcAccessAndUpdateApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.needBatchWork)) {
    query['NeedBatchWork'] = request.needBatchWork;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.refresh)) {
    query['Refresh'] = request.refresh;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcTargetHostName)) {
    query['VpcTargetHostName'] = request.vpcTargetHostName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcAccessAndUpdateApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcAccessAndUpdateApis(request: ModifyVpcAccessAndUpdateApisRequest): ModifyVpcAccessAndUpdateApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcAccessAndUpdateApisWithOptions(request, runtime);
}

model OpenApiGatewayServiceResponseBody = {
  orderId?: string(name='OrderId', example='210981***530495'),
  requestId?: string(name='RequestId', example='2D39D1B3-8548-508A-9CE2-7F4A3F2A7989'),
}

model OpenApiGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenApiGatewayServiceResponseBody(name='body'),
}

async function openApiGatewayServiceWithOptions(runtime: Util.RuntimeOptions): OpenApiGatewayServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OpenApiGatewayService',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openApiGatewayService(): OpenApiGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openApiGatewayServiceWithOptions(runtime);
}

model QueryRequestLogsRequest {
  requestLogId?: string(name='RequestLogId', description='The ID of the request log.', example='95657ED9-2F6F-426F-BD99-79C8********'),
  securityToken?: string(name='SecurityToken'),
}

model QueryRequestLogsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CE5722A6-AE78-4741-A9B0-6C81********'),
  requestLogs?: {
    requestLog?: [ 
    {
      apiId?: string(name='ApiId', description='The ID of the API.', example='4b83229ebcab4ecd88956fb3********'),
      apiName?: string(name='ApiName', description='The name of the API', example='ApiName'),
      appName?: string(name='AppName'),
      backendRequestEnd?: long(name='BackendRequestEnd'),
      backendRequestStart?: long(name='BackendRequestStart'),
      backendResponseEnd?: long(name='BackendResponseEnd'),
      backendResponseStart?: long(name='BackendResponseStart'),
      clientIp?: string(name='ClientIp', description='The IP address of the client that sends the request.', example='21.237.XXX.XXX'),
      clientNonce?: string(name='ClientNonce', description='The X-Ca-Nonce header included in the request from the client.', example='d43df9db-3b05-4cd6-888a-1c0b********'),
      consumerAppId?: string(name='ConsumerAppId', description='The ID of the application from which an API request is sent.', example='11096****'),
      consumerAppKey?: string(name='ConsumerAppKey', description='The application key used by the caller.', example='20412****'),
      customTraceId?: string(name='CustomTraceId', description='The ID of the custom trace.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      domain?: string(name='Domain', description='The domain name of the request.', example='360bdd88695c48ae8085c7f2********-ap-southeast-1.alicloudapi.com'),
      errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='X500ER'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='Backend service connect failed `Timeout connecting to [/1XX.20.0.XX:8080]`'),
      exception?: string(name='Exception', description='The specific error message returned by the backend service.', example='error msg'),
      frontRequestEnd?: long(name='FrontRequestEnd'),
      frontRequestStart?: long(name='FrontRequestStart'),
      frontResponseEnd?: long(name='FrontResponseEnd'),
      frontResponseStart?: long(name='FrontResponseStart'),
      groupId?: string(name='GroupId', description='The ID of the API group to which the API belongs.', example='dc024277fe6c4cada79ba0bd6********'),
      groupName?: string(name='GroupName', description='The name of the API group to which the API belongs.', example='GroupName'),
      httpMethod?: string(name='HttpMethod', description='The HTTP method used to send the request.', example='POST'),
      httpPath?: string(name='HttpPath', description='The path of the request.', example='/testPath'),
      initialRequestId?: string(name='InitialRequestId', description='The initial request ID when API Gateway calls an API. For example, if API-1 calls API-2, the initialRequestId parameter in the log of API-2 indicates the ID of the request from API-1.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      instanceId?: string(name='InstanceId', description='The ID of the API Gateway instance to which the API belongs.', example='apigateway-bj-ab2b********'),
      jwtClaims?: string(name='JwtClaims', description='The JSON web token (JWT) claims. The claims can be configured at the group level.', example='{}'),
      region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
      requestBody?: string(name='RequestBody', description='The request body. A request body cannot exceed 1,024 bytes in size.', example='param=paramName'),
      requestHeaders?: string(name='RequestHeaders', description='The request headers.', example='content-type: application/x-www-form-urlencoded'),
      requestId?: string(name='RequestId', description='The ID of the request.', example='95657ED9-2F6F-426F-BD99-79C8********'),
      requestProtocol?: string(name='RequestProtocol', description='The protocol used by the client to send the request. Valid values: HTTP, HTTPS, and WS.', example='HTTP'),
      requestQueryString?: string(name='RequestQueryString', description='The query string for the request.', example='username=name'),
      requestSize?: string(name='RequestSize', description='The size of the request. Unit: bytes.', example='1923'),
      requestTime?: string(name='RequestTime', description='The request time, in UTC.', example='2022-10-29T03:59:59Z'),
      responseBody?: string(name='ResponseBody', description='The response body. A response body cannot exceed 1,024 bytes in size.', example='param=paramName'),
      responseHeaders?: string(name='ResponseHeaders', description='The headers in the API response.', example='content-type: application/x-www-form-urlencoded'),
      responseSize?: string(name='ResponseSize', description='The size of returned data. Unit: bytes.', example='23441'),
      serviceLatency?: string(name='ServiceLatency', description='The total time consumed to access backend resources. The total time includes the time consumed to request a connection to the resources, the time consumed to establish the connection, and the time consumed to call the backend service. Unit: milliseconds.', example='324'),
      stageId?: string(name='StageId', description='The ID of the API environment.', example='8a305b7f10334052a52d9156********'),
      stageName?: string(name='StageName', description='The name of the API environment.', example='RELEASE'),
      statusCode?: string(name='StatusCode', description='The HTTP status code.', example='200'),
      totalLatency?: string(name='TotalLatency', description='The total time consumed by the request. Unit: milliseconds.', example='1345'),
      plugin?: string(name='plugin', description='The list of plug-ins hit by the request and the relevant context.', example='[]'),
    }
  ](name='RequestLog')
  }(name='RequestLogs', description='The list of request logs.'),
}

model QueryRequestLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRequestLogsResponseBody(name='body'),
}

async function queryRequestLogsWithOptions(request: QueryRequestLogsRequest, runtime: Util.RuntimeOptions): QueryRequestLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.requestLogId)) {
    query['RequestLogId'] = request.requestLogId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRequestLogs',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRequestLogs(request: QueryRequestLogsRequest): QueryRequestLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRequestLogsWithOptions(request, runtime);
}

model ReactivateDomainRequest {
  domainName?: string(name='DomainName', description='*   This operation is intended for API providers.
*   You must solve the problem that is mentioned in the domain name exception prompt before you can reactivate the domain name.
*   A typical reason why a custom domain name becomes abnormal is that the domain name does not have an ICP filing or the domain name is included in a blacklist by the administration. When a custom domain name is abnormal, users cannot use it to access APIs.
*   You can call this operation to reactivate the domain name to resume normal access.', example='api.demo.com'),
  groupId?: string(name='GroupId', description='The ID of the request.', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
}

model ReactivateDomainResponseBody = {
  requestId?: string(name='RequestId', description='Reactivates a custom domain name whose validity status is Abnormal.', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model ReactivateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReactivateDomainResponseBody(name='body'),
}

/**
  * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
  *
  * @param request ReactivateDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReactivateDomainResponse
 */
async function reactivateDomainWithOptions(request: ReactivateDomainRequest, runtime: Util.RuntimeOptions): ReactivateDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReactivateDomain',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
  *
  * @param request ReactivateDomainRequest
  * @return ReactivateDomainResponse
 */
async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return reactivateDomainWithOptions(request, runtime);
}

model RemoveAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', example='[{\\"entry\\":\\"192.168.1.0/24\\",\\"comment\\":\\"WhiteIp\\"}]'),
  aclId?: string(name='AclId', example='acl-bp12ag0xxcfhq1ll68wp9'),
  securityToken?: string(name='SecurityToken'),
}

model RemoveAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model RemoveAccessControlListEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAccessControlListEntryResponseBody(name='body'),
}

async function removeAccessControlListEntryWithOptions(request: RemoveAccessControlListEntryRequest, runtime: Util.RuntimeOptions): RemoveAccessControlListEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclEntrys)) {
    query['AclEntrys'] = request.aclEntrys;
  }
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAccessControlListEntry',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAccessControlListEntry(request: RemoveAccessControlListEntryRequest): RemoveAccessControlListEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAccessControlListEntryWithOptions(request, runtime);
}

model RemoveApisAuthoritiesRequest {
  apiIds?: string(name='ApiIds', description='Queries weather based on the region name', example='baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78'),
  appId?: long(name='AppId', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='2386789'),
  description?: string(name='Description', description='The ID of the request.', example='*   This operation is intended for API providers and callers.
*   Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The description of the authorization.', example='TEST'),
}

model RemoveApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='Revokes the access permissions on multiple APIs from a specified app.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model RemoveApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveApisAuthoritiesResponseBody(name='body'),
}

/**
  * The ID of the app. The ID is generated by the system and globally unique.
  *
  * @param request RemoveApisAuthoritiesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveApisAuthoritiesResponse
 */
async function removeApisAuthoritiesWithOptions(request: RemoveApisAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveApisAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveApisAuthorities',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the app. The ID is generated by the system and globally unique.
  *
  * @param request RemoveApisAuthoritiesRequest
  * @return RemoveApisAuthoritiesResponse
 */
async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeApisAuthoritiesWithOptions(request, runtime);
}

model RemoveAppsAuthoritiesRequest {
  apiId?: string(name='ApiId', description='The IDs of applications. Separate multiple application IDs with commas (,). A maximum of 100 applications IDs can be entered.', example='baacc592e63a4cb6a41920d9d3f91f38'),
  appIds?: string(name='AppIds', description='*   This operation is intended for API providers and callers.
*   Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.', example='2386789,3286798'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The ID of the request.', example='TEST'),
}

model RemoveAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='Revokes the access permissions on a specified API from multiple applications. In this case, multiple applications map to a single API.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model RemoveAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAppsAuthoritiesResponseBody(name='body'),
}

/**
  * The ID of the API. This ID is generated by the system and globally unique.
  *
  * @param request RemoveAppsAuthoritiesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveAppsAuthoritiesResponse
 */
async function removeAppsAuthoritiesWithOptions(request: RemoveAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveAppsAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAppsAuthorities',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API. This ID is generated by the system and globally unique.
  *
  * @param request RemoveAppsAuthoritiesRequest
  * @return RemoveAppsAuthoritiesResponse
 */
async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppsAuthoritiesWithOptions(request, runtime);
}

model RemoveIpControlApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='123'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  ipControlId?: string(name='IpControlId', description='The ID of the API to be managed.

*   If this parameter is not specified, all APIs of the API group are unbound in the specified environment by default.
*   The IDs of the APIs that you want to query. Separate multiple IDs with commas (,). A maximum of 100 IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='*   This API is intended for API providers.
*   The unbinding takes effect immediately. After the API is unbound from the ACL, the corresponding environment does not have any IP address access control in place for the API.', example='TEST'),
}

model RemoveIpControlApisResponseBody = {
  requestId?: string(name='RequestId', description='Unbinds an API from an access control list (ACL).', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveIpControlApisResponseBody(name='body'),
}

/**
  * The ID of the API group containing the API to be managed.
  *
  * @param request RemoveIpControlApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveIpControlApisResponse
 */
async function removeIpControlApisWithOptions(request: RemoveIpControlApisRequest, runtime: Util.RuntimeOptions): RemoveIpControlApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveIpControlApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group containing the API to be managed.
  *
  * @param request RemoveIpControlApisRequest
  * @return RemoveIpControlApisResponse
 */
async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlApisWithOptions(request, runtime);
}

model RemoveIpControlPolicyItemRequest {
  ipControlId?: string(name='IpControlId', description='The ID of the request.', example='7ea91319a34d48a09b5c9c871d9768b1'),
  policyItemIds?: string(name='PolicyItemIds', description='*   This operation is intended for API providers.', example='P151533572852362;P151533557750260'),
  securityToken?: string(name='SecurityToken'),
}

model RemoveIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId', description='Removes one or more policies from an access control list (ACL).', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveIpControlPolicyItemResponseBody(name='body'),
}

/**
  * The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.
  *
  * @param request RemoveIpControlPolicyItemRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveIpControlPolicyItemResponse
 */
async function removeIpControlPolicyItemWithOptions(request: RemoveIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): RemoveIpControlPolicyItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.policyItemIds)) {
    query['PolicyItemIds'] = request.policyItemIds;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveIpControlPolicyItem',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.
  *
  * @param request RemoveIpControlPolicyItemRequest
  * @return RemoveIpControlPolicyItemResponse
 */
async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlPolicyItemWithOptions(request, runtime);
}

model RemoveSignatureApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='123'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='The IDs of the APIs from which you want to unbind the signature key.

*   If this parameter is not specified, the signature key is unbound from all the APIs in the specified environment of the API group.
*   The IDs of the APIs that you want to manage. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  stageName?: string(name='StageName', description='*   This API is intended for API providers.
*   The operation takes effect immediately. The request sent from API Gateway to the backend service does not contain the signature string. The corresponding verification step can be removed from the backend.', example='TEST'),
}

model RemoveSignatureApisResponseBody = {
  requestId?: string(name='RequestId', description='Unbinds a backend signature key from APIs.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSignatureApisResponseBody(name='body'),
}

/**
  * The ID of the signature key.
  *
  * @param request RemoveSignatureApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveSignatureApisResponse
 */
async function removeSignatureApisWithOptions(request: RemoveSignatureApisRequest, runtime: Util.RuntimeOptions): RemoveSignatureApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSignatureApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the signature key.
  *
  * @param request RemoveSignatureApisRequest
  * @return RemoveSignatureApisResponse
 */
async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSignatureApisWithOptions(request, runtime);
}

model RemoveTrafficControlApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='*   This API is intended for API providers.
*   This API allows you to unbind a specified throttling policy from up to 100 APIs at a time.', example='TEST'),
  trafficControlId?: string(name='TrafficControlId', description='The IDs of the APIs from which you want to unbind a specified throttling policy.

*   If this parameter is not specified, the throttling policy is unbound from all the APIs in the specified environment of the API group.
*   Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
}

model RemoveTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId', description='Unbinds a specified throttling policy from APIs.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model RemoveTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTrafficControlApisResponseBody(name='body'),
}

/**
  * The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.
  *
  * @param request RemoveTrafficControlApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveTrafficControlApisResponse
 */
async function removeTrafficControlApisWithOptions(request: RemoveTrafficControlApisRequest, runtime: Util.RuntimeOptions): RemoveTrafficControlApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTrafficControlApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.
  *
  * @param request RemoveTrafficControlApisRequest
  * @return RemoveTrafficControlApisResponse
 */
async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTrafficControlApisWithOptions(request, runtime);
}

model RemoveVpcAccessRequest {
  instanceId?: string(name='InstanceId', example='i-uf6bzcg1pr4oh5jjmxxx'),
  needBatchWork?: boolean(name='NeedBatchWork', example='true'),
  port?: int32(name='Port', example='80'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId', example='vpc-uf657qec7lx42paw3qxxx'),
}

model RemoveVpcAccessResponseBody = {
  apis?: {
    api?: [ 
    {
      apiId?: string(name='ApiId', description='API Id', example='551877242a4b4f3a84a56b7c3570e4a7'),
      groupId?: string(name='GroupId', example='78d54ac4424d4b1792e33ca35637e8e4'),
      stageId?: string(name='StageId', example='d1e1ee28f9fb4b729db0ee8ca76ff0a5'),
    }
  ](name='Api')
  }(name='Apis'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model RemoveVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveVpcAccessResponseBody(name='body'),
}

async function removeVpcAccessWithOptions(request: RemoveVpcAccessRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.needBatchWork)) {
    query['NeedBatchWork'] = request.needBatchWork;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveVpcAccess',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessWithOptions(request, runtime);
}

model RemoveVpcAccessAndAbolishApisRequest {
  instanceId?: string(name='InstanceId', example='i-uf6iaale3gfef9t9cb41'),
  needBatchWork?: boolean(name='NeedBatchWork', example='true'),
  port?: int32(name='Port', example='8080'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId', example='vpc-bp1iw82phcgkvupgfv0o8'),
}

model RemoveVpcAccessAndAbolishApisResponseBody = {
  operationId?: string(name='OperationId', example='f7834d74be4e41aa8e607b0fafae9b33'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ016'),
}

model RemoveVpcAccessAndAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveVpcAccessAndAbolishApisResponseBody(name='body'),
}

async function removeVpcAccessAndAbolishApisWithOptions(request: RemoveVpcAccessAndAbolishApisRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessAndAbolishApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.needBatchWork)) {
    query['NeedBatchWork'] = request.needBatchWork;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveVpcAccessAndAbolishApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeVpcAccessAndAbolishApis(request: RemoveVpcAccessAndAbolishApisRequest): RemoveVpcAccessAndAbolishApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessAndAbolishApisWithOptions(request, runtime);
}

model ResetAppCodeRequest {
  appCode?: string(name='AppCode', description='The current AppCode of the application.', example='3aaf905a0a1f4f0eabc6d891dfa08afc'),
  newAppCode?: string(name='NewAppCode', description='The new AppCode of the application.', example='6f0e7ab2aa5f4b8fb18421e6edf4fb6c2'),
  securityToken?: string(name='SecurityToken'),
}

model ResetAppCodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D1B18FFE-4A81-59D8-AA02-1817098977CD'),
}

model ResetAppCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAppCodeResponseBody(name='body'),
}

/**
  * The new AppCode takes effect about 2 seconds after you call this operation.
  *
  * @param request ResetAppCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetAppCodeResponse
 */
async function resetAppCodeWithOptions(request: ResetAppCodeRequest, runtime: Util.RuntimeOptions): ResetAppCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.newAppCode)) {
    query['NewAppCode'] = request.newAppCode;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAppCode',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The new AppCode takes effect about 2 seconds after you call this operation.
  *
  * @param request ResetAppCodeRequest
  * @return ResetAppCodeResponse
 */
async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeWithOptions(request, runtime);
}

model ResetAppSecretRequest {
  appKey?: string(name='AppKey', description='The key of the application that is used to make an API call.', example='60030986'),
  newAppKey?: string(name='NewAppKey'),
  newAppSecret?: string(name='NewAppSecret', description='The new key of the application. To improve compatibility, we recommend that you use other parameters.', example='test***'),
  securityToken?: string(name='SecurityToken'),
}

model ResetAppSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model ResetAppSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAppSecretResponseBody(name='body'),
}

/**
  * *   This operation is intended for API callers.
  * *   A new secret is automatically generated after you have called this operation. This secret cannot be customized.
  * *   The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
  *
  * @param request ResetAppSecretRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetAppSecretResponse
 */
async function resetAppSecretWithOptions(request: ResetAppSecretRequest, runtime: Util.RuntimeOptions): ResetAppSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.newAppKey)) {
    query['NewAppKey'] = request.newAppKey;
  }
  if (!Util.isUnset(request.newAppSecret)) {
    query['NewAppSecret'] = request.newAppSecret;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAppSecret',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is intended for API callers.
  * *   A new secret is automatically generated after you have called this operation. This secret cannot be customized.
  * *   The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
  *
  * @param request ResetAppSecretRequest
  * @return ResetAppSecretResponse
 */
async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppSecretWithOptions(request, runtime);
}

model SdkGenerateByAppRequest {
  appId?: long(name='AppId', example='110797019'),
  language?: string(name='Language', example='java'),
  securityToken?: string(name='SecurityToken'),
}

model SdkGenerateByAppResponseBody = {
  downloadLink?: string(name='DownloadLink', example='UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......'),
  requestId?: string(name='RequestId', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
}

model SdkGenerateByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateByAppResponseBody(name='body'),
}

async function sdkGenerateByAppWithOptions(request: SdkGenerateByAppRequest, runtime: Util.RuntimeOptions): SdkGenerateByAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SdkGenerateByApp',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByAppWithOptions(request, runtime);
}

model SdkGenerateByAppForRegionRequest {
  appId?: long(name='AppId', example='110906109'),
  language?: string(name='Language', example='java'),
  securityToken?: string(name='SecurityToken'),
}

model SdkGenerateByAppForRegionResponseBody = {
  downloadLink?: string(name='DownloadLink', example='UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......'),
  requestId?: string(name='RequestId', example='CE5722A6-AE78-4741-A9B0-6C817D360510'),
}

model SdkGenerateByAppForRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateByAppForRegionResponseBody(name='body'),
}

async function sdkGenerateByAppForRegionWithOptions(request: SdkGenerateByAppForRegionRequest, runtime: Util.RuntimeOptions): SdkGenerateByAppForRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SdkGenerateByAppForRegion',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sdkGenerateByAppForRegion(request: SdkGenerateByAppForRegionRequest): SdkGenerateByAppForRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByAppForRegionWithOptions(request, runtime);
}

model SdkGenerateByGroupRequest {
  groupId?: string(name='GroupId', example='1a991a450b9548a1a3df38fd3af117c2'),
  language?: string(name='Language', example='java'),
  securityToken?: string(name='SecurityToken'),
}

model SdkGenerateByGroupResponseBody = {
  downloadLink?: string(name='DownloadLink', example='http://oss-bucket/object'),
  requestId?: string(name='RequestId', example='D0075BDA-8AED-5073-A70A-FE44E86AB20F'),
}

model SdkGenerateByGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateByGroupResponseBody(name='body'),
}

async function sdkGenerateByGroupWithOptions(request: SdkGenerateByGroupRequest, runtime: Util.RuntimeOptions): SdkGenerateByGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SdkGenerateByGroup',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByGroupWithOptions(request, runtime);
}

model SetAccessControlListAttributeRequest {
  aclId?: string(name='AclId', example='acl-bp1ohqkonqybecf4llbrc'),
  aclName?: string(name='AclName', example='testAcl'),
  securityToken?: string(name='SecurityToken'),
}

model SetAccessControlListAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CEB6EC62-B6C7-5082-A45A-45A204724AC2'),
}

model SetAccessControlListAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAccessControlListAttributeResponseBody(name='body'),
}

async function setAccessControlListAttributeWithOptions(request: SetAccessControlListAttributeRequest, runtime: Util.RuntimeOptions): SetAccessControlListAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.aclName)) {
    query['AclName'] = request.aclName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAccessControlListAttribute',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAccessControlListAttribute(request: SetAccessControlListAttributeRequest): SetAccessControlListAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAccessControlListAttributeWithOptions(request, runtime);
}

model SetApisAuthoritiesRequest {
  apiIds?: string(name='ApiIds', description='Queries weather based on the region name', example='baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78'),
  appId?: long(name='AppId', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='2386789'),
  authValidTime?: string(name='AuthValidTime', description='*   This operation is intended for API providers and callers.
*   API providers can authorize any apps to call their APIs.
*   API callers can authorize their own apps to call the APIs that they have purchased.', example='Fri,05Oct201816:00:00GMT'),
  description?: string(name='Description', description='The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.', example='The ID of the request.'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The description of the authorization.', example='TEST'),
}

model SetApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='Authorizes a specified app to call multiple APIs.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model SetApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApisAuthoritiesResponseBody(name='body'),
}

/**
  * The ID of the app. This ID is generated by the system and globally unique.
  *
  * @param request SetApisAuthoritiesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetApisAuthoritiesResponse
 */
async function setApisAuthoritiesWithOptions(request: SetApisAuthoritiesRequest, runtime: Util.RuntimeOptions): SetApisAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.authValidTime)) {
    query['AuthValidTime'] = request.authValidTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApisAuthorities',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the app. This ID is generated by the system and globally unique.
  *
  * @param request SetApisAuthoritiesRequest
  * @return SetApisAuthoritiesResponse
 */
async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApisAuthoritiesWithOptions(request, runtime);
}

model SetAppsAuthoritiesRequest {
  apiId?: string(name='ApiId', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='baacc592e63a4cb6a41920d9d3f91f38'),
  appIds?: string(name='AppIds', description='Queries weather based on the region name', example='2386789,3389798'),
  authValidTime?: string(name='AuthValidTime', description='*   This operation is intended for API providers and callers.
*   API providers can authorize any apps to call their APIs.
*   API callers can authorize their own apps to call the APIs that they have purchased.', example='Fri,05Oct201816:00:00GMT'),
  description?: string(name='Description', description='The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.', example='The ID of the request.'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='523e8dc7bbe04613b5b1d726c2a7889d'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The description of the authorization.', example='TEST'),
}

model SetAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId', description='Grants access permissions on a specified API to multiple apps.', example='D6E46F10-F26C-4AA0-BB69-FE2743D9AE62'),
}

model SetAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAppsAuthoritiesResponseBody(name='body'),
}

/**
  * The ID of the API. This ID is generated by the system and globally unique.
  *
  * @param request SetAppsAuthoritiesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetAppsAuthoritiesResponse
 */
async function setAppsAuthoritiesWithOptions(request: SetAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): SetAppsAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.authValidTime)) {
    query['AuthValidTime'] = request.authValidTime;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAppsAuthorities',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API. This ID is generated by the system and globally unique.
  *
  * @param request SetAppsAuthoritiesRequest
  * @return SetAppsAuthoritiesResponse
 */
async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppsAuthoritiesWithOptions(request, runtime);
}

model SetDomainRequest {
  bindStageName?: string(name='BindStageName', example='RELEASE'),
  customDomainType?: string(name='CustomDomainType', example='INTERNET'),
  domainName?: string(name='DomainName', example='api.demo.com'),
  groupId?: string(name='GroupId', example='927d50c0f2e54b359919923d908bb015'),
  isForce?: boolean(name='IsForce', example='false'),
  isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps', example='false'),
}

model SetDomainResponseBody = {
  domainBindingStatus?: string(name='DomainBindingStatus', example='BINDING'),
  domainLegalStatus?: string(name='DomainLegalStatus', example='NORMAL'),
  domainName?: string(name='DomainName', example='api.demo.com'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus', example='NORMAL'),
  groupId?: string(name='GroupId', example='927d50c0f2e54b359919923d908bb015'),
  requestId?: string(name='RequestId', example='0AA90E87-3506-5AA6-AFFB-A4D53B4F6231'),
  subDomain?: string(name='SubDomain', example='xxx-cn-hangzhou.alicloudapi.com'),
}

model SetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainResponseBody(name='body'),
}

async function setDomainWithOptions(request: SetDomainRequest, runtime: Util.RuntimeOptions): SetDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindStageName)) {
    query['BindStageName'] = request.bindStageName;
  }
  if (!Util.isUnset(request.customDomainType)) {
    query['CustomDomainType'] = request.customDomainType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.isForce)) {
    query['IsForce'] = request.isForce;
  }
  if (!Util.isUnset(request.isHttpRedirectToHttps)) {
    query['IsHttpRedirectToHttps'] = request.isHttpRedirectToHttps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomain',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWithOptions(request, runtime);
}

model SetDomainCertificateRequest {
  caCertificateBody?: string(name='CaCertificateBody'),
  certificateBody?: string(name='CertificateBody'),
  certificateName?: string(name='CertificateName', example='test_cert'),
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  domainName?: string(name='DomainName', example='api.demo.com'),
  groupId?: string(name='GroupId', example='927d50c0f2e54b359919923d908bb015'),
  securityToken?: string(name='SecurityToken'),
  sslVerifyDepth?: string(name='SslVerifyDepth', example='2'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId', example='6EF60BEC-0242-43AF-BB20-270359FB54A7'),
}

model SetDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainCertificateResponseBody(name='body'),
}

/**
  * 382271
  *
  * @param request SetDomainCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDomainCertificateResponse
 */
async function setDomainCertificateWithOptions(request: SetDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caCertificateBody)) {
    query['CaCertificateBody'] = request.caCertificateBody;
  }
  if (!Util.isUnset(request.certificateBody)) {
    query['CertificateBody'] = request.certificateBody;
  }
  if (!Util.isUnset(request.certificateName)) {
    query['CertificateName'] = request.certificateName;
  }
  if (!Util.isUnset(request.certificatePrivateKey)) {
    query['CertificatePrivateKey'] = request.certificatePrivateKey;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sslVerifyDepth)) {
    query['SslVerifyDepth'] = request.sslVerifyDepth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainCertificate',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 382271
  *
  * @param request SetDomainCertificateRequest
  * @return SetDomainCertificateResponse
 */
async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainCertificateWithOptions(request, runtime);
}

model SetDomainWebSocketStatusRequest {
  actionValue?: string(name='ActionValue', example='OPEN'),
  domainName?: string(name='DomainName', example='ac.fluvet.cn'),
  groupId?: string(name='GroupId', example='cf976e63b70c4993807e7bb9345d4695'),
  securityToken?: string(name='SecurityToken'),
  WSSEnable?: string(name='WSSEnable'),
}

model SetDomainWebSocketStatusResponseBody = {
  requestId?: string(name='RequestId', example='61A16D46-EC04-5288-8A18-811B0F536CC2'),
}

model SetDomainWebSocketStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainWebSocketStatusResponseBody(name='body'),
}

async function setDomainWebSocketStatusWithOptions(request: SetDomainWebSocketStatusRequest, runtime: Util.RuntimeOptions): SetDomainWebSocketStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionValue)) {
    query['ActionValue'] = request.actionValue;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.WSSEnable)) {
    query['WSSEnable'] = request.WSSEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainWebSocketStatus',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWebSocketStatusWithOptions(request, runtime);
}

model SetGroupAuthAppCodeRequest {
  authAppCode?: string(name='AuthAppCode'),
  groupId?: string(name='GroupId'),
  securityToken?: string(name='SecurityToken'),
}

model SetGroupAuthAppCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGroupAuthAppCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetGroupAuthAppCodeResponseBody(name='body'),
}

async function setGroupAuthAppCodeWithOptions(request: SetGroupAuthAppCodeRequest, runtime: Util.RuntimeOptions): SetGroupAuthAppCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authAppCode)) {
    query['AuthAppCode'] = request.authAppCode;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetGroupAuthAppCode',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setGroupAuthAppCode(request: SetGroupAuthAppCodeRequest): SetGroupAuthAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGroupAuthAppCodeWithOptions(request, runtime);
}

model SetIpControlApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  ipControlId?: string(name='IpControlId', description='The API IDs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='*   This operation is intended for API callers.
*   A maximum of 100 APIs can be bound at a time.', example='TEST'),
}

model SetIpControlApisResponseBody = {
  requestId?: string(name='RequestId', description='Creates a binding relationship between specified access control lists (ACLs) and APIs.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetIpControlApisResponseBody(name='body'),
}

/**
  * The ID of the API group.
  *
  * @param request SetIpControlApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetIpControlApisResponse
 */
async function setIpControlApisWithOptions(request: SetIpControlApisRequest, runtime: Util.RuntimeOptions): SetIpControlApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ipControlId)) {
    query['IpControlId'] = request.ipControlId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetIpControlApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group.
  *
  * @param request SetIpControlApisRequest
  * @return SetIpControlApisResponse
 */
async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpControlApisWithOptions(request, runtime);
}

model SetSignatureApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **PRE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
  stageName?: string(name='StageName', description='*   This API is intended for API providers.
*   This operation allows you to bind a signature key to an API. You can bind signature keys for up to 100 APIs at a time.', example='TEST'),
}

model SetSignatureApisResponseBody = {
  requestId?: string(name='RequestId', description='Binds a signature key to APIs.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSignatureApisResponseBody(name='body'),
}

/**
  * The ID of the signature key.
  *
  * @param request SetSignatureApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetSignatureApisResponse
 */
async function setSignatureApisWithOptions(request: SetSignatureApisRequest, runtime: Util.RuntimeOptions): SetSignatureApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetSignatureApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the signature key.
  *
  * @param request SetSignatureApisRequest
  * @return SetSignatureApisResponse
 */
async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSignatureApisWithOptions(request, runtime);
}

model SetTrafficControlApisRequest {
  apiIds?: string(name='ApiIds', description='The ID of the request.', example='3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='*   This API is intended for API providers.
*   This API allows you to bind a specific throttling policy to up to 100 APIs at a time.', example='RELEASE'),
  trafficControlId?: string(name='TrafficControlId', description='The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.', example='dd05f1c54d6749eda95f9fa6d491449a'),
}

model SetTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId', description='Binds a throttling policy to APIs.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ004'),
}

model SetTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetTrafficControlApisResponseBody(name='body'),
}

/**
  * The ID of the API group containing the APIs to which you want to bind a specified throttling policy.
  *
  * @param request SetTrafficControlApisRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetTrafficControlApisResponse
 */
async function setTrafficControlApisWithOptions(request: SetTrafficControlApisRequest, runtime: Util.RuntimeOptions): SetTrafficControlApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetTrafficControlApis',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API group containing the APIs to which you want to bind a specified throttling policy.
  *
  * @param request SetTrafficControlApisRequest
  * @return SetTrafficControlApisResponse
 */
async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTrafficControlApisWithOptions(request, runtime);
}

model SetVpcAccessRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId', example='i-uf6bzcg1pr4oh5jjmxxx'),
  name?: string(name='Name', example='test'),
  port?: int32(name='Port', example='80'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId', example='vpc-uf657qec7lx42paw3qxxx'),
  vpcTargetHostName?: string(name='VpcTargetHostName', example='iot.hu***ng.com'),
}

model SetVpcAccessResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ015'),
}

model SetVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetVpcAccessResponseBody(name='body'),
}

async function setVpcAccessWithOptions(request: SetVpcAccessRequest, runtime: Util.RuntimeOptions): SetVpcAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcTargetHostName)) {
    query['VpcTargetHostName'] = request.vpcTargetHostName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetVpcAccess',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVpcAccessWithOptions(request, runtime);
}

model SetWildcardDomainPatternsRequest {
  domainName?: string(name='DomainName', example='*.prd.e-eir.com'),
  groupId?: string(name='GroupId', example='0009db9c828549768a200320714b8930'),
  securityToken?: string(name='SecurityToken'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns', example='[\\"{svc}.prd.e-eir.com\\"]'),
}

model SetWildcardDomainPatternsResponseBody = {
  requestId?: string(name='RequestId', example='D0075BDA-8AED-5073-A70A-FE44E86AB20F'),
}

model SetWildcardDomainPatternsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetWildcardDomainPatternsResponseBody(name='body'),
}

async function setWildcardDomainPatternsWithOptions(request: SetWildcardDomainPatternsRequest, runtime: Util.RuntimeOptions): SetWildcardDomainPatternsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.wildcardDomainPatterns)) {
    query['WildcardDomainPatterns'] = request.wildcardDomainPatterns;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetWildcardDomainPatterns',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWildcardDomainPatternsWithOptions(request, runtime);
}

model SwitchApiRequest {
  apiId?: string(name='ApiId', description='The description of the switch operation.', example='d6f679aeb3be4b91b3688e887ca1fe16'),
  description?: string(name='Description', description='The ID of the request.', example='for_demo'),
  groupId?: string(name='GroupId', description='The name of the runtime environment. Valid values:

*   **RELEASE**
*   **TEST**', example='123'),
  historyVersion?: string(name='HistoryVersion', description='*   This API is intended for API providers.
*   The historical version can be obtained through the DescribeHistoryApis API.****
*   Only APIs that have been published more than once have historical versions to switch to.
*   This operation can only be performed on running APIs. Use caution when performing this operation because the operation cannot be undone after it has been completed and takes effect within 5 seconds.
*   The switch operation is in essence a publish operation, and the reason for this operation must be provided.', example='20160705104552292'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName', description='The historical version you want to switch to.', example='RELEASE'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId', description='Switches the definition of an API in a specified runtime environment to a historical version.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BZ001'),
}

model SwitchApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchApiResponseBody(name='body'),
}

/**
  * The ID of the API.
  *
  * @param request SwitchApiRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SwitchApiResponse
 */
async function switchApiWithOptions(request: SwitchApiRequest, runtime: Util.RuntimeOptions): SwitchApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchApi',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the API.
  *
  * @param request SwitchApiRequest
  * @return SwitchApiResponse
 */
async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', example='285bb759342649a1b70c2093a772e087'),
  resourceType?: string(name='ResourceType', description='The operation that you want to perform. Set the value to **TagResources**.', example='apiGroup'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='Adds tags to resources.', example='env'),
      value?: string(name='Value', description='TagResources', example='\\" \\"'),
    }
  ](name='Tag', example='2021022811'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='EF924FE4-2EDD-4CD3-89EC-34E4708574E7'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * The key of tag N.
  * Valid values of N: `1 to 20.`
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The key of tag N.
  * Valid values of N: `1 to 20.`
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='The ID of the request.', example='true'),
  resourceId?: [ string ](name='ResourceId', example='285bb759342649a1b70c2093a772e087'),
  resourceType?: string(name='ResourceType', description='The key of tag N.

Valid values of N: `1 to 20.`', example='apiGroup'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey', example='env'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='UntagResources', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:
  * *   **true**
  * *   **false**
  *
  * @param request UntagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:
  * *   **true**
  * *   **false**
  *
  * @param request UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model ValidateVpcConnectivityRequest {
  instanceId?: string(name='InstanceId', example='apigateway-hz-72bc18******'),
  securityToken?: string(name='SecurityToken'),
  vpcAccessId?: string(name='VpcAccessId', example='5f1b3216f9********e2c1297b6741dc'),
}

model ValidateVpcConnectivityResponseBody = {
  connected?: boolean(name='Connected', example='True'),
  ipType?: string(name='IpType', example='ECS'),
  requestId?: string(name='RequestId', example='9A591B5B-0EC2-5463-B8B8-1984AE3AEBF1'),
}

model ValidateVpcConnectivityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateVpcConnectivityResponseBody(name='body'),
}

async function validateVpcConnectivityWithOptions(request: ValidateVpcConnectivityRequest, runtime: Util.RuntimeOptions): ValidateVpcConnectivityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcAccessId)) {
    query['VpcAccessId'] = request.vpcAccessId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ValidateVpcConnectivity',
    version = '2016-07-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateVpcConnectivity(request: ValidateVpcConnectivityRequest): ValidateVpcConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateVpcConnectivityWithOptions(request, runtime);
}

