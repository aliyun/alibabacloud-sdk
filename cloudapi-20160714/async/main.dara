/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CloudAPI';
  @version = '2016-07-14';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbolishApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model AbolishApiResponse = {
  headers: map[string]string(name='headers'),
  body: AbolishApiResponseBody(name='body'),
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbolishApi', 'POST', '/', 'json', false, 'json', request);
}

model AddAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', position='Query'),
  aclId: string(name='AclId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddAccessControlListEntryResponse = {
  headers: map[string]string(name='headers'),
  body: AddAccessControlListEntryResponseBody(name='body'),
}

async function addAccessControlListEntry(request: AddAccessControlListEntryRequest): AddAccessControlListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAccessControlListEntry', 'POST', '/', 'json', false, 'json', request);
}

model AddIpControlPolicyItemRequest {
  appId?: string(name='AppId', position='Query'),
  cidrIp: string(name='CidrIp', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddIpControlPolicyItemResponseBody = {
  policyItemId?: string(name='PolicyItemId'),
  requestId?: string(name='RequestId'),
}

model AddIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: AddIpControlPolicyItemResponseBody(name='body'),
}

async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model AddTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  specialKey: string(name='SpecialKey', position='Query'),
  specialType: string(name='SpecialType', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
  trafficValue: int32(name='TrafficValue', position='Query'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: AddTrafficSpecialControlResponseBody(name='body'),
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model AttachPluginRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiIds?: string(name='ApiIds', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pluginId: string(name='PluginId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model AttachPluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPluginResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPluginResponseBody(name='body'),
}

async function attachPlugin(request: AttachPluginRequest): AttachPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPlugin', 'POST', '/', 'json', false, 'json', request);
}

model BatchAbolishApisRequest {
  api: [ 
    {
      apiUid: string(name='ApiUid'),
      groupId: string(name='GroupId'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
    }
  ](name='Api', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchAbolishApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model BatchAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAbolishApisResponseBody(name='body'),
}

async function batchAbolishApis(request: BatchAbolishApisRequest): BatchAbolishApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAbolishApis', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeployApisRequest {
  api?: [ 
    {
      apiUid: string(name='ApiUid'),
      groupId: string(name='GroupId'),
    }
  ](name='Api', position='Query'),
  description: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model BatchDeployApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model BatchDeployApisResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeployApisResponseBody(name='body'),
}

async function batchDeployApis(request: BatchDeployApisRequest): BatchDeployApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeployApis', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessControlListRequest {
  aclName: string(name='AclName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateAccessControlListResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccessControlListResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccessControlListResponseBody(name='body'),
}

async function createAccessControlList(request: CreateAccessControlListRequest): CreateAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessControlList', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  backendEnable?: boolean(name='BackendEnable', position='Query'),
  backendId?: string(name='BackendId', position='Query'),
  constantParameters?: string(name='ConstantParameters', position='Query'),
  description?: string(name='Description', position='Query'),
  disableInternet?: boolean(name='DisableInternet', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Query'),
  failResultSample?: string(name='FailResultSample', position='Query'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', position='Query'),
  requestConfig: string(name='RequestConfig', position='Query'),
  requestParameters?: string(name='RequestParameters', position='Query'),
  resultBodyModel?: string(name='ResultBodyModel', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Query'),
  resultSample?: string(name='ResultSample', position='Query'),
  resultType?: string(name='ResultType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Query'),
  systemParameters?: string(name='SystemParameters', position='Query'),
  visibility: string(name='Visibility', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', position='Query'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
}

model CreateApiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiResponseBody(name='body'),
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApi', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiGroupRequest {
  basePath?: string(name='BasePath', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreateApiGroupResponseBody = {
  basePath?: string(name='BasePath'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
  tagStatus?: boolean(name='TagStatus'),
}

model CreateApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiStageVariableRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', position='Query'),
  stageRouteModel?: string(name='StageRouteModel', position='Query'),
  supportRoute?: boolean(name='SupportRoute', position='Query'),
  variableName: string(name='VariableName', position='Query'),
  variableValue?: string(name='VariableValue', position='Query'),
}

model CreateApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApiStageVariableResponseBody(name='body'),
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  appCode?: string(name='AppCode', position='Query'),
  appKey?: string(name='AppKey', position='Query'),
  appName: string(name='AppName', position='Query'),
  appSecret?: string(name='AppSecret', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  source?: string(name='Source', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreateAppResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
  tagStatus?: boolean(name='TagStatus'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackendRequest {
  backendName: string(name='BackendName', position='Query'),
  backendType: string(name='BackendType', position='Query'),
  createEventBridgeServiceLinkedRole?: boolean(name='CreateEventBridgeServiceLinkedRole', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateBackendResponseBody = {
  backendId?: string(name='BackendId'),
  requestId?: string(name='RequestId'),
}

model CreateBackendResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackendResponseBody(name='body'),
}

async function createBackend(request: CreateBackendRequest): CreateBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackend', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackendModelRequest {
  backendId?: string(name='BackendId', position='Query'),
  backendModelData?: string(name='BackendModelData', position='Query'),
  backendType?: string(name='BackendType', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model CreateBackendModelResponseBody = {
  backendModelId?: string(name='BackendModelId'),
  requestId?: string(name='RequestId'),
}

model CreateBackendModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackendModelResponseBody(name='body'),
}

async function createBackendModel(request: CreateBackendModelRequest): CreateBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatasetRequest {
  datasetName: string(name='DatasetName', position='Query'),
  datasetType: string(name='DatasetType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateDatasetResponseBody = {
  datasetId?: string(name='DatasetId'),
  requestId?: string(name='RequestId'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataset', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatasetItemRequest {
  datasetId: string(name='DatasetId', position='Query'),
  description?: string(name='Description', position='Query'),
  expiredTime?: string(name='ExpiredTime', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  value: string(name='Value', position='Query'),
}

model CreateDatasetItemResponseBody = {
  datasetItemId?: string(name='DatasetItemId'),
  requestId?: string(name='RequestId'),
}

model CreateDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetItemResponseBody(name='body'),
}

async function createDatasetItem(request: CreateDatasetItemRequest): CreateDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  httpsPolicy?: string(name='HttpsPolicy', position='Query'),
  instanceName: string(name='InstanceName', position='Query'),
  instanceSpec: string(name='InstanceSpec', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  token: string(name='Token', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntranetDomainRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateIntranetDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model CreateIntranetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntranetDomainResponseBody(name='body'),
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntranetDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpControlRequest {
  description?: string(name='Description', position='Query'),
  ipControlName: string(name='IpControlName', position='Query'),
  ipControlPolicys?: [ 
    {
      appId?: string(name='AppId'),
      cidrIp?: string(name='CidrIp'),
    }
  ](name='IpControlPolicys', position='Query'),
  ipControlType: string(name='IpControlType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateIpControlResponseBody = {
  ipControlId?: string(name='IpControlId'),
  requestId?: string(name='RequestId'),
}

model CreateIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpControlResponseBody(name='body'),
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpControl', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', position='Query'),
  slsProject: string(name='SlsProject', position='Query'),
}

model CreateLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLogConfigResponseBody(name='body'),
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateModelRequest {
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  modelName: string(name='ModelName', position='Query'),
  schema: string(name='Schema', position='Query'),
}

model CreateModelResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  modelId?: string(name='ModelId'),
  modelName?: string(name='ModelName'),
  modelRef?: string(name='ModelRef'),
  modifiedTime?: string(name='ModifiedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupRequest {
  auth: string(name='Auth', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateMonitorGroupResponseBody = {
  monitorGroupId?: long(name='MonitorGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupResponseBody(name='body'),
}

async function createMonitorGroup(request: CreateMonitorGroupRequest): CreateMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePluginRequest {
  description?: string(name='Description', position='Query'),
  pluginData: string(name='PluginData', position='Query'),
  pluginName: string(name='PluginName', position='Query'),
  pluginType: string(name='PluginType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreatePluginResponseBody = {
  pluginId?: string(name='PluginId'),
  requestId?: string(name='RequestId'),
  tagStatus?: boolean(name='TagStatus'),
}

model CreatePluginResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePluginResponseBody(name='body'),
}

async function createPlugin(request: CreatePluginRequest): CreatePluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePlugin', 'POST', '/', 'json', false, 'json', request);
}

model CreateSignatureRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureKey: string(name='SignatureKey', position='Query'),
  signatureName: string(name='SignatureName', position='Query'),
  signatureSecret: string(name='SignatureSecret', position='Query'),
}

model CreateSignatureResponseBody = {
  requestId?: string(name='RequestId'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignatureResponseBody(name='body'),
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSignature', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficControlRequest {
  apiDefault: int32(name='ApiDefault', position='Query'),
  appDefault?: int32(name='AppDefault', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlName: string(name='TrafficControlName', position='Query'),
  trafficControlUnit: string(name='TrafficControlUnit', position='Query'),
  userDefault?: int32(name='UserDefault', position='Query'),
}

model CreateTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlId?: string(name='TrafficControlId'),
}

model CreateTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficControlResponseBody(name='body'),
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessControlListRequest {
  aclId: string(name='AclId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAccessControlListResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccessControlListResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccessControlListResponseBody(name='body'),
}

async function deleteAccessControlList(request: DeleteAccessControlListRequest): DeleteAccessControlListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessControlList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAllTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiResponseBody(name='body'),
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiStageVariableRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', position='Query'),
  variableName: string(name='VariableName', position='Query'),
}

model DeleteApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApiStageVariableResponseBody(name='body'),
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackendRequest {
  backendId?: string(name='BackendId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteBackendResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackendResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackendResponseBody(name='body'),
}

async function deleteBackend(request: DeleteBackendRequest): DeleteBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackend', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackendModelRequest {
  backendId?: string(name='BackendId', position='Query'),
  backendModelId?: string(name='BackendModelId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DeleteBackendModelResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model DeleteBackendModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackendModelResponseBody(name='body'),
}

async function deleteBackendModel(request: DeleteBackendModelRequest): DeleteBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatasetRequest {
  datasetId: string(name='DatasetId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataset', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatasetItemRequest {
  datasetId: string(name='DatasetId', position='Query'),
  datasetItemId: string(name='DatasetItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDatasetItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetItemResponseBody(name='body'),
}

async function deleteDatasetItem(request: DeleteDatasetItemRequest): DeleteDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainCertificateRequest {
  certificateId: string(name='CertificateId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpControlRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpControlResponseBody(name='body'),
}

async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLogConfigResponseBody(name='body'),
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteModelRequest {
  groupId: string(name='GroupId', position='Query'),
  modelName: string(name='ModelName', position='Query'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  rawMonitorGroupId?: long(name='RawMonitorGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteMonitorGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitorGroupResponseBody(name='body'),
}

async function deleteMonitorGroup(request: DeleteMonitorGroupRequest): DeleteMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeletePluginRequest {
  pluginId: string(name='PluginId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DeletePluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePluginResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePluginResponseBody(name='body'),
}

async function deletePlugin(request: DeletePluginRequest): DeletePluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePlugin', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSignatureRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', position='Query'),
}

model DeleteSignatureResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSignatureResponseBody(name='body'),
}

async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSignature', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficControlResponseBody(name='body'),
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  specialKey: string(name='SpecialKey', position='Query'),
  specialType: string(name='SpecialType', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficSpecialControlResponseBody(name='body'),
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeployApiRequest {
  apiId: string(name='ApiId', position='Query'),
  description: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeployApiResponseBody(name='body'),
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAbolishApiTaskRequest {
  operationUid: string(name='OperationUid', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAbolishApiTaskResponseBody = {
  apiAbolishResults?: {
    apiAbolishResult?: [ 
    {
      abolishStatus?: string(name='AbolishStatus'),
      apiName?: string(name='ApiName'),
      apiUid?: string(name='ApiUid'),
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
    }
  ](name='ApiAbolishResult')
  }(name='ApiAbolishResults'),
  requestId?: string(name='RequestId'),
}

model DescribeAbolishApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAbolishApiTaskResponseBody(name='body'),
}

async function describeAbolishApiTask(request: DescribeAbolishApiTaskRequest): DescribeAbolishApiTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAbolishApiTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessControlListAttributeRequest {
  aclId?: string(name='AclId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccessControlListAttributeResponseBody = {
  aclEntrys?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment'),
      aclEntryIp?: string(name='AclEntryIp'),
    }
  ](name='AclEntry')
  }(name='AclEntrys'),
  aclId?: string(name='AclId'),
  aclName?: string(name='AclName'),
  isUsed?: string(name='IsUsed'),
  requestId?: string(name='RequestId'),
}

model DescribeAccessControlListAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessControlListAttributeResponseBody(name='body'),
}

async function describeAccessControlListAttribute(request: DescribeAccessControlListAttributeRequest): DescribeAccessControlListAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessControlListAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessControlListsRequest {
  aclName?: string(name='AclName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccessControlListsResponseBody = {
  acls?: {
    acl?: [ 
    {
      aclId?: string(name='AclId'),
      aclName?: string(name='AclName'),
    }
  ](name='Acl')
  }(name='Acls'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccessControlListsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessControlListsResponseBody(name='body'),
}

async function describeAccessControlLists(request: DescribeAccessControlListsRequest): DescribeAccessControlListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessControlLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
  authType?: string(name='AuthType'),
  backendConfig?: {
    backendId?: string(name='BackendId'),
    backendName?: string(name='BackendName'),
    backendType?: string(name='BackendType'),
  }(name='BackendConfig'),
  backendEnable?: boolean(name='BackendEnable'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  createdTime?: string(name='CreatedTime'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      deployedStatus?: string(name='DeployedStatus'),
      effectiveVersion?: string(name='EffectiveVersion'),
      stageName?: string(name='StageName'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos'),
  description?: string(name='Description'),
  disableInternet?: boolean(name='DisableInternet'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
      model?: string(name='Model'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  modifiedTime?: string(name='ModifiedTime'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    bodyModel?: string(name='BodyModel'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestMode?: string(name='RequestMode'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      arrayItemsType?: string(name='ArrayItemsType'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: int32(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: {
    aoneAppName?: string(name='AoneAppName'),
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    contentTypeValue?: string(name='ContentTypeValue'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId'),
      eventBus?: string(name='EventBus'),
      eventSource?: string(name='EventSource'),
      roleArn?: string(name='RoleArn'),
    }(name='EventBridgeConfig'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      contentTypeValue?: string(name='ContentTypeValue'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      fcType?: string(name='FcType'),
      functionName?: string(name='FunctionName'),
      method?: string(name='Method'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      path?: string(name='Path'),
      qualifier?: string(name='Qualifier'),
      regionId?: string(name='RegionId'),
      roleArn?: string(name='RoleArn'),
      serviceName?: string(name='ServiceName'),
    }(name='FunctionComputeConfig'),
    mock?: string(name='Mock'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName'),
        headerValue?: string(name='HeaderValue'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    mockResult?: string(name='MockResult'),
    mockStatusCode?: int32(name='MockStatusCode'),
    ossConfig?: {
      action?: string(name='Action'),
      bucketName?: string(name='BucketName'),
      key?: string(name='Key'),
      ossRegionId?: string(name='OssRegionId'),
    }(name='OssConfig'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    servicePath?: string(name='ServicePath'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      port?: int32(name='Port'),
      vpcId?: string(name='VpcId'),
      vpcScheme?: string(name='VpcScheme'),
    }(name='VpcConfig'),
  }(name='ServiceConfig'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  webSocketApiType?: string(name='WebSocketApiType'),
}

model DescribeApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiResponseBody(name='body'),
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  disableInternet?: boolean(name='DisableInternet'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestMode?: string(name='RequestMode'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      arrayItemsType?: string(name='ArrayItemsType'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: int32(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  stageName?: string(name='StageName'),
  visibility?: string(name='Visibility'),
}

model DescribeApiDocResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeApiGroupResponseBody = {
  basePath?: string(name='BasePath'),
  billingStatus?: string(name='BillingStatus'),
  classicVpcSubDomain?: string(name='ClassicVpcSubDomain'),
  cloudMarketCommodity?: boolean(name='CloudMarketCommodity'),
  cmsMonitorGroup?: string(name='CmsMonitorGroup'),
  compatibleFlags?: string(name='CompatibleFlags'),
  createdTime?: string(name='CreatedTime'),
  customDomains?: {
    domainItem?: [ 
    {
      bindStageName?: string(name='BindStageName'),
      certificateId?: string(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      customDomainType?: string(name='CustomDomainType'),
      domainBindingStatus?: string(name='DomainBindingStatus'),
      domainCNAMEStatus?: string(name='DomainCNAMEStatus'),
      domainLegalStatus?: string(name='DomainLegalStatus'),
      domainName?: string(name='DomainName'),
      domainRemark?: string(name='DomainRemark'),
      domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
      isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps'),
      wildcardDomainPatterns?: string(name='WildcardDomainPatterns'),
      wssEnable?: string(name='WssEnable'),
    }
  ](name='DomainItem')
  }(name='CustomDomains'),
  customTraceConfig?: string(name='CustomTraceConfig'),
  customerConfigs?: string(name='CustomerConfigs'),
  defaultDomain?: string(name='DefaultDomain'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpsPolicy?: string(name='HttpsPolicy'),
  illegalStatus?: string(name='IllegalStatus'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  instanceVipList?: string(name='InstanceVipList'),
  ipv6Status?: string(name='Ipv6Status'),
  modifiedTime?: string(name='ModifiedTime'),
  passthroughHeaders?: string(name='PassthroughHeaders'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  rpcPattern?: string(name='RpcPattern'),
  stageItems?: {
    stageInfo?: [ 
    {
      description?: string(name='Description'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
    }
  ](name='StageInfo')
  }(name='StageItems'),
  status?: string(name='Status'),
  subDomain?: string(name='SubDomain'),
  trafficLimit?: int32(name='TrafficLimit'),
  userLogConfig?: string(name='UserLogConfig'),
  vpcDomain?: string(name='VpcDomain'),
  vpcSlbIntranetDomain?: string(name='VpcSlbIntranetDomain'),
}

model DescribeApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupResponseBody(name='body'),
}

async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupVpcWhitelistRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  vpcIds?: string(name='VpcIds'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupVpcWhitelistResponseBody(name='body'),
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroupVpcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  enableTagAuth?: boolean(name='EnableTagAuth', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sort?: string(name='Sort', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      basePath?: string(name='BasePath'),
      billingStatus?: string(name='BillingStatus'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      httpsPolicy?: string(name='HttpsPolicy'),
      illegalStatus?: string(name='IllegalStatus'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      subDomain?: string(name='SubDomain'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
      trafficLimit?: int32(name='TrafficLimit'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiHistoriesRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApiHistoriesResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      historyVersion?: string(name='HistoryVersion'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      status?: string(name='Status'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiHistoriesResponseBody(name='body'),
}

async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiHistories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiHistoryRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiHistoryResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
  authType?: string(name='AuthType'),
  backendConfig?: {
    backendId?: string(name='BackendId'),
    backendName?: string(name='BackendName'),
    backendType?: string(name='BackendType'),
  }(name='BackendConfig'),
  backendEnable?: boolean(name='BackendEnable'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  disableInternet?: boolean(name='DisableInternet'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  historyVersion?: string(name='HistoryVersion'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    bodyModel?: string(name='BodyModel'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestMode?: string(name='RequestMode'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      arrayItemsType?: string(name='ArrayItemsType'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: int32(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: {
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    contentTypeValue?: string(name='ContentTypeValue'),
    eventBridgeConfig?: {
      eventBridgeRegionId?: string(name='EventBridgeRegionId'),
      eventBus?: string(name='EventBus'),
      eventSource?: string(name='EventSource'),
      roleArn?: string(name='RoleArn'),
    }(name='EventBridgeConfig'),
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      contentTypeValue?: string(name='ContentTypeValue'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      fcType?: string(name='FcType'),
      functionName?: string(name='FunctionName'),
      method?: string(name='Method'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      path?: string(name='Path'),
      qualifier?: string(name='Qualifier'),
      regionId?: string(name='RegionId'),
      roleArn?: string(name='RoleArn'),
      serviceName?: string(name='ServiceName'),
    }(name='FunctionComputeConfig'),
    mock?: string(name='Mock'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName'),
        headerValue?: string(name='HeaderValue'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    mockResult?: string(name='MockResult'),
    mockStatusCode?: int32(name='MockStatusCode'),
    ossConfig?: {
      action?: string(name='Action'),
      bucketName?: string(name='BucketName'),
      key?: string(name='Key'),
      ossRegionId?: string(name='OssRegionId'),
    }(name='OssConfig'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    servicePath?: string(name='ServicePath'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      port?: int32(name='Port'),
      vpcId?: string(name='VpcId'),
      vpcScheme?: string(name='VpcScheme'),
    }(name='VpcConfig'),
    vpcId?: string(name='VpcId'),
  }(name='ServiceConfig'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
  stageName?: string(name='StageName'),
  status?: string(name='Status'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  webSocketApiType?: string(name='WebSocketApiType'),
}

model DescribeApiHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiHistoryResponseBody(name='body'),
}

async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiIpControlsRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiIpControlsResponseBody = {
  apiIpControls?: {
    apiIpControlItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      ipControlId?: string(name='IpControlId'),
      ipControlName?: string(name='IpControlName'),
    }
  ](name='ApiIpControlItem')
  }(name='ApiIpControls'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiIpControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiIpControlsResponseBody(name='body'),
}

async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiLatencyDataRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiLatencyDataResponseBody = {
  callLatencys?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime'),
      itemValue?: string(name='ItemValue'),
    }
  ](name='MonitorItem')
  }(name='CallLatencys'),
  requestId?: string(name='RequestId'),
}

model DescribeApiLatencyDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiLatencyDataResponseBody(name='body'),
}

async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiLatencyData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiMarketAttributesRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiMarketAttributesResponseBody = {
  apiId?: string(name='ApiId'),
  marketChargingMode?: string(name='MarketChargingMode'),
  needCharging?: string(name='NeedCharging'),
  requestId?: string(name='RequestId'),
}

model DescribeApiMarketAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiMarketAttributesResponseBody(name='body'),
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiMarketAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiQpsDataRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiQpsDataResponseBody = {
  callFails?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime'),
      itemValue?: string(name='ItemValue'),
    }
  ](name='MonitorItem')
  }(name='CallFails'),
  callSuccesses?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime'),
      itemValue?: string(name='ItemValue'),
    }
  ](name='MonitorItem')
  }(name='CallSuccesses'),
  requestId?: string(name='RequestId'),
}

model DescribeApiQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiQpsDataResponseBody(name='body'),
}

async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiSignaturesRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiSignaturesResponseBody = {
  apiSignatures?: {
    apiSignatureItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      signatureId?: string(name='SignatureId'),
      signatureName?: string(name='SignatureName'),
    }
  ](name='ApiSignatureItem')
  }(name='ApiSignatures'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiSignaturesResponseBody(name='body'),
}

async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiSignatures', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiTrafficControlsRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiTrafficControlsResponseBody = {
  apiTrafficControls?: {
    apiTrafficControlItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
    }
  ](name='ApiTrafficControlItem')
  }(name='ApiTrafficControls'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiTrafficControlsResponseBody(name='body'),
}

async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiTrafficDataRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiTrafficDataResponseBody = {
  callDownloads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime'),
      itemValue?: string(name='ItemValue'),
    }
  ](name='MonitorItem')
  }(name='CallDownloads'),
  callUploads?: {
    monitorItem?: [ 
    {
      itemTime?: string(name='ItemTime'),
      itemValue?: string(name='ItemValue'),
    }
  ](name='MonitorItem')
  }(name='CallUploads'),
  requestId?: string(name='RequestId'),
}

model DescribeApiTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiTrafficDataResponseBody(name='body'),
}

async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiMethod?: string(name='ApiMethod', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  apiPath?: string(name='ApiPath', position='Query'),
  catalogId?: string(name='CatalogId', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  unDeployed?: boolean(name='UnDeployed', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribeApisResponseBody = {
  apiSummarys?: {
    apiSummary?: [ 
    {
      apiId?: string(name='ApiId'),
      apiMethod?: string(name='ApiMethod'),
      apiName?: string(name='ApiName'),
      apiPath?: string(name='ApiPath'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiSummary')
  }(name='ApiSummarys'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisResponseBody(name='body'),
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByAppRequest {
  apiName?: string(name='ApiName', description='API名称', position='Query'),
  apiUid?: string(name='ApiUid', description='API的ID', position='Query'),
  appId: long(name='AppId', description='APP的ID', position='Query'),
  description?: string(name='Description', position='Query'),
  method?: string(name='Method', description='API的请求HTTP Method', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页码', position='Query'),
  pageSize?: int32(name='PageSize', description='每页条目', position='Query'),
  path?: string(name='Path', description='API请求路径', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId', description='API的ID'),
      apiName?: string(name='ApiName', description='API名称'),
      authVaildTime?: string(name='AuthVaildTime', description='授权有效时间'),
      authorizationSource?: string(name='AuthorizationSource', description='授权来源'),
      createdTime?: string(name='CreatedTime', description='授权时间'),
      description?: string(name='Description', description='描述'),
      groupId?: string(name='GroupId', description='分组ID'),
      groupName?: string(name='GroupName', description='分组名称'),
      method?: string(name='Method', description='API的请求HTTP Method'),
      operator?: string(name='Operator'),
      path?: string(name='Path', description='API的请求路径'),
      regionId?: string(name='RegionId', description='地区ID'),
      stageName?: string(name='StageName', description='环境名称'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber', description='当前页码'),
  pageSize?: int32(name='PageSize', description='每页条目'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: int32(name='TotalCount', description='总条目数'),
}

model DescribeApisByAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByBackendRequest {
  backendId: string(name='BackendId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApisByBackendResponseBody = {
  apiInfoList?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      method?: string(name='Method'),
      path?: string(name='Path'),
    }
  ](name='ApiInfo')
  }(name='ApiInfoList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByBackendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByBackendResponseBody(name='body'),
}

async function describeApisByBackend(request: DescribeApisByBackendRequest): DescribeApisByBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByBackend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByIpControlRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByIpControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByIpControlResponseBody(name='body'),
}

async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisBySignatureRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', position='Query'),
}

model DescribeApisBySignatureResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisBySignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisBySignatureResponseBody(name='body'),
}

async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisBySignature', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByTrafficControlRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DescribeApisByTrafficControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApisByTrafficControlResponseBody(name='body'),
}

async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppRequest {
  appId?: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppResponseBody = {
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppAttributesRequest {
  appCode?: string(name='AppCode', position='Query'),
  appId?: long(name='AppId', position='Query'),
  appKey?: string(name='AppKey', position='Query'),
  appName?: string(name='AppName', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sort?: string(name='Sort', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeAppAttributesResponseBody = {
  apps?: {
    appAttribute?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='AppAttribute')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppAttributesResponseBody(name='body'),
}

async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecurityRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeAppSecurityResponseBody = {
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  createdTime?: string(name='CreatedTime'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppSecurityResponseBody(name='body'),
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: long(name='AppId', position='Query'),
  appOwner?: long(name='AppOwner', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsResponseBody = {
  apps?: {
    appItem?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      description?: string(name='Description'),
    }
  ](name='AppItem')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthorizedApisRequest {
  appId: long(name='AppId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAuthorizedApisResponseBody = {
  authorizedApis?: {
    authorizedApi?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      authVaildTime?: string(name='AuthVaildTime'),
      authorizationSource?: string(name='AuthorizationSource'),
      authorizedTime?: string(name='AuthorizedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      operator?: string(name='Operator'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='AuthorizedApi')
  }(name='AuthorizedApis'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuthorizedApisResponseBody(name='body'),
}

async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthorizedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuthorizedAppsRequest {
  apiId: string(name='ApiId', position='Query'),
  appId?: long(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  appOwnerId?: long(name='AppOwnerId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeAuthorizedAppsResponseBody = {
  authorizedApps?: {
    authorizedApp?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      authVaildTime?: string(name='AuthVaildTime'),
      authorizationSource?: string(name='AuthorizationSource'),
      authorizedTime?: string(name='AuthorizedTime'),
      description?: string(name='Description'),
      operator?: string(name='Operator'),
      stageName?: string(name='StageName'),
    }
  ](name='AuthorizedApp')
  }(name='AuthorizedApps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAuthorizedAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuthorizedAppsResponseBody(name='body'),
}

async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuthorizedApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackendInfoRequest {
  backendId?: string(name='BackendId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBackendInfoResponseBody = {
  backendInfo?: {
    backendId?: string(name='BackendId'),
    backendModels?: [ 
      {
        backendConfig?: {
          eventBridgeConfig?: {
            eventBridgeRegionId?: string(name='EventBridgeRegionId'),
            eventBus?: string(name='EventBus'),
            eventSource?: string(name='EventSource'),
            roleArn?: string(name='RoleArn'),
          }(name='EventBridgeConfig'),
          functionComputeConfig?: {
            fcBaseUrl?: string(name='FcBaseUrl'),
            fcRegionId?: string(name='FcRegionId'),
            fcType?: string(name='FcType'),
            functionName?: string(name='FunctionName'),
            onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
            qualifier?: string(name='Qualifier'),
            roleArn?: string(name='RoleArn'),
            serviceName?: string(name='ServiceName'),
          }(name='FunctionComputeConfig'),
          mockConfig?: {
            mockHeaders?: [ 
              {
                headerName?: string(name='HeaderName'),
                headerValue?: string(name='HeaderValue'),
              }
            ](name='MockHeaders'),
            mockResult?: string(name='MockResult'),
            mockStatusCode?: string(name='MockStatusCode'),
          }(name='MockConfig'),
          ossConfig?: {
            bucketName?: string(name='BucketName'),
            ossRegionId?: string(name='OssRegionId'),
          }(name='OssConfig'),
          serviceAddress?: string(name='ServiceAddress'),
          type?: string(name='Type'),
          vpcConfig?: {
            instanceId?: string(name='InstanceId'),
            name?: string(name='Name'),
            port?: long(name='Port'),
            vpcAccessId?: string(name='VpcAccessId'),
            vpcId?: string(name='VpcId'),
            vpcScheme?: string(name='VpcScheme'),
            vpcTargetHostName?: string(name='VpcTargetHostName'),
          }(name='VpcConfig'),
        }(name='BackendConfig'),
        backendModelId?: string(name='BackendModelId'),
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        stageModeId?: string(name='StageModeId'),
        stageName?: string(name='StageName'),
      }
    ](name='BackendModels'),
    backendName?: string(name='BackendName'),
    backendType?: string(name='BackendType'),
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    modifiedTime?: string(name='ModifiedTime'),
  }(name='BackendInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBackendInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackendInfoResponseBody(name='body'),
}

async function describeBackendInfo(request: DescribeBackendInfoRequest): DescribeBackendInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackendInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackendListRequest {
  backendName?: string(name='BackendName', position='Query'),
  backendType?: string(name='BackendType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBackendListResponseBody = {
  backendInfoList?: [ 
    {
      backendId?: string(name='BackendId'),
      backendName?: string(name='BackendName'),
      backendType?: string(name='BackendType'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='BackendInfoList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBackendListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackendListResponseBody(name='body'),
}

async function describeBackendList(request: DescribeBackendListRequest): DescribeBackendListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackendList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetInfoRequest {
  datasetId: string(name='DatasetId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDatasetInfoResponseBody = {
  datasetInfo?: {
    createdTime?: string(name='CreatedTime'),
    datasetId?: string(name='DatasetId'),
    datasetName?: string(name='DatasetName'),
    datasetType?: string(name='DatasetType'),
    modifiedTime?: string(name='ModifiedTime'),
  }(name='DatasetInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDatasetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatasetInfoResponseBody(name='body'),
}

async function describeDatasetInfo(request: DescribeDatasetInfoRequest): DescribeDatasetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetItemInfoRequest {
  datasetId: string(name='DatasetId', position='Query'),
  datasetItemId?: string(name='DatasetItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  value?: string(name='Value', position='Query'),
}

model DescribeDatasetItemInfoResponseBody = {
  datasetItemInfo?: {
    createdTime?: string(name='CreatedTime'),
    datasetId?: string(name='DatasetId'),
    datasetItemId?: string(name='DatasetItemId'),
    description?: string(name='Description'),
    expiredTime?: string(name='ExpiredTime'),
    modifiedTime?: string(name='ModifiedTime'),
    value?: string(name='Value'),
  }(name='DatasetItemInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDatasetItemInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatasetItemInfoResponseBody(name='body'),
}

async function describeDatasetItemInfo(request: DescribeDatasetItemInfoRequest): DescribeDatasetItemInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetItemInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetItemListRequest {
  datasetId: string(name='DatasetId', position='Query'),
  datasetItemIds?: string(name='DatasetItemIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDatasetItemListResponseBody = {
  datasetItemInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      datasetId?: string(name='DatasetId'),
      datasetItemId?: string(name='DatasetItemId'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      modifiedTime?: string(name='ModifiedTime'),
      value?: string(name='Value'),
    }
  ](name='DatasetItemInfoList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDatasetItemListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatasetItemListResponseBody(name='body'),
}

async function describeDatasetItemList(request: DescribeDatasetItemListRequest): DescribeDatasetItemListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetItemList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatasetListRequest {
  datasetIds?: string(name='DatasetIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDatasetListResponseBody = {
  datasetInfoList?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      datasetId?: string(name='DatasetId'),
      datasetName?: string(name='DatasetName'),
      datasetType?: string(name='DatasetType'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='DatasetInfoList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDatasetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatasetListResponseBody(name='body'),
}

async function describeDatasetList(request: DescribeDatasetListRequest): DescribeDatasetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatasetList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployApiTaskRequest {
  operationUid: string(name='OperationUid', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDeployApiTaskResponseBody = {
  deployedResults?: {
    deployedResult?: [ 
    {
      apiUid?: string(name='ApiUid'),
      deployedStatus?: string(name='DeployedStatus'),
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      stageName?: string(name='StageName'),
    }
  ](name='DeployedResult')
  }(name='DeployedResults'),
  requestId?: string(name='RequestId'),
}

model DescribeDeployApiTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployApiTaskResponseBody(name='body'),
}

async function describeDeployApiTask(request: DescribeDeployApiTaskRequest): DescribeDeployApiTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployApiTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeDeployedApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  disableInternet?: boolean(name='DisableInternet'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    bodyModel?: string(name='BodyModel'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestMode?: string(name='RequestMode'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParameters?: {
    requestParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      arrayItemsType?: string(name='ArrayItemsType'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: int32(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParameter')
  }(name='RequestParameters'),
  resultBodyModel?: string(name='ResultBodyModel'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: {
    functionComputeConfig?: {
      contentTypeCatagory?: string(name='ContentTypeCatagory'),
      contentTypeValue?: string(name='ContentTypeValue'),
      fcBaseUrl?: string(name='FcBaseUrl'),
      fcType?: string(name='FcType'),
      functionName?: string(name='FunctionName'),
      method?: string(name='Method'),
      onlyBusinessPath?: boolean(name='OnlyBusinessPath'),
      path?: string(name='Path'),
      qualifier?: string(name='Qualifier'),
      regionId?: string(name='RegionId'),
      roleArn?: string(name='RoleArn'),
      serviceName?: string(name='ServiceName'),
    }(name='FunctionComputeConfig'),
    mock?: string(name='Mock'),
    mockHeaders?: {
      mockHeader?: [ 
      {
        headerName?: string(name='HeaderName'),
        headerValue?: string(name='HeaderValue'),
      }
    ](name='MockHeader')
    }(name='MockHeaders'),
    mockResult?: string(name='MockResult'),
    mockStatusCode?: int32(name='MockStatusCode'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    servicePath?: string(name='ServicePath'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: int32(name='ServiceTimeout'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    vpcConfig?: {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      port?: int32(name='Port'),
      vpcId?: string(name='VpcId'),
    }(name='VpcConfig'),
    vpcId?: string(name='VpcId'),
  }(name='ServiceConfig'),
  serviceParameters?: {
    serviceParameter?: [ 
    {
      location?: string(name='Location'),
      parameterType?: string(name='ParameterType'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameter')
  }(name='ServiceParameters'),
  serviceParametersMap?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ServiceParametersMap'),
  stageName?: string(name='StageName'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
}

model DescribeDeployedApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiMethod?: string(name='ApiMethod', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  apiPath?: string(name='ApiPath', position='Query'),
  enableTagAuth?: boolean(name='EnableTagAuth', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDeployedApisResponseBody = {
  deployedApis?: {
    deployedApiItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiMethod?: string(name='ApiMethod'),
      apiName?: string(name='ApiName'),
      apiPath?: string(name='ApiPath'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='DeployedApiItem')
  }(name='DeployedApis'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDeployedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDomainResponseBody = {
  certificateBody?: string(name='CertificateBody'),
  certificateId?: string(name='CertificateId'),
  certificateName?: string(name='CertificateName'),
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainCNAMEStatus?: string(name='DomainCNAMEStatus'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  domainName?: string(name='DomainName'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeHistoryApisResponseBody = {
  apiHisItems?: {
    apiHisItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      historyVersion?: string(name='HistoryVersion'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      status?: string(name='Status'),
    }
  ](name='ApiHisItem')
  }(name='ApiHisItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHistoryApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  enableTagAuthorization?: boolean(name='EnableTagAuthorization', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instanceAttribute?: [ 
    {
      aclId?: string(name='AclId'),
      aclName?: string(name='AclName'),
      aclStatus?: string(name='AclStatus'),
      aclType?: string(name='AclType'),
      classicEgressAddress?: string(name='ClassicEgressAddress'),
      createdTime?: string(name='CreatedTime'),
      egressIpv6Enable?: boolean(name='EgressIpv6Enable'),
      expiredTime?: string(name='ExpiredTime'),
      httpsPolicies?: string(name='HttpsPolicies'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceRpsLimit?: int32(name='InstanceRpsLimit'),
      instanceSpec?: string(name='InstanceSpec'),
      instanceSpecAttributes?: {
        specAttribute?: [ 
        {
          localName?: string(name='LocalName'),
          value?: string(name='Value'),
        }
      ](name='SpecAttribute')
      }(name='InstanceSpecAttributes'),
      instanceType?: string(name='InstanceType'),
      internetEgressAddress?: string(name='InternetEgressAddress'),
      intranetSegments?: string(name='IntranetSegments'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      supportIpv6?: boolean(name='SupportIpv6'),
      userVpcId?: string(name='UserVpcId'),
      userVswitchId?: string(name='UserVswitchId'),
      vipTypeList?: string(name='VipTypeList'),
      vpcEgressAddress?: string(name='VpcEgressAddress'),
      vpcIntranetEnable?: boolean(name='VpcIntranetEnable'),
      vpcOwnerId?: long(name='VpcOwnerId'),
      vpcSlbIntranetEnable?: boolean(name='VpcSlbIntranetEnable'),
      zoneId?: string(name='ZoneId'),
      zoneLocalName?: string(name='ZoneLocalName'),
    }
  ](name='InstanceAttribute')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlPolicyItemsRequest {
  ipControlId?: string(name='IpControlId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  policyItemId?: string(name='PolicyItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlPolicyItemsResponseBody = {
  ipControlPolicyItems?: {
    ipControlPolicyItem?: [ 
    {
      appId?: string(name='AppId'),
      cidrIp?: string(name='CidrIp'),
      createTime?: string(name='CreateTime'),
      modifiedTime?: string(name='ModifiedTime'),
      policyItemId?: string(name='PolicyItemId'),
    }
  ](name='IpControlPolicyItem')
  }(name='IpControlPolicyItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeIpControlPolicyItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpControlPolicyItemsResponseBody(name='body'),
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControlPolicyItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlsRequest {
  ipControlId?: string(name='IpControlId', position='Query'),
  ipControlName?: string(name='IpControlName', position='Query'),
  ipControlType?: string(name='IpControlType', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlsResponseBody = {
  ipControlInfos?: {
    ipControlInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      ipControlId?: string(name='IpControlId'),
      ipControlName?: string(name='IpControlName'),
      ipControlType?: string(name='IpControlType'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='IpControlInfo')
  }(name='IpControlInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeIpControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpControlsResponseBody(name='body'),
}

async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLogConfigResponseBody = {
  logInfos?: {
    logInfo?: [ 
    {
      logType?: string(name='LogType'),
      regionId?: string(name='RegionId'),
      slsLogStore?: string(name='SlsLogStore'),
      slsProject?: string(name='SlsProject'),
    }
  ](name='LogInfo')
  }(name='LogInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogConfigResponseBody(name='body'),
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMarketRemainsQuotaRequest {
  domainName: string(name='DomainName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeMarketRemainsQuotaResponseBody = {
  remainsQuota?: long(name='RemainsQuota'),
  requestId?: string(name='RequestId'),
}

model DescribeMarketRemainsQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMarketRemainsQuotaResponseBody(name='body'),
}

async function describeMarketRemainsQuota(request: DescribeMarketRemainsQuotaRequest): DescribeMarketRemainsQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMarketRemainsQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModelsRequest {
  groupId: string(name='GroupId', position='Query'),
  modelId?: string(name='ModelId', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeModelsResponseBody = {
  modelDetails?: {
    modelDetail?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      modelId?: string(name='ModelId'),
      modelName?: string(name='ModelName'),
      modelRef?: string(name='ModelRef'),
      modifiedTime?: string(name='ModifiedTime'),
      schema?: string(name='Schema'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeModelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelsResponseBody(name='body'),
}

async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModels', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginSchemasRequest {
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePluginSchemasResponseBody = {
  pluginSchemas?: {
    pluginSchema?: [ 
    {
      description?: string(name='Description'),
      documentId?: string(name='DocumentId'),
      name?: string(name='Name'),
      supportClassic?: boolean(name='SupportClassic'),
      title?: string(name='Title'),
    }
  ](name='PluginSchema')
  }(name='PluginSchemas'),
  requestId?: string(name='RequestId'),
}

model DescribePluginSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginSchemasResponseBody(name='body'),
}

async function describePluginSchemas(request: DescribePluginSchemasRequest): DescribePluginSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginTemplatesRequest {
  language?: string(name='Language', position='Query'),
  pluginName?: string(name='PluginName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePluginTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  templates?: {
    template?: [ 
    {
      description?: string(name='Description'),
      documentAnchor?: string(name='DocumentAnchor'),
      documentId?: string(name='DocumentId'),
      sample?: string(name='Sample'),
      title?: string(name='Title'),
    }
  ](name='Template')
  }(name='Templates'),
}

model DescribePluginTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginTemplatesResponseBody(name='body'),
}

async function describePluginTemplates(request: DescribePluginTemplatesRequest): DescribePluginTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginsRequest {
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  pluginId?: string(name='PluginId', position='Query'),
  pluginName?: string(name='PluginName', position='Query'),
  pluginType?: string(name='PluginType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribePluginsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      pluginData?: string(name='PluginData'),
      pluginId?: string(name='PluginId'),
      pluginName?: string(name='PluginName'),
      pluginType?: string(name='PluginType'),
      regionId?: string(name='RegionId'),
      tags?: {
        tagInfo?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagInfo')
      }(name='Tags'),
    }
  ](name='PluginAttribute')
  }(name='Plugins'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePluginsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginsResponseBody(name='body'),
}

async function describePlugins(request: DescribePluginsRequest): DescribePluginsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePlugins', 'POST', '/', 'json', false, 'json', request);
}

model DescribePluginsByApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribePluginsByApiResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  plugins?: {
    pluginAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      pluginData?: string(name='PluginData'),
      pluginId?: string(name='PluginId'),
      pluginName?: string(name='PluginName'),
      pluginType?: string(name='PluginType'),
      regionId?: string(name='RegionId'),
    }
  ](name='PluginAttribute')
  }(name='Plugins'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePluginsByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePluginsByApiResponseBody(name='body'),
}

async function describePluginsByApi(request: DescribePluginsByApiRequest): DescribePluginsByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePluginsByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupResponseBody = {
  description?: string(name='Description'),
  domains?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='DomainItem')
  }(name='Domains'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  purchasedTime?: string(name='PurchasedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribePurchasedApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApiGroupResponseBody(name='body'),
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType'),
      description?: string(name='Description'),
      expireTime?: string(name='ExpireTime'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      invokeTimesMax?: long(name='InvokeTimesMax'),
      invokeTimesNow?: long(name='InvokeTimesNow'),
      purchasedTime?: string(name='PurchasedTime'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribePurchasedApisResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  purchasedApis?: {
    purchasedApi?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      purchasedTime?: string(name='PurchasedTime'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='PurchasedApi')
  }(name='PurchasedApis'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSignaturesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId?: string(name='SignatureId', position='Query'),
  signatureName?: string(name='SignatureName', position='Query'),
}

model DescribeSignaturesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  signatureInfos?: {
    signatureInfo?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      signatureId?: string(name='SignatureId'),
      signatureKey?: string(name='SignatureKey'),
      signatureName?: string(name='SignatureName'),
      signatureSecret?: string(name='SignatureSecret'),
    }
  ](name='SignatureInfo')
  }(name='SignatureInfos'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSignaturesResponseBody(name='body'),
}

async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSignatures', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSignaturesByApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeSignaturesByApiResponseBody = {
  requestId?: string(name='RequestId'),
  signatures?: {
    signatureItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      signatureId?: string(name='SignatureId'),
      signatureName?: string(name='SignatureName'),
    }
  ](name='SignatureItem')
  }(name='Signatures'),
}

model DescribeSignaturesByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSignaturesByApiResponseBody(name='body'),
}

async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSignaturesByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId'),
  systemParams?: {
    systemParamItem?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParamItem')
  }(name='SystemParams'),
}

model DescribeSystemParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemParametersResponseBody(name='body'),
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsRequest {
  apiId?: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  trafficControlId?: string(name='TrafficControlId', position='Query'),
  trafficControlName?: string(name='TrafficControlName', position='Query'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault'),
      appDefault?: int32(name='AppDefault'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey'),
              trafficValue?: int32(name='TrafficValue'),
            }
          ](name='Special')
          }(name='Specials'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
      trafficControlUnit?: string(name='TrafficControlUnit'),
      userDefault?: int32(name='UserDefault'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls'),
}

model DescribeTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficControlsResponseBody(name='body'),
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsByApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeTrafficControlsByApiResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlItems?: {
    trafficControlItem?: [ 
    {
      boundTime?: string(name='BoundTime'),
      trafficControlItemId?: string(name='TrafficControlItemId'),
      trafficControlItemName?: string(name='TrafficControlItemName'),
    }
  ](name='TrafficControlItem')
  }(name='TrafficControlItems'),
}

model DescribeTrafficControlsByApiResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficControlsByApiResponseBody(name='body'),
}

async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControlsByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpdateBackendTaskRequest {
  operationUid: string(name='OperationUid', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUpdateBackendTaskResponseBody = {
  apiUpdateBackendResults?: {
    apiUpdateBackendResult?: [ 
    {
      apiName?: string(name='ApiName'),
      apiUid?: string(name='ApiUid'),
      backendId?: string(name='BackendId'),
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
      updateStatus?: string(name='UpdateStatus'),
    }
  ](name='ApiUpdateBackendResult')
  }(name='ApiUpdateBackendResults'),
  requestId?: string(name='RequestId'),
}

model DescribeUpdateBackendTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpdateBackendTaskResponseBody(name='body'),
}

async function describeUpdateBackendTask(request: DescribeUpdateBackendTaskRequest): DescribeUpdateBackendTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpdateBackendTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUpdateVpcInfoTaskRequest {
  operationUid: string(name='OperationUid', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUpdateVpcInfoTaskResponseBody = {
  apiUpdateVpcInfoResults?: {
    apiUpdateVpcInfoResult?: [ 
    {
      apiName?: string(name='ApiName'),
      apiUid?: string(name='ApiUid'),
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
      updateStatus?: string(name='UpdateStatus'),
    }
  ](name='ApiUpdateVpcInfoResult')
  }(name='ApiUpdateVpcInfoResults'),
  requestId?: string(name='RequestId'),
}

model DescribeUpdateVpcInfoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUpdateVpcInfoTaskResponseBody(name='body'),
}

async function describeUpdateVpcInfoTask(request: DescribeUpdateVpcInfoTaskRequest): DescribeUpdateVpcInfoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUpdateVpcInfoTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcAccessesRequest {
  instanceId?: string(name='InstanceId', description='实例ID', position='Query'),
  name?: string(name='Name', description='VPC授权名称', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页码', position='Query'),
  pageSize?: int32(name='PageSize', description='每页展示条目', position='Query'),
  port?: string(name='Port', description='端口号', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcAccessId?: string(name='VpcAccessId', description='Vpc授权ID', position='Query'),
  vpcId?: string(name='VpcId', description='Vpc ID', position='Query'),
}

model DescribeVpcAccessesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vpcAccessAttributes?: {
    vpcAccessAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime', description='VPC授权的创建时间'),
      description?: string(name='Description', description='VPC授权的描述'),
      instanceId?: string(name='InstanceId', description='VPC中的后端服务信息'),
      name?: string(name='Name', description='VPC授权名称'),
      port?: int32(name='Port', description='VPC中的后端服务端口'),
      regionId?: string(name='RegionId', description='地域id'),
      vpcAccessId?: string(name='VpcAccessId', description='vpc授权ID'),
      vpcId?: string(name='VpcId', description='VPC的ID'),
      vpcTargetHostName?: string(name='VpcTargetHostName'),
    }
  ](name='VpcAccessAttribute')
  }(name='VpcAccessAttributes'),
}

model DescribeVpcAccessesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcAccessesResponseBody(name='body'),
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcAccesses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachPluginRequest {
  apiId?: string(name='ApiId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pluginId: string(name='PluginId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DetachPluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPluginResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPluginResponseBody(name='body'),
}

async function detachPlugin(request: DetachPluginRequest): DetachPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPlugin', 'POST', '/', 'json', false, 'json', request);
}

model DisableInstanceAccessControlRequest {
  aclId: string(name='AclId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DisableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableInstanceAccessControlResponse = {
  headers: map[string]string(name='headers'),
  body: DisableInstanceAccessControlResponseBody(name='body'),
}

async function disableInstanceAccessControl(request: DisableInstanceAccessControlRequest): DisableInstanceAccessControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInstanceAccessControl', 'POST', '/', 'json', false, 'json', request);
}

model DryRunSwaggerRequest {
  data: string(name='Data', position='Body'),
  dataFormat: string(name='DataFormat', position='Query'),
  globalCondition?: map[string]any(name='GlobalCondition', shrink='json', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  overwrite: boolean(name='Overwrite', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DryRunSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  globalCondition?: string(name='GlobalCondition'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
      modelOperation?: string(name='ModelOperation'),
      modelUid?: string(name='ModelUid'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
  requestId?: string(name='RequestId'),
  success?: {
    apiDryRunSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation'),
      apiSwagger?: string(name='ApiSwagger'),
      apiUid?: string(name='ApiUid'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='ApiDryRunSwaggerSuccess')
  }(name='Success'),
}

model DryRunSwaggerResponse = {
  headers: map[string]string(name='headers'),
  body: DryRunSwaggerResponseBody(name='body'),
}

async function dryRunSwagger(request: DryRunSwaggerRequest): DryRunSwaggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DryRunSwagger', 'POST', '/', 'json', true, 'form', request);
}

model EnableInstanceAccessControlRequest {
  aclId: string(name='AclId', position='Query'),
  aclType?: string(name='AclType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model EnableInstanceAccessControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableInstanceAccessControlResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceAccessControlResponseBody(name='body'),
}

async function enableInstanceAccessControl(request: EnableInstanceAccessControlRequest): EnableInstanceAccessControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstanceAccessControl', 'POST', '/', 'json', false, 'json', request);
}

model ImportOASRequest {
  authType?: string(name='AuthType', position='Query'),
  backendName?: string(name='BackendName', position='Query'),
  data: string(name='Data', position='Body'),
  groupId: string(name='GroupId', position='Query'),
  ignoreWarning?: boolean(name='IgnoreWarning', position='Query'),
  OASVersion?: string(name='OASVersion', position='Query'),
  overwrite: boolean(name='Overwrite', position='Query'),
  requestMode?: string(name='RequestMode', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  skipDryRun?: boolean(name='SkipDryRun', position='Query'),
}

model ImportOASResponseBody = {
  errorMessages?: {
    errorMessage?: [ string ](name='ErrorMessage')
  }(name='ErrorMessages'),
  failedApis?: {
    failedApi?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='FailedApi')
  }(name='FailedApis'),
  failedModels?: {
    failedModel?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
    }
  ](name='FailedModel')
  }(name='FailedModels'),
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
  successApis?: {
    successApi?: [ 
    {
      apiId?: string(name='ApiId'),
      apiOperation?: string(name='ApiOperation'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='SuccessApi')
  }(name='SuccessApis'),
  successModels?: {
    successModel?: [ 
    {
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
      modelOperation?: string(name='ModelOperation'),
      modelUid?: string(name='ModelUid'),
    }
  ](name='SuccessModel')
  }(name='SuccessModels'),
  warningMessages?: {
    warningMessage?: [ string ](name='WarningMessage')
  }(name='WarningMessages'),
}

model ImportOASResponse = {
  headers: map[string]string(name='headers'),
  body: ImportOASResponseBody(name='body'),
}

async function importOAS(request: ImportOASRequest): ImportOASResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportOAS', 'POST', '/', 'json', true, 'form', request);
}

model ImportSwaggerRequest {
  data: string(name='Data', position='Body'),
  dataFormat: string(name='DataFormat', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  globalCondition?: map[string]any(name='GlobalCondition', shrink='json', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  overwrite: boolean(name='Overwrite', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ImportSwaggerResponseBody = {
  failed?: {
    apiImportSwaggerFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='ApiImportSwaggerFailed')
  }(name='Failed'),
  modelFailed?: {
    apiImportModelFailed?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
    }
  ](name='ApiImportModelFailed')
  }(name='ModelFailed'),
  modelSuccess?: {
    apiImportModelSuccess?: [ 
    {
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
      modelOperation?: string(name='ModelOperation'),
      modelUid?: string(name='ModelUid'),
    }
  ](name='ApiImportModelSuccess')
  }(name='ModelSuccess'),
  requestId?: string(name='RequestId'),
  success?: {
    apiImportSwaggerSuccess?: [ 
    {
      apiOperation?: string(name='ApiOperation'),
      apiUid?: string(name='ApiUid'),
      httpMethod?: string(name='HttpMethod'),
      path?: string(name='Path'),
    }
  ](name='ApiImportSwaggerSuccess')
  }(name='Success'),
}

model ImportSwaggerResponse = {
  headers: map[string]string(name='headers'),
  body: ImportSwaggerResponseBody(name='body'),
}

async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportSwagger', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', position='Query'),
  apiId: string(name='ApiId', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  backendEnable?: boolean(name='BackendEnable', position='Query'),
  backendId?: string(name='BackendId', position='Query'),
  constantParameters?: string(name='ConstantParameters', position='Query'),
  description?: string(name='Description', position='Query'),
  disableInternet?: boolean(name='DisableInternet', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Query'),
  failResultSample?: string(name='FailResultSample', position='Query'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', position='Query'),
  requestConfig: string(name='RequestConfig', position='Query'),
  requestParameters?: string(name='RequestParameters', position='Query'),
  resultBodyModel?: string(name='ResultBodyModel', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Query'),
  resultSample?: string(name='ResultSample', position='Query'),
  resultType?: string(name='ResultType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Query'),
  systemParameters?: string(name='SystemParameters', position='Query'),
  visibility: string(name='Visibility', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', position='Query'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiResponseBody(name='body'),
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApi', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiConfigurationRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', position='Query'),
  apiId: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  appCodeAuthType?: string(name='AppCodeAuthType', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  backendName?: string(name='BackendName', position='Query'),
  bodyFormat?: string(name='BodyFormat', position='Query'),
  bodyModel?: string(name='BodyModel', position='Query'),
  contentTypeCategory?: string(name='ContentTypeCategory', position='Query'),
  contentTypeValue?: string(name='ContentTypeValue', position='Query'),
  description?: string(name='Description', position='Query'),
  disableInternet?: boolean(name='DisableInternet', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Query'),
  failResultSample?: string(name='FailResultSample', position='Query'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', position='Query'),
  functionComputeConfig?: string(name='FunctionComputeConfig', position='Query'),
  httpConfig?: string(name='HttpConfig', position='Query'),
  mockConfig?: string(name='MockConfig', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  ossConfig?: string(name='OssConfig', position='Query'),
  postBodyDescription?: string(name='PostBodyDescription', position='Query'),
  requestHttpMethod?: string(name='RequestHttpMethod', position='Query'),
  requestMode?: string(name='RequestMode', position='Query'),
  requestParameters?: string(name='RequestParameters', position='Query'),
  requestPath?: string(name='RequestPath', position='Query'),
  requestProtocol?: string(name='RequestProtocol', position='Query'),
  resultSample?: string(name='ResultSample', position='Query'),
  resultType?: string(name='ResultType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Query'),
  serviceProtocol?: string(name='ServiceProtocol', position='Query'),
  serviceTimeout?: int32(name='ServiceTimeout', position='Query'),
  useBackendService?: boolean(name='UseBackendService', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
  vpcConfig?: string(name='VpcConfig', position='Query'),
}

model ModifyApiConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiConfigurationResponseBody(name='body'),
}

async function modifyApiConfiguration(request: ModifyApiConfigurationRequest): ModifyApiConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupRequest {
  basePath?: string(name='BasePath', position='Query'),
  compatibleFlags?: string(name='CompatibleFlags', position='Query'),
  customTraceConfig?: string(name='CustomTraceConfig', position='Query'),
  customerConfigs?: string(name='CustomerConfigs', position='Query'),
  defaultDomain?: string(name='DefaultDomain', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  passthroughHeaders?: string(name='PassthroughHeaders', position='Query'),
  rpcPattern?: string(name='RpcPattern', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  userLogConfig?: string(name='UserLogConfig', position='Query'),
}

model ModifyApiGroupResponseBody = {
  basePath?: string(name='BasePath'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model ModifyApiGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiGroupResponseBody(name='body'),
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupVpcWhitelistRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcIds: string(name='VpcIds', position='Query'),
}

model ModifyApiGroupVpcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApiGroupVpcWhitelistResponseBody(name='body'),
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroupVpcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: long(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackendRequest {
  backendId: string(name='BackendId', position='Query'),
  backendName: string(name='BackendName', position='Query'),
  backendType: string(name='BackendType', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyBackendResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackendResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackendResponseBody(name='body'),
}

async function modifyBackend(request: ModifyBackendRequest): ModifyBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackend', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackendModelRequest {
  backendId?: string(name='BackendId', position='Query'),
  backendModelData?: string(name='BackendModelData', position='Query'),
  backendModelId?: string(name='BackendModelId', position='Query'),
  backendType?: string(name='BackendType', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model ModifyBackendModelResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model ModifyBackendModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackendModelResponseBody(name='body'),
}

async function modifyBackendModel(request: ModifyBackendModelRequest): ModifyBackendModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackendModel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatasetRequest {
  datasetId: string(name='DatasetId', position='Query'),
  datasetName: string(name='DatasetName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyDatasetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatasetResponseBody(name='body'),
}

async function modifyDataset(request: ModifyDatasetRequest): ModifyDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataset', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatasetItemRequest {
  datasetId: string(name='DatasetId', position='Query'),
  datasetItemId: string(name='DatasetItemId', position='Query'),
  description?: string(name='Description', position='Query'),
  expiredTime?: string(name='ExpiredTime', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyDatasetItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDatasetItemResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatasetItemResponseBody(name='body'),
}

async function modifyDatasetItem(request: ModifyDatasetItemRequest): ModifyDatasetItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatasetItem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceSpecRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceSpec: string(name='InstanceSpec', position='Query'),
  modifyAction?: string(name='ModifyAction', position='Query'),
  skipWaitSwitch?: boolean(name='SkipWaitSwitch', position='Query'),
  token: string(name='Token', position='Query'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlRequest {
  description?: string(name='Description', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  ipControlName?: string(name='IpControlName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpControlResponseBody(name='body'),
}

async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlPolicyItemRequest {
  appId?: string(name='AppId', position='Query'),
  cidrIp: string(name='CidrIp', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  policyItemId: string(name='PolicyItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpControlPolicyItemResponseBody(name='body'),
}

async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', position='Query'),
  slsProject: string(name='SlsProject', position='Query'),
}

model ModifyLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogConfigResponseBody(name='body'),
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyModelRequest {
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  modelName: string(name='ModelName', position='Query'),
  newModelName?: string(name='NewModelName', position='Query'),
  schema?: string(name='Schema', position='Query'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyModel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPluginRequest {
  description?: string(name='Description', position='Query'),
  pluginData?: string(name='PluginData', position='Query'),
  pluginId: string(name='PluginId', position='Query'),
  pluginName?: string(name='PluginName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ModifyPluginResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPluginResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPluginResponseBody(name='body'),
}

async function modifyPlugin(request: ModifyPluginRequest): ModifyPluginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPlugin', 'POST', '/', 'json', false, 'json', request);
}

model ModifySignatureRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', position='Query'),
  signatureKey?: string(name='SignatureKey', position='Query'),
  signatureName?: string(name='SignatureName', position='Query'),
  signatureSecret?: string(name='SignatureSecret', position='Query'),
}

model ModifySignatureResponseBody = {
  requestId?: string(name='RequestId'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
}

model ModifySignatureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySignatureResponseBody(name='body'),
}

async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySignature', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault', position='Query'),
  appDefault?: int32(name='AppDefault', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
  trafficControlName?: string(name='TrafficControlName', position='Query'),
  trafficControlUnit?: string(name='TrafficControlUnit', position='Query'),
  userDefault?: int32(name='UserDefault', position='Query'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTrafficControlResponseBody(name='body'),
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcAccessAndUpdateApisRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', position='Query'),
  port?: int32(name='Port', position='Query'),
  refresh?: boolean(name='Refresh', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  vpcTargetHostName?: string(name='VpcTargetHostName', position='Query'),
}

model ModifyVpcAccessAndUpdateApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model ModifyVpcAccessAndUpdateApisResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcAccessAndUpdateApisResponseBody(name='body'),
}

async function modifyVpcAccessAndUpdateApis(request: ModifyVpcAccessAndUpdateApisRequest): ModifyVpcAccessAndUpdateApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcAccessAndUpdateApis', 'POST', '/', 'json', false, 'json', request);
}

model OpenApiGatewayServiceRequest {
}

model OpenApiGatewayServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenApiGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenApiGatewayServiceResponseBody(name='body'),
}

async function openApiGatewayService(request: OpenApiGatewayServiceRequest): OpenApiGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenApiGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model QueryRequestLogsRequest {
  requestLogId: string(name='RequestLogId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model QueryRequestLogsResponseBody = {
  requestId?: string(name='RequestId'),
  requestLogs?: {
    requestLog?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      clientIp?: int32(name='ClientIp'),
      clientNonce?: string(name='ClientNonce'),
      consumerAppId?: string(name='ConsumerAppId'),
      consumerAppKey?: string(name='ConsumerAppKey'),
      customTraceId?: string(name='CustomTraceId'),
      domain?: string(name='Domain'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      exception?: string(name='Exception'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      httpMethod?: string(name='HttpMethod'),
      httpPath?: string(name='HttpPath'),
      initialRequestId?: string(name='InitialRequestId'),
      instanceId?: string(name='InstanceId'),
      jwtClaims?: string(name='JwtClaims'),
      region?: string(name='Region'),
      requestBody?: string(name='RequestBody'),
      requestHeaders?: string(name='RequestHeaders'),
      requestId?: string(name='RequestId'),
      requestProtocol?: string(name='RequestProtocol'),
      requestQueryString?: string(name='RequestQueryString'),
      requestSize?: string(name='RequestSize'),
      requestTime?: string(name='RequestTime'),
      responseBody?: string(name='ResponseBody'),
      responseHeaders?: string(name='ResponseHeaders'),
      responseSize?: string(name='ResponseSize'),
      serviceLatency?: string(name='ServiceLatency'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
      statusCode?: string(name='StatusCode'),
      totalLatency?: string(name='TotalLatency'),
      plugin?: string(name='plugin'),
    }
  ](name='RequestLog')
  }(name='RequestLogs'),
}

model QueryRequestLogsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRequestLogsResponseBody(name='body'),
}

async function queryRequestLogs(request: QueryRequestLogsRequest): QueryRequestLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRequestLogs', 'POST', '/', 'json', false, 'json', request);
}

model ReactivateDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReactivateDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReactivateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ReactivateDomainResponseBody(name='body'),
}

async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReactivateDomain', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAccessControlListEntryRequest {
  aclEntrys?: string(name='AclEntrys', position='Query'),
  aclId: string(name='AclId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveAccessControlListEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessControlListEntryResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAccessControlListEntryResponseBody(name='body'),
}

async function removeAccessControlListEntry(request: RemoveAccessControlListEntryRequest): RemoveAccessControlListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAccessControlListEntry', 'POST', '/', 'json', false, 'json', request);
}

model RemoveApisAuthoritiesRequest {
  apiIds: string(name='ApiIds', position='Query'),
  appId: long(name='AppId', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveApisAuthoritiesResponseBody(name='body'),
}

async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApisAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAppsAuthoritiesRequest {
  apiId: string(name='ApiId', position='Query'),
  appIds: string(name='AppIds', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppsAuthoritiesResponseBody(name='body'),
}

async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAppsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlApisRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIpControlApisResponseBody(name='body'),
}

async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlPolicyItemRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  policyItemIds: string(name='PolicyItemIds', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIpControlPolicyItemResponseBody(name='body'),
}

async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSignatureApisRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveSignatureApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSignatureApisResponseBody(name='body'),
}

async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSignatureApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTrafficControlApisRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model RemoveTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTrafficControlApisResponseBody(name='body'),
}

async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTrafficControlApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVpcAccessRequest {
  instanceId: string(name='InstanceId', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', position='Query'),
  port: int32(name='Port', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model RemoveVpcAccessResponseBody = {
  apis?: {
    api?: [ 
    {
      apiId?: string(name='ApiId'),
      groupId?: string(name='GroupId'),
      stageId?: string(name='StageId'),
    }
  ](name='Api')
  }(name='Apis'),
  requestId?: string(name='RequestId'),
}

model RemoveVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVpcAccessResponseBody(name='body'),
}

async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVpcAccess', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVpcAccessAndAbolishApisRequest {
  instanceId: string(name='InstanceId', position='Query'),
  needBatchWork?: boolean(name='NeedBatchWork', position='Query'),
  port: int32(name='Port', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model RemoveVpcAccessAndAbolishApisResponseBody = {
  operationId?: string(name='OperationId'),
  requestId?: string(name='RequestId'),
}

model RemoveVpcAccessAndAbolishApisResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVpcAccessAndAbolishApisResponseBody(name='body'),
}

async function removeVpcAccessAndAbolishApis(request: RemoveVpcAccessAndAbolishApisRequest): RemoveVpcAccessAndAbolishApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVpcAccessAndAbolishApis', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppCodeRequest {
  appCode: string(name='AppCode', position='Query'),
  newAppCode?: string(name='NewAppCode', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAppCodeResponseBody(name='body'),
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppCode', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppSecretRequest {
  appKey: string(name='AppKey', position='Query'),
  newAppSecret?: string(name='NewAppSecret', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppSecretResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAppSecretResponseBody(name='body'),
}

async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppSecret', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByAppRequest {
  appId: long(name='AppId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByAppResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByAppResponse = {
  headers: map[string]string(name='headers'),
  body: SdkGenerateByAppResponseBody(name='body'),
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByApp', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByAppForRegionRequest {
  appId: long(name='AppId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByAppForRegionResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByAppForRegionResponse = {
  headers: map[string]string(name='headers'),
  body: SdkGenerateByAppForRegionResponseBody(name='body'),
}

async function sdkGenerateByAppForRegion(request: SdkGenerateByAppForRegionRequest): SdkGenerateByAppForRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByAppForRegion', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByGroupResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SdkGenerateByGroupResponseBody(name='body'),
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetAccessControlListAttributeRequest {
  aclId: string(name='AclId', position='Query'),
  aclName: string(name='AclName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetAccessControlListAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessControlListAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: SetAccessControlListAttributeResponseBody(name='body'),
}

async function setAccessControlListAttribute(request: SetAccessControlListAttributeRequest): SetAccessControlListAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccessControlListAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SetApisAuthoritiesRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  appId: long(name='AppId', position='Query'),
  authValidTime?: string(name='AuthValidTime', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetApisAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApisAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: SetApisAuthoritiesResponseBody(name='body'),
}

async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApisAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model SetAppsAuthoritiesRequest {
  apiId: string(name='ApiId', position='Query'),
  appIds: string(name='AppIds', position='Query'),
  authValidTime?: string(name='AuthValidTime', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetAppsAuthoritiesResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAppsAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppsAuthoritiesResponseBody(name='body'),
}

async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAppsAuthorities', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainRequest {
  bindStageName?: string(name='BindStageName', position='Query'),
  customDomainType?: string(name='CustomDomainType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  isForce?: boolean(name='IsForce', position='Query'),
  isHttpRedirectToHttps?: boolean(name='IsHttpRedirectToHttps', position='Query'),
}

model SetDomainResponseBody = {
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  domainName?: string(name='DomainName'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model SetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainResponseBody(name='body'),
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainCertificateRequest {
  caCertificateBody?: string(name='CaCertificateBody', position='Query'),
  certificateBody?: string(name='CertificateBody', position='Query'),
  certificateName: string(name='CertificateName', position='Query'),
  certificatePrivateKey?: string(name='CertificatePrivateKey', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sslVerifyDepth?: string(name='SslVerifyDepth', position='Query'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainCertificateResponseBody(name='body'),
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainWebSocketStatusRequest {
  actionValue: string(name='ActionValue', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  WSSEnable?: string(name='WSSEnable', position='Query'),
}

model SetDomainWebSocketStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainWebSocketStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainWebSocketStatusResponseBody(name='body'),
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainWebSocketStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetIpControlApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpControlApisResponseBody(name='body'),
}

async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model SetSignatureApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  signatureId: string(name='SignatureId', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetSignatureApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetSignatureApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetSignatureApisResponseBody(name='body'),
}

async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSignatureApis', 'POST', '/', 'json', false, 'json', request);
}

model SetTrafficControlApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model SetTrafficControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetTrafficControlApisResponse = {
  headers: map[string]string(name='headers'),
  body: SetTrafficControlApisResponseBody(name='body'),
}

async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetTrafficControlApis', 'POST', '/', 'json', false, 'json', request);
}

model SetVpcAccessRequest {
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  port: int32(name='Port', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vpcTargetHostName?: string(name='VpcTargetHostName', position='Query'),
}

model SetVpcAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVpcAccessResponse = {
  headers: map[string]string(name='headers'),
  body: SetVpcAccessResponseBody(name='body'),
}

async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetVpcAccess', 'POST', '/', 'json', false, 'json', request);
}

model SetWildcardDomainPatternsRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns', position='Query'),
}

model SetWildcardDomainPatternsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetWildcardDomainPatternsResponse = {
  headers: map[string]string(name='headers'),
  body: SetWildcardDomainPatternsResponseBody(name='body'),
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWildcardDomainPatterns', 'POST', '/', 'json', false, 'json', request);
}

model SwitchApiRequest {
  apiId: string(name='ApiId', position='Query'),
  description: string(name='Description', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchApiResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchApiResponseBody(name='body'),
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchApi', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

